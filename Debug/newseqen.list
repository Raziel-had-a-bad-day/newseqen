
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bb0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001570  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2b8  0800b2b8  00020768  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2b8  0800b2b8  0001b2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2c0  0800b2c0  00020768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c0  0800b2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000768  20000000  0800b2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059d0  20000768  0800ba30  00020768  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006138  0800ba30  00026138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020768  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137ae  00000000  00000000  00020798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b5  00000000  00000000  00033f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  00036400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00037550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018817  00000000  00000000  00038598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e28  00000000  00000000  00050daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec22  00000000  00000000  00065bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  001047f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf8  00000000  00000000  001048bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001094b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000768 	.word	0x20000768
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009d30 	.word	0x08009d30

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000076c 	.word	0x2000076c
 80001d4:	08009d30 	.word	0x08009d30

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 36; i++) {      // find menu location
 8000b74:	4bb1      	ldr	r3, [pc, #708]	; (8000e3c <menu_vars+0x2e4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4baf      	ldr	r3, [pc, #700]	; (8000e3c <menu_vars+0x2e4>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4baf      	ldr	r3, [pc, #700]	; (8000e40 <menu_vars+0x2e8>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f009 f828 	bl	8009bf0 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4ba5      	ldr	r3, [pc, #660]	; (8000e3c <menu_vars+0x2e4>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < 36; i++) {      // find menu location
 8000bac:	4ba3      	ldr	r3, [pc, #652]	; (8000e3c <menu_vars+0x2e4>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba1      	ldr	r3, [pc, #644]	; (8000e3c <menu_vars+0x2e4>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba0      	ldr	r3, [pc, #640]	; (8000e3c <menu_vars+0x2e4>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b23      	cmp	r3, #35	; 0x23
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}

	if (menu_vars_index_limit[menu_countr]<var_index) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	4aa0      	ldr	r2, [pc, #640]	; (8000e44 <menu_vars+0x2ec>)
 8000bc4:	5cd3      	ldrb	r3, [r2, r3]
 8000bc6:	78fa      	ldrb	r2, [r7, #3]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d903      	bls.n	8000bd4 <menu_vars+0x7c>
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	4a9d      	ldr	r2, [pc, #628]	; (8000e44 <menu_vars+0x2ec>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bd4:	7dfb      	ldrb	r3, [r7, #23]
 8000bd6:	2b23      	cmp	r3, #35	; 0x23
 8000bd8:	f200 8165 	bhi.w	8000ea6 <menu_vars+0x34e>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <menu_vars+0x8c>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c75 	.word	0x08000c75
 8000be8:	08000c7b 	.word	0x08000c7b
 8000bec:	08000c87 	.word	0x08000c87
 8000bf0:	08000c95 	.word	0x08000c95
 8000bf4:	08000ca3 	.word	0x08000ca3
 8000bf8:	08000cb1 	.word	0x08000cb1
 8000bfc:	08000cbf 	.word	0x08000cbf
 8000c00:	08000cc5 	.word	0x08000cc5
 8000c04:	08000cd7 	.word	0x08000cd7
 8000c08:	08000ceb 	.word	0x08000ceb
 8000c0c:	08000cff 	.word	0x08000cff
 8000c10:	08000d13 	.word	0x08000d13
 8000c14:	08000d19 	.word	0x08000d19
 8000c18:	08000d2b 	.word	0x08000d2b
 8000c1c:	08000d3f 	.word	0x08000d3f
 8000c20:	08000d53 	.word	0x08000d53
 8000c24:	08000d67 	.word	0x08000d67
 8000c28:	08000d7b 	.word	0x08000d7b
 8000c2c:	08000d8f 	.word	0x08000d8f
 8000c30:	08000da3 	.word	0x08000da3
 8000c34:	08000db7 	.word	0x08000db7
 8000c38:	08000dcb 	.word	0x08000dcb
 8000c3c:	08000dd1 	.word	0x08000dd1
 8000c40:	08000dd7 	.word	0x08000dd7
 8000c44:	08000ddd 	.word	0x08000ddd
 8000c48:	08000de9 	.word	0x08000de9
 8000c4c:	08000df7 	.word	0x08000df7
 8000c50:	08000e05 	.word	0x08000e05
 8000c54:	08000e11 	.word	0x08000e11
 8000c58:	08000e1f 	.word	0x08000e1f
 8000c5c:	08000e2d 	.word	0x08000e2d
 8000c60:	08000e61 	.word	0x08000e61
 8000c64:	08000e6f 	.word	0x08000e6f
 8000c68:	08000e7d 	.word	0x08000e7d
 8000c6c:	08000e8b 	.word	0x08000e8b
 8000c70:	08000e99 	.word	0x08000e99
	case 0:     menu_vars_var1= NULL; break;
 8000c74:	2300      	movs	r3, #0
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	e118      	b.n	8000eac <menu_vars+0x354>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c7a:	78fb      	ldrb	r3, [r7, #3]
 8000c7c:	015b      	lsls	r3, r3, #5
 8000c7e:	4a72      	ldr	r2, [pc, #456]	; (8000e48 <menu_vars+0x2f0>)
 8000c80:	4413      	add	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	e112      	b.n	8000eac <menu_vars+0x354>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000c86:	78fb      	ldrb	r3, [r7, #3]
 8000c88:	015b      	lsls	r3, r3, #5
 8000c8a:	4a6f      	ldr	r2, [pc, #444]	; (8000e48 <menu_vars+0x2f0>)
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3301      	adds	r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	e10b      	b.n	8000eac <menu_vars+0x354>
	case 3:     menu_vars_var1= &LFO[var_index].gain    ; break;
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	015b      	lsls	r3, r3, #5
 8000c98:	4a6b      	ldr	r2, [pc, #428]	; (8000e48 <menu_vars+0x2f0>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	e104      	b.n	8000eac <menu_vars+0x354>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	015b      	lsls	r3, r3, #5
 8000ca6:	4a68      	ldr	r2, [pc, #416]	; (8000e48 <menu_vars+0x2f0>)
 8000ca8:	4413      	add	r3, r2
 8000caa:	3303      	adds	r3, #3
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	e0fd      	b.n	8000eac <menu_vars+0x354>
	case 5:     menu_vars_var1= &LFO[var_index].target    ; break;
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	4a64      	ldr	r2, [pc, #400]	; (8000e48 <menu_vars+0x2f0>)
 8000cb6:	4413      	add	r3, r2
 8000cb8:	3304      	adds	r3, #4
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	e0f6      	b.n	8000eac <menu_vars+0x354>
	case 6:     menu_vars_var1= NULL   ; break;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e0f3      	b.n	8000eac <menu_vars+0x354>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cca:	fb02 f303 	mul.w	r3, r2, r3
 8000cce:	4a5f      	ldr	r2, [pc, #380]	; (8000e4c <menu_vars+0x2f4>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	e0ea      	b.n	8000eac <menu_vars+0x354>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	4a5a      	ldr	r2, [pc, #360]	; (8000e4c <menu_vars+0x2f4>)
 8000ce2:	4413      	add	r3, r2
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	e0e0      	b.n	8000eac <menu_vars+0x354>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000cea:	78fb      	ldrb	r3, [r7, #3]
 8000cec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000cf0:	fb02 f303 	mul.w	r3, r2, r3
 8000cf4:	4a55      	ldr	r2, [pc, #340]	; (8000e4c <menu_vars+0x2f4>)
 8000cf6:	4413      	add	r3, r2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	e0d6      	b.n	8000eac <menu_vars+0x354>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d04:	fb02 f303 	mul.w	r3, r2, r3
 8000d08:	4a50      	ldr	r2, [pc, #320]	; (8000e4c <menu_vars+0x2f4>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3303      	adds	r3, #3
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	e0cc      	b.n	8000eac <menu_vars+0x354>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e0c9      	b.n	8000eac <menu_vars+0x354>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d18:	78fa      	ldrb	r2, [r7, #3]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	4a4b      	ldr	r2, [pc, #300]	; (8000e50 <menu_vars+0x2f8>)
 8000d24:	4413      	add	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e0c0      	b.n	8000eac <menu_vars+0x354>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4a46      	ldr	r2, [pc, #280]	; (8000e50 <menu_vars+0x2f8>)
 8000d36:	4413      	add	r3, r2
 8000d38:	3301      	adds	r3, #1
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	e0b6      	b.n	8000eac <menu_vars+0x354>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d3e:	78fa      	ldrb	r2, [r7, #3]
 8000d40:	4613      	mov	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	1a9b      	subs	r3, r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4a41      	ldr	r2, [pc, #260]	; (8000e50 <menu_vars+0x2f8>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	e0ac      	b.n	8000eac <menu_vars+0x354>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	4613      	mov	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	1a9b      	subs	r3, r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4a3c      	ldr	r2, [pc, #240]	; (8000e50 <menu_vars+0x2f8>)
 8000d5e:	4413      	add	r3, r2
 8000d60:	3303      	adds	r3, #3
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	e0a2      	b.n	8000eac <menu_vars+0x354>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000d66:	78fa      	ldrb	r2, [r7, #3]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4a37      	ldr	r2, [pc, #220]	; (8000e50 <menu_vars+0x2f8>)
 8000d72:	4413      	add	r3, r2
 8000d74:	3304      	adds	r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	e098      	b.n	8000eac <menu_vars+0x354>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000d7a:	78fa      	ldrb	r2, [r7, #3]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <menu_vars+0x2f8>)
 8000d86:	4413      	add	r3, r2
 8000d88:	3305      	adds	r3, #5
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	e08e      	b.n	8000eac <menu_vars+0x354>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000d8e:	78fa      	ldrb	r2, [r7, #3]
 8000d90:	4613      	mov	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	1a9b      	subs	r3, r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <menu_vars+0x2f8>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3306      	adds	r3, #6
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e084      	b.n	8000eac <menu_vars+0x354>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	4613      	mov	r3, r2
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4a28      	ldr	r2, [pc, #160]	; (8000e50 <menu_vars+0x2f8>)
 8000dae:	4413      	add	r3, r2
 8000db0:	3307      	adds	r3, #7
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	e07a      	b.n	8000eac <menu_vars+0x354>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	4613      	mov	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <menu_vars+0x2f8>)
 8000dc4:	4413      	add	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	e070      	b.n	8000eac <menu_vars+0x354>
	case 21:     menu_vars_var1= NULL   ; break;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e06d      	b.n	8000eac <menu_vars+0x354>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <menu_vars+0x2fc>)
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	e06a      	b.n	8000eac <menu_vars+0x354>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <menu_vars+0x300>)
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e067      	b.n	8000eac <menu_vars+0x354>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <menu_vars+0x2fc>)
 8000de0:	4413      	add	r3, r2
 8000de2:	3302      	adds	r3, #2
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	e061      	b.n	8000eac <menu_vars+0x354>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	3310      	adds	r3, #16
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <menu_vars+0x2fc>)
 8000dee:	4413      	add	r3, r2
 8000df0:	3303      	adds	r3, #3
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	e05a      	b.n	8000eac <menu_vars+0x354>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	3320      	adds	r3, #32
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <menu_vars+0x2fc>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3304      	adds	r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	e053      	b.n	8000eac <menu_vars+0x354>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <menu_vars+0x304>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e04d      	b.n	8000eac <menu_vars+0x354>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <menu_vars+0x304>)
 8000e16:	4413      	add	r3, r2
 8000e18:	3301      	adds	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	e046      	b.n	8000eac <menu_vars+0x354>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <menu_vars+0x304>)
 8000e24:	4413      	add	r3, r2
 8000e26:	3302      	adds	r3, #2
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	e03f      	b.n	8000eac <menu_vars+0x354>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <menu_vars+0x304>)
 8000e32:	4413      	add	r3, r2
 8000e34:	3303      	adds	r3, #3
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e038      	b.n	8000eac <menu_vars+0x354>
 8000e3a:	bf00      	nop
 8000e3c:	20000ac4 	.word	0x20000ac4
 8000e40:	20000244 	.word	0x20000244
 8000e44:	0800a494 	.word	0x0800a494
 8000e48:	20002b94 	.word	0x20002b94
 8000e4c:	20002cd4 	.word	0x20002cd4
 8000e50:	200001bc 	.word	0x200001bc
 8000e54:	20003760 	.word	0x20003760
 8000e58:	20003761 	.word	0x20003761
 8000e5c:	20000220 	.word	0x20000220
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <menu_vars+0x360>)
 8000e66:	4413      	add	r3, r2
 8000e68:	3304      	adds	r3, #4
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	e01e      	b.n	8000eac <menu_vars+0x354>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <menu_vars+0x360>)
 8000e74:	4413      	add	r3, r2
 8000e76:	3307      	adds	r3, #7
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e017      	b.n	8000eac <menu_vars+0x354>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000e7c:	78fb      	ldrb	r3, [r7, #3]
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <menu_vars+0x360>)
 8000e82:	4413      	add	r3, r2
 8000e84:	3306      	adds	r3, #6
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e010      	b.n	8000eac <menu_vars+0x354>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <menu_vars+0x360>)
 8000e90:	4413      	add	r3, r2
 8000e92:	3305      	adds	r3, #5
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	e009      	b.n	8000eac <menu_vars+0x354>
	case 35:     menu_vars_var1= &LFO[var_index].target_index    ; break;
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	015b      	lsls	r3, r3, #5
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <menu_vars+0x364>)
 8000e9e:	4413      	add	r3, r2
 8000ea0:	3305      	adds	r3, #5
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	e002      	b.n	8000eac <menu_vars+0x354>

	default :		menu_vars_var1= NULL   ; break;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	bf00      	nop

	}
    // copy back address  ,ok

	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000eac:	693b      	ldr	r3, [r7, #16]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000220 	.word	0x20000220
 8000ebc:	20002b94 	.word	0x20002b94

08000ec0 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000ec6:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <menu_parser+0x174>)
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed0:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000ed4:	4a58      	ldr	r2, [pc, #352]	; (8001038 <menu_parser+0x178>)
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000edc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000ee4:	f240 43aa 	movw	r3, #1194	; 0x4aa
 8000ee8:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 8000eea:	4b54      	ldr	r3, [pc, #336]	; (800103c <menu_parser+0x17c>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	8aba      	ldrh	r2, [r7, #20]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	f0c0 809a 	bcc.w	800102a <menu_parser+0x16a>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <menu_parser+0x17c>)
 8000ef8:	881b      	ldrh	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b50      	ldr	r3, [pc, #320]	; (8001040 <menu_parser+0x180>)
 8000efe:	441a      	add	r2, r3
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	6810      	ldr	r0, [r2, #0]
 8000f06:	6851      	ldr	r1, [r2, #4]
 8000f08:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<36;string_counter++){    	// test a single menu entry  , for now only the first record
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]
 8000f0e:	e072      	b.n	8000ff6 <menu_parser+0x136>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <menu_parser+0x184>)
 8000f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	6810      	ldr	r0, [r2, #0]
 8000f1c:	6851      	ldr	r1, [r2, #4]
 8000f1e:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8000f20:	1d39      	adds	r1, r7, #4
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	2208      	movs	r2, #8
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 fe61 	bl	8009bf0 <strncmp>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d15d      	bne.n	8000ff0 <menu_parser+0x130>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8000f34:	4b44      	ldr	r3, [pc, #272]	; (8001048 <menu_parser+0x188>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	2b6e      	cmp	r3, #110	; 0x6e
 8000f3a:	d909      	bls.n	8000f50 <menu_parser+0x90>
 8000f3c:	4b42      	ldr	r3, [pc, #264]	; (8001048 <menu_parser+0x188>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2b7f      	cmp	r3, #127	; 0x7f
 8000f42:	d805      	bhi.n	8000f50 <menu_parser+0x90>
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <menu_parser+0x188>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	3310      	adds	r3, #16
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <menu_parser+0x188>)
 8000f4e:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <menu_parser+0x188>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	2bed      	cmp	r3, #237	; 0xed
 8000f56:	d909      	bls.n	8000f6c <menu_parser+0xac>
 8000f58:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <menu_parser+0x188>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	2bff      	cmp	r3, #255	; 0xff
 8000f5e:	d805      	bhi.n	8000f6c <menu_parser+0xac>
 8000f60:	4b39      	ldr	r3, [pc, #228]	; (8001048 <menu_parser+0x188>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	3310      	adds	r3, #16
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <menu_parser+0x188>)
 8000f6a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <menu_parser+0x188>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8000f74:	d30a      	bcc.n	8000f8c <menu_parser+0xcc>
 8000f76:	4b34      	ldr	r3, [pc, #208]	; (8001048 <menu_parser+0x188>)
 8000f78:	881b      	ldrh	r3, [r3, #0]
 8000f7a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000f7e:	d205      	bcs.n	8000f8c <menu_parser+0xcc>
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <menu_parser+0x188>)
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3310      	adds	r3, #16
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b2f      	ldr	r3, [pc, #188]	; (8001048 <menu_parser+0x188>)
 8000f8a:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	041a      	lsls	r2, r3, #16
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <menu_parser+0x188>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f98:	18d1      	adds	r1, r2, r3
 8000f9a:	4b2c      	ldr	r3, [pc, #176]	; (800104c <menu_parser+0x18c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <menu_parser+0x190>)
 8000fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <menu_parser+0x18c>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b29      	ldr	r3, [pc, #164]	; (8001054 <menu_parser+0x194>)
 8000fb0:	18d0      	adds	r0, r2, r3
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <menu_parser+0x17c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	3b02      	subs	r3, #2
 8000fb8:	4a21      	ldr	r2, [pc, #132]	; (8001040 <menu_parser+0x180>)
 8000fba:	4413      	add	r3, r2
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f008 fe00 	bl	8009bc4 <memcpy>


			menu_title_count++;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <menu_parser+0x18c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <menu_parser+0x18c>)
 8000fce:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <menu_parser+0x188>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <menu_parser+0x188>)
 8000fda:	801a      	strh	r2, [r3, #0]
			space_check=0;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <menu_parser+0x198>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <menu_parser+0x17c>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	3308      	adds	r3, #8
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <menu_parser+0x17c>)
 8000fec:	801a      	strh	r2, [r3, #0]

			return;}
 8000fee:	e01d      	b.n	800102c <menu_parser+0x16c>
	for (string_counter=0;string_counter<36;string_counter++){    	// test a single menu entry  , for now only the first record
 8000ff0:	7dfb      	ldrb	r3, [r7, #23]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	75fb      	strb	r3, [r7, #23]
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
 8000ff8:	2b23      	cmp	r3, #35	; 0x23
 8000ffa:	d989      	bls.n	8000f10 <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <menu_parser+0x198>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d905      	bls.n	8001010 <menu_parser+0x150>
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <menu_parser+0x188>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <menu_parser+0x188>)
 800100e:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <menu_parser+0x198>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <menu_parser+0x198>)
 800101a:	701a      	strb	r2, [r3, #0]
	string_search++;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <menu_parser+0x17c>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <menu_parser+0x17c>)
 8001026:	801a      	strh	r2, [r3, #0]
	return;
 8001028:	e000      	b.n	800102c <menu_parser+0x16c>
		return;    }    // check if bigger than search area
 800102a:	bf00      	nop


}
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	08009ef8 	.word	0x08009ef8
 8001038:	08009f00 	.word	0x08009f00
 800103c:	2000378e 	.word	0x2000378e
 8001040:	08009fe0 	.word	0x08009fe0
 8001044:	20000244 	.word	0x20000244
 8001048:	20003790 	.word	0x20003790
 800104c:	20003793 	.word	0x20003793
 8001050:	20003794 	.word	0x20003794
 8001054:	20003994 	.word	0x20003994
 8001058:	20003792 	.word	0x20003792

0800105c <lfo_target_parse>:
void lfo_target_parse(void){    // records ptr for target options , works ok
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001062:	2300      	movs	r3, #0
 8001064:	71fb      	strb	r3, [r7, #7]
		for (n=0;n<10;n++){
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <lfo_target_parse+0xfc>)
 8001068:	2200      	movs	r2, #0
 800106a:	801a      	strh	r2, [r3, #0]
 800106c:	e06a      	b.n	8001144 <lfo_target_parse+0xe8>

			if (LFO[n].target) {  // test if above zero
 800106e:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <lfo_target_parse+0xfc>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	4a3a      	ldr	r2, [pc, #232]	; (800115c <lfo_target_parse+0x100>)
 8001074:	015b      	lsls	r3, r3, #5
 8001076:	4413      	add	r3, r2
 8001078:	3304      	adds	r3, #4
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d05b      	beq.n	8001138 <lfo_target_parse+0xdc>
				uint8_t target_input=LFO[n].target; // copy to avoid messed up pointer
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <lfo_target_parse+0xfc>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	4a35      	ldr	r2, [pc, #212]	; (800115c <lfo_target_parse+0x100>)
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	4413      	add	r3, r2
 800108a:	3304      	adds	r3, #4
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	71bb      	strb	r3, [r7, #6]


				for(skip=target_input ;skip<36;skip++){
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	e00a      	b.n	80010ac <lfo_target_parse+0x50>
					if (lfo_skip_list[target_input]==1)  target_input++;
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	4a31      	ldr	r2, [pc, #196]	; (8001160 <lfo_target_parse+0x104>)
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d102      	bne.n	80010a6 <lfo_target_parse+0x4a>
 80010a0:	79bb      	ldrb	r3, [r7, #6]
 80010a2:	3301      	adds	r3, #1
 80010a4:	71bb      	strb	r3, [r7, #6]
				for(skip=target_input ;skip<36;skip++){
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	3301      	adds	r3, #1
 80010aa:	71fb      	strb	r3, [r7, #7]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	2b23      	cmp	r3, #35	; 0x23
 80010b0:	d9f1      	bls.n	8001096 <lfo_target_parse+0x3a>

				}  // test against list

				if (target_input!=36)  {
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	2b24      	cmp	r3, #36	; 0x24
 80010b6:	d037      	beq.n	8001128 <lfo_target_parse+0xcc>


			LFO[n].target=target_input; // write back corrected value
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <lfo_target_parse+0xfc>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	4a27      	ldr	r2, [pc, #156]	; (800115c <lfo_target_parse+0x100>)
 80010be:	015b      	lsls	r3, r3, #5
 80010c0:	4413      	add	r3, r2
 80010c2:	3304      	adds	r3, #4
 80010c4:	79ba      	ldrb	r2, [r7, #6]
 80010c6:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=LFO[n].target_index;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <lfo_target_parse+0xfc>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <lfo_target_parse+0x100>)
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	4413      	add	r3, r2
 80010d2:	3305      	adds	r3, #5
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	717b      	strb	r3, [r7, #5]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80010d8:	797b      	ldrb	r3, [r7, #5]
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <lfo_target_parse+0x108>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	797a      	ldrb	r2, [r7, #5]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d903      	bls.n	80010ec <lfo_target_parse+0x90>
			{	target_index=menu_vars_index_limit[target_index]; }
 80010e4:	797b      	ldrb	r3, [r7, #5]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <lfo_target_parse+0x108>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	717b      	strb	r3, [r7, #5]
			LFO[n].target_index=target_index;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <lfo_target_parse+0xfc>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <lfo_target_parse+0x100>)
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	4413      	add	r3, r2
 80010f6:	3305      	adds	r3, #5
 80010f8:	797a      	ldrb	r2, [r7, #5]
 80010fa:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <lfo_target_parse+0x10c>)
 8001100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001104:	797a      	ldrb	r2, [r7, #5]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fd25 	bl	8000b58 <menu_vars>
 800110e:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           LFO[n].out_ptr =target_out_ptr;     // write ptr
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d010      	beq.n	8001138 <lfo_target_parse+0xdc>
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <lfo_target_parse+0xfc>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <lfo_target_parse+0x100>)
 800111c:	015b      	lsls	r3, r3, #5
 800111e:	4413      	add	r3, r2
 8001120:	331c      	adds	r3, #28
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e007      	b.n	8001138 <lfo_target_parse+0xdc>

				}
				else LFO[n].target=0;  // write back 0 if failed
 8001128:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <lfo_target_parse+0xfc>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <lfo_target_parse+0x100>)
 800112e:	015b      	lsls	r3, r3, #5
 8001130:	4413      	add	r3, r2
 8001132:	3304      	adds	r3, #4
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <lfo_target_parse+0xfc>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <lfo_target_parse+0xfc>)
 8001142:	801a      	strh	r2, [r3, #0]
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <lfo_target_parse+0xfc>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d990      	bls.n	800106e <lfo_target_parse+0x12>


			}
		}

	}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000aa2 	.word	0x20000aa2
 800115c:	20002b94 	.word	0x20002b94
 8001160:	200002d4 	.word	0x200002d4
 8001164:	0800a494 	.word	0x0800a494
 8001168:	20000244 	.word	0x20000244

0800116c <lfo_target_replace>:


	}

}
void lfo_target_replace(void){					// sttaight value replace  ,ok
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0


	for (n=0;n<10;n++){
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <lfo_target_replace+0xa4>)
 8001174:	2200      	movs	r2, #0
 8001176:	801a      	strh	r2, [r3, #0]
 8001178:	e03f      	b.n	80011fa <lfo_target_replace+0x8e>
		if (LFO[n].target) {         // check first for enable
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <lfo_target_replace+0xa4>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	4a25      	ldr	r2, [pc, #148]	; (8001214 <lfo_target_replace+0xa8>)
 8001180:	015b      	lsls	r3, r3, #5
 8001182:	4413      	add	r3, r2
 8001184:	3304      	adds	r3, #4
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d030      	beq.n	80011ee <lfo_target_replace+0x82>
			uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <lfo_target_replace+0xac>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	73bb      	strb	r3, [r7, #14]
			uint8_t right_shift=menu_vars_divider[LFO[n].target]+1;   // grab divider
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <lfo_target_replace+0xa4>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <lfo_target_replace+0xa8>)
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	4413      	add	r3, r2
 80011a0:	3304      	adds	r3, #4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <lfo_target_replace+0xb0>)
 80011a8:	5c9b      	ldrb	r3, [r3, r2]
 80011aa:	3301      	adds	r3, #1
 80011ac:	737b      	strb	r3, [r7, #13]
			uint8_t  *ptr_to_modify =LFO[n].out_ptr;       // select address , not always 8 bit ,ok
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <lfo_target_replace+0xa4>)
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <lfo_target_replace+0xa8>)
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	4413      	add	r3, r2
 80011b8:	331c      	adds	r3, #28
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (LFO[n].out [loop_position])>>7;  // 0-127, 64 default
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <lfo_target_replace+0xa4>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	4913      	ldr	r1, [pc, #76]	; (8001214 <lfo_target_replace+0xa8>)
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	440b      	add	r3, r1
 80011d0:	88db      	ldrh	r3, [r3, #6]
 80011d2:	09db      	lsrs	r3, r3, #7
 80011d4:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80011da:	88fb      	ldrh	r3, [r7, #6]
 80011dc:	73fb      	strb	r3, [r7, #15]

		if (var_replaced>159) var_replaced=159;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b9f      	cmp	r3, #159	; 0x9f
 80011e2:	d901      	bls.n	80011e8 <lfo_target_replace+0x7c>
 80011e4:	239f      	movs	r3, #159	; 0x9f
 80011e6:	73fb      	strb	r3, [r7, #15]

			*ptr_to_modify =var_replaced;   // replace original value,ok
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <lfo_target_replace+0xa4>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <lfo_target_replace+0xa4>)
 80011f8:	801a      	strh	r2, [r3, #0]
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <lfo_target_replace+0xa4>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	2b09      	cmp	r3, #9
 8001200:	d9bb      	bls.n	800117a <lfo_target_replace+0xe>
		}


	}

}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000aa2 	.word	0x20000aa2
 8001214:	20002b94 	.word	0x20002b94
 8001218:	20003aac 	.word	0x20003aac
 800121c:	0800a4b8 	.word	0x0800a4b8

08001220 <SPI_command>:



void SPI_command(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <SPI_command+0x68>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d128      	bne.n	8001280 <SPI_command+0x60>
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <SPI_command+0x6c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d124      	bne.n	8001280 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <SPI_command+0x70>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b29b      	uxth	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <SPI_command+0x2a>
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <SPI_command+0x74>)
 8001244:	22f8      	movs	r2, #248	; 0xf8
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e002      	b.n	8001250 <SPI_command+0x30>
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SPI_command+0x74>)
 800124c:	22fa      	movs	r2, #250	; 0xfa
 800124e:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <SPI_command+0x74>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <SPI_command+0x70>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	b29b      	uxth	r3, r3
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	b2db      	uxtb	r3, r3
 8001262:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <SPI_command+0x70>)
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	b2db      	uxtb	r3, r3
 800126c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 800126e:	4639      	mov	r1, r7
 8001270:	2303      	movs	r3, #3
 8001272:	2203      	movs	r2, #3
 8001274:	4808      	ldr	r0, [pc, #32]	; (8001298 <SPI_command+0x78>)
 8001276:	f006 fe50 	bl	8007f1a <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <SPI_command+0x68>)
 800127c:	2201      	movs	r2, #1
 800127e:	801a      	strh	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20001f06 	.word	0x20001f06
 800128c:	20001f0c 	.word	0x20001f0c
 8001290:	20001f0a 	.word	0x20001f0a
 8001294:	20001f08 	.word	0x20001f08
 8001298:	20006004 	.word	0x20006004

0800129c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
		time_proc++;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80012ae:	801a      	strh	r2, [r3, #0]
		//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012b2:	881b      	ldrh	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d105      	bne.n	80012ca <HAL_TIM_PeriodElapsedCallback+0x2e>
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	801a      	strh	r2, [r3, #0]
		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d106      	bne.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012da:	2201      	movs	r2, #1
 80012dc:	801a      	strh	r2, [r3, #0]
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80012e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e4:	801a      	strh	r2, [r3, #0]
		sample_point=sample_point & 1023;// this is 1
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012f4:	801a      	strh	r2, [r3, #0]
		play_hold=play_sample[sample_point]; // this is 2
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001300:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001306:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a10      	ldr	r2, [pc, #64]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10b      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x8e>
	{


	TIM3->CCR3=play_hold ;  // keep readin sample storage
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800131a:	63da      	str	r2, [r3, #60]	; 0x3c


	sample_point++; //this needs to be here or too fast and wrong sample rate
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001328:	801a      	strh	r2, [r3, #0]

	}

	}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20002b90 	.word	0x20002b90
 800133c:	200012ca 	.word	0x200012ca
 8001340:	200001b2 	.word	0x200001b2
 8001344:	200012ce 	.word	0x200012ce
 8001348:	20000ac8 	.word	0x20000ac8
 800134c:	200012cc 	.word	0x200012cc
 8001350:	40000400 	.word	0x40000400

08001354 <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
uint16_t menu_holder;

	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <analoginputloopb+0x14c>)
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	b29b      	uxth	r3, r3
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <analoginputloopb+0x150>)
 8001366:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001368:	4b4d      	ldr	r3, [pc, #308]	; (80014a0 <analoginputloopb+0x14c>)
 800136a:	889b      	ldrh	r3, [r3, #4]
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	b2da      	uxtb	r2, r3
 8001374:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <analoginputloopb+0x154>)
 8001376:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 8001378:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <analoginputloopb+0x14c>)
 800137a:	2200      	movs	r2, #0
 800137c:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 800137e:	4b4b      	ldr	r3, [pc, #300]	; (80014ac <analoginputloopb+0x158>)
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <analoginputloopb+0x14c>)
 8001384:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8001386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <analoginputloopb+0x15c>)
 8001392:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 8001394:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <analoginputloopb+0x160>)
 8001396:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001398:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <analoginputloopb+0x164>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	b2c9      	uxtb	r1, r1
 80013a0:	4b46      	ldr	r3, [pc, #280]	; (80014bc <analoginputloopb+0x168>)
 80013a2:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <analoginputloopb+0x164>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d103      	bne.n	80013bc <analoginputloopb+0x68>
 80013b4:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <analoginputloopb+0x164>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]
 80013ba:	e005      	b.n	80013c8 <analoginputloopb+0x74>
 80013bc:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <analoginputloopb+0x164>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <analoginputloopb+0x164>)
 80013c6:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80013c8:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <analoginputloopb+0x168>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <analoginputloopb+0x168>)
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b38      	ldr	r3, [pc, #224]	; (80014bc <analoginputloopb+0x168>)
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	4b36      	ldr	r3, [pc, #216]	; (80014bc <analoginputloopb+0x168>)
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	08db      	lsrs	r3, r3, #3
 80013f0:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 80013f2:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <analoginputloopb+0x16c>)
 80013f4:	88bb      	ldrh	r3, [r7, #4]
 80013f6:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 80013f8:	4b2d      	ldr	r3, [pc, #180]	; (80014b0 <analoginputloopb+0x15c>)
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <analoginputloopb+0x170>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d908      	bls.n	8001416 <analoginputloopb+0xc2>
 8001404:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <analoginputloopb+0x174>)
 8001406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <analoginputloopb+0x174>)
 8001414:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <analoginputloopb+0x15c>)
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <analoginputloopb+0x170>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d208      	bcs.n	8001434 <analoginputloopb+0xe0>
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <analoginputloopb+0x174>)
 8001424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001428:	b29b      	uxth	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <analoginputloopb+0x174>)
 8001432:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>383) enc2_temp=383;  //mem overflow somewhere
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <analoginputloopb+0x16c>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800143c:	d303      	bcc.n	8001446 <analoginputloopb+0xf2>
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <analoginputloopb+0x16c>)
 8001440:	f240 127f 	movw	r2, #383	; 0x17f
 8001444:	801a      	strh	r2, [r3, #0]
	if (enc_dir>160) enc_dir=160;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <analoginputloopb+0x174>)
 8001448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144c:	2ba0      	cmp	r3, #160	; 0xa0
 800144e:	dd02      	ble.n	8001456 <analoginputloopb+0x102>
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <analoginputloopb+0x174>)
 8001452:	22a0      	movs	r2, #160	; 0xa0
 8001454:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <analoginputloopb+0x174>)
 8001458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	da02      	bge.n	8001466 <analoginputloopb+0x112>
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <analoginputloopb+0x174>)
 8001462:	2200      	movs	r2, #0
 8001464:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <analoginputloopb+0x15c>)
 8001468:	881a      	ldrh	r2, [r3, #0]
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <analoginputloopb+0x170>)
 800146c:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <analoginputloopb+0x16c>)
 8001470:	881a      	ldrh	r2, [r3, #0]
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <analoginputloopb+0x158>)
 8001474:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <analoginputloopb+0x16c>)
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <analoginputloopb+0x178>)
 800147c:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <analoginputloopb+0x17c>)
 8001480:	881b      	ldrh	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <analoginputloopb+0x180>)
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	4a11      	ldr	r2, [pc, #68]	; (80014d0 <analoginputloopb+0x17c>)
 800148a:	8812      	ldrh	r2, [r2, #0]
 800148c:	091b      	lsrs	r3, r3, #4
 800148e:	b2d9      	uxtb	r1, r3
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <analoginputloopb+0x184>)
 8001492:	5499      	strb	r1, [r3, r2]


}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	20001f10 	.word	0x20001f10
 80014a4:	20000a92 	.word	0x20000a92
 80014a8:	20000a93 	.word	0x20000a93
 80014ac:	20001efe 	.word	0x20001efe
 80014b0:	20001ef6 	.word	0x20001ef6
 80014b4:	40000800 	.word	0x40000800
 80014b8:	20003aa9 	.word	0x20003aa9
 80014bc:	20003aa4 	.word	0x20003aa4
 80014c0:	20001efa 	.word	0x20001efa
 80014c4:	20001ef8 	.word	0x20001ef8
 80014c8:	20001f00 	.word	0x20001f00
 80014cc:	20001efc 	.word	0x20001efc
 80014d0:	20000a98 	.word	0x20000a98
 80014d4:	20000908 	.word	0x20000908
 80014d8:	20000788 	.word	0x20000788

080014dc <display_init>:
void display_init(void){
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <display_init+0x90>)
 80014e4:	1d3c      	adds	r4, r7, #4
 80014e6:	461d      	mov	r5, r3
 80014e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <display_init+0x94>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d132      	bne.n	8001562 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <display_init+0x98>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b06      	subs	r3, #6
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <display_init+0x9c>)
 8001508:	801a      	strh	r2, [r3, #0]
 800150a:	f000 fb81 	bl	8001c10 <displayBuffer2>
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <display_init+0x9c>)
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <display_init+0xa0>)
 8001516:	5c9b      	ldrb	r3, [r3, r2]
 8001518:	b29a      	uxth	r2, r3
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <display_init+0xa4>)
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <display_init+0x98>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d80b      	bhi.n	8001540 <display_init+0x64>
 8001528:	2003      	movs	r0, #3
 800152a:	f003 f93b 	bl	80047a4 <HAL_Delay>
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <display_init+0x98>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	3328      	adds	r3, #40	; 0x28
 8001536:	443b      	add	r3, r7
 8001538:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <display_init+0xa4>)
 800153e:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <display_init+0x98>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	b2da      	uxtb	r2, r3
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <display_init+0x98>)
 800154a:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <display_init+0x94>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	f7ff fe65 	bl	8001220 <SPI_command>
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <display_init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <display_init+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
 800156a:	bf00      	nop
 800156c:	08009f08 	.word	0x08009f08
 8001570:	20001f0c 	.word	0x20001f0c
 8001574:	20001f0d 	.word	0x20001f0d
 8001578:	20001f0e 	.word	0x20001f0e
 800157c:	20000000 	.word	0x20000000
 8001580:	20001f0a 	.word	0x20001f0a
 8001584:	20001f06 	.word	0x20001f06

08001588 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 800158e:	2300      	movs	r3, #0
 8001590:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <gfx_send+0x9c>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b23      	ldr	r3, [pc, #140]	; (8001628 <gfx_send+0xa0>)
 800159a:	5c9b      	ldrb	r3, [r3, r2]
 800159c:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <gfx_send+0xa4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d902      	bls.n	80015ac <gfx_send+0x24>
 80015a6:	23fa      	movs	r3, #250	; 0xfa
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	e001      	b.n	80015b0 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80015ac:	23f8      	movs	r3, #248	; 0xf8
 80015ae:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 80015c8:	4639      	mov	r1, r7
 80015ca:	2303      	movs	r3, #3
 80015cc:	2203      	movs	r2, #3
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <gfx_send+0xa8>)
 80015d0:	f006 fca3 	bl	8007f1a <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <gfx_send+0xa4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b11      	cmp	r3, #17
 80015da:	d103      	bne.n	80015e4 <gfx_send+0x5c>
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <gfx_send+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e005      	b.n	80015f0 <gfx_send+0x68>
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <gfx_send+0xa4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <gfx_send+0xa4>)
 80015ee:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <gfx_send+0x9c>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	f240 427f 	movw	r2, #1151	; 0x47f
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d109      	bne.n	8001610 <gfx_send+0x88>
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <gfx_send+0x9c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <gfx_send+0xac>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <gfx_send+0xa4>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]

		}
 800160e:	e005      	b.n	800161c <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <gfx_send+0x9c>)
 8001612:	881b      	ldrh	r3, [r3, #0]
 8001614:	3301      	adds	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b02      	ldr	r3, [pc, #8]	; (8001624 <gfx_send+0x9c>)
 800161a:	801a      	strh	r2, [r3, #0]
		}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20002766 	.word	0x20002766
 8001628:	200022e4 	.word	0x200022e4
 800162c:	20002768 	.word	0x20002768
 8001630:	20006004 	.word	0x20006004
 8001634:	20002776 	.word	0x20002776

08001638 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <gfx_clear+0x6c>)
 800163e:	2200      	movs	r2, #0
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	e01c      	b.n	800167e <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <gfx_clear+0x70>)
 8001646:	2202      	movs	r2, #2
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	e00e      	b.n	800166a <gfx_clear+0x32>
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <gfx_clear+0x6c>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <gfx_clear+0x70>)
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <gfx_clear+0x74>)
 800165a:	2100      	movs	r1, #0
 800165c:	54d1      	strb	r1, [r2, r3]
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <gfx_clear+0x70>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <gfx_clear+0x70>)
 8001668:	801a      	strh	r2, [r3, #0]
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <gfx_clear+0x70>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	2b11      	cmp	r3, #17
 8001670:	d9ec      	bls.n	800164c <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <gfx_clear+0x6c>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	3312      	adds	r3, #18
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <gfx_clear+0x6c>)
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <gfx_clear+0x6c>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001686:	d3dd      	bcc.n	8001644 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <gfx_clear+0x78>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <gfx_clear+0x7c>)
 8001690:	2200      	movs	r2, #0
 8001692:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <gfx_clear+0x80>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000aa2 	.word	0x20000aa2
 80016a8:	20000ac4 	.word	0x20000ac4
 80016ac:	200022e4 	.word	0x200022e4
 80016b0:	2000276a 	.word	0x2000276a
 80016b4:	20002766 	.word	0x20002766
 80016b8:	20002776 	.word	0x20002776

080016bc <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80016c6:	2300      	movs	r3, #0
 80016c8:	80fb      	strh	r3, [r7, #6]
 80016ca:	e006      	b.n	80016da <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <display_clear+0x38>)
 80016d0:	212f      	movs	r1, #47	; 0x2f
 80016d2:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	3301      	adds	r3, #1
 80016d8:	80fb      	strh	r3, [r7, #6]
 80016da:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <display_clear+0x3c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d3f3      	bcc.n	80016cc <display_clear+0x10>
	}


}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20005ab0 	.word	0x20005ab0
 80016f8:	20003aa2 	.word	0x20003aa2

080016fc <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <display_generate+0x48>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <display_generate+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	801a      	strh	r2, [r3, #0]
 800170c:	e009      	b.n	8001722 <display_generate+0x26>
	display_process();
 800170e:	f000 f863 	bl	80017d8 <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 8001712:	f000 fa7d 	bl	8001c10 <displayBuffer2>
	for (i=0;i<18;i++) {
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <display_generate+0x4c>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	b29a      	uxth	r2, r3
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <display_generate+0x4c>)
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <display_generate+0x4c>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	2b11      	cmp	r3, #17
 8001728:	d9f1      	bls.n	800170e <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <display_generate+0x48>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <display_generate+0x3c>
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <display_generate+0x50>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <display_generate+0x54>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20003aad 	.word	0x20003aad
 8001748:	20000ac4 	.word	0x20000ac4
 800174c:	2000276a 	.word	0x2000276a
 8001750:	20002776 	.word	0x20002776

08001754 <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
loop_counter3=1;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <display_fill+0x6c>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 8001760:	2300      	movs	r3, #0
 8001762:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <display_fill+0x70>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <display_fill+0x70>)
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001772:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 8001774:	88fa      	ldrh	r2, [r7, #6]
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	4413      	add	r3, r2
 800177a:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 800177c:	e00a      	b.n	8001794 <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <display_fill+0x70>)
 8001780:	88fb      	ldrh	r3, [r7, #6]
 8001782:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <display_fill+0x74>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 800178a:	f000 fa41 	bl	8001c10 <displayBuffer2>
	fill_counter++;
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	3301      	adds	r3, #1
 8001792:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	f403 7260 	and.w	r2, r3, #896	; 0x380
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	429a      	cmp	r2, r3
 800179e:	d0ee      	beq.n	800177e <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <display_fill+0x70>)
 80017a2:	88bb      	ldrh	r3, [r7, #4]
 80017a4:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <display_fill+0x78>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <display_fill+0x7c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <display_fill+0x80>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]


	}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20002777 	.word	0x20002777
 80017c4:	20001f0e 	.word	0x20001f0e
 80017c8:	200001b6 	.word	0x200001b6
 80017cc:	2000276a 	.word	0x2000276a
 80017d0:	20002766 	.word	0x20002766
 80017d4:	20002776 	.word	0x20002776

080017d8 <display_process>:



void display_process(void){							// keep data processing here
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 80017de:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <display_process+0x1f8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	336b      	adds	r3, #107	; 0x6b
 80017ea:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <display_process+0x1fc>)
 80017ee:	f993 3000 	ldrsb.w	r3, [r3]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <display_process+0x200>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d112      	bne.n	8001822 <display_process+0x4a>
 80017fc:	4b77      	ldr	r3, [pc, #476]	; (80019dc <display_process+0x204>)
 80017fe:	f993 3000 	ldrsb.w	r3, [r3]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10d      	bne.n	8001822 <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001806:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <display_process+0x208>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d109      	bne.n	8001822 <display_process+0x4a>
 800180e:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <display_process+0x20c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d105      	bne.n	8001822 <display_process+0x4a>
 8001816:	4b71      	ldr	r3, [pc, #452]	; (80019dc <display_process+0x204>)
 8001818:	2202      	movs	r2, #2
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <display_process+0x208>)
 800181e:	2211      	movs	r2, #17
 8001820:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 8001822:	4b6f      	ldr	r3, [pc, #444]	; (80019e0 <display_process+0x208>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d909      	bls.n	800183e <display_process+0x66>
 800182a:	4b6d      	ldr	r3, [pc, #436]	; (80019e0 <display_process+0x208>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	89bb      	ldrh	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	3310      	adds	r3, #16
 8001838:	b29a      	uxth	r2, r3
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <display_process+0x1f8>)
 800183c:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 800183e:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <display_process+0x208>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b04      	cmp	r3, #4
 8001844:	d907      	bls.n	8001856 <display_process+0x7e>
 8001846:	4b66      	ldr	r3, [pc, #408]	; (80019e0 <display_process+0x208>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b29a      	uxth	r2, r3
 800184c:	89bb      	ldrh	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b5f      	ldr	r3, [pc, #380]	; (80019d0 <display_process+0x1f8>)
 8001854:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001856:	4b64      	ldr	r3, [pc, #400]	; (80019e8 <display_process+0x210>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	4b63      	ldr	r3, [pc, #396]	; (80019ec <display_process+0x214>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	429a      	cmp	r2, r3
 8001864:	d014      	beq.n	8001890 <display_process+0xb8>
 8001866:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <display_process+0x1fc>)
 8001868:	f993 3000 	ldrsb.w	r3, [r3]
 800186c:	461a      	mov	r2, r3
 800186e:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <display_process+0x200>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d10c      	bne.n	8001890 <display_process+0xb8>
 8001876:	4b5d      	ldr	r3, [pc, #372]	; (80019ec <display_process+0x214>)
 8001878:	f9b3 2000 	ldrsh.w	r2, [r3]
 800187c:	4b5c      	ldr	r3, [pc, #368]	; (80019f0 <display_process+0x218>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001884:	4b59      	ldr	r3, [pc, #356]	; (80019ec <display_process+0x214>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <display_process+0x210>)
 800188e:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001890:	4b53      	ldr	r3, [pc, #332]	; (80019e0 <display_process+0x208>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 8082 	bne.w	800199e <display_process+0x1c6>
 800189a:	4b4e      	ldr	r3, [pc, #312]	; (80019d4 <display_process+0x1fc>)
 800189c:	f993 3000 	ldrsb.w	r3, [r3]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b4d      	ldr	r3, [pc, #308]	; (80019d8 <display_process+0x200>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d079      	beq.n	800199e <display_process+0x1c6>
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <display_process+0x204>)
 80018ac:	f993 3000 	ldrsb.w	r3, [r3]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d174      	bne.n	800199e <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 80018b4:	4b47      	ldr	r3, [pc, #284]	; (80019d4 <display_process+0x1fc>)
 80018b6:	f993 3000 	ldrsb.w	r3, [r3]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b46      	ldr	r3, [pc, #280]	; (80019d8 <display_process+0x200>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	da02      	bge.n	80018ca <display_process+0xf2>
 80018c4:	4b45      	ldr	r3, [pc, #276]	; (80019dc <display_process+0x204>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <display_process+0x1fc>)
 80018cc:	f993 3000 	ldrsb.w	r3, [r3]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <display_process+0x200>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dd02      	ble.n	80018e0 <display_process+0x108>
 80018da:	4b40      	ldr	r3, [pc, #256]	; (80019dc <display_process+0x204>)
 80018dc:	22ff      	movs	r2, #255	; 0xff
 80018de:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 80018e0:	4b3c      	ldr	r3, [pc, #240]	; (80019d4 <display_process+0x1fc>)
 80018e2:	f993 3000 	ldrsb.w	r3, [r3]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <display_process+0x200>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	da0b      	bge.n	8001908 <display_process+0x130>
 80018f0:	4b39      	ldr	r3, [pc, #228]	; (80019d8 <display_process+0x200>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <display_process+0x1fc>)
 80018f8:	f993 3000 	ldrsb.w	r3, [r3]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b2db      	uxtb	r3, r3
 8001902:	b25a      	sxtb	r2, r3
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <display_process+0x204>)
 8001906:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <display_process+0x1fc>)
 800190a:	f993 3000 	ldrsb.w	r3, [r3]
 800190e:	461a      	mov	r2, r3
 8001910:	4b31      	ldr	r3, [pc, #196]	; (80019d8 <display_process+0x200>)
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	dd0b      	ble.n	8001930 <display_process+0x158>
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <display_process+0x200>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <display_process+0x1fc>)
 8001920:	f993 3000 	ldrsb.w	r3, [r3]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	b25a      	sxtb	r2, r3
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <display_process+0x204>)
 800192e:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <display_process+0x200>)
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	b25a      	sxtb	r2, r3
 8001936:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <display_process+0x1fc>)
 8001938:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 800193a:	4b2e      	ldr	r3, [pc, #184]	; (80019f4 <display_process+0x21c>)
 800193c:	f993 3000 	ldrsb.w	r3, [r3]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db14      	blt.n	800196e <display_process+0x196>
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <display_process+0x21c>)
 8001946:	f993 3000 	ldrsb.w	r3, [r3]
 800194a:	461a      	mov	r2, r3
 800194c:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <display_process+0x220>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	dc0c      	bgt.n	800196e <display_process+0x196>
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <display_process+0x21c>)
 8001956:	f993 3000 	ldrsb.w	r3, [r3]
 800195a:	b2da      	uxtb	r2, r3
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <display_process+0x204>)
 800195e:	f993 3000 	ldrsb.w	r3, [r3]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	4413      	add	r3, r2
 8001966:	b2db      	uxtb	r3, r3
 8001968:	b25a      	sxtb	r2, r3
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <display_process+0x21c>)
 800196c:	701a      	strb	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <display_process+0x21c>)
 8001970:	f993 3000 	ldrsb.w	r3, [r3]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da04      	bge.n	8001982 <display_process+0x1aa>
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <display_process+0x220>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b25a      	sxtb	r2, r3
 800197e:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <display_process+0x21c>)
 8001980:	701a      	strb	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <display_process+0x21c>)
 8001984:	f993 3000 	ldrsb.w	r3, [r3]
 8001988:	461a      	mov	r2, r3
 800198a:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <display_process+0x220>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	dd02      	ble.n	8001998 <display_process+0x1c0>
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <display_process+0x21c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
		enc2_add=2;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <display_process+0x204>)
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <display_process+0x208>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d168      	bne.n	8001a78 <display_process+0x2a0>
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <display_process+0x204>)
 80019a8:	f993 3000 	ldrsb.w	r3, [r3]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d163      	bne.n	8001a78 <display_process+0x2a0>
	{



	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;   // look up up menu_titles_final
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <display_process+0x21c>)
 80019b2:	f993 3000 	ldrsb.w	r3, [r3]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b10      	ldr	r3, [pc, #64]	; (80019fc <display_process+0x224>)
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	0c1b      	lsrs	r3, r3, #16
 80019c0:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d11b      	bne.n	8001a00 <display_process+0x228>
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <display_process+0x20c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e01a      	b.n	8001a06 <display_process+0x22e>
 80019d0:	20001f0e 	.word	0x20001f0e
 80019d4:	200001b4 	.word	0x200001b4
 80019d8:	20001efe 	.word	0x20001efe
 80019dc:	200001b5 	.word	0x200001b5
 80019e0:	200001b6 	.word	0x200001b6
 80019e4:	20003aab 	.word	0x20003aab
 80019e8:	20003aaa 	.word	0x20003aaa
 80019ec:	20001f00 	.word	0x20001f00
 80019f0:	20003a94 	.word	0x20003a94
 80019f4:	20000240 	.word	0x20000240
 80019f8:	20003793 	.word	0x20003793
 80019fc:	20003794 	.word	0x20003794
	else target_display=0;
 8001a00:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <display_process+0x3f0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+5, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001a06:	89bb      	ldrh	r3, [r7, #12]
 8001a08:	3305      	adds	r3, #5
 8001a0a:	4a70      	ldr	r2, [pc, #448]	; (8001bcc <display_process+0x3f4>)
 8001a0c:	1898      	adds	r0, r3, r2
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4a6f      	ldr	r2, [pc, #444]	; (8001bd0 <display_process+0x3f8>)
 8001a14:	4413      	add	r3, r2
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f008 f8d2 	bl	8009bc4 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001a20:	7afb      	ldrb	r3, [r7, #11]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4a6a      	ldr	r2, [pc, #424]	; (8001bd0 <display_process+0x3f8>)
 8001a26:	4413      	add	r3, r2
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <display_process+0x3fc>)
 8001a2c:	6810      	ldr	r0, [r2, #0]
 8001a2e:	6851      	ldr	r1, [r2, #4]
 8001a30:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 8001a32:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <display_process+0x400>)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	4611      	mov	r1, r2
 8001a3a:	8019      	strh	r1, [r3, #0]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	0c12      	lsrs	r2, r2, #16
 8001a40:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001a42:	4b66      	ldr	r3, [pc, #408]	; (8001bdc <display_process+0x404>)
 8001a44:	f993 3000 	ldrsb.w	r3, [r3]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b64      	ldr	r3, [pc, #400]	; (8001be0 <display_process+0x408>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f008 f885 	bl	8009b68 <atoi>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b60      	ldr	r3, [pc, #384]	; (8001be4 <display_process+0x40c>)
 8001a64:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <display_process+0x40c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4859      	ldr	r0, [pc, #356]	; (8001bd4 <display_process+0x3fc>)
 8001a6e:	f7ff f873 	bl	8000b58 <menu_vars>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a5c      	ldr	r2, [pc, #368]	; (8001be8 <display_process+0x410>)
 8001a76:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001a78:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <display_process+0x414>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <display_process+0x2b0>
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <display_process+0x414>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d137      	bne.n	8001af8 <display_process+0x320>
	{


		uint16_t init_holder=init_b;
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <display_process+0x418>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1];    // this only grabs menu_title_count (&255)      , problem maybe here
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <display_process+0x404>)
 8001a90:	f993 3000 	ldrsb.w	r3, [r3]
 8001a94:	461a      	mov	r2, r3
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <display_process+0x41c>)
 8001a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <display_process+0x418>)
 8001aa0:	801a      	strh	r2, [r3, #0]
	//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <display_process+0x418>)
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	893b      	ldrh	r3, [r7, #8]
 8001aa8:	4053      	eors	r3, r2
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <display_process+0x2e6>
 8001ab4:	f7ff fe4e 	bl	8001754 <display_fill>
 8001ab8:	4b4f      	ldr	r3, [pc, #316]	; (8001bf8 <display_process+0x420>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]

	lcd_out3=*menu_vars_var;
 8001abe:	4b4a      	ldr	r3, [pc, #296]	; (8001be8 <display_process+0x410>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <display_process+0x424>)
 8001ac8:	801a      	strh	r2, [r3, #0]
	default_menu3[init_b]=((lcd_out3&255)>>4)+48; lcd_temp=lcd_out3; enc_dir=lcd_temp;       } // force enc_dir
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <display_process+0x424>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	111b      	asrs	r3, r3, #4
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	4a45      	ldr	r2, [pc, #276]	; (8001bf0 <display_process+0x418>)
 8001ada:	8812      	ldrh	r2, [r2, #0]
 8001adc:	3330      	adds	r3, #48	; 0x30
 8001ade:	b2d9      	uxtb	r1, r3
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <display_process+0x3f4>)
 8001ae2:	5499      	strb	r1, [r3, r2]
 8001ae4:	4b45      	ldr	r3, [pc, #276]	; (8001bfc <display_process+0x424>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <display_process+0x428>)
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <display_process+0x428>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <display_process+0x42c>)
 8001af6:	801a      	strh	r2, [r3, #0]

	if (disp_stepper==11) {default_menu3[feedback_loc+13]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+14]=menu_index_list[(enc_out1<<1)+1];}   // index display
 8001af8:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <display_process+0x414>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b0b      	cmp	r3, #11
 8001afe:	d114      	bne.n	8001b2a <display_process+0x352>
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <display_process+0x404>)
 8001b02:	f993 3000 	ldrsb.w	r3, [r3]
 8001b06:	005a      	lsls	r2, r3, #1
 8001b08:	89bb      	ldrh	r3, [r7, #12]
 8001b0a:	330d      	adds	r3, #13
 8001b0c:	4934      	ldr	r1, [pc, #208]	; (8001be0 <display_process+0x408>)
 8001b0e:	5c89      	ldrb	r1, [r1, r2]
 8001b10:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <display_process+0x3f4>)
 8001b12:	54d1      	strb	r1, [r2, r3]
 8001b14:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <display_process+0x404>)
 8001b16:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	89bb      	ldrh	r3, [r7, #12]
 8001b20:	330e      	adds	r3, #14
 8001b22:	492f      	ldr	r1, [pc, #188]	; (8001be0 <display_process+0x408>)
 8001b24:	5c89      	ldrb	r1, [r1, r2]
 8001b26:	4a29      	ldr	r2, [pc, #164]	; (8001bcc <display_process+0x3f4>)
 8001b28:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper==11))      // write LFO.target display
 8001b2a:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <display_process+0x3f0>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d019      	beq.n	8001b66 <display_process+0x38e>
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <display_process+0x414>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b0b      	cmp	r3, #11
 8001b38:	d115      	bne.n	8001b66 <display_process+0x38e>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <display_process+0x410>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>35) target_tmp1=0;    // check in case
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	2b23      	cmp	r3, #35	; 0x23
 8001b46:	d901      	bls.n	8001b4c <display_process+0x374>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
		memcpy(default_menu3+feedback_loc+12, *(menu_titles_final+target_tmp1),7);  // copy info for LFO
 8001b4c:	89bb      	ldrh	r3, [r7, #12]
 8001b4e:	330c      	adds	r3, #12
 8001b50:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <display_process+0x3f4>)
 8001b52:	1898      	adds	r0, r3, r2
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <display_process+0x3f8>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2207      	movs	r2, #7
 8001b60:	4619      	mov	r1, r3
 8001b62:	f008 f82f 	bl	8009bc4 <memcpy>

		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <display_process+0x414>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d109      	bne.n	8001b82 <display_process+0x3aa>
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <display_process+0x418>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	091b      	lsrs	r3, r3, #4
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <display_process+0x430>)
 8001b80:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <display_process+0x414>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d11a      	bne.n	8001bc0 <display_process+0x3e8>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001b8a:	4b20      	ldr	r3, [pc, #128]	; (8001c0c <display_process+0x434>)
 8001b8c:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	3312      	adds	r3, #18
 8001b94:	3230      	adds	r2, #48	; 0x30
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <display_process+0x3f4>)
 8001b9a:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <display_process+0x434>)
 8001b9e:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001ba2:	89bb      	ldrh	r3, [r7, #12]
 8001ba4:	3313      	adds	r3, #19
 8001ba6:	3230      	adds	r2, #48	; 0x30
 8001ba8:	b2d1      	uxtb	r1, r2
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <display_process+0x3f4>)
 8001bac:	54d1      	strb	r1, [r2, r3]
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <display_process+0x434>)
 8001bb0:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001bb4:	89bb      	ldrh	r3, [r7, #12]
 8001bb6:	3314      	adds	r3, #20
 8001bb8:	3230      	adds	r2, #48	; 0x30
 8001bba:	b2d1      	uxtb	r1, r2
 8001bbc:	4a03      	ldr	r2, [pc, #12]	; (8001bcc <display_process+0x3f4>)
 8001bbe:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001bc0:	bf00      	nop
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20003aab 	.word	0x20003aab
 8001bcc:	20005ab0 	.word	0x20005ab0
 8001bd0:	20000244 	.word	0x20000244
 8001bd4:	20003a98 	.word	0x20003a98
 8001bd8:	08009f2c 	.word	0x08009f2c
 8001bdc:	20000240 	.word	0x20000240
 8001be0:	20003994 	.word	0x20003994
 8001be4:	20003aa0 	.word	0x20003aa0
 8001be8:	20003a94 	.word	0x20003a94
 8001bec:	200001b6 	.word	0x200001b6
 8001bf0:	20001f0e 	.word	0x20001f0e
 8001bf4:	20003794 	.word	0x20003794
 8001bf8:	20003aad 	.word	0x20003aad
 8001bfc:	20002774 	.word	0x20002774
 8001c00:	20003aaa 	.word	0x20003aaa
 8001c04:	20001f00 	.word	0x20001f00
 8001c08:	20002769 	.word	0x20002769
 8001c0c:	20000908 	.word	0x20000908

08001c10 <displayBuffer2>:





void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <displayBuffer2+0xfc>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <displayBuffer2+0x100>)
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	3b2f      	subs	r3, #47	; 0x2f
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <displayBuffer2+0x104>)
 8001c2e:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <displayBuffer2+0xfc>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c3a:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3302      	adds	r3, #2
 8001c46:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001c52:	793b      	ldrb	r3, [r7, #4]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	461a      	mov	r2, r3
 8001c58:	00d2      	lsls	r2, r2, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	797b      	ldrb	r3, [r7, #5]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <displayBuffer2+0x104>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001c70:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <displayBuffer2+0x108>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11a      	bne.n	8001cae <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8001c78:	2300      	movs	r3, #0
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	e013      	b.n	8001ca6 <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001c7e:	79fa      	ldrb	r2, [r7, #7]
 8001c80:	883b      	ldrh	r3, [r7, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <displayBuffer2+0x10c>)
 8001c86:	5cd1      	ldrb	r1, [r2, r3]
 8001c88:	8878      	ldrh	r0, [r7, #2]
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4403      	add	r3, r0
 8001c96:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 8001c9a:	b2d1      	uxtb	r1, r2
 8001c9c:	4a20      	ldr	r2, [pc, #128]	; (8001d20 <displayBuffer2+0x110>)
 8001c9e:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9e8      	bls.n	8001c7e <displayBuffer2+0x6e>
 8001cac:	e016      	b.n	8001cdc <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 8001cae:	2300      	movs	r3, #0
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	e010      	b.n	8001cd6 <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8001cb4:	79fa      	ldrb	r2, [r7, #7]
 8001cb6:	883b      	ldrh	r3, [r7, #0]
 8001cb8:	18d1      	adds	r1, r2, r3
 8001cba:	8878      	ldrh	r0, [r7, #2]
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4403      	add	r3, r0
 8001cc8:	4a14      	ldr	r2, [pc, #80]	; (8001d1c <displayBuffer2+0x10c>)
 8001cca:	5c51      	ldrb	r1, [r2, r1]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <displayBuffer2+0x110>)
 8001cce:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8001cd0:	79fb      	ldrb	r3, [r7, #7]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	71fb      	strb	r3, [r7, #7]
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	2b07      	cmp	r3, #7
 8001cda:	d9eb      	bls.n	8001cb4 <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <displayBuffer2+0x108>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d106      	bne.n	8001cf2 <displayBuffer2+0xe2>
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <displayBuffer2+0x108>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <displayBuffer2+0x114>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8001cf0:	e005      	b.n	8001cfe <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <displayBuffer2+0x108>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <displayBuffer2+0x108>)
 8001cfc:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20001f0e 	.word	0x20001f0e
 8001d10:	20005ab0 	.word	0x20005ab0
 8001d14:	20000aa0 	.word	0x20000aa0
 8001d18:	200001b6 	.word	0x200001b6
 8001d1c:	200002f8 	.word	0x200002f8
 8001d20:	200022e4 	.word	0x200022e4
 8001d24:	200001b5 	.word	0x200001b5

08001d28 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	b0a0      	sub	sp, #128	; 0x80
 8001d2c:	af00      	add	r7, sp, #0
//	if (time_proc>580) time_final=time_proc;


//time_proc=0;

	time_proc=0;
 8001d2e:	4b82      	ldr	r3, [pc, #520]	; (8001f38 <sampling+0x210>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	801a      	strh	r2, [r3, #0]

uint8_t mask_i;


bank_write=0;
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <sampling+0x214>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
//time_proc=0;   //millis

//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 8001d3a:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <sampling+0x218>)
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <sampling+0x21c>)
 8001d40:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8001d48:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <sampling+0x220>)
 8001d4a:	785b      	ldrb	r3, [r3, #1]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <sampling+0x224>)
 8001d50:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d54:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8001d58:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da00      	bge.n	8001d62 <sampling+0x3a>
 8001d60:	331f      	adds	r3, #31
 8001d62:	115b      	asrs	r3, r3, #5
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <sampling+0x228>)
 8001d78:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8001d7c:	4b74      	ldr	r3, [pc, #464]	; (8001f50 <sampling+0x228>)
 8001d7e:	ed93 7a00 	vldr	s14, [r3]
 8001d82:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001f54 <sampling+0x22c>
 8001d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d8a:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <sampling+0x228>)
 8001d8c:	edc3 7a00 	vstr	s15, [r3]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2244      	movs	r2, #68	; 0x44
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f007 ff21 	bl	8009be0 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8001d9e:	4b6e      	ldr	r3, [pc, #440]	; (8001f58 <sampling+0x230>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	e00d      	b.n	8001dc2 <sampling+0x9a>
 8001da6:	4b6c      	ldr	r3, [pc, #432]	; (8001f58 <sampling+0x230>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3380      	adds	r3, #128	; 0x80
 8001dae:	443b      	add	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	f843 2c64 	str.w	r2, [r3, #-100]
 8001db6:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <sampling+0x230>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <sampling+0x230>)
 8001dc0:	801a      	strh	r2, [r3, #0]
 8001dc2:	4b65      	ldr	r3, [pc, #404]	; (8001f58 <sampling+0x230>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d9ed      	bls.n	8001da6 <sampling+0x7e>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8001dca:	4b64      	ldr	r3, [pc, #400]	; (8001f5c <sampling+0x234>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	4a64      	ldr	r2, [pc, #400]	; (8001f60 <sampling+0x238>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <sampling+0x23c>)
 8001ddc:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8001de0:	4b5e      	ldr	r3, [pc, #376]	; (8001f5c <sampling+0x234>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	4a5e      	ldr	r2, [pc, #376]	; (8001f60 <sampling+0x238>)
 8001de6:	fba2 1203 	umull	r1, r2, r2, r3
 8001dea:	0952      	lsrs	r2, r2, #5
 8001dec:	2164      	movs	r1, #100	; 0x64
 8001dee:	fb01 f202 	mul.w	r2, r1, r2
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4a5c      	ldr	r2, [pc, #368]	; (8001f68 <sampling+0x240>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <sampling+0x23c>)
 8001e04:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 8001e08:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <sampling+0x234>)
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <sampling+0x240>)
 8001e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e12:	08d9      	lsrs	r1, r3, #3
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <sampling+0x23c>)
 8001e24:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <sampling+0x244>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8001e2e:	2300      	movs	r3, #0
 8001e30:	833b      	strh	r3, [r7, #24]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <sampling+0x248>)
 8001e34:	1d3c      	adds	r4, r7, #4
 8001e36:	461d      	mov	r5, r3
 8001e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3c:	682b      	ldr	r3, [r5, #0]
 8001e3e:	7023      	strb	r3, [r4, #0]
adc_values[2]= 15; //force for now
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <sampling+0x24c>)
 8001e42:	220f      	movs	r2, #15
 8001e44:	809a      	strh	r2, [r3, #4]
if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8001e46:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <sampling+0x24c>)
 8001e48:	889b      	ldrh	r3, [r3, #4]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00e      	beq.n	8001e70 <sampling+0x148>
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <sampling+0x24c>)
 8001e54:	889b      	ldrh	r3, [r3, #4]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3380      	adds	r3, #128	; 0x80
 8001e5c:	443b      	add	r3, r7
 8001e5e:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 8001e62:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	767b      	strb	r3, [r7, #25]
 8001e6a:	237f      	movs	r3, #127	; 0x7f
 8001e6c:	76bb      	strb	r3, [r7, #26]
 8001e6e:	e00a      	b.n	8001e86 <sampling+0x15e>
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <sampling+0x24c>)
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	3380      	adds	r3, #128	; 0x80
 8001e7a:	443b      	add	r3, r7
 8001e7c:	f813 3c7c 	ldrb.w	r3, [r3, #-124]
 8001e80:	76bb      	strb	r3, [r7, #26]
 8001e82:	237f      	movs	r3, #127	; 0x7f
 8001e84:	767b      	strb	r3, [r7, #25]

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 8001e86:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <sampling+0x250>)
 8001e88:	791b      	ldrb	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d146      	bne.n	8001f1c <sampling+0x1f4>
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <sampling+0x250>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fc22 	bl	80006e0 <__aeabi_i2d>
 8001e9c:	a322      	add	r3, pc, #136	; (adr r3, 8001f28 <sampling+0x200>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe f9a1 	bl	80001e8 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fc81 	bl	80007b4 <__aeabi_d2f>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a31      	ldr	r2, [pc, #196]	; (8001f7c <sampling+0x254>)
 8001eb6:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 8001eb8:	4b2f      	ldr	r3, [pc, #188]	; (8001f78 <sampling+0x250>)
 8001eba:	785b      	ldrb	r3, [r3, #1]
 8001ebc:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fc0d 	bl	80006e0 <__aeabi_i2d>
 8001ec6:	a31a      	add	r3, pc, #104	; (adr r3, 8001f30 <sampling+0x208>)
 8001ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ecc:	f7fe f98c 	bl	80001e8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fc6c 	bl	80007b4 <__aeabi_d2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <sampling+0x250>)
 8001ee0:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <sampling+0x254>)
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <sampling+0x254>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <sampling+0x254>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <sampling+0x250>)
 8001efa:	ed93 7a04 	vldr	s14, [r3, #16]
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <sampling+0x250>)
 8001f00:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <sampling+0x250>)
 8001f0a:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <sampling+0x250>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <sampling+0x250>)
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <sampling+0x230>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	801a      	strh	r2, [r3, #0]
 8001f22:	e0ed      	b.n	8002100 <sampling+0x3d8>
 8001f24:	f3af 8000 	nop.w
 8001f28:	47ae147b 	.word	0x47ae147b
 8001f2c:	3f947ae1 	.word	0x3f947ae1
 8001f30:	47ae147b 	.word	0x47ae147b
 8001f34:	3f847ae1 	.word	0x3f847ae1
 8001f38:	20002b90 	.word	0x20002b90
 8001f3c:	200001b2 	.word	0x200001b2
 8001f40:	200012ce 	.word	0x200012ce
 8001f44:	20000ac2 	.word	0x20000ac2
 8001f48:	20003760 	.word	0x20003760
 8001f4c:	200021a0 	.word	0x200021a0
 8001f50:	2000276c 	.word	0x2000276c
 8001f54:	42a00000 	.word	0x42a00000
 8001f58:	20000ac4 	.word	0x20000ac4
 8001f5c:	20002774 	.word	0x20002774
 8001f60:	51eb851f 	.word	0x51eb851f
 8001f64:	20000908 	.word	0x20000908
 8001f68:	cccccccd 	.word	0xcccccccd
 8001f6c:	20001eda 	.word	0x20001eda
 8001f70:	08009f30 	.word	0x08009f30
 8001f74:	200001a8 	.word	0x200001a8
 8001f78:	20002cd4 	.word	0x20002cd4
 8001f7c:	20002770 	.word	0x20002770

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8001f80:	4b81      	ldr	r3, [pc, #516]	; (8002188 <sampling+0x460>)
 8001f82:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f86:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800218c <sampling+0x464>
 8001f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	d50e      	bpl.n	8001fb2 <sampling+0x28a>
 8001f94:	4b7c      	ldr	r3, [pc, #496]	; (8002188 <sampling+0x460>)
 8001f96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	; (8002190 <sampling+0x468>)
 8001f9c:	edd3 7a00 	vldr	s15, [r3]
 8001fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa4:	4b78      	ldr	r3, [pc, #480]	; (8002188 <sampling+0x460>)
 8001fa6:	edc3 7a02 	vstr	s15, [r3, #8]
 8001faa:	4b77      	ldr	r3, [pc, #476]	; (8002188 <sampling+0x460>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	4a76      	ldr	r2, [pc, #472]	; (8002188 <sampling+0x460>)
 8001fb0:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8001fb2:	4b75      	ldr	r3, [pc, #468]	; (8002188 <sampling+0x460>)
 8001fb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb8:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002194 <sampling+0x46c>
 8001fbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc4:	d522      	bpl.n	800200c <sampling+0x2e4>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <sampling+0x460>)
 8001fc8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fcc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002198 <sampling+0x470>
 8001fd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	dd18      	ble.n	800200c <sampling+0x2e4>
 8001fda:	4b6b      	ldr	r3, [pc, #428]	; (8002188 <sampling+0x460>)
 8001fdc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fe0:	4b6b      	ldr	r3, [pc, #428]	; (8002190 <sampling+0x468>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <sampling+0x460>)
 8001fec:	edc3 7a02 	vstr	s15, [r3, #8]
 8001ff0:	4b65      	ldr	r3, [pc, #404]	; (8002188 <sampling+0x460>)
 8001ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800219c <sampling+0x474>
 8001ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ffe:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002194 <sampling+0x46c>
 8002002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002006:	4b60      	ldr	r3, [pc, #384]	; (8002188 <sampling+0x460>)
 8002008:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 800200c:	4b5e      	ldr	r3, [pc, #376]	; (8002188 <sampling+0x460>)
 800200e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002012:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80021a0 <sampling+0x478>
 8002016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	dd17      	ble.n	8002050 <sampling+0x328>
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <sampling+0x460>)
 8002022:	edd3 7a02 	vldr	s15, [r3, #8]
 8002026:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80021a4 <sampling+0x47c>
 800202a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	d50d      	bpl.n	8002050 <sampling+0x328>
 8002034:	4b54      	ldr	r3, [pc, #336]	; (8002188 <sampling+0x460>)
 8002036:	4a5c      	ldr	r2, [pc, #368]	; (80021a8 <sampling+0x480>)
 8002038:	619a      	str	r2, [r3, #24]
 800203a:	4b53      	ldr	r3, [pc, #332]	; (8002188 <sampling+0x460>)
 800203c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002040:	4b51      	ldr	r3, [pc, #324]	; (8002188 <sampling+0x460>)
 8002042:	edd3 7a04 	vldr	s15, [r3, #16]
 8002046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204a:	4b4f      	ldr	r3, [pc, #316]	; (8002188 <sampling+0x460>)
 800204c:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <sampling+0x460>)
 8002052:	edd3 7a02 	vldr	s15, [r3, #8]
 8002056:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80021ac <sampling+0x484>
 800205a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	dd1e      	ble.n	80020a2 <sampling+0x37a>
 8002064:	4b48      	ldr	r3, [pc, #288]	; (8002188 <sampling+0x460>)
 8002066:	edd3 7a02 	vldr	s15, [r3, #8]
 800206a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80021b0 <sampling+0x488>
 800206e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002076:	d514      	bpl.n	80020a2 <sampling+0x37a>
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <sampling+0x460>)
 800207a:	ed93 7a02 	vldr	s14, [r3, #8]
 800207e:	4b42      	ldr	r3, [pc, #264]	; (8002188 <sampling+0x460>)
 8002080:	edd3 7a04 	vldr	s15, [r3, #16]
 8002084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <sampling+0x460>)
 800208a:	edc3 7a02 	vstr	s15, [r3, #8]
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <sampling+0x460>)
 8002090:	edd3 7a02 	vldr	s15, [r3, #8]
 8002094:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80021b0 <sampling+0x488>
 8002098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <sampling+0x460>)
 800209e:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 80020a2:	4b39      	ldr	r3, [pc, #228]	; (8002188 <sampling+0x460>)
 80020a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a8:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80021b4 <sampling+0x48c>
 80020ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b4:	dd06      	ble.n	80020c4 <sampling+0x39c>
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <sampling+0x460>)
 80020b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020bc:	619a      	str	r2, [r3, #24]
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <sampling+0x460>)
 80020c0:	4a3d      	ldr	r2, [pc, #244]	; (80021b8 <sampling+0x490>)
 80020c2:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 80020c4:	4b30      	ldr	r3, [pc, #192]	; (8002188 <sampling+0x460>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fb1b 	bl	8000704 <__aeabi_f2d>
 80020ce:	a32c      	add	r3, pc, #176	; (adr r3, 8002180 <sampling+0x458>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe f888 	bl	80001e8 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <sampling+0x494>)
 80020de:	8809      	ldrh	r1, [r1, #0]
 80020e0:	460c      	mov	r4, r1
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fb65 	bl	80007b4 <__aeabi_d2f>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4934      	ldr	r1, [pc, #208]	; (80021c0 <sampling+0x498>)
 80020ee:	00a3      	lsls	r3, r4, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <sampling+0x494>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <sampling+0x494>)
 80020fe:	801a      	strh	r2, [r3, #0]
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <sampling+0x494>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	2bff      	cmp	r3, #255	; 0xff
 8002106:	f67f af3b 	bls.w	8001f80 <sampling+0x258>


///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 800210a:	4b2c      	ldr	r3, [pc, #176]	; (80021bc <sampling+0x494>)
 800210c:	2200      	movs	r2, #0
 800210e:	801a      	strh	r2, [r3, #0]
 8002110:	e19d      	b.n	800244e <sampling+0x726>

	i_total=i+sample_pointB;
 8002112:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <sampling+0x494>)
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <sampling+0x49c>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	4413      	add	r3, r2
 800211c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	sampling_position=i>>6;   //   0-8 steps
 8002120:	4b26      	ldr	r3, [pc, #152]	; (80021bc <sampling+0x494>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	099b      	lsrs	r3, r3, #6
 8002126:	b29b      	uxth	r3, r3
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <sampling+0x4a0>)
 800212c:	701a      	strb	r2, [r3, #0]

	note_plain=seq.notes1[seq.pos & 7 ];
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <sampling+0x4a4>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	4a25      	ldr	r2, [pc, #148]	; (80021cc <sampling+0x4a4>)
 8002138:	4413      	add	r3, r2
 800213a:	789b      	ldrb	r3, [r3, #2]
 800213c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <sampling+0x494>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <sampling+0x4a8>)
 8002148:	5cd2      	ldrb	r2, [r2, r3]
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <sampling+0x494>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	0912      	lsrs	r2, r2, #4
 8002152:	b2d1      	uxtb	r1, r2
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <sampling+0x4ac>)
 8002156:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <sampling+0x4b0>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002160:	429a      	cmp	r2, r3
 8002162:	d83d      	bhi.n	80021e0 <sampling+0x4b8>
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <sampling+0x4b4>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	3301      	adds	r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <sampling+0x4b4>)
 8002174:	801a      	strh	r2, [r3, #0]
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <sampling+0x4b0>)
 8002178:	2200      	movs	r2, #0
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e036      	b.n	80021ec <sampling+0x4c4>
 800217e:	bf00      	nop
 8002180:	d2f1a9fc 	.word	0xd2f1a9fc
 8002184:	3f50624d 	.word	0x3f50624d
 8002188:	20002cd4 	.word	0x20002cd4
 800218c:	447a0000 	.word	0x447a0000
 8002190:	20002770 	.word	0x20002770
 8002194:	44bb8000 	.word	0x44bb8000
 8002198:	4479c000 	.word	0x4479c000
 800219c:	43fa0000 	.word	0x43fa0000
 80021a0:	44bb6000 	.word	0x44bb6000
 80021a4:	44fa0000 	.word	0x44fa0000
 80021a8:	43fa0000 	.word	0x43fa0000
 80021ac:	44f9e000 	.word	0x44f9e000
 80021b0:	451c4000 	.word	0x451c4000
 80021b4:	453b8000 	.word	0x453b8000
 80021b8:	457a0000 	.word	0x457a0000
 80021bc:	20000ac4 	.word	0x20000ac4
 80021c0:	20001ad8 	.word	0x20001ad8
 80021c4:	20000ac2 	.word	0x20000ac2
 80021c8:	20003aac 	.word	0x20003aac
 80021cc:	20003760 	.word	0x20003760
 80021d0:	20000908 	.word	0x20000908
 80021d4:	20000788 	.word	0x20000788
 80021d8:	20001f02 	.word	0x20001f02
 80021dc:	20001ed8 	.word	0x20001ed8
 80021e0:	4ba0      	ldr	r3, [pc, #640]	; (8002464 <sampling+0x73c>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b9e      	ldr	r3, [pc, #632]	; (8002464 <sampling+0x73c>)
 80021ea:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 80021f2:	4b9d      	ldr	r3, [pc, #628]	; (8002468 <sampling+0x740>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	4b9c      	ldr	r3, [pc, #624]	; (800246c <sampling+0x744>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	429a      	cmp	r2, r3
 8002202:	d009      	beq.n	8002218 <sampling+0x4f0>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002204:	4b98      	ldr	r3, [pc, #608]	; (8002468 <sampling+0x740>)
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	b29b      	uxth	r3, r3
 800220c:	b2da      	uxtb	r2, r3
 800220e:	4b97      	ldr	r3, [pc, #604]	; (800246c <sampling+0x744>)
 8002210:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002212:	2301      	movs	r3, #1
 8002214:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002218:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8108 	beq.w	8002432 <sampling+0x70a>
	{


		note[1].timeshift=(adc_values[0]>>2)&15; //assigned pots to start of loopers 0-16,works
 8002222:	4b93      	ldr	r3, [pc, #588]	; (8002470 <sampling+0x748>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b90      	ldr	r3, [pc, #576]	; (8002474 <sampling+0x74c>)
 8002234:	751a      	strb	r2, [r3, #20]
		note[2].timeshift=note[1].timeshift;
 8002236:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <sampling+0x74c>)
 8002238:	7d1a      	ldrb	r2, [r3, #20]
 800223a:	4b8e      	ldr	r3, [pc, #568]	; (8002474 <sampling+0x74c>)
 800223c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		note[3].timeshift=(adc_values[1]>>2)&15;
 8002240:	4b8b      	ldr	r3, [pc, #556]	; (8002470 <sampling+0x748>)
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	b29b      	uxth	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b88      	ldr	r3, [pc, #544]	; (8002474 <sampling+0x74c>)
 8002252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		note[4].timeshift=note[3].timeshift;
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <sampling+0x74c>)
 8002258:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800225c:	4b85      	ldr	r3, [pc, #532]	; (8002474 <sampling+0x74c>)
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		seq.loop[1]=((note[1].timeshift+(seq.pos&7))&15);
 8002262:	4b84      	ldr	r3, [pc, #528]	; (8002474 <sampling+0x74c>)
 8002264:	7d1a      	ldrb	r2, [r3, #20]
 8002266:	4b81      	ldr	r3, [pc, #516]	; (800246c <sampling+0x744>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4413      	add	r3, r2
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b7c      	ldr	r3, [pc, #496]	; (800246c <sampling+0x744>)
 800227c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=((note[2].timeshift+(seq.pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8002280:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <sampling+0x74c>)
 8002282:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002286:	4b79      	ldr	r3, [pc, #484]	; (800246c <sampling+0x744>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4413      	add	r3, r2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b74      	ldr	r3, [pc, #464]	; (800246c <sampling+0x744>)
 800229c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26


			seq.loop[3]=((note[1].timeshift+(seq.pos&7))&15); //sets looping point in sequence this is full 16 note
 80022a0:	4b74      	ldr	r3, [pc, #464]	; (8002474 <sampling+0x74c>)
 80022a2:	7d1a      	ldrb	r2, [r3, #20]
 80022a4:	4b71      	ldr	r3, [pc, #452]	; (800246c <sampling+0x744>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b6c      	ldr	r3, [pc, #432]	; (800246c <sampling+0x744>)
 80022ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

			seq.loop[4]=((note[2].timeshift+(seq.pos&7))&15);
 80022be:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <sampling+0x74c>)
 80022c0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <sampling+0x744>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	4b64      	ldr	r3, [pc, #400]	; (800246c <sampling+0x744>)
 80022da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		//seq.loop[4]=((note[2].timeshift+((seq.pos&15)>>1))&15); // half speed
			note[1].pitch=(seq.notes2[seq.loop[1]]>>4)+(note[1].transpose>>4);
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <sampling+0x744>)
 80022e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <sampling+0x744>)
 80022e8:	4413      	add	r3, r2
 80022ea:	7cdb      	ldrb	r3, [r3, #19]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b60      	ldr	r3, [pc, #384]	; (8002474 <sampling+0x74c>)
 80022f2:	7cdb      	ldrb	r3, [r3, #19]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	4b5d      	ldr	r3, [pc, #372]	; (8002474 <sampling+0x74c>)
 80022fe:	741a      	strb	r2, [r3, #16]
		note[2].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[2].transpose>>4);  //loop 8 notes from pos and x times
 8002300:	4b5a      	ldr	r3, [pc, #360]	; (800246c <sampling+0x744>)
 8002302:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002306:	461a      	mov	r2, r3
 8002308:	4b58      	ldr	r3, [pc, #352]	; (800246c <sampling+0x744>)
 800230a:	4413      	add	r3, r2
 800230c:	7cdb      	ldrb	r3, [r3, #19]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <sampling+0x74c>)
 8002314:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	b2db      	uxtb	r3, r3
 800231c:	4413      	add	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b54      	ldr	r3, [pc, #336]	; (8002474 <sampling+0x74c>)
 8002322:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(seq.notes2[seq.loop[1]]>>4)+(note[3].transpose>>4); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002324:	4b51      	ldr	r3, [pc, #324]	; (800246c <sampling+0x744>)
 8002326:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800232a:	461a      	mov	r2, r3
 800232c:	4b4f      	ldr	r3, [pc, #316]	; (800246c <sampling+0x744>)
 800232e:	4413      	add	r3, r2
 8002330:	7cdb      	ldrb	r3, [r3, #19]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <sampling+0x74c>)
 8002338:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4413      	add	r3, r2
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <sampling+0x74c>)
 8002346:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

	note[5].pitch=(seq.notes2[seq.loop[2]]>>4)+(note[5].transpose>>4);  //
 800234a:	4b48      	ldr	r3, [pc, #288]	; (800246c <sampling+0x744>)
 800234c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002350:	461a      	mov	r2, r3
 8002352:	4b46      	ldr	r3, [pc, #280]	; (800246c <sampling+0x744>)
 8002354:	4413      	add	r3, r2
 8002356:	7cdb      	ldrb	r3, [r3, #19]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b45      	ldr	r3, [pc, #276]	; (8002474 <sampling+0x74c>)
 800235e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4413      	add	r3, r2
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <sampling+0x74c>)
 800236c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		lfo_target_replace();
 8002370:	f7fe fefc 	bl	800116c <lfo_target_replace>

	note[5].pitch=MajorNote[note[5].pitch];    //this is for sine skip mask
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <sampling+0x74c>)
 8002376:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800237a:	461a      	mov	r2, r3
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <sampling+0x750>)
 800237e:	5c9a      	ldrb	r2, [r3, r2]
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <sampling+0x74c>)
 8002382:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	//note[5].pitch=(note[5].pitch*(note[5].detune))>>7 ; // works ok with single note @24 but   fails on other
	note[5].tuned=sine_lut[note[5].pitch];	//sets freq ,1.0594  * 16536 =17518  ,
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <sampling+0x74c>)
 8002388:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800238c:	461a      	mov	r2, r3
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <sampling+0x754>)
 8002390:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002394:	4b37      	ldr	r3, [pc, #220]	; (8002474 <sampling+0x74c>)
 8002396:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <sampling+0x74c>)
 800239c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023a0:	461a      	mov	r2, r3
 80023a2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80023a6:	fb02 f303 	mul.w	r3, r2, r3
 80023aa:	129b      	asrs	r3, r3, #10
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	4b31      	ldr	r3, [pc, #196]	; (8002474 <sampling+0x74c>)
 80023b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		mask_result =0;
 80023b4:	4b32      	ldr	r3, [pc, #200]	; (8002480 <sampling+0x758>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023c0:	e033      	b.n	800242a <sampling+0x702>

	if (note[mask_i].pitch) {
 80023c2:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80023c6:	492b      	ldr	r1, [pc, #172]	; (8002474 <sampling+0x74c>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	440b      	add	r3, r1
 80023d2:	3302      	adds	r3, #2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d022      	beq.n	8002420 <sampling+0x6f8>

	//	note[mask_i].pitch=(note[mask_i].pitch ;
		tune_Accu=sample_Noteadd[MajorNote[note[mask_i].pitch&15]];
 80023da:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80023de:	4925      	ldr	r1, [pc, #148]	; (8002474 <sampling+0x74c>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	3302      	adds	r3, #2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a21      	ldr	r2, [pc, #132]	; (8002478 <sampling+0x750>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b22      	ldr	r3, [pc, #136]	; (8002484 <sampling+0x75c>)
 80023fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023fe:	461a      	mov	r2, r3
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <sampling+0x760>)
 8002402:	601a      	str	r2, [r3, #0]


	note[mask_i].tuned=(tune_Accu);       } // relies on note channel clear , not good , clear not channel straight after
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <sampling+0x760>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 800240c:	b298      	uxth	r0, r3
 800240e:	4919      	ldr	r1, [pc, #100]	; (8002474 <sampling+0x74c>)
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	440b      	add	r3, r1
 800241a:	330c      	adds	r3, #12
 800241c:	4602      	mov	r2, r0
 800241e:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002420:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002424:	3301      	adds	r3, #1
 8002426:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800242a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800242e:	2b04      	cmp	r3, #4
 8002430:	d9c7      	bls.n	80023c2 <sampling+0x69a>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <sampling+0x764>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <sampling+0x71a>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 800243e:	f000 fd1b 	bl	8002e78 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <sampling+0x764>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <sampling+0x764>)
 800244c:	801a      	strh	r2, [r3, #0]
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <sampling+0x764>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002456:	f4ff ae5c 	bcc.w	8002112 <sampling+0x3ea>
// filter loop

uint8_t sine_zero;
int32_t  sample_temp1;
int32_t  sample_temp2;
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <sampling+0x764>)
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
 8002460:	e1c6      	b.n	80027f0 <sampling+0xac8>
 8002462:	bf00      	nop
 8002464:	20001f02 	.word	0x20001f02
 8002468:	20001ed8 	.word	0x20001ed8
 800246c:	20003760 	.word	0x20003760
 8002470:	200001a8 	.word	0x200001a8
 8002474:	200001bc 	.word	0x200001bc
 8002478:	08009f60 	.word	0x08009f60
 800247c:	20000144 	.word	0x20000144
 8002480:	200012d0 	.word	0x200012d0
 8002484:	08009f7c 	.word	0x08009f7c
 8002488:	20000a9c 	.word	0x20000a9c
 800248c:	20000ac4 	.word	0x20000ac4
	i_total=i+sample_pointB;
 8002490:	4bab      	ldr	r3, [pc, #684]	; (8002740 <sampling+0xa18>)
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	4bab      	ldr	r3, [pc, #684]	; (8002744 <sampling+0xa1c>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	4413      	add	r3, r2
 800249a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	sampling_position=(i>>6);
 800249e:	4ba8      	ldr	r3, [pc, #672]	; (8002740 <sampling+0xa18>)
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4ba7      	ldr	r3, [pc, #668]	; (8002748 <sampling+0xa20>)
 80024aa:	701a      	strb	r2, [r3, #0]

	if ((i&63)==0)	{  lfo_target_replace();    // update values , not too bad
 80024ac:	4ba4      	ldr	r3, [pc, #656]	; (8002740 <sampling+0xa18>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 8095 	bne.w	80025e4 <sampling+0x8bc>
 80024ba:	f7fe fe57 	bl	800116c <lfo_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.01)    ;   // need this for useful filter
 80024be:	4ba3      	ldr	r3, [pc, #652]	; (800274c <sampling+0xa24>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe f90c 	bl	80006e0 <__aeabi_i2d>
 80024c8:	a39b      	add	r3, pc, #620	; (adr r3, 8002738 <sampling+0xa10>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fd fe8b 	bl	80001e8 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f7fe f96b 	bl	80007b4 <__aeabi_d2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	ee00 3a10 	vmov	s0, r3
 80024e4:	f007 fafc 	bl	8009ae0 <arm_sin_f32>
 80024e8:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 80024ec:	4b96      	ldr	r3, [pc, #600]	; (8002748 <sampling+0xa20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024f4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fc:	4a94      	ldr	r2, [pc, #592]	; (8002750 <sampling+0xa28>)
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.01)    ;
 8002506:	4b91      	ldr	r3, [pc, #580]	; (800274c <sampling+0xa24>)
 8002508:	7a1b      	ldrb	r3, [r3, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f8e8 	bl	80006e0 <__aeabi_i2d>
 8002510:	a389      	add	r3, pc, #548	; (adr r3, 8002738 <sampling+0xa10>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	f7fd fe67 	bl	80001e8 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4610      	mov	r0, r2
 8002520:	4619      	mov	r1, r3
 8002522:	f7fe f947 	bl	80007b4 <__aeabi_d2f>
 8002526:	4603      	mov	r3, r0
 8002528:	ee00 3a10 	vmov	s0, r3
 800252c:	f007 fad8 	bl	8009ae0 <arm_sin_f32>
 8002530:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002534:	4b84      	ldr	r3, [pc, #528]	; (8002748 <sampling+0xa20>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800253c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002544:	4a82      	ldr	r2, [pc, #520]	; (8002750 <sampling+0xa28>)
 8002546:	3309      	adds	r3, #9
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edc3 7a00 	vstr	s15, [r3]
freq_temp=arm_sin_f32(filter[2].cutoff_1*0.01)    ;
 8002550:	4b7e      	ldr	r3, [pc, #504]	; (800274c <sampling+0xa24>)
 8002552:	7c1b      	ldrb	r3, [r3, #16]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe f8c3 	bl	80006e0 <__aeabi_i2d>
 800255a:	a377      	add	r3, pc, #476	; (adr r3, 8002738 <sampling+0xa10>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fd fe42 	bl	80001e8 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe f922 	bl	80007b4 <__aeabi_d2f>
 8002570:	4603      	mov	r3, r0
 8002572:	ee00 3a10 	vmov	s0, r3
 8002576:	f007 fab3 	bl	8009ae0 <arm_sin_f32>
 800257a:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 800257e:	4b72      	ldr	r3, [pc, #456]	; (8002748 <sampling+0xa20>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002586:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800258a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258e:	4a70      	ldr	r2, [pc, #448]	; (8002750 <sampling+0xa28>)
 8002590:	3312      	adds	r3, #18
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.01)    ;
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <sampling+0xa24>)
 800259c:	7e1b      	ldrb	r3, [r3, #24]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe f89e 	bl	80006e0 <__aeabi_i2d>
 80025a4:	a364      	add	r3, pc, #400	; (adr r3, 8002738 <sampling+0xa10>)
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f7fd fe1d 	bl	80001e8 <__aeabi_dmul>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	f7fe f8fd 	bl	80007b4 <__aeabi_d2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	ee00 3a10 	vmov	s0, r3
 80025c0:	f007 fa8e 	bl	8009ae0 <arm_sin_f32>
 80025c4:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80025c8:	4b5f      	ldr	r3, [pc, #380]	; (8002748 <sampling+0xa20>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025d0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80025d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d8:	4a5d      	ldr	r2, [pc, #372]	; (8002750 <sampling+0xa28>)
 80025da:	331b      	adds	r3, #27
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	edc3 7a00 	vstr	s15, [r3]

	}

// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 80025e4:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <sampling+0xa2c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a5b      	ldr	r2, [pc, #364]	; (8002758 <sampling+0xa30>)
 80025ea:	8992      	ldrh	r2, [r2, #12]
 80025ec:	4413      	add	r3, r2
 80025ee:	4a59      	ldr	r2, [pc, #356]	; (8002754 <sampling+0xa2c>)
 80025f0:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 80025f2:	4b58      	ldr	r3, [pc, #352]	; (8002754 <sampling+0xa2c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025fa:	db04      	blt.n	8002606 <sampling+0x8de>
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <sampling+0xa2c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	425b      	negs	r3, r3
 8002602:	4a54      	ldr	r2, [pc, #336]	; (8002754 <sampling+0xa2c>)
 8002604:	6013      	str	r3, [r2, #0]

	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 8002606:	4b53      	ldr	r3, [pc, #332]	; (8002754 <sampling+0xa2c>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a53      	ldr	r2, [pc, #332]	; (8002758 <sampling+0xa30>)
 800260c:	8b52      	ldrh	r2, [r2, #26]
 800260e:	4413      	add	r3, r2
 8002610:	4a50      	ldr	r2, [pc, #320]	; (8002754 <sampling+0xa2c>)
 8002612:	6053      	str	r3, [r2, #4]

			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 8002614:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <sampling+0xa2c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800261c:	db04      	blt.n	8002628 <sampling+0x900>
 800261e:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <sampling+0xa2c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	425b      	negs	r3, r3
 8002624:	4a4b      	ldr	r2, [pc, #300]	; (8002754 <sampling+0xa2c>)
 8002626:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 8002628:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <sampling+0xa2c>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a4a      	ldr	r2, [pc, #296]	; (8002758 <sampling+0xa30>)
 800262e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002630:	4413      	add	r3, r2
 8002632:	4a48      	ldr	r2, [pc, #288]	; (8002754 <sampling+0xa2c>)
 8002634:	6093      	str	r3, [r2, #8]

					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <sampling+0xa2c>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800263e:	db04      	blt.n	800264a <sampling+0x922>
 8002640:	4b44      	ldr	r3, [pc, #272]	; (8002754 <sampling+0xa2c>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	425b      	negs	r3, r3
 8002646:	4a43      	ldr	r2, [pc, #268]	; (8002754 <sampling+0xa2c>)
 8002648:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <sampling+0xa2c>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a42      	ldr	r2, [pc, #264]	; (8002758 <sampling+0xa30>)
 8002650:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8002652:	4413      	add	r3, r2
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <sampling+0xa2c>)
 8002656:	60d3      	str	r3, [r2, #12]

							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002658:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <sampling+0xa2c>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002660:	db04      	blt.n	800266c <sampling+0x944>
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <sampling+0xa2c>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	425b      	negs	r3, r3
 8002668:	4a3a      	ldr	r2, [pc, #232]	; (8002754 <sampling+0xa2c>)
 800266a:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <sampling+0xa2c>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	4a39      	ldr	r2, [pc, #228]	; (8002758 <sampling+0xa30>)
 8002672:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002676:	4413      	add	r3, r2
 8002678:	4a36      	ldr	r2, [pc, #216]	; (8002754 <sampling+0xa2c>)
 800267a:	6113      	str	r3, [r2, #16]

									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <sampling+0xa2c>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002684:	db04      	blt.n	8002690 <sampling+0x968>
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <sampling+0xa2c>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	425b      	negs	r3, r3
 800268c:	4a31      	ldr	r2, [pc, #196]	; (8002754 <sampling+0xa2c>)
 800268e:	6113      	str	r3, [r2, #16]

									sample_Accu[0] =sample_Accu[1] =sample_Accu[2]=sample_Accu[3] =0; //all zeroed
 8002690:	4b32      	ldr	r3, [pc, #200]	; (800275c <sampling+0xa34>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	4b31      	ldr	r3, [pc, #196]	; (800275c <sampling+0xa34>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4a30      	ldr	r2, [pc, #192]	; (800275c <sampling+0xa34>)
 800269c:	6093      	str	r3, [r2, #8]
 800269e:	4b2f      	ldr	r3, [pc, #188]	; (800275c <sampling+0xa34>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	4a2e      	ldr	r2, [pc, #184]	; (800275c <sampling+0xa34>)
 80026a4:	6053      	str	r3, [r2, #4]
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <sampling+0xa34>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a2c      	ldr	r2, [pc, #176]	; (800275c <sampling+0xa34>)
 80026ac:	6013      	str	r3, [r2, #0]



									sample_temp1=sample_accus[1]>>8; // needs cut a bit  ,default 20bit
 80026ae:	4b29      	ldr	r3, [pc, #164]	; (8002754 <sampling+0xa2c>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	121b      	asrs	r3, r3, #8
 80026b4:	667b      	str	r3, [r7, #100]	; 0x64
								    sample_Accu[0]=sample_temp1*note[1].velocity; // 20+8
 80026b6:	4b28      	ldr	r3, [pc, #160]	; (8002758 <sampling+0xa30>)
 80026b8:	7d5b      	ldrb	r3, [r3, #21]
 80026ba:	461a      	mov	r2, r3
 80026bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	4a26      	ldr	r2, [pc, #152]	; (800275c <sampling+0xa34>)
 80026c4:	6013      	str	r3, [r2, #0]

									sample_temp1=sample_accus[2]>>8; // needs cut a bit  ,default 20bit
 80026c6:	4b23      	ldr	r3, [pc, #140]	; (8002754 <sampling+0xa2c>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	121b      	asrs	r3, r3, #8
 80026cc:	667b      	str	r3, [r7, #100]	; 0x64
									sample_Accu[1]=sample_temp1*note[2].velocity; // 20+8
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <sampling+0xa30>)
 80026d0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80026d4:	461a      	mov	r2, r3
 80026d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	4a1f      	ldr	r2, [pc, #124]	; (800275c <sampling+0xa34>)
 80026de:	6053      	str	r3, [r2, #4]


									sample_temp1=sample_accus[3]>>8;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <sampling+0xa2c>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	121b      	asrs	r3, r3, #8
 80026e6:	667b      	str	r3, [r7, #100]	; 0x64
									sample_Accu[2] =sample_temp1*note[3].velocity;    // 64 default 20+8
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <sampling+0xa30>)
 80026ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026ee:	461a      	mov	r2, r3
 80026f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <sampling+0xa34>)
 80026f8:	6093      	str	r3, [r2, #8]


									sample_temp1=sine_out*	note[5].velocity;  // sine out is 16bit, add 4 then 16+8
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <sampling+0xa30>)
 80026fc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002700:	461a      	mov	r2, r3
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <sampling+0xa38>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fb02 f303 	mul.w	r3, r2, r3
 800270a:	667b      	str	r3, [r7, #100]	; 0x64
									sample_Accu[3] =sample_temp1>>4;
 800270c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800270e:	111b      	asrs	r3, r3, #4
 8002710:	4a12      	ldr	r2, [pc, #72]	; (800275c <sampling+0xa34>)
 8002712:	60d3      	str	r3, [r2, #12]


if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002714:	4b13      	ldr	r3, [pc, #76]	; (8002764 <sampling+0xa3c>)
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <sampling+0x9fe>
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <sampling+0xa30>)
 800271e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <sampling+0xa40>)
 8002724:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 8002726:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <sampling+0xa3c>)
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <sampling+0xa40>)
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	b29a      	uxth	r2, r3
 8002732:	e01b      	b.n	800276c <sampling+0xa44>
 8002734:	f3af 8000 	nop.w
 8002738:	47ae147b 	.word	0x47ae147b
 800273c:	3f847ae1 	.word	0x3f847ae1
 8002740:	20000ac4 	.word	0x20000ac4
 8002744:	20000ac2 	.word	0x20000ac2
 8002748:	20003aac 	.word	0x20003aac
 800274c:	20000220 	.word	0x20000220
 8002750:	20001f7c 	.word	0x20001f7c
 8002754:	20001edc 	.word	0x20001edc
 8002758:	200001bc 	.word	0x200001bc
 800275c:	20000aa4 	.word	0x20000aa4
 8002760:	20000a8c 	.word	0x20000a8c
 8002764:	20000a8a 	.word	0x20000a8a
 8002768:	20000a90 	.word	0x20000a90
 800276c:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <sampling+0xce8>)
 800276e:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002770:	4ba7      	ldr	r3, [pc, #668]	; (8002a10 <sampling+0xce8>)
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	09db      	lsrs	r3, r3, #7
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <sampling+0xa5c>
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8002782:	e002      	b.n	800278a <sampling+0xa62>
 8002784:	2301      	movs	r3, #1
 8002786:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 800278a:	4ba1      	ldr	r3, [pc, #644]	; (8002a10 <sampling+0xce8>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	4ba0      	ldr	r3, [pc, #640]	; (8002a14 <sampling+0xcec>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	015b      	lsls	r3, r3, #5
 8002796:	429a      	cmp	r2, r3
 8002798:	dd02      	ble.n	80027a0 <sampling+0xa78>
 800279a:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <sampling+0xce8>)
 800279c:	2200      	movs	r2, #0
 800279e:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine   distortion out when hcagning note
 80027a0:	f000 fafc 	bl	8002d9c <sine_count>
play_holder0[i]=sample_Accu[0];  // write to bank
 80027a4:	4b9c      	ldr	r3, [pc, #624]	; (8002a18 <sampling+0xcf0>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4b9c      	ldr	r3, [pc, #624]	; (8002a1c <sampling+0xcf4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a9c      	ldr	r2, [pc, #624]	; (8002a20 <sampling+0xcf8>)
 80027b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
play_holder1[i]=sample_Accu[1];
 80027b4:	4b98      	ldr	r3, [pc, #608]	; (8002a18 <sampling+0xcf0>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4b98      	ldr	r3, [pc, #608]	; (8002a1c <sampling+0xcf4>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	4a99      	ldr	r2, [pc, #612]	; (8002a24 <sampling+0xcfc>)
 80027c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 80027c4:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <sampling+0xcf0>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4b94      	ldr	r3, [pc, #592]	; (8002a1c <sampling+0xcf4>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4a96      	ldr	r2, [pc, #600]	; (8002a28 <sampling+0xd00>)
 80027d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
play_holder3[i]=sample_Accu[3];
 80027d4:	4b90      	ldr	r3, [pc, #576]	; (8002a18 <sampling+0xcf0>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	4b90      	ldr	r3, [pc, #576]	; (8002a1c <sampling+0xcf4>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	4a93      	ldr	r2, [pc, #588]	; (8002a2c <sampling+0xd04>)
 80027e0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80027e4:	4b8c      	ldr	r3, [pc, #560]	; (8002a18 <sampling+0xcf0>)
 80027e6:	881b      	ldrh	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	4b8a      	ldr	r3, [pc, #552]	; (8002a18 <sampling+0xcf0>)
 80027ee:	801a      	strh	r2, [r3, #0]
 80027f0:	4b89      	ldr	r3, [pc, #548]	; (8002a18 <sampling+0xcf0>)
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f8:	f4ff ae4a 	bcc.w	8002490 <sampling+0x768>
int32_t filter_Accu;


//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 80027fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002800:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				uint16_t crap_hold1=2000;
 8002804:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002808:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
				uint16_t crap_hold2=2000;
 800280c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002810:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002814:	4b80      	ldr	r3, [pc, #512]	; (8002a18 <sampling+0xcf0>)
 8002816:	2200      	movs	r2, #0
 8002818:	801a      	strh	r2, [r3, #0]
 800281a:	e030      	b.n	800287e <sampling+0xb56>
			{
				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <sampling+0xcf0>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b83      	ldr	r3, [pc, #524]	; (8002a30 <sampling+0xd08>)
 8002824:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002828:	461a      	mov	r2, r3
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	1a9a      	subs	r2, r3, r2
 8002830:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002834:	4413      	add	r3, r2
 8002836:	10db      	asrs	r3, r3, #3
 8002838:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 800283c:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9a      	subs	r2, r3, r2
 8002846:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800284a:	4413      	add	r3, r2
 800284c:	10db      	asrs	r3, r3, #3
 800284e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002852:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	1a9a      	subs	r2, r3, r2
 800285c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002860:	4413      	add	r3, r2
 8002862:	10d9      	asrs	r1, r3, #3
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <sampling+0xcf0>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	b289      	uxth	r1, r1
 800286c:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <sampling+0xd08>)
 800286e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002872:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <sampling+0xcf0>)
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	3301      	adds	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	4b67      	ldr	r3, [pc, #412]	; (8002a18 <sampling+0xcf0>)
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <sampling+0xcf0>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002886:	d3c9      	bcc.n	800281c <sampling+0xaf4>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002888:	4b63      	ldr	r3, [pc, #396]	; (8002a18 <sampling+0xcf0>)
 800288a:	2200      	movs	r2, #0
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	e25e      	b.n	8002d4e <sampling+0x1026>
	i_total=i+sample_pointB;
 8002890:	4b61      	ldr	r3, [pc, #388]	; (8002a18 <sampling+0xcf0>)
 8002892:	881a      	ldrh	r2, [r3, #0]
 8002894:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <sampling+0xd0c>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	4413      	add	r3, r2
 800289a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

sampling_position=(i>>6);
 800289e:	4b5e      	ldr	r3, [pc, #376]	; (8002a18 <sampling+0xcf0>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <sampling+0xd10>)
 80028aa:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80028ac:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <sampling+0xcf0>)
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	3380      	adds	r3, #128	; 0x80
 80028b8:	443b      	add	r3, r7
 80028ba:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80028be:	4a56      	ldr	r2, [pc, #344]	; (8002a18 <sampling+0xcf0>)
 80028c0:	8812      	ldrh	r2, [r2, #0]
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d10f      	bne.n	80028f0 <sampling+0xbc8>
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <sampling+0xd14>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	711a      	strb	r2, [r3, #4]
 80028d6:	4b5a      	ldr	r3, [pc, #360]	; (8002a40 <sampling+0xd18>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	4b58      	ldr	r3, [pc, #352]	; (8002a40 <sampling+0xd18>)
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <sampling+0xd18>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <sampling+0xd18>)
 80028ee:	801a      	strh	r2, [r3, #0]
//sample_Accu[1]=input_holder[i];

//sample_Accu[1]=(sample_Accu[1]-2020)<<14; // shift to correct level

//sample_Accu[1]=sample_Accu[1]-60000;
sample_Accu[0]=play_holder0[i];  // sine input
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <sampling+0xcf0>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <sampling+0xcf8>)
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	4a47      	ldr	r2, [pc, #284]	; (8002a1c <sampling+0xcf4>)
 80028fe:	6013      	str	r3, [r2, #0]
sample_Accu[1]=play_holder1[i] ; // saw
 8002900:	4b45      	ldr	r3, [pc, #276]	; (8002a18 <sampling+0xcf0>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <sampling+0xcfc>)
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	4a43      	ldr	r2, [pc, #268]	; (8002a1c <sampling+0xcf4>)
 800290e:	6053      	str	r3, [r2, #4]
sample_Accu[2]=play_holder2[i];  // sine input
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <sampling+0xcf0>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <sampling+0xd00>)
 8002918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291c:	4a3f      	ldr	r2, [pc, #252]	; (8002a1c <sampling+0xcf4>)
 800291e:	6093      	str	r3, [r2, #8]
sample_Accu[3]=play_holder3[i] ;
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <sampling+0xcf0>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <sampling+0xd04>)
 8002928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800292c:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <sampling+0xcf4>)
 800292e:	60d3      	str	r3, [r2, #12]




// this section is about 100 tmr cycles
if ((i&63)==0){
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <sampling+0xcf0>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 80d6 	bne.w	8002aea <sampling+0xdc2>
freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 800293e:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <sampling+0xd10>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <sampling+0xd1c>)
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3f      	ldr	r2, [pc, #252]	; (8002a48 <sampling+0xd20>)
 800294c:	6013      	str	r3, [r2, #0]

freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 800294e:	4b3a      	ldr	r3, [pc, #232]	; (8002a38 <sampling+0xd10>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	4a3c      	ldr	r2, [pc, #240]	; (8002a44 <sampling+0xd1c>)
 8002954:	3309      	adds	r3, #9
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a3a      	ldr	r2, [pc, #232]	; (8002a48 <sampling+0xd20>)
 800295e:	6093      	str	r3, [r2, #8]
freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <sampling+0xd10>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4a37      	ldr	r2, [pc, #220]	; (8002a44 <sampling+0xd1c>)
 8002966:	3312      	adds	r3, #18
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a36      	ldr	r2, [pc, #216]	; (8002a48 <sampling+0xd20>)
 8002970:	6113      	str	r3, [r2, #16]
freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8002972:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <sampling+0xd10>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <sampling+0xd1c>)
 8002978:	331b      	adds	r3, #27
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <sampling+0xd20>)
 8002982:	6193      	str	r3, [r2, #24]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <sampling+0xd20>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800298e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002996:	dd04      	ble.n	80029a2 <sampling+0xc7a>
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <sampling+0xd20>)
 800299a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e00b      	b.n	80029ba <sampling+0xc92>
 80029a2:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <sampling+0xd20>)
 80029a4:	edd3 7a00 	vldr	s15, [r3]
 80029a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	d503      	bpl.n	80029ba <sampling+0xc92>
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <sampling+0xd20>)
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <sampling+0xd20>)
 80029bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80029c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029cc:	dd04      	ble.n	80029d8 <sampling+0xcb0>
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <sampling+0xd20>)
 80029d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	e00b      	b.n	80029f0 <sampling+0xcc8>
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <sampling+0xd20>)
 80029da:	edd3 7a04 	vldr	s15, [r3, #16]
 80029de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	d503      	bpl.n	80029f0 <sampling+0xcc8>
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <sampling+0xd20>)
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 80029f0:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <sampling+0xd20>)
 80029f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a02:	dd23      	ble.n	8002a4c <sampling+0xd24>
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <sampling+0xd20>)
 8002a06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	e02a      	b.n	8002a64 <sampling+0xd3c>
 8002a0e:	bf00      	nop
 8002a10:	20000a8a 	.word	0x20000a8a
 8002a14:	20000142 	.word	0x20000142
 8002a18:	20000ac4 	.word	0x20000ac4
 8002a1c:	20000aa4 	.word	0x20000aa4
 8002a20:	200052b0 	.word	0x200052b0
 8002a24:	20003ab0 	.word	0x20003ab0
 8002a28:	200042b0 	.word	0x200042b0
 8002a2c:	20004ab0 	.word	0x20004ab0
 8002a30:	20002778 	.word	0x20002778
 8002a34:	20000ac2 	.word	0x20000ac2
 8002a38:	20003aac 	.word	0x20003aac
 8002a3c:	20002cd4 	.word	0x20002cd4
 8002a40:	2000200c 	.word	0x2000200c
 8002a44:	20001f7c 	.word	0x20001f7c
 8002a48:	20001f5c 	.word	0x20001f5c
 8002a4c:	4bb0      	ldr	r3, [pc, #704]	; (8002d10 <sampling+0xfe8>)
 8002a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	d503      	bpl.n	8002a64 <sampling+0xd3c>
 8002a5c:	4bac      	ldr	r3, [pc, #688]	; (8002d10 <sampling+0xfe8>)
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8002a64:	4baa      	ldr	r3, [pc, #680]	; (8002d10 <sampling+0xfe8>)
 8002a66:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	dd04      	ble.n	8002a82 <sampling+0xd5a>
 8002a78:	4ba5      	ldr	r3, [pc, #660]	; (8002d10 <sampling+0xfe8>)
 8002a7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a7e:	619a      	str	r2, [r3, #24]
 8002a80:	e00b      	b.n	8002a9a <sampling+0xd72>
 8002a82:	4ba3      	ldr	r3, [pc, #652]	; (8002d10 <sampling+0xfe8>)
 8002a84:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	d503      	bpl.n	8002a9a <sampling+0xd72>
 8002a92:	4b9f      	ldr	r3, [pc, #636]	; (8002d10 <sampling+0xfe8>)
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]

freq_point[1]=1-freq_point[0];
 8002a9a:	4b9d      	ldr	r3, [pc, #628]	; (8002d10 <sampling+0xfe8>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa8:	4b99      	ldr	r3, [pc, #612]	; (8002d10 <sampling+0xfe8>)
 8002aaa:	edc3 7a01 	vstr	s15, [r3, #4]
freq_point[3]=1-freq_point[2];
 8002aae:	4b98      	ldr	r3, [pc, #608]	; (8002d10 <sampling+0xfe8>)
 8002ab0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abc:	4b94      	ldr	r3, [pc, #592]	; (8002d10 <sampling+0xfe8>)
 8002abe:	edc3 7a03 	vstr	s15, [r3, #12]
freq_point[5]=1-freq_point[4];
 8002ac2:	4b93      	ldr	r3, [pc, #588]	; (8002d10 <sampling+0xfe8>)
 8002ac4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <sampling+0xfe8>)
 8002ad2:	edc3 7a05 	vstr	s15, [r3, #20]
freq_point[7]=1-freq_point[6];
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <sampling+0xfe8>)
 8002ad8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <sampling+0xfe8>)
 8002ae6:	edc3 7a07 	vstr	s15, [r3, #28]





		filter_accus[1]=sample_Accu[0]; // saw
 8002aea:	4b8a      	ldr	r3, [pc, #552]	; (8002d14 <sampling+0xfec>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <sampling+0xff0>)
 8002af8:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <sampling+0xff0>)
 8002afe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b02:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <sampling+0xfe8>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0c:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <sampling+0xff0>)
 8002b0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002b12:	4b7f      	ldr	r3, [pc, #508]	; (8002d10 <sampling+0xfe8>)
 8002b14:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	4b7d      	ldr	r3, [pc, #500]	; (8002d18 <sampling+0xff0>)
 8002b22:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8002b26:	4b7c      	ldr	r3, [pc, #496]	; (8002d18 <sampling+0xff0>)
 8002b28:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b2c:	4b78      	ldr	r3, [pc, #480]	; (8002d10 <sampling+0xfe8>)
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b36:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <sampling+0xff0>)
 8002b38:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <sampling+0xfe8>)
 8002b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4a:	4b73      	ldr	r3, [pc, #460]	; (8002d18 <sampling+0xff0>)
 8002b4c:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 8002b50:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <sampling+0xff0>)
 8002b52:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5a:	ee17 2a90 	vmov	r2, s15
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <sampling+0xfec>)
 8002b60:	601a      	str	r2, [r3, #0]

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8002b62:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <sampling+0xfec>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6e:	4b6a      	ldr	r3, [pc, #424]	; (8002d18 <sampling+0xff0>)
 8002b70:	edc3 7a04 	vstr	s15, [r3, #16]

		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <sampling+0xff0>)
 8002b76:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <sampling+0xfe8>)
 8002b7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <sampling+0xff0>)
 8002b86:	edd3 6a05 	vldr	s13, [r3, #20]
 8002b8a:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <sampling+0xfe8>)
 8002b8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b98:	4b5f      	ldr	r3, [pc, #380]	; (8002d18 <sampling+0xff0>)
 8002b9a:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8002b9e:	4b5e      	ldr	r3, [pc, #376]	; (8002d18 <sampling+0xff0>)
 8002ba0:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ba4:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <sampling+0xfe8>)
 8002ba6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002baa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bae:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <sampling+0xff0>)
 8002bb0:	edd3 6a06 	vldr	s13, [r3, #24]
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <sampling+0xfe8>)
 8002bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc2:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <sampling+0xff0>)
 8002bc4:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <sampling+0xff0>)
 8002bca:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd2:	ee17 2a90 	vmov	r2, s15
 8002bd6:	4b4f      	ldr	r3, [pc, #316]	; (8002d14 <sampling+0xfec>)
 8002bd8:	605a      	str	r2, [r3, #4]

		filter_accus[7]=sample_Accu[2];
 8002bda:	4b4e      	ldr	r3, [pc, #312]	; (8002d14 <sampling+0xfec>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be6:	4b4c      	ldr	r3, [pc, #304]	; (8002d18 <sampling+0xff0>)
 8002be8:	edc3 7a07 	vstr	s15, [r3, #28]

				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <sampling+0xff0>)
 8002bee:	ed93 7a07 	vldr	s14, [r3, #28]
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <sampling+0xfe8>)
 8002bf4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bfc:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <sampling+0xff0>)
 8002bfe:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <sampling+0xfe8>)
 8002c04:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c10:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <sampling+0xff0>)
 8002c12:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <sampling+0xff0>)
 8002c18:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c1c:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <sampling+0xfe8>)
 8002c1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c26:	4b3c      	ldr	r3, [pc, #240]	; (8002d18 <sampling+0xff0>)
 8002c28:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002c2c:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <sampling+0xfe8>)
 8002c2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3a:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <sampling+0xff0>)
 8002c3c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <sampling+0xff0>)
 8002c42:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c4a:	ee17 2a90 	vmov	r2, s15
 8002c4e:	4b31      	ldr	r3, [pc, #196]	; (8002d14 <sampling+0xfec>)
 8002c50:	609a      	str	r2, [r3, #8]

				filter_accus[10]=sample_Accu[3];
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <sampling+0xfec>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <sampling+0xff0>)
 8002c60:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 8002c64:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <sampling+0xff0>)
 8002c66:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <sampling+0xfe8>)
 8002c6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <sampling+0xff0>)
 8002c76:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <sampling+0xfe8>)
 8002c7c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <sampling+0xff0>)
 8002c8a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <sampling+0xff0>)
 8002c90:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c94:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <sampling+0xfe8>)
 8002c96:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9e:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <sampling+0xff0>)
 8002ca0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <sampling+0xfe8>)
 8002ca6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <sampling+0xff0>)
 8002cb4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 8002cb8:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <sampling+0xff0>)
 8002cba:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002cbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc2:	ee17 2a90 	vmov	r2, s15
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <sampling+0xfec>)
 8002cc8:	60da      	str	r2, [r3, #12]
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


filter_Accu=0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	67bb      	str	r3, [r7, #120]	; 0x78
filter_Accu=sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3]; //filter + drum out
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <sampling+0xfec>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <sampling+0xfec>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	441a      	add	r2, r3
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <sampling+0xfec>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	441a      	add	r2, r3
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <sampling+0xfec>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	67bb      	str	r3, [r7, #120]	; 0x78
filter_Accu=filter_Accu>>1;
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	105b      	asrs	r3, r3, #1
 8002cea:	67bb      	str	r3, [r7, #120]	; 0x78
 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <sampling+0xff4>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2bc7      	cmp	r3, #199	; 0xc7
 8002cf2:	d005      	beq.n	8002d00 <sampling+0xfd8>
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <sampling+0xff4>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <sampling+0xff4>)
 8002cfe:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	db0b      	blt.n	8002d20 <sampling+0xff8>
 8002d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d0e:	e00d      	b.n	8002d2c <sampling+0x1004>
 8002d10:	20001f5c 	.word	0x20001f5c
 8002d14:	20000aa4 	.word	0x20000aa4
 8002d18:	20001f20 	.word	0x20001f20
 8002d1c:	20001ef4 	.word	0x20001ef4
 8002d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d26:	dc01      	bgt.n	8002d2c <sampling+0x1004>
 8002d28:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <sampling+0x1058>)
 8002d2a:	67bb      	str	r3, [r7, #120]	; 0x78


 play_sample[i_total]=(filter_Accu>>6)+1024;   // final output disable for now 2544
 8002d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d2e:	119b      	asrs	r3, r3, #6
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d3a:	b291      	uxth	r1, r2
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <sampling+0x105c>)
 8002d3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <sampling+0x1060>)
 8002d44:	881b      	ldrh	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <sampling+0x1060>)
 8002d4c:	801a      	strh	r2, [r3, #0]
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <sampling+0x1060>)
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d56:	f4ff ad9b 	bcc.w	8002890 <sampling+0xb68>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <sampling+0x1064>)
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <sampling+0x1046>
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <sampling+0x1068>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <sampling+0x1068>)
 8002d6c:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <sampling+0x106c>)
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <sampling+0x1070>)
 8002d74:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 8002d76:	bf00      	nop
 8002d78:	3780      	adds	r7, #128	; 0x80
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	ffff0001 	.word	0xffff0001
 8002d84:	20000ac8 	.word	0x20000ac8
 8002d88:	20000ac4 	.word	0x20000ac4
 8002d8c:	200001b2 	.word	0x200001b2
 8002d90:	20002b92 	.word	0x20002b92
 8002d94:	20002b90 	.word	0x20002b90
 8002d98:	20002b8c 	.word	0x20002b8c

08002d9c <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <sine_count+0xc4>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <sine_count+0xc8>)
 8002dac:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002dae:	4b2c      	ldr	r3, [pc, #176]	; (8002e60 <sine_count+0xc4>)
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b25b      	sxtb	r3, r3
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002dba:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <sine_count+0xc8>)
 8002dbc:	881a      	ldrh	r2, [r3, #0]
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <sine_count+0xcc>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d903      	bls.n	8002dce <sine_count+0x32>
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <sine_count+0xcc>)
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	4b26      	ldr	r3, [pc, #152]	; (8002e64 <sine_count+0xc8>)
 8002dcc:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002dce:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <sine_count+0xc8>)
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <sine_count+0xd0>)
 8002dd6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <sine_count+0xd4>)
 8002dde:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <sine_count+0xd4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002dec:	3b20      	subs	r3, #32
 8002dee:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <sine_count+0xc8>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <sine_count+0xc8>)
 8002dfa:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002dfc:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <sine_count+0xc8>)
 8002dfe:	881a      	ldrh	r2, [r3, #0]
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <sine_count+0xcc>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <sine_count+0x72>
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <sine_count+0xc8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002e0e:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <sine_count+0xc8>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <sine_count+0xd0>)
 8002e16:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <sine_count+0xd4>)
 8002e1e:	601a      	str	r2, [r3, #0]

		sine_tempB=sine_out; // grab first value
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <sine_count+0xd4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002e2c:	3b20      	subs	r3, #32
 8002e2e:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	115b      	asrs	r3, r3, #5
 8002e3c:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002e3e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value -20k-20k  or about 16bit
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <sine_count+0xd4>)
 8002e52:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	20000a8a 	.word	0x20000a8a
 8002e64:	20000a88 	.word	0x20000a88
 8002e68:	20000142 	.word	0x20000142
 8002e6c:	0800a4dc 	.word	0x0800a4dc
 8002e70:	20000a8c 	.word	0x20000a8c
 8002e74:	00000000 	.word	0x00000000

08002e78 <LFO_source>:


void LFO_source(void){     // lfo
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af00      	add	r7, sp, #0


float	freq_temp=0;
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
float 	freq2_temp=0;
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
uint8_t l ;
float offset=0;
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
uint32_t lfo_accu_temp;
	uint32_t freq3_temp;
	uint32_t freq4_temp;

for (l=0;l<10;l++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8002e90:	2300      	movs	r3, #0
 8002e92:	76fb      	strb	r3, [r7, #27]
 8002e94:	e0b8      	b.n	8003008 <LFO_source+0x190>



	lfo_accu_temp=	lfo_accu[l][sampling_position];  // hold
 8002e96:	7efa      	ldrb	r2, [r7, #27]
 8002e98:	4b63      	ldr	r3, [pc, #396]	; (8003028 <LFO_source+0x1b0>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	4963      	ldr	r1, [pc, #396]	; (800302c <LFO_source+0x1b4>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4403      	add	r3, r0
 8002eaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002eae:	617b      	str	r3, [r7, #20]

	freq3_temp=LFO[l].rate +1;  // rate. this needs a little log
 8002eb0:	7efb      	ldrb	r3, [r7, #27]
 8002eb2:	4a5f      	ldr	r2, [pc, #380]	; (8003030 <LFO_source+0x1b8>)
 8002eb4:	015b      	lsls	r3, r3, #5
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	60bb      	str	r3, [r7, #8]
		freq4_temp=freq3_temp*freq3_temp;  // multiply the rate +32 000 max
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	fb03 f303 	mul.w	r3, r3, r3
 8002ec4:	607b      	str	r3, [r7, #4]


			freq3_temp=lfo_accu_temp+ freq4_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4413      	add	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>62831) lfo_accu_temp=0; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	f24f 526f 	movw	r2, #62831	; 0xf56f
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d902      	bls.n	8002ede <LFO_source+0x66>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	e001      	b.n	8002ee2 <LFO_source+0x6a>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	617b      	str	r3, [r7, #20]

		lfo_accu[l][sampling_position]=lfo_accu_temp;
 8002ee2:	7efa      	ldrb	r2, [r7, #27]
 8002ee4:	4b50      	ldr	r3, [pc, #320]	; (8003028 <LFO_source+0x1b0>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	4950      	ldr	r1, [pc, #320]	; (800302c <LFO_source+0x1b4>)
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4403      	add	r3, r0
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	edc7 7a04 	vstr	s15, [r7, #16]
		freq2_temp=(freq_temp*0.0001);  //0-360
 8002f0a:	6938      	ldr	r0, [r7, #16]
 8002f0c:	f7fd fbfa 	bl	8000704 <__aeabi_f2d>
 8002f10:	a343      	add	r3, pc, #268	; (adr r3, 8003020 <LFO_source+0x1a8>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	f7fd f967 	bl	80001e8 <__aeabi_dmul>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f7fd fc47 	bl	80007b4 <__aeabi_d2f>
 8002f26:	4603      	mov	r3, r0
 8002f28:	61fb      	str	r3, [r7, #28]
		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 8002f2a:	ed97 0a07 	vldr	s0, [r7, #28]
 8002f2e:	f006 fdd7 	bl	8009ae0 <arm_sin_f32>
 8002f32:	ed87 0a04 	vstr	s0, [r7, #16]
		freq2_temp=freq_temp*LFO[l].depth*51;
 8002f36:	7efb      	ldrb	r3, [r7, #27]
 8002f38:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <LFO_source+0x1b8>)
 8002f3a:	015b      	lsls	r3, r3, #5
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3301      	adds	r3, #1
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003034 <LFO_source+0x1bc>
 8002f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f5a:	edc7 7a07 	vstr	s15, [r7, #28]

		if (!LFO[l].offset)    LFO[l].offset=0;   // set to 64 if its at 0
 8002f5e:	7efb      	ldrb	r3, [r7, #27]
 8002f60:	4a33      	ldr	r2, [pc, #204]	; (8003030 <LFO_source+0x1b8>)
 8002f62:	015b      	lsls	r3, r3, #5
 8002f64:	4413      	add	r3, r2
 8002f66:	3303      	adds	r3, #3
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <LFO_source+0x104>
 8002f6e:	7efb      	ldrb	r3, [r7, #27]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	; (8003030 <LFO_source+0x1b8>)
 8002f72:	015b      	lsls	r3, r3, #5
 8002f74:	4413      	add	r3, r2
 8002f76:	3303      	adds	r3, #3
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
 		offset=(LFO[l].offset<<5)-2048; //  limit now for finetuning
 8002f7c:	7efb      	ldrb	r3, [r7, #27]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <LFO_source+0x1b8>)
 8002f80:	015b      	lsls	r3, r3, #5
 8002f82:	4413      	add	r3, r2
 8002f84:	3303      	adds	r3, #3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	015b      	lsls	r3, r3, #5
 8002f8a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f96:	edc7 7a03 	vstr	s15, [r7, #12]
			freq2_temp=(freq2_temp+offset);
 8002f9a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002f9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	edc7 7a07 	vstr	s15, [r7, #28]

		if (freq2_temp>8195)  freq2_temp=8195;
 8002faa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fae:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003038 <LFO_source+0x1c0>
 8002fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fba:	dd01      	ble.n	8002fc0 <LFO_source+0x148>
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <LFO_source+0x1c4>)
 8002fbe:	61fb      	str	r3, [r7, #28]
		if (freq2_temp<-8195)  freq2_temp=-8195;   // clip to 13bit -/+ 8000
 8002fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fc4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003040 <LFO_source+0x1c8>
 8002fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd0:	d501      	bpl.n	8002fd6 <LFO_source+0x15e>
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <LFO_source+0x1cc>)
 8002fd4:	61fb      	str	r3, [r7, #28]


				   LFO[l].out[sampling_position]=freq2_temp+8196;
 8002fd6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fda:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003048 <LFO_source+0x1d0>
 8002fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fe2:	7efb      	ldrb	r3, [r7, #27]
 8002fe4:	4a10      	ldr	r2, [pc, #64]	; (8003028 <LFO_source+0x1b0>)
 8002fe6:	7812      	ldrb	r2, [r2, #0]
 8002fe8:	4610      	mov	r0, r2
 8002fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fee:	ee17 2a90 	vmov	r2, s15
 8002ff2:	b291      	uxth	r1, r2
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <LFO_source+0x1b8>)
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	4403      	add	r3, r0
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	460a      	mov	r2, r1
 8003000:	80da      	strh	r2, [r3, #6]
for (l=0;l<10;l++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003002:	7efb      	ldrb	r3, [r7, #27]
 8003004:	3301      	adds	r3, #1
 8003006:	76fb      	strb	r3, [r7, #27]
 8003008:	7efb      	ldrb	r3, [r7, #27]
 800300a:	2b09      	cmp	r3, #9
 800300c:	f67f af43 	bls.w	8002e96 <LFO_source+0x1e>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	f3af 8000 	nop.w
 8003020:	eb1c432d 	.word	0xeb1c432d
 8003024:	3f1a36e2 	.word	0x3f1a36e2
 8003028:	20003aac 	.word	0x20003aac
 800302c:	20002010 	.word	0x20002010
 8003030:	20002b94 	.word	0x20002b94
 8003034:	424c0000 	.word	0x424c0000
 8003038:	46000c00 	.word	0x46000c00
 800303c:	46000c00 	.word	0x46000c00
 8003040:	c6000c00 	.word	0xc6000c00
 8003044:	c6000c00 	.word	0xc6000c00
 8003048:	46001000 	.word	0x46001000
 800304c:	00000000 	.word	0x00000000

08003050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b0b2      	sub	sp, #200	; 0xc8
 8003054:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003056:	f001 fb33 	bl	80046c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800305a:	f000 fcfb 	bl	8003a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800305e:	f000 ffc1 	bl	8003fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003062:	f000 ff9f 	bl	8003fa4 <MX_DMA_Init>
  MX_ADC1_Init();
 8003066:	f000 fd5f 	bl	8003b28 <MX_ADC1_Init>
  MX_SPI2_Init();
 800306a:	f000 fe47 	bl	8003cfc <MX_SPI2_Init>
  MX_TIM3_Init();
 800306e:	f000 fecf 	bl	8003e10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003072:	f000 ff43 	bl	8003efc <MX_TIM4_Init>
  MX_I2C2_Init();
 8003076:	f000 fddd 	bl	8003c34 <MX_I2C2_Init>
  MX_TIM2_Init();
 800307a:	f000 fe75 	bl	8003d68 <MX_TIM2_Init>
  MX_SPI1_Init();
 800307e:	f000 fe07 	bl	8003c90 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8003082:	4bc1      	ldr	r3, [pc, #772]	; (8003388 <main+0x338>)
 8003084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 8003088:	48c0      	ldr	r0, [pc, #768]	; (800338c <main+0x33c>)
 800308a:	f004 febd 	bl	8007e08 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 800308e:	48c0      	ldr	r0, [pc, #768]	; (8003390 <main+0x340>)
 8003090:	f004 feba 	bl	8007e08 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8003094:	48bf      	ldr	r0, [pc, #764]	; (8003394 <main+0x344>)
 8003096:	f005 fd09 	bl	8008aac <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 800309a:	4bbf      	ldr	r3, [pc, #764]	; (8003398 <main+0x348>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 80030a0:	48be      	ldr	r0, [pc, #760]	; (800339c <main+0x34c>)
 80030a2:	f005 fca9 	bl	80089f8 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 80030a6:	48be      	ldr	r0, [pc, #760]	; (80033a0 <main+0x350>)
 80030a8:	f005 fca6 	bl	80089f8 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80030ac:	2108      	movs	r1, #8
 80030ae:	48b9      	ldr	r0, [pc, #740]	; (8003394 <main+0x344>)
 80030b0:	f005 fdb8 	bl	8008c24 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 80030b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80030bc:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 80030be:	48b9      	ldr	r0, [pc, #740]	; (80033a4 <main+0x354>)
 80030c0:	f001 fbd8 	bl	8004874 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 80030c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c8:	49b7      	ldr	r1, [pc, #732]	; (80033a8 <main+0x358>)
 80030ca:	48b6      	ldr	r0, [pc, #728]	; (80033a4 <main+0x354>)
 80030cc:	f001 fd12 	bl	8004af4 <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 80030d0:	48b6      	ldr	r0, [pc, #728]	; (80033ac <main+0x35c>)
 80030d2:	f001 f8c1 	bl	8004258 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 80030d6:	4ab6      	ldr	r2, [pc, #728]	; (80033b0 <main+0x360>)
 80030d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80030dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030e0:	6018      	str	r0, [r3, #0]
 80030e2:	3304      	adds	r3, #4
 80030e4:	7019      	strb	r1, [r3, #0]





HAL_Delay(5);
 80030e6:	2005      	movs	r0, #5
 80030e8:	f001 fb5c 	bl	80047a4 <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 80030ec:	2306      	movs	r3, #6
 80030ee:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2110      	movs	r1, #16
 80030f6:	48af      	ldr	r0, [pc, #700]	; (80033b4 <main+0x364>)
 80030f8:	f003 fa68 	bl	80065cc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80030fc:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8003100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003104:	2201      	movs	r2, #1
 8003106:	48a2      	ldr	r0, [pc, #648]	; (8003390 <main+0x340>)
 8003108:	f004 ff07 	bl	8007f1a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800310c:	2201      	movs	r2, #1
 800310e:	2110      	movs	r1, #16
 8003110:	48a8      	ldr	r0, [pc, #672]	; (80033b4 <main+0x364>)
 8003112:	f003 fa5b 	bl	80065cc <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003116:	2005      	movs	r0, #5
 8003118:	f001 fb44 	bl	80047a4 <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 800311c:	2320      	movs	r3, #32
 800311e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
send_spi1[1]=0; //24bit address msb
 8003122:	2300      	movs	r3, #0
 8003124:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
send_spi1[2]=0; //24bit address
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
send_spi1[3]=1; //24bit address lsb
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8003134:	2200      	movs	r2, #0
 8003136:	2110      	movs	r1, #16
 8003138:	489e      	ldr	r0, [pc, #632]	; (80033b4 <main+0x364>)
 800313a:	f003 fa47 	bl	80065cc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 800313e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8003142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003146:	2204      	movs	r2, #4
 8003148:	4891      	ldr	r0, [pc, #580]	; (8003390 <main+0x340>)
 800314a:	f004 fee6 	bl	8007f1a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800314e:	2201      	movs	r2, #1
 8003150:	2110      	movs	r1, #16
 8003152:	4898      	ldr	r0, [pc, #608]	; (80033b4 <main+0x364>)
 8003154:	f003 fa3a 	bl	80065cc <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 8003158:	2305      	movs	r3, #5
 800315a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
send_spi1[1]=0; //24bit address msb
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
status_reg[1]=1; // set busy on
 8003164:	4b94      	ldr	r3, [pc, #592]	; (80033b8 <main+0x368>)
 8003166:	2201      	movs	r2, #1
 8003168:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 800316a:	e012      	b.n	8003192 <main+0x142>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800316c:	2200      	movs	r2, #0
 800316e:	2110      	movs	r1, #16
 8003170:	4890      	ldr	r0, [pc, #576]	; (80033b4 <main+0x364>)
 8003172:	f003 fa2b 	bl	80065cc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8003176:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800317a:	23c8      	movs	r3, #200	; 0xc8
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	2302      	movs	r3, #2
 8003180:	4a8d      	ldr	r2, [pc, #564]	; (80033b8 <main+0x368>)
 8003182:	4883      	ldr	r0, [pc, #524]	; (8003390 <main+0x340>)
 8003184:	f005 f916 	bl	80083b4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003188:	2201      	movs	r2, #1
 800318a:	2110      	movs	r1, #16
 800318c:	4889      	ldr	r0, [pc, #548]	; (80033b4 <main+0x364>)
 800318e:	f003 fa1d 	bl	80065cc <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 8003192:	4b89      	ldr	r3, [pc, #548]	; (80033b8 <main+0x368>)
 8003194:	785b      	ldrb	r3, [r3, #1]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e6      	bne.n	800316c <main+0x11c>
}

send_spi1[0]=0x06; //enable write again
 800319e:	2306      	movs	r3, #6
 80031a0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2110      	movs	r1, #16
 80031a8:	4882      	ldr	r0, [pc, #520]	; (80033b4 <main+0x364>)
 80031aa:	f003 fa0f 	bl	80065cc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80031ae:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80031b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b6:	2201      	movs	r2, #1
 80031b8:	4875      	ldr	r0, [pc, #468]	; (8003390 <main+0x340>)
 80031ba:	f004 feae 	bl	8007f1a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80031be:	2201      	movs	r2, #1
 80031c0:	2110      	movs	r1, #16
 80031c2:	487c      	ldr	r0, [pc, #496]	; (80033b4 <main+0x364>)
 80031c4:	f003 fa02 	bl	80065cc <HAL_GPIO_WritePin>
HAL_Delay(5);
 80031c8:	2005      	movs	r0, #5
 80031ca:	f001 faeb 	bl	80047a4 <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 80031ce:	4b7b      	ldr	r3, [pc, #492]	; (80033bc <main+0x36c>)
 80031d0:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80031d4:	461d      	mov	r5, r3
 80031d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 80031de:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80031e2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80031e6:	220e      	movs	r2, #14
 80031e8:	4618      	mov	r0, r3
 80031ea:	f006 fceb 	bl	8009bc4 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2110      	movs	r1, #16
 80031f2:	4870      	ldr	r0, [pc, #448]	; (80033b4 <main+0x364>)
 80031f4:	f003 f9ea 	bl	80065cc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 80031f8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80031fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003200:	220e      	movs	r2, #14
 8003202:	4863      	ldr	r0, [pc, #396]	; (8003390 <main+0x340>)
 8003204:	f004 fe89 	bl	8007f1a <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003208:	2201      	movs	r2, #1
 800320a:	2110      	movs	r1, #16
 800320c:	4869      	ldr	r0, [pc, #420]	; (80033b4 <main+0x364>)
 800320e:	f003 f9dd 	bl	80065cc <HAL_GPIO_WritePin>




HAL_Delay(25);
 8003212:	2019      	movs	r0, #25
 8003214:	f001 fac6 	bl	80047a4 <HAL_Delay>
send_spi1[0]=0x04; //disable write
 8003218:	2304      	movs	r3, #4
 800321a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2110      	movs	r1, #16
 8003222:	4864      	ldr	r0, [pc, #400]	; (80033b4 <main+0x364>)
 8003224:	f003 f9d2 	bl	80065cc <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003228:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800322c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003230:	2201      	movs	r2, #1
 8003232:	4857      	ldr	r0, [pc, #348]	; (8003390 <main+0x340>)
 8003234:	f004 fe71 	bl	8007f1a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003238:	2201      	movs	r2, #1
 800323a:	2110      	movs	r1, #16
 800323c:	485d      	ldr	r0, [pc, #372]	; (80033b4 <main+0x364>)
 800323e:	f003 f9c5 	bl	80065cc <HAL_GPIO_WritePin>

HAL_Delay(5);
 8003242:	2005      	movs	r0, #5
 8003244:	f001 faae 	bl	80047a4 <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 8003248:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800324c:	220e      	movs	r2, #14
 800324e:	495c      	ldr	r1, [pc, #368]	; (80033c0 <main+0x370>)
 8003250:	4618      	mov	r0, r3
 8003252:	f006 fcb7 	bl	8009bc4 <memcpy>
send_spi1[0]=0x03; //read page 1
 8003256:	2303      	movs	r3, #3
 8003258:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
send_spi1[1]=0; //24bit address msb
 800325c:	2300      	movs	r3, #0
 800325e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
send_spi1[2]=0; //24bit address
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
send_spi1[3]=1; //24bit address lsb
 8003268:	2301      	movs	r3, #1
 800326a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 800326e:	2200      	movs	r2, #0
 8003270:	2110      	movs	r1, #16
 8003272:	4850      	ldr	r0, [pc, #320]	; (80033b4 <main+0x364>)
 8003274:	f003 f9aa 	bl	80065cc <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8003278:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800327c:	2364      	movs	r3, #100	; 0x64
 800327e:	2204      	movs	r2, #4
 8003280:	4843      	ldr	r0, [pc, #268]	; (8003390 <main+0x340>)
 8003282:	f004 fe4a 	bl	8007f1a <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8003286:	2364      	movs	r3, #100	; 0x64
 8003288:	220a      	movs	r2, #10
 800328a:	494d      	ldr	r1, [pc, #308]	; (80033c0 <main+0x370>)
 800328c:	4840      	ldr	r0, [pc, #256]	; (8003390 <main+0x340>)
 800328e:	f004 ff80 	bl	8008192 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003292:	2201      	movs	r2, #1
 8003294:	2110      	movs	r1, #16
 8003296:	4847      	ldr	r0, [pc, #284]	; (80033b4 <main+0x364>)
 8003298:	f003 f998 	bl	80065cc <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 800329c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80032a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a4:	2201      	movs	r2, #1
 80032a6:	483a      	ldr	r0, [pc, #232]	; (8003390 <main+0x340>)
 80032a8:	f004 fe37 	bl	8007f1a <HAL_SPI_Transmit>


uint8_t potSource2[120];    // { [0 ... 112] = 64 };

	for(i=0;i<6;i++){     // 256
 80032ac:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <main+0x374>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	801a      	strh	r2, [r3, #0]
 80032b2:	e025      	b.n	8003300 <main+0x2b0>
	HAL_I2C_Mem_Read(&hi2c2, 160, 64+(i*64), 2,&potSource2, 64,1000);		// all good readin eeprom  values
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <main+0x374>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	b29a      	uxth	r2, r3
 80032c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c4:	9302      	str	r3, [sp, #8]
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	f107 0308 	add.w	r3, r7, #8
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2302      	movs	r3, #2
 80032d2:	21a0      	movs	r1, #160	; 0xa0
 80032d4:	4835      	ldr	r0, [pc, #212]	; (80033ac <main+0x35c>)
 80032d6:	f003 fbd1 	bl	8006a7c <HAL_I2C_Mem_Read>

	memcpy (potSource+(i*64),potSource2,sizeof(potSource2));   //this works  ok now ,leave it alone
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <main+0x374>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <main+0x378>)
 80032e4:	4413      	add	r3, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	2278      	movs	r2, #120	; 0x78
 80032ee:	4619      	mov	r1, r3
 80032f0:	f006 fc68 	bl	8009bc4 <memcpy>
	for(i=0;i<6;i++){     // 256
 80032f4:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <main+0x374>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	3301      	adds	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <main+0x374>)
 80032fe:	801a      	strh	r2, [r3, #0]
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <main+0x374>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d9d5      	bls.n	80032b4 <main+0x264>


	}
	for(i=0;i<260;i++){			// write potvalues ,for display ,also filter bad data IMPORTANT !!!
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <main+0x374>)
 800330a:	2200      	movs	r2, #0
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e01d      	b.n	800334c <main+0x2fc>

		if (potSource[i]>159) potSource[i]=159;
 8003310:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <main+0x374>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <main+0x378>)
 8003318:	5c9b      	ldrb	r3, [r3, r2]
 800331a:	2b9f      	cmp	r3, #159	; 0x9f
 800331c:	d905      	bls.n	800332a <main+0x2da>
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <main+0x374>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <main+0x378>)
 8003326:	219f      	movs	r1, #159	; 0x9f
 8003328:	5499      	strb	r1, [r3, r2]
		potValues[i]=potSource[i]>>4;
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <main+0x374>)
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	461a      	mov	r2, r3
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <main+0x378>)
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <main+0x374>)
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	b2d9      	uxtb	r1, r3
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <main+0x37c>)
 800333e:	5499      	strb	r1, [r3, r2]
	for(i=0;i<260;i++){			// write potvalues ,for display ,also filter bad data IMPORTANT !!!
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <main+0x374>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <main+0x374>)
 800334a:	801a      	strh	r2, [r3, #0]
 800334c:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <main+0x374>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003354:	d3dc      	bcc.n	8003310 <main+0x2c0>

	}

	uint16_t mem_counter=0;
 8003356:	2300      	movs	r3, #0
 8003358:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 800335c:	4a1c      	ldr	r2, [pc, #112]	; (80033d0 <main+0x380>)
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <main+0x378>)
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800336a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800336c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003370:	c407      	stmia	r4!, {r0, r1, r2}
 8003372:	8023      	strh	r3, [r4, #0]
    memcpy(&note,potSource+156,112 );   // this works but keep checking for fragmentation
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <main+0x384>)
 8003376:	2270      	movs	r2, #112	; 0x70
 8003378:	4619      	mov	r1, r3
 800337a:	4817      	ldr	r0, [pc, #92]	; (80033d8 <main+0x388>)
 800337c:	f006 fc22 	bl	8009bc4 <memcpy>

    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003380:	2300      	movs	r3, #0
 8003382:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8003386:	e054      	b.n	8003432 <main+0x3e2>
 8003388:	0800d2f0 	.word	0x0800d2f0
 800338c:	20006004 	.word	0x20006004
 8003390:	20005fac 	.word	0x20005fac
 8003394:	200060a4 	.word	0x200060a4
 8003398:	40000400 	.word	0x40000400
 800339c:	2000605c 	.word	0x2000605c
 80033a0:	200060ec 	.word	0x200060ec
 80033a4:	20005eb0 	.word	0x20005eb0
 80033a8:	200012d4 	.word	0x200012d4
 80033ac:	20005f58 	.word	0x20005f58
 80033b0:	08009f44 	.word	0x08009f44
 80033b4:	40020000 	.word	0x40020000
 80033b8:	200001b8 	.word	0x200001b8
 80033bc:	08009f4c 	.word	0x08009f4c
 80033c0:	20002b7c 	.word	0x20002b7c
 80033c4:	20000ac4 	.word	0x20000ac4
 80033c8:	20000908 	.word	0x20000908
 80033cc:	20000788 	.word	0x20000788
 80033d0:	20003760 	.word	0x20003760
 80033d4:	200009a4 	.word	0x200009a4
 80033d8:	200001bc 	.word	0x200001bc

		memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 80033dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80033e0:	015b      	lsls	r3, r3, #5
 80033e2:	4aab      	ldr	r2, [pc, #684]	; (8003690 <main+0x640>)
 80033e4:	1898      	adds	r0, r3, r2
 80033e6:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	332e      	adds	r3, #46	; 0x2e
 80033f4:	4aa7      	ldr	r2, [pc, #668]	; (8003694 <main+0x644>)
 80033f6:	4413      	add	r3, r2
 80033f8:	2206      	movs	r2, #6
 80033fa:	4619      	mov	r1, r3
 80033fc:	f006 fbe2 	bl	8009bc4 <memcpy>

		memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8003400:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8003404:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	4aa2      	ldr	r2, [pc, #648]	; (8003698 <main+0x648>)
 800340e:	1898      	adds	r0, r3, r2
 8003410:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	; 0xb6
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	336a      	adds	r3, #106	; 0x6a
 800341c:	4a9d      	ldr	r2, [pc, #628]	; (8003694 <main+0x644>)
 800341e:	4413      	add	r3, r2
 8003420:	2205      	movs	r2, #5
 8003422:	4619      	mov	r1, r3
 8003424:	f006 fbce 	bl	8009bc4 <memcpy>
    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003428:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800342c:	3301      	adds	r3, #1
 800342e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8003432:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8003436:	2b09      	cmp	r3, #9
 8003438:	d9d0      	bls.n	80033dc <main+0x38c>

	}

	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 800343a:	4b98      	ldr	r3, [pc, #608]	; (800369c <main+0x64c>)
 800343c:	2200      	movs	r2, #0
 800343e:	801a      	strh	r2, [r3, #0]
 8003440:	e057      	b.n	80034f2 <main+0x4a2>

	for 	(n=0;n<18;n++){					// this is ok
 8003442:	4b97      	ldr	r3, [pc, #604]	; (80036a0 <main+0x650>)
 8003444:	2200      	movs	r2, #0
 8003446:	801a      	strh	r2, [r3, #0]
 8003448:	e049      	b.n	80034de <main+0x48e>
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 800344a:	4b95      	ldr	r3, [pc, #596]	; (80036a0 <main+0x650>)
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d114      	bne.n	800347c <main+0x42c>
 8003452:	4b92      	ldr	r3, [pc, #584]	; (800369c <main+0x64c>)
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4b8f      	ldr	r3, [pc, #572]	; (800369c <main+0x64c>)
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	4619      	mov	r1, r3
 8003464:	460b      	mov	r3, r1
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	440b      	add	r3, r1
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4619      	mov	r1, r3
 800346e:	4b8c      	ldr	r3, [pc, #560]	; (80036a0 <main+0x650>)
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	440b      	add	r3, r1
 8003474:	3a80      	subs	r2, #128	; 0x80
 8003476:	b2d1      	uxtb	r1, r2
 8003478:	4a8a      	ldr	r2, [pc, #552]	; (80036a4 <main+0x654>)
 800347a:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 800347c:	4b88      	ldr	r3, [pc, #544]	; (80036a0 <main+0x650>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d114      	bne.n	80034ae <main+0x45e>
 8003484:	4b85      	ldr	r3, [pc, #532]	; (800369c <main+0x64c>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	b29b      	uxth	r3, r3
 800348c:	3310      	adds	r3, #16
 800348e:	b2da      	uxtb	r2, r3
 8003490:	4b82      	ldr	r3, [pc, #520]	; (800369c <main+0x64c>)
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	4619      	mov	r1, r3
 8003496:	460b      	mov	r3, r1
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	440b      	add	r3, r1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4619      	mov	r1, r3
 80034a0:	4b7f      	ldr	r3, [pc, #508]	; (80036a0 <main+0x650>)
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	440b      	add	r3, r1
 80034a6:	00d2      	lsls	r2, r2, #3
 80034a8:	b2d1      	uxtb	r1, r2
 80034aa:	4a7e      	ldr	r2, [pc, #504]	; (80036a4 <main+0x654>)
 80034ac:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 80034ae:	4b7c      	ldr	r3, [pc, #496]	; (80036a0 <main+0x650>)
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d90d      	bls.n	80034d2 <main+0x482>
 80034b6:	4b79      	ldr	r3, [pc, #484]	; (800369c <main+0x64c>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b76      	ldr	r3, [pc, #472]	; (80036a0 <main+0x650>)
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	4a75      	ldr	r2, [pc, #468]	; (80036a4 <main+0x654>)
 80034ce:	21ff      	movs	r1, #255	; 0xff
 80034d0:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 80034d2:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <main+0x650>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	4b71      	ldr	r3, [pc, #452]	; (80036a0 <main+0x650>)
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	4b70      	ldr	r3, [pc, #448]	; (80036a0 <main+0x650>)
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	2b11      	cmp	r3, #17
 80034e4:	d9b1      	bls.n	800344a <main+0x3fa>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 80034e6:	4b6d      	ldr	r3, [pc, #436]	; (800369c <main+0x64c>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	3301      	adds	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b6b      	ldr	r3, [pc, #428]	; (800369c <main+0x64c>)
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	4b6a      	ldr	r3, [pc, #424]	; (800369c <main+0x64c>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b3f      	cmp	r3, #63	; 0x3f
 80034f8:	d9a3      	bls.n	8003442 <main+0x3f2>

	}

	}
seq.pos=0;
 80034fa:	4b6b      	ldr	r3, [pc, #428]	; (80036a8 <main+0x658>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]


float tempo_hold;  // calculate tempo look up


	for (i=0;i<161;i++) {
 8003500:	4b66      	ldr	r3, [pc, #408]	; (800369c <main+0x64c>)
 8003502:	2200      	movs	r2, #0
 8003504:	801a      	strh	r2, [r3, #0]
 8003506:	e040      	b.n	800358a <main+0x53a>

	tempo_hold=(i+180)*0.0166666666;
 8003508:	4b64      	ldr	r3, [pc, #400]	; (800369c <main+0x64c>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	33b4      	adds	r3, #180	; 0xb4
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f8e6 	bl	80006e0 <__aeabi_i2d>
 8003514:	a35a      	add	r3, pc, #360	; (adr r3, 8003680 <main+0x630>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fc fe65 	bl	80001e8 <__aeabi_dmul>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	f7fd f945 	bl	80007b4 <__aeabi_d2f>
 800352a:	4603      	mov	r3, r0
 800352c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	tempo_hold=	1/tempo_hold;
 8003530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003534:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8003538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800353c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	//tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
	tempo_hold=	tempo_hold*2187.6*1;      // change for the sake of note length
 8003540:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003544:	f7fd f8de 	bl	8000704 <__aeabi_f2d>
 8003548:	a34f      	add	r3, pc, #316	; (adr r3, 8003688 <main+0x638>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fc fe4b 	bl	80001e8 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd f92b 	bl	80007b4 <__aeabi_d2f>
 800355e:	4603      	mov	r3, r0
 8003560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	tempo_lut[i]=tempo_hold;
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <main+0x64c>)
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800356e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003572:	ee17 3a90 	vmov	r3, s15
 8003576:	b299      	uxth	r1, r3
 8003578:	4b4c      	ldr	r3, [pc, #304]	; (80036ac <main+0x65c>)
 800357a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i=0;i<161;i++) {
 800357e:	4b47      	ldr	r3, [pc, #284]	; (800369c <main+0x64c>)
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	4b45      	ldr	r3, [pc, #276]	; (800369c <main+0x64c>)
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	4b44      	ldr	r3, [pc, #272]	; (800369c <main+0x64c>)
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	2ba0      	cmp	r3, #160	; 0xa0
 8003590:	d9ba      	bls.n	8003508 <main+0x4b8>
	}

isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <main+0x660>)
 8003594:	f240 223b 	movw	r2, #571	; 0x23b
 8003598:	801a      	strh	r2, [r3, #0]

	noteTiming=24;
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <main+0x664>)
 800359c:	2218      	movs	r2, #24
 800359e:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 80035a0:	4b3e      	ldr	r3, [pc, #248]	; (800369c <main+0x64c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	801a      	strh	r2, [r3, #0]
 80035a6:	e00b      	b.n	80035c0 <main+0x570>
		spell[i]=67;
 80035a8:	4b3c      	ldr	r3, [pc, #240]	; (800369c <main+0x64c>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <main+0x668>)
 80035b0:	2143      	movs	r1, #67	; 0x43
 80035b2:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 80035b4:	4b39      	ldr	r3, [pc, #228]	; (800369c <main+0x64c>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	4b37      	ldr	r3, [pc, #220]	; (800369c <main+0x64c>)
 80035be:	801a      	strh	r2, [r3, #0]
 80035c0:	4b36      	ldr	r3, [pc, #216]	; (800369c <main+0x64c>)
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80035c8:	d3ee      	bcc.n	80035a8 <main+0x558>

	}

	gfx_clear();
 80035ca:	f7fe f835 	bl	8001638 <gfx_clear>
uint16_t pars_counter;

for (pars_counter=0;pars_counter<512;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80035d4:	e00e      	b.n	80035f4 <main+0x5a4>

		menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 80035d6:	f7fd fc73 	bl	8000ec0 <menu_parser>
		default_menu3[pars_counter>>1]=64;
 80035da:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b35      	ldr	r3, [pc, #212]	; (80036bc <main+0x66c>)
 80035e6:	2140      	movs	r1, #64	; 0x40
 80035e8:	5499      	strb	r1, [r3, r2]
for (pars_counter=0;pars_counter<512;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 80035ea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80035ee:	3301      	adds	r3, #1
 80035f0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80035f4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fc:	d3eb      	bcc.n	80035d6 <main+0x586>
	}
	default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 80035fe:	482f      	ldr	r0, [pc, #188]	; (80036bc <main+0x66c>)
 8003600:	f7fc fdea 	bl	80001d8 <strlen>
 8003604:	4603      	mov	r3, r0
 8003606:	b29a      	uxth	r2, r3
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <main+0x670>)
 800360a:	801a      	strh	r2, [r3, #0]
	menu_title_count--;  //count back one
 800360c:	4b2d      	ldr	r3, [pc, #180]	; (80036c4 <main+0x674>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	3b01      	subs	r3, #1
 8003612:	b2da      	uxtb	r2, r3
 8003614:	4b2b      	ldr	r3, [pc, #172]	; (80036c4 <main+0x674>)
 8003616:	701a      	strb	r2, [r3, #0]
	display_clear ();
 8003618:	f7fe f850 	bl	80016bc <display_clear>

uint16_t lut_temp2=0;
 800361c:	2300      	movs	r3, #0
 800361e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
uint16_t lut_temp3=0;
 8003622:	2300      	movs	r3, #0
 8003624:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8


menuSelect=0;
 8003628:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <main+0x678>)
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <main+0x67c>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8003634:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <main+0x680>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <main+0x680>)
 800363e:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <main+0x684>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3301      	adds	r3, #1
 8003646:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <main+0x684>)
 8003648:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <main+0x684>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b06      	cmp	r3, #6
 8003654:	d101      	bne.n	800365a <main+0x60a>
 8003656:	f7fd fe7d 	bl	8001354 <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <main+0x684>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8003662:	4293      	cmp	r3, r2
 8003664:	f040 80e4 	bne.w	8003830 <main+0x7e0>
	  if (mem_count>260) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <main+0x688>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003670:	d934      	bls.n	80036dc <main+0x68c>
 8003672:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <main+0x688>)
 8003674:	2200      	movs	r2, #0
 8003676:	801a      	strh	r2, [r3, #0]
 8003678:	e036      	b.n	80036e8 <main+0x698>
 800367a:	bf00      	nop
 800367c:	f3af 8000 	nop.w
 8003680:	0febdd13 	.word	0x0febdd13
 8003684:	3f911111 	.word	0x3f911111
 8003688:	33333333 	.word	0x33333333
 800368c:	40a11733 	.word	0x40a11733
 8003690:	20002b94 	.word	0x20002b94
 8003694:	20000908 	.word	0x20000908
 8003698:	20002cd4 	.word	0x20002cd4
 800369c:	20000ac4 	.word	0x20000ac4
 80036a0:	20000aa2 	.word	0x20000aa2
 80036a4:	200022e4 	.word	0x200022e4
 80036a8:	20003760 	.word	0x20003760
 80036ac:	200021a0 	.word	0x200021a0
 80036b0:	20000a94 	.word	0x20000a94
 80036b4:	20000784 	.word	0x20000784
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20005ab0 	.word	0x20005ab0
 80036c0:	20003aa2 	.word	0x20003aa2
 80036c4:	20003793 	.word	0x20003793
 80036c8:	20000a92 	.word	0x20000a92
 80036cc:	20000a96 	.word	0x20000a96
 80036d0:	20000ac0 	.word	0x20000ac0
 80036d4:	20001f18 	.word	0x20001f18
 80036d8:	20001f16 	.word	0x20001f16
 80036dc:	4b5b      	ldr	r3, [pc, #364]	; (800384c <main+0x7fc>)
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	3301      	adds	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	4b59      	ldr	r3, [pc, #356]	; (800384c <main+0x7fc>)
 80036e6:	801a      	strh	r2, [r3, #0]
	  lfo_target_parse(); //
 80036e8:	f7fd fcb8 	bl	800105c <lfo_target_parse>
	// read values from stored

	memcpy(potSource,&seq,46); // about 35
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <main+0x800>)
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <main+0x804>)
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003700:	c407      	stmia	r4!, {r0, r1, r2}
 8003702:	8023      	strh	r3, [r4, #0]

	for(i=0;i<10;i++){
 8003704:	4b54      	ldr	r3, [pc, #336]	; (8003858 <main+0x808>)
 8003706:	2200      	movs	r2, #0
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e049      	b.n	80037a0 <main+0x750>
		if (i<8){    memcpy(potSource+156+(i*14),&note[i],14 );}  //grab note settings ,112 total , works
 800370c:	4b52      	ldr	r3, [pc, #328]	; (8003858 <main+0x808>)
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	2b07      	cmp	r3, #7
 8003712:	d816      	bhi.n	8003742 <main+0x6f2>
 8003714:	4b50      	ldr	r3, [pc, #320]	; (8003858 <main+0x808>)
 8003716:	881b      	ldrh	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	339c      	adds	r3, #156	; 0x9c
 8003724:	4a4a      	ldr	r2, [pc, #296]	; (8003850 <main+0x800>)
 8003726:	1898      	adds	r0, r3, r2
 8003728:	4b4b      	ldr	r3, [pc, #300]	; (8003858 <main+0x808>)
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4a49      	ldr	r2, [pc, #292]	; (800385c <main+0x80c>)
 8003738:	4413      	add	r3, r2
 800373a:	220e      	movs	r2, #14
 800373c:	4619      	mov	r1, r3
 800373e:	f006 fa41 	bl	8009bc4 <memcpy>

		memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8003742:	4b45      	ldr	r3, [pc, #276]	; (8003858 <main+0x808>)
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	332e      	adds	r3, #46	; 0x2e
 8003752:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <main+0x800>)
 8003754:	1898      	adds	r0, r3, r2
 8003756:	4b40      	ldr	r3, [pc, #256]	; (8003858 <main+0x808>)
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	015b      	lsls	r3, r3, #5
 800375c:	4a40      	ldr	r2, [pc, #256]	; (8003860 <main+0x810>)
 800375e:	4413      	add	r3, r2
 8003760:	2206      	movs	r2, #6
 8003762:	4619      	mov	r1, r3
 8003764:	f006 fa2e 	bl	8009bc4 <memcpy>
		memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8003768:	4b3b      	ldr	r3, [pc, #236]	; (8003858 <main+0x808>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	336a      	adds	r3, #106	; 0x6a
 8003776:	4a36      	ldr	r2, [pc, #216]	; (8003850 <main+0x800>)
 8003778:	1898      	adds	r0, r3, r2
 800377a:	4b37      	ldr	r3, [pc, #220]	; (8003858 <main+0x808>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8003784:	fb02 f303 	mul.w	r3, r2, r3
 8003788:	4a36      	ldr	r2, [pc, #216]	; (8003864 <main+0x814>)
 800378a:	4413      	add	r3, r2
 800378c:	2205      	movs	r2, #5
 800378e:	4619      	mov	r1, r3
 8003790:	f006 fa18 	bl	8009bc4 <memcpy>
	for(i=0;i<10;i++){
 8003794:	4b30      	ldr	r3, [pc, #192]	; (8003858 <main+0x808>)
 8003796:	881b      	ldrh	r3, [r3, #0]
 8003798:	3301      	adds	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	4b2e      	ldr	r3, [pc, #184]	; (8003858 <main+0x808>)
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <main+0x808>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	d9b1      	bls.n	800370c <main+0x6bc>

	}	// copy vars into potSource



		uint16_t mem_count2=0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	//	mem_buf=0;
			// mem_verify=0;


				 mem_buf=potSource[mem_count];
 80037ae:	4b27      	ldr	r3, [pc, #156]	; (800384c <main+0x7fc>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	4b26      	ldr	r3, [pc, #152]	; (8003850 <main+0x800>)
 80037b6:	5c9a      	ldrb	r2, [r3, r2]
 80037b8:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <main+0x818>)
 80037ba:	701a      	strb	r2, [r3, #0]
				 if (mem_buf>159) mem_buf=159;
 80037bc:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <main+0x818>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b9f      	cmp	r3, #159	; 0x9f
 80037c2:	d902      	bls.n	80037ca <main+0x77a>
 80037c4:	4b28      	ldr	r3, [pc, #160]	; (8003868 <main+0x818>)
 80037c6:	229f      	movs	r2, #159	; 0x9f
 80037c8:	701a      	strb	r2, [r3, #0]
				 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <main+0x7fc>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	019b      	lsls	r3, r3, #6
 80037d8:	b29a      	uxth	r2, r3
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <main+0x7fc>)
 80037dc:	881b      	ldrh	r3, [r3, #0]
 80037de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
				 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 80037ea:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80037ee:	2364      	movs	r3, #100	; 0x64
 80037f0:	9302      	str	r3, [sp, #8]
 80037f2:	2301      	movs	r3, #1
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	4b1d      	ldr	r3, [pc, #116]	; (800386c <main+0x81c>)
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	2302      	movs	r3, #2
 80037fc:	21a0      	movs	r1, #160	; 0xa0
 80037fe:	481c      	ldr	r0, [pc, #112]	; (8003870 <main+0x820>)
 8003800:	f003 f93c 	bl	8006a7c <HAL_I2C_Mem_Read>
				 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <main+0x81c>)
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	4b17      	ldr	r3, [pc, #92]	; (8003868 <main+0x818>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d00c      	beq.n	800382a <main+0x7da>
 8003810:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8003814:	2364      	movs	r3, #100	; 0x64
 8003816:	9302      	str	r3, [sp, #8]
 8003818:	2301      	movs	r3, #1
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <main+0x818>)
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2302      	movs	r3, #2
 8003822:	21a0      	movs	r1, #160	; 0xa0
 8003824:	4812      	ldr	r0, [pc, #72]	; (8003870 <main+0x820>)
 8003826:	f003 f82f 	bl	8006888 <HAL_I2C_Mem_Write>



//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

loop_counter2=0; //reset
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <main+0x824>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 8003830:	4b11      	ldr	r3, [pc, #68]	; (8003878 <main+0x828>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <main+0x7ec>
 8003838:	f7fd ff60 	bl	80016fc <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 800383c:	4b0f      	ldr	r3, [pc, #60]	; (800387c <main+0x82c>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b05      	cmp	r3, #5
 8003842:	d829      	bhi.n	8003898 <main+0x848>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <main+0x808>)
 8003846:	2200      	movs	r2, #0
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	e021      	b.n	8003890 <main+0x840>
 800384c:	20001f16 	.word	0x20001f16
 8003850:	20000908 	.word	0x20000908
 8003854:	20003760 	.word	0x20003760
 8003858:	20000ac4 	.word	0x20000ac4
 800385c:	200001bc 	.word	0x200001bc
 8003860:	20002b94 	.word	0x20002b94
 8003864:	20002cd4 	.word	0x20002cd4
 8003868:	20001f1c 	.word	0x20001f1c
 800386c:	20003aae 	.word	0x20003aae
 8003870:	20005f58 	.word	0x20005f58
 8003874:	20001f18 	.word	0x20001f18
 8003878:	20002776 	.word	0x20002776
 800387c:	20001f0d 	.word	0x20001f0d
 8003880:	f7fd fe2c 	bl	80014dc <display_init>
 8003884:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <main+0x9c4>)
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	4b61      	ldr	r3, [pc, #388]	; (8003a14 <main+0x9c4>)
 800388e:	801a      	strh	r2, [r3, #0]
 8003890:	4b60      	ldr	r3, [pc, #384]	; (8003a14 <main+0x9c4>)
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	2b05      	cmp	r3, #5
 8003896:	d9f3      	bls.n	8003880 <main+0x830>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8003898:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <main+0x9c8>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b05      	cmp	r3, #5
 800389e:	d92a      	bls.n	80038f6 <main+0x8a6>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 80038a0:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <main+0x9cc>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d105      	bne.n	80038b4 <main+0x864>
 80038a8:	4b5d      	ldr	r3, [pc, #372]	; (8003a20 <main+0x9d0>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b5b      	ldr	r3, [pc, #364]	; (8003a20 <main+0x9d0>)
 80038b2:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <main+0x9cc>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10c      	bne.n	80038d6 <main+0x886>
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <main+0x9d4>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	00d2      	lsls	r2, r2, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	4b56      	ldr	r3, [pc, #344]	; (8003a28 <main+0x9d8>)
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	4b52      	ldr	r3, [pc, #328]	; (8003a1c <main+0x9cc>)
 80038d2:	2202      	movs	r2, #2
 80038d4:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 80038d6:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <main+0x9d0>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b90      	cmp	r3, #144	; 0x90
 80038dc:	d109      	bne.n	80038f2 <main+0x8a2>
 80038de:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <main+0x9d0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	4b50      	ldr	r3, [pc, #320]	; (8003a28 <main+0x9d8>)
 80038e6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	4b4b      	ldr	r3, [pc, #300]	; (8003a1c <main+0x9cc>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 80038f2:	f7fd fe49 	bl	8001588 <gfx_send>

	}


	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 80038f6:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <main+0x9dc>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2bff      	cmp	r3, #255	; 0xff
 80038fc:	d128      	bne.n	8003950 <main+0x900>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80038fe:	484c      	ldr	r0, [pc, #304]	; (8003a30 <main+0x9e0>)
 8003900:	f001 fd06 	bl	8005310 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8003904:	463b      	mov	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 800390c:	2101      	movs	r1, #1
 800390e:	4848      	ldr	r0, [pc, #288]	; (8003a30 <main+0x9e0>)
 8003910:	f001 f864 	bl	80049dc <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8003914:	2101      	movs	r1, #1
 8003916:	4846      	ldr	r0, [pc, #280]	; (8003a30 <main+0x9e0>)
 8003918:	f001 fe10 	bl	800553c <HAL_ADCEx_InjectedGetValue>
 800391c:	4603      	mov	r3, r0
 800391e:	b29b      	uxth	r3, r3
 8003920:	803b      	strh	r3, [r7, #0]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8003922:	2102      	movs	r1, #2
 8003924:	4842      	ldr	r0, [pc, #264]	; (8003a30 <main+0x9e0>)
 8003926:	f001 fe09 	bl	800553c <HAL_ADCEx_InjectedGetValue>
 800392a:	4603      	mov	r3, r0
 800392c:	b29b      	uxth	r3, r3
 800392e:	807b      	strh	r3, [r7, #2]
		//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	  adc_temp1[0]>>7;
 8003930:	883b      	ldrh	r3, [r7, #0]
 8003932:	09db      	lsrs	r3, r3, #7
 8003934:	b29a      	uxth	r2, r3
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <main+0x9e4>)
 8003938:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	  adc_temp1[1]>>7;
 800393a:	887b      	ldrh	r3, [r7, #2]
 800393c:	09db      	lsrs	r3, r3, #7
 800393e:	b29a      	uxth	r2, r3
 8003940:	4b3c      	ldr	r3, [pc, #240]	; (8003a34 <main+0x9e4>)
 8003942:	805a      	strh	r2, [r3, #2]
		//  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 8003944:	483a      	ldr	r0, [pc, #232]	; (8003a30 <main+0x9e0>)
 8003946:	f001 fdad 	bl	80054a4 <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <main+0x9dc>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <main+0x9e8>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b07      	cmp	r3, #7
 8003956:	d106      	bne.n	8003966 <main+0x916>
 8003958:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <main+0x9ec>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <main+0x916>
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <main+0x9ec>)
 8003962:	2201      	movs	r2, #1
 8003964:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8003966:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <main+0x9e8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	b2db      	uxtb	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003976:	4832      	ldr	r0, [pc, #200]	; (8003a40 <main+0x9f0>)
 8003978:	f002 fe28 	bl	80065cc <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <main+0x9f4>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d041      	beq.n	8003a08 <main+0x9b8>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 8003984:	482a      	ldr	r0, [pc, #168]	; (8003a30 <main+0x9e0>)
 8003986:	f001 f9a5 	bl	8004cd4 <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 800398a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398e:	492e      	ldr	r1, [pc, #184]	; (8003a48 <main+0x9f8>)
 8003990:	4827      	ldr	r0, [pc, #156]	; (8003a30 <main+0x9e0>)
 8003992:	f001 f8af 	bl	8004af4 <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 8003996:	4b2c      	ldr	r3, [pc, #176]	; (8003a48 <main+0x9f8>)
 8003998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	  			for (i=0;i<512;i++)
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <main+0x9c4>)
 800399e:	2200      	movs	r2, #0
 80039a0:	801a      	strh	r2, [r3, #0]
 80039a2:	e029      	b.n	80039f8 <main+0x9a8>
	  			{

	  				uint16_t crap_hold=*click;
 80039a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4

	  			uint16_t crap_hold1=*(++click);
 80039ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039b2:	3302      	adds	r3, #2
 80039b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  		click++;
 80039c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80039c6:	3302      	adds	r3, #2
 80039c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 80039cc:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80039d0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80039d4:	4413      	add	r3, r2
 80039d6:	1059      	asrs	r1, r3, #1
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <main+0x9c4>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	b289      	uxth	r1, r1
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <main+0x9fc>)
 80039e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <main+0x9f4>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <main+0x9c4>)
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <main+0x9c4>)
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <main+0x9c4>)
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a00:	d3d0      	bcc.n	80039a4 <main+0x954>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 8003a02:	e001      	b.n	8003a08 <main+0x9b8>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 8003a04:	f7fe f990 	bl	8001d28 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <main+0xa00>)
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f9      	bne.n	8003a04 <main+0x9b4>
	  loop_counter++ ;
 8003a10:	e610      	b.n	8003634 <main+0x5e4>
 8003a12:	bf00      	nop
 8003a14:	20000ac4 	.word	0x20000ac4
 8003a18:	20001f0d 	.word	0x20001f0d
 8003a1c:	2000276a 	.word	0x2000276a
 8003a20:	2000276b 	.word	0x2000276b
 8003a24:	20002769 	.word	0x20002769
 8003a28:	20002766 	.word	0x20002766
 8003a2c:	20000ac0 	.word	0x20000ac0
 8003a30:	20005eb0 	.word	0x20005eb0
 8003a34:	200001a8 	.word	0x200001a8
 8003a38:	20003760 	.word	0x20003760
 8003a3c:	20001f04 	.word	0x20001f04
 8003a40:	40020800 	.word	0x40020800
 8003a44:	20002b78 	.word	0x20002b78
 8003a48:	200012d4 	.word	0x200012d4
 8003a4c:	20002778 	.word	0x20002778
 8003a50:	200001b2 	.word	0x200001b2

08003a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b094      	sub	sp, #80	; 0x50
 8003a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a5a:	f107 0320 	add.w	r3, r7, #32
 8003a5e:	2230      	movs	r2, #48	; 0x30
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f006 f8bc 	bl	8009be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a68:	f107 030c 	add.w	r3, r7, #12
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	605a      	str	r2, [r3, #4]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <SystemClock_Config+0xcc>)
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	4a27      	ldr	r2, [pc, #156]	; (8003b20 <SystemClock_Config+0xcc>)
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	6413      	str	r3, [r2, #64]	; 0x40
 8003a88:	4b25      	ldr	r3, [pc, #148]	; (8003b20 <SystemClock_Config+0xcc>)
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a94:	2300      	movs	r3, #0
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	4b22      	ldr	r3, [pc, #136]	; (8003b24 <SystemClock_Config+0xd0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <SystemClock_Config+0xd0>)
 8003a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <SystemClock_Config+0xd0>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ab8:	2310      	movs	r3, #16
 8003aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003abc:	2302      	movs	r3, #2
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003ac8:	2364      	movs	r3, #100	; 0x64
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad4:	f107 0320 	add.w	r3, r7, #32
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f003 fd51 	bl	8007580 <HAL_RCC_OscConfig>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ae4:	f000 faf6 	bl	80040d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ae8:	230f      	movs	r3, #15
 8003aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	2103      	movs	r1, #3
 8003b06:	4618      	mov	r0, r3
 8003b08:	f003 ffb2 	bl	8007a70 <HAL_RCC_ClockConfig>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003b12:	f000 fadf 	bl	80040d4 <Error_Handler>
  }
}
 8003b16:	bf00      	nop
 8003b18:	3750      	adds	r7, #80	; 0x50
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40007000 	.word	0x40007000

08003b28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	; 0x30
 8003b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b2e:	f107 0320 	add.w	r3, r7, #32
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]
 8003b3a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	2220      	movs	r2, #32
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f006 f84c 	bl	8009be0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b48:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b4a:	4a37      	ldr	r2, [pc, #220]	; (8003c28 <MX_ADC1_Init+0x100>)
 8003b4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b4e:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b56:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b68:	4b2e      	ldr	r3, [pc, #184]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b70:	4b2c      	ldr	r3, [pc, #176]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b76:	4b2b      	ldr	r3, [pc, #172]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b78:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <MX_ADC1_Init+0x104>)
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b7c:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003b82:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003b88:	4b26      	ldr	r3, [pc, #152]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b90:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b96:	4823      	ldr	r0, [pc, #140]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003b98:	f000 fe28 	bl	80047ec <HAL_ADC_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8003ba2:	f000 fa97 	bl	80040d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003ba6:	2309      	movs	r3, #9
 8003ba8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003bae:	2306      	movs	r3, #6
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bb2:	f107 0320 	add.w	r3, r7, #32
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	481a      	ldr	r0, [pc, #104]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003bba:	f001 f8f9 	bl	8004db0 <HAL_ADC_ConfigChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8003bc4:	f000 fa86 	bl	80040d4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <MX_ADC1_Init+0x108>)
 8003bde:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8003be0:	2300      	movs	r3, #0
 8003be2:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003bec:	463b      	mov	r3, r7
 8003bee:	4619      	mov	r1, r3
 8003bf0:	480c      	ldr	r0, [pc, #48]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003bf2:	f001 fcdb 	bl	80055ac <HAL_ADCEx_InjectedConfigChannel>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8003bfc:	f000 fa6a 	bl	80040d4 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8003c00:	2302      	movs	r3, #2
 8003c02:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8003c04:	2302      	movs	r3, #2
 8003c06:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003c08:	463b      	mov	r3, r7
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4805      	ldr	r0, [pc, #20]	; (8003c24 <MX_ADC1_Init+0xfc>)
 8003c0e:	f001 fccd 	bl	80055ac <HAL_ADCEx_InjectedConfigChannel>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8003c18:	f000 fa5c 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003c1c:	bf00      	nop
 8003c1e:	3730      	adds	r7, #48	; 0x30
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20005eb0 	.word	0x20005eb0
 8003c28:	40012000 	.word	0x40012000
 8003c2c:	0f000001 	.word	0x0f000001
 8003c30:	000f0001 	.word	0x000f0001

08003c34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <MX_I2C2_Init+0x54>)
 8003c3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c40:	4a12      	ldr	r2, [pc, #72]	; (8003c8c <MX_I2C2_Init+0x58>)
 8003c42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c70:	4804      	ldr	r0, [pc, #16]	; (8003c84 <MX_I2C2_Init+0x50>)
 8003c72:	f002 fcc5 	bl	8006600 <HAL_I2C_Init>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003c7c:	f000 fa2a 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c80:	bf00      	nop
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20005f58 	.word	0x20005f58
 8003c88:	40005800 	.word	0x40005800
 8003c8c:	00061a80 	.word	0x00061a80

08003c90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <MX_SPI1_Init+0x68>)
 8003c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cae:	4b11      	ldr	r3, [pc, #68]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cb4:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003cba:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003cc2:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003cc8:	4b0a      	ldr	r3, [pc, #40]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003cda:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003cdc:	220a      	movs	r2, #10
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ce0:	4804      	ldr	r0, [pc, #16]	; (8003cf4 <MX_SPI1_Init+0x64>)
 8003ce2:	f004 f891 	bl	8007e08 <HAL_SPI_Init>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003cec:	f000 f9f2 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20005fac 	.word	0x20005fac
 8003cf8:	40013000 	.word	0x40013000

08003cfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <MX_SPI2_Init+0x68>)
 8003d04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d14:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d30:	2230      	movs	r2, #48	; 0x30
 8003d32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d48:	220a      	movs	r2, #10
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003d4c:	4804      	ldr	r0, [pc, #16]	; (8003d60 <MX_SPI2_Init+0x64>)
 8003d4e:	f004 f85b 	bl	8007e08 <HAL_SPI_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003d58:	f000 f9bc 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20006004 	.word	0x20006004
 8003d64:	40003800 	.word	0x40003800

08003d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	; 0x30
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d6e:	f107 030c 	add.w	r3, r7, #12
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f005 ff32 	bl	8009be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d7c:	1d3b      	adds	r3, r7, #4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d92:	4b1e      	ldr	r3, [pc, #120]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003d98:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da8:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003dae:	2301      	movs	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003db2:	2302      	movs	r3, #2
 8003db4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003db6:	2301      	movs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003dd2:	f107 030c 	add.w	r3, r7, #12
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003dda:	f004 ffd3 	bl	8008d84 <HAL_TIM_Encoder_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003de4:	f000 f976 	bl	80040d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	4619      	mov	r1, r3
 8003df4:	4805      	ldr	r0, [pc, #20]	; (8003e0c <MX_TIM2_Init+0xa4>)
 8003df6:	f005 fdf1 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003e00:	f000 f968 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e04:	bf00      	nop
 8003e06:	3730      	adds	r7, #48	; 0x30
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	2000605c 	.word	0x2000605c

08003e10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08e      	sub	sp, #56	; 0x38
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e24:	f107 0320 	add.w	r3, r7, #32
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
 8003e3c:	615a      	str	r2, [r3, #20]
 8003e3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e40:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e42:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <MX_TIM3_Init+0xe8>)
 8003e44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e46:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4c:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 8003e52:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e54:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8003e58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5a:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e66:	4823      	ldr	r0, [pc, #140]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e68:	f004 fd76 	bl	8008958 <HAL_TIM_Base_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003e72:	f000 f92f 	bl	80040d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003e7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e80:	4619      	mov	r1, r3
 8003e82:	481c      	ldr	r0, [pc, #112]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e84:	f005 f9ee 	bl	8009264 <HAL_TIM_ConfigClockSource>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003e8e:	f000 f921 	bl	80040d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003e92:	4818      	ldr	r0, [pc, #96]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003e94:	f004 fe6c 	bl	8008b70 <HAL_TIM_PWM_Init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003e9e:	f000 f919 	bl	80040d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003eaa:	f107 0320 	add.w	r3, r7, #32
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4810      	ldr	r0, [pc, #64]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003eb2:	f005 fd93 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003ebc:	f000 f90a 	bl	80040d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8003ec0:	2370      	movs	r3, #112	; 0x70
 8003ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ed0:	1d3b      	adds	r3, r7, #4
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4807      	ldr	r0, [pc, #28]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003ed8:	f005 f902 	bl	80090e0 <HAL_TIM_PWM_ConfigChannel>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003ee2:	f000 f8f7 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ee6:	4803      	ldr	r0, [pc, #12]	; (8003ef4 <MX_TIM3_Init+0xe4>)
 8003ee8:	f000 fb32 	bl	8004550 <HAL_TIM_MspPostInit>

}
 8003eec:	bf00      	nop
 8003eee:	3738      	adds	r7, #56	; 0x38
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200060a4 	.word	0x200060a4
 8003ef8:	40000400 	.word	0x40000400

08003efc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	; 0x30
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f02:	f107 030c 	add.w	r3, r7, #12
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 fe68 	bl	8009be0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f18:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f1a:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <MX_TIM4_Init+0xa4>)
 8003f1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f2a:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003f42:	2302      	movs	r3, #2
 8003f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f46:	2301      	movs	r3, #1
 8003f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003f4e:	2302      	movs	r3, #2
 8003f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003f52:	2302      	movs	r3, #2
 8003f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f56:	2301      	movs	r3, #1
 8003f58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f62:	f107 030c 	add.w	r3, r7, #12
 8003f66:	4619      	mov	r1, r3
 8003f68:	480c      	ldr	r0, [pc, #48]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f6a:	f004 ff0b 	bl	8008d84 <HAL_TIM_Encoder_Init>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003f74:	f000 f8ae 	bl	80040d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f80:	1d3b      	adds	r3, r7, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_TIM4_Init+0xa0>)
 8003f86:	f005 fd29 	bl	80099dc <HAL_TIMEx_MasterConfigSynchronization>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003f90:	f000 f8a0 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003f94:	bf00      	nop
 8003f96:	3730      	adds	r7, #48	; 0x30
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200060ec 	.word	0x200060ec
 8003fa0:	40000800 	.word	0x40000800

08003fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	607b      	str	r3, [r7, #4]
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <MX_DMA_Init+0x3c>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <MX_DMA_Init+0x3c>)
 8003fb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <MX_DMA_Init+0x3c>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc2:	607b      	str	r3, [r7, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2100      	movs	r1, #0
 8003fca:	203c      	movs	r0, #60	; 0x3c
 8003fcc:	f001 fd63 	bl	8005a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003fd0:	203c      	movs	r0, #60	; 0x3c
 8003fd2:	f001 fd7c 	bl	8005ace <HAL_NVIC_EnableIRQ>

}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800

08003fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	60da      	str	r2, [r3, #12]
 8003ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	4b2a      	ldr	r3, [pc, #168]	; (80040a8 <MX_GPIO_Init+0xc4>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <MX_GPIO_Init+0xc4>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b27      	ldr	r3, [pc, #156]	; (80040a8 <MX_GPIO_Init+0xc4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
 800401a:	4b23      	ldr	r3, [pc, #140]	; (80040a8 <MX_GPIO_Init+0xc4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a22      	ldr	r2, [pc, #136]	; (80040a8 <MX_GPIO_Init+0xc4>)
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <MX_GPIO_Init+0xc4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	607b      	str	r3, [r7, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <MX_GPIO_Init+0xc4>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <MX_GPIO_Init+0xc4>)
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	6313      	str	r3, [r2, #48]	; 0x30
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <MX_GPIO_Init+0xc4>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800404e:	2200      	movs	r2, #0
 8004050:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004054:	4815      	ldr	r0, [pc, #84]	; (80040ac <MX_GPIO_Init+0xc8>)
 8004056:	f002 fab9 	bl	80065cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800405a:	2201      	movs	r2, #1
 800405c:	2110      	movs	r1, #16
 800405e:	4814      	ldr	r0, [pc, #80]	; (80040b0 <MX_GPIO_Init+0xcc>)
 8004060:	f002 fab4 	bl	80065cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004068:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406a:	2301      	movs	r3, #1
 800406c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4619      	mov	r1, r3
 800407c:	480b      	ldr	r0, [pc, #44]	; (80040ac <MX_GPIO_Init+0xc8>)
 800407e:	f002 f921 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8004082:	2310      	movs	r3, #16
 8004084:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	2301      	movs	r3, #1
 8004088:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408e:	2303      	movs	r3, #3
 8004090:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	4619      	mov	r1, r3
 8004098:	4805      	ldr	r0, [pc, #20]	; (80040b0 <MX_GPIO_Init+0xcc>)
 800409a:	f002 f913 	bl	80062c4 <HAL_GPIO_Init>

}
 800409e:	bf00      	nop
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40020800 	.word	0x40020800
 80040b0:	40020000 	.word	0x40020000

080040b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
adc_flag=1;
 80040bc:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]


}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20002b78 	.word	0x20002b78

080040d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040d8:	b672      	cpsid	i
}
 80040da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040dc:	e7fe      	b.n	80040dc <Error_Handler+0x8>
	...

080040e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_MspInit+0x4c>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4a0f      	ldr	r2, [pc, #60]	; (800412c <HAL_MspInit+0x4c>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_MspInit+0x4c>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	2300      	movs	r3, #0
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_MspInit+0x4c>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a08      	ldr	r2, [pc, #32]	; (800412c <HAL_MspInit+0x4c>)
 800410c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_MspInit+0x4c>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a3c      	ldr	r2, [pc, #240]	; (8004240 <HAL_ADC_MspInit+0x110>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d171      	bne.n	8004236 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	4a3a      	ldr	r2, [pc, #232]	; (8004244 <HAL_ADC_MspInit+0x114>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6453      	str	r3, [r2, #68]	; 0x44
 8004162:	4b38      	ldr	r3, [pc, #224]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b34      	ldr	r3, [pc, #208]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004192:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <HAL_ADC_MspInit+0x114>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6313      	str	r3, [r2, #48]	; 0x30
 800419a:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_ADC_MspInit+0x114>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80041a6:	2305      	movs	r3, #5
 80041a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041aa:	2303      	movs	r3, #3
 80041ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b2:	f107 0314 	add.w	r3, r7, #20
 80041b6:	4619      	mov	r1, r3
 80041b8:	4823      	ldr	r0, [pc, #140]	; (8004248 <HAL_ADC_MspInit+0x118>)
 80041ba:	f002 f883 	bl	80062c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041be:	2302      	movs	r3, #2
 80041c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c2:	2303      	movs	r3, #3
 80041c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ca:	f107 0314 	add.w	r3, r7, #20
 80041ce:	4619      	mov	r1, r3
 80041d0:	481e      	ldr	r0, [pc, #120]	; (800424c <HAL_ADC_MspInit+0x11c>)
 80041d2:	f002 f877 	bl	80062c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_ADC_MspInit+0x120>)
 80041d8:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_ADC_MspInit+0x124>)
 80041da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <HAL_ADC_MspInit+0x120>)
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_ADC_MspInit+0x120>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_ADC_MspInit+0x120>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80041ee:	4b18      	ldr	r3, [pc, #96]	; (8004250 <HAL_ADC_MspInit+0x120>)
 80041f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <HAL_ADC_MspInit+0x120>)
 80041f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <HAL_ADC_MspInit+0x120>)
 8004200:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004204:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_ADC_MspInit+0x120>)
 8004208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800420c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_ADC_MspInit+0x120>)
 8004210:	2200      	movs	r2, #0
 8004212:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_ADC_MspInit+0x120>)
 8004216:	2200      	movs	r2, #0
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800421a:	480d      	ldr	r0, [pc, #52]	; (8004250 <HAL_ADC_MspInit+0x120>)
 800421c:	f001 fc72 	bl	8005b04 <HAL_DMA_Init>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004226:	f7ff ff55 	bl	80040d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_ADC_MspInit+0x120>)
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
 8004230:	4a07      	ldr	r2, [pc, #28]	; (8004250 <HAL_ADC_MspInit+0x120>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40012000 	.word	0x40012000
 8004244:	40023800 	.word	0x40023800
 8004248:	40020000 	.word	0x40020000
 800424c:	40020400 	.word	0x40020400
 8004250:	20005ef8 	.word	0x20005ef8
 8004254:	40026470 	.word	0x40026470

08004258 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a22      	ldr	r2, [pc, #136]	; (8004300 <HAL_I2C_MspInit+0xa8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d13d      	bne.n	80042f6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_I2C_MspInit+0xac>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_I2C_MspInit+0xac>)
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_I2C_MspInit+0xac>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800429a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800429c:	2312      	movs	r3, #18
 800429e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80042a8:	2309      	movs	r3, #9
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4619      	mov	r1, r3
 80042b2:	4815      	ldr	r0, [pc, #84]	; (8004308 <HAL_I2C_MspInit+0xb0>)
 80042b4:	f002 f806 	bl	80062c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80042b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042be:	2312      	movs	r3, #18
 80042c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c6:	2303      	movs	r3, #3
 80042c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80042ca:	2304      	movs	r3, #4
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ce:	f107 0314 	add.w	r3, r7, #20
 80042d2:	4619      	mov	r1, r3
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <HAL_I2C_MspInit+0xb0>)
 80042d6:	f001 fff5 	bl	80062c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_I2C_MspInit+0xac>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_I2C_MspInit+0xac>)
 80042e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042e8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_I2C_MspInit+0xac>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042f6:	bf00      	nop
 80042f8:	3728      	adds	r7, #40	; 0x28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40005800 	.word	0x40005800
 8004304:	40023800 	.word	0x40023800
 8004308:	40020400 	.word	0x40020400

0800430c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	; 0x30
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004314:	f107 031c 	add.w	r3, r7, #28
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_SPI_MspInit+0xe8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d12c      	bne.n	8004388 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	4a30      	ldr	r2, [pc, #192]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 8004338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800433c:	6453      	str	r3, [r2, #68]	; 0x44
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	4b2a      	ldr	r3, [pc, #168]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	4a29      	ldr	r2, [pc, #164]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	6313      	str	r3, [r2, #48]	; 0x30
 800435a:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004366:	23e0      	movs	r3, #224	; 0xe0
 8004368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004372:	2303      	movs	r3, #3
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004376:	2305      	movs	r3, #5
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437a:	f107 031c 	add.w	r3, r7, #28
 800437e:	4619      	mov	r1, r3
 8004380:	481e      	ldr	r0, [pc, #120]	; (80043fc <HAL_SPI_MspInit+0xf0>)
 8004382:	f001 ff9f 	bl	80062c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004386:	e031      	b.n	80043ec <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1c      	ldr	r2, [pc, #112]	; (8004400 <HAL_SPI_MspInit+0xf4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d12c      	bne.n	80043ec <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	613b      	str	r3, [r7, #16]
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 800439c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a0:	6413      	str	r3, [r2, #64]	; 0x40
 80043a2:	4b15      	ldr	r3, [pc, #84]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043aa:	613b      	str	r3, [r7, #16]
 80043ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 80043b8:	f043 0302 	orr.w	r3, r3, #2
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b0e      	ldr	r3, [pc, #56]	; (80043f8 <HAL_SPI_MspInit+0xec>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80043ca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80043ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	2302      	movs	r3, #2
 80043d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d8:	2303      	movs	r3, #3
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80043dc:	2305      	movs	r3, #5
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e0:	f107 031c 	add.w	r3, r7, #28
 80043e4:	4619      	mov	r1, r3
 80043e6:	4807      	ldr	r0, [pc, #28]	; (8004404 <HAL_SPI_MspInit+0xf8>)
 80043e8:	f001 ff6c 	bl	80062c4 <HAL_GPIO_Init>
}
 80043ec:	bf00      	nop
 80043ee:	3730      	adds	r7, #48	; 0x30
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40013000 	.word	0x40013000
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40020000 	.word	0x40020000
 8004400:	40003800 	.word	0x40003800
 8004404:	40020400 	.word	0x40020400

08004408 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	; 0x30
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 031c 	add.w	r3, r7, #28
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004428:	d12d      	bne.n	8004486 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	4a2f      	ldr	r2, [pc, #188]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	6413      	str	r3, [r2, #64]	; 0x40
 800443a:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a28      	ldr	r2, [pc, #160]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004462:	f248 0302 	movw	r3, #32770	; 0x8002
 8004466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004468:	2302      	movs	r3, #2
 800446a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800446c:	2301      	movs	r3, #1
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004470:	2300      	movs	r3, #0
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004474:	2301      	movs	r3, #1
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004478:	f107 031c 	add.w	r3, r7, #28
 800447c:	4619      	mov	r1, r3
 800447e:	481d      	ldr	r0, [pc, #116]	; (80044f4 <HAL_TIM_Encoder_MspInit+0xec>)
 8004480:	f001 ff20 	bl	80062c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004484:	e030      	b.n	80044e8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	; (80044f8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d12b      	bne.n	80044e8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004490:	2300      	movs	r3, #0
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	4b16      	ldr	r3, [pc, #88]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6413      	str	r3, [r2, #64]	; 0x40
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80044b6:	f043 0302 	orr.w	r3, r3, #2
 80044ba:	6313      	str	r3, [r2, #48]	; 0x30
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044c8:	23c0      	movs	r3, #192	; 0xc0
 80044ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044cc:	2302      	movs	r3, #2
 80044ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d0:	2301      	movs	r3, #1
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044d8:	2302      	movs	r3, #2
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044dc:	f107 031c 	add.w	r3, r7, #28
 80044e0:	4619      	mov	r1, r3
 80044e2:	4806      	ldr	r0, [pc, #24]	; (80044fc <HAL_TIM_Encoder_MspInit+0xf4>)
 80044e4:	f001 feee 	bl	80062c4 <HAL_GPIO_Init>
}
 80044e8:	bf00      	nop
 80044ea:	3730      	adds	r7, #48	; 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40020000 	.word	0x40020000
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40020400 	.word	0x40020400

08004500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <HAL_TIM_Base_MspInit+0x48>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d115      	bne.n	800453e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	4b0d      	ldr	r3, [pc, #52]	; (800454c <HAL_TIM_Base_MspInit+0x4c>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a0c      	ldr	r2, [pc, #48]	; (800454c <HAL_TIM_Base_MspInit+0x4c>)
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <HAL_TIM_Base_MspInit+0x4c>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800452e:	2200      	movs	r2, #0
 8004530:	2100      	movs	r1, #0
 8004532:	201d      	movs	r0, #29
 8004534:	f001 faaf 	bl	8005a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004538:	201d      	movs	r0, #29
 800453a:	f001 fac8 	bl	8005ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40000400 	.word	0x40000400
 800454c:	40023800 	.word	0x40023800

08004550 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	f107 030c 	add.w	r3, r7, #12
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <HAL_TIM_MspPostInit+0x68>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d11d      	bne.n	80045ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	4b11      	ldr	r3, [pc, #68]	; (80045bc <HAL_TIM_MspPostInit+0x6c>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <HAL_TIM_MspPostInit+0x6c>)
 800457c:	f043 0302 	orr.w	r3, r3, #2
 8004580:	6313      	str	r3, [r2, #48]	; 0x30
 8004582:	4b0e      	ldr	r3, [pc, #56]	; (80045bc <HAL_TIM_MspPostInit+0x6c>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	60bb      	str	r3, [r7, #8]
 800458c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800458e:	2301      	movs	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800459e:	2302      	movs	r3, #2
 80045a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045a2:	f107 030c 	add.w	r3, r7, #12
 80045a6:	4619      	mov	r1, r3
 80045a8:	4805      	ldr	r0, [pc, #20]	; (80045c0 <HAL_TIM_MspPostInit+0x70>)
 80045aa:	f001 fe8b 	bl	80062c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80045ae:	bf00      	nop
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40023800 	.word	0x40023800
 80045c0:	40020400 	.word	0x40020400

080045c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045c8:	e7fe      	b.n	80045c8 <NMI_Handler+0x4>

080045ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ce:	e7fe      	b.n	80045ce <HardFault_Handler+0x4>

080045d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d4:	e7fe      	b.n	80045d4 <MemManage_Handler+0x4>

080045d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d6:	b480      	push	{r7}
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045da:	e7fe      	b.n	80045da <BusFault_Handler+0x4>

080045dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e0:	e7fe      	b.n	80045e0 <UsageFault_Handler+0x4>

080045e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004610:	f000 f8a8 	bl	8004764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004614:	bf00      	nop
 8004616:	bd80      	pop	{r7, pc}

08004618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800461c:	4802      	ldr	r0, [pc, #8]	; (8004628 <TIM3_IRQHandler+0x10>)
 800461e:	f004 fc57 	bl	8008ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200060a4 	.word	0x200060a4

0800462c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004630:	4802      	ldr	r0, [pc, #8]	; (800463c <DMA2_Stream4_IRQHandler+0x10>)
 8004632:	f001 fbdd 	bl	8005df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20005ef8 	.word	0x20005ef8

08004640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004644:	4b08      	ldr	r3, [pc, #32]	; (8004668 <SystemInit+0x28>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	4a07      	ldr	r2, [pc, #28]	; (8004668 <SystemInit+0x28>)
 800464c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <SystemInit+0x28>)
 8004656:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800465a:	609a      	str	r2, [r3, #8]
#endif
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800466c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004670:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004672:	e003      	b.n	800467c <LoopCopyDataInit>

08004674 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004674:	4b0c      	ldr	r3, [pc, #48]	; (80046a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004676:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004678:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800467a:	3104      	adds	r1, #4

0800467c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800467c:	480b      	ldr	r0, [pc, #44]	; (80046ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004680:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004682:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004684:	d3f6      	bcc.n	8004674 <CopyDataInit>
  ldr  r2, =_sbss
 8004686:	4a0b      	ldr	r2, [pc, #44]	; (80046b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004688:	e002      	b.n	8004690 <LoopFillZerobss>

0800468a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800468a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800468c:	f842 3b04 	str.w	r3, [r2], #4

08004690 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004692:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004694:	d3f9      	bcc.n	800468a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004696:	f7ff ffd3 	bl	8004640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800469a:	f005 fa6f 	bl	8009b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800469e:	f7fe fcd7 	bl	8003050 <main>
  bx  lr    
 80046a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80046a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80046a8:	0800b2c8 	.word	0x0800b2c8
  ldr  r0, =_sdata
 80046ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80046b0:	20000768 	.word	0x20000768
  ldr  r2, =_sbss
 80046b4:	20000768 	.word	0x20000768
  ldr  r3, = _ebss
 80046b8:	20006138 	.word	0x20006138

080046bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046bc:	e7fe      	b.n	80046bc <ADC_IRQHandler>
	...

080046c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <HAL_Init+0x40>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <HAL_Init+0x40>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_Init+0x40>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	; (8004700 <HAL_Init+0x40>)
 80046d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046dc:	4b08      	ldr	r3, [pc, #32]	; (8004700 <HAL_Init+0x40>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a07      	ldr	r2, [pc, #28]	; (8004700 <HAL_Init+0x40>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e8:	2003      	movs	r0, #3
 80046ea:	f001 f9c9 	bl	8005a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f000 f808 	bl	8004704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f4:	f7ff fcf4 	bl	80040e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023c00 	.word	0x40023c00

08004704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800470c:	4b12      	ldr	r3, [pc, #72]	; (8004758 <HAL_InitTick+0x54>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <HAL_InitTick+0x58>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4619      	mov	r1, r3
 8004716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800471a:	fbb3 f3f1 	udiv	r3, r3, r1
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f001 f9e1 	bl	8005aea <HAL_SYSTICK_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e00e      	b.n	8004750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b0f      	cmp	r3, #15
 8004736:	d80a      	bhi.n	800474e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004738:	2200      	movs	r2, #0
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f001 f9a9 	bl	8005a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004744:	4a06      	ldr	r2, [pc, #24]	; (8004760 <HAL_InitTick+0x5c>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	200006f8 	.word	0x200006f8
 800475c:	20000700 	.word	0x20000700
 8004760:	200006fc 	.word	0x200006fc

08004764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_IncTick+0x20>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_IncTick+0x24>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4413      	add	r3, r2
 8004774:	4a04      	ldr	r2, [pc, #16]	; (8004788 <HAL_IncTick+0x24>)
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000700 	.word	0x20000700
 8004788:	20006134 	.word	0x20006134

0800478c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return uwTick;
 8004790:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <HAL_GetTick+0x14>)
 8004792:	681b      	ldr	r3, [r3, #0]
}
 8004794:	4618      	mov	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20006134 	.word	0x20006134

080047a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047ac:	f7ff ffee 	bl	800478c <HAL_GetTick>
 80047b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d005      	beq.n	80047ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047be:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <HAL_Delay+0x44>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80047ca:	bf00      	nop
 80047cc:	f7ff ffde 	bl	800478c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d8f7      	bhi.n	80047cc <HAL_Delay+0x28>
  {
  }
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20000700 	.word	0x20000700

080047ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e033      	b.n	800486a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fc90 	bl	8004130 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f003 0310 	and.w	r3, r3, #16
 8004826:	2b00      	cmp	r3, #0
 8004828:	d118      	bne.n	800485c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004832:	f023 0302 	bic.w	r3, r3, #2
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 fbe8 	bl	8005014 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
 800485a:	e001      	b.n	8004860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004868:	7bfb      	ldrb	r3, [r7, #15]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_ADC_Start+0x1a>
 800488a:	2302      	movs	r3, #2
 800488c:	e097      	b.n	80049be <HAL_ADC_Start+0x14a>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d018      	beq.n	80048d6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048b4:	4b45      	ldr	r3, [pc, #276]	; (80049cc <HAL_ADC_Start+0x158>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a45      	ldr	r2, [pc, #276]	; (80049d0 <HAL_ADC_Start+0x15c>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	0c9a      	lsrs	r2, r3, #18
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80048c8:	e002      	b.n	80048d0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f9      	bne.n	80048ca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d15f      	bne.n	80049a4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800490e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004922:	d106      	bne.n	8004932 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f023 0206 	bic.w	r2, r3, #6
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
 8004930:	e002      	b.n	8004938 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004940:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_ADC_Start+0x160>)
 8004942:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800494c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10f      	bne.n	800497a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d129      	bne.n	80049bc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e020      	b.n	80049bc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <HAL_ADC_Start+0x164>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d11b      	bne.n	80049bc <HAL_ADC_Start+0x148>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d114      	bne.n	80049bc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	e00b      	b.n	80049bc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0210 	orr.w	r2, r3, #16
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	200006f8 	.word	0x200006f8
 80049d0:	431bde83 	.word	0x431bde83
 80049d4:	40012300 	.word	0x40012300
 80049d8:	40012000 	.word	0x40012000

080049dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f8:	d113      	bne.n	8004a22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a08:	d10b      	bne.n	8004a22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e063      	b.n	8004aea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004a22:	f7ff feb3 	bl	800478c <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a28:	e021      	b.n	8004a6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d01d      	beq.n	8004a6e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_ADC_PollForConversion+0x6c>
 8004a38:	f7ff fea8 	bl	800478c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d212      	bcs.n	8004a6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d00b      	beq.n	8004a6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0204 	orr.w	r2, r3, #4
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e03d      	b.n	8004aea <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d1d6      	bne.n	8004a2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0212 	mvn.w	r2, #18
 8004a84:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d123      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d11f      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d006      	beq.n	8004ac4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d111      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_Start_DMA+0x1e>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0ce      	b.n	8004cb0 <HAL_ADC_Start_DMA+0x1bc>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d018      	beq.n	8004b5a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b38:	4b5f      	ldr	r3, [pc, #380]	; (8004cb8 <HAL_ADC_Start_DMA+0x1c4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5f      	ldr	r2, [pc, #380]	; (8004cbc <HAL_ADC_Start_DMA+0x1c8>)
 8004b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b42:	0c9a      	lsrs	r2, r3, #18
 8004b44:	4613      	mov	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	4413      	add	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004b4c:	e002      	b.n	8004b54 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f9      	bne.n	8004b4e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b68:	d107      	bne.n	8004b7a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	f040 8086 	bne.w	8004c96 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc8:	d106      	bne.n	8004bd8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	f023 0206 	bic.w	r2, r3, #6
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	645a      	str	r2, [r3, #68]	; 0x44
 8004bd6:	e002      	b.n	8004bde <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004be6:	4b36      	ldr	r3, [pc, #216]	; (8004cc0 <HAL_ADC_Start_DMA+0x1cc>)
 8004be8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	4a35      	ldr	r2, [pc, #212]	; (8004cc4 <HAL_ADC_Start_DMA+0x1d0>)
 8004bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	4a34      	ldr	r2, [pc, #208]	; (8004cc8 <HAL_ADC_Start_DMA+0x1d4>)
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <HAL_ADC_Start_DMA+0x1d8>)
 8004c00:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c1a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	334c      	adds	r3, #76	; 0x4c
 8004c36:	4619      	mov	r1, r3
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f001 f810 	bl	8005c60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f003 031f 	and.w	r3, r3, #31
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10f      	bne.n	8004c6c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d129      	bne.n	8004cae <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	e020      	b.n	8004cae <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <HAL_ADC_Start_DMA+0x1dc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d11b      	bne.n	8004cae <HAL_ADC_Start_DMA+0x1ba>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d114      	bne.n	8004cae <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	e00b      	b.n	8004cae <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0210 	orr.w	r2, r3, #16
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f043 0201 	orr.w	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200006f8 	.word	0x200006f8
 8004cbc:	431bde83 	.word	0x431bde83
 8004cc0:	40012300 	.word	0x40012300
 8004cc4:	0800520d 	.word	0x0800520d
 8004cc8:	080052c7 	.word	0x080052c7
 8004ccc:	080052e3 	.word	0x080052e3
 8004cd0:	40012000 	.word	0x40012000

08004cd4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_Stop_DMA+0x1a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e048      	b.n	8004d80 <HAL_ADC_Stop_DMA+0xac>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d130      	bne.n	8004d76 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d22:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d10f      	bne.n	8004d52 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 ffea 	bl	8005d10 <HAL_DMA_Abort>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004d60:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x1c>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e113      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x244>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d925      	bls.n	8004e28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68d9      	ldr	r1, [r3, #12]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	3b1e      	subs	r3, #30
 8004df2:	2207      	movs	r2, #7
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	400a      	ands	r2, r1
 8004e00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68d9      	ldr	r1, [r3, #12]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4618      	mov	r0, r3
 8004e14:	4603      	mov	r3, r0
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	4403      	add	r3, r0
 8004e1a:	3b1e      	subs	r3, #30
 8004e1c:	409a      	lsls	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	430a      	orrs	r2, r1
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	e022      	b.n	8004e6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6919      	ldr	r1, [r3, #16]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	4613      	mov	r3, r2
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4413      	add	r3, r2
 8004e3c:	2207      	movs	r2, #7
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43da      	mvns	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	400a      	ands	r2, r1
 8004e4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6919      	ldr	r1, [r3, #16]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	4603      	mov	r3, r0
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4403      	add	r3, r0
 8004e64:	409a      	lsls	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d824      	bhi.n	8004ec0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	3b05      	subs	r3, #5
 8004e88:	221f      	movs	r2, #31
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	43da      	mvns	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	400a      	ands	r2, r1
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b05      	subs	r3, #5
 8004eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ebe:	e04c      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	d824      	bhi.n	8004f12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3b23      	subs	r3, #35	; 0x23
 8004eda:	221f      	movs	r2, #31
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	400a      	ands	r2, r1
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	3b23      	subs	r3, #35	; 0x23
 8004f04:	fa00 f203 	lsl.w	r2, r0, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f10:	e023      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	3b41      	subs	r3, #65	; 0x41
 8004f24:	221f      	movs	r2, #31
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43da      	mvns	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	400a      	ands	r2, r1
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	4618      	mov	r0, r3
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	3b41      	subs	r3, #65	; 0x41
 8004f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <HAL_ADC_ConfigChannel+0x250>)
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a28      	ldr	r2, [pc, #160]	; (8005004 <HAL_ADC_ConfigChannel+0x254>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d10f      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x1d8>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b12      	cmp	r3, #18
 8004f6e:	d10b      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <HAL_ADC_ConfigChannel+0x254>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d12b      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x23a>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1c      	ldr	r2, [pc, #112]	; (8005008 <HAL_ADC_ConfigChannel+0x258>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d003      	beq.n	8004fa4 <HAL_ADC_ConfigChannel+0x1f4>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b11      	cmp	r3, #17
 8004fa2:	d122      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a11      	ldr	r2, [pc, #68]	; (8005008 <HAL_ADC_ConfigChannel+0x258>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d111      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <HAL_ADC_ConfigChannel+0x25c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_ADC_ConfigChannel+0x260>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	0c9a      	lsrs	r2, r3, #18
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fdc:	e002      	b.n	8004fe4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f9      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	40012300 	.word	0x40012300
 8005004:	40012000 	.word	0x40012000
 8005008:	10000012 	.word	0x10000012
 800500c:	200006f8 	.word	0x200006f8
 8005010:	431bde83 	.word	0x431bde83

08005014 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800501c:	4b79      	ldr	r3, [pc, #484]	; (8005204 <ADC_Init+0x1f0>)
 800501e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005048:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6859      	ldr	r1, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800506c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800508e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6899      	ldr	r1, [r3, #8]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	4a58      	ldr	r2, [pc, #352]	; (8005208 <ADC_Init+0x1f4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	e00f      	b.n	8005112 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005110:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0202 	bic.w	r2, r2, #2
 8005120:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6899      	ldr	r1, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	7e1b      	ldrb	r3, [r3, #24]
 800512c:	005a      	lsls	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800515e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	6859      	ldr	r1, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	3b01      	subs	r3, #1
 800516c:	035a      	lsls	r2, r3, #13
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e007      	b.n	8005188 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005186:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005196:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	3b01      	subs	r3, #1
 80051a4:	051a      	lsls	r2, r3, #20
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6899      	ldr	r1, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051ca:	025a      	lsls	r2, r3, #9
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6899      	ldr	r1, [r3, #8]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	029a      	lsls	r2, r3, #10
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	609a      	str	r2, [r3, #8]
}
 80051f8:	bf00      	nop
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40012300 	.word	0x40012300
 8005208:	0f000001 	.word	0x0f000001

0800520c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005222:	2b00      	cmp	r3, #0
 8005224:	d13c      	bne.n	80052a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d12b      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005244:	2b00      	cmp	r3, #0
 8005246:	d127      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005260:	2b00      	cmp	r3, #0
 8005262:	d119      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0220 	bic.w	r2, r2, #32
 8005272:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005290:	f043 0201 	orr.w	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fe ff0b 	bl	80040b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800529e:	e00e      	b.n	80052be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fd75 	bl	8004d9c <HAL_ADC_ErrorCallback>
}
 80052b2:	e004      	b.n	80052be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	4798      	blx	r3
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff fd57 	bl	8004d88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2240      	movs	r2, #64	; 0x40
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff fd4a 	bl	8004d9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_ADCEx_InjectedStart+0x22>
 800532e:	2302      	movs	r3, #2
 8005330:	e0aa      	b.n	8005488 <HAL_ADCEx_InjectedStart+0x178>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d018      	beq.n	800537a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005358:	4b4e      	ldr	r3, [pc, #312]	; (8005494 <HAL_ADCEx_InjectedStart+0x184>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a4e      	ldr	r2, [pc, #312]	; (8005498 <HAL_ADCEx_InjectedStart+0x188>)
 800535e:	fba2 2303 	umull	r2, r3, r2, r3
 8005362:	0c9a      	lsrs	r2, r3, #18
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800536c:	e002      	b.n	8005374 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3b01      	subs	r3, #1
 8005372:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1f9      	bne.n	800536e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d172      	bne.n	800546e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f06f 0204 	mvn.w	r2, #4
 80053be:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053c0:	4b36      	ldr	r3, [pc, #216]	; (800549c <HAL_ADCEx_InjectedStart+0x18c>)
 80053c2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d124      	bne.n	800541a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d041      	beq.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d03e      	beq.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005416:	609a      	str	r2, [r3, #8]
 8005418:	e035      	b.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_ADCEx_InjectedStart+0x190>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d11a      	bne.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d017      	beq.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d014      	beq.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	e00b      	b.n	8005486 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f043 0210 	orr.w	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	200006f8 	.word	0x200006f8
 8005498:	431bde83 	.word	0x431bde83
 800549c:	40012300 	.word	0x40012300
 80054a0:	40012000 	.word	0x40012000

080054a4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_ADCEx_InjectedStop+0x1a>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e037      	b.n	800552e <HAL_ADCEx_InjectedStop+0x8a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d120      	bne.n	8005514 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d119      	bne.n	8005514 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0201 	bic.w	r2, r2, #1
 80054ee:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d112      	bne.n	8005524 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	f043 0201 	orr.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005512:	e007      	b.n	8005524 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f06f 0204 	mvn.w	r2, #4
 8005552:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3b01      	subs	r3, #1
 8005558:	2b03      	cmp	r3, #3
 800555a:	d81f      	bhi.n	800559c <HAL_ADCEx_InjectedGetValue+0x60>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <HAL_ADCEx_InjectedGetValue+0x28>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005593 	.word	0x08005593
 8005568:	08005589 	.word	0x08005589
 800556c:	0800557f 	.word	0x0800557f
 8005570:	08005575 	.word	0x08005575
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800557a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800557c:	e00f      	b.n	800559e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8005586:	e00a      	b.n	800559e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8005590:	e005      	b.n	800559e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005598:	60fb      	str	r3, [r7, #12]
    }
    break;
 800559a:	e000      	b.n	800559e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 800559c:	bf00      	nop
  }
  return tmp;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e17e      	b.n	80058c2 <HAL_ADCEx_InjectedConfigChannel+0x316>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d925      	bls.n	8005620 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68d9      	ldr	r1, [r3, #12]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	3b1e      	subs	r3, #30
 80055ea:	2207      	movs	r2, #7
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43da      	mvns	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	400a      	ands	r2, r1
 80055f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68d9      	ldr	r1, [r3, #12]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	4618      	mov	r0, r3
 800560c:	4603      	mov	r3, r0
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4403      	add	r3, r0
 8005612:	3b1e      	subs	r3, #30
 8005614:	409a      	lsls	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	e022      	b.n	8005666 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6919      	ldr	r1, [r3, #16]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	b29b      	uxth	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	4613      	mov	r3, r2
 8005630:	005b      	lsls	r3, r3, #1
 8005632:	4413      	add	r3, r2
 8005634:	2207      	movs	r2, #7
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43da      	mvns	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	400a      	ands	r2, r1
 8005642:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6919      	ldr	r1, [r3, #16]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	4618      	mov	r0, r3
 8005656:	4603      	mov	r3, r0
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4403      	add	r3, r0
 800565c:	409a      	lsls	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005674:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	3b01      	subs	r3, #1
 8005682:	051a      	lsls	r2, r3, #20
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b2da      	uxtb	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	3303      	adds	r3, #3
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	4613      	mov	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	221f      	movs	r2, #31
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43da      	mvns	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	400a      	ands	r2, r1
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	4618      	mov	r0, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3303      	adds	r3, #3
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	fa00 f203 	lsl.w	r2, r0, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	4a75      	ldr	r2, [pc, #468]	; (80058d0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d022      	beq.n	8005744 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800570c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699a      	ldr	r2, [r3, #24]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800572e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	609a      	str	r2, [r3, #8]
 8005742:	e00f      	b.n	8005764 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005752:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005762:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	7d5b      	ldrb	r3, [r3, #21]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	e007      	b.n	800578e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	7d1b      	ldrb	r3, [r3, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	e007      	b.n	80057b8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057b6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d02e      	beq.n	800581e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d840      	bhi.n	8005846 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d002      	beq.n	80057ce <HAL_ADCEx_InjectedConfigChannel+0x222>
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d014      	beq.n	80057f6 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80057cc:	e03b      	b.n	8005846 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80057dc:	f023 030f 	bic.w	r3, r3, #15
 80057e0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6959      	ldr	r1, [r3, #20]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	615a      	str	r2, [r3, #20]
      break;
 80057f4:	e03b      	b.n	800586e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005804:	f023 030f 	bic.w	r3, r3, #15
 8005808:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6999      	ldr	r1, [r3, #24]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	619a      	str	r2, [r3, #24]
      break;
 800581c:	e027      	b.n	800586e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69db      	ldr	r3, [r3, #28]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6812      	ldr	r2, [r2, #0]
 8005828:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800582c:	f023 030f 	bic.w	r3, r3, #15
 8005830:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69d9      	ldr	r1, [r3, #28]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	61da      	str	r2, [r3, #28]
      break;
 8005844:	e013      	b.n	800586e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005854:	f023 030f 	bic.w	r3, r3, #15
 8005858:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a19      	ldr	r1, [r3, #32]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	621a      	str	r2, [r3, #32]
      break;
 800586c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800586e:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005870:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d109      	bne.n	8005890 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b12      	cmp	r3, #18
 8005882:	d105      	bne.n	8005890 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10e      	bne.n	80058b8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a0f      	ldr	r2, [pc, #60]	; (80058dc <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d003      	beq.n	80058ac <HAL_ADCEx_InjectedConfigChannel+0x300>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b11      	cmp	r3, #17
 80058aa:	d105      	bne.n	80058b8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	000f0001 	.word	0x000f0001
 80058d4:	40012300 	.word	0x40012300
 80058d8:	40012000 	.word	0x40012000
 80058dc:	10000012 	.word	0x10000012

080058e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058f0:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <__NVIC_SetPriorityGrouping+0x44>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058fc:	4013      	ands	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800590c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005912:	4a04      	ldr	r2, [pc, #16]	; (8005924 <__NVIC_SetPriorityGrouping+0x44>)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	60d3      	str	r3, [r2, #12]
}
 8005918:	bf00      	nop
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800592c:	4b04      	ldr	r3, [pc, #16]	; (8005940 <__NVIC_GetPriorityGrouping+0x18>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	0a1b      	lsrs	r3, r3, #8
 8005932:	f003 0307 	and.w	r3, r3, #7
}
 8005936:	4618      	mov	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	e000ed00 	.word	0xe000ed00

08005944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	4603      	mov	r3, r0
 800594c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800594e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005952:	2b00      	cmp	r3, #0
 8005954:	db0b      	blt.n	800596e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	f003 021f 	and.w	r2, r3, #31
 800595c:	4907      	ldr	r1, [pc, #28]	; (800597c <__NVIC_EnableIRQ+0x38>)
 800595e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005962:	095b      	lsrs	r3, r3, #5
 8005964:	2001      	movs	r0, #1
 8005966:	fa00 f202 	lsl.w	r2, r0, r2
 800596a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	e000e100 	.word	0xe000e100

08005980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	4603      	mov	r3, r0
 8005988:	6039      	str	r1, [r7, #0]
 800598a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800598c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005990:	2b00      	cmp	r3, #0
 8005992:	db0a      	blt.n	80059aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	490c      	ldr	r1, [pc, #48]	; (80059cc <__NVIC_SetPriority+0x4c>)
 800599a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	440b      	add	r3, r1
 80059a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059a8:	e00a      	b.n	80059c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	4908      	ldr	r1, [pc, #32]	; (80059d0 <__NVIC_SetPriority+0x50>)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	f003 030f 	and.w	r3, r3, #15
 80059b6:	3b04      	subs	r3, #4
 80059b8:	0112      	lsls	r2, r2, #4
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	440b      	add	r3, r1
 80059be:	761a      	strb	r2, [r3, #24]
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	e000e100 	.word	0xe000e100
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f1c3 0307 	rsb	r3, r3, #7
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	bf28      	it	cs
 80059f2:	2304      	movcs	r3, #4
 80059f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	3304      	adds	r3, #4
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d902      	bls.n	8005a04 <NVIC_EncodePriority+0x30>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3b03      	subs	r3, #3
 8005a02:	e000      	b.n	8005a06 <NVIC_EncodePriority+0x32>
 8005a04:	2300      	movs	r3, #0
 8005a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a08:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43da      	mvns	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	401a      	ands	r2, r3
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	fa01 f303 	lsl.w	r3, r1, r3
 8005a26:	43d9      	mvns	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a2c:	4313      	orrs	r3, r2
         );
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3724      	adds	r7, #36	; 0x24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a4c:	d301      	bcc.n	8005a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e00f      	b.n	8005a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a52:	4a0a      	ldr	r2, [pc, #40]	; (8005a7c <SysTick_Config+0x40>)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a5a:	210f      	movs	r1, #15
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	f7ff ff8e 	bl	8005980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a64:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <SysTick_Config+0x40>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a6a:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <SysTick_Config+0x40>)
 8005a6c:	2207      	movs	r2, #7
 8005a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	e000e010 	.word	0xe000e010

08005a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff ff29 	bl	80058e0 <__NVIC_SetPriorityGrouping>
}
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b086      	sub	sp, #24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	607a      	str	r2, [r7, #4]
 8005aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005aa8:	f7ff ff3e 	bl	8005928 <__NVIC_GetPriorityGrouping>
 8005aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	6978      	ldr	r0, [r7, #20]
 8005ab4:	f7ff ff8e 	bl	80059d4 <NVIC_EncodePriority>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ff5d 	bl	8005980 <__NVIC_SetPriority>
}
 8005ac6:	bf00      	nop
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b082      	sub	sp, #8
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ff31 	bl	8005944 <__NVIC_EnableIRQ>
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff ffa2 	bl	8005a3c <SysTick_Config>
 8005af8:	4603      	mov	r3, r0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
	...

08005b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b10:	f7fe fe3c 	bl	800478c <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e099      	b.n	8005c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b40:	e00f      	b.n	8005b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b42:	f7fe fe23 	bl	800478c <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b05      	cmp	r3, #5
 8005b4e:	d908      	bls.n	8005b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2203      	movs	r2, #3
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e078      	b.n	8005c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e8      	bne.n	8005b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4b38      	ldr	r3, [pc, #224]	; (8005c5c <HAL_DMA_Init+0x158>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d107      	bne.n	8005bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d117      	bne.n	8005c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00e      	beq.n	8005c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fadf 	bl	80061cc <DMA_CheckFifoParam>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2240      	movs	r2, #64	; 0x40
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005c22:	2301      	movs	r3, #1
 8005c24:	e016      	b.n	8005c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa96 	bl	8006160 <DMA_CalcBaseAndBitshift>
 8005c34:	4603      	mov	r3, r0
 8005c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3c:	223f      	movs	r2, #63	; 0x3f
 8005c3e:	409a      	lsls	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	f010803f 	.word	0xf010803f

08005c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_DMA_Start_IT+0x26>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e040      	b.n	8005d08 <HAL_DMA_Start_IT+0xa8>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d12f      	bne.n	8005cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	68b9      	ldr	r1, [r7, #8]
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f000 fa28 	bl	8006104 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb8:	223f      	movs	r2, #63	; 0x3f
 8005cba:	409a      	lsls	r2, r3
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0216 	orr.w	r2, r2, #22
 8005cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d007      	beq.n	8005ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f042 0201 	orr.w	r2, r2, #1
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	e005      	b.n	8005d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
 8005d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005d1e:	f7fe fd35 	bl	800478c <HAL_GetTick>
 8005d22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d008      	beq.n	8005d42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2280      	movs	r2, #128	; 0x80
 8005d34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e052      	b.n	8005de8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0216 	bic.w	r2, r2, #22
 8005d50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <HAL_DMA_Abort+0x62>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0208 	bic.w	r2, r2, #8
 8005d80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d92:	e013      	b.n	8005dbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d94:	f7fe fcfa 	bl	800478c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	d90c      	bls.n	8005dbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2203      	movs	r2, #3
 8005dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e015      	b.n	8005de8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1e4      	bne.n	8005d94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	223f      	movs	r2, #63	; 0x3f
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dfc:	4b8e      	ldr	r3, [pc, #568]	; (8006038 <HAL_DMA_IRQHandler+0x248>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a8e      	ldr	r2, [pc, #568]	; (800603c <HAL_DMA_IRQHandler+0x24c>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	0a9b      	lsrs	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01a      	beq.n	8005e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0204 	bic.w	r2, r2, #4
 8005e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e48:	2208      	movs	r2, #8
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e60:	2201      	movs	r2, #1
 8005e62:	409a      	lsls	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d012      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	409a      	lsls	r2, r3
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	2204      	movs	r2, #4
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d012      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f043 0204 	orr.w	r2, r3, #4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	2210      	movs	r2, #16
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d043      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d03c      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eea:	2210      	movs	r2, #16
 8005eec:	409a      	lsls	r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d018      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d024      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	e01f      	b.n	8005f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	e016      	b.n	8005f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0208 	bic.w	r2, r2, #8
 8005f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f64:	2220      	movs	r2, #32
 8005f66:	409a      	lsls	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 808f 	beq.w	8006090 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8087 	beq.w	8006090 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	2220      	movs	r2, #32
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d136      	bne.n	8006008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0216 	bic.w	r2, r2, #22
 8005fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <HAL_DMA_IRQHandler+0x1da>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0208 	bic.w	r2, r2, #8
 8005fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fde:	223f      	movs	r2, #63	; 0x3f
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d07e      	beq.n	80060fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
        }
        return;
 8006006:	e079      	b.n	80060fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01d      	beq.n	8006052 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10d      	bne.n	8006040 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	2b00      	cmp	r3, #0
 800602a:	d031      	beq.n	8006090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
 8006034:	e02c      	b.n	8006090 <HAL_DMA_IRQHandler+0x2a0>
 8006036:	bf00      	nop
 8006038:	200006f8 	.word	0x200006f8
 800603c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d023      	beq.n	8006090 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	e01e      	b.n	8006090 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0210 	bic.w	r2, r2, #16
 800606e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006094:	2b00      	cmp	r3, #0
 8006096:	d032      	beq.n	80060fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d022      	beq.n	80060ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2205      	movs	r2, #5
 80060a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f022 0201 	bic.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	3301      	adds	r3, #1
 80060c0:	60bb      	str	r3, [r7, #8]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d307      	bcc.n	80060d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f2      	bne.n	80060bc <HAL_DMA_IRQHandler+0x2cc>
 80060d6:	e000      	b.n	80060da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
 80060fa:	e000      	b.n	80060fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80060fc:	bf00      	nop
    }
  }
}
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006120:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d108      	bne.n	8006144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006142:	e007      	b.n	8006154 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	60da      	str	r2, [r3, #12]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3b10      	subs	r3, #16
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <DMA_CalcBaseAndBitshift+0x64>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800617a:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <DMA_CalcBaseAndBitshift+0x68>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d909      	bls.n	80061a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	659a      	str	r2, [r3, #88]	; 0x58
 80061a0:	e007      	b.n	80061b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	aaaaaaab 	.word	0xaaaaaaab
 80061c8:	0800a9a8 	.word	0x0800a9a8

080061cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d11f      	bne.n	8006226 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d856      	bhi.n	800629a <DMA_CheckFifoParam+0xce>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <DMA_CheckFifoParam+0x28>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006205 	.word	0x08006205
 80061f8:	08006217 	.word	0x08006217
 80061fc:	08006205 	.word	0x08006205
 8006200:	0800629b 	.word	0x0800629b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d046      	beq.n	800629e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006214:	e043      	b.n	800629e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800621e:	d140      	bne.n	80062a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006224:	e03d      	b.n	80062a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622e:	d121      	bne.n	8006274 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b03      	cmp	r3, #3
 8006234:	d837      	bhi.n	80062a6 <DMA_CheckFifoParam+0xda>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <DMA_CheckFifoParam+0x70>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	0800624d 	.word	0x0800624d
 8006240:	08006253 	.word	0x08006253
 8006244:	0800624d 	.word	0x0800624d
 8006248:	08006265 	.word	0x08006265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
      break;
 8006250:	e030      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d025      	beq.n	80062aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006262:	e022      	b.n	80062aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800626c:	d11f      	bne.n	80062ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006272:	e01c      	b.n	80062ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d903      	bls.n	8006282 <DMA_CheckFifoParam+0xb6>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d003      	beq.n	8006288 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006280:	e018      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
      break;
 8006286:	e015      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      break;
 8006298:	e00b      	b.n	80062b2 <DMA_CheckFifoParam+0xe6>
      break;
 800629a:	bf00      	nop
 800629c:	e00a      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 800629e:	bf00      	nop
 80062a0:	e008      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062a2:	bf00      	nop
 80062a4:	e006      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062a6:	bf00      	nop
 80062a8:	e004      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062aa:	bf00      	nop
 80062ac:	e002      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062b2:	bf00      	nop
    }
  } 
  
  return status; 
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop

080062c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	; 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e159      	b.n	8006594 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062e0:	2201      	movs	r2, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4013      	ands	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	f040 8148 	bne.w	800658e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b01      	cmp	r3, #1
 8006308:	d005      	beq.n	8006316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006312:	2b02      	cmp	r3, #2
 8006314:	d130      	bne.n	8006378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	2203      	movs	r2, #3
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	43db      	mvns	r3, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4013      	ands	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800634c:	2201      	movs	r2, #1
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	43db      	mvns	r3, r3
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4013      	ands	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 0201 	and.w	r2, r3, #1
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4313      	orrs	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	2b03      	cmp	r3, #3
 8006382:	d017      	beq.n	80063b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	2203      	movs	r2, #3
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	43db      	mvns	r3, r3
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	4013      	ands	r3, r2
 800639a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689a      	ldr	r2, [r3, #8]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	fa02 f303 	lsl.w	r3, r2, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d123      	bne.n	8006408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	08da      	lsrs	r2, r3, #3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3208      	adds	r2, #8
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	220f      	movs	r2, #15
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	08da      	lsrs	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3208      	adds	r2, #8
 8006402:	69b9      	ldr	r1, [r7, #24]
 8006404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	2203      	movs	r2, #3
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43db      	mvns	r3, r3
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4013      	ands	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 0203 	and.w	r2, r3, #3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4313      	orrs	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80a2 	beq.w	800658e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	4b57      	ldr	r3, [pc, #348]	; (80065ac <HAL_GPIO_Init+0x2e8>)
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	4a56      	ldr	r2, [pc, #344]	; (80065ac <HAL_GPIO_Init+0x2e8>)
 8006454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006458:	6453      	str	r3, [r2, #68]	; 0x44
 800645a:	4b54      	ldr	r3, [pc, #336]	; (80065ac <HAL_GPIO_Init+0x2e8>)
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006466:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <HAL_GPIO_Init+0x2ec>)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	089b      	lsrs	r3, r3, #2
 800646c:	3302      	adds	r3, #2
 800646e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	220f      	movs	r2, #15
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a49      	ldr	r2, [pc, #292]	; (80065b4 <HAL_GPIO_Init+0x2f0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d019      	beq.n	80064c6 <HAL_GPIO_Init+0x202>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a48      	ldr	r2, [pc, #288]	; (80065b8 <HAL_GPIO_Init+0x2f4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d013      	beq.n	80064c2 <HAL_GPIO_Init+0x1fe>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a47      	ldr	r2, [pc, #284]	; (80065bc <HAL_GPIO_Init+0x2f8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00d      	beq.n	80064be <HAL_GPIO_Init+0x1fa>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a46      	ldr	r2, [pc, #280]	; (80065c0 <HAL_GPIO_Init+0x2fc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d007      	beq.n	80064ba <HAL_GPIO_Init+0x1f6>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a45      	ldr	r2, [pc, #276]	; (80065c4 <HAL_GPIO_Init+0x300>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d101      	bne.n	80064b6 <HAL_GPIO_Init+0x1f2>
 80064b2:	2304      	movs	r3, #4
 80064b4:	e008      	b.n	80064c8 <HAL_GPIO_Init+0x204>
 80064b6:	2307      	movs	r3, #7
 80064b8:	e006      	b.n	80064c8 <HAL_GPIO_Init+0x204>
 80064ba:	2303      	movs	r3, #3
 80064bc:	e004      	b.n	80064c8 <HAL_GPIO_Init+0x204>
 80064be:	2302      	movs	r3, #2
 80064c0:	e002      	b.n	80064c8 <HAL_GPIO_Init+0x204>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <HAL_GPIO_Init+0x204>
 80064c6:	2300      	movs	r3, #0
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	f002 0203 	and.w	r2, r2, #3
 80064ce:	0092      	lsls	r2, r2, #2
 80064d0:	4093      	lsls	r3, r2
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064d8:	4935      	ldr	r1, [pc, #212]	; (80065b0 <HAL_GPIO_Init+0x2ec>)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	089b      	lsrs	r3, r3, #2
 80064de:	3302      	adds	r3, #2
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064e6:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <HAL_GPIO_Init+0x304>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	43db      	mvns	r3, r3
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	4013      	ands	r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006502:	69ba      	ldr	r2, [r7, #24]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800650a:	4a2f      	ldr	r2, [pc, #188]	; (80065c8 <HAL_GPIO_Init+0x304>)
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006510:	4b2d      	ldr	r3, [pc, #180]	; (80065c8 <HAL_GPIO_Init+0x304>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	43db      	mvns	r3, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006534:	4a24      	ldr	r2, [pc, #144]	; (80065c8 <HAL_GPIO_Init+0x304>)
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800653a:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <HAL_GPIO_Init+0x304>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	43db      	mvns	r3, r3
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	4013      	ands	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800655e:	4a1a      	ldr	r2, [pc, #104]	; (80065c8 <HAL_GPIO_Init+0x304>)
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <HAL_GPIO_Init+0x304>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	43db      	mvns	r3, r3
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	4013      	ands	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006588:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <HAL_GPIO_Init+0x304>)
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	3301      	adds	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b0f      	cmp	r3, #15
 8006598:	f67f aea2 	bls.w	80062e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	3724      	adds	r7, #36	; 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40023800 	.word	0x40023800
 80065b0:	40013800 	.word	0x40013800
 80065b4:	40020000 	.word	0x40020000
 80065b8:	40020400 	.word	0x40020400
 80065bc:	40020800 	.word	0x40020800
 80065c0:	40020c00 	.word	0x40020c00
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40013c00 	.word	0x40013c00

080065cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	807b      	strh	r3, [r7, #2]
 80065d8:	4613      	mov	r3, r2
 80065da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065dc:	787b      	ldrb	r3, [r7, #1]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065e2:	887a      	ldrh	r2, [r7, #2]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065e8:	e003      	b.n	80065f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065ea:	887b      	ldrh	r3, [r7, #2]
 80065ec:	041a      	lsls	r2, r3, #16
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	619a      	str	r2, [r3, #24]
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e12b      	b.n	800686a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f7fd fe16 	bl	8004258 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2224      	movs	r2, #36	; 0x24
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006664:	f001 fbbc 	bl	8007de0 <HAL_RCC_GetPCLK1Freq>
 8006668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4a81      	ldr	r2, [pc, #516]	; (8006874 <HAL_I2C_Init+0x274>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d807      	bhi.n	8006684 <HAL_I2C_Init+0x84>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a80      	ldr	r2, [pc, #512]	; (8006878 <HAL_I2C_Init+0x278>)
 8006678:	4293      	cmp	r3, r2
 800667a:	bf94      	ite	ls
 800667c:	2301      	movls	r3, #1
 800667e:	2300      	movhi	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	e006      	b.n	8006692 <HAL_I2C_Init+0x92>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a7d      	ldr	r2, [pc, #500]	; (800687c <HAL_I2C_Init+0x27c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	bf94      	ite	ls
 800668c:	2301      	movls	r3, #1
 800668e:	2300      	movhi	r3, #0
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0e7      	b.n	800686a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a78      	ldr	r2, [pc, #480]	; (8006880 <HAL_I2C_Init+0x280>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	0c9b      	lsrs	r3, r3, #18
 80066a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4a6a      	ldr	r2, [pc, #424]	; (8006874 <HAL_I2C_Init+0x274>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d802      	bhi.n	80066d4 <HAL_I2C_Init+0xd4>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	3301      	adds	r3, #1
 80066d2:	e009      	b.n	80066e8 <HAL_I2C_Init+0xe8>
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066da:	fb02 f303 	mul.w	r3, r2, r3
 80066de:	4a69      	ldr	r2, [pc, #420]	; (8006884 <HAL_I2C_Init+0x284>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	099b      	lsrs	r3, r3, #6
 80066e6:	3301      	adds	r3, #1
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	430b      	orrs	r3, r1
 80066ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	495c      	ldr	r1, [pc, #368]	; (8006874 <HAL_I2C_Init+0x274>)
 8006704:	428b      	cmp	r3, r1
 8006706:	d819      	bhi.n	800673c <HAL_I2C_Init+0x13c>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1e59      	subs	r1, r3, #1
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	fbb1 f3f3 	udiv	r3, r1, r3
 8006716:	1c59      	adds	r1, r3, #1
 8006718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800671c:	400b      	ands	r3, r1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_I2C_Init+0x138>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1e59      	subs	r1, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006730:	3301      	adds	r3, #1
 8006732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006736:	e051      	b.n	80067dc <HAL_I2C_Init+0x1dc>
 8006738:	2304      	movs	r3, #4
 800673a:	e04f      	b.n	80067dc <HAL_I2C_Init+0x1dc>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d111      	bne.n	8006768 <HAL_I2C_Init+0x168>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	1e58      	subs	r0, r3, #1
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6859      	ldr	r1, [r3, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	440b      	add	r3, r1
 8006752:	fbb0 f3f3 	udiv	r3, r0, r3
 8006756:	3301      	adds	r3, #1
 8006758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800675c:	2b00      	cmp	r3, #0
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	e012      	b.n	800678e <HAL_I2C_Init+0x18e>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	1e58      	subs	r0, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6859      	ldr	r1, [r3, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	0099      	lsls	r1, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	fbb0 f3f3 	udiv	r3, r0, r3
 800677e:	3301      	adds	r3, #1
 8006780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_I2C_Init+0x196>
 8006792:	2301      	movs	r3, #1
 8006794:	e022      	b.n	80067dc <HAL_I2C_Init+0x1dc>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10e      	bne.n	80067bc <HAL_I2C_Init+0x1bc>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1e58      	subs	r0, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6859      	ldr	r1, [r3, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	440b      	add	r3, r1
 80067ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80067b0:	3301      	adds	r3, #1
 80067b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ba:	e00f      	b.n	80067dc <HAL_I2C_Init+0x1dc>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	1e58      	subs	r0, r3, #1
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6859      	ldr	r1, [r3, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	440b      	add	r3, r1
 80067ca:	0099      	lsls	r1, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d2:	3301      	adds	r3, #1
 80067d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067dc:	6879      	ldr	r1, [r7, #4]
 80067de:	6809      	ldr	r1, [r1, #0]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	69da      	ldr	r2, [r3, #28]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800680a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6911      	ldr	r1, [r2, #16]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68d2      	ldr	r2, [r2, #12]
 8006816:	4311      	orrs	r1, r2
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	6812      	ldr	r2, [r2, #0]
 800681c:	430b      	orrs	r3, r1
 800681e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695a      	ldr	r2, [r3, #20]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	000186a0 	.word	0x000186a0
 8006878:	001e847f 	.word	0x001e847f
 800687c:	003d08ff 	.word	0x003d08ff
 8006880:	431bde83 	.word	0x431bde83
 8006884:	10624dd3 	.word	0x10624dd3

08006888 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af02      	add	r7, sp, #8
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	4608      	mov	r0, r1
 8006892:	4611      	mov	r1, r2
 8006894:	461a      	mov	r2, r3
 8006896:	4603      	mov	r3, r0
 8006898:	817b      	strh	r3, [r7, #10]
 800689a:	460b      	mov	r3, r1
 800689c:	813b      	strh	r3, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068a2:	f7fd ff73 	bl	800478c <HAL_GetTick>
 80068a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	f040 80d9 	bne.w	8006a68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	2319      	movs	r3, #25
 80068bc:	2201      	movs	r2, #1
 80068be:	496d      	ldr	r1, [pc, #436]	; (8006a74 <HAL_I2C_Mem_Write+0x1ec>)
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fc7f 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
 80068ce:	e0cc      	b.n	8006a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_I2C_Mem_Write+0x56>
 80068da:	2302      	movs	r3, #2
 80068dc:	e0c5      	b.n	8006a6a <HAL_I2C_Mem_Write+0x1e2>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d007      	beq.n	8006904 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006912:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2221      	movs	r2, #33	; 0x21
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2240      	movs	r2, #64	; 0x40
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006934:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4a4d      	ldr	r2, [pc, #308]	; (8006a78 <HAL_I2C_Mem_Write+0x1f0>)
 8006944:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006946:	88f8      	ldrh	r0, [r7, #6]
 8006948:	893a      	ldrh	r2, [r7, #8]
 800694a:	8979      	ldrh	r1, [r7, #10]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4603      	mov	r3, r0
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fab6 	bl	8006ec8 <I2C_RequestMemoryWrite>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d052      	beq.n	8006a08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e081      	b.n	8006a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 fd00 	bl	8007370 <I2C_WaitOnTXEFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00d      	beq.n	8006992 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	2b04      	cmp	r3, #4
 800697c:	d107      	bne.n	800698e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800698c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e06b      	b.n	8006a6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d11b      	bne.n	8006a08 <HAL_I2C_Mem_Write+0x180>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d017      	beq.n	8006a08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069dc:	781a      	ldrb	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1aa      	bne.n	8006966 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 fcec 	bl	80073f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00d      	beq.n	8006a3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d107      	bne.n	8006a38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e016      	b.n	8006a6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e000      	b.n	8006a6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a68:	2302      	movs	r3, #2
  }
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	00100002 	.word	0x00100002
 8006a78:	ffff0000 	.word	0xffff0000

08006a7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08c      	sub	sp, #48	; 0x30
 8006a80:	af02      	add	r7, sp, #8
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	4608      	mov	r0, r1
 8006a86:	4611      	mov	r1, r2
 8006a88:	461a      	mov	r2, r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	817b      	strh	r3, [r7, #10]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	813b      	strh	r3, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a96:	f7fd fe79 	bl	800478c <HAL_GetTick>
 8006a9a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	f040 8208 	bne.w	8006eba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2319      	movs	r3, #25
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	497b      	ldr	r1, [pc, #492]	; (8006ca0 <HAL_I2C_Mem_Read+0x224>)
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fb85 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e1fb      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_I2C_Mem_Read+0x56>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e1f4      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d007      	beq.n	8006af8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2222      	movs	r2, #34	; 0x22
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2240      	movs	r2, #64	; 0x40
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a5b      	ldr	r2, [pc, #364]	; (8006ca4 <HAL_I2C_Mem_Read+0x228>)
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b3a:	88f8      	ldrh	r0, [r7, #6]
 8006b3c:	893a      	ldrh	r2, [r7, #8]
 8006b3e:	8979      	ldrh	r1, [r7, #10]
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4603      	mov	r3, r0
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fa52 	bl	8006ff4 <I2C_RequestMemoryRead>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e1b0      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d113      	bne.n	8006b8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b62:	2300      	movs	r3, #0
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	623b      	str	r3, [r7, #32]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	623b      	str	r3, [r7, #32]
 8006b76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e184      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d11b      	bne.n	8006bca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	61fb      	str	r3, [r7, #28]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	e164      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d11b      	bne.n	8006c0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	61bb      	str	r3, [r7, #24]
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	e144      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c20:	e138      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	f200 80f1 	bhi.w	8006e0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d123      	bne.n	8006c7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fc1b 	bl	8007474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e139      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	3b01      	subs	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c7a:	e10b      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d14e      	bne.n	8006d22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	4906      	ldr	r1, [pc, #24]	; (8006ca8 <HAL_I2C_Mem_Read+0x22c>)
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fa98 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e10e      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
 8006c9e:	bf00      	nop
 8006ca0:	00100002 	.word	0x00100002
 8006ca4:	ffff0000 	.word	0xffff0000
 8006ca8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691a      	ldr	r2, [r3, #16]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d20:	e0b8      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4966      	ldr	r1, [pc, #408]	; (8006ec4 <HAL_I2C_Mem_Read+0x448>)
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fa49 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0bf      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	2200      	movs	r2, #0
 8006d86:	494f      	ldr	r1, [pc, #316]	; (8006ec4 <HAL_I2C_Mem_Read+0x448>)
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fa1b 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e091      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e0c:	e042      	b.n	8006e94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f000 fb2e 	bl	8007474 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e04c      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d118      	bne.n	8006e94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f aec2 	bne.w	8006c22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3728      	adds	r7, #40	; 0x28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	00010004 	.word	0x00010004

08006ec8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af02      	add	r7, sp, #8
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	817b      	strh	r3, [r7, #10]
 8006eda:	460b      	mov	r3, r1
 8006edc:	813b      	strh	r3, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ef0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f960 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f18:	d103      	bne.n	8006f22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e05f      	b.n	8006fe6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	6a3a      	ldr	r2, [r7, #32]
 8006f3a:	492d      	ldr	r1, [pc, #180]	; (8006ff0 <I2C_RequestMemoryWrite+0x128>)
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f998 	bl	8007272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e04c      	b.n	8006fe6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f64:	6a39      	ldr	r1, [r7, #32]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 fa02 	bl	8007370 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00d      	beq.n	8006f8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	d107      	bne.n	8006f8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e02b      	b.n	8006fe6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d105      	bne.n	8006fa0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	611a      	str	r2, [r3, #16]
 8006f9e:	e021      	b.n	8006fe4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fa0:	893b      	ldrh	r3, [r7, #8]
 8006fa2:	0a1b      	lsrs	r3, r3, #8
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb0:	6a39      	ldr	r1, [r7, #32]
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f9dc 	bl	8007370 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00d      	beq.n	8006fda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d107      	bne.n	8006fd6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e005      	b.n	8006fe6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fda:	893b      	ldrh	r3, [r7, #8]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3718      	adds	r7, #24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	00010002 	.word	0x00010002

08006ff4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	461a      	mov	r2, r3
 8007002:	4603      	mov	r3, r0
 8007004:	817b      	strh	r3, [r7, #10]
 8007006:	460b      	mov	r3, r1
 8007008:	813b      	strh	r3, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800701c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800702c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	2200      	movs	r2, #0
 8007036:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f8c2 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007054:	d103      	bne.n	800705e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e0aa      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007062:	897b      	ldrh	r3, [r7, #10]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	461a      	mov	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007070:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	6a3a      	ldr	r2, [r7, #32]
 8007076:	4952      	ldr	r1, [pc, #328]	; (80071c0 <I2C_RequestMemoryRead+0x1cc>)
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 f8fa 	bl	8007272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e097      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800709e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a0:	6a39      	ldr	r1, [r7, #32]
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f964 	bl	8007370 <I2C_WaitOnTXEFlagUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d107      	bne.n	80070c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e076      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d105      	bne.n	80070dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070d0:	893b      	ldrh	r3, [r7, #8]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	611a      	str	r2, [r3, #16]
 80070da:	e021      	b.n	8007120 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070dc:	893b      	ldrh	r3, [r7, #8]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ec:	6a39      	ldr	r1, [r7, #32]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f93e 	bl	8007370 <I2C_WaitOnTXEFlagUntilTimeout>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00d      	beq.n	8007116 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d107      	bne.n	8007112 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007110:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e050      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007116:	893b      	ldrh	r3, [r7, #8]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007122:	6a39      	ldr	r1, [r7, #32]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f923 	bl	8007370 <I2C_WaitOnTXEFlagUntilTimeout>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00d      	beq.n	800714c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007134:	2b04      	cmp	r3, #4
 8007136:	d107      	bne.n	8007148 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007146:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e035      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	2200      	movs	r2, #0
 8007164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f82b 	bl	80071c4 <I2C_WaitOnFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007182:	d103      	bne.n	800718c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800718a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e013      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007190:	897b      	ldrh	r3, [r7, #10]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	6a3a      	ldr	r2, [r7, #32]
 80071a4:	4906      	ldr	r1, [pc, #24]	; (80071c0 <I2C_RequestMemoryRead+0x1cc>)
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 f863 	bl	8007272 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e000      	b.n	80071b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	00010002 	.word	0x00010002

080071c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071d4:	e025      	b.n	8007222 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071dc:	d021      	beq.n	8007222 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071de:	f7fd fad5 	bl	800478c <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d116      	bne.n	8007222 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f043 0220 	orr.w	r2, r3, #32
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e023      	b.n	800726a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	0c1b      	lsrs	r3, r3, #16
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10d      	bne.n	8007248 <I2C_WaitOnFlagUntilTimeout+0x84>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	43da      	mvns	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4013      	ands	r3, r2
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	bf0c      	ite	eq
 800723e:	2301      	moveq	r3, #1
 8007240:	2300      	movne	r3, #0
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	e00c      	b.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	43da      	mvns	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	4013      	ands	r3, r2
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	bf0c      	ite	eq
 800725a:	2301      	moveq	r3, #1
 800725c:	2300      	movne	r3, #0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	429a      	cmp	r2, r3
 8007266:	d0b6      	beq.n	80071d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
 800727e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007280:	e051      	b.n	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800728c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007290:	d123      	bne.n	80072da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c6:	f043 0204 	orr.w	r2, r3, #4
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e046      	b.n	8007368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e0:	d021      	beq.n	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e2:	f7fd fa53 	bl	800478c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d302      	bcc.n	80072f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d116      	bne.n	8007326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	f043 0220 	orr.w	r2, r3, #32
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e020      	b.n	8007368 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b01      	cmp	r3, #1
 800732e:	d10c      	bne.n	800734a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	43da      	mvns	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	4013      	ands	r3, r2
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	bf14      	ite	ne
 8007342:	2301      	movne	r3, #1
 8007344:	2300      	moveq	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	e00b      	b.n	8007362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	43da      	mvns	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	4013      	ands	r3, r2
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	bf14      	ite	ne
 800735c:	2301      	movne	r3, #1
 800735e:	2300      	moveq	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d18d      	bne.n	8007282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800737c:	e02d      	b.n	80073da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f8ce 	bl	8007520 <I2C_IsAcknowledgeFailed>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e02d      	b.n	80073ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007394:	d021      	beq.n	80073da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007396:	f7fd f9f9 	bl	800478c <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d116      	bne.n	80073da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e007      	b.n	80073ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d1ca      	bne.n	800737e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073fe:	e02d      	b.n	800745c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f88d 	bl	8007520 <I2C_IsAcknowledgeFailed>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e02d      	b.n	800746c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007416:	d021      	beq.n	800745c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007418:	f7fd f9b8 	bl	800478c <HAL_GetTick>
 800741c:	4602      	mov	r2, r0
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	429a      	cmp	r2, r3
 8007426:	d302      	bcc.n	800742e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d116      	bne.n	800745c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	f043 0220 	orr.w	r2, r3, #32
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e007      	b.n	800746c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b04      	cmp	r3, #4
 8007468:	d1ca      	bne.n	8007400 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007480:	e042      	b.n	8007508 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	f003 0310 	and.w	r3, r3, #16
 800748c:	2b10      	cmp	r3, #16
 800748e:	d119      	bne.n	80074c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0210 	mvn.w	r2, #16
 8007498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e029      	b.n	8007518 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074c4:	f7fd f962 	bl	800478c <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d302      	bcc.n	80074da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d116      	bne.n	8007508 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2220      	movs	r2, #32
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f4:	f043 0220 	orr.w	r2, r3, #32
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e007      	b.n	8007518 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d1b5      	bne.n	8007482 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007536:	d11b      	bne.n	8007570 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007540:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2220      	movs	r2, #32
 800754c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	f043 0204 	orr.w	r2, r3, #4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e267      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	2b00      	cmp	r3, #0
 800759c:	d075      	beq.n	800768a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800759e:	4b88      	ldr	r3, [pc, #544]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 030c 	and.w	r3, r3, #12
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d00c      	beq.n	80075c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075aa:	4b85      	ldr	r3, [pc, #532]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80075b2:	2b08      	cmp	r3, #8
 80075b4:	d112      	bne.n	80075dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075b6:	4b82      	ldr	r3, [pc, #520]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075c2:	d10b      	bne.n	80075dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075c4:	4b7e      	ldr	r3, [pc, #504]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05b      	beq.n	8007688 <HAL_RCC_OscConfig+0x108>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d157      	bne.n	8007688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e242      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e4:	d106      	bne.n	80075f4 <HAL_RCC_OscConfig+0x74>
 80075e6:	4b76      	ldr	r3, [pc, #472]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a75      	ldr	r2, [pc, #468]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80075ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	e01d      	b.n	8007630 <HAL_RCC_OscConfig+0xb0>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075fc:	d10c      	bne.n	8007618 <HAL_RCC_OscConfig+0x98>
 80075fe:	4b70      	ldr	r3, [pc, #448]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a6f      	ldr	r2, [pc, #444]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007608:	6013      	str	r3, [r2, #0]
 800760a:	4b6d      	ldr	r3, [pc, #436]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a6c      	ldr	r2, [pc, #432]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	e00b      	b.n	8007630 <HAL_RCC_OscConfig+0xb0>
 8007618:	4b69      	ldr	r3, [pc, #420]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a68      	ldr	r2, [pc, #416]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800761e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	4b66      	ldr	r3, [pc, #408]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a65      	ldr	r2, [pc, #404]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800762a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800762e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d013      	beq.n	8007660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007638:	f7fd f8a8 	bl	800478c <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763e:	e008      	b.n	8007652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007640:	f7fd f8a4 	bl	800478c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b64      	cmp	r3, #100	; 0x64
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e207      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007652:	4b5b      	ldr	r3, [pc, #364]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0f0      	beq.n	8007640 <HAL_RCC_OscConfig+0xc0>
 800765e:	e014      	b.n	800768a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007660:	f7fd f894 	bl	800478c <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007666:	e008      	b.n	800767a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007668:	f7fd f890 	bl	800478c <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b64      	cmp	r3, #100	; 0x64
 8007674:	d901      	bls.n	800767a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e1f3      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800767a:	4b51      	ldr	r3, [pc, #324]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f0      	bne.n	8007668 <HAL_RCC_OscConfig+0xe8>
 8007686:	e000      	b.n	800768a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0302 	and.w	r3, r3, #2
 8007692:	2b00      	cmp	r3, #0
 8007694:	d063      	beq.n	800775e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007696:	4b4a      	ldr	r3, [pc, #296]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 030c 	and.w	r3, r3, #12
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00b      	beq.n	80076ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076a2:	4b47      	ldr	r3, [pc, #284]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076aa:	2b08      	cmp	r3, #8
 80076ac:	d11c      	bne.n	80076e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076ae:	4b44      	ldr	r3, [pc, #272]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d116      	bne.n	80076e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ba:	4b41      	ldr	r3, [pc, #260]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d005      	beq.n	80076d2 <HAL_RCC_OscConfig+0x152>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d001      	beq.n	80076d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e1c7      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d2:	4b3b      	ldr	r3, [pc, #236]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	4937      	ldr	r1, [pc, #220]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076e6:	e03a      	b.n	800775e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d020      	beq.n	8007732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076f0:	4b34      	ldr	r3, [pc, #208]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f6:	f7fd f849 	bl	800478c <HAL_GetTick>
 80076fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076fe:	f7fd f845 	bl	800478c <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e1a8      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007710:	4b2b      	ldr	r3, [pc, #172]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0f0      	beq.n	80076fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771c:	4b28      	ldr	r3, [pc, #160]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	00db      	lsls	r3, r3, #3
 800772a:	4925      	ldr	r1, [pc, #148]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 800772c:	4313      	orrs	r3, r2
 800772e:	600b      	str	r3, [r1, #0]
 8007730:	e015      	b.n	800775e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <HAL_RCC_OscConfig+0x244>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fd f828 	bl	800478c <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007740:	f7fd f824 	bl	800478c <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e187      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007752:	4b1b      	ldr	r3, [pc, #108]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f0      	bne.n	8007740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d036      	beq.n	80077d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d016      	beq.n	80077a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <HAL_RCC_OscConfig+0x248>)
 8007774:	2201      	movs	r2, #1
 8007776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007778:	f7fd f808 	bl	800478c <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007780:	f7fd f804 	bl	800478c <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e167      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <HAL_RCC_OscConfig+0x240>)
 8007794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0f0      	beq.n	8007780 <HAL_RCC_OscConfig+0x200>
 800779e:	e01b      	b.n	80077d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077a0:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <HAL_RCC_OscConfig+0x248>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a6:	f7fc fff1 	bl	800478c <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077ac:	e00e      	b.n	80077cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ae:	f7fc ffed 	bl	800478c <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d907      	bls.n	80077cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e150      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
 80077c0:	40023800 	.word	0x40023800
 80077c4:	42470000 	.word	0x42470000
 80077c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077cc:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80077ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ea      	bne.n	80077ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8097 	beq.w	8007914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ea:	4b81      	ldr	r3, [pc, #516]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10f      	bne.n	8007816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
 80077fa:	4b7d      	ldr	r3, [pc, #500]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	4a7c      	ldr	r2, [pc, #496]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007804:	6413      	str	r3, [r2, #64]	; 0x40
 8007806:	4b7a      	ldr	r3, [pc, #488]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007812:	2301      	movs	r3, #1
 8007814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007816:	4b77      	ldr	r3, [pc, #476]	; (80079f4 <HAL_RCC_OscConfig+0x474>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781e:	2b00      	cmp	r3, #0
 8007820:	d118      	bne.n	8007854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007822:	4b74      	ldr	r3, [pc, #464]	; (80079f4 <HAL_RCC_OscConfig+0x474>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a73      	ldr	r2, [pc, #460]	; (80079f4 <HAL_RCC_OscConfig+0x474>)
 8007828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800782c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800782e:	f7fc ffad 	bl	800478c <HAL_GetTick>
 8007832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007834:	e008      	b.n	8007848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007836:	f7fc ffa9 	bl	800478c <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	2b02      	cmp	r3, #2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e10c      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007848:	4b6a      	ldr	r3, [pc, #424]	; (80079f4 <HAL_RCC_OscConfig+0x474>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d106      	bne.n	800786a <HAL_RCC_OscConfig+0x2ea>
 800785c:	4b64      	ldr	r3, [pc, #400]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007860:	4a63      	ldr	r2, [pc, #396]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6713      	str	r3, [r2, #112]	; 0x70
 8007868:	e01c      	b.n	80078a4 <HAL_RCC_OscConfig+0x324>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	2b05      	cmp	r3, #5
 8007870:	d10c      	bne.n	800788c <HAL_RCC_OscConfig+0x30c>
 8007872:	4b5f      	ldr	r3, [pc, #380]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	4a5e      	ldr	r2, [pc, #376]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007878:	f043 0304 	orr.w	r3, r3, #4
 800787c:	6713      	str	r3, [r2, #112]	; 0x70
 800787e:	4b5c      	ldr	r3, [pc, #368]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007882:	4a5b      	ldr	r2, [pc, #364]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007884:	f043 0301 	orr.w	r3, r3, #1
 8007888:	6713      	str	r3, [r2, #112]	; 0x70
 800788a:	e00b      	b.n	80078a4 <HAL_RCC_OscConfig+0x324>
 800788c:	4b58      	ldr	r3, [pc, #352]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 800788e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007890:	4a57      	ldr	r2, [pc, #348]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	6713      	str	r3, [r2, #112]	; 0x70
 8007898:	4b55      	ldr	r3, [pc, #340]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	4a54      	ldr	r2, [pc, #336]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 800789e:	f023 0304 	bic.w	r3, r3, #4
 80078a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d015      	beq.n	80078d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ac:	f7fc ff6e 	bl	800478c <HAL_GetTick>
 80078b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b2:	e00a      	b.n	80078ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078b4:	f7fc ff6a 	bl	800478c <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e0cb      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ca:	4b49      	ldr	r3, [pc, #292]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0ee      	beq.n	80078b4 <HAL_RCC_OscConfig+0x334>
 80078d6:	e014      	b.n	8007902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078d8:	f7fc ff58 	bl	800478c <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078de:	e00a      	b.n	80078f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078e0:	f7fc ff54 	bl	800478c <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d901      	bls.n	80078f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e0b5      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f6:	4b3e      	ldr	r3, [pc, #248]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1ee      	bne.n	80078e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007902:	7dfb      	ldrb	r3, [r7, #23]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d105      	bne.n	8007914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007908:	4b39      	ldr	r3, [pc, #228]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	4a38      	ldr	r2, [pc, #224]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 800790e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80a1 	beq.w	8007a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800791e:	4b34      	ldr	r3, [pc, #208]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f003 030c 	and.w	r3, r3, #12
 8007926:	2b08      	cmp	r3, #8
 8007928:	d05c      	beq.n	80079e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d141      	bne.n	80079b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007932:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <HAL_RCC_OscConfig+0x478>)
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007938:	f7fc ff28 	bl	800478c <HAL_GetTick>
 800793c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800793e:	e008      	b.n	8007952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007940:	f7fc ff24 	bl	800478c <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d901      	bls.n	8007952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e087      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1f0      	bne.n	8007940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69da      	ldr	r2, [r3, #28]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	431a      	orrs	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	019b      	lsls	r3, r3, #6
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	085b      	lsrs	r3, r3, #1
 8007976:	3b01      	subs	r3, #1
 8007978:	041b      	lsls	r3, r3, #16
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	061b      	lsls	r3, r3, #24
 8007982:	491b      	ldr	r1, [pc, #108]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 8007984:	4313      	orrs	r3, r2
 8007986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <HAL_RCC_OscConfig+0x478>)
 800798a:	2201      	movs	r2, #1
 800798c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798e:	f7fc fefd 	bl	800478c <HAL_GetTick>
 8007992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007994:	e008      	b.n	80079a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007996:	f7fc fef9 	bl	800478c <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e05c      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a8:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0f0      	beq.n	8007996 <HAL_RCC_OscConfig+0x416>
 80079b4:	e054      	b.n	8007a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079b6:	4b10      	ldr	r3, [pc, #64]	; (80079f8 <HAL_RCC_OscConfig+0x478>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079bc:	f7fc fee6 	bl	800478c <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079c4:	f7fc fee2 	bl	800478c <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e045      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d6:	4b06      	ldr	r3, [pc, #24]	; (80079f0 <HAL_RCC_OscConfig+0x470>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1f0      	bne.n	80079c4 <HAL_RCC_OscConfig+0x444>
 80079e2:	e03d      	b.n	8007a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d107      	bne.n	80079fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e038      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40007000 	.word	0x40007000
 80079f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079fc:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <HAL_RCC_OscConfig+0x4ec>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d028      	beq.n	8007a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d121      	bne.n	8007a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d11a      	bne.n	8007a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d111      	bne.n	8007a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	3b01      	subs	r3, #1
 8007a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d107      	bne.n	8007a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d001      	beq.n	8007a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40023800 	.word	0x40023800

08007a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e0cc      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a84:	4b68      	ldr	r3, [pc, #416]	; (8007c28 <HAL_RCC_ClockConfig+0x1b8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d90c      	bls.n	8007aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a92:	4b65      	ldr	r3, [pc, #404]	; (8007c28 <HAL_RCC_ClockConfig+0x1b8>)
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a9a:	4b63      	ldr	r3, [pc, #396]	; (8007c28 <HAL_RCC_ClockConfig+0x1b8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0307 	and.w	r3, r3, #7
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d001      	beq.n	8007aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e0b8      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d020      	beq.n	8007afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ac4:	4b59      	ldr	r3, [pc, #356]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4a58      	ldr	r2, [pc, #352]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0308 	and.w	r3, r3, #8
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007adc:	4b53      	ldr	r3, [pc, #332]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	4a52      	ldr	r2, [pc, #328]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ae8:	4b50      	ldr	r3, [pc, #320]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	494d      	ldr	r1, [pc, #308]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 0301 	and.w	r3, r3, #1
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d044      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0e:	4b47      	ldr	r3, [pc, #284]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d119      	bne.n	8007b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e07f      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d003      	beq.n	8007b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d107      	bne.n	8007b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b2e:	4b3f      	ldr	r3, [pc, #252]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e06f      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b3e:	4b3b      	ldr	r3, [pc, #236]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e067      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b4e:	4b37      	ldr	r3, [pc, #220]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f023 0203 	bic.w	r2, r3, #3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4934      	ldr	r1, [pc, #208]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b60:	f7fc fe14 	bl	800478c <HAL_GetTick>
 8007b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b66:	e00a      	b.n	8007b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b68:	f7fc fe10 	bl	800478c <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e04f      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b7e:	4b2b      	ldr	r3, [pc, #172]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f003 020c 	and.w	r2, r3, #12
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d1eb      	bne.n	8007b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b90:	4b25      	ldr	r3, [pc, #148]	; (8007c28 <HAL_RCC_ClockConfig+0x1b8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d20c      	bcs.n	8007bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b9e:	4b22      	ldr	r3, [pc, #136]	; (8007c28 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba6:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e032      	b.n	8007c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bc4:	4b19      	ldr	r3, [pc, #100]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	4916      	ldr	r1, [pc, #88]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007be2:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	490e      	ldr	r1, [pc, #56]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bf6:	f000 f821 	bl	8007c3c <HAL_RCC_GetSysClockFreq>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <HAL_RCC_ClockConfig+0x1bc>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	091b      	lsrs	r3, r3, #4
 8007c02:	f003 030f 	and.w	r3, r3, #15
 8007c06:	490a      	ldr	r1, [pc, #40]	; (8007c30 <HAL_RCC_ClockConfig+0x1c0>)
 8007c08:	5ccb      	ldrb	r3, [r1, r3]
 8007c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c0e:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <HAL_RCC_ClockConfig+0x1c4>)
 8007c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c12:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <HAL_RCC_ClockConfig+0x1c8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fc fd74 	bl	8004704 <HAL_InitTick>

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40023c00 	.word	0x40023c00
 8007c2c:	40023800 	.word	0x40023800
 8007c30:	0800a990 	.word	0x0800a990
 8007c34:	200006f8 	.word	0x200006f8
 8007c38:	200006fc 	.word	0x200006fc

08007c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c40:	b090      	sub	sp, #64	; 0x40
 8007c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	637b      	str	r3, [r7, #52]	; 0x34
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c54:	4b59      	ldr	r3, [pc, #356]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 030c 	and.w	r3, r3, #12
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d00d      	beq.n	8007c7c <HAL_RCC_GetSysClockFreq+0x40>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	f200 80a1 	bhi.w	8007da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_RCC_GetSysClockFreq+0x34>
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d003      	beq.n	8007c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c6e:	e09b      	b.n	8007da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c70:	4b53      	ldr	r3, [pc, #332]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007c74:	e09b      	b.n	8007dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c76:	4b53      	ldr	r3, [pc, #332]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007c7a:	e098      	b.n	8007dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c7c:	4b4f      	ldr	r3, [pc, #316]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c86:	4b4d      	ldr	r3, [pc, #308]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d028      	beq.n	8007ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c92:	4b4a      	ldr	r3, [pc, #296]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	2200      	movs	r2, #0
 8007c9a:	623b      	str	r3, [r7, #32]
 8007c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4b47      	ldr	r3, [pc, #284]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ca8:	fb03 f201 	mul.w	r2, r3, r1
 8007cac:	2300      	movs	r3, #0
 8007cae:	fb00 f303 	mul.w	r3, r0, r3
 8007cb2:	4413      	add	r3, r2
 8007cb4:	4a43      	ldr	r2, [pc, #268]	; (8007dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8007cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cbc:	460a      	mov	r2, r1
 8007cbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8007cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc2:	4413      	add	r3, r2
 8007cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	2200      	movs	r2, #0
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	61fa      	str	r2, [r7, #28]
 8007cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007cd6:	f7f8 fdbd 	bl	8000854 <__aeabi_uldivmod>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4613      	mov	r3, r2
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ce2:	e053      	b.n	8007d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce4:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	099b      	lsrs	r3, r3, #6
 8007cea:	2200      	movs	r2, #0
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	617a      	str	r2, [r7, #20]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007cf6:	f04f 0b00 	mov.w	fp, #0
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	f04f 0000 	mov.w	r0, #0
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	0159      	lsls	r1, r3, #5
 8007d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d0c:	0150      	lsls	r0, r2, #5
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	ebb2 080a 	subs.w	r8, r2, sl
 8007d16:	eb63 090b 	sbc.w	r9, r3, fp
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8007d32:	eb63 0509 	sbc.w	r5, r3, r9
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	00eb      	lsls	r3, r5, #3
 8007d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d44:	00e2      	lsls	r2, r4, #3
 8007d46:	4614      	mov	r4, r2
 8007d48:	461d      	mov	r5, r3
 8007d4a:	eb14 030a 	adds.w	r3, r4, sl
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	eb45 030b 	adc.w	r3, r5, fp
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d62:	4629      	mov	r1, r5
 8007d64:	028b      	lsls	r3, r1, #10
 8007d66:	4621      	mov	r1, r4
 8007d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	028a      	lsls	r2, r1, #10
 8007d70:	4610      	mov	r0, r2
 8007d72:	4619      	mov	r1, r3
 8007d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d76:	2200      	movs	r2, #0
 8007d78:	60bb      	str	r3, [r7, #8]
 8007d7a:	60fa      	str	r2, [r7, #12]
 8007d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d80:	f7f8 fd68 	bl	8000854 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4613      	mov	r3, r2
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d8c:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	0c1b      	lsrs	r3, r3, #16
 8007d92:	f003 0303 	and.w	r3, r3, #3
 8007d96:	3301      	adds	r3, #1
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007da6:	e002      	b.n	8007dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007daa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3740      	adds	r7, #64	; 0x40
 8007db4:	46bd      	mov	sp, r7
 8007db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dba:	bf00      	nop
 8007dbc:	40023800 	.word	0x40023800
 8007dc0:	00f42400 	.word	0x00f42400
 8007dc4:	017d7840 	.word	0x017d7840

08007dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dcc:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dce:	681b      	ldr	r3, [r3, #0]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	200006f8 	.word	0x200006f8

08007de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007de4:	f7ff fff0 	bl	8007dc8 <HAL_RCC_GetHCLKFreq>
 8007de8:	4602      	mov	r2, r0
 8007dea:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	0a9b      	lsrs	r3, r3, #10
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	4903      	ldr	r1, [pc, #12]	; (8007e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007df6:	5ccb      	ldrb	r3, [r1, r3]
 8007df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	40023800 	.word	0x40023800
 8007e04:	0800a9a0 	.word	0x0800a9a0

08007e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e07b      	b.n	8007f12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d108      	bne.n	8007e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e2a:	d009      	beq.n	8007e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	61da      	str	r2, [r3, #28]
 8007e32:	e005      	b.n	8007e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7fc fa56 	bl	800430c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	f003 0302 	and.w	r3, r3, #2
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec4:	ea42 0103 	orr.w	r1, r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	0c1b      	lsrs	r3, r3, #16
 8007ede:	f003 0104 	and.w	r1, r3, #4
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	f003 0210 	and.w	r2, r3, #16
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b088      	sub	sp, #32
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <HAL_SPI_Transmit+0x22>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e126      	b.n	800818a <HAL_SPI_Transmit+0x270>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f44:	f7fc fc22 	bl	800478c <HAL_GetTick>
 8007f48:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d002      	beq.n	8007f60 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f5e:	e10b      	b.n	8008178 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_Transmit+0x52>
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f70:	e102      	b.n	8008178 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2203      	movs	r2, #3
 8007f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	88fa      	ldrh	r2, [r7, #6]
 8007f8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	88fa      	ldrh	r2, [r7, #6]
 8007f90:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fb8:	d10f      	bne.n	8007fda <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe4:	2b40      	cmp	r3, #64	; 0x40
 8007fe6:	d007      	beq.n	8007ff8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008000:	d14b      	bne.n	800809a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_SPI_Transmit+0xf6>
 800800a:	8afb      	ldrh	r3, [r7, #22]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d13e      	bne.n	800808e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008014:	881a      	ldrh	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	1c9a      	adds	r2, r3, #2
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008034:	e02b      	b.n	800808e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 0302 	and.w	r3, r3, #2
 8008040:	2b02      	cmp	r3, #2
 8008042:	d112      	bne.n	800806a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008048:	881a      	ldrh	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008054:	1c9a      	adds	r2, r3, #2
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	86da      	strh	r2, [r3, #54]	; 0x36
 8008068:	e011      	b.n	800808e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800806a:	f7fc fb8f 	bl	800478c <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d803      	bhi.n	8008082 <HAL_SPI_Transmit+0x168>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008080:	d102      	bne.n	8008088 <HAL_SPI_Transmit+0x16e>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800808c:	e074      	b.n	8008178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008092:	b29b      	uxth	r3, r3
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1ce      	bne.n	8008036 <HAL_SPI_Transmit+0x11c>
 8008098:	e04c      	b.n	8008134 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_SPI_Transmit+0x18e>
 80080a2:	8afb      	ldrh	r3, [r7, #22]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d140      	bne.n	800812a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	330c      	adds	r3, #12
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b01      	subs	r3, #1
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080ce:	e02c      	b.n	800812a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d113      	bne.n	8008106 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	330c      	adds	r3, #12
 80080e8:	7812      	ldrb	r2, [r2, #0]
 80080ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	86da      	strh	r2, [r3, #54]	; 0x36
 8008104:	e011      	b.n	800812a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008106:	f7fc fb41 	bl	800478c <HAL_GetTick>
 800810a:	4602      	mov	r2, r0
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d803      	bhi.n	800811e <HAL_SPI_Transmit+0x204>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d102      	bne.n	8008124 <HAL_SPI_Transmit+0x20a>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d102      	bne.n	800812a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008128:	e026      	b.n	8008178 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1cd      	bne.n	80080d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 fbcb 	bl	80088d4 <SPI_EndRxTxTransaction>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	2b00      	cmp	r3, #0
 800816e:	d002      	beq.n	8008176 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	77fb      	strb	r3, [r7, #31]
 8008174:	e000      	b.n	8008178 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008176:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008188:	7ffb      	ldrb	r3, [r7, #31]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b088      	sub	sp, #32
 8008196:	af02      	add	r7, sp, #8
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	60b9      	str	r1, [r7, #8]
 800819c:	603b      	str	r3, [r7, #0]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ae:	d112      	bne.n	80081d6 <HAL_SPI_Receive+0x44>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10e      	bne.n	80081d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2204      	movs	r2, #4
 80081bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081c0:	88fa      	ldrh	r2, [r7, #6]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4613      	mov	r3, r2
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	68b9      	ldr	r1, [r7, #8]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f8f1 	bl	80083b4 <HAL_SPI_TransmitReceive>
 80081d2:	4603      	mov	r3, r0
 80081d4:	e0ea      	b.n	80083ac <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <HAL_SPI_Receive+0x52>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e0e3      	b.n	80083ac <HAL_SPI_Receive+0x21a>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081ec:	f7fc face 	bl	800478c <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d002      	beq.n	8008204 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80081fe:	2302      	movs	r3, #2
 8008200:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008202:	e0ca      	b.n	800839a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_SPI_Receive+0x7e>
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d102      	bne.n	8008216 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008214:	e0c1      	b.n	800839a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2204      	movs	r2, #4
 800821a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800825c:	d10f      	bne.n	800827e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800826c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800827c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008288:	2b40      	cmp	r3, #64	; 0x40
 800828a:	d007      	beq.n	800829c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800829a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d162      	bne.n	800836a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082a4:	e02e      	b.n	8008304 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d115      	bne.n	80082e0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f103 020c 	add.w	r2, r3, #12
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c0:	7812      	ldrb	r2, [r2, #0]
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	1c5a      	adds	r2, r3, #1
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082de:	e011      	b.n	8008304 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082e0:	f7fc fa54 	bl	800478c <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d803      	bhi.n	80082f8 <HAL_SPI_Receive+0x166>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d102      	bne.n	80082fe <HAL_SPI_Receive+0x16c>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008302:	e04a      	b.n	800839a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008308:	b29b      	uxth	r3, r3
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1cb      	bne.n	80082a6 <HAL_SPI_Receive+0x114>
 800830e:	e031      	b.n	8008374 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b01      	cmp	r3, #1
 800831c:	d113      	bne.n	8008346 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	b292      	uxth	r2, r2
 800832a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	1c9a      	adds	r2, r3, #2
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008344:	e011      	b.n	800836a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008346:	f7fc fa21 	bl	800478c <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	429a      	cmp	r2, r3
 8008354:	d803      	bhi.n	800835e <HAL_SPI_Receive+0x1cc>
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d102      	bne.n	8008364 <HAL_SPI_Receive+0x1d2>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008368:	e017      	b.n	800839a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1cd      	bne.n	8008310 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fa45 	bl	8008808 <SPI_EndRxTransaction>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2220      	movs	r2, #32
 8008388:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
 8008396:	e000      	b.n	800839a <HAL_SPI_Receive+0x208>
  }

error :
 8008398:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08c      	sub	sp, #48	; 0x30
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
 80083c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083c2:	2301      	movs	r3, #1
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d101      	bne.n	80083da <HAL_SPI_TransmitReceive+0x26>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e18a      	b.n	80086f0 <HAL_SPI_TransmitReceive+0x33c>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083e2:	f7fc f9d3 	bl	800478c <HAL_GetTick>
 80083e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80083f8:	887b      	ldrh	r3, [r7, #2]
 80083fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008400:	2b01      	cmp	r3, #1
 8008402:	d00f      	beq.n	8008424 <HAL_SPI_TransmitReceive+0x70>
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800840a:	d107      	bne.n	800841c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <HAL_SPI_TransmitReceive+0x68>
 8008414:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008418:	2b04      	cmp	r3, #4
 800841a:	d003      	beq.n	8008424 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800841c:	2302      	movs	r3, #2
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008422:	e15b      	b.n	80086dc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <HAL_SPI_TransmitReceive+0x82>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <HAL_SPI_TransmitReceive+0x82>
 8008430:	887b      	ldrh	r3, [r7, #2]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d103      	bne.n	800843e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800843c:	e14e      	b.n	80086dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008444:	b2db      	uxtb	r3, r3
 8008446:	2b04      	cmp	r3, #4
 8008448:	d003      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2205      	movs	r2, #5
 800844e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	887a      	ldrh	r2, [r7, #2]
 8008462:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	887a      	ldrh	r2, [r7, #2]
 8008468:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	887a      	ldrh	r2, [r7, #2]
 8008474:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	887a      	ldrh	r2, [r7, #2]
 800847a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008492:	2b40      	cmp	r3, #64	; 0x40
 8008494:	d007      	beq.n	80084a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ae:	d178      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_SPI_TransmitReceive+0x10a>
 80084b8:	8b7b      	ldrh	r3, [r7, #26]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d166      	bne.n	800858c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	881a      	ldrh	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ce:	1c9a      	adds	r2, r3, #2
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084d8:	b29b      	uxth	r3, r3
 80084da:	3b01      	subs	r3, #1
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084e2:	e053      	b.n	800858c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d11b      	bne.n	800852a <HAL_SPI_TransmitReceive+0x176>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d016      	beq.n	800852a <HAL_SPI_TransmitReceive+0x176>
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d113      	bne.n	800852a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	881a      	ldrh	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008512:	1c9a      	adds	r2, r3, #2
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800851c:	b29b      	uxth	r3, r3
 800851e:	3b01      	subs	r3, #1
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b01      	cmp	r3, #1
 8008536:	d119      	bne.n	800856c <HAL_SPI_TransmitReceive+0x1b8>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d014      	beq.n	800856c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	68da      	ldr	r2, [r3, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854c:	b292      	uxth	r2, r2
 800854e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	1c9a      	adds	r2, r3, #2
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008568:	2301      	movs	r3, #1
 800856a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800856c:	f7fc f90e 	bl	800478c <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008578:	429a      	cmp	r2, r3
 800857a:	d807      	bhi.n	800858c <HAL_SPI_TransmitReceive+0x1d8>
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008582:	d003      	beq.n	800858c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800858a:	e0a7      	b.n	80086dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1a6      	bne.n	80084e4 <HAL_SPI_TransmitReceive+0x130>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800859a:	b29b      	uxth	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1a1      	bne.n	80084e4 <HAL_SPI_TransmitReceive+0x130>
 80085a0:	e07c      	b.n	800869c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <HAL_SPI_TransmitReceive+0x1fc>
 80085aa:	8b7b      	ldrh	r3, [r7, #26]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d16b      	bne.n	8008688 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	330c      	adds	r3, #12
 80085ba:	7812      	ldrb	r2, [r2, #0]
 80085bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085d6:	e057      	b.n	8008688 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d11c      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x26c>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d017      	beq.n	8008620 <HAL_SPI_TransmitReceive+0x26c>
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d114      	bne.n	8008620 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	330c      	adds	r3, #12
 8008600:	7812      	ldrb	r2, [r2, #0]
 8008602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008612:	b29b      	uxth	r3, r3
 8008614:	3b01      	subs	r3, #1
 8008616:	b29a      	uxth	r2, r3
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b01      	cmp	r3, #1
 800862c:	d119      	bne.n	8008662 <HAL_SPI_TransmitReceive+0x2ae>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d014      	beq.n	8008662 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	b2d2      	uxtb	r2, r2
 8008644:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008654:	b29b      	uxth	r3, r3
 8008656:	3b01      	subs	r3, #1
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800865e:	2301      	movs	r3, #1
 8008660:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008662:	f7fc f893 	bl	800478c <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800866e:	429a      	cmp	r2, r3
 8008670:	d803      	bhi.n	800867a <HAL_SPI_TransmitReceive+0x2c6>
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008678:	d102      	bne.n	8008680 <HAL_SPI_TransmitReceive+0x2cc>
 800867a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867c:	2b00      	cmp	r3, #0
 800867e:	d103      	bne.n	8008688 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008686:	e029      	b.n	80086dc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800868c:	b29b      	uxth	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1a2      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x224>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008696:	b29b      	uxth	r3, r3
 8008698:	2b00      	cmp	r3, #0
 800869a:	d19d      	bne.n	80085d8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800869c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f917 	bl	80088d4 <SPI_EndRxTxTransaction>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2220      	movs	r2, #32
 80086b6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086b8:	e010      	b.n	80086dc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10b      	bne.n	80086da <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086c2:	2300      	movs	r3, #0
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	617b      	str	r3, [r7, #20]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	e000      	b.n	80086dc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80086da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3730      	adds	r7, #48	; 0x30
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	603b      	str	r3, [r7, #0]
 8008704:	4613      	mov	r3, r2
 8008706:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008708:	f7fc f840 	bl	800478c <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	4413      	add	r3, r2
 8008716:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008718:	f7fc f838 	bl	800478c <HAL_GetTick>
 800871c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800871e:	4b39      	ldr	r3, [pc, #228]	; (8008804 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	015b      	lsls	r3, r3, #5
 8008724:	0d1b      	lsrs	r3, r3, #20
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	fb02 f303 	mul.w	r3, r2, r3
 800872c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800872e:	e054      	b.n	80087da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d050      	beq.n	80087da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008738:	f7fc f828 	bl	800478c <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	69fa      	ldr	r2, [r7, #28]
 8008744:	429a      	cmp	r2, r3
 8008746:	d902      	bls.n	800874e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d13d      	bne.n	80087ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800875c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008766:	d111      	bne.n	800878c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008770:	d004      	beq.n	800877c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877a:	d107      	bne.n	800878c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008794:	d10f      	bne.n	80087b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e017      	b.n	80087fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	4013      	ands	r3, r2
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	bf0c      	ite	eq
 80087ea:	2301      	moveq	r3, #1
 80087ec:	2300      	movne	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d19b      	bne.n	8008730 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3720      	adds	r7, #32
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	200006f8 	.word	0x200006f8

08008808 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800881c:	d111      	bne.n	8008842 <SPI_EndRxTransaction+0x3a>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008826:	d004      	beq.n	8008832 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008830:	d107      	bne.n	8008842 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008840:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800884a:	d12a      	bne.n	80088a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008854:	d012      	beq.n	800887c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2200      	movs	r2, #0
 800885e:	2180      	movs	r1, #128	; 0x80
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff ff49 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d02d      	beq.n	80088c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008870:	f043 0220 	orr.w	r2, r3, #32
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008878:	2303      	movs	r3, #3
 800887a:	e026      	b.n	80088ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2200      	movs	r2, #0
 8008884:	2101      	movs	r1, #1
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff ff36 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d01a      	beq.n	80088c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008896:	f043 0220 	orr.w	r2, r3, #32
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e013      	b.n	80088ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2200      	movs	r2, #0
 80088aa:	2101      	movs	r1, #1
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff ff23 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d007      	beq.n	80088c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088bc:	f043 0220 	orr.w	r2, r3, #32
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e000      	b.n	80088ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b088      	sub	sp, #32
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088e0:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <SPI_EndRxTxTransaction+0x7c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a1b      	ldr	r2, [pc, #108]	; (8008954 <SPI_EndRxTxTransaction+0x80>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	0d5b      	lsrs	r3, r3, #21
 80088ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088fe:	d112      	bne.n	8008926 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	2200      	movs	r2, #0
 8008908:	2180      	movs	r1, #128	; 0x80
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f7ff fef4 	bl	80086f8 <SPI_WaitFlagStateUntilTimeout>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d016      	beq.n	8008944 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f043 0220 	orr.w	r2, r3, #32
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e00f      	b.n	8008946 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00a      	beq.n	8008942 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	3b01      	subs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800893c:	2b80      	cmp	r3, #128	; 0x80
 800893e:	d0f2      	beq.n	8008926 <SPI_EndRxTxTransaction+0x52>
 8008940:	e000      	b.n	8008944 <SPI_EndRxTxTransaction+0x70>
        break;
 8008942:	bf00      	nop
  }

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	200006f8 	.word	0x200006f8
 8008954:	165e9f81 	.word	0x165e9f81

08008958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e041      	b.n	80089ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d106      	bne.n	8008984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fb fdbe 	bl	8004500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2202      	movs	r2, #2
 8008988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	3304      	adds	r3, #4
 8008994:	4619      	mov	r1, r3
 8008996:	4610      	mov	r0, r2
 8008998:	f000 fd54 	bl	8009444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2201      	movs	r2, #1
 80089d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d001      	beq.n	8008a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e03c      	b.n	8008a8a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2202      	movs	r2, #2
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1e      	ldr	r2, [pc, #120]	; (8008a98 <HAL_TIM_Base_Start+0xa0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d018      	beq.n	8008a54 <HAL_TIM_Base_Start+0x5c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a2a:	d013      	beq.n	8008a54 <HAL_TIM_Base_Start+0x5c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1a      	ldr	r2, [pc, #104]	; (8008a9c <HAL_TIM_Base_Start+0xa4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00e      	beq.n	8008a54 <HAL_TIM_Base_Start+0x5c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <HAL_TIM_Base_Start+0xa8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <HAL_TIM_Base_Start+0x5c>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <HAL_TIM_Base_Start+0xac>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_TIM_Base_Start+0x5c>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <HAL_TIM_Base_Start+0xb0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d111      	bne.n	8008a78 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2b06      	cmp	r3, #6
 8008a64:	d010      	beq.n	8008a88 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a76:	e007      	b.n	8008a88 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f042 0201 	orr.w	r2, r2, #1
 8008a86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40000400 	.word	0x40000400
 8008aa0:	40000800 	.word	0x40000800
 8008aa4:	40000c00 	.word	0x40000c00
 8008aa8:	40014000 	.word	0x40014000

08008aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d001      	beq.n	8008ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e044      	b.n	8008b4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0201 	orr.w	r2, r2, #1
 8008ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a1e      	ldr	r2, [pc, #120]	; (8008b5c <HAL_TIM_Base_Start_IT+0xb0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d018      	beq.n	8008b18 <HAL_TIM_Base_Start_IT+0x6c>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aee:	d013      	beq.n	8008b18 <HAL_TIM_Base_Start_IT+0x6c>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a1a      	ldr	r2, [pc, #104]	; (8008b60 <HAL_TIM_Base_Start_IT+0xb4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00e      	beq.n	8008b18 <HAL_TIM_Base_Start_IT+0x6c>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a19      	ldr	r2, [pc, #100]	; (8008b64 <HAL_TIM_Base_Start_IT+0xb8>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d009      	beq.n	8008b18 <HAL_TIM_Base_Start_IT+0x6c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a17      	ldr	r2, [pc, #92]	; (8008b68 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d004      	beq.n	8008b18 <HAL_TIM_Base_Start_IT+0x6c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a16      	ldr	r2, [pc, #88]	; (8008b6c <HAL_TIM_Base_Start_IT+0xc0>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d111      	bne.n	8008b3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f003 0307 	and.w	r3, r3, #7
 8008b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b06      	cmp	r3, #6
 8008b28:	d010      	beq.n	8008b4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f042 0201 	orr.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b3a:	e007      	b.n	8008b4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0201 	orr.w	r2, r2, #1
 8008b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800
 8008b68:	40000c00 	.word	0x40000c00
 8008b6c:	40014000 	.word	0x40014000

08008b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e041      	b.n	8008c06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f839 	bl	8008c0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f000 fc48 	bl	8009444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d109      	bne.n	8008c48 <HAL_TIM_PWM_Start+0x24>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	bf14      	ite	ne
 8008c40:	2301      	movne	r3, #1
 8008c42:	2300      	moveq	r3, #0
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	e022      	b.n	8008c8e <HAL_TIM_PWM_Start+0x6a>
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d109      	bne.n	8008c62 <HAL_TIM_PWM_Start+0x3e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	bf14      	ite	ne
 8008c5a:	2301      	movne	r3, #1
 8008c5c:	2300      	moveq	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	e015      	b.n	8008c8e <HAL_TIM_PWM_Start+0x6a>
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d109      	bne.n	8008c7c <HAL_TIM_PWM_Start+0x58>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	bf14      	ite	ne
 8008c74:	2301      	movne	r3, #1
 8008c76:	2300      	moveq	r3, #0
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	e008      	b.n	8008c8e <HAL_TIM_PWM_Start+0x6a>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	bf14      	ite	ne
 8008c88:	2301      	movne	r3, #1
 8008c8a:	2300      	moveq	r3, #0
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e068      	b.n	8008d68 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <HAL_TIM_PWM_Start+0x82>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ca4:	e013      	b.n	8008cce <HAL_TIM_PWM_Start+0xaa>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d104      	bne.n	8008cb6 <HAL_TIM_PWM_Start+0x92>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2202      	movs	r2, #2
 8008cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cb4:	e00b      	b.n	8008cce <HAL_TIM_PWM_Start+0xaa>
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b08      	cmp	r3, #8
 8008cba:	d104      	bne.n	8008cc6 <HAL_TIM_PWM_Start+0xa2>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cc4:	e003      	b.n	8008cce <HAL_TIM_PWM_Start+0xaa>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2202      	movs	r2, #2
 8008cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 fe5a 	bl	8009990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a23      	ldr	r2, [pc, #140]	; (8008d70 <HAL_TIM_PWM_Start+0x14c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d107      	bne.n	8008cf6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1d      	ldr	r2, [pc, #116]	; (8008d70 <HAL_TIM_PWM_Start+0x14c>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d018      	beq.n	8008d32 <HAL_TIM_PWM_Start+0x10e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d08:	d013      	beq.n	8008d32 <HAL_TIM_PWM_Start+0x10e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <HAL_TIM_PWM_Start+0x150>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00e      	beq.n	8008d32 <HAL_TIM_PWM_Start+0x10e>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a17      	ldr	r2, [pc, #92]	; (8008d78 <HAL_TIM_PWM_Start+0x154>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d009      	beq.n	8008d32 <HAL_TIM_PWM_Start+0x10e>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <HAL_TIM_PWM_Start+0x158>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d004      	beq.n	8008d32 <HAL_TIM_PWM_Start+0x10e>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <HAL_TIM_PWM_Start+0x15c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d111      	bne.n	8008d56 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2b06      	cmp	r3, #6
 8008d42:	d010      	beq.n	8008d66 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d54:	e007      	b.n	8008d66 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f042 0201 	orr.w	r2, r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40010000 	.word	0x40010000
 8008d74:	40000400 	.word	0x40000400
 8008d78:	40000800 	.word	0x40000800
 8008d7c:	40000c00 	.word	0x40000c00
 8008d80:	40014000 	.word	0x40014000

08008d84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e097      	b.n	8008ec8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d106      	bne.n	8008db2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7fb fb2b 	bl	8004408 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2202      	movs	r2, #2
 8008db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dc8:	f023 0307 	bic.w	r3, r3, #7
 8008dcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4610      	mov	r0, r2
 8008dda:	f000 fb33 	bl	8009444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	697a      	ldr	r2, [r7, #20]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e06:	f023 0303 	bic.w	r3, r3, #3
 8008e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	4313      	orrs	r3, r2
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008e24:	f023 030c 	bic.w	r3, r3, #12
 8008e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	4313      	orrs	r3, r2
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	011a      	lsls	r2, r3, #4
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	031b      	lsls	r3, r3, #12
 8008e54:	4313      	orrs	r3, r2
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008e62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008e6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	4313      	orrs	r3, r2
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3718      	adds	r7, #24
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f003 0302 	and.w	r3, r3, #2
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d122      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d11b      	bne.n	8008f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f06f 0202 	mvn.w	r2, #2
 8008efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa77 	bl	8009406 <HAL_TIM_IC_CaptureCallback>
 8008f18:	e005      	b.n	8008f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa69 	bl	80093f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fa7a 	bl	800941a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d122      	bne.n	8008f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d11b      	bne.n	8008f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f06f 0204 	mvn.w	r2, #4
 8008f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2202      	movs	r2, #2
 8008f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa4d 	bl	8009406 <HAL_TIM_IC_CaptureCallback>
 8008f6c:	e005      	b.n	8008f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa3f 	bl	80093f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fa50 	bl	800941a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	f003 0308 	and.w	r3, r3, #8
 8008f8a:	2b08      	cmp	r3, #8
 8008f8c:	d122      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	f003 0308 	and.w	r3, r3, #8
 8008f98:	2b08      	cmp	r3, #8
 8008f9a:	d11b      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f06f 0208 	mvn.w	r2, #8
 8008fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2204      	movs	r2, #4
 8008faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	f003 0303 	and.w	r3, r3, #3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d003      	beq.n	8008fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa23 	bl	8009406 <HAL_TIM_IC_CaptureCallback>
 8008fc0:	e005      	b.n	8008fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa15 	bl	80093f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fa26 	bl	800941a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	2b10      	cmp	r3, #16
 8008fe0:	d122      	bne.n	8009028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b10      	cmp	r3, #16
 8008fee:	d11b      	bne.n	8009028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0210 	mvn.w	r2, #16
 8008ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9f9 	bl	8009406 <HAL_TIM_IC_CaptureCallback>
 8009014:	e005      	b.n	8009022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9eb 	bl	80093f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f9fc 	bl	800941a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b01      	cmp	r3, #1
 8009034:	d10e      	bne.n	8009054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b01      	cmp	r3, #1
 8009042:	d107      	bne.n	8009054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f06f 0201 	mvn.w	r2, #1
 800904c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7f8 f924 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905e:	2b80      	cmp	r3, #128	; 0x80
 8009060:	d10e      	bne.n	8009080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906c:	2b80      	cmp	r3, #128	; 0x80
 800906e:	d107      	bne.n	8009080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fd26 	bl	8009acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908a:	2b40      	cmp	r3, #64	; 0x40
 800908c:	d10e      	bne.n	80090ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d107      	bne.n	80090ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f9c1 	bl	800942e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	f003 0320 	and.w	r3, r3, #32
 80090b6:	2b20      	cmp	r3, #32
 80090b8:	d10e      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d107      	bne.n	80090d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f06f 0220 	mvn.w	r2, #32
 80090d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fcf0 	bl	8009ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d101      	bne.n	80090fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090fa:	2302      	movs	r3, #2
 80090fc:	e0ae      	b.n	800925c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2b0c      	cmp	r3, #12
 800910a:	f200 809f 	bhi.w	800924c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800910e:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	08009149 	.word	0x08009149
 8009118:	0800924d 	.word	0x0800924d
 800911c:	0800924d 	.word	0x0800924d
 8009120:	0800924d 	.word	0x0800924d
 8009124:	08009189 	.word	0x08009189
 8009128:	0800924d 	.word	0x0800924d
 800912c:	0800924d 	.word	0x0800924d
 8009130:	0800924d 	.word	0x0800924d
 8009134:	080091cb 	.word	0x080091cb
 8009138:	0800924d 	.word	0x0800924d
 800913c:	0800924d 	.word	0x0800924d
 8009140:	0800924d 	.word	0x0800924d
 8009144:	0800920b 	.word	0x0800920b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	68b9      	ldr	r1, [r7, #8]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f9f8 	bl	8009544 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0208 	orr.w	r2, r2, #8
 8009162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	699a      	ldr	r2, [r3, #24]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f022 0204 	bic.w	r2, r2, #4
 8009172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6999      	ldr	r1, [r3, #24]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	691a      	ldr	r2, [r3, #16]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	430a      	orrs	r2, r1
 8009184:	619a      	str	r2, [r3, #24]
      break;
 8009186:	e064      	b.n	8009252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68b9      	ldr	r1, [r7, #8]
 800918e:	4618      	mov	r0, r3
 8009190:	f000 fa3e 	bl	8009610 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	699a      	ldr	r2, [r3, #24]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6999      	ldr	r1, [r3, #24]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	021a      	lsls	r2, r3, #8
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	619a      	str	r2, [r3, #24]
      break;
 80091c8:	e043      	b.n	8009252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68b9      	ldr	r1, [r7, #8]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 fa89 	bl	80096e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	69da      	ldr	r2, [r3, #28]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f042 0208 	orr.w	r2, r2, #8
 80091e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69da      	ldr	r2, [r3, #28]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0204 	bic.w	r2, r2, #4
 80091f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69d9      	ldr	r1, [r3, #28]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	691a      	ldr	r2, [r3, #16]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	61da      	str	r2, [r3, #28]
      break;
 8009208:	e023      	b.n	8009252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68b9      	ldr	r1, [r7, #8]
 8009210:	4618      	mov	r0, r3
 8009212:	f000 fad3 	bl	80097bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69da      	ldr	r2, [r3, #28]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	69da      	ldr	r2, [r3, #28]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	69d9      	ldr	r1, [r3, #28]
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	021a      	lsls	r2, r3, #8
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	61da      	str	r2, [r3, #28]
      break;
 800924a:	e002      	b.n	8009252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	75fb      	strb	r3, [r7, #23]
      break;
 8009250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800925a:	7dfb      	ldrb	r3, [r7, #23]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIM_ConfigClockSource+0x1c>
 800927c:	2302      	movs	r3, #2
 800927e:	e0b4      	b.n	80093ea <HAL_TIM_ConfigClockSource+0x186>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800929e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b8:	d03e      	beq.n	8009338 <HAL_TIM_ConfigClockSource+0xd4>
 80092ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092be:	f200 8087 	bhi.w	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c6:	f000 8086 	beq.w	80093d6 <HAL_TIM_ConfigClockSource+0x172>
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d87f      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092d0:	2b70      	cmp	r3, #112	; 0x70
 80092d2:	d01a      	beq.n	800930a <HAL_TIM_ConfigClockSource+0xa6>
 80092d4:	2b70      	cmp	r3, #112	; 0x70
 80092d6:	d87b      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092d8:	2b60      	cmp	r3, #96	; 0x60
 80092da:	d050      	beq.n	800937e <HAL_TIM_ConfigClockSource+0x11a>
 80092dc:	2b60      	cmp	r3, #96	; 0x60
 80092de:	d877      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092e0:	2b50      	cmp	r3, #80	; 0x50
 80092e2:	d03c      	beq.n	800935e <HAL_TIM_ConfigClockSource+0xfa>
 80092e4:	2b50      	cmp	r3, #80	; 0x50
 80092e6:	d873      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092e8:	2b40      	cmp	r3, #64	; 0x40
 80092ea:	d058      	beq.n	800939e <HAL_TIM_ConfigClockSource+0x13a>
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	d86f      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092f0:	2b30      	cmp	r3, #48	; 0x30
 80092f2:	d064      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x15a>
 80092f4:	2b30      	cmp	r3, #48	; 0x30
 80092f6:	d86b      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 80092f8:	2b20      	cmp	r3, #32
 80092fa:	d060      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x15a>
 80092fc:	2b20      	cmp	r3, #32
 80092fe:	d867      	bhi.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05c      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x15a>
 8009304:	2b10      	cmp	r3, #16
 8009306:	d05a      	beq.n	80093be <HAL_TIM_ConfigClockSource+0x15a>
 8009308:	e062      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	6899      	ldr	r1, [r3, #8]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	f000 fb19 	bl	8009950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800932c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	609a      	str	r2, [r3, #8]
      break;
 8009336:	e04f      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	6899      	ldr	r1, [r3, #8]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	685a      	ldr	r2, [r3, #4]
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	f000 fb02 	bl	8009950 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800935a:	609a      	str	r2, [r3, #8]
      break;
 800935c:	e03c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6818      	ldr	r0, [r3, #0]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	6859      	ldr	r1, [r3, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	461a      	mov	r2, r3
 800936c:	f000 fa76 	bl	800985c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2150      	movs	r1, #80	; 0x50
 8009376:	4618      	mov	r0, r3
 8009378:	f000 facf 	bl	800991a <TIM_ITRx_SetConfig>
      break;
 800937c:	e02c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	6859      	ldr	r1, [r3, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	461a      	mov	r2, r3
 800938c:	f000 fa95 	bl	80098ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2160      	movs	r1, #96	; 0x60
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fabf 	bl	800991a <TIM_ITRx_SetConfig>
      break;
 800939c:	e01c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6859      	ldr	r1, [r3, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f000 fa56 	bl	800985c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2140      	movs	r1, #64	; 0x40
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 faaf 	bl	800991a <TIM_ITRx_SetConfig>
      break;
 80093bc:	e00c      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	4610      	mov	r0, r2
 80093ca:	f000 faa6 	bl	800991a <TIM_ITRx_SetConfig>
      break;
 80093ce:	e003      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
      break;
 80093d4:	e000      	b.n	80093d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009406:	b480      	push	{r7}
 8009408:	b083      	sub	sp, #12
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009422:	bf00      	nop
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009436:	bf00      	nop
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a34      	ldr	r2, [pc, #208]	; (8009528 <TIM_Base_SetConfig+0xe4>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00f      	beq.n	800947c <TIM_Base_SetConfig+0x38>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009462:	d00b      	beq.n	800947c <TIM_Base_SetConfig+0x38>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a31      	ldr	r2, [pc, #196]	; (800952c <TIM_Base_SetConfig+0xe8>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d007      	beq.n	800947c <TIM_Base_SetConfig+0x38>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a30      	ldr	r2, [pc, #192]	; (8009530 <TIM_Base_SetConfig+0xec>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d003      	beq.n	800947c <TIM_Base_SetConfig+0x38>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a2f      	ldr	r2, [pc, #188]	; (8009534 <TIM_Base_SetConfig+0xf0>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d108      	bne.n	800948e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4313      	orrs	r3, r2
 800948c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a25      	ldr	r2, [pc, #148]	; (8009528 <TIM_Base_SetConfig+0xe4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d01b      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949c:	d017      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a22      	ldr	r2, [pc, #136]	; (800952c <TIM_Base_SetConfig+0xe8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d013      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a21      	ldr	r2, [pc, #132]	; (8009530 <TIM_Base_SetConfig+0xec>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00f      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a20      	ldr	r2, [pc, #128]	; (8009534 <TIM_Base_SetConfig+0xf0>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d00b      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1f      	ldr	r2, [pc, #124]	; (8009538 <TIM_Base_SetConfig+0xf4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d007      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a1e      	ldr	r2, [pc, #120]	; (800953c <TIM_Base_SetConfig+0xf8>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d003      	beq.n	80094ce <TIM_Base_SetConfig+0x8a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1d      	ldr	r2, [pc, #116]	; (8009540 <TIM_Base_SetConfig+0xfc>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d108      	bne.n	80094e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a08      	ldr	r2, [pc, #32]	; (8009528 <TIM_Base_SetConfig+0xe4>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d103      	bne.n	8009514 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	691a      	ldr	r2, [r3, #16]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	615a      	str	r2, [r3, #20]
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	40010000 	.word	0x40010000
 800952c:	40000400 	.word	0x40000400
 8009530:	40000800 	.word	0x40000800
 8009534:	40000c00 	.word	0x40000c00
 8009538:	40014000 	.word	0x40014000
 800953c:	40014400 	.word	0x40014400
 8009540:	40014800 	.word	0x40014800

08009544 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	f023 0201 	bic.w	r2, r3, #1
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a1b      	ldr	r3, [r3, #32]
 800955e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f023 0302 	bic.w	r3, r3, #2
 800958c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	4313      	orrs	r3, r2
 8009596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a1c      	ldr	r2, [pc, #112]	; (800960c <TIM_OC1_SetConfig+0xc8>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10c      	bne.n	80095ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0308 	bic.w	r3, r3, #8
 80095a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f023 0304 	bic.w	r3, r3, #4
 80095b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a13      	ldr	r2, [pc, #76]	; (800960c <TIM_OC1_SetConfig+0xc8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d111      	bne.n	80095e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	693a      	ldr	r2, [r7, #16]
 80095d8:	4313      	orrs	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	621a      	str	r2, [r3, #32]
}
 8009600:	bf00      	nop
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	40010000 	.word	0x40010000

08009610 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009610:	b480      	push	{r7}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	f023 0210 	bic.w	r2, r3, #16
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800963e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4313      	orrs	r3, r2
 8009652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f023 0320 	bic.w	r3, r3, #32
 800965a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	011b      	lsls	r3, r3, #4
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4313      	orrs	r3, r2
 8009666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a1e      	ldr	r2, [pc, #120]	; (80096e4 <TIM_OC2_SetConfig+0xd4>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d10d      	bne.n	800968c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a15      	ldr	r2, [pc, #84]	; (80096e4 <TIM_OC2_SetConfig+0xd4>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d113      	bne.n	80096bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800969a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	621a      	str	r2, [r3, #32]
}
 80096d6:	bf00      	nop
 80096d8:	371c      	adds	r7, #28
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	40010000 	.word	0x40010000

080096e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	4313      	orrs	r3, r2
 800973c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a1d      	ldr	r2, [pc, #116]	; (80097b8 <TIM_OC3_SetConfig+0xd0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d10d      	bne.n	8009762 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800974c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4a14      	ldr	r2, [pc, #80]	; (80097b8 <TIM_OC3_SetConfig+0xd0>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d113      	bne.n	8009792 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	695b      	ldr	r3, [r3, #20]
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	4313      	orrs	r3, r2
 8009784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	4313      	orrs	r3, r2
 8009790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	621a      	str	r2, [r3, #32]
}
 80097ac:	bf00      	nop
 80097ae:	371c      	adds	r7, #28
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	40010000 	.word	0x40010000

080097bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097bc:	b480      	push	{r7}
 80097be:	b087      	sub	sp, #28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	69db      	ldr	r3, [r3, #28]
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	031b      	lsls	r3, r3, #12
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	4313      	orrs	r3, r2
 8009812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a10      	ldr	r2, [pc, #64]	; (8009858 <TIM_OC4_SetConfig+0x9c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d109      	bne.n	8009830 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009822:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	019b      	lsls	r3, r3, #6
 800982a:	697a      	ldr	r2, [r7, #20]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685a      	ldr	r2, [r3, #4]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	621a      	str	r2, [r3, #32]
}
 800984a:	bf00      	nop
 800984c:	371c      	adds	r7, #28
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	40010000 	.word	0x40010000

0800985c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f023 0201 	bic.w	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4313      	orrs	r3, r2
 8009890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f023 030a 	bic.w	r3, r3, #10
 8009898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4313      	orrs	r3, r2
 80098a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b087      	sub	sp, #28
 80098be:	af00      	add	r7, sp, #0
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	f023 0210 	bic.w	r2, r3, #16
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	031b      	lsls	r3, r3, #12
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	621a      	str	r2, [r3, #32]
}
 800990e:	bf00      	nop
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	f043 0307 	orr.w	r3, r3, #7
 800993c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	609a      	str	r2, [r3, #8]
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800996a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	021a      	lsls	r2, r3, #8
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	431a      	orrs	r2, r3
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4313      	orrs	r3, r2
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	609a      	str	r2, [r3, #8]
}
 8009984:	bf00      	nop
 8009986:	371c      	adds	r7, #28
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f003 031f 	and.w	r3, r3, #31
 80099a2:	2201      	movs	r2, #1
 80099a4:	fa02 f303 	lsl.w	r3, r2, r3
 80099a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1a      	ldr	r2, [r3, #32]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a1a      	ldr	r2, [r3, #32]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 031f 	and.w	r3, r3, #31
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	621a      	str	r2, [r3, #32]
}
 80099ce:	bf00      	nop
 80099d0:	371c      	adds	r7, #28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
	...

080099dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e050      	b.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a1c      	ldr	r2, [pc, #112]	; (8009aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d018      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a40:	d013      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a18      	ldr	r2, [pc, #96]	; (8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d00e      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a16      	ldr	r2, [pc, #88]	; (8009aac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d009      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a15      	ldr	r2, [pc, #84]	; (8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d004      	beq.n	8009a6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d10c      	bne.n	8009a84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3714      	adds	r7, #20
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	40010000 	.word	0x40010000
 8009aa8:	40000400 	.word	0x40000400
 8009aac:	40000800 	.word	0x40000800
 8009ab0:	40000c00 	.word	0x40000c00
 8009ab4:	40014000 	.word	0x40014000

08009ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <arm_sin_f32>:
 8009ae0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009b5c <arm_sin_f32+0x7c>
 8009ae4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ae8:	ee20 7a07 	vmul.f32	s14, s0, s14
 8009aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009af0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8009af4:	d42c      	bmi.n	8009b50 <arm_sin_f32+0x70>
 8009af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009afa:	eddf 6a19 	vldr	s13, [pc, #100]	; 8009b60 <arm_sin_f32+0x80>
 8009afe:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <arm_sin_f32+0x84>)
 8009b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009b08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b14:	bfa8      	it	ge
 8009b16:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8009b1a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8009b1e:	ee17 3a10 	vmov	r3, s14
 8009b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b26:	ee07 3a10 	vmov	s14, r3
 8009b2a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8009b2e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009b32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b36:	edd1 6a01 	vldr	s13, [r1, #4]
 8009b3a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009b3e:	ed91 0a00 	vldr	s0, [r1]
 8009b42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009b46:	ee27 0a00 	vmul.f32	s0, s14, s0
 8009b4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009b4e:	4770      	bx	lr
 8009b50:	ee17 3a90 	vmov	r3, s15
 8009b54:	3b01      	subs	r3, #1
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	e7cc      	b.n	8009af6 <arm_sin_f32+0x16>
 8009b5c:	3e22f983 	.word	0x3e22f983
 8009b60:	44000000 	.word	0x44000000
 8009b64:	0800a9b0 	.word	0x0800a9b0

08009b68 <atoi>:
 8009b68:	220a      	movs	r2, #10
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	f000 b8d6 	b.w	8009d1c <strtol>

08009b70 <__errno>:
 8009b70:	4b01      	ldr	r3, [pc, #4]	; (8009b78 <__errno+0x8>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000704 	.word	0x20000704

08009b7c <__libc_init_array>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	4d0d      	ldr	r5, [pc, #52]	; (8009bb4 <__libc_init_array+0x38>)
 8009b80:	4c0d      	ldr	r4, [pc, #52]	; (8009bb8 <__libc_init_array+0x3c>)
 8009b82:	1b64      	subs	r4, r4, r5
 8009b84:	10a4      	asrs	r4, r4, #2
 8009b86:	2600      	movs	r6, #0
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	d109      	bne.n	8009ba0 <__libc_init_array+0x24>
 8009b8c:	4d0b      	ldr	r5, [pc, #44]	; (8009bbc <__libc_init_array+0x40>)
 8009b8e:	4c0c      	ldr	r4, [pc, #48]	; (8009bc0 <__libc_init_array+0x44>)
 8009b90:	f000 f8ce 	bl	8009d30 <_init>
 8009b94:	1b64      	subs	r4, r4, r5
 8009b96:	10a4      	asrs	r4, r4, #2
 8009b98:	2600      	movs	r6, #0
 8009b9a:	42a6      	cmp	r6, r4
 8009b9c:	d105      	bne.n	8009baa <__libc_init_array+0x2e>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba4:	4798      	blx	r3
 8009ba6:	3601      	adds	r6, #1
 8009ba8:	e7ee      	b.n	8009b88 <__libc_init_array+0xc>
 8009baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bae:	4798      	blx	r3
 8009bb0:	3601      	adds	r6, #1
 8009bb2:	e7f2      	b.n	8009b9a <__libc_init_array+0x1e>
 8009bb4:	0800b2c0 	.word	0x0800b2c0
 8009bb8:	0800b2c0 	.word	0x0800b2c0
 8009bbc:	0800b2c0 	.word	0x0800b2c0
 8009bc0:	0800b2c4 	.word	0x0800b2c4

08009bc4 <memcpy>:
 8009bc4:	440a      	add	r2, r1
 8009bc6:	4291      	cmp	r1, r2
 8009bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bcc:	d100      	bne.n	8009bd0 <memcpy+0xc>
 8009bce:	4770      	bx	lr
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bda:	4291      	cmp	r1, r2
 8009bdc:	d1f9      	bne.n	8009bd2 <memcpy+0xe>
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <memset>:
 8009be0:	4402      	add	r2, r0
 8009be2:	4603      	mov	r3, r0
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d100      	bne.n	8009bea <memset+0xa>
 8009be8:	4770      	bx	lr
 8009bea:	f803 1b01 	strb.w	r1, [r3], #1
 8009bee:	e7f9      	b.n	8009be4 <memset+0x4>

08009bf0 <strncmp>:
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	b17a      	cbz	r2, 8009c14 <strncmp+0x24>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	3901      	subs	r1, #1
 8009bf8:	1884      	adds	r4, r0, r2
 8009bfa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bfe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c02:	4290      	cmp	r0, r2
 8009c04:	d101      	bne.n	8009c0a <strncmp+0x1a>
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	d101      	bne.n	8009c0e <strncmp+0x1e>
 8009c0a:	1a80      	subs	r0, r0, r2
 8009c0c:	bd10      	pop	{r4, pc}
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	d1f3      	bne.n	8009bfa <strncmp+0xa>
 8009c12:	e7fa      	b.n	8009c0a <strncmp+0x1a>
 8009c14:	4610      	mov	r0, r2
 8009c16:	e7f9      	b.n	8009c0c <strncmp+0x1c>

08009c18 <_strtol_l.constprop.0>:
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1e:	d001      	beq.n	8009c24 <_strtol_l.constprop.0+0xc>
 8009c20:	2b24      	cmp	r3, #36	; 0x24
 8009c22:	d906      	bls.n	8009c32 <_strtol_l.constprop.0+0x1a>
 8009c24:	f7ff ffa4 	bl	8009b70 <__errno>
 8009c28:	2316      	movs	r3, #22
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d18 <_strtol_l.constprop.0+0x100>
 8009c36:	460d      	mov	r5, r1
 8009c38:	462e      	mov	r6, r5
 8009c3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009c42:	f017 0708 	ands.w	r7, r7, #8
 8009c46:	d1f7      	bne.n	8009c38 <_strtol_l.constprop.0+0x20>
 8009c48:	2c2d      	cmp	r4, #45	; 0x2d
 8009c4a:	d132      	bne.n	8009cb2 <_strtol_l.constprop.0+0x9a>
 8009c4c:	782c      	ldrb	r4, [r5, #0]
 8009c4e:	2701      	movs	r7, #1
 8009c50:	1cb5      	adds	r5, r6, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d05b      	beq.n	8009d0e <_strtol_l.constprop.0+0xf6>
 8009c56:	2b10      	cmp	r3, #16
 8009c58:	d109      	bne.n	8009c6e <_strtol_l.constprop.0+0x56>
 8009c5a:	2c30      	cmp	r4, #48	; 0x30
 8009c5c:	d107      	bne.n	8009c6e <_strtol_l.constprop.0+0x56>
 8009c5e:	782c      	ldrb	r4, [r5, #0]
 8009c60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009c64:	2c58      	cmp	r4, #88	; 0x58
 8009c66:	d14d      	bne.n	8009d04 <_strtol_l.constprop.0+0xec>
 8009c68:	786c      	ldrb	r4, [r5, #1]
 8009c6a:	2310      	movs	r3, #16
 8009c6c:	3502      	adds	r5, #2
 8009c6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009c72:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c76:	f04f 0c00 	mov.w	ip, #0
 8009c7a:	fbb8 f9f3 	udiv	r9, r8, r3
 8009c7e:	4666      	mov	r6, ip
 8009c80:	fb03 8a19 	mls	sl, r3, r9, r8
 8009c84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009c88:	f1be 0f09 	cmp.w	lr, #9
 8009c8c:	d816      	bhi.n	8009cbc <_strtol_l.constprop.0+0xa4>
 8009c8e:	4674      	mov	r4, lr
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	dd24      	ble.n	8009cde <_strtol_l.constprop.0+0xc6>
 8009c94:	f1bc 0f00 	cmp.w	ip, #0
 8009c98:	db1e      	blt.n	8009cd8 <_strtol_l.constprop.0+0xc0>
 8009c9a:	45b1      	cmp	r9, r6
 8009c9c:	d31c      	bcc.n	8009cd8 <_strtol_l.constprop.0+0xc0>
 8009c9e:	d101      	bne.n	8009ca4 <_strtol_l.constprop.0+0x8c>
 8009ca0:	45a2      	cmp	sl, r4
 8009ca2:	db19      	blt.n	8009cd8 <_strtol_l.constprop.0+0xc0>
 8009ca4:	fb06 4603 	mla	r6, r6, r3, r4
 8009ca8:	f04f 0c01 	mov.w	ip, #1
 8009cac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cb0:	e7e8      	b.n	8009c84 <_strtol_l.constprop.0+0x6c>
 8009cb2:	2c2b      	cmp	r4, #43	; 0x2b
 8009cb4:	bf04      	itt	eq
 8009cb6:	782c      	ldrbeq	r4, [r5, #0]
 8009cb8:	1cb5      	addeq	r5, r6, #2
 8009cba:	e7ca      	b.n	8009c52 <_strtol_l.constprop.0+0x3a>
 8009cbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009cc0:	f1be 0f19 	cmp.w	lr, #25
 8009cc4:	d801      	bhi.n	8009cca <_strtol_l.constprop.0+0xb2>
 8009cc6:	3c37      	subs	r4, #55	; 0x37
 8009cc8:	e7e2      	b.n	8009c90 <_strtol_l.constprop.0+0x78>
 8009cca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009cce:	f1be 0f19 	cmp.w	lr, #25
 8009cd2:	d804      	bhi.n	8009cde <_strtol_l.constprop.0+0xc6>
 8009cd4:	3c57      	subs	r4, #87	; 0x57
 8009cd6:	e7db      	b.n	8009c90 <_strtol_l.constprop.0+0x78>
 8009cd8:	f04f 3cff 	mov.w	ip, #4294967295
 8009cdc:	e7e6      	b.n	8009cac <_strtol_l.constprop.0+0x94>
 8009cde:	f1bc 0f00 	cmp.w	ip, #0
 8009ce2:	da05      	bge.n	8009cf0 <_strtol_l.constprop.0+0xd8>
 8009ce4:	2322      	movs	r3, #34	; 0x22
 8009ce6:	6003      	str	r3, [r0, #0]
 8009ce8:	4646      	mov	r6, r8
 8009cea:	b942      	cbnz	r2, 8009cfe <_strtol_l.constprop.0+0xe6>
 8009cec:	4630      	mov	r0, r6
 8009cee:	e79e      	b.n	8009c2e <_strtol_l.constprop.0+0x16>
 8009cf0:	b107      	cbz	r7, 8009cf4 <_strtol_l.constprop.0+0xdc>
 8009cf2:	4276      	negs	r6, r6
 8009cf4:	2a00      	cmp	r2, #0
 8009cf6:	d0f9      	beq.n	8009cec <_strtol_l.constprop.0+0xd4>
 8009cf8:	f1bc 0f00 	cmp.w	ip, #0
 8009cfc:	d000      	beq.n	8009d00 <_strtol_l.constprop.0+0xe8>
 8009cfe:	1e69      	subs	r1, r5, #1
 8009d00:	6011      	str	r1, [r2, #0]
 8009d02:	e7f3      	b.n	8009cec <_strtol_l.constprop.0+0xd4>
 8009d04:	2430      	movs	r4, #48	; 0x30
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1b1      	bne.n	8009c6e <_strtol_l.constprop.0+0x56>
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	e7af      	b.n	8009c6e <_strtol_l.constprop.0+0x56>
 8009d0e:	2c30      	cmp	r4, #48	; 0x30
 8009d10:	d0a5      	beq.n	8009c5e <_strtol_l.constprop.0+0x46>
 8009d12:	230a      	movs	r3, #10
 8009d14:	e7ab      	b.n	8009c6e <_strtol_l.constprop.0+0x56>
 8009d16:	bf00      	nop
 8009d18:	0800b1b5 	.word	0x0800b1b5

08009d1c <strtol>:
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	460a      	mov	r2, r1
 8009d20:	4601      	mov	r1, r0
 8009d22:	4802      	ldr	r0, [pc, #8]	; (8009d2c <strtol+0x10>)
 8009d24:	6800      	ldr	r0, [r0, #0]
 8009d26:	f7ff bf77 	b.w	8009c18 <_strtol_l.constprop.0>
 8009d2a:	bf00      	nop
 8009d2c:	20000704 	.word	0x20000704

08009d30 <_init>:
 8009d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d32:	bf00      	nop
 8009d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d36:	bc08      	pop	{r3}
 8009d38:	469e      	mov	lr, r3
 8009d3a:	4770      	bx	lr

08009d3c <_fini>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	bf00      	nop
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr
