
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce74  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002370  0800d00c  0800d00c  0001d00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f37c  0800f37c  00028f60  2**0
                  CONTENTS
  4 .ARM          00000008  0800f37c  0800f37c  0001f37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f384  0800f384  00028f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f384  0800f384  0001f384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008f60  20000000  0800f38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a120  20008f60  080182ec  00028f60  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013080  080182ec  00033080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028f60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018787  00000000  00000000  00028f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286d  00000000  00000000  00041717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00043f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  00045428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018de0  00000000  00000000  000467e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019387  00000000  00000000  0005f5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1df1  00000000  00000000  00078947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011a738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b30  00000000  00000000  0011a7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00120328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008f60 	.word	0x20008f60
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800cff4 	.word	0x0800cff4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008f64 	.word	0x20008f64
 80001d4:	0800cff4 	.word	0x0800cff4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bbe      	ldr	r3, [pc, #760]	; (8000ea8 <menu_vars+0x310>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bbc      	ldr	r3, [pc, #752]	; (8000ea8 <menu_vars+0x310>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bbc      	ldr	r3, [pc, #752]	; (8000eac <menu_vars+0x314>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00c f96e 	bl	800ceb4 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4bb2      	ldr	r3, [pc, #712]	; (8000ea8 <menu_vars+0x310>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bb0      	ldr	r3, [pc, #704]	; (8000ea8 <menu_vars+0x310>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4bae      	ldr	r3, [pc, #696]	; (8000ea8 <menu_vars+0x310>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4bad      	ldr	r3, [pc, #692]	; (8000ea8 <menu_vars+0x310>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aad      	ldr	r2, [pc, #692]	; (8000eb0 <menu_vars+0x318>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aac      	ldr	r2, [pc, #688]	; (8000eb4 <menu_vars+0x31c>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa9      	ldr	r2, [pc, #676]	; (8000eb4 <menu_vars+0x31c>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b3d      	cmp	r3, #61	; 0x3d
 8000c16:	f200 8246 	bhi.w	80010a6 <menu_vars+0x50e>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000d19 	.word	0x08000d19
 8000c24:	08000d1f 	.word	0x08000d1f
 8000c28:	08000d31 	.word	0x08000d31
 8000c2c:	08000d45 	.word	0x08000d45
 8000c30:	08000d59 	.word	0x08000d59
 8000c34:	08000d6d 	.word	0x08000d6d
 8000c38:	08000d7f 	.word	0x08000d7f
 8000c3c:	08000d85 	.word	0x08000d85
 8000c40:	08000d97 	.word	0x08000d97
 8000c44:	08000dab 	.word	0x08000dab
 8000c48:	08000dbf 	.word	0x08000dbf
 8000c4c:	08000dd3 	.word	0x08000dd3
 8000c50:	08000dd9 	.word	0x08000dd9
 8000c54:	08000deb 	.word	0x08000deb
 8000c58:	08000dff 	.word	0x08000dff
 8000c5c:	08000e13 	.word	0x08000e13
 8000c60:	08000e27 	.word	0x08000e27
 8000c64:	08000e3b 	.word	0x08000e3b
 8000c68:	08000e4f 	.word	0x08000e4f
 8000c6c:	08000e63 	.word	0x08000e63
 8000c70:	08000e77 	.word	0x08000e77
 8000c74:	08000e8b 	.word	0x08000e8b
 8000c78:	08000e91 	.word	0x08000e91
 8000c7c:	08000e97 	.word	0x08000e97
 8000c80:	08000e9d 	.word	0x08000e9d
 8000c84:	08000ed1 	.word	0x08000ed1
 8000c88:	08000edf 	.word	0x08000edf
 8000c8c:	08000eed 	.word	0x08000eed
 8000c90:	08000ef9 	.word	0x08000ef9
 8000c94:	08000f07 	.word	0x08000f07
 8000c98:	08000f15 	.word	0x08000f15
 8000c9c:	08000f23 	.word	0x08000f23
 8000ca0:	08000f31 	.word	0x08000f31
 8000ca4:	08000f3f 	.word	0x08000f3f
 8000ca8:	08000f4d 	.word	0x08000f4d
 8000cac:	08000f5b 	.word	0x08000f5b
 8000cb0:	08000f6d 	.word	0x08000f6d
 8000cb4:	08000f7d 	.word	0x08000f7d
 8000cb8:	08000f8f 	.word	0x08000f8f
 8000cbc:	08000fa1 	.word	0x08000fa1
 8000cc0:	08000fb3 	.word	0x08000fb3
 8000cc4:	08000fc5 	.word	0x08000fc5
 8000cc8:	08000fd9 	.word	0x08000fd9
 8000ccc:	08000fed 	.word	0x08000fed
 8000cd0:	08001001 	.word	0x08001001
 8000cd4:	08001007 	.word	0x08001007
 8000cd8:	0800100d 	.word	0x0800100d
 8000cdc:	08001013 	.word	0x08001013
 8000ce0:	08001019 	.word	0x08001019
 8000ce4:	0800101f 	.word	0x0800101f
 8000ce8:	08001031 	.word	0x08001031
 8000cec:	08001045 	.word	0x08001045
 8000cf0:	08001059 	.word	0x08001059
 8000cf4:	0800106d 	.word	0x0800106d
 8000cf8:	08001077 	.word	0x08001077
 8000cfc:	0800107d 	.word	0x0800107d
 8000d00:	08001083 	.word	0x08001083
 8000d04:	08001089 	.word	0x08001089
 8000d08:	0800108f 	.word	0x0800108f
 8000d0c:	08001095 	.word	0x08001095
 8000d10:	0800109b 	.word	0x0800109b
 8000d14:	080010a1 	.word	0x080010a1
	case 0:     menu_vars_var1= NULL; break;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e1c6      	b.n	80010ac <menu_vars+0x514>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d1e:	78fa      	ldrb	r2, [r7, #3]
 8000d20:	4613      	mov	r3, r2
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4a63      	ldr	r2, [pc, #396]	; (8000eb8 <menu_vars+0x320>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	e1bd      	b.n	80010ac <menu_vars+0x514>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	4613      	mov	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <menu_vars+0x320>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3301      	adds	r3, #1
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	e1b3      	b.n	80010ac <menu_vars+0x514>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d44:	78fa      	ldrb	r2, [r7, #3]
 8000d46:	4613      	mov	r3, r2
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4a5a      	ldr	r2, [pc, #360]	; (8000eb8 <menu_vars+0x320>)
 8000d50:	4413      	add	r3, r2
 8000d52:	3304      	adds	r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e1a9      	b.n	80010ac <menu_vars+0x514>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4a55      	ldr	r2, [pc, #340]	; (8000eb8 <menu_vars+0x320>)
 8000d64:	4413      	add	r3, r2
 8000d66:	3303      	adds	r3, #3
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e19f      	b.n	80010ac <menu_vars+0x514>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	222c      	movs	r2, #44	; 0x2c
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <menu_vars+0x324>)
 8000d76:	4413      	add	r3, r2
 8000d78:	3301      	adds	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	e196      	b.n	80010ac <menu_vars+0x514>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e193      	b.n	80010ac <menu_vars+0x514>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	4a4c      	ldr	r2, [pc, #304]	; (8000ec0 <menu_vars+0x328>)
 8000d90:	4413      	add	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	e18a      	b.n	80010ac <menu_vars+0x514>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	4a47      	ldr	r2, [pc, #284]	; (8000ec0 <menu_vars+0x328>)
 8000da2:	4413      	add	r3, r2
 8000da4:	3301      	adds	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	e180      	b.n	80010ac <menu_vars+0x514>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <menu_vars+0x328>)
 8000db6:	4413      	add	r3, r2
 8000db8:	3302      	adds	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e176      	b.n	80010ac <menu_vars+0x514>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <menu_vars+0x328>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	3303      	adds	r3, #3
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	e16c      	b.n	80010ac <menu_vars+0x514>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	e169      	b.n	80010ac <menu_vars+0x514>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000dd8:	78fa      	ldrb	r2, [r7, #3]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4a38      	ldr	r2, [pc, #224]	; (8000ec4 <menu_vars+0x32c>)
 8000de4:	4413      	add	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	e160      	b.n	80010ac <menu_vars+0x514>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	4613      	mov	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4a33      	ldr	r2, [pc, #204]	; (8000ec4 <menu_vars+0x32c>)
 8000df6:	4413      	add	r3, r2
 8000df8:	3301      	adds	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e156      	b.n	80010ac <menu_vars+0x514>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	4613      	mov	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <menu_vars+0x32c>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e14c      	b.n	80010ac <menu_vars+0x514>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	4613      	mov	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <menu_vars+0x32c>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	3303      	adds	r3, #3
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	e142      	b.n	80010ac <menu_vars+0x514>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <menu_vars+0x32c>)
 8000e32:	4413      	add	r3, r2
 8000e34:	3304      	adds	r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e138      	b.n	80010ac <menu_vars+0x514>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <menu_vars+0x32c>)
 8000e46:	4413      	add	r3, r2
 8000e48:	3305      	adds	r3, #5
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	e12e      	b.n	80010ac <menu_vars+0x514>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	4613      	mov	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <menu_vars+0x32c>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3306      	adds	r3, #6
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	e124      	b.n	80010ac <menu_vars+0x514>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e62:	78fa      	ldrb	r2, [r7, #3]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <menu_vars+0x32c>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	3307      	adds	r3, #7
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	e11a      	b.n	80010ac <menu_vars+0x514>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	3308      	adds	r3, #8
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <menu_vars+0x32c>)
 8000e84:	4413      	add	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e110      	b.n	80010ac <menu_vars+0x514>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e10d      	b.n	80010ac <menu_vars+0x514>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <menu_vars+0x330>)
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	e10a      	b.n	80010ac <menu_vars+0x514>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <menu_vars+0x334>)
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e107      	b.n	80010ac <menu_vars+0x514>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <menu_vars+0x330>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e101      	b.n	80010ac <menu_vars+0x514>
 8000ea8:	2000991a 	.word	0x2000991a
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20010d39 	.word	0x20010d39
 8000eb4:	0800e4ac 	.word	0x0800e4ac
 8000eb8:	2000cf1c 	.word	0x2000cf1c
 8000ebc:	2000dd84 	.word	0x2000dd84
 8000ec0:	2000d2c8 	.word	0x2000d2c8
 8000ec4:	20008e10 	.word	0x20008e10
 8000ec8:	2000dd54 	.word	0x2000dd54
 8000ecc:	2000dd55 	.word	0x2000dd55
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	4a78      	ldr	r2, [pc, #480]	; (80010b8 <menu_vars+0x520>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3303      	adds	r3, #3
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e0e6      	b.n	80010ac <menu_vars+0x514>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	3320      	adds	r3, #32
 8000ee2:	4a75      	ldr	r2, [pc, #468]	; (80010b8 <menu_vars+0x520>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e0df      	b.n	80010ac <menu_vars+0x514>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4a72      	ldr	r2, [pc, #456]	; (80010bc <menu_vars+0x524>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e0d9      	b.n	80010ac <menu_vars+0x514>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4a6f      	ldr	r2, [pc, #444]	; (80010bc <menu_vars+0x524>)
 8000efe:	4413      	add	r3, r2
 8000f00:	3301      	adds	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	e0d2      	b.n	80010ac <menu_vars+0x514>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4a6c      	ldr	r2, [pc, #432]	; (80010bc <menu_vars+0x524>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e0cb      	b.n	80010ac <menu_vars+0x514>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4a68      	ldr	r2, [pc, #416]	; (80010bc <menu_vars+0x524>)
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3303      	adds	r3, #3
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	e0c4      	b.n	80010ac <menu_vars+0x514>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <menu_vars+0x524>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e0bd      	b.n	80010ac <menu_vars+0x514>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4a61      	ldr	r2, [pc, #388]	; (80010bc <menu_vars+0x524>)
 8000f36:	4413      	add	r3, r2
 8000f38:	3307      	adds	r3, #7
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	e0b6      	b.n	80010ac <menu_vars+0x514>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4a5e      	ldr	r2, [pc, #376]	; (80010bc <menu_vars+0x524>)
 8000f44:	4413      	add	r3, r2
 8000f46:	3306      	adds	r3, #6
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e0af      	b.n	80010ac <menu_vars+0x514>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4a5a      	ldr	r2, [pc, #360]	; (80010bc <menu_vars+0x524>)
 8000f52:	4413      	add	r3, r2
 8000f54:	3305      	adds	r3, #5
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e0a8      	b.n	80010ac <menu_vars+0x514>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	222c      	movs	r2, #44	; 0x2c
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <menu_vars+0x528>)
 8000f64:	4413      	add	r3, r2
 8000f66:	3302      	adds	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e09f      	b.n	80010ac <menu_vars+0x514>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	222c      	movs	r2, #44	; 0x2c
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <menu_vars+0x528>)
 8000f76:	4413      	add	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e097      	b.n	80010ac <menu_vars+0x514>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <menu_vars+0x528>)
 8000f86:	4413      	add	r3, r2
 8000f88:	3303      	adds	r3, #3
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e08e      	b.n	80010ac <menu_vars+0x514>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	222c      	movs	r2, #44	; 0x2c
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <menu_vars+0x528>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	e085      	b.n	80010ac <menu_vars+0x514>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	222c      	movs	r2, #44	; 0x2c
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <menu_vars+0x528>)
 8000faa:	4413      	add	r3, r2
 8000fac:	3305      	adds	r3, #5
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e07c      	b.n	80010ac <menu_vars+0x514>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <menu_vars+0x52c>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e073      	b.n	80010ac <menu_vars+0x514>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <menu_vars+0x52c>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e069      	b.n	80010ac <menu_vars+0x514>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <menu_vars+0x52c>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e05f      	b.n	80010ac <menu_vars+0x514>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <menu_vars+0x52c>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3303      	adds	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e055      	b.n	80010ac <menu_vars+0x514>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8001000:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <menu_vars+0x530>)
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e052      	b.n	80010ac <menu_vars+0x514>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <menu_vars+0x534>)
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	e04f      	b.n	80010ac <menu_vars+0x514>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <menu_vars+0x538>)
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e04c      	b.n	80010ac <menu_vars+0x514>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <menu_vars+0x53c>)
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	e049      	b.n	80010ac <menu_vars+0x514>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <menu_vars+0x540>)
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e046      	b.n	80010ac <menu_vars+0x514>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4a2c      	ldr	r2, [pc, #176]	; (80010dc <menu_vars+0x544>)
 800102a:	4413      	add	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e03d      	b.n	80010ac <menu_vars+0x514>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <menu_vars+0x544>)
 800103c:	4413      	add	r3, r2
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e033      	b.n	80010ac <menu_vars+0x514>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <menu_vars+0x544>)
 8001050:	4413      	add	r3, r2
 8001052:	3302      	adds	r3, #2
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e029      	b.n	80010ac <menu_vars+0x514>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <menu_vars+0x544>)
 8001064:	4413      	add	r3, r2
 8001066:	3303      	adds	r3, #3
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	e01f      	b.n	80010ac <menu_vars+0x514>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <menu_vars+0x548>)
 8001070:	4413      	add	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e01a      	b.n	80010ac <menu_vars+0x514>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <menu_vars+0x54c>)
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e017      	b.n	80010ac <menu_vars+0x514>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <menu_vars+0x550>)
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e014      	b.n	80010ac <menu_vars+0x514>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <menu_vars+0x554>)
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e011      	b.n	80010ac <menu_vars+0x514>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <menu_vars+0x558>)
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e00e      	b.n	80010ac <menu_vars+0x514>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <menu_vars+0x55c>)
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e00b      	b.n	80010ac <menu_vars+0x514>
	case 59: 	menu_vars_var1=&sampler.sample_select  ;break;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <menu_vars+0x560>)
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e008      	b.n	80010ac <menu_vars+0x514>
	case 60: 	menu_vars_var1=&sampler.sample_save  ;break;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <menu_vars+0x564>)
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e005      	b.n	80010ac <menu_vars+0x514>
	case 61: 	menu_vars_var1=&sampler.sample_save_enable  ;break;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <menu_vars+0x568>)
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	e002      	b.n	80010ac <menu_vars+0x514>



	default :		menu_vars_var1= NULL   ; break;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 80010ac:	693b      	ldr	r3, [r7, #16]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000dd54 	.word	0x2000dd54
 80010bc:	20008e9c 	.word	0x20008e9c
 80010c0:	2000dd84 	.word	0x2000dd84
 80010c4:	2000d1c4 	.word	0x2000d1c4
 80010c8:	20008ebc 	.word	0x20008ebc
 80010cc:	20008ebd 	.word	0x20008ebd
 80010d0:	20008ebe 	.word	0x20008ebe
 80010d4:	20008ebf 	.word	0x20008ebf
 80010d8:	20008ec5 	.word	0x20008ec5
 80010dc:	2000d200 	.word	0x2000d200
 80010e0:	20012154 	.word	0x20012154
 80010e4:	20008ec0 	.word	0x20008ec0
 80010e8:	20008ec1 	.word	0x20008ec1
 80010ec:	20008ec2 	.word	0x20008ec2
 80010f0:	20008ec3 	.word	0x20008ec3
 80010f4:	20008ec4 	.word	0x20008ec4
 80010f8:	20008ec6 	.word	0x20008ec6
 80010fc:	20008ec7 	.word	0x20008ec7
 8001100:	20008ecc 	.word	0x20008ecc

08001104 <menu_parser>:





void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 800110a:	4a6b      	ldr	r2, [pc, #428]	; (80012b8 <menu_parser+0x1b4>)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 8001118:	4a68      	ldr	r2, [pc, #416]	; (80012bc <menu_parser+0x1b8>)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001120:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001128:	f640 432b 	movw	r3, #3115	; 0xc2b
 800112c:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <menu_parser+0x1bc>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	8aba      	ldrh	r2, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f0c0 80bb 	bcc.w	80012b0 <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 800113a:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <menu_parser+0x1bc>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <menu_parser+0x1c0>)
 8001142:	441a      	add	r2, r3
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	6851      	ldr	r1, [r2, #4]
 800114c:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e092      	b.n	800127a <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	4a5c      	ldr	r2, [pc, #368]	; (80012c8 <menu_parser+0x1c4>)
 8001158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	6810      	ldr	r0, [r2, #0]
 8001160:	6851      	ldr	r1, [r2, #4]
 8001162:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2208      	movs	r2, #8
 800116c:	4618      	mov	r0, r3
 800116e:	f00b fea1 	bl	800ceb4 <strncmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d17d      	bne.n	8001274 <menu_parser+0x170>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <menu_parser+0x1c8>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2b6f      	cmp	r3, #111	; 0x6f
 800117e:	d909      	bls.n	8001194 <menu_parser+0x90>
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <menu_parser+0x1c8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b7f      	cmp	r3, #127	; 0x7f
 8001186:	d805      	bhi.n	8001194 <menu_parser+0x90>
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <menu_parser+0x1c8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3310      	adds	r3, #16
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <menu_parser+0x1c8>)
 8001192:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001194:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <menu_parser+0x1c8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2bef      	cmp	r3, #239	; 0xef
 800119a:	d909      	bls.n	80011b0 <menu_parser+0xac>
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <menu_parser+0x1c8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2bff      	cmp	r3, #255	; 0xff
 80011a2:	d805      	bhi.n	80011b0 <menu_parser+0xac>
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <menu_parser+0x1c8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3310      	adds	r3, #16
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <menu_parser+0x1c8>)
 80011ae:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80011b8:	d30a      	bcc.n	80011d0 <menu_parser+0xcc>
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <menu_parser+0x1c8>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011c2:	d205      	bcs.n	80011d0 <menu_parser+0xcc>
 80011c4:	4b41      	ldr	r3, [pc, #260]	; (80012cc <menu_parser+0x1c8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3310      	adds	r3, #16
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <menu_parser+0x1c8>)
 80011ce:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <menu_parser+0x1c8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011d8:	d30a      	bcc.n	80011f0 <menu_parser+0xec>
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <menu_parser+0x1c8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e2:	d205      	bcs.n	80011f0 <menu_parser+0xec>
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <menu_parser+0x1c8>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3310      	adds	r3, #16
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b37      	ldr	r3, [pc, #220]	; (80012cc <menu_parser+0x1c8>)
 80011ee:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <menu_parser+0x1c8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80011f8:	d30a      	bcc.n	8001210 <menu_parser+0x10c>
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <menu_parser+0x1c8>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001202:	d205      	bcs.n	8001210 <menu_parser+0x10c>
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <menu_parser+0x1c8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3310      	adds	r3, #16
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <menu_parser+0x1c8>)
 800120e:	801a      	strh	r2, [r3, #0]

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <menu_parser+0x1c8>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800121c:	18d1      	adds	r1, r2, r3
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <menu_parser+0x1cc>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <menu_parser+0x1d0>)
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <menu_parser+0x1cc>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	461a      	mov	r2, r3
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <menu_parser+0x1d4>)
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <menu_parser+0x1bc>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	3b02      	subs	r3, #2
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <menu_parser+0x1c0>)
 800123e:	4413      	add	r3, r2
 8001240:	2202      	movs	r2, #2
 8001242:	4619      	mov	r1, r3
 8001244:	f00b fe20 	bl	800ce88 <memcpy>
        			    menu_title_count++;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <menu_parser+0x1cc>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <menu_parser+0x1cc>)
 8001252:	801a      	strh	r2, [r3, #0]
			    menu_counter++;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <menu_parser+0x1c8>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <menu_parser+0x1c8>)
 800125e:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <menu_parser+0x1d8>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <menu_parser+0x1bc>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3308      	adds	r3, #8
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <menu_parser+0x1bc>)
 8001270:	801a      	strh	r2, [r3, #0]
    			    return;}
 8001272:	e01e      	b.n	80012b2 <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	3301      	adds	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b3e      	cmp	r3, #62	; 0x3e
 800127e:	f67f af69 	bls.w	8001154 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <menu_parser+0x1d8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d905      	bls.n	8001296 <menu_parser+0x192>
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <menu_parser+0x1c8>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <menu_parser+0x1c8>)
 8001294:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <menu_parser+0x1d8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <menu_parser+0x1d8>)
 80012a0:	701a      	strb	r2, [r3, #0]
	    string_search++;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <menu_parser+0x1bc>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <menu_parser+0x1bc>)
 80012ac:	801a      	strh	r2, [r3, #0]
	    return;
 80012ae:	e000      	b.n	80012b2 <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 80012b0:	bf00      	nop

    }
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800d4f8 	.word	0x0800d4f8
 80012bc:	0800d500 	.word	0x0800d500
 80012c0:	2000e0f4 	.word	0x2000e0f4
 80012c4:	0800d878 	.word	0x0800d878
 80012c8:	20000000 	.word	0x20000000
 80012cc:	2000e0f6 	.word	0x2000e0f6
 80012d0:	2000e0fa 	.word	0x2000e0fa
 80012d4:	2000e0fc 	.word	0x2000e0fc
 80012d8:	2000e8fc 	.word	0x2000e8fc
 80012dc:	2000e0f8 	.word	0x2000e0f8

080012e0 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	75bb      	strb	r3, [r7, #22]
 80012ee:	e1b5      	b.n	800165c <patch_target_parse+0x37c>

			uint16_t* output_hold;
			uint16_t* output_hold2;


			uint8_t input_hold=patch[counter].input1;
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	4a97      	ldr	r2, [pc, #604]	; (8001550 <patch_target_parse+0x270>)
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	727b      	strb	r3, [r7, #9]
			uint8_t input_hold2=patch[counter].input2;
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	4a93      	ldr	r2, [pc, #588]	; (8001550 <patch_target_parse+0x270>)
 8001304:	212c      	movs	r1, #44	; 0x2c
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	4413      	add	r3, r2
 800130c:	3303      	adds	r3, #3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	723b      	strb	r3, [r7, #8]
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 8001312:	7dbb      	ldrb	r3, [r7, #22]
 8001314:	4a8e      	ldr	r2, [pc, #568]	; (8001550 <patch_target_parse+0x270>)
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b3e      	cmp	r3, #62	; 0x3e
 8001322:	d907      	bls.n	8001334 <patch_target_parse+0x54>
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <patch_target_parse+0x270>)
 8001328:	212c      	movs	r1, #44	; 0x2c
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	4413      	add	r3, r2
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001334:	7a7b      	ldrb	r3, [r7, #9]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d840      	bhi.n	80013c0 <patch_target_parse+0xe0>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <patch_target_parse+0x64>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001355 	.word	0x08001355
 8001348:	0800136f 	.word	0x0800136f
 800134c:	0800138b 	.word	0x0800138b
 8001350:	080013a7 	.word	0x080013a7

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001354:	7a7b      	ldrb	r3, [r7, #9]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4613      	mov	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4a7b      	ldr	r2, [pc, #492]	; (8001554 <patch_target_parse+0x274>)
 8001366:	4413      	add	r3, r2
 8001368:	3306      	adds	r3, #6
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e028      	b.n	80013c0 <patch_target_parse+0xe0>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 800136e:	7a7b      	ldrb	r3, [r7, #9]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	3318      	adds	r3, #24
 8001380:	4a74      	ldr	r2, [pc, #464]	; (8001554 <patch_target_parse+0x274>)
 8001382:	4413      	add	r3, r2
 8001384:	3302      	adds	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	e01a      	b.n	80013c0 <patch_target_parse+0xe0>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800138a:	7a7b      	ldrb	r3, [r7, #9]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	3328      	adds	r3, #40	; 0x28
 800139c:	4a6d      	ldr	r2, [pc, #436]	; (8001554 <patch_target_parse+0x274>)
 800139e:	4413      	add	r3, r2
 80013a0:	3306      	adds	r3, #6
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	e00c      	b.n	80013c0 <patch_target_parse+0xe0>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 80013a6:	7a7b      	ldrb	r3, [r7, #9]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4a68      	ldr	r2, [pc, #416]	; (8001558 <patch_target_parse+0x278>)
 80013b8:	4413      	add	r3, r2
 80013ba:	3304      	adds	r3, #4
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	bf00      	nop
			}
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	4a63      	ldr	r2, [pc, #396]	; (8001550 <patch_target_parse+0x270>)
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	3303      	adds	r3, #3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b3e      	cmp	r3, #62	; 0x3e
 80013d2:	d908      	bls.n	80013e6 <patch_target_parse+0x106>
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <patch_target_parse+0x270>)
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	3303      	adds	r3, #3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

			switch(input_hold2&3){     // lfo now , can add adsr later
 80013e6:	7a3b      	ldrb	r3, [r7, #8]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d841      	bhi.n	8001474 <patch_target_parse+0x194>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <patch_target_parse+0x118>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001409 	.word	0x08001409
 80013fc:	08001423 	.word	0x08001423
 8001400:	0800143f 	.word	0x0800143f
 8001404:	0800145b 	.word	0x0800145b

			case 0:   output_hold2=&LFO[input_hold2>>2].out[0];break;
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	4613      	mov	r3, r2
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <patch_target_parse+0x274>)
 800141a:	4413      	add	r3, r2
 800141c:	3306      	adds	r3, #6
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e028      	b.n	8001474 <patch_target_parse+0x194>
			case 1:   output_hold2=&LFO[input_hold2>>2].out_saw[0];break;
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4613      	mov	r3, r2
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3318      	adds	r3, #24
 8001434:	4a47      	ldr	r2, [pc, #284]	; (8001554 <patch_target_parse+0x274>)
 8001436:	4413      	add	r3, r2
 8001438:	3302      	adds	r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e01a      	b.n	8001474 <patch_target_parse+0x194>
			case 2:   output_hold2=&LFO[input_hold2>>2].out_tri[0];break;
 800143e:	7a3b      	ldrb	r3, [r7, #8]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	3328      	adds	r3, #40	; 0x28
 8001450:	4a40      	ldr	r2, [pc, #256]	; (8001554 <patch_target_parse+0x274>)
 8001452:	4413      	add	r3, r2
 8001454:	3306      	adds	r3, #6
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e00c      	b.n	8001474 <patch_target_parse+0x194>
			//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <patch_target_parse+0x278>)
 800146c:	4413      	add	r3, r2
 800146e:	3304      	adds	r3, #4
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	bf00      	nop
			}

			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	4a36      	ldr	r2, [pc, #216]	; (8001550 <patch_target_parse+0x270>)
 8001478:	212c      	movs	r1, #44	; 0x2c
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b29      	cmp	r3, #41	; 0x29
 8001484:	d101      	bne.n	800148a <patch_target_parse+0x1aa>
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <patch_target_parse+0x27c>)
 8001488:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <patch_target_parse+0x270>)
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b2a      	cmp	r3, #42	; 0x2a
 800149a:	d101      	bne.n	80014a0 <patch_target_parse+0x1c0>
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <patch_target_parse+0x280>)
 800149e:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 80014a0:	7dbb      	ldrb	r3, [r7, #22]
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <patch_target_parse+0x270>)
 80014a4:	212c      	movs	r1, #44	; 0x2c
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b2b      	cmp	r3, #43	; 0x2b
 80014b0:	d101      	bne.n	80014b6 <patch_target_parse+0x1d6>
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <patch_target_parse+0x284>)
 80014b4:	613b      	str	r3, [r7, #16]
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 80014b6:	7dbb      	ldrb	r3, [r7, #22]
 80014b8:	4a25      	ldr	r2, [pc, #148]	; (8001550 <patch_target_parse+0x270>)
 80014ba:	212c      	movs	r1, #44	; 0x2c
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	3303      	adds	r3, #3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b29      	cmp	r3, #41	; 0x29
 80014c8:	d101      	bne.n	80014ce <patch_target_parse+0x1ee>
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <patch_target_parse+0x27c>)
 80014cc:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 80014ce:	7dbb      	ldrb	r3, [r7, #22]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <patch_target_parse+0x270>)
 80014d2:	212c      	movs	r1, #44	; 0x2c
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	3303      	adds	r3, #3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b2a      	cmp	r3, #42	; 0x2a
 80014e0:	d101      	bne.n	80014e6 <patch_target_parse+0x206>
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <patch_target_parse+0x280>)
 80014e4:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==43) output_hold2=&adc_values[0];
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <patch_target_parse+0x270>)
 80014ea:	212c      	movs	r1, #44	; 0x2c
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	3303      	adds	r3, #3
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b2b      	cmp	r3, #43	; 0x2b
 80014f8:	d101      	bne.n	80014fe <patch_target_parse+0x21e>
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <patch_target_parse+0x284>)
 80014fc:	60fb      	str	r3, [r7, #12]



			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <patch_target_parse+0x270>)
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	3320      	adds	r3, #32
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	601a      	str	r2, [r3, #0]
			patch[counter].in2_ptr=output_hold2;
 8001510:	7dbb      	ldrb	r3, [r7, #22]
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <patch_target_parse+0x270>)
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	3324      	adds	r3, #36	; 0x24
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]


			if (patch[counter].target) {  // test if above zero
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <patch_target_parse+0x270>)
 8001526:	212c      	movs	r1, #44	; 0x2c
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 808f 	beq.w	8001656 <patch_target_parse+0x376>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001538:	7dbb      	ldrb	r3, [r7, #22]
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <patch_target_parse+0x270>)
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3301      	adds	r3, #1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	75fb      	strb	r3, [r7, #23]
 800154e:	e016      	b.n	800157e <patch_target_parse+0x29e>
 8001550:	2000dd84 	.word	0x2000dd84
 8001554:	2000cf1c 	.word	0x2000cf1c
 8001558:	2000d200 	.word	0x2000d200
 800155c:	20008e02 	.word	0x20008e02
 8001560:	20008e04 	.word	0x20008e04
 8001564:	20008e00 	.word	0x20008e00
					if (patch_skip_list[target_input]==1)  target_input++;
 8001568:	7afb      	ldrb	r3, [r7, #11]
 800156a:	4a41      	ldr	r2, [pc, #260]	; (8001670 <patch_target_parse+0x390>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <patch_target_parse+0x298>
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	3301      	adds	r3, #1
 8001576:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	3301      	adds	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	2b3e      	cmp	r3, #62	; 0x3e
 8001582:	d9f1      	bls.n	8001568 <patch_target_parse+0x288>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	2b3e      	cmp	r3, #62	; 0x3e
 8001588:	d901      	bls.n	800158e <patch_target_parse+0x2ae>
 800158a:	233e      	movs	r3, #62	; 0x3e
 800158c:	72fb      	strb	r3, [r7, #11]
				if (target_input!=35)  {     // make target index is not selected
 800158e:	7afb      	ldrb	r3, [r7, #11]
 8001590:	2b23      	cmp	r3, #35	; 0x23
 8001592:	d057      	beq.n	8001644 <patch_target_parse+0x364>
			patch[counter].target=target_input; // write back corrected value
 8001594:	7dbb      	ldrb	r3, [r7, #22]
 8001596:	4a37      	ldr	r2, [pc, #220]	; (8001674 <patch_target_parse+0x394>)
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	3301      	adds	r3, #1
 80015a2:	7afa      	ldrb	r2, [r7, #11]
 80015a4:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80015a6:	7dbb      	ldrb	r3, [r7, #22]
 80015a8:	4a32      	ldr	r2, [pc, #200]	; (8001674 <patch_target_parse+0x394>)
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	3302      	adds	r3, #2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	72bb      	strb	r3, [r7, #10]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80015b8:	7abb      	ldrb	r3, [r7, #10]
 80015ba:	4a2f      	ldr	r2, [pc, #188]	; (8001678 <patch_target_parse+0x398>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	7aba      	ldrb	r2, [r7, #10]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d903      	bls.n	80015cc <patch_target_parse+0x2ec>
			{	target_index=menu_vars_index_limit[target_index]; }
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	4a2c      	ldr	r2, [pc, #176]	; (8001678 <patch_target_parse+0x398>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	72bb      	strb	r3, [r7, #10]
			patch[counter].target_index=target_index;
 80015cc:	7dbb      	ldrb	r3, [r7, #22]
 80015ce:	4a29      	ldr	r2, [pc, #164]	; (8001674 <patch_target_parse+0x394>)
 80015d0:	212c      	movs	r1, #44	; 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3302      	adds	r3, #2
 80015da:	7aba      	ldrb	r2, [r7, #10]
 80015dc:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	4a26      	ldr	r2, [pc, #152]	; (800167c <patch_target_parse+0x39c>)
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	7aba      	ldrb	r2, [r7, #10]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fad4 	bl	8000b98 <menu_vars>
 80015f0:	6078      	str	r0, [r7, #4]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d02e      	beq.n	8001656 <patch_target_parse+0x376>
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	4a1e      	ldr	r2, [pc, #120]	; (8001674 <patch_target_parse+0x394>)
 80015fc:	212c      	movs	r1, #44	; 0x2c
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	4413      	add	r3, r2
 8001604:	331c      	adds	r3, #28
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 800160a:	4b1d      	ldr	r3, [pc, #116]	; (8001680 <patch_target_parse+0x3a0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <patch_target_parse+0x3a4>)
 8001614:	5c50      	ldrb	r0, [r2, r1]
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <patch_target_parse+0x394>)
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3329      	adds	r3, #41	; 0x29
 8001622:	4602      	mov	r2, r0
 8001624:	701a      	strb	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <patch_target_parse+0x3a0>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4619      	mov	r1, r3
 800162c:	7dbb      	ldrb	r3, [r7, #22]
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <patch_target_parse+0x3a8>)
 8001630:	5c50      	ldrb	r0, [r2, r1]
 8001632:	4a10      	ldr	r2, [pc, #64]	; (8001674 <patch_target_parse+0x394>)
 8001634:	212c      	movs	r1, #44	; 0x2c
 8001636:	fb01 f303 	mul.w	r3, r1, r3
 800163a:	4413      	add	r3, r2
 800163c:	3328      	adds	r3, #40	; 0x28
 800163e:	4602      	mov	r2, r0
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e008      	b.n	8001656 <patch_target_parse+0x376>
				}
				else patch[counter].target=0;  // write back 0 if failed
 8001644:	7dbb      	ldrb	r3, [r7, #22]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <patch_target_parse+0x394>)
 8001648:	212c      	movs	r1, #44	; 0x2c
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	3301      	adds	r3, #1
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	3301      	adds	r3, #1
 800165a:	75bb      	strb	r3, [r7, #22]
 800165c:	7dbb      	ldrb	r3, [r7, #22]
 800165e:	2b13      	cmp	r3, #19
 8001660:	f67f ae46 	bls.w	80012f0 <patch_target_parse+0x10>
			}
		}
	}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	0800e52c 	.word	0x0800e52c
 8001674:	2000dd84 	.word	0x2000dd84
 8001678:	0800e4ac 	.word	0x0800e4ac
 800167c:	20000000 	.word	0x20000000
 8001680:	20010d39 	.word	0x20010d39
 8001684:	20012c0c 	.word	0x20012c0c
 8001688:	0800e4ec 	.word	0x0800e4ec

0800168c <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 800168c:	b490      	push	{r4, r7}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001692:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <patch_target_replace+0x16c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	753b      	strb	r3, [r7, #20]
	    uint8_t counter;
	   uint8_t input_loop_position;
	   int32_t output_hold;
	   int32_t output_hold2;
	   uint8_t input_mix=0;
 800169c:	2300      	movs	r3, #0
 800169e:	74fb      	strb	r3, [r7, #19]

	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80016a0:	2300      	movs	r3, #0
 80016a2:	75fb      	strb	r3, [r7, #23]
 80016a4:	e09d      	b.n	80017e2 <patch_target_replace+0x156>



		    if (patch[counter].target) {         // check first for enable
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
 80016a8:	4a54      	ldr	r2, [pc, #336]	; (80017fc <patch_target_replace+0x170>)
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3301      	adds	r3, #1
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 8090 	beq.w	80017dc <patch_target_replace+0x150>

			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	4a4f      	ldr	r2, [pc, #316]	; (80017fc <patch_target_replace+0x170>)
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	fb01 f303 	mul.w	r3, r1, r3
 80016c6:	4413      	add	r3, r2
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b28      	cmp	r3, #40	; 0x28
 80016cc:	d809      	bhi.n	80016e2 <patch_target_replace+0x56>
 80016ce:	7dfb      	ldrb	r3, [r7, #23]
 80016d0:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <patch_target_replace+0x170>)
 80016d2:	212c      	movs	r1, #44	; 0x2c
 80016d4:	fb01 f303 	mul.w	r3, r1, r3
 80016d8:	4413      	add	r3, r2
 80016da:	3303      	adds	r3, #3
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b28      	cmp	r3, #40	; 0x28
 80016e0:	d902      	bls.n	80016e8 <patch_target_replace+0x5c>
 80016e2:	2300      	movs	r3, #0
 80016e4:	75bb      	strb	r3, [r7, #22]
 80016e6:	e001      	b.n	80016ec <patch_target_replace+0x60>
 80016e8:	7d3b      	ldrb	r3, [r7, #20]
 80016ea:	75bb      	strb	r3, [r7, #22]


				input_mix=patch[counter].in_mix;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	4a43      	ldr	r2, [pc, #268]	; (80017fc <patch_target_replace+0x170>)
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	74fb      	strb	r3, [r7, #19]
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <patch_target_replace+0x170>)
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	3320      	adds	r3, #32
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here
 8001718:	7dfb      	ldrb	r3, [r7, #23]
 800171a:	4a38      	ldr	r2, [pc, #224]	; (80017fc <patch_target_replace+0x170>)
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3324      	adds	r3, #36	; 0x24
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	7dbb      	ldrb	r3, [r7, #22]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	60bb      	str	r3, [r7, #8]

				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 8001732:	7cfb      	ldrb	r3, [r7, #19]
 8001734:	f1c3 0210 	rsb	r2, r3, #16
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	fb02 f303 	mul.w	r3, r2, r3
 800173e:	60fb      	str	r3, [r7, #12]
				output_hold2	=output_hold2*input_mix;
 8001740:	7cfa      	ldrb	r2, [r7, #19]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	60bb      	str	r3, [r7, #8]



				patch[counter].output[loop_position]	=((output_hold+output_hold2)>>4);
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	1119      	asrs	r1, r3, #4
 8001752:	7dfa      	ldrb	r2, [r7, #23]
 8001754:	7d3b      	ldrb	r3, [r7, #20]
 8001756:	b28c      	uxth	r4, r1
 8001758:	4928      	ldr	r1, [pc, #160]	; (80017fc <patch_target_replace+0x170>)
 800175a:	2016      	movs	r0, #22
 800175c:	fb00 f202 	mul.w	r2, r0, r2
 8001760:	4413      	add	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	440b      	add	r3, r1
 8001766:	4622      	mov	r2, r4
 8001768:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <patch_target_replace+0x170>)
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	331c      	adds	r3, #28
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	607b      	str	r3, [r7, #4]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 800177c:	7dfa      	ldrb	r2, [r7, #23]
 800177e:	7d3b      	ldrb	r3, [r7, #20]
 8001780:	491e      	ldr	r1, [pc, #120]	; (80017fc <patch_target_replace+0x170>)
 8001782:	2016      	movs	r0, #22
 8001784:	fb00 f202 	mul.w	r2, r0, r2
 8001788:	4413      	add	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	440b      	add	r3, r1
 800178e:	88db      	ldrh	r3, [r3, #6]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	807b      	strh	r3, [r7, #2]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	707b      	strb	r3, [r7, #1]

			    uint8_t  var_replaced =  lfo_out_temp >>patch[counter].divider;   // grab lfo out *    data to be modfied
 8001798:	887b      	ldrh	r3, [r7, #2]
 800179a:	7dfa      	ldrb	r2, [r7, #23]
 800179c:	4917      	ldr	r1, [pc, #92]	; (80017fc <patch_target_replace+0x170>)
 800179e:	202c      	movs	r0, #44	; 0x2c
 80017a0:	fb00 f202 	mul.w	r2, r0, r2
 80017a4:	440a      	add	r2, r1
 80017a6:	3229      	adds	r2, #41	; 0x29
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	4113      	asrs	r3, r2
 80017ac:	757b      	strb	r3, [r7, #21]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <patch_target_replace+0x170>)
 80017b2:	212c      	movs	r1, #44	; 0x2c
 80017b4:	fb01 f303 	mul.w	r3, r1, r3
 80017b8:	4413      	add	r3, r2
 80017ba:	3328      	adds	r3, #40	; 0x28
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	7d7a      	ldrb	r2, [r7, #21]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d908      	bls.n	80017d6 <patch_target_replace+0x14a>
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <patch_target_replace+0x170>)
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3328      	adds	r3, #40	; 0x28
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	757b      	strb	r3, [r7, #21]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7d7a      	ldrb	r2, [r7, #21]
 80017da:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	3301      	adds	r3, #1
 80017e0:	75fb      	strb	r3, [r7, #23]
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
 80017e4:	2b13      	cmp	r3, #19
 80017e6:	f67f af5e 	bls.w	80016a6 <patch_target_replace+0x1a>
		    }
	    }
    }
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc90      	pop	{r4, r7}
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000ed10 	.word	0x2000ed10
 80017fc:	2000dd84 	.word	0x2000dd84

08001800 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d118      	bne.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800181a:	4413      	add	r3, r2
 800181c:	2236      	movs	r2, #54	; 0x36
 800181e:	4619      	mov	r1, r3
 8001820:	482c      	ldr	r0, [pc, #176]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001822:	f009 f90d 	bl	800aa40 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 8001826:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800182e:	d206      	bcs.n	800183e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	3336      	adds	r3, #54	; 0x36
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800183a:	801a      	strh	r2, [r3, #0]
 800183c:	e002      	b.n	8001844 <HAL_TIM_PeriodElapsedCallback+0x44>
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001840:	2200      	movs	r2, #0
 8001842:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d137      	bne.n	80018be <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 800184e:	4b23      	ldr	r3, [pc, #140]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001858:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001864:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001868:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800186a:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 800186c:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	3301      	adds	r3, #1
 8001876:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001878:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 800187e:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29b      	uxth	r3, r3
 8001886:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800188a:	4293      	cmp	r3, r2
 800188c:	d906      	bls.n	800189c <HAL_TIM_PeriodElapsedCallback+0x9c>
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001890:	2202      	movs	r2, #2
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001896:	2200      	movs	r2, #0
 8001898:	801a      	strh	r2, [r3, #0]
 800189a:	e006      	b.n	80018aa <HAL_TIM_PeriodElapsedCallback+0xaa>
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3301      	adds	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018a8:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018bc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40014400 	.word	0x40014400
 80018cc:	20011f44 	.word	0x20011f44
 80018d0:	20010f44 	.word	0x20010f44
 80018d4:	20012da0 	.word	0x20012da0
 80018d8:	40000400 	.word	0x40000400
 80018dc:	2000cf18 	.word	0x2000cf18
 80018e0:	2000a920 	.word	0x2000a920
 80018e4:	2000991c 	.word	0x2000991c
 80018e8:	2000a922 	.word	0x2000a922
 80018ec:	2000a924 	.word	0x2000a924
 80018f0:	20008e0a 	.word	0x20008e0a

080018f4 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <analoginputloopb+0xd0>)
 80018fa:	889b      	ldrh	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	b29b      	uxth	r3, r3
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <analoginputloopb+0xd4>)
 8001904:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <analoginputloopb+0xd0>)
 8001908:	2200      	movs	r2, #0
 800190a:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <analoginputloopb+0xd8>)
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <analoginputloopb+0xd0>)
 8001912:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 8001914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800191e:	337f      	adds	r3, #127	; 0x7f
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <analoginputloopb+0xdc>)
 8001926:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001928:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <analoginputloopb+0xe0>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001930:	337f      	adds	r3, #127	; 0x7f
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b28      	ldr	r3, [pc, #160]	; (80019d8 <analoginputloopb+0xe4>)
 8001938:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <analoginputloopb+0xdc>)
 800193c:	881a      	ldrh	r2, [r3, #0]
 800193e:	4b27      	ldr	r3, [pc, #156]	; (80019dc <analoginputloopb+0xe8>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d908      	bls.n	8001958 <analoginputloopb+0x64>
 8001946:	4b26      	ldr	r3, [pc, #152]	; (80019e0 <analoginputloopb+0xec>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29b      	uxth	r3, r3
 8001952:	b21a      	sxth	r2, r3
 8001954:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <analoginputloopb+0xec>)
 8001956:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <analoginputloopb+0xdc>)
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <analoginputloopb+0xe8>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d208      	bcs.n	8001976 <analoginputloopb+0x82>
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <analoginputloopb+0xec>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	b29b      	uxth	r3, r3
 800196c:	3301      	adds	r3, #1
 800196e:	b29b      	uxth	r3, r3
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <analoginputloopb+0xec>)
 8001974:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001976:	4b18      	ldr	r3, [pc, #96]	; (80019d8 <analoginputloopb+0xe4>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	43db      	mvns	r3, r3
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b13      	ldr	r3, [pc, #76]	; (80019cc <analoginputloopb+0xd8>)
 8001980:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <analoginputloopb+0xec>)
 8001984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001988:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 800198c:	4293      	cmp	r3, r2
 800198e:	dd02      	ble.n	8001996 <analoginputloopb+0xa2>
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <analoginputloopb+0xec>)
 8001992:	2200      	movs	r2, #0
 8001994:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <analoginputloopb+0xec>)
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da03      	bge.n	80019a8 <analoginputloopb+0xb4>
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <analoginputloopb+0xec>)
 80019a2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80019a6:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <analoginputloopb+0xdc>)
 80019aa:	881a      	ldrh	r2, [r3, #0]
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <analoginputloopb+0xe8>)
 80019ae:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <analoginputloopb+0xe4>)
 80019b2:	881a      	ldrh	r2, [r3, #0]
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <analoginputloopb+0xf0>)
 80019b6:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	2000c168 	.word	0x2000c168
 80019c8:	20009912 	.word	0x20009912
 80019cc:	2000c152 	.word	0x2000c152
 80019d0:	2000c14a 	.word	0x2000c14a
 80019d4:	40000800 	.word	0x40000800
 80019d8:	2000c14e 	.word	0x2000c14e
 80019dc:	2000c14c 	.word	0x2000c14c
 80019e0:	2000c154 	.word	0x2000c154
 80019e4:	2000c150 	.word	0x2000c150

080019e8 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80019ec:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <note_reset+0xc4>)
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	71da      	strb	r2, [r3, #7]
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <note_reset+0xc4>)
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	755a      	strb	r2, [r3, #21]
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <note_reset+0xc4>)
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <note_reset+0xc4>)
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <note_reset+0xc4>)
 8001a0a:	22ff      	movs	r2, #255	; 0xff
 8001a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <note_reset+0xc4>)
 8001a12:	22ff      	movs	r2, #255	; 0xff
 8001a14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <note_reset+0xc4>)
 8001a1a:	22ff      	movs	r2, #255	; 0xff
 8001a1c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 8001a20:	4b22      	ldr	r3, [pc, #136]	; (8001aac <note_reset+0xc4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	721a      	strb	r2, [r3, #8]
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <note_reset+0xc4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	759a      	strb	r2, [r3, #22]
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <note_reset+0xc4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <note_reset+0xc4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <note_reset+0xc4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <note_reset+0xc4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <note_reset+0xc4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	filter[0].cutoff_1=0;filter[1].cutoff_1=0;filter[2].cutoff_1=0;filter[4].cutoff_1=0;
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <note_reset+0xc8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <note_reset+0xc8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	721a      	strb	r2, [r3, #8]
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <note_reset+0xc8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	741a      	strb	r2, [r3, #16]
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <note_reset+0xc8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2020 	strb.w	r2, [r3, #32]
	filter[0].resonance=0;filter[1].resonance=0;filter[2].resonance=0;filter[3].resonance=0;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <note_reset+0xc8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	709a      	strb	r2, [r3, #2]
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <note_reset+0xc8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	729a      	strb	r2, [r3, #10]
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <note_reset+0xc8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	749a      	strb	r2, [r3, #18]
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <note_reset+0xc8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	769a      	strb	r2, [r3, #26]
	note[0].position=1;note[1].position=1;note[2].position=1;note[3].position=1;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <note_reset+0xc4>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	711a      	strb	r2, [r3, #4]
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <note_reset+0xc4>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	749a      	strb	r2, [r3, #18]
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <note_reset+0xc4>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2020 	strb.w	r2, [r3, #32]
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <note_reset+0xc4>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	20008e10 	.word	0x20008e10
 8001ab0:	20008e9c 	.word	0x20008e9c

08001ab4 <main_initial>:

void main_initial(void){
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	b0dd      	sub	sp, #372	; 0x174
 8001ab8:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001aba:	4ba7      	ldr	r3, [pc, #668]	; (8001d58 <main_initial+0x2a4>)
 8001abc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154



	HAL_DMA_Init(&hdma_spi2_tx);
 8001ac0:	48a6      	ldr	r0, [pc, #664]	; (8001d5c <main_initial+0x2a8>)
 8001ac2:	f006 faa7 	bl	8008014 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 8001ac6:	48a6      	ldr	r0, [pc, #664]	; (8001d60 <main_initial+0x2ac>)
 8001ac8:	f006 faa4 	bl	8008014 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001acc:	48a5      	ldr	r0, [pc, #660]	; (8001d64 <main_initial+0x2b0>)
 8001ace:	f006 faa1 	bl	8008014 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001ad2:	48a5      	ldr	r0, [pc, #660]	; (8001d68 <main_initial+0x2b4>)
 8001ad4:	f008 fc4c 	bl	800a370 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001ad8:	48a4      	ldr	r0, [pc, #656]	; (8001d6c <main_initial+0x2b8>)
 8001ada:	f008 fc49 	bl	800a370 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001ade:	48a4      	ldr	r0, [pc, #656]	; (8001d70 <main_initial+0x2bc>)
 8001ae0:	f009 fc98 	bl	800b414 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001ae4:	4ba3      	ldr	r3, [pc, #652]	; (8001d74 <main_initial+0x2c0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001aea:	48a3      	ldr	r0, [pc, #652]	; (8001d78 <main_initial+0x2c4>)
 8001aec:	f009 fc38 	bl	800b360 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001af0:	48a2      	ldr	r0, [pc, #648]	; (8001d7c <main_initial+0x2c8>)
 8001af2:	f009 fc35 	bl	800b360 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001af6:	2100      	movs	r1, #0
 8001af8:	489d      	ldr	r0, [pc, #628]	; (8001d70 <main_initial+0x2bc>)
 8001afa:	f009 fdcf 	bl	800b69c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001afe:	2104      	movs	r1, #4
 8001b00:	489b      	ldr	r0, [pc, #620]	; (8001d70 <main_initial+0x2bc>)
 8001b02:	f009 fdcb 	bl	800b69c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b0a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001b10:	489b      	ldr	r0, [pc, #620]	; (8001d80 <main_initial+0x2cc>)
 8001b12:	f005 f941 	bl	8006d98 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001b16:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001b1a:	499a      	ldr	r1, [pc, #616]	; (8001d84 <main_initial+0x2d0>)
 8001b1c:	4898      	ldr	r0, [pc, #608]	; (8001d80 <main_initial+0x2cc>)
 8001b1e:	f005 fa7b 	bl	8007018 <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 8001b22:	4899      	ldr	r0, [pc, #612]	; (8001d88 <main_initial+0x2d4>)
 8001b24:	f004 fcf6 	bl	8006514 <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001b28:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b2c:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001b30:	4b96      	ldr	r3, [pc, #600]	; (8001d8c <main_initial+0x2d8>)
 8001b32:	4634      	mov	r4, r6
 8001b34:	461d      	mov	r5, r3
 8001b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3a:	682b      	ldr	r3, [r5, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	8022      	strh	r2, [r4, #0]
 8001b40:	3402      	adds	r4, #2
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	7023      	strb	r3, [r4, #0]
 8001b46:	f106 0313 	add.w	r3, r6, #19
 8001b4a:	22f1      	movs	r2, #241	; 0xf1
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f00b f9a8 	bl	800cea4 <memset>


	HAL_Delay(5);
 8001b54:	2005      	movs	r0, #5
 8001b56:	f005 f8b7 	bl	8006cc8 <HAL_Delay>



		//uint16_t sample_size=sizeof(RAM);

		uint16_t sample_size=32678;
 8001b5a:	f647 73a6 	movw	r3, #32678	; 0x7fa6
 8001b5e:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152



		uint8_t* ram_ptr=&RAM[0];
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <main_initial+0x2dc>)
 8001b64:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 8001b68:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001b72:	2002      	movs	r0, #2
 8001b74:	f002 ffda 	bl	8004b2c <sample_save>
				send_spi1[0]=sampler_ram_clear_test(2);  // test written ok
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f002 ff7f 	bl	8004a7c <sampler_ram_clear_test>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b86:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b8a:	701a      	strb	r2, [r3, #0]



	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b8c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b90:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	223c      	movs	r2, #60	; 0x3c
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f00b f980 	bl	800cea4 <memset>
	uint16_t mem_count2=0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
	uint16_t mem_counter=0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 8001bb0:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <main_initial+0x2e0>)
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 8001bb6:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <main_initial+0x2e0>)
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <main_initial+0x2e0>)
 8001bbe:	2280      	movs	r2, #128	; 0x80
 8001bc0:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 8001bc2:	4b74      	ldr	r3, [pc, #464]	; (8001d94 <main_initial+0x2e0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2110      	movs	r1, #16
 8001bcc:	4872      	ldr	r0, [pc, #456]	; (8001d98 <main_initial+0x2e4>)
 8001bce:	f006 ff85 	bl	8008adc <HAL_GPIO_WritePin>
 8001bd2:	f240 4304 	movw	r3, #1028	; 0x404
 8001bd6:	4a6f      	ldr	r2, [pc, #444]	; (8001d94 <main_initial+0x2e0>)
 8001bd8:	496e      	ldr	r1, [pc, #440]	; (8001d94 <main_initial+0x2e0>)
 8001bda:	4864      	ldr	r0, [pc, #400]	; (8001d6c <main_initial+0x2b8>)
 8001bdc:	f008 ffe6 	bl	800abac <HAL_SPI_TransmitReceive_DMA>
 8001be0:	2200      	movs	r2, #0
 8001be2:	2110      	movs	r1, #16
 8001be4:	486c      	ldr	r0, [pc, #432]	; (8001d98 <main_initial+0x2e4>)
 8001be6:	f006 ff79 	bl	8008adc <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <main_initial+0x2e8>)
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	21a0      	movs	r1, #160	; 0xa0
 8001c00:	4861      	ldr	r0, [pc, #388]	; (8001d88 <main_initial+0x2d4>)
 8001c02:	f007 f9db 	bl	8008fbc <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001c06:	4a66      	ldr	r2, [pc, #408]	; (8001da0 <main_initial+0x2ec>)
 8001c08:	4b64      	ldr	r3, [pc, #400]	; (8001d9c <main_initial+0x2e8>)
 8001c0a:	4614      	mov	r4, r2
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c16:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c1a:	c407      	stmia	r4!, {r0, r1, r2}
 8001c1c:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001c1e:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <main_initial+0x2f0>)
 8001c20:	22a0      	movs	r2, #160	; 0xa0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4860      	ldr	r0, [pc, #384]	; (8001da8 <main_initial+0x2f4>)
 8001c26:	f00b f92f 	bl	800ce88 <memcpy>
	    memcpy(&sampler,potSource+476,11 );
 8001c2a:	4b60      	ldr	r3, [pc, #384]	; (8001dac <main_initial+0x2f8>)
 8001c2c:	220b      	movs	r2, #11
 8001c2e:	4619      	mov	r1, r3
 8001c30:	485f      	ldr	r0, [pc, #380]	; (8001db0 <main_initial+0x2fc>)
 8001c32:	f00b f929 	bl	800ce88 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001c3c:	e07f      	b.n	8001d3e <main_initial+0x28a>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001c3e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c42:	4613      	mov	r3, r2
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <main_initial+0x300>)
 8001c4c:	1898      	adds	r0, r3, r2
 8001c4e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	332e      	adds	r3, #46	; 0x2e
 8001c5c:	4a4f      	ldr	r2, [pc, #316]	; (8001d9c <main_initial+0x2e8>)
 8001c5e:	4413      	add	r3, r2
 8001c60:	2206      	movs	r2, #6
 8001c62:	4619      	mov	r1, r3
 8001c64:	f00b f910 	bl	800ce88 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001c68:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001c6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001c70:	fb02 f303 	mul.w	r3, r2, r3
 8001c74:	4a50      	ldr	r2, [pc, #320]	; (8001db8 <main_initial+0x304>)
 8001c76:	1898      	adds	r0, r3, r2
 8001c78:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	336a      	adds	r3, #106	; 0x6a
 8001c84:	4a45      	ldr	r2, [pc, #276]	; (8001d9c <main_initial+0x2e8>)
 8001c86:	4413      	add	r3, r2
 8001c88:	2205      	movs	r2, #5
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f00b f8fc 	bl	800ce88 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001c90:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001c94:	222c      	movs	r2, #44	; 0x2c
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <main_initial+0x308>)
 8001c9c:	1898      	adds	r0, r3, r2
 8001c9e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001cae:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <main_initial+0x2e8>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	2206      	movs	r2, #6
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f00b f8e7 	bl	800ce88 <memcpy>

			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001cba:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <main_initial+0x30c>)
 8001cc8:	1898      	adds	r0, r3, r2
 8001cca:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cce:	4613      	mov	r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <main_initial+0x2e8>)
 8001cdc:	4413      	add	r3, r2
 8001cde:	2206      	movs	r2, #6
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f00b f8d1 	bl	800ce88 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001ce6:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cea:	4613      	mov	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <main_initial+0x310>)
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cfa:	0092      	lsls	r2, r2, #2
 8001cfc:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001d00:	4926      	ldr	r1, [pc, #152]	; (8001d9c <main_initial+0x2e8>)
 8001d02:	440a      	add	r2, r1
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	601a      	str	r2, [r3, #0]
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 8001d08:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d0c:	330a      	adds	r3, #10
 8001d0e:	222c      	movs	r2, #44	; 0x2c
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	4a29      	ldr	r2, [pc, #164]	; (8001dbc <main_initial+0x308>)
 8001d16:	1898      	adds	r0, r3, r2
 8001d18:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d28:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <main_initial+0x2e8>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	2206      	movs	r2, #6
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f00b f8aa 	bl	800ce88 <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001d34:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001d3e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d42:	2b09      	cmp	r3, #9
 8001d44:	f67f af7b 	bls.w	8001c3e <main_initial+0x18a>


	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <main_initial+0x314>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	801a      	strh	r2, [r3, #0]
 8001d4e:	e093      	b.n	8001e78 <main_initial+0x3c4>

		for 	(n=0;n<18;n++){					// this is ok
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <main_initial+0x318>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]
 8001d56:	e085      	b.n	8001e64 <main_initial+0x3b0>
 8001d58:	0800d2f0 	.word	0x0800d2f0
 8001d5c:	20012eb8 	.word	0x20012eb8
 8001d60:	20012df8 	.word	0x20012df8
 8001d64:	20012e58 	.word	0x20012e58
 8001d68:	20012da0 	.word	0x20012da0
 8001d6c:	20012d48 	.word	0x20012d48
 8001d70:	20012f60 	.word	0x20012f60
 8001d74:	40000400 	.word	0x40000400
 8001d78:	20012f18 	.word	0x20012f18
 8001d7c:	20012fa8 	.word	0x20012fa8
 8001d80:	20012c4c 	.word	0x20012c4c
 8001d84:	2000a92c 	.word	0x2000a92c
 8001d88:	20012cf4 	.word	0x20012cf4
 8001d8c:	0800d508 	.word	0x0800d508
 8001d90:	200001ac 	.word	0x200001ac
 8001d94:	200123e8 	.word	0x200123e8
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	20009648 	.word	0x20009648
 8001da0:	2000dd54 	.word	0x2000dd54
 8001da4:	200096e4 	.word	0x200096e4
 8001da8:	20008e10 	.word	0x20008e10
 8001dac:	20009824 	.word	0x20009824
 8001db0:	20008ebc 	.word	0x20008ebc
 8001db4:	2000cf1c 	.word	0x2000cf1c
 8001db8:	2000d2c8 	.word	0x2000d2c8
 8001dbc:	2000dd84 	.word	0x2000dd84
 8001dc0:	2000d1c4 	.word	0x2000d1c4
 8001dc4:	2000d200 	.word	0x2000d200
 8001dc8:	2000991a 	.word	0x2000991a
 8001dcc:	20009914 	.word	0x20009914
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001dd0:	4ba4      	ldr	r3, [pc, #656]	; (8002064 <main_initial+0x5b0>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d114      	bne.n	8001e02 <main_initial+0x34e>
 8001dd8:	4ba3      	ldr	r3, [pc, #652]	; (8002068 <main_initial+0x5b4>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4ba0      	ldr	r3, [pc, #640]	; (8002068 <main_initial+0x5b4>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	460b      	mov	r3, r1
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	4b9b      	ldr	r3, [pc, #620]	; (8002064 <main_initial+0x5b0>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	440b      	add	r3, r1
 8001dfa:	3a80      	subs	r2, #128	; 0x80
 8001dfc:	b2d1      	uxtb	r1, r2
 8001dfe:	4a9b      	ldr	r2, [pc, #620]	; (800206c <main_initial+0x5b8>)
 8001e00:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001e02:	4b98      	ldr	r3, [pc, #608]	; (8002064 <main_initial+0x5b0>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d114      	bne.n	8001e34 <main_initial+0x380>
 8001e0a:	4b97      	ldr	r3, [pc, #604]	; (8002068 <main_initial+0x5b4>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3310      	adds	r3, #16
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b94      	ldr	r3, [pc, #592]	; (8002068 <main_initial+0x5b4>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	4b8f      	ldr	r3, [pc, #572]	; (8002064 <main_initial+0x5b0>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	00d2      	lsls	r2, r2, #3
 8001e2e:	b2d1      	uxtb	r1, r2
 8001e30:	4a8e      	ldr	r2, [pc, #568]	; (800206c <main_initial+0x5b8>)
 8001e32:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001e34:	4b8b      	ldr	r3, [pc, #556]	; (8002064 <main_initial+0x5b0>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d90d      	bls.n	8001e58 <main_initial+0x3a4>
 8001e3c:	4b8a      	ldr	r3, [pc, #552]	; (8002068 <main_initial+0x5b4>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b85      	ldr	r3, [pc, #532]	; (8002064 <main_initial+0x5b0>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a86      	ldr	r2, [pc, #536]	; (800206c <main_initial+0x5b8>)
 8001e54:	21ff      	movs	r1, #255	; 0xff
 8001e56:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001e58:	4b82      	ldr	r3, [pc, #520]	; (8002064 <main_initial+0x5b0>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b80      	ldr	r3, [pc, #512]	; (8002064 <main_initial+0x5b0>)
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <main_initial+0x5b0>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d9b1      	bls.n	8001dd0 <main_initial+0x31c>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001e6c:	4b7e      	ldr	r3, [pc, #504]	; (8002068 <main_initial+0x5b4>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <main_initial+0x5b4>)
 8001e76:	801a      	strh	r2, [r3, #0]
 8001e78:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <main_initial+0x5b4>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7e:	f67f af67 	bls.w	8001d50 <main_initial+0x29c>

		}

		}
	seq.pos=0;
 8001e82:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <main_initial+0x5bc>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <main_initial+0x5b4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	801a      	strh	r2, [r3, #0]
 8001e94:	e01a      	b.n	8001ecc <main_initial+0x418>
	  		tempo_hold=i;
 8001e96:	4b74      	ldr	r3, [pc, #464]	; (8002068 <main_initial+0x5b4>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	4a73      	ldr	r2, [pc, #460]	; (8002074 <main_initial+0x5c0>)
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	  	tempo_lut[i]=tempo_hold;
 8001eae:	4b6e      	ldr	r3, [pc, #440]	; (8002068 <main_initial+0x5b4>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001eb8:	b299      	uxth	r1, r3
 8001eba:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <main_initial+0x5c4>)
 8001ebc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001ec0:	4b69      	ldr	r3, [pc, #420]	; (8002068 <main_initial+0x5b4>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	4b67      	ldr	r3, [pc, #412]	; (8002068 <main_initial+0x5b4>)
 8001eca:	801a      	strh	r2, [r3, #0]
 8001ecc:	4b66      	ldr	r3, [pc, #408]	; (8002068 <main_initial+0x5b4>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	2bff      	cmp	r3, #255	; 0xff
 8001ed2:	d9e0      	bls.n	8001e96 <main_initial+0x3e2>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001ed4:	4b69      	ldr	r3, [pc, #420]	; (800207c <main_initial+0x5c8>)
 8001ed6:	2218      	movs	r2, #24
 8001ed8:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <main_initial+0x5b4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	e00b      	b.n	8001efa <main_initial+0x446>
			spell[i]=67;
 8001ee2:	4b61      	ldr	r3, [pc, #388]	; (8002068 <main_initial+0x5b4>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b65      	ldr	r3, [pc, #404]	; (8002080 <main_initial+0x5cc>)
 8001eea:	2143      	movs	r1, #67	; 0x43
 8001eec:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001eee:	4b5e      	ldr	r3, [pc, #376]	; (8002068 <main_initial+0x5b4>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <main_initial+0x5b4>)
 8001ef8:	801a      	strh	r2, [r3, #0]
 8001efa:	4b5b      	ldr	r3, [pc, #364]	; (8002068 <main_initial+0x5b4>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f02:	d3ee      	bcc.n	8001ee2 <main_initial+0x42e>

		}

		gfx_clear();
 8001f04:	f002 fa0c 	bl	8004320 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f0e:	e006      	b.n	8001f1e <main_initial+0x46a>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001f10:	f7ff f8f8 	bl	8001104 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001f14:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f1e:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f22:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001f26:	d3f3      	bcc.n	8001f10 <main_initial+0x45c>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <main_initial+0x5b4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	e005      	b.n	8001f3c <main_initial+0x488>
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <main_initial+0x5b4>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b4b      	ldr	r3, [pc, #300]	; (8002068 <main_initial+0x5b4>)
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <main_initial+0x5b4>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f44:	d3f4      	bcc.n	8001f30 <main_initial+0x47c>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001f46:	4b48      	ldr	r3, [pc, #288]	; (8002068 <main_initial+0x5b4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	e005      	b.n	8001f5a <main_initial+0x4a6>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <main_initial+0x5b4>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <main_initial+0x5b4>)
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <main_initial+0x5b4>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d3f4      	bcc.n	8001f4e <main_initial+0x49a>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f6a:	e00c      	b.n	8001f86 <main_initial+0x4d2>
 8001f6c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <main_initial+0x5d0>)
 8001f78:	2140      	movs	r1, #64	; 0x40
 8001f7a:	5499      	strb	r1, [r3, r2]
 8001f7c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f80:	3301      	adds	r3, #1
 8001f82:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f86:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8e:	d3ed      	bcc.n	8001f6c <main_initial+0x4b8>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001f90:	483c      	ldr	r0, [pc, #240]	; (8002084 <main_initial+0x5d0>)
 8001f92:	f7fe f921 	bl	80001d8 <strlen>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b3b      	ldr	r3, [pc, #236]	; (8002088 <main_initial+0x5d4>)
 8001f9c:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <main_initial+0x5d8>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <main_initial+0x5d8>)
 8001fa8:	801a      	strh	r2, [r3, #0]
			display_clear ();
 8001faa:	f002 f9fb 	bl	80043a4 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001fb4:	e00e      	b.n	8001fd4 <main_initial+0x520>
 8001fb6:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001fba:	4a35      	ldr	r2, [pc, #212]	; (8002090 <main_initial+0x5dc>)
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	; (8002084 <main_initial+0x5d0>)
 8001fc6:	2130      	movs	r1, #48	; 0x30
 8001fc8:	54d1      	strb	r1, [r2, r3]
 8001fca:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001fd4:	4b2d      	ldr	r3, [pc, #180]	; (800208c <main_initial+0x5d8>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d3ea      	bcc.n	8001fb6 <main_initial+0x502>
			note_reset();
 8001fe0:	f7ff fd02 	bl	80019e8 <note_reset>


			uint8_t find_set=0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			uint8_t var_hold=0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001ff6:	e025      	b.n	8002044 <main_initial+0x590>
			   var_hold=menu_vars_limiter[pars_counter];
 8001ff8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001ffc:	4a25      	ldr	r2, [pc, #148]	; (8002094 <main_initial+0x5e0>)
 8001ffe:	5cd3      	ldrb	r3, [r2, r3]
 8002000:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
			    find_set=0;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			   while ( var_hold >>= 1) {
 800200a:	e004      	b.n	8002016 <main_initial+0x562>
			       find_set++;
 800200c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002010:	3301      	adds	r3, #1
 8002012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			   while ( var_hold >>= 1) {
 8002016:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 800201a:	085b      	lsrs	r3, r3, #1
 800201c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8002020:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f1      	bne.n	800200c <main_initial+0x558>
			    }

			    LFO_vars_divider[pars_counter]= 7-find_set;    // high set bit , use it to shift left from 255
 8002028:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800202c:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 8002030:	f1c2 0207 	rsb	r2, r2, #7
 8002034:	b2d1      	uxtb	r1, r2
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <main_initial+0x5e4>)
 8002038:	54d1      	strb	r1, [r2, r3]
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 800203a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800203e:	3301      	adds	r3, #1
 8002040:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8002044:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8002048:	2b3e      	cmp	r3, #62	; 0x3e
 800204a:	d9d5      	bls.n	8001ff8 <main_initial+0x544>
			}

			menuSelect=0;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <main_initial+0x5e8>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <main_initial+0x5ec>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8002058:	bf00      	nop
 800205a:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800205e:	46bd      	mov	sp, r7
 8002060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002062:	bf00      	nop
 8002064:	20009914 	.word	0x20009914
 8002068:	2000991a 	.word	0x2000991a
 800206c:	2000c680 	.word	0x2000c680
 8002070:	2000dd54 	.word	0x2000dd54
 8002074:	0020b584 	.word	0x0020b584
 8002078:	2000c27c 	.word	0x2000c27c
 800207c:	200093dc 	.word	0x200093dc
 8002080:	20008cbc 	.word	0x20008cbc
 8002084:	20008f7c 	.word	0x20008f7c
 8002088:	2000ed0a 	.word	0x2000ed0a
 800208c:	2000e0fa 	.word	0x2000e0fa
 8002090:	2000e0fc 	.word	0x2000e0fc
 8002094:	0800e4ec 	.word	0x0800e4ec
 8002098:	20012c0c 	.word	0x20012c0c
 800209c:	20009912 	.word	0x20009912
 80020a0:	20009913 	.word	0x20009913

080020a4 <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 80020ae:	2300      	movs	r3, #0
 80020b0:	71fb      	strb	r3, [r7, #7]
 80020b2:	e02b      	b.n	800210c <patch_lists+0x68>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <patch_lists+0x7c>)
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d11d      	bne.n	8002106 <patch_lists+0x62>
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	4a14      	ldr	r2, [pc, #80]	; (8002120 <patch_lists+0x7c>)
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3302      	adds	r3, #2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	3230      	adds	r2, #48	; 0x30
 80020e4:	b2d1      	uxtb	r1, r2
 80020e6:	4a0f      	ldr	r2, [pc, #60]	; (8002124 <patch_lists+0x80>)
 80020e8:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 80020ea:	79fa      	ldrb	r2, [r7, #7]
 80020ec:	79bb      	ldrb	r3, [r7, #6]
 80020ee:	490c      	ldr	r1, [pc, #48]	; (8002120 <patch_lists+0x7c>)
 80020f0:	202c      	movs	r0, #44	; 0x2c
 80020f2:	fb00 f202 	mul.w	r2, r0, r2
 80020f6:	440a      	add	r2, r1
 80020f8:	3201      	adds	r2, #1
 80020fa:	7811      	ldrb	r1, [r2, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <patch_lists+0x84>)
 80020fe:	54d1      	strb	r1, [r2, r3]
	list_counter2++;
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	3301      	adds	r3, #1
 8002104:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	3301      	adds	r3, #1
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b13      	cmp	r3, #19
 8002110:	d9d0      	bls.n	80020b4 <patch_lists+0x10>
	}

    }

}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	2000dd84 	.word	0x2000dd84
 8002124:	20011f48 	.word	0x20011f48
 8002128:	200121b8 	.word	0x200121b8
 800212c:	00000000 	.word	0x00000000

08002130 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b0f2      	sub	sp, #456	; 0x1c8
 8002134:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8002136:	4bcb      	ldr	r3, [pc, #812]	; (8002464 <sampling+0x334>)
 8002138:	2200      	movs	r2, #0
 800213a:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 800213c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002140:	2228      	movs	r2, #40	; 0x28
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f00a fead 	bl	800cea4 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 800214a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800214e:	2228      	movs	r2, #40	; 0x28
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f00a fea6 	bl	800cea4 <memset>
uint16_t tuned_list[10];
int32_t sample_adc=0;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
int32_t ram_temp=0;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 8002164:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002168:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800216c:	4618      	mov	r0, r3
 800216e:	2350      	movs	r3, #80	; 0x50
 8002170:	461a      	mov	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	f00a fe96 	bl	800cea4 <memset>
 8002178:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800217c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002180:	2201      	movs	r2, #1
 8002182:	801a      	strh	r2, [r3, #0]
 8002184:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002188:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800218c:	2201      	movs	r2, #1
 800218e:	805a      	strh	r2, [r3, #2]
 8002190:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002194:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002198:	2201      	movs	r2, #1
 800219a:	809a      	strh	r2, [r3, #4]
 800219c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021a4:	2201      	movs	r2, #1
 80021a6:	80da      	strh	r2, [r3, #6]
 80021a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021b0:	2201      	movs	r2, #1
 80021b2:	811a      	strh	r2, [r3, #8]
 80021b4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021bc:	2201      	movs	r2, #1
 80021be:	815a      	strh	r2, [r3, #10]
 80021c0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021c4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021c8:	2201      	movs	r2, #1
 80021ca:	819a      	strh	r2, [r3, #12]
 80021cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021d4:	2201      	movs	r2, #1
 80021d6:	81da      	strh	r2, [r3, #14]
 80021d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021e0:	2201      	movs	r2, #1
 80021e2:	821a      	strh	r2, [r3, #16]
 80021e4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021ec:	2201      	movs	r2, #1
 80021ee:	825a      	strh	r2, [r3, #18]
 80021f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021f8:	2201      	movs	r2, #1
 80021fa:	829a      	strh	r2, [r3, #20]
 80021fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002200:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002204:	2201      	movs	r2, #1
 8002206:	82da      	strh	r2, [r3, #22]
 8002208:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800220c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002210:	2201      	movs	r2, #1
 8002212:	831a      	strh	r2, [r3, #24]
 8002214:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002218:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800221c:	2201      	movs	r2, #1
 800221e:	835a      	strh	r2, [r3, #26]
 8002220:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002224:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002228:	2201      	movs	r2, #1
 800222a:	839a      	strh	r2, [r3, #28]
 800222c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002230:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002234:	2201      	movs	r2, #1
 8002236:	83da      	strh	r2, [r3, #30]
 8002238:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800223c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002240:	2201      	movs	r2, #1
 8002242:	841a      	strh	r2, [r3, #32]
 8002244:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002248:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800224c:	2201      	movs	r2, #1
 800224e:	845a      	strh	r2, [r3, #34]	; 0x22
 8002250:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002254:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002258:	2201      	movs	r2, #1
 800225a:	849a      	strh	r2, [r3, #36]	; 0x24
 800225c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002260:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002264:	2201      	movs	r2, #1
 8002266:	84da      	strh	r2, [r3, #38]	; 0x26
 8002268:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800226c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002270:	2201      	movs	r2, #1
 8002272:	851a      	strh	r2, [r3, #40]	; 0x28
 8002274:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002278:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800227c:	2201      	movs	r2, #1
 800227e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002280:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002284:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002288:	2201      	movs	r2, #1
 800228a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800228c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002290:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002294:	2201      	movs	r2, #1
 8002296:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002298:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800229c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022a0:	2201      	movs	r2, #1
 80022a2:	861a      	strh	r2, [r3, #48]	; 0x30
 80022a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022ac:	2201      	movs	r2, #1
 80022ae:	865a      	strh	r2, [r3, #50]	; 0x32
 80022b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022b8:	2201      	movs	r2, #1
 80022ba:	869a      	strh	r2, [r3, #52]	; 0x34
 80022bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022c4:	2201      	movs	r2, #1
 80022c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80022c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022d0:	2201      	movs	r2, #1
 80022d2:	871a      	strh	r2, [r3, #56]	; 0x38
 80022d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022dc:	2201      	movs	r2, #1
 80022de:	875a      	strh	r2, [r3, #58]	; 0x3a
 80022e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022e8:	2201      	movs	r2, #1
 80022ea:	879a      	strh	r2, [r3, #60]	; 0x3c
 80022ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80022f4:	2201      	movs	r2, #1
 80022f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80022fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002300:	2201      	movs	r2, #1
 8002302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8002306:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800230a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800230e:	2201      	movs	r2, #1
 8002310:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002314:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002318:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800231c:	2201      	movs	r2, #1
 800231e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002322:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002326:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800232a:	2201      	movs	r2, #1
 800232c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002330:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002334:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002338:	2201      	movs	r2, #1
 800233a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
uint8_t flash_result;
int32_t sample_input=0;
 800233e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002342:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
tempo_lut[131]=1023;   // force to an even count on samples
 800234a:	4b47      	ldr	r3, [pc, #284]	; (8002468 <sampling+0x338>)
 800234c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002350:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
int32_t sample_loop_input=0;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <sampling+0x33c>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d104      	bne.n	800236c <sampling+0x23c>
 8002362:	4b43      	ldr	r3, [pc, #268]	; (8002470 <sampling+0x340>)
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e002      	b.n	8002372 <sampling+0x242>
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <sampling+0x340>)
 800236e:	2200      	movs	r2, #0
 8002370:	801a      	strh	r2, [r3, #0]

bank_write=0;
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <sampling+0x33c>)
 8002374:	2200      	movs	r2, #0
 8002376:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8002378:	2210      	movs	r2, #16
 800237a:	493e      	ldr	r1, [pc, #248]	; (8002474 <sampling+0x344>)
 800237c:	483e      	ldr	r0, [pc, #248]	; (8002478 <sampling+0x348>)
 800237e:	f00a fd83 	bl	800ce88 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <sampling+0x34c>)
 8002384:	2210      	movs	r2, #16
 8002386:	493e      	ldr	r1, [pc, #248]	; (8002480 <sampling+0x350>)
 8002388:	4618      	mov	r0, r3
 800238a:	f00a fd7d 	bl	800ce88 <memcpy>
sample_pointB=sample_pointD;
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <sampling+0x340>)
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <sampling+0x354>)
 8002394:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002396:	2300      	movs	r3, #0
 8002398:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <sampling+0x358>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <sampling+0x338>)
 80023a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023a8:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
//if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s



tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80023ac:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da00      	bge.n	80023b6 <sampling+0x286>
 80023b4:	331f      	adds	r3, #31
 80023b6:	115b      	asrs	r3, r3, #5
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023be:	fb93 f3f2 	sdiv	r3, r3, r2
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <sampling+0x35c>)
 80023cc:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <sampling+0x35c>)
 80023d2:	ed93 7a00 	vldr	s14, [r3]
 80023d6:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002490 <sampling+0x360>
 80023da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <sampling+0x35c>)
 80023e0:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80023e4:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80023e8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d110      	bne.n	8002412 <sampling+0x2e2>
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <sampling+0x364>)
 80023f2:	8c1b      	ldrh	r3, [r3, #32]
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d80b      	bhi.n	8002412 <sampling+0x2e2>
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <sampling+0x358>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <sampling+0x2e2>
 8002406:	4b24      	ldr	r3, [pc, #144]	; (8002498 <sampling+0x368>)
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	4b23      	ldr	r3, [pc, #140]	; (800249c <sampling+0x36c>)
 800240e:	2200      	movs	r2, #0
 8002410:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <sampling+0x370>)
 8002414:	2200      	movs	r2, #0
 8002416:	801a      	strh	r2, [r3, #0]
	sampler.trigger_position=0;     // reset sample start here
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <sampling+0x364>)
 800241a:	2200      	movs	r2, #0
 800241c:	819a      	strh	r2, [r3, #12]




uint8_t looper_dat[8]={1,3,7,15};
 800241e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002422:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 8002426:	491f      	ldr	r1, [pc, #124]	; (80024a4 <sampling+0x374>)
 8002428:	4613      	mov	r3, r2
 800242a:	c903      	ldmia	r1, {r0, r1}
 800242c:	6018      	str	r0, [r3, #0]
 800242e:	3304      	adds	r3, #4
 8002430:	7019      	strb	r1, [r3, #0]
 8002432:	1d53      	adds	r3, r2, #5
 8002434:	2200      	movs	r2, #0
 8002436:	801a      	strh	r2, [r3, #0]
 8002438:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <sampling+0x378>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 8002442:	429a      	cmp	r2, r3
 8002444:	d05e      	beq.n	8002504 <sampling+0x3d4>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 8002446:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 800244a:	4a18      	ldr	r2, [pc, #96]	; (80024ac <sampling+0x37c>)
 800244c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002450:	ee07 3a90 	vmov	s15, r3
 8002454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002458:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac


						for (i=0;i<256;i++){								// 128 is 1 note
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <sampling+0x380>)
 800245e:	2200      	movs	r2, #0
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	e04b      	b.n	80024fc <sampling+0x3cc>
 8002464:	2000cf18 	.word	0x2000cf18
 8002468:	2000c27c 	.word	0x2000c27c
 800246c:	20008e0a 	.word	0x20008e0a
 8002470:	2000a926 	.word	0x2000a926
 8002474:	2000dd56 	.word	0x2000dd56
 8002478:	20010d18 	.word	0x20010d18
 800247c:	20010d28 	.word	0x20010d28
 8002480:	2000dd67 	.word	0x2000dd67
 8002484:	20009918 	.word	0x20009918
 8002488:	2000dd54 	.word	0x2000dd54
 800248c:	2000cb08 	.word	0x2000cb08
 8002490:	42a00000 	.word	0x42a00000
 8002494:	20008ebc 	.word	0x20008ebc
 8002498:	2000c12c 	.word	0x2000c12c
 800249c:	2000c158 	.word	0x2000c158
 80024a0:	200121cc 	.word	0x200121cc
 80024a4:	0800d60c 	.word	0x0800d60c
 80024a8:	2000c67c 	.word	0x2000c67c
 80024ac:	006487ec 	.word	0x006487ec
 80024b0:	2000991a 	.word	0x2000991a
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 80024b4:	4bae      	ldr	r3, [pc, #696]	; (8002770 <sampling+0x640>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c2:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80024ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d6:	ee17 3a90 	vmov	r3, s15
 80024da:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80024de:	4ba4      	ldr	r3, [pc, #656]	; (8002770 <sampling+0x640>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024e8:	b299      	uxth	r1, r3
 80024ea:	4ba2      	ldr	r3, [pc, #648]	; (8002774 <sampling+0x644>)
 80024ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 80024f0:	4b9f      	ldr	r3, [pc, #636]	; (8002770 <sampling+0x640>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b9d      	ldr	r3, [pc, #628]	; (8002770 <sampling+0x640>)
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	4b9c      	ldr	r3, [pc, #624]	; (8002770 <sampling+0x640>)
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	2bff      	cmp	r3, #255	; 0xff
 8002502:	d9d7      	bls.n	80024b4 <sampling+0x384>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002504:	4a9c      	ldr	r2, [pc, #624]	; (8002778 <sampling+0x648>)
 8002506:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 800250a:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 800250c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002510:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002514:	4618      	mov	r0, r3
 8002516:	2344      	movs	r3, #68	; 0x44
 8002518:	461a      	mov	r2, r3
 800251a:	2100      	movs	r1, #0
 800251c:	f00a fcc2 	bl	800cea4 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002520:	4b93      	ldr	r3, [pc, #588]	; (8002770 <sampling+0x640>)
 8002522:	2200      	movs	r2, #0
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e00f      	b.n	8002548 <sampling+0x418>
 8002528:	4b91      	ldr	r3, [pc, #580]	; (8002770 <sampling+0x640>)
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002532:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002536:	2200      	movs	r2, #0
 8002538:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800253c:	4b8c      	ldr	r3, [pc, #560]	; (8002770 <sampling+0x640>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	4b8a      	ldr	r3, [pc, #552]	; (8002770 <sampling+0x640>)
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	4b89      	ldr	r3, [pc, #548]	; (8002770 <sampling+0x640>)
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	2b0f      	cmp	r3, #15
 800254e:	d9eb      	bls.n	8002528 <sampling+0x3f8>
	//potSource[150]=(freq_point[0])*100; //0-2


patch_lists();
 8002550:	f7ff fda8 	bl	80020a4 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002554:	2300      	movs	r3, #0
 8002556:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 800255a:	e0dd      	b.n	8002718 <sampling+0x5e8>


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 800255c:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002560:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8002564:	4985      	ldr	r1, [pc, #532]	; (800277c <sampling+0x64c>)
 8002566:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002570:	443b      	add	r3, r7
 8002572:	f843 2c84 	str.w	r2, [r3, #-132]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 8002576:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800257a:	4981      	ldr	r1, [pc, #516]	; (8002780 <sampling+0x650>)
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	440b      	add	r3, r1
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <sampling+0x472>
 800258c:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002590:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002594:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002598:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800259c:	3114      	adds	r1, #20
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 80025a2:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025a6:	4976      	ldr	r1, [pc, #472]	; (8002780 <sampling+0x650>)
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	440b      	add	r3, r1
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10d      	bne.n	80025d4 <sampling+0x4a4>
 80025b8:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 80025bc:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025c0:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4419      	add	r1, r3
 80025c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80025cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 80025d4:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025d8:	4969      	ldr	r1, [pc, #420]	; (8002780 <sampling+0x650>)
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	440b      	add	r3, r1
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d10d      	bne.n	8002606 <sampling+0x4d6>
 80025ea:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 80025ee:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025f2:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4419      	add	r1, r3
 80025fa:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80025fe:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];}   // sample_input
 8002606:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800260a:	495d      	ldr	r1, [pc, #372]	; (8002780 <sampling+0x650>)
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	440b      	add	r3, r1
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d10e      	bne.n	800263a <sampling+0x50a>
 800261c:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8002620:	3306      	adds	r3, #6
 8002622:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002626:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4419      	add	r1, r3
 800262e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002632:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;}  // sampleinput
 800263a:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800263e:	4950      	ldr	r1, [pc, #320]	; (8002780 <sampling+0x650>)
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	440b      	add	r3, r1
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d109      	bne.n	8002664 <sampling+0x534>
 8002650:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002654:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002658:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800265c:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 8002664:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002668:	4945      	ldr	r1, [pc, #276]	; (8002780 <sampling+0x650>)
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	440b      	add	r3, r1
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b05      	cmp	r3, #5
 8002678:	d109      	bne.n	800268e <sampling+0x55e>
 800267a:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800267e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002682:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002686:	f507 7182 	add.w	r1, r7, #260	; 0x104
 800268a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // non muted RAM , just loop
 800268e:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002692:	493b      	ldr	r1, [pc, #236]	; (8002780 <sampling+0x650>)
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d109      	bne.n	80026b8 <sampling+0x588>
 80026a4:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80026a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026b0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80026b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==7) osc_pointers[pars_counter]=&ram_temp ;   // trigger 0-16
 80026b8:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80026bc:	4930      	ldr	r1, [pc, #192]	; (8002780 <sampling+0x650>)
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	440b      	add	r3, r1
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b07      	cmp	r3, #7
 80026cc:	d109      	bne.n	80026e2 <sampling+0x5b2>
 80026ce:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80026d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80026d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80026da:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80026de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>7) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80026e2:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80026e6:	4926      	ldr	r1, [pc, #152]	; (8002780 <sampling+0x650>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	440b      	add	r3, r1
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b07      	cmp	r3, #7
 80026f6:	d90a      	bls.n	800270e <sampling+0x5de>
 80026f8:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80026fc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002700:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002704:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002708:	3114      	adds	r1, #20
 800270a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 800270e:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8002712:	3301      	adds	r3, #1
 8002714:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8002718:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 800271c:	2b03      	cmp	r3, #3
 800271e:	f67f af1d 	bls.w	800255c <sampling+0x42c>


 }

note_holdA=0;
 8002722:	4b18      	ldr	r3, [pc, #96]	; (8002784 <sampling+0x654>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002728:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800272c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002730:	2200      	movs	r2, #0
 8002732:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002734:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002738:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800273c:	4a12      	ldr	r2, [pc, #72]	; (8002788 <sampling+0x658>)
 800273e:	461c      	mov	r4, r3
 8002740:	4615      	mov	r5, r2
 8002742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002746:	682b      	ldr	r3, [r5, #0]
 8002748:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <sampling+0x65c>)
 800274c:	2200      	movs	r2, #0
 800274e:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <sampling+0x660>)
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	b29b      	uxth	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	2201      	movs	r2, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002768:	4b01      	ldr	r3, [pc, #4]	; (8002770 <sampling+0x640>)
 800276a:	2200      	movs	r2, #0
 800276c:	801a      	strh	r2, [r3, #0]
 800276e:	e233      	b.n	8002bd8 <sampling+0xaa8>
 8002770:	2000991a 	.word	0x2000991a
 8002774:	2000c47c 	.word	0x2000c47c
 8002778:	2000c67c 	.word	0x2000c67c
 800277c:	2000c130 	.word	0x2000c130
 8002780:	20008e10 	.word	0x20008e10
 8002784:	2000c12e 	.word	0x2000c12e
 8002788:	0800d614 	.word	0x0800d614
 800278c:	20009910 	.word	0x20009910
 8002790:	20008e00 	.word	0x20008e00

	i_total=i+sample_pointB;
 8002794:	4ba3      	ldr	r3, [pc, #652]	; (8002a24 <sampling+0x8f4>)
 8002796:	881a      	ldrh	r2, [r3, #0]
 8002798:	4ba3      	ldr	r3, [pc, #652]	; (8002a28 <sampling+0x8f8>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	4413      	add	r3, r2
 800279e:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
	sampling_position=i>>6;   //   0-8 steps
 80027a2:	4ba0      	ldr	r3, [pc, #640]	; (8002a24 <sampling+0x8f4>)
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b9f      	ldr	r3, [pc, #636]	; (8002a2c <sampling+0x8fc>)
 80027ae:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80027b0:	4b9e      	ldr	r3, [pc, #632]	; (8002a2c <sampling+0x8fc>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	3307      	adds	r3, #7
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b9c      	ldr	r3, [pc, #624]	; (8002a30 <sampling+0x900>)
 80027c0:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80027c2:	4b9c      	ldr	r3, [pc, #624]	; (8002a34 <sampling+0x904>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	4a9a      	ldr	r2, [pc, #616]	; (8002a34 <sampling+0x904>)
 80027cc:	4413      	add	r3, r2
 80027ce:	789b      	ldrb	r3, [r3, #2]
 80027d0:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80027d4:	4b93      	ldr	r3, [pc, #588]	; (8002a24 <sampling+0x8f4>)
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	4a97      	ldr	r2, [pc, #604]	; (8002a38 <sampling+0x908>)
 80027dc:	5cd2      	ldrb	r2, [r2, r3]
 80027de:	4b91      	ldr	r3, [pc, #580]	; (8002a24 <sampling+0x8f4>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	0912      	lsrs	r2, r2, #4
 80027e6:	b2d1      	uxtb	r1, r2
 80027e8:	4a94      	ldr	r2, [pc, #592]	; (8002a3c <sampling+0x90c>)
 80027ea:	54d1      	strb	r1, [r2, r3]

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80027ec:	4b94      	ldr	r3, [pc, #592]	; (8002a40 <sampling+0x910>)
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d812      	bhi.n	800281e <sampling+0x6ee>
 80027f8:	4b92      	ldr	r3, [pc, #584]	; (8002a44 <sampling+0x914>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002804:	b29a      	uxth	r2, r3
 8002806:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <sampling+0x914>)
 8002808:	801a      	strh	r2, [r3, #0]
 800280a:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <sampling+0x910>)
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <sampling+0x914>)
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <sampling+0x918>)
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	e005      	b.n	800282a <sampling+0x6fa>
 800281e:	4b88      	ldr	r3, [pc, #544]	; (8002a40 <sampling+0x910>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b86      	ldr	r3, [pc, #536]	; (8002a40 <sampling+0x910>)
 8002828:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 800282a:	2300      	movs	r3, #0
 800282c:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002830:	4b84      	ldr	r3, [pc, #528]	; (8002a44 <sampling+0x914>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b7e      	ldr	r3, [pc, #504]	; (8002a34 <sampling+0x904>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b29b      	uxth	r3, r3
 800283e:	429a      	cmp	r2, r3
 8002840:	d009      	beq.n	8002856 <sampling+0x726>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002842:	4b80      	ldr	r3, [pc, #512]	; (8002a44 <sampling+0x914>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	b29b      	uxth	r3, r3
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <sampling+0x904>)
 800284e:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002850:	2301      	movs	r3, #1
 8002852:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
}

	//if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002856:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 81ac 	beq.w	8002bb8 <sampling+0xa88>
	{
		serial_tosend=1;
 8002860:	4b7a      	ldr	r3, [pc, #488]	; (8002a4c <sampling+0x91c>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 8002866:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <sampling+0x8f4>)
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <sampling+0x920>)
 8002870:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 8002872:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <sampling+0x904>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	b2da      	uxtb	r2, r3
 800287c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002880:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002884:	701a      	strb	r2, [r3, #0]
	//	loop_temp1[3]=adc_values[0]>>2;




		seq.loop[0]=(note[0].timeshift+loop_temp1[0])&31;
 8002886:	4b73      	ldr	r3, [pc, #460]	; (8002a54 <sampling+0x924>)
 8002888:	799a      	ldrb	r2, [r3, #6]
 800288a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800288e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	4413      	add	r3, r2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <sampling+0x904>)
 80028a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0])&31;
 80028a4:	4b6b      	ldr	r3, [pc, #428]	; (8002a54 <sampling+0x924>)
 80028a6:	7d1a      	ldrb	r2, [r3, #20]
 80028a8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028ac:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <sampling+0x904>)
 80028be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 80028c2:	4b64      	ldr	r3, [pc, #400]	; (8002a54 <sampling+0x924>)
 80028c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80028c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028cc:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	f003 031f 	and.w	r3, r3, #31
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <sampling+0x904>)
 80028de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0])&31;
 80028e2:	4b5c      	ldr	r3, [pc, #368]	; (8002a54 <sampling+0x924>)
 80028e4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80028e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80028ec:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 031f 	and.w	r3, r3, #31
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b4d      	ldr	r3, [pc, #308]	; (8002a34 <sampling+0x904>)
 80028fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002902:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <sampling+0x904>)
 8002904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002908:	461a      	mov	r2, r3
 800290a:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <sampling+0x928>)
 800290c:	5c9a      	ldrb	r2, [r3, r2]
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <sampling+0x924>)
 8002910:	795b      	ldrb	r3, [r3, #5]
 8002912:	4413      	add	r3, r2
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <sampling+0x924>)
 8002918:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <sampling+0x904>)
 800291c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002920:	461a      	mov	r2, r3
 8002922:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <sampling+0x928>)
 8002924:	5c9a      	ldrb	r2, [r3, r2]
 8002926:	4b4b      	ldr	r3, [pc, #300]	; (8002a54 <sampling+0x924>)
 8002928:	7cdb      	ldrb	r3, [r3, #19]
 800292a:	4413      	add	r3, r2
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b49      	ldr	r3, [pc, #292]	; (8002a54 <sampling+0x924>)
 8002930:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002932:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <sampling+0x904>)
 8002934:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002938:	461a      	mov	r2, r3
 800293a:	4b47      	ldr	r3, [pc, #284]	; (8002a58 <sampling+0x928>)
 800293c:	5c9a      	ldrb	r2, [r3, r2]
 800293e:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <sampling+0x924>)
 8002940:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002944:	4413      	add	r3, r2
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b42      	ldr	r3, [pc, #264]	; (8002a54 <sampling+0x924>)
 800294a:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 800294c:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <sampling+0x904>)
 800294e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002952:	461a      	mov	r2, r3
 8002954:	4b40      	ldr	r3, [pc, #256]	; (8002a58 <sampling+0x928>)
 8002956:	5c9a      	ldrb	r2, [r3, r2]
 8002958:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <sampling+0x924>)
 800295a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800295e:	4413      	add	r3, r2
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4b3c      	ldr	r3, [pc, #240]	; (8002a54 <sampling+0x924>)
 8002964:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		// --------------------- sampler
		uint8_t pos_divide=15;
 8002968:	230f      	movs	r3, #15
 800296a:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <sampling+0x92c>)
 8002970:	7a1b      	ldrb	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d006      	beq.n	8002984 <sampling+0x854>
 8002976:	4b39      	ldr	r3, [pc, #228]	; (8002a5c <sampling+0x92c>)
 8002978:	7a1b      	ldrb	r3, [r3, #8]
 800297a:	461a      	mov	r2, r3
 800297c:	230f      	movs	r3, #15
 800297e:	4113      	asrs	r3, r2
 8002980:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2

		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002984:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <sampling+0x92c>)
 8002986:	791b      	ldrb	r3, [r3, #4]
 8002988:	4619      	mov	r1, r3
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <sampling+0x904>)
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 8002992:	4013      	ands	r3, r2
 8002994:	b2db      	uxtb	r3, r3
 8002996:	3301      	adds	r3, #1
 8002998:	4299      	cmp	r1, r3
 800299a:	d102      	bne.n	80029a2 <sampling+0x872>
 800299c:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <sampling+0x92c>)
 800299e:	2201      	movs	r2, #1
 80029a0:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80029a2:	4b2e      	ldr	r3, [pc, #184]	; (8002a5c <sampling+0x92c>)
 80029a4:	795b      	ldrb	r3, [r3, #5]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <sampling+0x904>)
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80029b0:	4013      	ands	r3, r2
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3301      	adds	r3, #1
 80029b6:	4299      	cmp	r1, r3
 80029b8:	d102      	bne.n	80029c0 <sampling+0x890>
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <sampling+0x92c>)
 80029bc:	2201      	movs	r2, #1
 80029be:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80029c0:	4b26      	ldr	r3, [pc, #152]	; (8002a5c <sampling+0x92c>)
 80029c2:	799b      	ldrb	r3, [r3, #6]
 80029c4:	4619      	mov	r1, r3
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <sampling+0x904>)
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80029ce:	4013      	ands	r3, r2
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	4299      	cmp	r1, r3
 80029d6:	d102      	bne.n	80029de <sampling+0x8ae>
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <sampling+0x92c>)
 80029da:	2201      	movs	r2, #1
 80029dc:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80029de:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <sampling+0x92c>)
 80029e0:	79db      	ldrb	r3, [r3, #7]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <sampling+0x904>)
 80029e6:	781a      	ldrb	r2, [r3, #0]
 80029e8:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80029ec:	4013      	ands	r3, r2
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	3301      	adds	r3, #1
 80029f2:	4299      	cmp	r1, r3
 80029f4:	d102      	bne.n	80029fc <sampling+0x8cc>
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <sampling+0x92c>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	819a      	strh	r2, [r3, #12]
		if(sampler.trigger_position) note[3].position=1;
 80029fc:	4b17      	ldr	r3, [pc, #92]	; (8002a5c <sampling+0x92c>)
 80029fe:	899b      	ldrh	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <sampling+0x8dc>
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <sampling+0x924>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		patch_target_replace();
 8002a0c:	f7fe fe3e 	bl	800168c <patch_target_replace>
		uint8_t detune_temp=0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <sampling+0x930>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	801a      	strh	r2, [r3, #0]
		uint8_t note_number;
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8002a22:	e0c4      	b.n	8002bae <sampling+0xa7e>
 8002a24:	2000991a 	.word	0x2000991a
 8002a28:	20009918 	.word	0x20009918
 8002a2c:	2000ed10 	.word	0x2000ed10
 8002a30:	2000ed11 	.word	0x2000ed11
 8002a34:	2000dd54 	.word	0x2000dd54
 8002a38:	20009648 	.word	0x20009648
 8002a3c:	200093e0 	.word	0x200093e0
 8002a40:	2000c158 	.word	0x2000c158
 8002a44:	2000c12c 	.word	0x2000c12c
 8002a48:	20009910 	.word	0x20009910
 8002a4c:	20010f3d 	.word	0x20010f3d
 8002a50:	200121cc 	.word	0x200121cc
 8002a54:	20008e10 	.word	0x20008e10
 8002a58:	20010d18 	.word	0x20010d18
 8002a5c:	20008ebc 	.word	0x20008ebc
 8002a60:	2000a928 	.word	0x2000a928
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002a64:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002a68:	492f      	ldr	r1, [pc, #188]	; (8002b28 <sampling+0x9f8>)
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	440b      	add	r3, r1
 8002a74:	3302      	adds	r3, #2
 8002a76:	7819      	ldrb	r1, [r3, #0]
 8002a78:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002a7c:	482a      	ldr	r0, [pc, #168]	; (8002b28 <sampling+0x9f8>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4403      	add	r3, r0
 8002a88:	3308      	adds	r3, #8
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002a92:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8002a96:	2b3c      	cmp	r3, #60	; 0x3c
 8002a98:	d902      	bls.n	8002aa0 <sampling+0x970>
 8002a9a:	233c      	movs	r3, #60	; 0x3c
 8002a9c:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 8002aa0:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8002aa4:	2b1e      	cmp	r3, #30
 8002aa6:	d907      	bls.n	8002ab8 <sampling+0x988>
 8002aa8:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8002aac:	3b1f      	subs	r3, #31
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <sampling+0x9fc>)
 8002ab0:	5cd3      	ldrb	r3, [r2, r3]
 8002ab2:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 8002ab6:	e005      	b.n	8002ac4 <sampling+0x994>
	else note_number=MajorNote[detune_temp];
 8002ab8:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 8002abc:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <sampling+0xa00>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
		    note[mask_i].tuned=sample_Noteadd[note_number];
 8002ac4:	f897 31c0 	ldrb.w	r3, [r7, #448]	; 0x1c0
 8002ac8:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002acc:	4919      	ldr	r1, [pc, #100]	; (8002b34 <sampling+0xa04>)
 8002ace:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8002ad2:	4915      	ldr	r1, [pc, #84]	; (8002b28 <sampling+0x9f8>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	440b      	add	r3, r1
 8002ade:	330c      	adds	r3, #12
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	801a      	strh	r2, [r3, #0]
	if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 8002ae4:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002ae8:	490f      	ldr	r1, [pc, #60]	; (8002b28 <sampling+0x9f8>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	3307      	adds	r3, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d021      	beq.n	8002b40 <sampling+0xa10>
 8002afc:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002b00:	4909      	ldr	r1, [pc, #36]	; (8002b28 <sampling+0x9f8>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	440b      	add	r3, r1
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <sampling+0xa10>
 8002b12:	f897 21c0 	ldrb.w	r2, [r7, #448]	; 0x1c0
 8002b16:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002b1a:	330f      	adds	r3, #15
 8002b1c:	4906      	ldr	r1, [pc, #24]	; (8002b38 <sampling+0xa08>)
 8002b1e:	5c89      	ldrb	r1, [r1, r2]
 8002b20:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <sampling+0xa0c>)
 8002b22:	54d1      	strb	r1, [r2, r3]
 8002b24:	e012      	b.n	8002b4c <sampling+0xa1c>
 8002b26:	bf00      	nop
 8002b28:	20008e10 	.word	0x20008e10
 8002b2c:	0800e9cc 	.word	0x0800e9cc
 8002b30:	0800e9ac 	.word	0x0800e9ac
 8002b34:	0800e9ec 	.word	0x0800e9ec
 8002b38:	0800e96c 	.word	0x0800e96c
 8002b3c:	20012154 	.word	0x20012154
 8002b40:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002b44:	330f      	adds	r3, #15
 8002b46:	4a98      	ldr	r2, [pc, #608]	; (8002da8 <sampling+0xc78>)
 8002b48:	215f      	movs	r1, #95	; 0x5f
 8002b4a:	54d1      	strb	r1, [r2, r3]
	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002b4c:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002b50:	4996      	ldr	r1, [pc, #600]	; (8002dac <sampling+0xc7c>)
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	ee07 3a90 	vmov	s15, r3
 8002b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b68:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002b6c:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8002b70:	f7fd fdc8 	bl	8000704 <__aeabi_f2d>
 8002b74:	a38a      	add	r3, pc, #552	; (adr r3, 8002da0 <sampling+0xc70>)
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f7fd fb35 	bl	80001e8 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	f897 41c7 	ldrb.w	r4, [r7, #455]	; 0x1c7
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	f7fd fe13 	bl	80007b4 <__aeabi_d2uiz>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b299      	uxth	r1, r3
 8002b92:	4a86      	ldr	r2, [pc, #536]	; (8002dac <sampling+0xc7c>)
 8002b94:	4623      	mov	r3, r4
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1b1b      	subs	r3, r3, r4
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002ba4:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8002bae:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	f67f af56 	bls.w	8002a64 <sampling+0x934>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002bb8:	4b7d      	ldr	r3, [pc, #500]	; (8002db0 <sampling+0xc80>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <sampling+0xa9c>
	{
	    LFO_square_one_pulse();
 8002bc4:	f000 febe 	bl	8003944 <LFO_square_one_pulse>

		LFO_source_synced();
 8002bc8:	f000 ff46 	bl	8003a58 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002bcc:	4b78      	ldr	r3, [pc, #480]	; (8002db0 <sampling+0xc80>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <sampling+0xc80>)
 8002bd6:	801a      	strh	r2, [r3, #0]
 8002bd8:	4b75      	ldr	r3, [pc, #468]	; (8002db0 <sampling+0xc80>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	f4ff add8 	bcc.w	8002794 <sampling+0x664>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002be4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002be8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002bec:	4a71      	ldr	r2, [pc, #452]	; (8002db4 <sampling+0xc84>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	2350      	movs	r3, #80	; 0x50
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f00a f947 	bl	800ce88 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002bfa:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <sampling+0xc7c>)
 8002bfc:	899a      	ldrh	r2, [r3, #12]
 8002bfe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c02:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c06:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <sampling+0xc7c>)
 8002c0a:	8b5a      	ldrh	r2, [r3, #26]
 8002c0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <sampling+0xc7c>)
 8002c18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002c1a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002c26:	4b61      	ldr	r3, [pc, #388]	; (8002dac <sampling+0xc7c>)
 8002c28:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002c2a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c2e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c32:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002c36:	4b60      	ldr	r3, [pc, #384]	; (8002db8 <sampling+0xc88>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b5d      	ldr	r3, [pc, #372]	; (8002db8 <sampling+0xc88>)
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	4b5b      	ldr	r3, [pc, #364]	; (8002db8 <sampling+0xc88>)
 8002c4c:	829a      	strh	r2, [r3, #20]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <sampling+0xc88>)
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b57      	ldr	r3, [pc, #348]	; (8002db8 <sampling+0xc88>)
 8002c5a:	78db      	ldrb	r3, [r3, #3]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b55      	ldr	r3, [pc, #340]	; (8002db8 <sampling+0xc88>)
 8002c64:	82da      	strh	r2, [r3, #22]

	sine_ptr_temp[0]=&sine_counter[3];
 8002c66:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c6a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c6e:	4a53      	ldr	r2, [pc, #332]	; (8002dbc <sampling+0xc8c>)
 8002c70:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002c72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c76:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c7a:	4a51      	ldr	r2, [pc, #324]	; (8002dc0 <sampling+0xc90>)
 8002c7c:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002c7e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c82:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c86:	4a4f      	ldr	r2, [pc, #316]	; (8002dc4 <sampling+0xc94>)
 8002c88:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002c8a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c8e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002c92:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <sampling+0xc98>)
 8002c94:	60da      	str	r2, [r3, #12]

	    // does go out of time , likely skipping samples
	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002c96:	4b48      	ldr	r3, [pc, #288]	; (8002db8 <sampling+0xc88>)
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	4b47      	ldr	r3, [pc, #284]	; (8002db8 <sampling+0xc88>)
 8002c9c:	789b      	ldrb	r3, [r3, #2]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d902      	bls.n	8002ca8 <sampling+0xb78>
 8002ca2:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <sampling+0xc88>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <sampling+0xc88>)
 8002caa:	8c1a      	ldrh	r2, [r3, #32]
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <sampling+0xc88>)
 8002cae:	8a9b      	ldrh	r3, [r3, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d203      	bcs.n	8002cbc <sampling+0xb8c>
 8002cb4:	4b40      	ldr	r3, [pc, #256]	; (8002db8 <sampling+0xc88>)
 8002cb6:	8a9a      	ldrh	r2, [r3, #20]
 8002cb8:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <sampling+0xc88>)
 8002cba:	841a      	strh	r2, [r3, #32]
	if ((sampler.ram_seq)>=sampler.end)     {sampler.ram_seq=sampler.start; note[3].position=0;}      // just for playback counter
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <sampling+0xc88>)
 8002cbe:	8c1a      	ldrh	r2, [r3, #32]
 8002cc0:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <sampling+0xc88>)
 8002cc2:	8adb      	ldrh	r3, [r3, #22]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d307      	bcc.n	8002cd8 <sampling+0xba8>
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <sampling+0xc88>)
 8002cca:	8a9a      	ldrh	r2, [r3, #20]
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	; (8002db8 <sampling+0xc88>)
 8002cce:	841a      	strh	r2, [r3, #32]
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <sampling+0xc7c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	sampler.length=sampler.end-sampler.start;
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <sampling+0xc88>)
 8002cda:	8ada      	ldrh	r2, [r3, #22]
 8002cdc:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <sampling+0xc88>)
 8002cde:	8a9b      	ldrh	r3, [r3, #20]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <sampling+0xc88>)
 8002ce6:	831a      	strh	r2, [r3, #24]

	if(sampler.trigger_position )  { sampler.ram_seq=sampler.start;note[3].position=1; }   // starts her not perfect , figure out better
 8002ce8:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <sampling+0xc88>)
 8002cea:	899b      	ldrh	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d007      	beq.n	8002d00 <sampling+0xbd0>
 8002cf0:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <sampling+0xc88>)
 8002cf2:	8a9a      	ldrh	r2, [r3, #20]
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <sampling+0xc88>)
 8002cf6:	841a      	strh	r2, [r3, #32]
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <sampling+0xc7c>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e



//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002d00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d04:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d08:	4a30      	ldr	r2, [pc, #192]	; (8002dcc <sampling+0xc9c>)
 8002d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d0e:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002d12:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002d16:	2210      	movs	r2, #16
 8002d18:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <sampling+0xca0>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a f8b4 	bl	800ce88 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <sampling+0xca4>)
 8002d22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
*/



	if(counter_16>64) counter_16=0;
 8002d26:	4b2c      	ldr	r3, [pc, #176]	; (8002dd8 <sampling+0xca8>)
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	2b40      	cmp	r3, #64	; 0x40
 8002d2c:	d902      	bls.n	8002d34 <sampling+0xc04>
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	; (8002dd8 <sampling+0xca8>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	801a      	strh	r2, [r3, #0]

	  uint32_t sample_flash_address=(254<<16)+((128+counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <sampling+0xca8>)
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	3380      	adds	r3, #128	; 0x80
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8002d40:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c


	 sample_flash_address=((sampler.sample_select*127)<<8)+(sampler.ram_seq*2);  //let see , limited now with a 1k byte delay
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <sampling+0xc88>)
 8002d46:	7a9b      	ldrb	r3, [r3, #10]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	01db      	lsls	r3, r3, #7
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <sampling+0xc88>)
 8002d54:	8c1b      	ldrh	r3, [r3, #32]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	4413      	add	r3, r2
 8002d5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

   sampler_1k_load(sample_flash_address);
 8002d5e:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8002d62:	f002 f859 	bl	8004e18 <sampler_1k_load>
	//if((sampler.ram_seq&255)==0)	  sampler_1k_load(sample_flash_address);

	counter_16=counter_16+2;   // jump 512 bytes
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <sampling+0xca8>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	; (8002dd8 <sampling+0xca8>)
 8002d70:	801a      	strh	r2, [r3, #0]
	//    if (sampler.ram_seq>14000) memcpy(&error_data,flash_read_block2,127);

	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
 8002d72:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <sampling+0xcac>)
 8002d74:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	uint16_t* sample_ptr= &flash_read_block;
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <sampling+0xca4>)
 8002d7a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	if(RAM_looper>=16383) RAM_looper=0;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <sampling+0xcb0>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d902      	bls.n	8002d90 <sampling+0xc60>
 8002d8a:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <sampling+0xcb0>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	801a      	strh	r2, [r3, #0]
	int32_t   sample_adc_temp;
//	if ((sampler.ram_seq&255)==0)  ram_ptr=  &flash_read_block[128];
	uint16_t looper_point=0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <sampling+0xc80>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	e283      	b.n	80032a6 <sampling+0x1176>
 8002d9e:	bf00      	nop
 8002da0:	7ae147ae 	.word	0x7ae147ae
 8002da4:	3fefae14 	.word	0x3fefae14
 8002da8:	20012154 	.word	0x20012154
 8002dac:	20008e10 	.word	0x20008e10
 8002db0:	2000991a 	.word	0x2000991a
 8002db4:	2000937c 	.word	0x2000937c
 8002db8:	20008ebc 	.word	0x20008ebc
 8002dbc:	200098bc 	.word	0x200098bc
 8002dc0:	200098c8 	.word	0x200098c8
 8002dc4:	200098d4 	.word	0x200098d4
 8002dc8:	200098e0 	.word	0x200098e0
 8002dcc:	200093cc 	.word	0x200093cc
 8002dd0:	2000c130 	.word	0x2000c130
 8002dd4:	200121d4 	.word	0x200121d4
 8002dd8:	200127f0 	.word	0x200127f0
 8002ddc:	200001ac 	.word	0x200001ac
 8002de0:	20012802 	.word	0x20012802
	i_total=i+sample_pointB;
 8002de4:	4bcc      	ldr	r3, [pc, #816]	; (8003118 <sampling+0xfe8>)
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	4bcc      	ldr	r3, [pc, #816]	; (800311c <sampling+0xfec>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190
	sampling_position=(i>>6);
 8002df2:	4bc9      	ldr	r3, [pc, #804]	; (8003118 <sampling+0xfe8>)
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	4bc8      	ldr	r3, [pc, #800]	; (8003120 <sampling+0xff0>)
 8002dfe:	701a      	strb	r2, [r3, #0]


	sample_adc_temp=input_holder[i>>1];
 8002e00:	4bc5      	ldr	r3, [pc, #788]	; (8003118 <sampling+0xfe8>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4bc6      	ldr	r3, [pc, #792]	; (8003124 <sampling+0xff4>)
 8002e0c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002e10:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 8002e14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e18:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002e1c:	3b7f      	subs	r3, #127	; 0x7f
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	sample_adc=(sample_adc_temp+sample_adc)>>1;
 8002e24:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002e28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002e2c:	4413      	add	r3, r2
 8002e2e:	105b      	asrs	r3, r3, #1
 8002e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	looper_point=(RAM_looper+(sampler.offset<<11))&16383;
 8002e34:	4bbc      	ldr	r3, [pc, #752]	; (8003128 <sampling+0xff8>)
 8002e36:	7a5b      	ldrb	r3, [r3, #9]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	02db      	lsls	r3, r3, #11
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4bbb      	ldr	r3, [pc, #748]	; (800312c <sampling+0xffc>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	4413      	add	r3, r2
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002e4a:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
	   ram_temp=*(ram_ptr+looper_point);    // works
 8002e4e:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002e58:	4413      	add	r3, r2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	  // sample_loop_input=  ( sample_loop_input-32767)<<4;



	ram_temp=(ram_temp-32767)<<4;
 8002e60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e64:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002e68:	3b7f      	subs	r3, #127	; 0x7f
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100


	sample_input=*(sample_ptr+(sampler.ram_seq&255));
 8002e70:	4bad      	ldr	r3, [pc, #692]	; (8003128 <sampling+0xff8>)
 8002e72:	8c1b      	ldrh	r3, [r3, #32]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e8a:	601a      	str	r2, [r3, #0]
	sample_input=(sample_input-32767)<<4;
 8002e8c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002e9a:	3b7f      	subs	r3, #127	; 0x7f
 8002e9c:	011a      	lsls	r2, r3, #4
 8002e9e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ea2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ea6:	601a      	str	r2, [r3, #0]

	if	((i&1)==1)  {sampler.ram_seq=sampler.ram_seq+1; RAM_looper++; } // half speed
 8002ea8:	4b9b      	ldr	r3, [pc, #620]	; (8003118 <sampling+0xfe8>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <sampling+0xd9c>
 8002eb4:	4b9c      	ldr	r3, [pc, #624]	; (8003128 <sampling+0xff8>)
 8002eb6:	8c1b      	ldrh	r3, [r3, #32]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	4b9a      	ldr	r3, [pc, #616]	; (8003128 <sampling+0xff8>)
 8002ebe:	841a      	strh	r2, [r3, #32]
 8002ec0:	4b9a      	ldr	r3, [pc, #616]	; (800312c <sampling+0xffc>)
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	4b98      	ldr	r3, [pc, #608]	; (800312c <sampling+0xffc>)
 8002eca:	801a      	strh	r2, [r3, #0]



	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002ecc:	4b92      	ldr	r3, [pc, #584]	; (8003118 <sampling+0xfe8>)
 8002ece:	881a      	ldrh	r2, [r3, #0]
 8002ed0:	4b97      	ldr	r3, [pc, #604]	; (8003130 <sampling+0x1000>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d129      	bne.n	8002f2c <sampling+0xdfc>
 8002ed8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002edc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ee0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002ee2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ee6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eea:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002eec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002ef0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ef4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002ef6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002efa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002f00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f08:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002f0c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f10:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f14:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002f16:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f1e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002f22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002f26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f2a:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002f2c:	4b7a      	ldr	r3, [pc, #488]	; (8003118 <sampling+0xfe8>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 8095 	bne.w	8003064 <sampling+0xf34>
	  //  LFO_source_new(); // calculate lfo maybe 8 times for now
	    patch_target_replace();    // update values , not too bad
 8002f3a:	f7fe fba7 	bl	800168c <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002f3e:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <sampling+0x1004>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fbcc 	bl	80006e0 <__aeabi_i2d>
 8002f48:	a36f      	add	r3, pc, #444	; (adr r3, 8003108 <sampling+0xfd8>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd f94b 	bl	80001e8 <__aeabi_dmul>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fc4b 	bl	80007f4 <__aeabi_d2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	ee00 3a10 	vmov	s0, r3
 8002f64:	f009 ff1e 	bl	800cda4 <arm_sin_f32>
 8002f68:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002f6c:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <sampling+0xff0>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f74:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	4a6e      	ldr	r2, [pc, #440]	; (8003138 <sampling+0x1008>)
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002f86:	4b6b      	ldr	r3, [pc, #428]	; (8003134 <sampling+0x1004>)
 8002f88:	7a1b      	ldrb	r3, [r3, #8]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fba8 	bl	80006e0 <__aeabi_i2d>
 8002f90:	a35f      	add	r3, pc, #380	; (adr r3, 8003110 <sampling+0xfe0>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd f927 	bl	80001e8 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fc27 	bl	80007f4 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	ee00 3a10 	vmov	s0, r3
 8002fac:	f009 fefa 	bl	800cda4 <arm_sin_f32>
 8002fb0:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002fb4:	4b5a      	ldr	r3, [pc, #360]	; (8003120 <sampling+0xff0>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fbc:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc4:	4a5c      	ldr	r2, [pc, #368]	; (8003138 <sampling+0x1008>)
 8002fc6:	3309      	adds	r3, #9
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002fd0:	4b58      	ldr	r3, [pc, #352]	; (8003134 <sampling+0x1004>)
 8002fd2:	7c1b      	ldrb	r3, [r3, #16]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd fb83 	bl	80006e0 <__aeabi_i2d>
 8002fda:	a34d      	add	r3, pc, #308	; (adr r3, 8003110 <sampling+0xfe0>)
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f7fd f902 	bl	80001e8 <__aeabi_dmul>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fc02 	bl	80007f4 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	ee00 3a10 	vmov	s0, r3
 8002ff6:	f009 fed5 	bl	800cda4 <arm_sin_f32>
 8002ffa:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002ffe:	4b48      	ldr	r3, [pc, #288]	; (8003120 <sampling+0xff0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003006:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <sampling+0x1008>)
 8003010:	3312      	adds	r3, #18
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 800301a:	4b46      	ldr	r3, [pc, #280]	; (8003134 <sampling+0x1004>)
 800301c:	7e1b      	ldrb	r3, [r3, #24]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fb5e 	bl	80006e0 <__aeabi_i2d>
 8003024:	a33a      	add	r3, pc, #232	; (adr r3, 8003110 <sampling+0xfe0>)
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f7fd f8dd 	bl	80001e8 <__aeabi_dmul>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f7fd fbdd 	bl	80007f4 <__aeabi_d2f>
 800303a:	4603      	mov	r3, r0
 800303c:	ee00 3a10 	vmov	s0, r3
 8003040:	f009 feb0 	bl	800cda4 <arm_sin_f32>
 8003044:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <sampling+0xff0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003050:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8003054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003058:	4a37      	ldr	r2, [pc, #220]	; (8003138 <sampling+0x1008>)
 800305a:	331b      	adds	r3, #27
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8003064:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003068:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 800306c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003070:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003072:	4413      	add	r3, r2
 8003074:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 8003078:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800307c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003080:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003084:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8003086:	4413      	add	r3, r2
 8003088:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 800308c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003090:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8003094:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003098:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800309a:	4413      	add	r3, r2
 800309c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 80030a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030a4:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80030a8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80030ac:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80030ae:	4413      	add	r3, r2
 80030b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 80030b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80030b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030bc:	db04      	blt.n	80030c8 <sampling+0xf98>
 80030be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80030c2:	425b      	negs	r3, r3
 80030c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 80030c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80030cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030d0:	db04      	blt.n	80030dc <sampling+0xfac>
 80030d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80030d6:	425b      	negs	r3, r3
 80030d8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 80030dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030e4:	db04      	blt.n	80030f0 <sampling+0xfc0>
 80030e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ea:	425b      	negs	r3, r3
 80030ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 80030f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030f8:	db20      	blt.n	800313c <sampling+0x100c>
 80030fa:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80030fe:	425b      	negs	r3, r3
 8003100:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003104:	e01a      	b.n	800313c <sampling+0x100c>
 8003106:	bf00      	nop
 8003108:	f9378ee3 	.word	0xf9378ee3
 800310c:	3f793a2d 	.word	0x3f793a2d
 8003110:	bc6a7efa 	.word	0xbc6a7efa
 8003114:	3f789374 	.word	0x3f789374
 8003118:	2000991a 	.word	0x2000991a
 800311c:	20009918 	.word	0x20009918
 8003120:	2000ed10 	.word	0x2000ed10
 8003124:	2000cb10 	.word	0x2000cb10
 8003128:	20008ebc 	.word	0x20008ebc
 800312c:	20012802 	.word	0x20012802
 8003130:	200121cc 	.word	0x200121cc
 8003134:	20008e9c 	.word	0x20008e9c
 8003138:	2000c1e8 	.word	0x2000c1e8

			sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 800313c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003140:	2b00      	cmp	r3, #0
 8003142:	bfb8      	it	lt
 8003144:	425b      	neglt	r3, r3
 8003146:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8003150:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003154:	2b00      	cmp	r3, #0
 8003156:	bfb8      	it	lt
 8003158:	425b      	neglt	r3, r3
 800315a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8003164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003168:	2b00      	cmp	r3, #0
 800316a:	bfb8      	it	lt
 800316c:	425b      	neglt	r3, r3
 800316e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8003178:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfb8      	it	lt
 8003180:	425b      	neglt	r3, r3
 8003182:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 800318c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003190:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <sampling+0x11d8>)
 800319a:	79d2      	ldrb	r2, [r2, #7]
 800319c:	fb02 f303 	mul.w	r3, r2, r3
 80031a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp2=(sample_temp1)>>2;
 80031a4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80031a8:	109b      	asrs	r3, r3, #2
 80031aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 80031ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a53      	ldr	r2, [pc, #332]	; (8003308 <sampling+0x11d8>)
 80031bc:	7d52      	ldrb	r2, [r2, #21]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp3=sample_temp1>>2; // 20+8
 80031c6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80031ca:	109b      	asrs	r3, r3, #2
 80031cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c


					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 80031d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4a      	ldr	r2, [pc, #296]	; (8003308 <sampling+0x11d8>)
 80031de:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 80031ea:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80031ee:	109b      	asrs	r3, r3, #2
 80031f0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

					if (note[3].position) {sample_Accu[9]=sample_input;sample_Accu[8]=sample_input;sample_Accu[7]=sample_input;sample_Accu[6]=sample_input;}
 80031f4:	4b44      	ldr	r3, [pc, #272]	; (8003308 <sampling+0x11d8>)
 80031f6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01b      	beq.n	8003236 <sampling+0x1106>
 80031fe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003202:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800320c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003210:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800321a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800321e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003228:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800322c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8003236:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800323a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a31      	ldr	r2, [pc, #196]	; (8003308 <sampling+0x11d8>)
 8003244:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8003248:	fb02 f303 	mul.w	r3, r2, r3
 800324c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp5 =sample_temp1>>2;
 8003250:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003254:	109b      	asrs	r3, r3, #2
 8003256:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	play_holder0[i]=sample_temp2;  // write to bank
 800325a:	4b2c      	ldr	r3, [pc, #176]	; (800330c <sampling+0x11dc>)
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	4619      	mov	r1, r3
 8003260:	4a2b      	ldr	r2, [pc, #172]	; (8003310 <sampling+0x11e0>)
 8003262:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003266:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <sampling+0x11dc>)
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	4619      	mov	r1, r3
 8003270:	4a28      	ldr	r2, [pc, #160]	; (8003314 <sampling+0x11e4>)
 8003272:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003276:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <sampling+0x11dc>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4a25      	ldr	r2, [pc, #148]	; (8003318 <sampling+0x11e8>)
 8003282:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003286:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <sampling+0x11dc>)
 800328c:	881b      	ldrh	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <sampling+0x11ec>)
 8003292:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003296:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <sampling+0x11dc>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <sampling+0x11dc>)
 80032a4:	801a      	strh	r2, [r3, #0]
 80032a6:	4b19      	ldr	r3, [pc, #100]	; (800330c <sampling+0x11dc>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ae:	f4ff ad99 	bcc.w	8002de4 <sampling+0xcb4>
	} // end of osc , doing some sound

						    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <sampling+0x11d8>)
 80032b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <sampling+0x1198>
 80032bc:	4b18      	ldr	r3, [pc, #96]	; (8003320 <sampling+0x11f0>)
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032c4:	4a16      	ldr	r2, [pc, #88]	; (8003320 <sampling+0x11f0>)
 80032c6:	6253      	str	r3, [r2, #36]	; 0x24

    memcpy(&sample_accus_hold,sample_accus,16);
 80032c8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80032cc:	2210      	movs	r2, #16
 80032ce:	4619      	mov	r1, r3
 80032d0:	4814      	ldr	r0, [pc, #80]	; (8003324 <sampling+0x11f4>)
 80032d2:	f009 fdd9 	bl	800ce88 <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 80032d6:	4914      	ldr	r1, [pc, #80]	; (8003328 <sampling+0x11f8>)
 80032d8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032dc:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80032e0:	460b      	mov	r3, r1
 80032e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032e6:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 80032ea:	4a10      	ldr	r2, [pc, #64]	; (800332c <sampling+0x11fc>)
 80032ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80032f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	2350      	movs	r3, #80	; 0x50
 80032fa:	461a      	mov	r2, r3
 80032fc:	f009 fdc4 	bl	800ce88 <memcpy>
    int32_t filter_Accu2;

    //uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003300:	4b02      	ldr	r3, [pc, #8]	; (800330c <sampling+0x11dc>)
 8003302:	2200      	movs	r2, #0
 8003304:	801a      	strh	r2, [r3, #0]
 8003306:	e2dd      	b.n	80038c4 <sampling+0x1794>
 8003308:	20008e10 	.word	0x20008e10
 800330c:	2000991a 	.word	0x2000991a
 8003310:	20010514 	.word	0x20010514
 8003314:	2000ed14 	.word	0x2000ed14
 8003318:	2000f514 	.word	0x2000f514
 800331c:	2000fd14 	.word	0x2000fd14
 8003320:	200098b0 	.word	0x200098b0
 8003324:	2000c130 	.word	0x2000c130
 8003328:	200093cc 	.word	0x200093cc
 800332c:	2000937c 	.word	0x2000937c
				i_total=i+sample_pointB;
 8003330:	4bbd      	ldr	r3, [pc, #756]	; (8003628 <sampling+0x14f8>)
 8003332:	881a      	ldrh	r2, [r3, #0]
 8003334:	4bbd      	ldr	r3, [pc, #756]	; (800362c <sampling+0x14fc>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	4413      	add	r3, r2
 800333a:	f8a7 3190 	strh.w	r3, [r7, #400]	; 0x190

			sampling_position=(i>>6);
 800333e:	4bba      	ldr	r3, [pc, #744]	; (8003628 <sampling+0x14f8>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	b29b      	uxth	r3, r3
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4bb9      	ldr	r3, [pc, #740]	; (8003630 <sampling+0x1500>)
 800334a:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 800334c:	4bb6      	ldr	r3, [pc, #728]	; (8003628 <sampling+0x14f8>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800335a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800335e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003362:	4ab1      	ldr	r2, [pc, #708]	; (8003628 <sampling+0x14f8>)
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	f002 021f 	and.w	r2, r2, #31
 800336a:	2101      	movs	r1, #1
 800336c:	fa01 f202 	lsl.w	r2, r1, r2
 8003370:	4293      	cmp	r3, r2
 8003372:	d10f      	bne.n	8003394 <sampling+0x1264>
 8003374:	4baf      	ldr	r3, [pc, #700]	; (8003634 <sampling+0x1504>)
 8003376:	2200      	movs	r2, #0
 8003378:	711a      	strb	r2, [r3, #4]
 800337a:	4baf      	ldr	r3, [pc, #700]	; (8003638 <sampling+0x1508>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	4bad      	ldr	r3, [pc, #692]	; (8003638 <sampling+0x1508>)
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	4bac      	ldr	r3, [pc, #688]	; (8003638 <sampling+0x1508>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338e:	b29a      	uxth	r2, r3
 8003390:	4ba9      	ldr	r3, [pc, #676]	; (8003638 <sampling+0x1508>)
 8003392:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 8003394:	4ba4      	ldr	r3, [pc, #656]	; (8003628 <sampling+0x14f8>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4ba8      	ldr	r3, [pc, #672]	; (800363c <sampling+0x150c>)
 800339c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033a4:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <sampling+0x14f8>)
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80033b0:	49a3      	ldr	r1, [pc, #652]	; (8003640 <sampling+0x1510>)
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 80033b6:	4b9c      	ldr	r3, [pc, #624]	; (8003628 <sampling+0x14f8>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4ba1      	ldr	r3, [pc, #644]	; (8003644 <sampling+0x1514>)
 80033be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033c6:	4b98      	ldr	r3, [pc, #608]	; (8003628 <sampling+0x14f8>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80033d2:	499d      	ldr	r1, [pc, #628]	; (8003648 <sampling+0x1518>)
 80033d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 80033d8:	4b93      	ldr	r3, [pc, #588]	; (8003628 <sampling+0x14f8>)
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b9b      	ldr	r3, [pc, #620]	; (800364c <sampling+0x151c>)
 80033e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033e8:	4b8f      	ldr	r3, [pc, #572]	; (8003628 <sampling+0x14f8>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80033f4:	4996      	ldr	r1, [pc, #600]	; (8003650 <sampling+0x1520>)
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 80033fa:	4b8b      	ldr	r3, [pc, #556]	; (8003628 <sampling+0x14f8>)
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b94      	ldr	r3, [pc, #592]	; (8003654 <sampling+0x1524>)
 8003402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800340a:	4b87      	ldr	r3, [pc, #540]	; (8003628 <sampling+0x14f8>)
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	f003 031f 	and.w	r3, r3, #31
 8003412:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003416:	4990      	ldr	r1, [pc, #576]	; (8003658 <sampling+0x1528>)
 8003418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 800341c:	4b8f      	ldr	r3, [pc, #572]	; (800365c <sampling+0x152c>)
 800341e:	789b      	ldrb	r3, [r3, #2]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <sampling+0x131a>
 8003424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003428:	105a      	asrs	r2, r3, #1
 800342a:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <sampling+0x14f8>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	4619      	mov	r1, r3
 8003430:	4b8a      	ldr	r3, [pc, #552]	; (800365c <sampling+0x152c>)
 8003432:	789b      	ldrb	r3, [r3, #2]
 8003434:	1acb      	subs	r3, r1, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	4980      	ldr	r1, [pc, #512]	; (8003640 <sampling+0x1510>)
 800343e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003442:	105b      	asrs	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 800344a:	4b84      	ldr	r3, [pc, #528]	; (800365c <sampling+0x152c>)
 800344c:	7a9b      	ldrb	r3, [r3, #10]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <sampling+0x1348>
 8003452:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003456:	105a      	asrs	r2, r3, #1
 8003458:	4b73      	ldr	r3, [pc, #460]	; (8003628 <sampling+0x14f8>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	4619      	mov	r1, r3
 800345e:	4b7f      	ldr	r3, [pc, #508]	; (800365c <sampling+0x152c>)
 8003460:	7a9b      	ldrb	r3, [r3, #10]
 8003462:	1acb      	subs	r3, r1, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	4977      	ldr	r1, [pc, #476]	; (8003648 <sampling+0x1518>)
 800346c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003470:	105b      	asrs	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 8003478:	4b78      	ldr	r3, [pc, #480]	; (800365c <sampling+0x152c>)
 800347a:	7c9b      	ldrb	r3, [r3, #18]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d012      	beq.n	80034a6 <sampling+0x1376>
 8003480:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003484:	105a      	asrs	r2, r3, #1
 8003486:	4b68      	ldr	r3, [pc, #416]	; (8003628 <sampling+0x14f8>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <sampling+0x152c>)
 800348e:	7c9b      	ldrb	r3, [r3, #18]
 8003490:	1acb      	subs	r3, r1, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	f003 031f 	and.w	r3, r3, #31
 8003498:	496d      	ldr	r1, [pc, #436]	; (8003650 <sampling+0x1520>)
 800349a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800349e:	105b      	asrs	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 80034a6:	4b6d      	ldr	r3, [pc, #436]	; (800365c <sampling+0x152c>)
 80034a8:	7e9b      	ldrb	r3, [r3, #26]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d012      	beq.n	80034d4 <sampling+0x13a4>
 80034ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034b2:	105a      	asrs	r2, r3, #1
 80034b4:	4b5c      	ldr	r3, [pc, #368]	; (8003628 <sampling+0x14f8>)
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	4619      	mov	r1, r3
 80034ba:	4b68      	ldr	r3, [pc, #416]	; (800365c <sampling+0x152c>)
 80034bc:	7e9b      	ldrb	r3, [r3, #26]
 80034be:	1acb      	subs	r3, r1, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	4964      	ldr	r1, [pc, #400]	; (8003658 <sampling+0x1528>)
 80034c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034cc:	105b      	asrs	r3, r3, #1
 80034ce:	4413      	add	r3, r2
 80034d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 80034d4:	4b54      	ldr	r3, [pc, #336]	; (8003628 <sampling+0x14f8>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <sampling+0x13b4>
 80034e0:	f000 fc02 	bl	8003ce8 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f0:	4b5b      	ldr	r3, [pc, #364]	; (8003660 <sampling+0x1530>)
 80034f2:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 80034f6:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <sampling+0x1530>)
 80034f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80034fc:	4b58      	ldr	r3, [pc, #352]	; (8003660 <sampling+0x1530>)
 80034fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <sampling+0x1534>)
 8003504:	edd3 7a00 	vldr	s15, [r3]
 8003508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <sampling+0x1530>)
 8003512:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <sampling+0x1530>)
 8003518:	ed93 7a01 	vldr	s14, [r3, #4]
 800351c:	4b52      	ldr	r3, [pc, #328]	; (8003668 <sampling+0x1538>)
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003526:	4b4e      	ldr	r3, [pc, #312]	; (8003660 <sampling+0x1530>)
 8003528:	edd3 6a02 	vldr	s13, [r3, #8]
 800352c:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <sampling+0x1538>)
 800352e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353a:	4b49      	ldr	r3, [pc, #292]	; (8003660 <sampling+0x1530>)
 800353c:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <sampling+0x1530>)
 8003542:	ed93 7a02 	vldr	s14, [r3, #8]
 8003546:	4b48      	ldr	r3, [pc, #288]	; (8003668 <sampling+0x1538>)
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <sampling+0x1530>)
 8003552:	edd3 6a03 	vldr	s13, [r3, #12]
 8003556:	4b44      	ldr	r3, [pc, #272]	; (8003668 <sampling+0x1538>)
 8003558:	edd3 7a01 	vldr	s15, [r3, #4]
 800355c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	4b3e      	ldr	r3, [pc, #248]	; (8003660 <sampling+0x1530>)
 8003566:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <sampling+0x1530>)
 800356c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003574:	ee17 3a90 	vmov	r3, s15
 8003578:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 800357c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003588:	4b35      	ldr	r3, [pc, #212]	; (8003660 <sampling+0x1530>)
 800358a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <sampling+0x1530>)
 8003590:	ed93 7a04 	vldr	s14, [r3, #16]
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <sampling+0x1530>)
 8003596:	edd3 6a06 	vldr	s13, [r3, #24]
 800359a:	4b32      	ldr	r3, [pc, #200]	; (8003664 <sampling+0x1534>)
 800359c:	edd3 7a01 	vldr	s15, [r3, #4]
 80035a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <sampling+0x1530>)
 80035aa:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <sampling+0x1530>)
 80035b0:	ed93 7a04 	vldr	s14, [r3, #16]
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <sampling+0x1538>)
 80035b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035be:	4b28      	ldr	r3, [pc, #160]	; (8003660 <sampling+0x1530>)
 80035c0:	edd3 6a05 	vldr	s13, [r3, #20]
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <sampling+0x1538>)
 80035c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80035ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <sampling+0x1530>)
 80035d4:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <sampling+0x1530>)
 80035da:	ed93 7a05 	vldr	s14, [r3, #20]
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <sampling+0x1538>)
 80035e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80035e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035e8:	4b1d      	ldr	r3, [pc, #116]	; (8003660 <sampling+0x1530>)
 80035ea:	edd3 6a06 	vldr	s13, [r3, #24]
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <sampling+0x1538>)
 80035f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80035f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fc:	4b18      	ldr	r3, [pc, #96]	; (8003660 <sampling+0x1530>)
 80035fe:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003602:	4b17      	ldr	r3, [pc, #92]	; (8003660 <sampling+0x1530>)
 8003604:	edd3 7a06 	vldr	s15, [r3, #24]
 8003608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360c:	ee17 3a90 	vmov	r3, s15
 8003610:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		filter_accus[7]=sample_Accu[2];
 8003614:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003618:	ee07 3a90 	vmov	s15, r3
 800361c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <sampling+0x1530>)
 8003622:	edc3 7a07 	vstr	s15, [r3, #28]
 8003626:	e021      	b.n	800366c <sampling+0x153c>
 8003628:	2000991a 	.word	0x2000991a
 800362c:	20009918 	.word	0x20009918
 8003630:	2000ed10 	.word	0x2000ed10
 8003634:	2000d2c8 	.word	0x2000d2c8
 8003638:	2000c278 	.word	0x2000c278
 800363c:	20010514 	.word	0x20010514
 8003640:	20011f54 	.word	0x20011f54
 8003644:	2000ed14 	.word	0x2000ed14
 8003648:	20011fd4 	.word	0x20011fd4
 800364c:	2000f514 	.word	0x2000f514
 8003650:	20012054 	.word	0x20012054
 8003654:	2000fd14 	.word	0x2000fd14
 8003658:	200120d4 	.word	0x200120d4
 800365c:	20008e9c 	.word	0x20008e9c
 8003660:	2000c18c 	.word	0x2000c18c
 8003664:	2000c178 	.word	0x2000c178
 8003668:	2000c1c8 	.word	0x2000c1c8
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 800366c:	4ba6      	ldr	r3, [pc, #664]	; (8003908 <sampling+0x17d8>)
 800366e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003672:	4ba5      	ldr	r3, [pc, #660]	; (8003908 <sampling+0x17d8>)
 8003674:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003678:	4ba4      	ldr	r3, [pc, #656]	; (800390c <sampling+0x17dc>)
 800367a:	edd3 7a02 	vldr	s15, [r3, #8]
 800367e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003686:	4ba0      	ldr	r3, [pc, #640]	; (8003908 <sampling+0x17d8>)
 8003688:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 800368c:	4b9e      	ldr	r3, [pc, #632]	; (8003908 <sampling+0x17d8>)
 800368e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003692:	4b9f      	ldr	r3, [pc, #636]	; (8003910 <sampling+0x17e0>)
 8003694:	edd3 7a04 	vldr	s15, [r3, #16]
 8003698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800369c:	4b9a      	ldr	r3, [pc, #616]	; (8003908 <sampling+0x17d8>)
 800369e:	edd3 6a08 	vldr	s13, [r3, #32]
 80036a2:	4b9b      	ldr	r3, [pc, #620]	; (8003910 <sampling+0x17e0>)
 80036a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80036a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b0:	4b95      	ldr	r3, [pc, #596]	; (8003908 <sampling+0x17d8>)
 80036b2:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 80036b6:	4b94      	ldr	r3, [pc, #592]	; (8003908 <sampling+0x17d8>)
 80036b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80036bc:	4b94      	ldr	r3, [pc, #592]	; (8003910 <sampling+0x17e0>)
 80036be:	edd3 7a04 	vldr	s15, [r3, #16]
 80036c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036c6:	4b90      	ldr	r3, [pc, #576]	; (8003908 <sampling+0x17d8>)
 80036c8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80036cc:	4b90      	ldr	r3, [pc, #576]	; (8003910 <sampling+0x17e0>)
 80036ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80036d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036da:	4b8b      	ldr	r3, [pc, #556]	; (8003908 <sampling+0x17d8>)
 80036dc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 80036e0:	4b89      	ldr	r3, [pc, #548]	; (8003908 <sampling+0x17d8>)
 80036e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80036e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ea:	ee17 3a90 	vmov	r3, s15
 80036ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				filter_accus[10]=sample_Accu[3];
 80036f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fe:	4b82      	ldr	r3, [pc, #520]	; (8003908 <sampling+0x17d8>)
 8003700:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 8003704:	4b80      	ldr	r3, [pc, #512]	; (8003908 <sampling+0x17d8>)
 8003706:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800370a:	4b7f      	ldr	r3, [pc, #508]	; (8003908 <sampling+0x17d8>)
 800370c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003710:	4b7e      	ldr	r3, [pc, #504]	; (800390c <sampling+0x17dc>)
 8003712:	edd3 7a03 	vldr	s15, [r3, #12]
 8003716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800371a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371e:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <sampling+0x17d8>)
 8003720:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 8003724:	4b78      	ldr	r3, [pc, #480]	; (8003908 <sampling+0x17d8>)
 8003726:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800372a:	4b79      	ldr	r3, [pc, #484]	; (8003910 <sampling+0x17e0>)
 800372c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003734:	4b74      	ldr	r3, [pc, #464]	; (8003908 <sampling+0x17d8>)
 8003736:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800373a:	4b75      	ldr	r3, [pc, #468]	; (8003910 <sampling+0x17e0>)
 800373c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003748:	4b6f      	ldr	r3, [pc, #444]	; (8003908 <sampling+0x17d8>)
 800374a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 800374e:	4b6e      	ldr	r3, [pc, #440]	; (8003908 <sampling+0x17d8>)
 8003750:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003754:	4b6e      	ldr	r3, [pc, #440]	; (8003910 <sampling+0x17e0>)
 8003756:	edd3 7a06 	vldr	s15, [r3, #24]
 800375a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800375e:	4b6a      	ldr	r3, [pc, #424]	; (8003908 <sampling+0x17d8>)
 8003760:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003764:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <sampling+0x17e0>)
 8003766:	edd3 7a07 	vldr	s15, [r3, #28]
 800376a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800376e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003772:	4b65      	ldr	r3, [pc, #404]	; (8003908 <sampling+0x17d8>)
 8003774:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 8003778:	4b63      	ldr	r3, [pc, #396]	; (8003908 <sampling+0x17d8>)
 800377a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800377e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003782:	ee17 3a90 	vmov	r3, s15
 8003786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003790:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003794:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		//if  (record_output)  {
		filter_Accu = (sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3] )>>10 ;
 8003798:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800379c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037a0:	441a      	add	r2, r3
 80037a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80037a6:	441a      	add	r2, r3
 80037a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037ac:	4413      	add	r3, r2
 80037ae:	129b      	asrs	r3, r3, #10
 80037b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		filter_Accu =filter_Accu+32767;
 80037b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80037b8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80037bc:	337f      	adds	r3, #127	; 0x7f
 80037be:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

		  debug_value=filter_Accu;
 80037c2:	4a54      	ldr	r2, [pc, #336]	; (8003914 <sampling+0x17e4>)
 80037c4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80037c8:	6013      	str	r3, [r2, #0]
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 80037ca:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80037ce:	121a      	asrs	r2, r3, #8
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <sampling+0x17e8>)
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80037d8:	3301      	adds	r3, #1
 80037da:	b2d1      	uxtb	r1, r2
 80037dc:	4a4f      	ldr	r2, [pc, #316]	; (800391c <sampling+0x17ec>)
 80037de:	54d1      	strb	r1, [r2, r3]
		output_mix[(i&510)]=filter_Accu&255;
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <sampling+0x17e8>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80037e8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80037ec:	b2d1      	uxtb	r1, r2
 80037ee:	4a4b      	ldr	r2, [pc, #300]	; (800391c <sampling+0x17ec>)
 80037f0:	54d1      	strb	r1, [r2, r3]


	//	}

		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 80037f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80037f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037fa:	4413      	add	r3, r2
 80037fc:	141b      	asrs	r3, r3, #16
 80037fe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003802:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800380a:	4413      	add	r3, r2
 800380c:	141b      	asrs	r3, r3, #16
 800380e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003812:	4b43      	ldr	r3, [pc, #268]	; (8003920 <sampling+0x17f0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2bc7      	cmp	r3, #199	; 0xc7
 8003818:	d005      	beq.n	8003826 <sampling+0x16f6>
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <sampling+0x17f0>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <sampling+0x17f0>)
 8003824:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003826:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800382a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382e:	db0a      	blt.n	8003846 <sampling+0x1716>
 8003830:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003834:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003838:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <sampling+0x17f4>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	4b38      	ldr	r3, [pc, #224]	; (8003924 <sampling+0x17f4>)
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e007      	b.n	8003856 <sampling+0x1726>
 8003846:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800384a:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800384e:	dc02      	bgt.n	8003856 <sampling+0x1726>
 8003850:	4b35      	ldr	r3, [pc, #212]	; (8003928 <sampling+0x17f8>)
 8003852:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003856:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800385e:	db0a      	blt.n	8003876 <sampling+0x1746>
 8003860:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003864:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003868:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <sampling+0x17f4>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	b2da      	uxtb	r2, r3
 8003870:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <sampling+0x17f4>)
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e007      	b.n	8003886 <sampling+0x1756>
 8003876:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800387a:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 800387e:	dc02      	bgt.n	8003886 <sampling+0x1756>
 8003880:	4b29      	ldr	r3, [pc, #164]	; (8003928 <sampling+0x17f8>)
 8003882:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003886:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800388a:	b29a      	uxth	r2, r3
 800388c:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003896:	b291      	uxth	r1, r2
 8003898:	4a24      	ldr	r2, [pc, #144]	; (800392c <sampling+0x17fc>)
 800389a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 800389e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	3301      	adds	r3, #1
 80038ac:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80038b0:	b291      	uxth	r1, r2
 80038b2:	4a1e      	ldr	r2, [pc, #120]	; (800392c <sampling+0x17fc>)
 80038b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <sampling+0x17e8>)
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	3301      	adds	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <sampling+0x17e8>)
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <sampling+0x17e8>)
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038cc:	f4ff ad30 	bcc.w	8003330 <sampling+0x1200>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <sampling+0x1800>)
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <sampling+0x17b6>
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <sampling+0x1804>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3301      	adds	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	4b14      	ldr	r3, [pc, #80]	; (8003934 <sampling+0x1804>)
 80038e4:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <sampling+0x1808>)
 80038e8:	881a      	ldrh	r2, [r3, #0]
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <sampling+0x180c>)
 80038ec:	801a      	strh	r2, [r3, #0]
		if  (record_output)  record_output_to_RAM();
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <sampling+0x1810>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <sampling+0x17cc>
 80038f8:	f001 fc18 	bl	800512c <record_output_to_RAM>

		//bank_write=0;   /// total 320 sample time (39khz)
		}
 80038fc:	bf00      	nop
 80038fe:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 8003902:	46bd      	mov	sp, r7
 8003904:	bdb0      	pop	{r4, r5, r7, pc}
 8003906:	bf00      	nop
 8003908:	2000c18c 	.word	0x2000c18c
 800390c:	2000c178 	.word	0x2000c178
 8003910:	2000c1c8 	.word	0x2000c1c8
 8003914:	200121d0 	.word	0x200121d0
 8003918:	2000991a 	.word	0x2000991a
 800391c:	20012808 	.word	0x20012808
 8003920:	2000c148 	.word	0x2000c148
 8003924:	20010d14 	.word	0x20010d14
 8003928:	fffffc01 	.word	0xfffffc01
 800392c:	2000991c 	.word	0x2000991c
 8003930:	20008e0a 	.word	0x20008e0a
 8003934:	2000cf1a 	.word	0x2000cf1a
 8003938:	2000cf18 	.word	0x2000cf18
 800393c:	2000cf14 	.word	0x2000cf14
 8003940:	20012805 	.word	0x20012805

08003944 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003944:	b490      	push	{r4, r7}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 800394a:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <LFO_square_one_pulse+0x104>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	717b      	strb	r3, [r7, #5]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003950:	2307      	movs	r3, #7
 8003952:	71fb      	strb	r3, [r7, #7]
	uint8_t lfo_c ;
	//uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t pulse_high;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003954:	2300      	movs	r3, #0
 8003956:	71bb      	strb	r3, [r7, #6]
 8003958:	e06c      	b.n	8003a34 <LFO_square_one_pulse+0xf0>

	    pulse_low=LFO_square[lfo_c].rate;
 800395a:	79ba      	ldrb	r2, [r7, #6]
 800395c:	493b      	ldr	r1, [pc, #236]	; (8003a4c <LFO_square_one_pulse+0x108>)
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	713b      	strb	r3, [r7, #4]
	 //   if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
	    pulse_high=LFO_square[lfo_c].delay;
 800396c:	79ba      	ldrb	r2, [r7, #6]
 800396e:	4937      	ldr	r1, [pc, #220]	; (8003a4c <LFO_square_one_pulse+0x108>)
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3303      	adds	r3, #3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	70fb      	strb	r3, [r7, #3]

	    if (pulse_low<64) 						 {seq_div=63;}  // This is the end
 8003980:	793b      	ldrb	r3, [r7, #4]
 8003982:	2b3f      	cmp	r3, #63	; 0x3f
 8003984:	d801      	bhi.n	800398a <LFO_square_one_pulse+0x46>
 8003986:	233f      	movs	r3, #63	; 0x3f
 8003988:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<32) 								 {seq_div=31;}
 800398a:	793b      	ldrb	r3, [r7, #4]
 800398c:	2b1f      	cmp	r3, #31
 800398e:	d801      	bhi.n	8003994 <LFO_square_one_pulse+0x50>
 8003990:	231f      	movs	r3, #31
 8003992:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<16) 								{ seq_div=15;}
 8003994:	793b      	ldrb	r3, [r7, #4]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	d801      	bhi.n	800399e <LFO_square_one_pulse+0x5a>
 800399a:	230f      	movs	r3, #15
 800399c:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<8) 									 {seq_div=7;}
 800399e:	793b      	ldrb	r3, [r7, #4]
 80039a0:	2b07      	cmp	r3, #7
 80039a2:	d801      	bhi.n	80039a8 <LFO_square_one_pulse+0x64>
 80039a4:	2307      	movs	r3, #7
 80039a6:	71fb      	strb	r3, [r7, #7]

	    //pulse_high=(pulse_high*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80039a8:	797a      	ldrb	r2, [r7, #5]
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	4013      	ands	r3, r2
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	793a      	ldrb	r2, [r7, #4]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d321      	bcc.n	80039fa <LFO_square_one_pulse+0xb6>
 80039b6:	797a      	ldrb	r2, [r7, #5]
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	4013      	ands	r3, r2
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d81a      	bhi.n	80039fa <LFO_square_one_pulse+0xb6>
 80039c4:	79ba      	ldrb	r2, [r7, #6]
 80039c6:	4921      	ldr	r1, [pc, #132]	; (8003a4c <LFO_square_one_pulse+0x108>)
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	3301      	adds	r3, #1
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	79ba      	ldrb	r2, [r7, #6]
 80039da:	491d      	ldr	r1, [pc, #116]	; (8003a50 <LFO_square_one_pulse+0x10c>)
 80039dc:	7809      	ldrb	r1, [r1, #0]
 80039de:	460c      	mov	r4, r1
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	b298      	uxth	r0, r3
 80039e4:	4919      	ldr	r1, [pc, #100]	; (8003a4c <LFO_square_one_pulse+0x108>)
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4423      	add	r3, r4
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	4602      	mov	r2, r0
 80039f6:	809a      	strh	r2, [r3, #4]
 80039f8:	e019      	b.n	8003a2e <LFO_square_one_pulse+0xea>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 80039fa:	79ba      	ldrb	r2, [r7, #6]
 80039fc:	4913      	ldr	r1, [pc, #76]	; (8003a4c <LFO_square_one_pulse+0x108>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3302      	adds	r3, #2
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	79ba      	ldrb	r2, [r7, #6]
 8003a10:	490f      	ldr	r1, [pc, #60]	; (8003a50 <LFO_square_one_pulse+0x10c>)
 8003a12:	7809      	ldrb	r1, [r1, #0]
 8003a14:	460c      	mov	r4, r1
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	b298      	uxth	r0, r3
 8003a1a:	490c      	ldr	r1, [pc, #48]	; (8003a4c <LFO_square_one_pulse+0x108>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4423      	add	r3, r4
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	440b      	add	r3, r1
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003a2e:	79bb      	ldrb	r3, [r7, #6]
 8003a30:	3301      	adds	r3, #1
 8003a32:	71bb      	strb	r3, [r7, #6]
 8003a34:	79bb      	ldrb	r3, [r7, #6]
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	d98f      	bls.n	800395a <LFO_square_one_pulse+0x16>

	}
    }
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc90      	pop	{r4, r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2000dd54 	.word	0x2000dd54
 8003a4c:	2000d200 	.word	0x2000d200
 8003a50:	2000ed10 	.word	0x2000ed10
 8003a54:	00000000 	.word	0x00000000

08003a58 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok , half phase
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b08d      	sub	sp, #52	; 0x34
 8003a5c:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a7e:	e117      	b.n	8003cb0 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 8003a80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a84:	4992      	ldr	r1, [pc, #584]	; (8003cd0 <LFO_source_synced+0x278>)
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 8003a94:	8b7b      	ldrh	r3, [r7, #26]
 8003a96:	2b0a      	cmp	r3, #10
 8003a98:	d901      	bls.n	8003a9e <LFO_source_synced+0x46>
 8003a9a:	230a      	movs	r3, #10
 8003a9c:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 8003a9e:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <LFO_source_synced+0x27c>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	8b7b      	ldrh	r3, [r7, #26]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	400b      	ands	r3, r1
 8003ab0:	8b7a      	ldrh	r2, [r7, #26]
 8003ab2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ab6:	fa41 f202 	asr.w	r2, r1, r2
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8003ac0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ac4:	4982      	ldr	r1, [pc, #520]	; (8003cd0 <LFO_source_synced+0x278>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	035b      	lsls	r3, r3, #13
 8003ada:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003adc:	68b8      	ldr	r0, [r7, #8]
 8003ade:	f7fc fdef 	bl	80006c0 <__aeabi_ui2d>
 8003ae2:	a379      	add	r3, pc, #484	; (adr r3, 8003cc8 <LFO_source_synced+0x270>)
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f7fc fb7e 	bl	80001e8 <__aeabi_dmul>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4610      	mov	r0, r2
 8003af2:	4619      	mov	r1, r3
 8003af4:	f7fc fe7e 	bl	80007f4 <__aeabi_d2f>
 8003af8:	4603      	mov	r3, r0
 8003afa:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8003afc:	ed97 0a05 	vldr	s0, [r7, #20]
 8003b00:	f009 f950 	bl	800cda4 <arm_sin_f32>
 8003b04:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003b08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b0c:	4970      	ldr	r1, [pc, #448]	; (8003cd0 <LFO_source_synced+0x278>)
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3301      	adds	r3, #1
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b24:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003b28:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b34:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003cd8 <LFO_source_synced+0x280>
 8003b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b3c:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003b4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b4e:	4960      	ldr	r1, [pc, #384]	; (8003cd0 <LFO_source_synced+0x278>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3303      	adds	r3, #3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b68:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 8003b6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b74:	ee17 3a90 	vmov	r3, s15
 8003b78:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8003b7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8003b8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b8e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003cdc <LFO_source_synced+0x284>
 8003b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9a:	dd01      	ble.n	8003ba0 <LFO_source_synced+0x148>
 8003b9c:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <LFO_source_synced+0x288>)
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8003ba0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ba8:	ee17 3a90 	vmov	r3, s15
 8003bac:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d902      	bls.n	8003bbe <LFO_source_synced+0x166>
 8003bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bbc:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003bbe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bc2:	4943      	ldr	r1, [pc, #268]	; (8003cd0 <LFO_source_synced+0x278>)
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3301      	adds	r3, #1
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d902      	bls.n	8003bf2 <LFO_source_synced+0x19a>
 8003bec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003bf2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <LFO_source_synced+0x28c>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	8878      	ldrh	r0, [r7, #2]
 8003bfe:	4934      	ldr	r1, [pc, #208]	; (8003cd0 <LFO_source_synced+0x278>)
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4423      	add	r3, r4
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	440b      	add	r3, r1
 8003c0e:	4602      	mov	r2, r0
 8003c10:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003c12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c16:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <LFO_source_synced+0x28c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	461c      	mov	r4, r3
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	b298      	uxth	r0, r3
 8003c20:	492b      	ldr	r1, [pc, #172]	; (8003cd0 <LFO_source_synced+0x278>)
 8003c22:	4613      	mov	r3, r2
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	4413      	add	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4423      	add	r3, r4
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	440b      	add	r3, r1
 8003c32:	4602      	mov	r2, r0
 8003c34:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3c:	d202      	bcs.n	8003c44 <LFO_source_synced+0x1ec>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	623b      	str	r3, [r7, #32]
 8003c42:	e003      	b.n	8003c4c <LFO_source_synced+0x1f4>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003c4a:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003c4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c50:	491f      	ldr	r1, [pc, #124]	; (8003cd0 <LFO_source_synced+0x278>)
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	fb02 f303 	mul.w	r3, r2, r3
 8003c68:	11db      	asrs	r3, r3, #7
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	dd02      	ble.n	8003c82 <LFO_source_synced+0x22a>
 8003c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c80:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003c82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003c86:	4b17      	ldr	r3, [pc, #92]	; (8003ce4 <LFO_source_synced+0x28c>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461c      	mov	r4, r3
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	b298      	uxth	r0, r3
 8003c90:	490f      	ldr	r1, [pc, #60]	; (8003cd0 <LFO_source_synced+0x278>)
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	4413      	add	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4423      	add	r3, r4
 8003c9c:	3314      	adds	r3, #20
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	440b      	add	r3, r1
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003caa:	3301      	adds	r3, #1
 8003cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	f67f aee3 	bls.w	8003a80 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3734      	adds	r7, #52	; 0x34
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}
 8003cc4:	f3af 8000 	nop.w
 8003cc8:	64dc8498 	.word	0x64dc8498
 8003ccc:	3f092213 	.word	0x3f092213
 8003cd0:	2000cf1c 	.word	0x2000cf1c
 8003cd4:	2000c12c 	.word	0x2000c12c
 8003cd8:	43800000 	.word	0x43800000
 8003cdc:	477ffe00 	.word	0x477ffe00
 8003ce0:	477fff00 	.word	0x477fff00
 8003ce4:	2000ed10 	.word	0x2000ed10

08003ce8 <frq_point>:


void  frq_point(void){
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003cec:	4b84      	ldr	r3, [pc, #528]	; (8003f00 <frq_point+0x218>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	4a84      	ldr	r2, [pc, #528]	; (8003f04 <frq_point+0x21c>)
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a83      	ldr	r2, [pc, #524]	; (8003f08 <frq_point+0x220>)
 8003cfa:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003cfc:	4b80      	ldr	r3, [pc, #512]	; (8003f00 <frq_point+0x218>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	4a80      	ldr	r2, [pc, #512]	; (8003f04 <frq_point+0x21c>)
 8003d02:	3309      	adds	r3, #9
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a7f      	ldr	r2, [pc, #508]	; (8003f08 <frq_point+0x220>)
 8003d0c:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003d0e:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <frq_point+0x218>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	4a7c      	ldr	r2, [pc, #496]	; (8003f04 <frq_point+0x21c>)
 8003d14:	3312      	adds	r3, #18
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <frq_point+0x220>)
 8003d1e:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003d20:	4b77      	ldr	r3, [pc, #476]	; (8003f00 <frq_point+0x218>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	4a77      	ldr	r2, [pc, #476]	; (8003f04 <frq_point+0x21c>)
 8003d26:	331b      	adds	r3, #27
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a76      	ldr	r2, [pc, #472]	; (8003f08 <frq_point+0x220>)
 8003d30:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003d32:	4b75      	ldr	r3, [pc, #468]	; (8003f08 <frq_point+0x220>)
 8003d34:	edd3 7a00 	vldr	s15, [r3]
 8003d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	dd04      	ble.n	8003d50 <frq_point+0x68>
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <frq_point+0x220>)
 8003d48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e00b      	b.n	8003d68 <frq_point+0x80>
 8003d50:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <frq_point+0x220>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5e:	d503      	bpl.n	8003d68 <frq_point+0x80>
 8003d60:	4b69      	ldr	r3, [pc, #420]	; (8003f08 <frq_point+0x220>)
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003d68:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <frq_point+0x220>)
 8003d6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	dd04      	ble.n	8003d86 <frq_point+0x9e>
 8003d7c:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <frq_point+0x220>)
 8003d7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d82:	611a      	str	r2, [r3, #16]
 8003d84:	e00b      	b.n	8003d9e <frq_point+0xb6>
 8003d86:	4b60      	ldr	r3, [pc, #384]	; (8003f08 <frq_point+0x220>)
 8003d88:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d94:	d503      	bpl.n	8003d9e <frq_point+0xb6>
 8003d96:	4b5c      	ldr	r3, [pc, #368]	; (8003f08 <frq_point+0x220>)
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <frq_point+0x220>)
 8003da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003da4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	dd04      	ble.n	8003dbc <frq_point+0xd4>
 8003db2:	4b55      	ldr	r3, [pc, #340]	; (8003f08 <frq_point+0x220>)
 8003db4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	e00b      	b.n	8003dd4 <frq_point+0xec>
 8003dbc:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <frq_point+0x220>)
 8003dbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	d503      	bpl.n	8003dd4 <frq_point+0xec>
 8003dcc:	4b4e      	ldr	r3, [pc, #312]	; (8003f08 <frq_point+0x220>)
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003dd4:	4b4c      	ldr	r3, [pc, #304]	; (8003f08 <frq_point+0x220>)
 8003dd6:	edd3 7a06 	vldr	s15, [r3, #24]
 8003dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de6:	dd04      	ble.n	8003df2 <frq_point+0x10a>
 8003de8:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <frq_point+0x220>)
 8003dea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003dee:	619a      	str	r2, [r3, #24]
 8003df0:	e00b      	b.n	8003e0a <frq_point+0x122>
 8003df2:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <frq_point+0x220>)
 8003df4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e00:	d503      	bpl.n	8003e0a <frq_point+0x122>
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <frq_point+0x220>)
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003e0a:	4b3f      	ldr	r3, [pc, #252]	; (8003f08 <frq_point+0x220>)
 8003e0c:	edd3 7a00 	vldr	s15, [r3]
 8003e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <frq_point+0x220>)
 8003e1a:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003e1e:	4b3a      	ldr	r3, [pc, #232]	; (8003f08 <frq_point+0x220>)
 8003e20:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2c:	4b36      	ldr	r3, [pc, #216]	; (8003f08 <frq_point+0x220>)
 8003e2e:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003e32:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <frq_point+0x220>)
 8003e34:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e40:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <frq_point+0x220>)
 8003e42:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003e46:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <frq_point+0x220>)
 8003e48:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <frq_point+0x220>)
 8003e56:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003e5a:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <frq_point+0x220>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fc50 	bl	8000704 <__aeabi_f2d>
 8003e64:	a324      	add	r3, pc, #144	; (adr r3, 8003ef8 <frq_point+0x210>)
 8003e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6a:	f7fc f9bd 	bl	80001e8 <__aeabi_dmul>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4610      	mov	r0, r2
 8003e74:	4619      	mov	r1, r3
 8003e76:	f7fc fcbd 	bl	80007f4 <__aeabi_d2f>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4a23      	ldr	r2, [pc, #140]	; (8003f0c <frq_point+0x224>)
 8003e7e:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <frq_point+0x220>)
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7fc fc3d 	bl	8000704 <__aeabi_f2d>
 8003e8a:	a31b      	add	r3, pc, #108	; (adr r3, 8003ef8 <frq_point+0x210>)
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f7fc f9aa 	bl	80001e8 <__aeabi_dmul>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f7fc fcaa 	bl	80007f4 <__aeabi_d2f>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	; (8003f0c <frq_point+0x224>)
 8003ea4:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003ea6:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <frq_point+0x220>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc fc2a 	bl	8000704 <__aeabi_f2d>
 8003eb0:	a311      	add	r3, pc, #68	; (adr r3, 8003ef8 <frq_point+0x210>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc f997 	bl	80001e8 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f7fc fc97 	bl	80007f4 <__aeabi_d2f>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <frq_point+0x224>)
 8003eca:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <frq_point+0x220>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fc17 	bl	8000704 <__aeabi_f2d>
 8003ed6:	a308      	add	r3, pc, #32	; (adr r3, 8003ef8 <frq_point+0x210>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc f984 	bl	80001e8 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	f7fc fc84 	bl	80007f4 <__aeabi_d2f>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <frq_point+0x224>)
 8003ef0:	60d3      	str	r3, [r2, #12]

}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	9999999a 	.word	0x9999999a
 8003efc:	3fc99999 	.word	0x3fc99999
 8003f00:	2000ed10 	.word	0x2000ed10
 8003f04:	2000c1e8 	.word	0x2000c1e8
 8003f08:	2000c1c8 	.word	0x2000c1c8
 8003f0c:	2000c178 	.word	0x2000c178

08003f10 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0




}   // end o void
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003f26:	4b72      	ldr	r3, [pc, #456]	; (80040f0 <displayBuffer2+0x1d0>)
 8003f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b71      	ldr	r3, [pc, #452]	; (80040f4 <displayBuffer2+0x1d4>)
 8003f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	336b      	adds	r3, #107	; 0x6b
 8003f3e:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003f40:	4b6b      	ldr	r3, [pc, #428]	; (80040f0 <displayBuffer2+0x1d0>)
 8003f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <displayBuffer2+0x1d4>)
 8003f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a68      	ldr	r2, [pc, #416]	; (80040f8 <displayBuffer2+0x1d8>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b67      	ldr	r3, [pc, #412]	; (80040fc <displayBuffer2+0x1dc>)
 8003f5e:	6810      	ldr	r0, [r2, #0]
 8003f60:	6851      	ldr	r1, [r2, #4]
 8003f62:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003f64:	4a66      	ldr	r2, [pc, #408]	; (8004100 <displayBuffer2+0x1e0>)
 8003f66:	463b      	mov	r3, r7
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	8019      	strh	r1, [r3, #0]
 8003f6e:	3302      	adds	r3, #2
 8003f70:	0c12      	lsrs	r2, r2, #16
 8003f72:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003f74:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <displayBuffer2+0x1d0>)
 8003f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b61      	ldr	r3, [pc, #388]	; (8004104 <displayBuffer2+0x1e4>)
 8003f80:	4413      	add	r3, r2
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003f88:	463b      	mov	r3, r7
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f008 ff4e 	bl	800ce2c <atoi>
 8003f90:	4603      	mov	r3, r0
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	4b5c      	ldr	r3, [pc, #368]	; (8004108 <displayBuffer2+0x1e8>)
 8003f96:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003f98:	4b5b      	ldr	r3, [pc, #364]	; (8004108 <displayBuffer2+0x1e8>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4857      	ldr	r0, [pc, #348]	; (80040fc <displayBuffer2+0x1dc>)
 8003fa0:	f7fc fdfa 	bl	8000b98 <menu_vars>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	4a59      	ldr	r2, [pc, #356]	; (800410c <displayBuffer2+0x1ec>)
 8003fa8:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003faa:	88bb      	ldrh	r3, [r7, #4]
 8003fac:	3308      	adds	r3, #8
 8003fae:	4a58      	ldr	r2, [pc, #352]	; (8004110 <displayBuffer2+0x1f0>)
 8003fb0:	1898      	adds	r0, r3, r2
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a50      	ldr	r2, [pc, #320]	; (80040f8 <displayBuffer2+0x1d8>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f008 ff62 	bl	800ce88 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 8003fc4:	88bb      	ldrh	r3, [r7, #4]
 8003fc6:	3311      	adds	r3, #17
 8003fc8:	4a51      	ldr	r2, [pc, #324]	; (8004110 <displayBuffer2+0x1f0>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	4951      	ldr	r1, [pc, #324]	; (8004114 <displayBuffer2+0x1f4>)
 8003fce:	2203      	movs	r2, #3
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f008 ff59 	bl	800ce88 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003fd6:	88bb      	ldrh	r3, [r7, #4]
 8003fd8:	3305      	adds	r3, #5
 8003fda:	4a4d      	ldr	r2, [pc, #308]	; (8004110 <displayBuffer2+0x1f0>)
 8003fdc:	4413      	add	r3, r2
 8003fde:	883a      	ldrh	r2, [r7, #0]
 8003fe0:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003fe2:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <displayBuffer2+0x1f8>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d102      	bne.n	8003ff0 <displayBuffer2+0xd0>
 8003fea:	4b4c      	ldr	r3, [pc, #304]	; (800411c <displayBuffer2+0x1fc>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003ff0:	4b49      	ldr	r3, [pc, #292]	; (8004118 <displayBuffer2+0x1f8>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b24      	cmp	r3, #36	; 0x24
 8003ff6:	d102      	bne.n	8003ffe <displayBuffer2+0xde>
 8003ff8:	4b48      	ldr	r3, [pc, #288]	; (800411c <displayBuffer2+0x1fc>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003ffe:	4b46      	ldr	r3, [pc, #280]	; (8004118 <displayBuffer2+0x1f8>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b30      	cmp	r3, #48	; 0x30
 8004004:	d906      	bls.n	8004014 <displayBuffer2+0xf4>
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <displayBuffer2+0x1f8>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b34      	cmp	r3, #52	; 0x34
 800400c:	d802      	bhi.n	8004014 <displayBuffer2+0xf4>
 800400e:	4b43      	ldr	r3, [pc, #268]	; (800411c <displayBuffer2+0x1fc>)
 8004010:	2203      	movs	r2, #3
 8004012:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <displayBuffer2+0x1fc>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d054      	beq.n	80040c6 <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 800401c:	4b3b      	ldr	r3, [pc, #236]	; (800410c <displayBuffer2+0x1ec>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	2b3e      	cmp	r3, #62	; 0x3e
 8004028:	d901      	bls.n	800402e <displayBuffer2+0x10e>
 800402a:	2300      	movs	r3, #0
 800402c:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 800402e:	4b3b      	ldr	r3, [pc, #236]	; (800411c <displayBuffer2+0x1fc>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10c      	bne.n	8004050 <displayBuffer2+0x130>
 8004036:	88bb      	ldrh	r3, [r7, #4]
 8004038:	3308      	adds	r3, #8
 800403a:	4a35      	ldr	r2, [pc, #212]	; (8004110 <displayBuffer2+0x1f0>)
 800403c:	1898      	adds	r0, r3, r2
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4a2d      	ldr	r2, [pc, #180]	; (80040f8 <displayBuffer2+0x1d8>)
 8004044:	4413      	add	r3, r2
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	4619      	mov	r1, r3
 800404c:	f008 ff1c 	bl	800ce88 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8004050:	4b32      	ldr	r3, [pc, #200]	; (800411c <displayBuffer2+0x1fc>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d10c      	bne.n	8004072 <displayBuffer2+0x152>
 8004058:	88bb      	ldrh	r3, [r7, #4]
 800405a:	3308      	adds	r3, #8
 800405c:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <displayBuffer2+0x1f0>)
 800405e:	1898      	adds	r0, r3, r2
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4a2e      	ldr	r2, [pc, #184]	; (8004120 <displayBuffer2+0x200>)
 8004066:	4413      	add	r3, r2
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2208      	movs	r2, #8
 800406c:	4619      	mov	r1, r3
 800406e:	f008 ff0b 	bl	800ce88 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8004072:	4b2a      	ldr	r3, [pc, #168]	; (800411c <displayBuffer2+0x1fc>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d125      	bne.n	80040c6 <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 800407a:	4b23      	ldr	r3, [pc, #140]	; (8004108 <displayBuffer2+0x1e8>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	4a28      	ldr	r2, [pc, #160]	; (8004124 <displayBuffer2+0x204>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d017      	beq.n	80040ba <displayBuffer2+0x19a>
 800408a:	4827      	ldr	r0, [pc, #156]	; (8004128 <displayBuffer2+0x208>)
 800408c:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <displayBuffer2+0x1e8>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4a25      	ldr	r2, [pc, #148]	; (800412c <displayBuffer2+0x20c>)
 8004096:	5cd3      	ldrb	r3, [r2, r3]
 8004098:	461a      	mov	r2, r3
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <displayBuffer2+0x1d8>)
 800409c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a0:	2206      	movs	r2, #6
 80040a2:	4619      	mov	r1, r3
 80040a4:	f008 fef0 	bl	800ce88 <memcpy>
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <displayBuffer2+0x1e8>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4a1c      	ldr	r2, [pc, #112]	; (8004124 <displayBuffer2+0x204>)
 80040b2:	5cd2      	ldrb	r2, [r2, r3]
 80040b4:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <displayBuffer2+0x210>)
 80040b6:	729a      	strb	r2, [r3, #10]
 80040b8:	e005      	b.n	80040c6 <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <displayBuffer2+0x208>)
 80040bc:	2208      	movs	r2, #8
 80040be:	491d      	ldr	r1, [pc, #116]	; (8004134 <displayBuffer2+0x214>)
 80040c0:	4618      	mov	r0, r3
 80040c2:	f008 fee1 	bl	800ce88 <memcpy>
	     		    }
	     	}

	     target_display=0;
 80040c6:	4b15      	ldr	r3, [pc, #84]	; (800411c <displayBuffer2+0x1fc>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <displayBuffer2+0x218>)
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b11      	cmp	r3, #17
 80040d2:	d103      	bne.n	80040dc <displayBuffer2+0x1bc>
 80040d4:	4b18      	ldr	r3, [pc, #96]	; (8004138 <displayBuffer2+0x218>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 80040da:	e005      	b.n	80040e8 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <displayBuffer2+0x218>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <displayBuffer2+0x218>)
 80040e6:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20008ee0 	.word	0x20008ee0
 80040f4:	2000e0fc 	.word	0x2000e0fc
 80040f8:	20000000 	.word	0x20000000
 80040fc:	2000ed00 	.word	0x2000ed00
 8004100:	0800d634 	.word	0x0800d634
 8004104:	2000e8fc 	.word	0x2000e8fc
 8004108:	2000ed08 	.word	0x2000ed08
 800410c:	2000ecfc 	.word	0x2000ecfc
 8004110:	20008f7c 	.word	0x20008f7c
 8004114:	200097c4 	.word	0x200097c4
 8004118:	20010d39 	.word	0x20010d39
 800411c:	2000ed0f 	.word	0x2000ed0f
 8004120:	200000fc 	.word	0x200000fc
 8004124:	20011f48 	.word	0x20011f48
 8004128:	20012157 	.word	0x20012157
 800412c:	200121b8 	.word	0x200121b8
 8004130:	20012154 	.word	0x20012154
 8004134:	0800d628 	.word	0x0800d628
 8004138:	20008e0c 	.word	0x20008e0c

0800413c <SPI_command>:

void SPI_command(void){
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8004142:	4b18      	ldr	r3, [pc, #96]	; (80041a4 <SPI_command+0x68>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d128      	bne.n	800419c <SPI_command+0x60>
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <SPI_command+0x6c>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d124      	bne.n	800419c <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <SPI_command+0x70>)
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <SPI_command+0x2a>
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <SPI_command+0x74>)
 8004160:	22f8      	movs	r2, #248	; 0xf8
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e002      	b.n	800416c <SPI_command+0x30>
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <SPI_command+0x74>)
 8004168:	22fa      	movs	r2, #250	; 0xfa
 800416a:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 800416c:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <SPI_command+0x74>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <SPI_command+0x70>)
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	091b      	lsrs	r3, r3, #4
 8004178:	b29b      	uxth	r3, r3
 800417a:	011b      	lsls	r3, r3, #4
 800417c:	b2db      	uxtb	r3, r3
 800417e:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8004180:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <SPI_command+0x70>)
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	b2db      	uxtb	r3, r3
 8004188:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 800418a:	4639      	mov	r1, r7
 800418c:	2303      	movs	r3, #3
 800418e:	2203      	movs	r2, #3
 8004190:	4808      	ldr	r0, [pc, #32]	; (80041b4 <SPI_command+0x78>)
 8004192:	f006 f976 	bl	800a482 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8004196:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <SPI_command+0x68>)
 8004198:	2201      	movs	r2, #1
 800419a:	801a      	strh	r2, [r3, #0]
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	2000c15c 	.word	0x2000c15c
 80041a8:	2000c162 	.word	0x2000c162
 80041ac:	2000c160 	.word	0x2000c160
 80041b0:	2000c15e 	.word	0x2000c15e
 80041b4:	20012da0 	.word	0x20012da0

080041b8 <display_init>:

void display_init(void){
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <display_init+0x90>)
 80041c0:	1d3c      	adds	r4, r7, #4
 80041c2:	461d      	mov	r5, r3
 80041c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <display_init+0x94>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d132      	bne.n	800423e <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <display_init+0x98>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b06      	subs	r3, #6
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <display_init+0x9c>)
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	f7ff fe9b 	bl	8003f20 <displayBuffer2>
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <display_init+0x9c>)
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <display_init+0xa0>)
 80041f2:	5c9b      	ldrb	r3, [r3, r2]
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	4b19      	ldr	r3, [pc, #100]	; (800425c <display_init+0xa4>)
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <display_init+0x98>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b05      	cmp	r3, #5
 8004202:	d80b      	bhi.n	800421c <display_init+0x64>
 8004204:	2003      	movs	r0, #3
 8004206:	f002 fd5f 	bl	8006cc8 <HAL_Delay>
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <display_init+0x98>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	3328      	adds	r3, #40	; 0x28
 8004212:	443b      	add	r3, r7
 8004214:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004218:	4b10      	ldr	r3, [pc, #64]	; (800425c <display_init+0xa4>)
 800421a:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <display_init+0x98>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <display_init+0x98>)
 8004226:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <display_init+0x94>)
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	f7ff ff85 	bl	800413c <SPI_command>
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <display_init+0x94>)
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <display_init+0xa8>)
 800423a:	2200      	movs	r2, #0
 800423c:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 800423e:	bf00      	nop
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bdb0      	pop	{r4, r5, r7, pc}
 8004246:	bf00      	nop
 8004248:	0800d638 	.word	0x0800d638
 800424c:	2000c162 	.word	0x2000c162
 8004250:	2000c163 	.word	0x2000c163
 8004254:	2000c164 	.word	0x2000c164
 8004258:	20008cbc 	.word	0x20008cbc
 800425c:	2000c160 	.word	0x2000c160
 8004260:	2000c15c 	.word	0x2000c15c

08004264 <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 800426e:	2300      	movs	r3, #0
 8004270:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 8004272:	2300      	movs	r3, #0
 8004274:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 8004276:	2300      	movs	r3, #0
 8004278:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <gfx_TX_block+0xac>)
 800427c:	2200      	movs	r2, #0
 800427e:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004280:	2300      	movs	r3, #0
 8004282:	81bb      	strh	r3, [r7, #12]
 8004284:	e034      	b.n	80042f0 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 8004286:	4b22      	ldr	r3, [pc, #136]	; (8004310 <gfx_TX_block+0xac>)
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	4b21      	ldr	r3, [pc, #132]	; (8004314 <gfx_TX_block+0xb0>)
 800428e:	5c9b      	ldrb	r3, [r3, r2]
 8004290:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d902      	bls.n	800429e <gfx_TX_block+0x3a>
 8004298:	23fa      	movs	r3, #250	; 0xfa
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e001      	b.n	80042a2 <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800429e:	23f8      	movs	r3, #248	; 0xf8
 80042a0:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 80042a6:	7abb      	ldrb	r3, [r7, #10]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 80042b2:	7abb      	ldrb	r3, [r7, #10]
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 80042ba:	89bb      	ldrh	r3, [r7, #12]
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <gfx_TX_block+0xb4>)
 80042be:	4413      	add	r3, r2
 80042c0:	461a      	mov	r2, r3
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	8819      	ldrh	r1, [r3, #0]
 80042c6:	789b      	ldrb	r3, [r3, #2]
 80042c8:	8011      	strh	r1, [r2, #0]
 80042ca:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 80042cc:	7afb      	ldrb	r3, [r7, #11]
 80042ce:	2b11      	cmp	r3, #17
 80042d0:	d102      	bne.n	80042d8 <gfx_TX_block+0x74>
 80042d2:	2300      	movs	r3, #0
 80042d4:	72fb      	strb	r3, [r7, #11]
 80042d6:	e002      	b.n	80042de <gfx_TX_block+0x7a>
 80042d8:	7afb      	ldrb	r3, [r7, #11]
 80042da:	3301      	adds	r3, #1
 80042dc:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <gfx_TX_block+0xac>)
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <gfx_TX_block+0xac>)
 80042e8:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 80042ea:	89bb      	ldrh	r3, [r7, #12]
 80042ec:	3303      	adds	r3, #3
 80042ee:	81bb      	strh	r3, [r7, #12]
 80042f0:	89bb      	ldrh	r3, [r7, #12]
 80042f2:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80042f6:	d3c6      	bcc.n	8004286 <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <gfx_TX_block+0xac>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	801a      	strh	r2, [r3, #0]
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <gfx_TX_block+0xb8>)
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]

}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	2000cb02 	.word	0x2000cb02
 8004314:	2000c680 	.word	0x2000c680
 8004318:	20010f44 	.word	0x20010f44
 800431c:	2000cb0e 	.word	0x2000cb0e

08004320 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <gfx_clear+0x6c>)
 8004326:	2200      	movs	r2, #0
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	e01c      	b.n	8004366 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 800432c:	4b18      	ldr	r3, [pc, #96]	; (8004390 <gfx_clear+0x70>)
 800432e:	2202      	movs	r2, #2
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e00e      	b.n	8004352 <gfx_clear+0x32>
 8004334:	4b15      	ldr	r3, [pc, #84]	; (800438c <gfx_clear+0x6c>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	4b15      	ldr	r3, [pc, #84]	; (8004390 <gfx_clear+0x70>)
 800433c:	881b      	ldrh	r3, [r3, #0]
 800433e:	4413      	add	r3, r2
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <gfx_clear+0x74>)
 8004342:	2100      	movs	r1, #0
 8004344:	54d1      	strb	r1, [r2, r3]
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <gfx_clear+0x70>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	3301      	adds	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <gfx_clear+0x70>)
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <gfx_clear+0x70>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	2b11      	cmp	r3, #17
 8004358:	d9ec      	bls.n	8004334 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 800435a:	4b0c      	ldr	r3, [pc, #48]	; (800438c <gfx_clear+0x6c>)
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	3312      	adds	r3, #18
 8004360:	b29a      	uxth	r2, r3
 8004362:	4b0a      	ldr	r3, [pc, #40]	; (800438c <gfx_clear+0x6c>)
 8004364:	801a      	strh	r2, [r3, #0]
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <gfx_clear+0x6c>)
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800436e:	d3dd      	bcc.n	800432c <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <gfx_clear+0x78>)
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <gfx_clear+0x7c>)
 8004378:	2200      	movs	r2, #0
 800437a:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 800437c:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <gfx_clear+0x80>)
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]

}
 8004382:	bf00      	nop
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	20009914 	.word	0x20009914
 8004390:	2000991a 	.word	0x2000991a
 8004394:	2000c680 	.word	0x2000c680
 8004398:	2000cb04 	.word	0x2000cb04
 800439c:	2000cb02 	.word	0x2000cb02
 80043a0:	2000cb0e 	.word	0x2000cb0e

080043a4 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80043ae:	2300      	movs	r3, #0
 80043b0:	80fb      	strh	r3, [r7, #6]
 80043b2:	e006      	b.n	80043c2 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <display_clear+0x34>)
 80043b8:	212f      	movs	r1, #47	; 0x2f
 80043ba:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	3301      	adds	r3, #1
 80043c0:	80fb      	strh	r3, [r7, #6]
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c8:	d3f4      	bcc.n	80043b4 <display_clear+0x10>
	}


}
 80043ca:	bf00      	nop
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	20008f7c 	.word	0x20008f7c

080043dc <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <display_generate+0x1c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 80043e6:	f7ff fd93 	bl	8003f10 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 80043ea:	f7ff fd99 	bl	8003f20 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 80043ee:	4b03      	ldr	r3, [pc, #12]	; (80043fc <display_generate+0x20>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000ed12 	.word	0x2000ed12
 80043fc:	2000cb0e 	.word	0x2000cb0e

08004400 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004400:	b480      	push	{r7}
 8004402:	b08b      	sub	sp, #44	; 0x2c
 8004404:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8004406:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <gfx_line_fill+0x178>)
 8004408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800440c:	461a      	mov	r2, r3
 800440e:	4b5b      	ldr	r3, [pc, #364]	; (800457c <gfx_line_fill+0x17c>)
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8004416:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <gfx_line_fill+0x180>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	b29a      	uxth	r2, r3
 8004422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004424:	09db      	lsrs	r3, r3, #7
 8004426:	b29b      	uxth	r3, r3
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	b29b      	uxth	r3, r3
 800442c:	4413      	add	r3, r2
 800442e:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8004430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	b29b      	uxth	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	00d2      	lsls	r2, r2, #3
 800443c:	4413      	add	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 8004442:	8c3b      	ldrh	r3, [r7, #32]
 8004444:	3390      	adds	r3, #144	; 0x90
 8004446:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8004448:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <gfx_line_fill+0x184>)
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 800444e:	2300      	movs	r3, #0
 8004450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 8004454:	2300      	movs	r3, #0
 8004456:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8004468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	b29b      	uxth	r3, r3
 800446e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004470:	429a      	cmp	r2, r3
 8004472:	d107      	bne.n	8004484 <gfx_line_fill+0x84>
 8004474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	3328      	adds	r3, #40	; 0x28
 800447c:	443b      	add	r3, r7
 800447e:	2201      	movs	r2, #1
 8004480:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8004484:	4a40      	ldr	r2, [pc, #256]	; (8004588 <gfx_line_fill+0x188>)
 8004486:	8c3b      	ldrh	r3, [r7, #32]
 8004488:	8013      	strh	r3, [r2, #0]
 800448a:	e068      	b.n	800455e <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 800448c:	4b3f      	ldr	r3, [pc, #252]	; (800458c <gfx_line_fill+0x18c>)
 800448e:	2200      	movs	r2, #0
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	e055      	b.n	8004540 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8004494:	4b3d      	ldr	r3, [pc, #244]	; (800458c <gfx_line_fill+0x18c>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	4413      	add	r3, r2
 80044a0:	4a3b      	ldr	r2, [pc, #236]	; (8004590 <gfx_line_fill+0x190>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	3b2f      	subs	r3, #47	; 0x2f
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4413      	add	r3, r2
 80044b4:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 80044b6:	8b7b      	ldrh	r3, [r7, #26]
 80044b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044bc:	4a35      	ldr	r2, [pc, #212]	; (8004594 <gfx_line_fill+0x194>)
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <gfx_line_fill+0x18c>)
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	3328      	adds	r3, #40	; 0x28
 80044c8:	443b      	add	r3, r7
 80044ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044ce:	461a      	mov	r2, r3
 80044d0:	01d2      	lsls	r2, r2, #7
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	b25a      	sxtb	r2, r3
 80044d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80044dc:	4053      	eors	r3, r2
 80044de:	b25b      	sxtb	r3, r3
 80044e0:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 80044e2:	4b29      	ldr	r3, [pc, #164]	; (8004588 <gfx_line_fill+0x188>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	4b28      	ldr	r3, [pc, #160]	; (800458c <gfx_line_fill+0x18c>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	4413      	add	r3, r2
 80044ee:	3302      	adds	r3, #2
 80044f0:	4929      	ldr	r1, [pc, #164]	; (8004598 <gfx_line_fill+0x198>)
 80044f2:	7f7a      	ldrb	r2, [r7, #29]
 80044f4:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 80044f6:	23fa      	movs	r3, #250	; 0xfa
 80044f8:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 80044fa:	7f7b      	ldrb	r3, [r7, #29]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	b2db      	uxtb	r3, r3
 8004504:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 8004506:	7f7b      	ldrb	r3, [r7, #29]
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	b2db      	uxtb	r3, r3
 800450c:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <gfx_line_fill+0x188>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <gfx_line_fill+0x18c>)
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	441a      	add	r2, r3
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	3306      	adds	r3, #6
 8004522:	4a1e      	ldr	r2, [pc, #120]	; (800459c <gfx_line_fill+0x19c>)
 8004524:	4413      	add	r3, r2
 8004526:	461a      	mov	r2, r3
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	8819      	ldrh	r1, [r3, #0]
 800452e:	789b      	ldrb	r3, [r3, #2]
 8004530:	8011      	strh	r1, [r2, #0]
 8004532:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 8004534:	4b15      	ldr	r3, [pc, #84]	; (800458c <gfx_line_fill+0x18c>)
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <gfx_line_fill+0x18c>)
 800453e:	801a      	strh	r2, [r3, #0]
 8004540:	4b12      	ldr	r3, [pc, #72]	; (800458c <gfx_line_fill+0x18c>)
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	2b0f      	cmp	r3, #15
 8004546:	d9a5      	bls.n	8004494 <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800454c:	3301      	adds	r3, #1
 800454e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <gfx_line_fill+0x188>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	3312      	adds	r3, #18
 8004558:	b29a      	uxth	r2, r3
 800455a:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <gfx_line_fill+0x188>)
 800455c:	801a      	strh	r2, [r3, #0]
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <gfx_line_fill+0x188>)
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	8bfa      	ldrh	r2, [r7, #30]
 8004564:	429a      	cmp	r2, r3
 8004566:	d891      	bhi.n	800448c <gfx_line_fill+0x8c>
    }
    }
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	372c      	adds	r7, #44	; 0x2c
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20008ee0 	.word	0x20008ee0
 800457c:	2000e0fc 	.word	0x2000e0fc
 8004580:	20009916 	.word	0x20009916
 8004584:	2000cb0e 	.word	0x2000cb0e
 8004588:	20009914 	.word	0x20009914
 800458c:	2000991a 	.word	0x2000991a
 8004590:	20008f7c 	.word	0x20008f7c
 8004594:	0800e56c 	.word	0x0800e56c
 8004598:	2000c680 	.word	0x2000c680
 800459c:	20010f44 	.word	0x20010f44

080045a0 <encoder2>:


void encoder2(void){  // encoder pos and data input
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80045a6:	4b67      	ldr	r3, [pc, #412]	; (8004744 <encoder2+0x1a4>)
 80045a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ac:	461a      	mov	r2, r3
 80045ae:	4b66      	ldr	r3, [pc, #408]	; (8004748 <encoder2+0x1a8>)
 80045b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4a63      	ldr	r2, [pc, #396]	; (800474c <encoder2+0x1ac>)
 80045be:	4413      	add	r3, r2
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b63      	ldr	r3, [pc, #396]	; (8004750 <encoder2+0x1b0>)
 80045c4:	6810      	ldr	r0, [r2, #0]
 80045c6:	6851      	ldr	r1, [r2, #4]
 80045c8:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 80045ca:	4a62      	ldr	r2, [pc, #392]	; (8004754 <encoder2+0x1b4>)
 80045cc:	1d3b      	adds	r3, r7, #4
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	4611      	mov	r1, r2
 80045d2:	8019      	strh	r1, [r3, #0]
 80045d4:	3302      	adds	r3, #2
 80045d6:	0c12      	lsrs	r2, r2, #16
 80045d8:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80045da:	4b5a      	ldr	r3, [pc, #360]	; (8004744 <encoder2+0x1a4>)
 80045dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b5c      	ldr	r3, [pc, #368]	; (8004758 <encoder2+0x1b8>)
 80045e6:	4413      	add	r3, r2
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80045ee:	1d3b      	adds	r3, r7, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f008 fc1b 	bl	800ce2c <atoi>
 80045f6:	4603      	mov	r3, r0
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4b58      	ldr	r3, [pc, #352]	; (800475c <encoder2+0x1bc>)
 80045fc:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80045fe:	4b57      	ldr	r3, [pc, #348]	; (800475c <encoder2+0x1bc>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	4852      	ldr	r0, [pc, #328]	; (8004750 <encoder2+0x1b0>)
 8004606:	f7fc fac7 	bl	8000b98 <menu_vars>
 800460a:	4603      	mov	r3, r0
 800460c:	4a54      	ldr	r2, [pc, #336]	; (8004760 <encoder2+0x1c0>)
 800460e:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <encoder2+0x1c0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	4b53      	ldr	r3, [pc, #332]	; (8004764 <encoder2+0x1c4>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	4619      	mov	r1, r3
 800461c:	4b52      	ldr	r3, [pc, #328]	; (8004768 <encoder2+0x1c8>)
 800461e:	5c5b      	ldrb	r3, [r3, r1]
 8004620:	429a      	cmp	r2, r3
 8004622:	d907      	bls.n	8004634 <encoder2+0x94>
 8004624:	4b4f      	ldr	r3, [pc, #316]	; (8004764 <encoder2+0x1c4>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <encoder2+0x1c0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a4e      	ldr	r2, [pc, #312]	; (8004768 <encoder2+0x1c8>)
 8004630:	5c52      	ldrb	r2, [r2, r1]
 8004632:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8004634:	4b4d      	ldr	r3, [pc, #308]	; (800476c <encoder2+0x1cc>)
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	461a      	mov	r2, r3
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <encoder2+0x1d0>)
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d024      	beq.n	800468e <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8004644:	4b49      	ldr	r3, [pc, #292]	; (800476c <encoder2+0x1cc>)
 8004646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464a:	461a      	mov	r2, r3
 800464c:	4b48      	ldr	r3, [pc, #288]	; (8004770 <encoder2+0x1d0>)
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	dd07      	ble.n	8004664 <encoder2+0xc4>
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <encoder2+0x1c0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	4b41      	ldr	r3, [pc, #260]	; (8004760 <encoder2+0x1c0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3201      	adds	r2, #1
 8004660:	b2d2      	uxtb	r2, r2
 8004662:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8004664:	4b41      	ldr	r3, [pc, #260]	; (800476c <encoder2+0x1cc>)
 8004666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800466a:	461a      	mov	r2, r3
 800466c:	4b40      	ldr	r3, [pc, #256]	; (8004770 <encoder2+0x1d0>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	da0c      	bge.n	800468e <encoder2+0xee>
 8004674:	4b3a      	ldr	r3, [pc, #232]	; (8004760 <encoder2+0x1c0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <encoder2+0xee>
 800467e:	4b38      	ldr	r3, [pc, #224]	; (8004760 <encoder2+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	4b36      	ldr	r3, [pc, #216]	; (8004760 <encoder2+0x1c0>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3a01      	subs	r2, #1
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <encoder2+0x1cc>)
 8004690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004694:	b29a      	uxth	r2, r3
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <encoder2+0x1d0>)
 8004698:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <encoder2+0x1d4>)
 800469c:	881a      	ldrh	r2, [r3, #0]
 800469e:	4b36      	ldr	r3, [pc, #216]	; (8004778 <encoder2+0x1d8>)
 80046a0:	881b      	ldrh	r3, [r3, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d01d      	beq.n	80046e2 <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 80046a6:	4b33      	ldr	r3, [pc, #204]	; (8004774 <encoder2+0x1d4>)
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	4b33      	ldr	r3, [pc, #204]	; (8004778 <encoder2+0x1d8>)
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d908      	bls.n	80046c4 <encoder2+0x124>
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <encoder2+0x1a4>)
 80046b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	b29b      	uxth	r3, r3
 80046be:	b21a      	sxth	r2, r3
 80046c0:	4b20      	ldr	r3, [pc, #128]	; (8004744 <encoder2+0x1a4>)
 80046c2:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 80046c4:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <encoder2+0x1d4>)
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <encoder2+0x1d8>)
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d208      	bcs.n	80046e2 <encoder2+0x142>
 80046d0:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <encoder2+0x1a4>)
 80046d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	b21a      	sxth	r2, r3
 80046de:	4b19      	ldr	r3, [pc, #100]	; (8004744 <encoder2+0x1a4>)
 80046e0:	801a      	strh	r2, [r3, #0]

	   	    }

	    if (page_skip)  {enc_out1=enc_out1+10; page_skip=0; }
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <encoder2+0x1dc>)
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00b      	beq.n	8004704 <encoder2+0x164>
 80046ec:	4b15      	ldr	r3, [pc, #84]	; (8004744 <encoder2+0x1a4>)
 80046ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	330a      	adds	r3, #10
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	b21a      	sxth	r2, r3
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <encoder2+0x1a4>)
 80046fc:	801a      	strh	r2, [r3, #0]
 80046fe:	4b1f      	ldr	r3, [pc, #124]	; (800477c <encoder2+0x1dc>)
 8004700:	2200      	movs	r2, #0
 8004702:	701a      	strb	r2, [r3, #0]
	    if (enc_out1>menu_title_count) enc_out1=0;
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <encoder2+0x1a4>)
 8004706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800470a:	461a      	mov	r2, r3
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <encoder2+0x1e0>)
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	dd02      	ble.n	800471a <encoder2+0x17a>
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <encoder2+0x1a4>)
 8004716:	2200      	movs	r2, #0
 8004718:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <encoder2+0x1a4>)
 800471c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004720:	2b00      	cmp	r3, #0
 8004722:	da04      	bge.n	800472e <encoder2+0x18e>
 8004724:	4b16      	ldr	r3, [pc, #88]	; (8004780 <encoder2+0x1e0>)
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	b21a      	sxth	r2, r3
 800472a:	4b06      	ldr	r3, [pc, #24]	; (8004744 <encoder2+0x1a4>)
 800472c:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <encoder2+0x1d4>)
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	4b11      	ldr	r3, [pc, #68]	; (8004778 <encoder2+0x1d8>)
 8004734:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <encoder2+0x1e4>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]

    }
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20008ee0 	.word	0x20008ee0
 8004748:	2000e0fc 	.word	0x2000e0fc
 800474c:	20000000 	.word	0x20000000
 8004750:	2000ed00 	.word	0x2000ed00
 8004754:	0800d634 	.word	0x0800d634
 8004758:	2000e8fc 	.word	0x2000e8fc
 800475c:	2000ed08 	.word	0x2000ed08
 8004760:	2000ecfc 	.word	0x2000ecfc
 8004764:	20010d39 	.word	0x20010d39
 8004768:	0800e4ec 	.word	0x0800e4ec
 800476c:	2000c154 	.word	0x2000c154
 8004770:	20010f3e 	.word	0x20010f3e
 8004774:	2000c152 	.word	0x2000c152
 8004778:	2000ed0c 	.word	0x2000ed0c
 800477c:	20012804 	.word	0x20012804
 8004780:	2000e0fa 	.word	0x2000e0fa
 8004784:	2000c156 	.word	0x2000c156

08004788 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 800478e:	4b4f      	ldr	r3, [pc, #316]	; (80048cc <menu3_fill+0x144>)
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8004794:	4b4e      	ldr	r3, [pc, #312]	; (80048d0 <menu3_fill+0x148>)
 8004796:	881b      	ldrh	r3, [r3, #0]
 8004798:	89fa      	ldrh	r2, [r7, #14]
 800479a:	429a      	cmp	r2, r3
 800479c:	d904      	bls.n	80047a8 <menu3_fill+0x20>
 800479e:	2300      	movs	r3, #0
 80047a0:	81fb      	strh	r3, [r7, #14]
 80047a2:	4b4a      	ldr	r3, [pc, #296]	; (80048cc <menu3_fill+0x144>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	4a4a      	ldr	r2, [pc, #296]	; (80048d4 <menu3_fill+0x14c>)
 80047ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 80047b4:	7b7b      	ldrb	r3, [r7, #13]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4a47      	ldr	r2, [pc, #284]	; (80048d8 <menu3_fill+0x150>)
 80047ba:	4413      	add	r3, r2
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <menu3_fill+0x154>)
 80047c0:	6810      	ldr	r0, [r2, #0]
 80047c2:	6851      	ldr	r1, [r2, #4]
 80047c4:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80047c6:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <menu3_fill+0x158>)
 80047c8:	1d3b      	adds	r3, r7, #4
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	4611      	mov	r1, r2
 80047ce:	8019      	strh	r1, [r3, #0]
 80047d0:	3302      	adds	r3, #2
 80047d2:	0c12      	lsrs	r2, r2, #16
 80047d4:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 80047d6:	89fb      	ldrh	r3, [r7, #14]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	461a      	mov	r2, r3
 80047dc:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <menu3_fill+0x15c>)
 80047de:	4413      	add	r3, r2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f008 fb1f 	bl	800ce2c <atoi>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <menu3_fill+0x160>)
 80047f4:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80047f6:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <menu3_fill+0x160>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4837      	ldr	r0, [pc, #220]	; (80048dc <menu3_fill+0x154>)
 80047fe:	f7fc f9cb 	bl	8000b98 <menu_vars>
 8004802:	4603      	mov	r3, r0
 8004804:	4a39      	ldr	r2, [pc, #228]	; (80048ec <menu3_fill+0x164>)
 8004806:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 8004808:	4b38      	ldr	r3, [pc, #224]	; (80048ec <menu3_fill+0x164>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	b29a      	uxth	r2, r3
 8004810:	4b37      	ldr	r3, [pc, #220]	; (80048f0 <menu3_fill+0x168>)
 8004812:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8004814:	4b37      	ldr	r3, [pc, #220]	; (80048f4 <menu3_fill+0x16c>)
 8004816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800481a:	461a      	mov	r2, r3
 800481c:	89fb      	ldrh	r3, [r7, #14]
 800481e:	429a      	cmp	r2, r3
 8004820:	d104      	bne.n	800482c <menu3_fill+0xa4>
 8004822:	4b33      	ldr	r3, [pc, #204]	; (80048f0 <menu3_fill+0x168>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <menu3_fill+0x170>)
 800482a:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 800482c:	4b30      	ldr	r3, [pc, #192]	; (80048f0 <menu3_fill+0x168>)
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	4b32      	ldr	r3, [pc, #200]	; (80048fc <menu3_fill+0x174>)
 8004834:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 8004836:	4b31      	ldr	r3, [pc, #196]	; (80048fc <menu3_fill+0x174>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b09      	cmp	r3, #9
 800483c:	d902      	bls.n	8004844 <menu3_fill+0xbc>
 800483e:	4b2f      	ldr	r3, [pc, #188]	; (80048fc <menu3_fill+0x174>)
 8004840:	2209      	movs	r2, #9
 8004842:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004844:	89fb      	ldrh	r3, [r7, #14]
 8004846:	4a23      	ldr	r2, [pc, #140]	; (80048d4 <menu3_fill+0x14c>)
 8004848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484c:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 800484e:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <menu3_fill+0x174>)
 8004850:	781a      	ldrb	r2, [r3, #0]
 8004852:	897b      	ldrh	r3, [r7, #10]
 8004854:	3230      	adds	r2, #48	; 0x30
 8004856:	b2d1      	uxtb	r1, r2
 8004858:	4a29      	ldr	r2, [pc, #164]	; (8004900 <menu3_fill+0x178>)
 800485a:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 800485c:	4b29      	ldr	r3, [pc, #164]	; (8004904 <menu3_fill+0x17c>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b35      	cmp	r3, #53	; 0x35
 8004862:	d105      	bne.n	8004870 <menu3_fill+0xe8>
 8004864:	4b22      	ldr	r3, [pc, #136]	; (80048f0 <menu3_fill+0x168>)
 8004866:	881a      	ldrh	r2, [r3, #0]
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	b2d1      	uxtb	r1, r2
 800486c:	4a24      	ldr	r2, [pc, #144]	; (8004900 <menu3_fill+0x178>)
 800486e:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <menu3_fill+0x17c>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b18      	cmp	r3, #24
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2da      	uxtb	r2, r3
 800487e:	4b21      	ldr	r3, [pc, #132]	; (8004904 <menu3_fill+0x17c>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b19      	cmp	r3, #25
 8004884:	bf0c      	ite	eq
 8004886:	2301      	moveq	r3, #1
 8004888:	2300      	movne	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <menu3_fill+0x11e>
 8004894:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <menu3_fill+0x168>)
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	f003 021f 	and.w	r2, r3, #31
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	491a      	ldr	r1, [pc, #104]	; (8004908 <menu3_fill+0x180>)
 80048a0:	5c89      	ldrb	r1, [r1, r2]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <menu3_fill+0x178>)
 80048a4:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <menu3_fill+0x144>)
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <menu3_fill+0x144>)
 80048b0:	801a      	strh	r2, [r3, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <menu3_fill+0x144>)
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <menu3_fill+0x148>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d902      	bls.n	80048c4 <menu3_fill+0x13c>
 80048be:	4b03      	ldr	r3, [pc, #12]	; (80048cc <menu3_fill+0x144>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	801a      	strh	r2, [r3, #0]

    }
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20010f40 	.word	0x20010f40
 80048d0:	2000e0fa 	.word	0x2000e0fa
 80048d4:	2000e0fc 	.word	0x2000e0fc
 80048d8:	20000000 	.word	0x20000000
 80048dc:	2000ed00 	.word	0x2000ed00
 80048e0:	0800d634 	.word	0x0800d634
 80048e4:	2000e8fc 	.word	0x2000e8fc
 80048e8:	2000ed08 	.word	0x2000ed08
 80048ec:	2000ecfc 	.word	0x2000ecfc
 80048f0:	2000cb0c 	.word	0x2000cb0c
 80048f4:	20008ee0 	.word	0x20008ee0
 80048f8:	2000ed0e 	.word	0x2000ed0e
 80048fc:	20010d3a 	.word	0x20010d3a
 8004900:	20008f7c 	.word	0x20008f7c
 8004904:	20010d39 	.word	0x20010d39
 8004908:	0800e96c 	.word	0x0800e96c

0800490c <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8004910:	4b53      	ldr	r3, [pc, #332]	; (8004a60 <LCD_Info_feedback+0x154>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4a53      	ldr	r2, [pc, #332]	; (8004a64 <LCD_Info_feedback+0x158>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3330      	adds	r3, #48	; 0x30
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b51      	ldr	r3, [pc, #324]	; (8004a68 <LCD_Info_feedback+0x15c>)
 8004924:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8004928:	4b4d      	ldr	r3, [pc, #308]	; (8004a60 <LCD_Info_feedback+0x154>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4a4d      	ldr	r2, [pc, #308]	; (8004a64 <LCD_Info_feedback+0x158>)
 800492e:	fba2 1203 	umull	r1, r2, r2, r3
 8004932:	0952      	lsrs	r2, r2, #5
 8004934:	2164      	movs	r1, #100	; 0x64
 8004936:	fb01 f202 	mul.w	r2, r1, r2
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	b2db      	uxtb	r3, r3
 800493e:	4a4b      	ldr	r2, [pc, #300]	; (8004a6c <LCD_Info_feedback+0x160>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	3330      	adds	r3, #48	; 0x30
 800494a:	b2da      	uxtb	r2, r3
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <LCD_Info_feedback+0x15c>)
 800494e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			    potSource[382]=(lcd_temp%10)+48;
 8004952:	4b43      	ldr	r3, [pc, #268]	; (8004a60 <LCD_Info_feedback+0x154>)
 8004954:	781a      	ldrb	r2, [r3, #0]
 8004956:	4b45      	ldr	r3, [pc, #276]	; (8004a6c <LCD_Info_feedback+0x160>)
 8004958:	fba3 1302 	umull	r1, r3, r3, r2
 800495c:	08d9      	lsrs	r1, r3, #3
 800495e:	460b      	mov	r3, r1
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	b2db      	uxtb	r3, r3
 800496a:	3330      	adds	r3, #48	; 0x30
 800496c:	b2da      	uxtb	r2, r3
 800496e:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <LCD_Info_feedback+0x15c>)
 8004970:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

			    LCD_Info[0]  =( seq.pos/100) +48;
 8004974:	4b3e      	ldr	r3, [pc, #248]	; (8004a70 <LCD_Info_feedback+0x164>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	4a3a      	ldr	r2, [pc, #232]	; (8004a64 <LCD_Info_feedback+0x158>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3330      	adds	r3, #48	; 0x30
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4b3b      	ldr	r3, [pc, #236]	; (8004a74 <LCD_Info_feedback+0x168>)
 8004988:	701a      	strb	r2, [r3, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 800498a:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <LCD_Info_feedback+0x164>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <LCD_Info_feedback+0x158>)
 8004990:	fba2 1203 	umull	r1, r2, r2, r3
 8004994:	0952      	lsrs	r2, r2, #5
 8004996:	2164      	movs	r1, #100	; 0x64
 8004998:	fb01 f202 	mul.w	r2, r1, r2
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4a32      	ldr	r2, [pc, #200]	; (8004a6c <LCD_Info_feedback+0x160>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	08db      	lsrs	r3, r3, #3
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	3330      	adds	r3, #48	; 0x30
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <LCD_Info_feedback+0x168>)
 80049b0:	705a      	strb	r2, [r3, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 80049b2:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <LCD_Info_feedback+0x164>)
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	4b2d      	ldr	r3, [pc, #180]	; (8004a6c <LCD_Info_feedback+0x160>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	08d9      	lsrs	r1, r3, #3
 80049be:	460b      	mov	r3, r1
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	3330      	adds	r3, #48	; 0x30
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <LCD_Info_feedback+0x168>)
 80049d0:	709a      	strb	r2, [r3, #2]

			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 80049d2:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <LCD_Info_feedback+0x164>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	3331      	adds	r3, #49	; 0x31
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <LCD_Info_feedback+0x168>)
 80049e0:	72da      	strb	r2, [r3, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <LCD_Info_feedback+0x164>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	111b      	asrs	r3, r3, #4
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	3331      	adds	r3, #49	; 0x31
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	4b1f      	ldr	r3, [pc, #124]	; (8004a74 <LCD_Info_feedback+0x168>)
 80049f6:	731a      	strb	r2, [r3, #12]
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <LCD_Info_feedback+0x164>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	f003 030f 	and.w	r3, r3, #15
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	4b18      	ldr	r3, [pc, #96]	; (8004a64 <LCD_Info_feedback+0x158>)
 8004a04:	fb83 1302 	smull	r1, r3, r3, r2
 8004a08:	1159      	asrs	r1, r3, #5
 8004a0a:	17d3      	asrs	r3, r2, #31
 8004a0c:	1acb      	subs	r3, r1, r3
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <LCD_Info_feedback+0x16c>)
 8004a18:	fb82 1203 	smull	r1, r2, r2, r3
 8004a1c:	1092      	asrs	r2, r2, #2
 8004a1e:	17db      	asrs	r3, r3, #31
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	3330      	adds	r3, #48	; 0x30
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <LCD_Info_feedback+0x168>)
 8004a2a:	735a      	strb	r2, [r3, #13]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <LCD_Info_feedback+0x164>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <LCD_Info_feedback+0x16c>)
 8004a38:	fb83 1302 	smull	r1, r3, r3, r2
 8004a3c:	1099      	asrs	r1, r3, #2
 8004a3e:	17d3      	asrs	r3, r2, #31
 8004a40:	1ac9      	subs	r1, r1, r3
 8004a42:	460b      	mov	r3, r1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	1ad1      	subs	r1, r2, r3
 8004a4c:	b2cb      	uxtb	r3, r1
 8004a4e:	3330      	adds	r3, #48	; 0x30
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <LCD_Info_feedback+0x168>)
 8004a54:	739a      	strb	r2, [r3, #14]



    }
 8004a56:	bf00      	nop
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	2000ed0e 	.word	0x2000ed0e
 8004a64:	51eb851f 	.word	0x51eb851f
 8004a68:	20009648 	.word	0x20009648
 8004a6c:	cccccccd 	.word	0xcccccccd
 8004a70:	2000dd54 	.word	0x2000dd54
 8004a74:	20012154 	.word	0x20012154
 8004a78:	66666667 	.word	0x66666667

08004a7c <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08c      	sub	sp, #48	; 0x30
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	4603      	mov	r3, r0
 8004a84:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004a8c:	d301      	bcc.n	8004a92 <sampler_ram_clear_test+0x16>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e044      	b.n	8004b1c <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 8004a92:	f001 f8cf 	bl	8005c34 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	f107 030c 	add.w	r3, r7, #12
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	085b      	lsrs	r3, r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8004aca:	2200      	movs	r2, #0
 8004acc:	2110      	movs	r1, #16
 8004ace:	4815      	ldr	r0, [pc, #84]	; (8004b24 <sampler_ram_clear_test+0xa8>)
 8004ad0:	f004 f804 	bl	8008adc <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 8004ad4:	f107 0208 	add.w	r2, r7, #8
 8004ad8:	f107 0108 	add.w	r1, r7, #8
 8004adc:	2364      	movs	r3, #100	; 0x64
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	2318      	movs	r3, #24
 8004ae2:	4811      	ldr	r0, [pc, #68]	; (8004b28 <sampler_ram_clear_test+0xac>)
 8004ae4:	f005 fe09 	bl	800a6fa <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8004ae8:	2201      	movs	r2, #1
 8004aea:	2110      	movs	r1, #16
 8004aec:	480d      	ldr	r0, [pc, #52]	; (8004b24 <sampler_ram_clear_test+0xa8>)
 8004aee:	f003 fff5 	bl	8008adc <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004afc:	2b13      	cmp	r3, #19
 8004afe:	d80c      	bhi.n	8004b1a <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 8004b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b04:	3314      	adds	r3, #20
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	443b      	add	r3, r7
 8004b0a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004b0e:	2bff      	cmp	r3, #255	; 0xff
 8004b10:	d001      	beq.n	8004b16 <sampler_ram_clear_test+0x9a>
 8004b12:	2300      	movs	r3, #0
 8004b14:	e002      	b.n	8004b1c <sampler_ram_clear_test+0xa0>
 8004b16:	230f      	movs	r3, #15
 8004b18:	e000      	b.n	8004b1c <sampler_ram_clear_test+0xa0>

	}
	return 15;
 8004b1a:	230f      	movs	r3, #15
    }
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3728      	adds	r7, #40	; 0x28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40020000 	.word	0x40020000
 8004b28:	20012d48 	.word	0x20012d48

08004b2c <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b0c8      	sub	sp, #288	; 0x120
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004b3a:	6019      	str	r1, [r3, #0]
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b42:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004b46:	4602      	mov	r2, r0
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b52:	460a      	mov	r2, r1
 8004b54:	801a      	strh	r2, [r3, #0]

		stop_toggle=1;  stop_start();   // halt for slow write
 8004b56:	4bad      	ldr	r3, [pc, #692]	; (8004e0c <sample_save+0x2e0>)
 8004b58:	2201      	movs	r2, #1
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	f001 fc02 	bl	8006364 <stop_start>

		uint8_t spi_test[270]={0};
 8004b60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8004b72:	2100      	movs	r1, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f008 f995 	bl	800cea4 <memset>
		if (sample_number>509) return ;
 8004b7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b7e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004b88:	f080 8139 	bcs.w	8004dfe <sample_save+0x2d2>



			spi_test[1]=sample_number>>1; //24bit address msb
 8004b8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b90:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ba0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ba4:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 8004ba6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004baa:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	01db      	lsls	r3, r3, #7
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004bbc:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 8004bbe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	70da      	strb	r2, [r3, #3]

				//----formAT SECTION
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 8004bca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004bd2:	2206      	movs	r2, #6
 8004bd4:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2110      	movs	r1, #16
 8004bda:	488d      	ldr	r0, [pc, #564]	; (8004e10 <sample_save+0x2e4>)
 8004bdc:	f003 ff7e 	bl	8008adc <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 8004be0:	f107 010c 	add.w	r1, r7, #12
 8004be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004be8:	2201      	movs	r2, #1
 8004bea:	488a      	ldr	r0, [pc, #552]	; (8004e14 <sample_save+0x2e8>)
 8004bec:	f005 fc49 	bl	800a482 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	4886      	ldr	r0, [pc, #536]	; (8004e10 <sample_save+0x2e4>)
 8004bf6:	f003 ff71 	bl	8008adc <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8004bfa:	2005      	movs	r0, #5
 8004bfc:	f002 f864 	bl	8006cc8 <HAL_Delay>
					spi_test[0]=0x52; //block
 8004c00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c08:	2252      	movs	r2, #82	; 0x52
 8004c0a:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2110      	movs	r1, #16
 8004c10:	487f      	ldr	r0, [pc, #508]	; (8004e10 <sample_save+0x2e4>)
 8004c12:	f003 ff63 	bl	8008adc <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 8004c16:	f107 010c 	add.w	r1, r7, #12
 8004c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c1e:	2204      	movs	r2, #4
 8004c20:	487c      	ldr	r0, [pc, #496]	; (8004e14 <sample_save+0x2e8>)
 8004c22:	f005 fc2e 	bl	800a482 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004c26:	2201      	movs	r2, #1
 8004c28:	2110      	movs	r1, #16
 8004c2a:	4879      	ldr	r0, [pc, #484]	; (8004e10 <sample_save+0x2e4>)
 8004c2c:	f003 ff56 	bl	8008adc <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 8004c30:	20fa      	movs	r0, #250	; 0xfa
 8004c32:	f002 f849 	bl	8006cc8 <HAL_Delay>



					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004c36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c3a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff ff1b 	bl	8004a7c <sampler_ram_clear_test>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80da 	beq.w	8004e02 <sample_save+0x2d6>


		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 8004c4e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c56:	2203      	movs	r2, #3
 8004c58:	701a      	strb	r2, [r3, #0]

			uint16_t write_counter=0;    // write start location
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 8004c60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c64:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	01db      	lsls	r3, r3, #7
 8004c6c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 8004c70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 8004c82:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da02      	bge.n	8004c90 <sample_save+0x164>
 8004c8a:	237f      	movs	r3, #127	; 0x7f
 8004c8c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 8004c90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c94:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c98:	2206      	movs	r2, #6
 8004c9a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	485b      	ldr	r0, [pc, #364]	; (8004e10 <sample_save+0x2e4>)
 8004ca2:	f003 ff1b 	bl	8008adc <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004ca6:	f107 010c 	add.w	r1, r7, #12
 8004caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cae:	2201      	movs	r2, #1
 8004cb0:	4858      	ldr	r0, [pc, #352]	; (8004e14 <sample_save+0x2e8>)
 8004cb2:	f005 fbe6 	bl	800a482 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2110      	movs	r1, #16
 8004cba:	4855      	ldr	r0, [pc, #340]	; (8004e10 <sample_save+0x2e4>)
 8004cbc:	f003 ff0e 	bl	8008adc <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8004cc0:	2005      	movs	r0, #5
 8004cc2:	f002 f801 	bl	8006cc8 <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004ccc:	e06f      	b.n	8004dae <sample_save+0x282>

					    spi_test[0]=0x02; //write
 8004cce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cd2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 8004cda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cde:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	085b      	lsrs	r3, r3, #1
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004cee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004cf2:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8004cf4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004cfe:	4413      	add	r3, r2
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d0a:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 8004d0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d10:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d14:	2200      	movs	r2, #0
 8004d16:	70da      	strb	r2, [r3, #3]

					//   spi_test[1]=255; //24bit address msb
					    			//		spi_test[2]=127+write_counter; //24bit address
					    			//		spi_test[3]=0; //24bit address lsb

					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 8004d18:	f107 030c 	add.w	r3, r7, #12
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004d22:	0212      	lsls	r2, r2, #8
 8004d24:	4611      	mov	r1, r2
 8004d26:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8004d2a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	4411      	add	r1, r2
 8004d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d36:	4618      	mov	r0, r3
 8004d38:	f008 f8a6 	bl	800ce88 <memcpy>

					    spi_test[0]=0x06; //enable write each time
 8004d3c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d40:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d44:	2206      	movs	r2, #6
 8004d46:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	4830      	ldr	r0, [pc, #192]	; (8004e10 <sample_save+0x2e4>)
 8004d4e:	f003 fec5 	bl	8008adc <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004d52:	f107 010c 	add.w	r1, r7, #12
 8004d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	482d      	ldr	r0, [pc, #180]	; (8004e14 <sample_save+0x2e8>)
 8004d5e:	f005 fb90 	bl	800a482 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004d62:	2201      	movs	r2, #1
 8004d64:	2110      	movs	r1, #16
 8004d66:	482a      	ldr	r0, [pc, #168]	; (8004e10 <sample_save+0x2e4>)
 8004d68:	f003 feb8 	bl	8008adc <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 8004d6c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004d70:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d74:	2202      	movs	r2, #2
 8004d76:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2110      	movs	r1, #16
 8004d7c:	4824      	ldr	r0, [pc, #144]	; (8004e10 <sample_save+0x2e4>)
 8004d7e:	f003 fead 	bl	8008adc <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 8004d82:	f107 010c 	add.w	r1, r7, #12
 8004d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d8e:	4821      	ldr	r0, [pc, #132]	; (8004e14 <sample_save+0x2e8>)
 8004d90:	f005 fb77 	bl	800a482 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8004d94:	2201      	movs	r2, #1
 8004d96:	2110      	movs	r1, #16
 8004d98:	481d      	ldr	r0, [pc, #116]	; (8004e10 <sample_save+0x2e4>)
 8004d9a:	f003 fe9f 	bl	8008adc <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8004d9e:	200a      	movs	r0, #10
 8004da0:	f001 ff92 	bl	8006cc8 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004da4:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004da8:	3301      	adds	r3, #1
 8004daa:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004dae:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d988      	bls.n	8004cce <sample_save+0x1a2>

					}


					spi_test[0]=0x04; //disable write
 8004dbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004dc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2110      	movs	r1, #16
 8004dcc:	4810      	ldr	r0, [pc, #64]	; (8004e10 <sample_save+0x2e4>)
 8004dce:	f003 fe85 	bl	8008adc <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004dd2:	f107 010c 	add.w	r1, r7, #12
 8004dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dda:	2201      	movs	r2, #1
 8004ddc:	480d      	ldr	r0, [pc, #52]	; (8004e14 <sample_save+0x2e8>)
 8004dde:	f005 fb50 	bl	800a482 <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8004de2:	2201      	movs	r2, #1
 8004de4:	2110      	movs	r1, #16
 8004de6:	480a      	ldr	r0, [pc, #40]	; (8004e10 <sample_save+0x2e4>)
 8004de8:	f003 fe78 	bl	8008adc <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8004dec:	2014      	movs	r0, #20
 8004dee:	f001 ff6b 	bl	8006cc8 <HAL_Delay>


	 stop_toggle=2;  stop_start();  		// restart
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <sample_save+0x2e0>)
 8004df4:	2202      	movs	r2, #2
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	f001 fab4 	bl	8006364 <stop_start>
 8004dfc:	e002      	b.n	8004e04 <sample_save+0x2d8>
		if (sample_number>509) return ;
 8004dfe:	bf00      	nop
 8004e00:	e000      	b.n	8004e04 <sample_save+0x2d8>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004e02:	bf00      	nop

	    }
 8004e04:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	200127f8 	.word	0x200127f8
 8004e10:	40020000 	.word	0x40020000
 8004e14:	20012d48 	.word	0x20012d48

08004e18 <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e24:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004e28:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 8004e2a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e2e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	3304      	adds	r3, #4
 8004e38:	f240 4202 	movw	r2, #1026	; 0x402
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f008 f830 	bl	800cea4 <memset>

	    load_address=load_address& 16777215; // 24 bit
 8004e44:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e48:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004e4c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004e50:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e5a:	601a      	str	r2, [r3, #0]
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004e5c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e60:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a4c      	ldr	r2, [pc, #304]	; (8004f98 <sampler_1k_load+0x180>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	f200 808f 	bhi.w	8004f8c <sampler_1k_load+0x174>
	    send_spi2[0]=0x03; //read page 1
 8004e6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e72:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004e76:	2203      	movs	r2, #3
 8004e78:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 8004e7a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e7e:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e8c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004e90:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 8004e92:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004e96:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ea4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ea8:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 8004eaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004eae:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004eba:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ebe:	70da      	strb	r2, [r3, #3]

	    current_spi[0]=send_spi2[0];   // to track  later
 8004ec0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ec4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ec8:	781a      	ldrb	r2, [r3, #0]
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <sampler_1k_load+0x184>)
 8004ecc:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 8004ece:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ed2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ed6:	785a      	ldrb	r2, [r3, #1]
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <sampler_1k_load+0x184>)
 8004eda:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 8004edc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004ee0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ee4:	789a      	ldrb	r2, [r3, #2]
 8004ee6:	4b2d      	ldr	r3, [pc, #180]	; (8004f9c <sampler_1k_load+0x184>)
 8004ee8:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 8004eea:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004eee:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004ef2:	78da      	ldrb	r2, [r3, #3]
 8004ef4:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <sampler_1k_load+0x184>)
 8004ef6:	70da      	strb	r2, [r3, #3]

	    if ((flash_flag==3)&&(flash_bank_read==0))  {   memcpy( &flash_read_block, flash_read_block2+516,512); flash_flag=4; }  // second half
 8004ef8:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <sampler_1k_load+0x188>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d10d      	bne.n	8004f1e <sampler_1k_load+0x106>
 8004f02:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <sampler_1k_load+0x18c>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <sampler_1k_load+0x106>
 8004f0a:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <sampler_1k_load+0x190>)
 8004f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f10:	4619      	mov	r1, r3
 8004f12:	4826      	ldr	r0, [pc, #152]	; (8004fac <sampler_1k_load+0x194>)
 8004f14:	f007 ffb8 	bl	800ce88 <memcpy>
 8004f18:	4b21      	ldr	r3, [pc, #132]	; (8004fa0 <sampler_1k_load+0x188>)
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	701a      	strb	r2, [r3, #0]
	    if ((flash_flag==2)&&(flash_bank_read==1))   {   memcpy( &flash_read_block, flash_read_block2+4,512);   flash_flag=3;           }  // second half
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <sampler_1k_load+0x188>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d10d      	bne.n	8004f44 <sampler_1k_load+0x12c>
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <sampler_1k_load+0x18c>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d109      	bne.n	8004f44 <sampler_1k_load+0x12c>
 8004f30:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <sampler_1k_load+0x198>)
 8004f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f36:	4619      	mov	r1, r3
 8004f38:	481c      	ldr	r0, [pc, #112]	; (8004fac <sampler_1k_load+0x194>)
 8004f3a:	f007 ffa5 	bl	800ce88 <memcpy>
 8004f3e:	4b18      	ldr	r3, [pc, #96]	; (8004fa0 <sampler_1k_load+0x188>)
 8004f40:	2203      	movs	r2, #3
 8004f42:	701a      	strb	r2, [r3, #0]
	    flash_bank_read=!flash_bank_read;
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <sampler_1k_load+0x18c>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b13      	ldr	r3, [pc, #76]	; (8004fa4 <sampler_1k_load+0x18c>)
 8004f56:	701a      	strb	r2, [r3, #0]

		    if ((flash_flag==4)&&  (flash_bank_read==1) )    {
 8004f58:	4b11      	ldr	r3, [pc, #68]	; (8004fa0 <sampler_1k_load+0x188>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b04      	cmp	r3, #4
 8004f60:	d115      	bne.n	8004f8e <sampler_1k_load+0x176>
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <sampler_1k_load+0x18c>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d111      	bne.n	8004f8e <sampler_1k_load+0x176>

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	4811      	ldr	r0, [pc, #68]	; (8004fb4 <sampler_1k_load+0x19c>)
 8004f70:	f003 fdb4 	bl	8008adc <HAL_GPIO_WritePin>
 8004f74:	f107 0108 	add.w	r1, r7, #8
 8004f78:	f240 4304 	movw	r3, #1028	; 0x404
 8004f7c:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <sampler_1k_load+0x1a0>)
 8004f7e:	480f      	ldr	r0, [pc, #60]	; (8004fbc <sampler_1k_load+0x1a4>)
 8004f80:	f005 fe14 	bl	800abac <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible internet advice , put cs low before not after  !
		    flash_flag=0;  }
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <sampler_1k_load+0x188>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e000      	b.n	8004f8e <sampler_1k_load+0x176>
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004f8c:	bf00      	nop

	}
 8004f8e:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	00febfff 	.word	0x00febfff
 8004f9c:	200127f4 	.word	0x200127f4
 8004fa0:	20008eec 	.word	0x20008eec
 8004fa4:	200127ee 	.word	0x200127ee
 8004fa8:	200125ec 	.word	0x200125ec
 8004fac:	200121d4 	.word	0x200121d4
 8004fb0:	200123ec 	.word	0x200123ec
 8004fb4:	40020000 	.word	0x40020000
 8004fb8:	200123e8 	.word	0x200123e8
 8004fbc:	20012d48 	.word	0x20012d48

08004fc0 <sampler_ram_record>:
	void sampler_ram_record(void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 8004fc4:	4b17      	ldr	r3, [pc, #92]	; (8005024 <sampler_ram_record+0x64>)
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <sampler_ram_record+0x16>
 8004fcc:	4b16      	ldr	r3, [pc, #88]	; (8005028 <sampler_ram_record+0x68>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	f001 f9c7 	bl	8006364 <stop_start>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <sampler_ram_record+0x64>)
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b13      	ldr	r3, [pc, #76]	; (800502c <sampler_ram_record+0x6c>)
 8004fde:	4413      	add	r3, r2
 8004fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fe4:	4912      	ldr	r1, [pc, #72]	; (8005030 <sampler_ram_record+0x70>)
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f007 ff4e 	bl	800ce88 <memcpy>
	record_counter =record_counter+1024;
 8004fec:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <sampler_ram_record+0x64>)
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <sampler_ram_record+0x64>)
 8004ff8:	801a      	strh	r2, [r3, #0]
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 8004ffa:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <sampler_ram_record+0x64>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005002:	4293      	cmp	r3, r2
 8005004:	d90c      	bls.n	8005020 <sampler_ram_record+0x60>
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <sampler_ram_record+0x64>)
 8005008:	2200      	movs	r2, #0
 800500a:	801a      	strh	r2, [r3, #0]
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <sampler_ram_record+0x74>)
 800500e:	2200      	movs	r2, #0
 8005010:	739a      	strb	r2, [r3, #14]
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <sampler_ram_record+0x68>)
 8005014:	2202      	movs	r2, #2
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	f000 f80e 	bl	8005038 <RAM_normalise>
 800501c:	f001 f9a2 	bl	8006364 <stop_start>

	}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20012800 	.word	0x20012800
 8005028:	200127f8 	.word	0x200127f8
 800502c:	200001ac 	.word	0x200001ac
 8005030:	2000cb10 	.word	0x2000cb10
 8005034:	20008ebc 	.word	0x20008ebc

08005038 <RAM_normalise>:

void RAM_normalise(void){
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
	    uint16_t counter=0;
 800503e:	2300      	movs	r3, #0
 8005040:	81fb      	strh	r3, [r7, #14]
	    uint16_t peak=0;
 8005042:	2300      	movs	r3, #0
 8005044:	81bb      	strh	r3, [r7, #12]
	    uint16_t*   ram_ptr=  &RAM;
 8005046:	4b36      	ldr	r3, [pc, #216]	; (8005120 <RAM_normalise+0xe8>)
 8005048:	60bb      	str	r3, [r7, #8]
	    float process1=32767 ;
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <RAM_normalise+0xec>)
 800504c:	607b      	str	r3, [r7, #4]
	   int32_t incoming;
	    for (counter=0;counter<16384;counter++){
 800504e:	2300      	movs	r3, #0
 8005050:	81fb      	strh	r3, [r7, #14]
 8005052:	e00e      	b.n	8005072 <RAM_normalise+0x3a>

		incoming= *(ram_ptr+counter);
 8005054:	89fb      	ldrh	r3, [r7, #14]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	603b      	str	r3, [r7, #0]
		if (incoming>peak ) peak=incoming;
 8005060:	89bb      	ldrh	r3, [r7, #12]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	dd01      	ble.n	800506c <RAM_normalise+0x34>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	81bb      	strh	r3, [r7, #12]
	    for (counter=0;counter<16384;counter++){
 800506c:	89fb      	ldrh	r3, [r7, #14]
 800506e:	3301      	adds	r3, #1
 8005070:	81fb      	strh	r3, [r7, #14]
 8005072:	89fb      	ldrh	r3, [r7, #14]
 8005074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005078:	d3ec      	bcc.n	8005054 <RAM_normalise+0x1c>
	    }
	    process1=(32767/(peak-process1))*0.9;
 800507a:	89bb      	ldrh	r3, [r7, #12]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005084:	edd7 7a01 	vldr	s15, [r7, #4]
 8005088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800508c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005128 <RAM_normalise+0xf0>
 8005090:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005094:	ee16 0a90 	vmov	r0, s13
 8005098:	f7fb fb34 	bl	8000704 <__aeabi_f2d>
 800509c:	a31e      	add	r3, pc, #120	; (adr r3, 8005118 <RAM_normalise+0xe0>)
 800509e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a2:	f7fb f8a1 	bl	80001e8 <__aeabi_dmul>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4610      	mov	r0, r2
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7fb fba1 	bl	80007f4 <__aeabi_d2f>
 80050b2:	4603      	mov	r3, r0
 80050b4:	607b      	str	r3, [r7, #4]

	    for (counter=0;counter<16384;counter++){
 80050b6:	2300      	movs	r3, #0
 80050b8:	81fb      	strh	r3, [r7, #14]
 80050ba:	e024      	b.n	8005106 <RAM_normalise+0xce>
		incoming= (*(ram_ptr+counter))-32767;
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	4413      	add	r3, r2
 80050c4:	881b      	ldrh	r3, [r3, #0]
 80050c6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80050ca:	3b7f      	subs	r3, #127	; 0x7f
 80050cc:	603b      	str	r3, [r7, #0]
		incoming=(incoming*process1)+32767;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	ee07 3a90 	vmov	s15, r3
 80050d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80050dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005128 <RAM_normalise+0xf0>
 80050e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ec:	ee17 3a90 	vmov	r3, s15
 80050f0:	603b      	str	r3, [r7, #0]

		*(ram_ptr+counter)=incoming&65535;
 80050f2:	89fb      	ldrh	r3, [r7, #14]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	b292      	uxth	r2, r2
 80050fe:	801a      	strh	r2, [r3, #0]
	    for (counter=0;counter<16384;counter++){
 8005100:	89fb      	ldrh	r3, [r7, #14]
 8005102:	3301      	adds	r3, #1
 8005104:	81fb      	strh	r3, [r7, #14]
 8005106:	89fb      	ldrh	r3, [r7, #14]
 8005108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800510c:	d3d6      	bcc.n	80050bc <RAM_normalise+0x84>

	    }

	}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	cccccccd 	.word	0xcccccccd
 800511c:	3feccccc 	.word	0x3feccccc
 8005120:	200001ac 	.word	0x200001ac
 8005124:	46fffe00 	.word	0x46fffe00
 8005128:	46fffe00 	.word	0x46fffe00

0800512c <record_output_to_RAM>:
void record_output_to_RAM(void){
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
//	  if (sampler.record_enable)  { return;} // skip if recording already
    memcpy(	&RAM[record_out_counter], output_mix,512);   // transfer
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <record_output_to_RAM+0x48>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <record_output_to_RAM+0x4c>)
 8005138:	4413      	add	r3, r2
 800513a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800513e:	490f      	ldr	r1, [pc, #60]	; (800517c <record_output_to_RAM+0x50>)
 8005140:	4618      	mov	r0, r3
 8005142:	f007 fea1 	bl	800ce88 <memcpy>
    record_out_counter =record_out_counter+512;
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <record_output_to_RAM+0x48>)
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800514e:	b29a      	uxth	r2, r3
 8005150:	4b08      	ldr	r3, [pc, #32]	; (8005174 <record_output_to_RAM+0x48>)
 8005152:	801a      	strh	r2, [r3, #0]
if (record_out_counter>=32767) { record_out_counter=0; record_output=0;
 8005154:	4b07      	ldr	r3, [pc, #28]	; (8005174 <record_output_to_RAM+0x48>)
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800515c:	4293      	cmp	r3, r2
 800515e:	d907      	bls.n	8005170 <record_output_to_RAM+0x44>
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <record_output_to_RAM+0x48>)
 8005162:	2200      	movs	r2, #0
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <record_output_to_RAM+0x54>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]

						RAM_normalise();   }  // reset and stop record RAM_normalise();
 800516c:	f7ff ff64 	bl	8005038 <RAM_normalise>

		     }
 8005170:	bf00      	nop
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20012c08 	.word	0x20012c08
 8005178:	200001ac 	.word	0x200001ac
 800517c:	20012808 	.word	0x20012808
 8005180:	20012805 	.word	0x20012805

08005184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005186:	b0a7      	sub	sp, #156	; 0x9c
 8005188:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800518a:	f001 fd2b 	bl	8006be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800518e:	f000 fc23 	bl	80059d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005192:	f000 ffa1 	bl	80060d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005196:	f000 ff59 	bl	800604c <MX_DMA_Init>
  MX_ADC1_Init();
 800519a:	f000 fc87 	bl	8005aac <MX_ADC1_Init>
  MX_SPI2_Init();
 800519e:	f000 fd7f 	bl	8005ca0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80051a2:	f000 fe07 	bl	8005db4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80051a6:	f000 fe87 	bl	8005eb8 <MX_TIM4_Init>
  MX_I2C2_Init();
 80051aa:	f000 fd15 	bl	8005bd8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80051ae:	f000 fd41 	bl	8005c34 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80051b2:	f000 ff21 	bl	8005ff8 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80051b6:	f000 fed5 	bl	8005f64 <MX_TIM10_Init>
  MX_TIM2_Init();
 80051ba:	f000 fda7 	bl	8005d0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 80051be:	f7fc fc79 	bl	8001ab4 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80051c2:	4bb7      	ldr	r3, [pc, #732]	; (80054a0 <main+0x31c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	3301      	adds	r3, #1
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	4bb5      	ldr	r3, [pc, #724]	; (80054a0 <main+0x31c>)
 80051cc:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 80051ce:	4bb5      	ldr	r3, [pc, #724]	; (80054a4 <main+0x320>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	4ab3      	ldr	r2, [pc, #716]	; (80054a4 <main+0x320>)
 80051d6:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  uint32_t  millis = HAL_GetTick();
 80051d8:	f001 fd6a 	bl	8006cb0 <HAL_GetTick>
 80051dc:	67f8      	str	r0, [r7, #124]	; 0x7c


	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 80051de:	4bb1      	ldr	r3, [pc, #708]	; (80054a4 <main+0x320>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	2b06      	cmp	r3, #6
 80051e8:	d101      	bne.n	80051ee <main+0x6a>
 80051ea:	f7fc fb83 	bl	80018f4 <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 80051ee:	4bae      	ldr	r3, [pc, #696]	; (80054a8 <main+0x324>)
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	2b27      	cmp	r3, #39	; 0x27
 80051f4:	d80e      	bhi.n	8005214 <main+0x90>
 80051f6:	4bad      	ldr	r3, [pc, #692]	; (80054ac <main+0x328>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <main+0x90>
 80051fe:	4bab      	ldr	r3, [pc, #684]	; (80054ac <main+0x328>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	f001 f8ae 	bl	8006364 <stop_start>
 8005208:	4ba8      	ldr	r3, [pc, #672]	; (80054ac <main+0x328>)
 800520a:	2203      	movs	r2, #3
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	4ba6      	ldr	r3, [pc, #664]	; (80054a8 <main+0x324>)
 8005210:	2232      	movs	r2, #50	; 0x32
 8005212:	705a      	strb	r2, [r3, #1]
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8005214:	4ba4      	ldr	r3, [pc, #656]	; (80054a8 <main+0x324>)
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2b27      	cmp	r3, #39	; 0x27
 800521a:	d80e      	bhi.n	800523a <main+0xb6>
 800521c:	4ba3      	ldr	r3, [pc, #652]	; (80054ac <main+0x328>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d10a      	bne.n	800523a <main+0xb6>
 8005224:	4ba1      	ldr	r3, [pc, #644]	; (80054ac <main+0x328>)
 8005226:	2202      	movs	r2, #2
 8005228:	701a      	strb	r2, [r3, #0]
 800522a:	f001 f89b 	bl	8006364 <stop_start>
 800522e:	4b9f      	ldr	r3, [pc, #636]	; (80054ac <main+0x328>)
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	4b9c      	ldr	r3, [pc, #624]	; (80054a8 <main+0x324>)
 8005236:	2232      	movs	r2, #50	; 0x32
 8005238:	705a      	strb	r2, [r3, #1]

	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 800523a:	4b9a      	ldr	r3, [pc, #616]	; (80054a4 <main+0x320>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 8005242:	f040 8193 	bne.w	800556c <main+0x3e8>

		    if (mem_count>EPROM_limit) mem_count=0; else mem_count++;
 8005246:	4b9a      	ldr	r3, [pc, #616]	; (80054b0 <main+0x32c>)
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	f240 2266 	movw	r2, #614	; 0x266
 800524e:	4293      	cmp	r3, r2
 8005250:	d903      	bls.n	800525a <main+0xd6>
 8005252:	4b97      	ldr	r3, [pc, #604]	; (80054b0 <main+0x32c>)
 8005254:	2200      	movs	r2, #0
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e005      	b.n	8005266 <main+0xe2>
 800525a:	4b95      	ldr	r3, [pc, #596]	; (80054b0 <main+0x32c>)
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	4b93      	ldr	r3, [pc, #588]	; (80054b0 <main+0x32c>)
 8005264:	801a      	strh	r2, [r3, #0]
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 8005266:	4b92      	ldr	r3, [pc, #584]	; (80054b0 <main+0x32c>)
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 800526e:	d903      	bls.n	8005278 <main+0xf4>
 8005270:	4b8f      	ldr	r3, [pc, #572]	; (80054b0 <main+0x32c>)
 8005272:	f240 12cd 	movw	r2, #461	; 0x1cd
 8005276:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 8005278:	f7fc f832 	bl	80012e0 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 800527c:	2300      	movs	r3, #0
 800527e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			memcpy(potSource,&seq,46); // about 35
 8005282:	4a8c      	ldr	r2, [pc, #560]	; (80054b4 <main+0x330>)
 8005284:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <main+0x324>)
 8005286:	4614      	mov	r4, r2
 8005288:	461d      	mov	r5, r3
 800528a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800528c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800528e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005296:	c407      	stmia	r4!, {r0, r1, r2}
 8005298:	8023      	strh	r3, [r4, #0]
			memcpy(potSource+476,&sampler,11);
 800529a:	4b87      	ldr	r3, [pc, #540]	; (80054b8 <main+0x334>)
 800529c:	220b      	movs	r2, #11
 800529e:	4987      	ldr	r1, [pc, #540]	; (80054bc <main+0x338>)
 80052a0:	4618      	mov	r0, r3
 80052a2:	f007 fdf1 	bl	800ce88 <memcpy>
			for(i=0;i<10;i++){
 80052a6:	4b86      	ldr	r3, [pc, #536]	; (80054c0 <main+0x33c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	e0a1      	b.n	80053f2 <main+0x26e>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 80052ae:	4b84      	ldr	r3, [pc, #528]	; (80054c0 <main+0x33c>)
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	339c      	adds	r3, #156	; 0x9c
 80052be:	4a7d      	ldr	r2, [pc, #500]	; (80054b4 <main+0x330>)
 80052c0:	1898      	adds	r0, r3, r2
 80052c2:	4b7f      	ldr	r3, [pc, #508]	; (80054c0 <main+0x33c>)
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4613      	mov	r3, r2
 80052ca:	00db      	lsls	r3, r3, #3
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4a7c      	ldr	r2, [pc, #496]	; (80054c4 <main+0x340>)
 80052d2:	4413      	add	r3, r2
 80052d4:	220e      	movs	r2, #14
 80052d6:	4619      	mov	r1, r3
 80052d8:	f007 fdd6 	bl	800ce88 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80052dc:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <main+0x33c>)
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4613      	mov	r3, r2
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	4413      	add	r3, r2
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	332e      	adds	r3, #46	; 0x2e
 80052ec:	4a71      	ldr	r2, [pc, #452]	; (80054b4 <main+0x330>)
 80052ee:	1898      	adds	r0, r3, r2
 80052f0:	4b73      	ldr	r3, [pc, #460]	; (80054c0 <main+0x33c>)
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4a72      	ldr	r2, [pc, #456]	; (80054c8 <main+0x344>)
 8005300:	4413      	add	r3, r2
 8005302:	2206      	movs	r2, #6
 8005304:	4619      	mov	r1, r3
 8005306:	f007 fdbf 	bl	800ce88 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 800530a:	4b6d      	ldr	r3, [pc, #436]	; (80054c0 <main+0x33c>)
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	336a      	adds	r3, #106	; 0x6a
 8005318:	4a66      	ldr	r2, [pc, #408]	; (80054b4 <main+0x330>)
 800531a:	1898      	adds	r0, r3, r2
 800531c:	4b68      	ldr	r3, [pc, #416]	; (80054c0 <main+0x33c>)
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	4a68      	ldr	r2, [pc, #416]	; (80054cc <main+0x348>)
 800532c:	4413      	add	r3, r2
 800532e:	2205      	movs	r2, #5
 8005330:	4619      	mov	r1, r3
 8005332:	f007 fda9 	bl	800ce88 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 8005336:	4b62      	ldr	r3, [pc, #392]	; (80054c0 <main+0x33c>)
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005348:	4a5a      	ldr	r2, [pc, #360]	; (80054b4 <main+0x330>)
 800534a:	1898      	adds	r0, r3, r2
 800534c:	4b5c      	ldr	r3, [pc, #368]	; (80054c0 <main+0x33c>)
 800534e:	881b      	ldrh	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	232c      	movs	r3, #44	; 0x2c
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	4a5d      	ldr	r2, [pc, #372]	; (80054d0 <main+0x34c>)
 800535a:	4413      	add	r3, r2
 800535c:	2206      	movs	r2, #6
 800535e:	4619      	mov	r1, r3
 8005360:	f007 fd92 	bl	800ce88 <memcpy>
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 8005364:	4b56      	ldr	r3, [pc, #344]	; (80054c0 <main+0x33c>)
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005376:	4a4f      	ldr	r2, [pc, #316]	; (80054b4 <main+0x330>)
 8005378:	1898      	adds	r0, r3, r2
 800537a:	4b51      	ldr	r3, [pc, #324]	; (80054c0 <main+0x33c>)
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	330a      	adds	r3, #10
 8005380:	222c      	movs	r2, #44	; 0x2c
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	4a52      	ldr	r2, [pc, #328]	; (80054d0 <main+0x34c>)
 8005388:	4413      	add	r3, r2
 800538a:	2206      	movs	r2, #6
 800538c:	4619      	mov	r1, r3
 800538e:	f007 fd7b 	bl	800ce88 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8005392:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <main+0x33c>)
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80053a4:	4a43      	ldr	r2, [pc, #268]	; (80054b4 <main+0x330>)
 80053a6:	1898      	adds	r0, r3, r2
 80053a8:	4b45      	ldr	r3, [pc, #276]	; (80054c0 <main+0x33c>)
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	4613      	mov	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4413      	add	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	4a47      	ldr	r2, [pc, #284]	; (80054d4 <main+0x350>)
 80053b8:	4413      	add	r3, r2
 80053ba:	2206      	movs	r2, #6
 80053bc:	4619      	mov	r1, r3
 80053be:	f007 fd63 	bl	800ce88 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 80053c2:	4b3f      	ldr	r3, [pc, #252]	; (80054c0 <main+0x33c>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80053cc:	4a39      	ldr	r2, [pc, #228]	; (80054b4 <main+0x330>)
 80053ce:	441a      	add	r2, r3
 80053d0:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <main+0x33c>)
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	4619      	mov	r1, r3
 80053d6:	460b      	mov	r3, r1
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	493e      	ldr	r1, [pc, #248]	; (80054d8 <main+0x354>)
 80053e0:	440b      	add	r3, r1
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <main+0x33c>)
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	3301      	adds	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	4b34      	ldr	r3, [pc, #208]	; (80054c0 <main+0x33c>)
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	4b33      	ldr	r3, [pc, #204]	; (80054c0 <main+0x33c>)
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	f67f af59 	bls.w	80052ae <main+0x12a>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8005402:	2300      	movs	r3, #0
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	1d3b      	adds	r3, r7, #4
 8005408:	222e      	movs	r2, #46	; 0x2e
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f007 fd49 	bl	800cea4 <memset>
			 uint8_t mem_verify_list[50]={0};
 8005412:	2300      	movs	r3, #0
 8005414:	637b      	str	r3, [r7, #52]	; 0x34
 8005416:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800541a:	222e      	movs	r2, #46	; 0x2e
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f007 fd40 	bl	800cea4 <memset>
			 uint8_t read_counter=0;
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <main+0x32c>)
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	4b20      	ldr	r3, [pc, #128]	; (80054b4 <main+0x330>)
 8005432:	4413      	add	r3, r2
 8005434:	461c      	mov	r4, r3
 8005436:	463e      	mov	r6, r7
 8005438:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800543c:	4635      	mov	r5, r6
 800543e:	4623      	mov	r3, r4
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	6859      	ldr	r1, [r3, #4]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800544a:	3410      	adds	r4, #16
 800544c:	3610      	adds	r6, #16
 800544e:	4564      	cmp	r4, ip
 8005450:	d1f4      	bne.n	800543c <main+0x2b8>
 8005452:	4632      	mov	r2, r6
 8005454:	4623      	mov	r3, r4
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <main+0x32c>)
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	099b      	lsrs	r3, r3, #6
 8005460:	b29b      	uxth	r3, r3
 8005462:	3301      	adds	r3, #1
 8005464:	b29b      	uxth	r3, r3
 8005466:	019b      	lsls	r3, r3, #6
 8005468:	b29a      	uxth	r2, r3
 800546a:	4b11      	ldr	r3, [pc, #68]	; (80054b0 <main+0x32c>)
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005472:	b29b      	uxth	r3, r3
 8005474:	4413      	add	r3, r2
 8005476:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 800547a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800547e:	2364      	movs	r3, #100	; 0x64
 8005480:	9302      	str	r3, [sp, #8]
 8005482:	2332      	movs	r3, #50	; 0x32
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2302      	movs	r3, #2
 800548e:	21a0      	movs	r1, #160	; 0xa0
 8005490:	4812      	ldr	r0, [pc, #72]	; (80054dc <main+0x358>)
 8005492:	f003 fd93 	bl	8008fbc <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8005496:	2300      	movs	r3, #0
 8005498:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800549c:	e039      	b.n	8005512 <main+0x38e>
 800549e:	bf00      	nop
 80054a0:	20009916 	.word	0x20009916
 80054a4:	2000c170 	.word	0x2000c170
 80054a8:	2000dd54 	.word	0x2000dd54
 80054ac:	200127f8 	.word	0x200127f8
 80054b0:	2000c16e 	.word	0x2000c16e
 80054b4:	20009648 	.word	0x20009648
 80054b8:	20009824 	.word	0x20009824
 80054bc:	20008ebc 	.word	0x20008ebc
 80054c0:	2000991a 	.word	0x2000991a
 80054c4:	20008e10 	.word	0x20008e10
 80054c8:	2000cf1c 	.word	0x2000cf1c
 80054cc:	2000d2c8 	.word	0x2000d2c8
 80054d0:	2000dd84 	.word	0x2000dd84
 80054d4:	2000d1c4 	.word	0x2000d1c4
 80054d8:	2000d200 	.word	0x2000d200
 80054dc:	20012cf4 	.word	0x20012cf4

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 80054e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80054e4:	3388      	adds	r3, #136	; 0x88
 80054e6:	443b      	add	r3, r7
 80054e8:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 80054ec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80054f0:	3388      	adds	r3, #136	; 0x88
 80054f2:	443b      	add	r3, r7
 80054f4:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d10f      	bne.n	800551c <main+0x398>
			     mem_count++;
 80054fc:	4b6e      	ldr	r3, [pc, #440]	; (80056b8 <main+0x534>)
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	4b6c      	ldr	r3, [pc, #432]	; (80056b8 <main+0x534>)
 8005506:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8005508:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800550c:	3301      	adds	r3, #1
 800550e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005512:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005516:	2b31      	cmp	r3, #49	; 0x31
 8005518:	d9e2      	bls.n	80054e0 <main+0x35c>
 800551a:	e000      	b.n	800551e <main+0x39a>
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 800551c:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 800551e:	4b66      	ldr	r3, [pc, #408]	; (80056b8 <main+0x534>)
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	4b65      	ldr	r3, [pc, #404]	; (80056bc <main+0x538>)
 8005526:	5c9a      	ldrb	r2, [r3, r2]
 8005528:	4b65      	ldr	r3, [pc, #404]	; (80056c0 <main+0x53c>)
 800552a:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800552c:	4b62      	ldr	r3, [pc, #392]	; (80056b8 <main+0x534>)
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	099b      	lsrs	r3, r3, #6
 8005532:	b29b      	uxth	r3, r3
 8005534:	3301      	adds	r3, #1
 8005536:	b29b      	uxth	r3, r3
 8005538:	019b      	lsls	r3, r3, #6
 800553a:	b29a      	uxth	r2, r3
 800553c:	4b5e      	ldr	r3, [pc, #376]	; (80056b8 <main+0x534>)
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005544:	b29b      	uxth	r3, r3
 8005546:	4413      	add	r3, r2
 8005548:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 800554c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005550:	2364      	movs	r3, #100	; 0x64
 8005552:	9302      	str	r3, [sp, #8]
 8005554:	2301      	movs	r3, #1
 8005556:	9301      	str	r3, [sp, #4]
 8005558:	4b59      	ldr	r3, [pc, #356]	; (80056c0 <main+0x53c>)
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	2302      	movs	r3, #2
 800555e:	21a0      	movs	r1, #160	; 0xa0
 8005560:	4858      	ldr	r0, [pc, #352]	; (80056c4 <main+0x540>)
 8005562:	f003 fc31 	bl	8008dc8 <HAL_I2C_Mem_Write>

			 // "&hi2c2"  actual register address  , write only when needed

		loop_counter2=0; //reset
 8005566:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <main+0x544>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 800556c:	4b57      	ldr	r3, [pc, #348]	; (80056cc <main+0x548>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8093 	beq.w	800569c <main+0x518>
		uint16_t mem_counter=0;
 8005576:	2300      	movs	r3, #0
 8005578:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		  memcpy(serial_source,&seq,36); // copy bits
 800557c:	2224      	movs	r2, #36	; 0x24
 800557e:	4954      	ldr	r1, [pc, #336]	; (80056d0 <main+0x54c>)
 8005580:	4854      	ldr	r0, [pc, #336]	; (80056d4 <main+0x550>)
 8005582:	f007 fc81 	bl	800ce88 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8005586:	4b54      	ldr	r3, [pc, #336]	; (80056d8 <main+0x554>)
 8005588:	4954      	ldr	r1, [pc, #336]	; (80056dc <main+0x558>)
 800558a:	2240      	movs	r2, #64	; 0x40
 800558c:	4618      	mov	r0, r3
 800558e:	f007 fc7b 	bl	800ce88 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005592:	2300      	movs	r3, #0
 8005594:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005598:	e032      	b.n	8005600 <main+0x47c>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 800559a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d814      	bhi.n	80055cc <main+0x448>
 80055a2:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	1a9b      	subs	r3, r3, r2
 80055ac:	3360      	adds	r3, #96	; 0x60
 80055ae:	4a49      	ldr	r2, [pc, #292]	; (80056d4 <main+0x550>)
 80055b0:	1898      	adds	r0, r3, r2
 80055b2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80055b6:	1d9a      	adds	r2, r3, #6
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4a47      	ldr	r2, [pc, #284]	; (80056e0 <main+0x55c>)
 80055c2:	4413      	add	r3, r2
 80055c4:	2207      	movs	r2, #7
 80055c6:	4619      	mov	r1, r3
 80055c8:	f007 fc5e 	bl	800ce88 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 80055cc:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	3324      	adds	r3, #36	; 0x24
 80055da:	4a3e      	ldr	r2, [pc, #248]	; (80056d4 <main+0x550>)
 80055dc:	1898      	adds	r0, r3, r2
 80055de:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80055e2:	4613      	mov	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4413      	add	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4a3e      	ldr	r2, [pc, #248]	; (80056e4 <main+0x560>)
 80055ec:	4413      	add	r3, r2
 80055ee:	2206      	movs	r2, #6
 80055f0:	4619      	mov	r1, r3
 80055f2:	f007 fc49 	bl	800ce88 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80055f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80055fa:	3301      	adds	r3, #1
 80055fc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005600:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005604:	2b09      	cmp	r3, #9
 8005606:	d9c8      	bls.n	800559a <main+0x416>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005608:	e005      	b.n	8005616 <main+0x492>
			  serial_up++;
 800560a:	4b37      	ldr	r3, [pc, #220]	; (80056e8 <main+0x564>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	3301      	adds	r3, #1
 8005610:	b2da      	uxtb	r2, r3
 8005612:	4b35      	ldr	r3, [pc, #212]	; (80056e8 <main+0x564>)
 8005614:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005616:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <main+0x564>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <main+0x568>)
 800561e:	5c9a      	ldrb	r2, [r3, r2]
 8005620:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <main+0x564>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <main+0x550>)
 8005628:	5c5b      	ldrb	r3, [r3, r1]
 800562a:	429a      	cmp	r2, r3
 800562c:	d103      	bne.n	8005636 <main+0x4b2>
 800562e:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <main+0x564>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2ba0      	cmp	r3, #160	; 0xa0
 8005634:	d9e9      	bls.n	800560a <main+0x486>
		  }

		  serial_send[6]=0;
 8005636:	4b2e      	ldr	r3, [pc, #184]	; (80056f0 <main+0x56c>)
 8005638:	2200      	movs	r2, #0
 800563a:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <main+0x54c>)
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <main+0x56c>)
 8005642:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8005644:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <main+0x564>)
 8005646:	781a      	ldrb	r2, [r3, #0]
 8005648:	4b29      	ldr	r3, [pc, #164]	; (80056f0 <main+0x56c>)
 800564a:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 800564c:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <main+0x564>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <main+0x550>)
 8005654:	5c9a      	ldrb	r2, [r3, r2]
 8005656:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <main+0x56c>)
 8005658:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 800565a:	4b23      	ldr	r3, [pc, #140]	; (80056e8 <main+0x564>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	4619      	mov	r1, r3
 8005660:	4b21      	ldr	r3, [pc, #132]	; (80056e8 <main+0x564>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <main+0x550>)
 8005668:	5c59      	ldrb	r1, [r3, r1]
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <main+0x568>)
 800566c:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <main+0x564>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	2ba1      	cmp	r3, #161	; 0xa1
 8005674:	d903      	bls.n	800567e <main+0x4fa>
 8005676:	4b1c      	ldr	r3, [pc, #112]	; (80056e8 <main+0x564>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e005      	b.n	800568a <main+0x506>
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <main+0x564>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	b2da      	uxtb	r2, r3
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <main+0x564>)
 8005688:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 800568a:	2364      	movs	r3, #100	; 0x64
 800568c:	2208      	movs	r2, #8
 800568e:	4918      	ldr	r1, [pc, #96]	; (80056f0 <main+0x56c>)
 8005690:	4818      	ldr	r0, [pc, #96]	; (80056f4 <main+0x570>)
 8005692:	f007 f812 	bl	800c6ba <HAL_UART_Transmit>
		  serial_tosend=0;
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <main+0x548>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <main+0x574>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <main+0x524>
 80056a4:	f7fe fe9a 	bl	80043dc <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 80056a8:	4b14      	ldr	r3, [pc, #80]	; (80056fc <main+0x578>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b05      	cmp	r3, #5
 80056ae:	d841      	bhi.n	8005734 <main+0x5b0>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 80056b0:	4b13      	ldr	r3, [pc, #76]	; (8005700 <main+0x57c>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	e02d      	b.n	8005714 <main+0x590>
 80056b8:	2000c16e 	.word	0x2000c16e
 80056bc:	20009648 	.word	0x20009648
 80056c0:	2000c174 	.word	0x2000c174
 80056c4:	20012cf4 	.word	0x20012cf4
 80056c8:	2000c170 	.word	0x2000c170
 80056cc:	20010f3d 	.word	0x20010f3d
 80056d0:	2000dd54 	.word	0x2000dd54
 80056d4:	20010d3c 	.word	0x20010d3c
 80056d8:	20010d9c 	.word	0x20010d9c
 80056dc:	20009744 	.word	0x20009744
 80056e0:	20008e10 	.word	0x20008e10
 80056e4:	2000d1c4 	.word	0x2000d1c4
 80056e8:	20010f3c 	.word	0x20010f3c
 80056ec:	20010e3c 	.word	0x20010e3c
 80056f0:	20008ee4 	.word	0x20008ee4
 80056f4:	20013038 	.word	0x20013038
 80056f8:	2000cb0e 	.word	0x2000cb0e
 80056fc:	2000c163 	.word	0x2000c163
 8005700:	2000991a 	.word	0x2000991a
 8005704:	f7fe fd58 	bl	80041b8 <display_init>
 8005708:	4b9f      	ldr	r3, [pc, #636]	; (8005988 <main+0x804>)
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	4b9d      	ldr	r3, [pc, #628]	; (8005988 <main+0x804>)
 8005712:	801a      	strh	r2, [r3, #0]
 8005714:	4b9c      	ldr	r3, [pc, #624]	; (8005988 <main+0x804>)
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	2b05      	cmp	r3, #5
 800571a:	d9f3      	bls.n	8005704 <main+0x580>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 800571c:	4b9b      	ldr	r3, [pc, #620]	; (800598c <main+0x808>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d107      	bne.n	8005734 <main+0x5b0>
 8005724:	489a      	ldr	r0, [pc, #616]	; (8005990 <main+0x80c>)
 8005726:	f005 fe75 	bl	800b414 <HAL_TIM_Base_Start_IT>
 800572a:	4899      	ldr	r0, [pc, #612]	; (8005990 <main+0x80c>)
 800572c:	f005 fe18 	bl	800b360 <HAL_TIM_Base_Start>
 8005730:	f7fe fd98 	bl	8004264 <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8005734:	4b95      	ldr	r3, [pc, #596]	; (800598c <main+0x808>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b05      	cmp	r3, #5
 800573a:	d91f      	bls.n	800577c <main+0x5f8>

			if(sampler.sample_save_enable>10){
 800573c:	4b95      	ldr	r3, [pc, #596]	; (8005994 <main+0x810>)
 800573e:	7c1b      	ldrb	r3, [r3, #16]
 8005740:	2b0a      	cmp	r3, #10
 8005742:	d917      	bls.n	8005774 <main+0x5f0>

			    uint16_t sample_size=sizeof(RAM);
 8005744:	f648 330e 	movw	r3, #35598	; 0x8b0e
 8005748:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			    		uint8_t* ram_ptr=&RAM[0];
 800574c:	4b92      	ldr	r3, [pc, #584]	; (8005998 <main+0x814>)
 800574e:	677b      	str	r3, [r7, #116]	; 0x74

			    				sample_save(sampler.sample_save,ram_ptr, sample_size);  // write sample no 255
 8005750:	4b90      	ldr	r3, [pc, #576]	; (8005994 <main+0x810>)
 8005752:	7adb      	ldrb	r3, [r3, #11]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800575a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff f9e5 	bl	8004b2c <sample_save>
			    sampler.sample_save_enable=0;
 8005762:	4b8c      	ldr	r3, [pc, #560]	; (8005994 <main+0x810>)
 8005764:	2200      	movs	r2, #0
 8005766:	741a      	strb	r2, [r3, #16]
			    sampler.sample_save=0;   // reset position jus tin case
 8005768:	4b8a      	ldr	r3, [pc, #552]	; (8005994 <main+0x810>)
 800576a:	2200      	movs	r2, #0
 800576c:	72da      	strb	r2, [r3, #11]
			    sampler.RAM_free=0; //
 800576e:	4b89      	ldr	r3, [pc, #548]	; (8005994 <main+0x810>)
 8005770:	2200      	movs	r2, #0
 8005772:	749a      	strb	r2, [r3, #18]


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8005774:	f7ff f808 	bl	8004788 <menu3_fill>
 8005778:	f7fe ff12 	bl	80045a0 <encoder2>
		}


		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 800577c:	4b87      	ldr	r3, [pc, #540]	; (800599c <main+0x818>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005784:	2b00      	cmp	r3, #0
 8005786:	d147      	bne.n	8005818 <main+0x694>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8005788:	4885      	ldr	r0, [pc, #532]	; (80059a0 <main+0x81c>)
 800578a:	f002 f849 	bl	8007820 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 800578e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8005798:	2101      	movs	r1, #1
 800579a:	4881      	ldr	r0, [pc, #516]	; (80059a0 <main+0x81c>)
 800579c:	f001 fbb0 	bl	8006f00 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80057a0:	2101      	movs	r1, #1
 80057a2:	487f      	ldr	r0, [pc, #508]	; (80059a0 <main+0x81c>)
 80057a4:	f002 f952 	bl	8007a4c <HAL_ADCEx_InjectedGetValue>
 80057a8:	4603      	mov	r3, r0
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80057b0:	2102      	movs	r1, #2
 80057b2:	487b      	ldr	r0, [pc, #492]	; (80059a0 <main+0x81c>)
 80057b4:	f002 f94a 	bl	8007a4c <HAL_ADCEx_InjectedGetValue>
 80057b8:	4603      	mov	r3, r0
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80057c0:	2103      	movs	r1, #3
 80057c2:	4877      	ldr	r0, [pc, #476]	; (80059a0 <main+0x81c>)
 80057c4:	f002 f942 	bl	8007a4c <HAL_ADCEx_InjectedGetValue>
 80057c8:	4603      	mov	r3, r0
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 80057d0:	4873      	ldr	r0, [pc, #460]	; (80059a0 <main+0x81c>)
 80057d2:	f002 f8ef 	bl	80079b4 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 80057d6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80057da:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80057de:	330f      	adds	r3, #15
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	4b6f      	ldr	r3, [pc, #444]	; (80059a4 <main+0x820>)
 80057e8:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 80057ea:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80057ee:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80057f2:	330f      	adds	r3, #15
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <main+0x820>)
 80057fc:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 80057fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005802:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005806:	330f      	adds	r3, #15
 8005808:	b29b      	uxth	r3, r3
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	b29a      	uxth	r2, r3
 800580e:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <main+0x820>)
 8005810:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8005812:	4b65      	ldr	r3, [pc, #404]	; (80059a8 <main+0x824>)
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8005818:	4b64      	ldr	r3, [pc, #400]	; (80059ac <main+0x828>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b07      	cmp	r3, #7
 800581e:	d106      	bne.n	800582e <main+0x6aa>
 8005820:	4b63      	ldr	r3, [pc, #396]	; (80059b0 <main+0x82c>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <main+0x6aa>
 8005828:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <main+0x82c>)
 800582a:	2201      	movs	r2, #1
 800582c:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 800582e:	4b5f      	ldr	r3, [pc, #380]	; (80059ac <main+0x828>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	b2db      	uxtb	r3, r3
 8005838:	461a      	mov	r2, r3
 800583a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800583e:	485d      	ldr	r0, [pc, #372]	; (80059b4 <main+0x830>)
 8005840:	f003 f94c 	bl	8008adc <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8005844:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <main+0x834>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d062      	beq.n	8005912 <main+0x78e>


			uint16_t    adc_page=0; ;
 800584c:	2300      	movs	r3, #0
 800584e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8005852:	4b59      	ldr	r3, [pc, #356]	; (80059b8 <main+0x834>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d102      	bne.n	8005860 <main+0x6dc>
 800585a:	2300      	movs	r3, #0
 800585c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8005860:	4b55      	ldr	r3, [pc, #340]	; (80059b8 <main+0x834>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d103      	bne.n	8005870 <main+0x6ec>
 8005868:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800586c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8005870:	4b45      	ldr	r3, [pc, #276]	; (8005988 <main+0x804>)
 8005872:	2200      	movs	r2, #0
 8005874:	801a      	strh	r2, [r3, #0]
 8005876:	e038      	b.n	80058ea <main+0x766>
				adc_convert_count=(i*3)+adc_page;
 8005878:	4b43      	ldr	r3, [pc, #268]	; (8005988 <main+0x804>)
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	0052      	lsls	r2, r2, #1
 8005880:	4413      	add	r3, r2
 8005882:	b29a      	uxth	r2, r3
 8005884:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005888:	4413      	add	r3, r2
 800588a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 800588e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005892:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <main+0x838>)
 8005894:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005898:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800589c:	3301      	adds	r3, #1
 800589e:	4947      	ldr	r1, [pc, #284]	; (80059bc <main+0x838>)
 80058a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80058a4:	4413      	add	r3, r2
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80058ac:	3302      	adds	r3, #2
 80058ae:	4943      	ldr	r1, [pc, #268]	; (80059bc <main+0x838>)
 80058b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80058b4:	4413      	add	r3, r2
 80058b6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 80058ba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80058be:	4a40      	ldr	r2, [pc, #256]	; (80059c0 <main+0x83c>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				input_holder[i]=adc_convert_temp<<4;
 80058ca:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <main+0x804>)
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	b299      	uxth	r1, r3
 80058d8:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <main+0x840>)
 80058da:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i=0;i<512;i++){
 80058de:	4b2a      	ldr	r3, [pc, #168]	; (8005988 <main+0x804>)
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	4b28      	ldr	r3, [pc, #160]	; (8005988 <main+0x804>)
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	4b27      	ldr	r3, [pc, #156]	; (8005988 <main+0x804>)
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f2:	d3c1      	bcc.n	8005878 <main+0x6f4>


				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler.RAM_free=1;  loop_counter2=111;   sampler_ram_record(); }  //stop loop counter2
 80058f4:	4b27      	ldr	r3, [pc, #156]	; (8005994 <main+0x810>)
 80058f6:	7b9b      	ldrb	r3, [r3, #14]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <main+0x788>
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <main+0x810>)
 80058fe:	2201      	movs	r2, #1
 8005900:	749a      	strb	r2, [r3, #18]
 8005902:	4b26      	ldr	r3, [pc, #152]	; (800599c <main+0x818>)
 8005904:	226f      	movs	r2, #111	; 0x6f
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f7ff fb5a 	bl	8004fc0 <sampler_ram_record>

			adc_flag=0;
 800590c:	4b2a      	ldr	r3, [pc, #168]	; (80059b8 <main+0x834>)
 800590e:	2200      	movs	r2, #0
 8005910:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8005912:	4b2d      	ldr	r3, [pc, #180]	; (80059c8 <main+0x844>)
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591c:	d90a      	bls.n	8005934 <main+0x7b0>
 800591e:	4b2b      	ldr	r3, [pc, #172]	; (80059cc <main+0x848>)
 8005920:	881b      	ldrh	r3, [r3, #0]
 8005922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005926:	d105      	bne.n	8005934 <main+0x7b0>
 8005928:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <main+0x84c>)
 800592a:	2201      	movs	r2, #1
 800592c:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 800592e:	e001      	b.n	8005934 <main+0x7b0>

			sampling();
 8005930:	f7fc fbfe 	bl	8002130 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 8005934:	4b26      	ldr	r3, [pc, #152]	; (80059d0 <main+0x84c>)
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f9      	bne.n	8005930 <main+0x7ac>

	  	}   // should trigger this after adc reads also reset sample_point here

		if((millis-millis_stored)>5) {   // run gfx_line
 800593c:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <main+0x850>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b05      	cmp	r3, #5
 8005946:	f67f ac3c 	bls.w	80051c2 <main+0x3e>

		  LCD_Info_feedback();
 800594a:	f7fe ffdf 	bl	800490c <LCD_Info_feedback>
		    uint8_t up_counter2=0;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					while ((up_counter2<8) && (init > 5) )								{
 8005954:	e00c      	b.n	8005970 <main+0x7ec>

					gfx_line_fill();   // just run 8 times between sampling , dont need more
 8005956:	f7fe fd53 	bl	8004400 <gfx_line_fill>
					up_counter2++;
 800595a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800595e:	3301      	adds	r3, #1
 8005960:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					loop_counter++;
 8005964:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <main+0x824>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	b2da      	uxtb	r2, r3
 800596c:	4b0e      	ldr	r3, [pc, #56]	; (80059a8 <main+0x824>)
 800596e:	701a      	strb	r2, [r3, #0]
					while ((up_counter2<8) && (init > 5) )								{
 8005970:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005974:	2b07      	cmp	r3, #7
 8005976:	d803      	bhi.n	8005980 <main+0x7fc>
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <main+0x808>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b05      	cmp	r3, #5
 800597e:	d8ea      	bhi.n	8005956 <main+0x7d2>
					}   millis_stored=millis;
 8005980:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <main+0x850>)
 8005982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005984:	6013      	str	r3, [r2, #0]
  {
 8005986:	e41c      	b.n	80051c2 <main+0x3e>
 8005988:	2000991a 	.word	0x2000991a
 800598c:	2000c163 	.word	0x2000c163
 8005990:	20012ff0 	.word	0x20012ff0
 8005994:	20008ebc 	.word	0x20008ebc
 8005998:	200001ac 	.word	0x200001ac
 800599c:	2000c170 	.word	0x2000c170
 80059a0:	20012c4c 	.word	0x20012c4c
 80059a4:	20008e00 	.word	0x20008e00
 80059a8:	20009916 	.word	0x20009916
 80059ac:	2000dd54 	.word	0x2000dd54
 80059b0:	2000c15a 	.word	0x2000c15a
 80059b4:	40020800 	.word	0x40020800
 80059b8:	2000cf10 	.word	0x2000cf10
 80059bc:	2000a92c 	.word	0x2000a92c
 80059c0:	aaaaaaab 	.word	0xaaaaaaab
 80059c4:	2000cb10 	.word	0x2000cb10
 80059c8:	2000a920 	.word	0x2000a920
 80059cc:	2000a926 	.word	0x2000a926
 80059d0:	20008e0a 	.word	0x20008e0a
 80059d4:	200127fc 	.word	0x200127fc

080059d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b094      	sub	sp, #80	; 0x50
 80059dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059de:	f107 0320 	add.w	r3, r7, #32
 80059e2:	2230      	movs	r2, #48	; 0x30
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f007 fa5c 	bl	800cea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059ec:	f107 030c 	add.w	r3, r7, #12
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	609a      	str	r2, [r3, #8]
 80059f8:	60da      	str	r2, [r3, #12]
 80059fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	4b28      	ldr	r3, [pc, #160]	; (8005aa4 <SystemClock_Config+0xcc>)
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <SystemClock_Config+0xcc>)
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a0c:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <SystemClock_Config+0xcc>)
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <SystemClock_Config+0xd0>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <SystemClock_Config+0xd0>)
 8005a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <SystemClock_Config+0xd0>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005a30:	607b      	str	r3, [r7, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a34:	2302      	movs	r3, #2
 8005a36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a40:	2302      	movs	r3, #2
 8005a42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a44:	2300      	movs	r3, #0
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005a48:	2308      	movs	r3, #8
 8005a4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005a4c:	2364      	movs	r3, #100	; 0x64
 8005a4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a50:	2302      	movs	r3, #2
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005a54:	2304      	movs	r3, #4
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a58:	f107 0320 	add.w	r3, r7, #32
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f004 f82f 	bl	8009ac0 <HAL_RCC_OscConfig>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005a68:	f000 fc92 	bl	8006390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a6c:	230f      	movs	r3, #15
 8005a6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a70:	2302      	movs	r3, #2
 8005a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005a84:	f107 030c 	add.w	r3, r7, #12
 8005a88:	2103      	movs	r1, #3
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f004 fa90 	bl	8009fb0 <HAL_RCC_ClockConfig>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005a96:	f000 fc7b 	bl	8006390 <Error_Handler>
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	3750      	adds	r7, #80	; 0x50
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	40007000 	.word	0x40007000

08005aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08c      	sub	sp, #48	; 0x30
 8005ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005ab2:	f107 0320 	add.w	r3, r7, #32
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	605a      	str	r2, [r3, #4]
 8005abc:	609a      	str	r2, [r3, #8]
 8005abe:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f007 f9ec 	bl	800cea4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005acc:	4b3e      	ldr	r3, [pc, #248]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005ace:	4a3f      	ldr	r2, [pc, #252]	; (8005bcc <MX_ADC1_Init+0x120>)
 8005ad0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005ad2:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ad8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ada:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005ae0:	4b39      	ldr	r3, [pc, #228]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005ae6:	4b38      	ldr	r3, [pc, #224]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005afc:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <MX_ADC1_Init+0x124>)
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b00:	4b31      	ldr	r3, [pc, #196]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005b06:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005b0c:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005b14:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b1a:	482b      	ldr	r0, [pc, #172]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b1c:	f001 f8f8 	bl	8006d10 <HAL_ADC_Init>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8005b26:	f000 fc33 	bl	8006390 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005b2a:	2309      	movs	r3, #9
 8005b2c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005b32:	2306      	movs	r3, #6
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b36:	f107 0320 	add.w	r3, r7, #32
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4822      	ldr	r0, [pc, #136]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b3e:	f001 fbbf 	bl	80072c0 <HAL_ADC_ConfigChannel>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8005b48:	f000 fc22 	bl	8006390 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005b50:	2301      	movs	r3, #1
 8005b52:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005b54:	2303      	movs	r3, #3
 8005b56:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005b60:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <MX_ADC1_Init+0x128>)
 8005b62:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005b70:	463b      	mov	r3, r7
 8005b72:	4619      	mov	r1, r3
 8005b74:	4814      	ldr	r0, [pc, #80]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b76:	f001 ffa1 	bl	8007abc <HAL_ADCEx_InjectedConfigChannel>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005b80:	f000 fc06 	bl	8006390 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005b84:	2302      	movs	r3, #2
 8005b86:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	4619      	mov	r1, r3
 8005b90:	480d      	ldr	r0, [pc, #52]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005b92:	f001 ff93 	bl	8007abc <HAL_ADCEx_InjectedConfigChannel>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8005b9c:	f000 fbf8 	bl	8006390 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8005ba0:	2308      	movs	r3, #8
 8005ba2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005bac:	463b      	mov	r3, r7
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4805      	ldr	r0, [pc, #20]	; (8005bc8 <MX_ADC1_Init+0x11c>)
 8005bb2:	f001 ff83 	bl	8007abc <HAL_ADCEx_InjectedConfigChannel>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8005bbc:	f000 fbe8 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005bc0:	bf00      	nop
 8005bc2:	3730      	adds	r7, #48	; 0x30
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20012c4c 	.word	0x20012c4c
 8005bcc:	40012000 	.word	0x40012000
 8005bd0:	0f000001 	.word	0x0f000001
 8005bd4:	000f0001 	.word	0x000f0001

08005bd8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <MX_I2C2_Init+0x54>)
 8005be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005be2:	4b11      	ldr	r3, [pc, #68]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005be4:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <MX_I2C2_Init+0x58>)
 8005be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005be8:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005bee:	4b0e      	ldr	r3, [pc, #56]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005bf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005bfa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005c02:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c08:	4b07      	ldr	r3, [pc, #28]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c14:	4804      	ldr	r0, [pc, #16]	; (8005c28 <MX_I2C2_Init+0x50>)
 8005c16:	f002 ff93 	bl	8008b40 <HAL_I2C_Init>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d001      	beq.n	8005c24 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005c20:	f000 fbb6 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005c24:	bf00      	nop
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20012cf4 	.word	0x20012cf4
 8005c2c:	40005800 	.word	0x40005800
 8005c30:	000186a0 	.word	0x000186a0

08005c34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005c38:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c3a:	4a18      	ldr	r2, [pc, #96]	; (8005c9c <MX_SPI1_Init+0x68>)
 8005c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005c3e:	4b16      	ldr	r3, [pc, #88]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c52:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005c58:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005c5e:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c66:	4b0c      	ldr	r3, [pc, #48]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c78:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005c7e:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c80:	220a      	movs	r2, #10
 8005c82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005c84:	4804      	ldr	r0, [pc, #16]	; (8005c98 <MX_SPI1_Init+0x64>)
 8005c86:	f004 fb73 	bl	800a370 <HAL_SPI_Init>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005c90:	f000 fb7e 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005c94:	bf00      	nop
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20012d48 	.word	0x20012d48
 8005c9c:	40013000 	.word	0x40013000

08005ca0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005ca4:	4b17      	ldr	r3, [pc, #92]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <MX_SPI2_Init+0x68>)
 8005ca8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005cb0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005cb2:	4b14      	ldr	r3, [pc, #80]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005cb8:	4b12      	ldr	r3, [pc, #72]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cd4:	2230      	movs	r2, #48	; 0x30
 8005cd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005cde:	4b09      	ldr	r3, [pc, #36]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce4:	4b07      	ldr	r3, [pc, #28]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cec:	220a      	movs	r2, #10
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005cf0:	4804      	ldr	r0, [pc, #16]	; (8005d04 <MX_SPI2_Init+0x64>)
 8005cf2:	f004 fb3d 	bl	800a370 <HAL_SPI_Init>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005cfc:	f000 fb48 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005d00:	bf00      	nop
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20012da0 	.word	0x20012da0
 8005d08:	40003800 	.word	0x40003800

08005d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08c      	sub	sp, #48	; 0x30
 8005d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d12:	f107 030c 	add.w	r3, r7, #12
 8005d16:	2224      	movs	r2, #36	; 0x24
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f007 f8c2 	bl	800cea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d20:	1d3b      	adds	r3, r7, #4
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005d30:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d36:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d4c:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005d52:	2301      	movs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005d56:	2302      	movs	r3, #2
 8005d58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8005d62:	2302      	movs	r3, #2
 8005d64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005d66:	2302      	movs	r3, #2
 8005d68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8005d72:	2302      	movs	r3, #2
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	480c      	ldr	r0, [pc, #48]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d7e:	f005 fd3d 	bl	800b7fc <HAL_TIM_Encoder_Init>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005d88:	f000 fb02 	bl	8006390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d94:	1d3b      	adds	r3, r7, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4805      	ldr	r0, [pc, #20]	; (8005db0 <MX_TIM2_Init+0xa4>)
 8005d9a:	f006 fbb7 	bl	800c50c <HAL_TIMEx_MasterConfigSynchronization>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005da4:	f000 faf4 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005da8:	bf00      	nop
 8005daa:	3730      	adds	r7, #48	; 0x30
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20012f18 	.word	0x20012f18

08005db4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08e      	sub	sp, #56	; 0x38
 8005db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	605a      	str	r2, [r3, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
 8005dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005dc8:	f107 0320 	add.w	r3, r7, #32
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dd2:	1d3b      	adds	r3, r7, #4
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	611a      	str	r2, [r3, #16]
 8005de0:	615a      	str	r2, [r3, #20]
 8005de2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005de4:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005de6:	4a33      	ldr	r2, [pc, #204]	; (8005eb4 <MX_TIM3_Init+0x100>)
 8005de8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005dea:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005df0:	4b2f      	ldr	r3, [pc, #188]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 8005df6:	4b2e      	ldr	r3, [pc, #184]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005df8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8005dfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dfe:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e04:	4b2a      	ldr	r3, [pc, #168]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e06:	2280      	movs	r2, #128	; 0x80
 8005e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005e0a:	4829      	ldr	r0, [pc, #164]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e0c:	f005 fa58 	bl	800b2c0 <HAL_TIM_Base_Init>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005e16:	f000 fabb 	bl	8006390 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005e20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e24:	4619      	mov	r1, r3
 8005e26:	4822      	ldr	r0, [pc, #136]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e28:	f005 ffb4 	bl	800bd94 <HAL_TIM_ConfigClockSource>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005e32:	f000 faad 	bl	8006390 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005e36:	481e      	ldr	r0, [pc, #120]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e38:	f005 fbd6 	bl	800b5e8 <HAL_TIM_PWM_Init>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005e42:	f000 faa5 	bl	8006390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e4e:	f107 0320 	add.w	r3, r7, #32
 8005e52:	4619      	mov	r1, r3
 8005e54:	4816      	ldr	r0, [pc, #88]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e56:	f006 fb59 	bl	800c50c <HAL_TIMEx_MasterConfigSynchronization>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005e60:	f000 fa96 	bl	8006390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005e64:	2360      	movs	r3, #96	; 0x60
 8005e66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005e70:	2304      	movs	r3, #4
 8005e72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	2200      	movs	r2, #0
 8005e78:	4619      	mov	r1, r3
 8005e7a:	480d      	ldr	r0, [pc, #52]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e7c:	f005 fec8 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005e86:	f000 fa83 	bl	8006390 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e8a:	1d3b      	adds	r3, r7, #4
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4807      	ldr	r0, [pc, #28]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005e92:	f005 febd 	bl	800bc10 <HAL_TIM_PWM_ConfigChannel>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005e9c:	f000 fa78 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005ea0:	4803      	ldr	r0, [pc, #12]	; (8005eb0 <MX_TIM3_Init+0xfc>)
 8005ea2:	f000 fd67 	bl	8006974 <HAL_TIM_MspPostInit>

}
 8005ea6:	bf00      	nop
 8005ea8:	3738      	adds	r7, #56	; 0x38
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20012f60 	.word	0x20012f60
 8005eb4:	40000400 	.word	0x40000400

08005eb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005ebe:	f107 030c 	add.w	r3, r7, #12
 8005ec2:	2224      	movs	r2, #36	; 0x24
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f006 ffec 	bl	800cea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ecc:	1d3b      	adds	r3, r7, #4
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ed4:	4b21      	ldr	r3, [pc, #132]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005ed6:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <MX_TIM4_Init+0xa8>)
 8005ed8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005eda:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ee0:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005ee6:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005eee:	4b1b      	ldr	r3, [pc, #108]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ef4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ef6:	4b19      	ldr	r3, [pc, #100]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8005efc:	2302      	movs	r3, #2
 8005efe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005f00:	2302      	movs	r3, #2
 8005f02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005f04:	2301      	movs	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005f10:	2302      	movs	r3, #2
 8005f12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005f14:	2301      	movs	r3, #1
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005f20:	f107 030c 	add.w	r3, r7, #12
 8005f24:	4619      	mov	r1, r3
 8005f26:	480d      	ldr	r0, [pc, #52]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005f28:	f005 fc68 	bl	800b7fc <HAL_TIM_Encoder_Init>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005f32:	f000 fa2d 	bl	8006390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	4619      	mov	r1, r3
 8005f42:	4806      	ldr	r0, [pc, #24]	; (8005f5c <MX_TIM4_Init+0xa4>)
 8005f44:	f006 fae2 	bl	800c50c <HAL_TIMEx_MasterConfigSynchronization>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005f4e:	f000 fa1f 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005f52:	bf00      	nop
 8005f54:	3730      	adds	r7, #48	; 0x30
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20012fa8 	.word	0x20012fa8
 8005f60:	40000800 	.word	0x40000800

08005f64 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f6a:	1d3b      	adds	r3, r7, #4
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	611a      	str	r2, [r3, #16]
 8005f78:	615a      	str	r2, [r3, #20]
 8005f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005f7e:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <MX_TIM10_Init+0x90>)
 8005f80:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8005f82:	4b1b      	ldr	r3, [pc, #108]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005f84:	2204      	movs	r2, #4
 8005f86:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f88:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8005f8e:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005f90:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005f94:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f96:	4b16      	ldr	r3, [pc, #88]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005f9c:	4b14      	ldr	r3, [pc, #80]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005fa2:	4813      	ldr	r0, [pc, #76]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005fa4:	f005 f98c 	bl	800b2c0 <HAL_TIM_Base_Init>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005fae:	f000 f9ef 	bl	8006390 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8005fb2:	480f      	ldr	r0, [pc, #60]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005fb4:	f005 fabf 	bl	800b536 <HAL_TIM_OC_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005fbe:	f000 f9e7 	bl	8006390 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <MX_TIM10_Init+0x8c>)
 8005fda:	f005 fdbd 	bl	800bb58 <HAL_TIM_OC_ConfigChannel>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005fe4:	f000 f9d4 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005fe8:	bf00      	nop
 8005fea:	3720      	adds	r7, #32
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20012ff0 	.word	0x20012ff0
 8005ff4:	40014400 	.word	0x40014400

08005ff8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 8005ffe:	4a12      	ldr	r2, [pc, #72]	; (8006048 <MX_USART1_UART_Init+0x50>)
 8006000:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 8006004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006008:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 800600c:	2200      	movs	r2, #0
 800600e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 8006012:	2200      	movs	r2, #0
 8006014:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 8006018:	2200      	movs	r2, #0
 800601a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 800601e:	2208      	movs	r2, #8
 8006020:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 8006024:	2200      	movs	r2, #0
 8006026:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 800602a:	2200      	movs	r2, #0
 800602c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800602e:	4805      	ldr	r0, [pc, #20]	; (8006044 <MX_USART1_UART_Init+0x4c>)
 8006030:	f006 faee 	bl	800c610 <HAL_HalfDuplex_Init>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800603a:	f000 f9a9 	bl	8006390 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800603e:	bf00      	nop
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20013038 	.word	0x20013038
 8006048:	40011000 	.word	0x40011000

0800604c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	4b1f      	ldr	r3, [pc, #124]	; (80060d4 <MX_DMA_Init+0x88>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <MX_DMA_Init+0x88>)
 800605c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006060:	6313      	str	r3, [r2, #48]	; 0x30
 8006062:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <MX_DMA_Init+0x88>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606a:	607b      	str	r3, [r7, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800606e:	2300      	movs	r3, #0
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <MX_DMA_Init+0x88>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	4a17      	ldr	r2, [pc, #92]	; (80060d4 <MX_DMA_Init+0x88>)
 8006078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800607c:	6313      	str	r3, [r2, #48]	; 0x30
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <MX_DMA_Init+0x88>)
 8006080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800608a:	2200      	movs	r2, #0
 800608c:	2105      	movs	r1, #5
 800608e:	200f      	movs	r0, #15
 8006090:	f001 ff89 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006094:	200f      	movs	r0, #15
 8006096:	f001 ffa2 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800609a:	2200      	movs	r2, #0
 800609c:	2100      	movs	r1, #0
 800609e:	2038      	movs	r0, #56	; 0x38
 80060a0:	f001 ff81 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80060a4:	2038      	movs	r0, #56	; 0x38
 80060a6:	f001 ff9a 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2100      	movs	r1, #0
 80060ae:	203a      	movs	r0, #58	; 0x3a
 80060b0:	f001 ff79 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80060b4:	203a      	movs	r0, #58	; 0x3a
 80060b6:	f001 ff92 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 80060ba:	2200      	movs	r2, #0
 80060bc:	2102      	movs	r1, #2
 80060be:	203c      	movs	r0, #60	; 0x3c
 80060c0:	f001 ff71 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80060c4:	203c      	movs	r0, #60	; 0x3c
 80060c6:	f001 ff8a 	bl	8007fde <HAL_NVIC_EnableIRQ>

}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800

080060d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060de:	f107 030c 	add.w	r3, r7, #12
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	605a      	str	r2, [r3, #4]
 80060e8:	609a      	str	r2, [r3, #8]
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	4b3c      	ldr	r3, [pc, #240]	; (80061e4 <MX_GPIO_Init+0x10c>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	4a3b      	ldr	r2, [pc, #236]	; (80061e4 <MX_GPIO_Init+0x10c>)
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	6313      	str	r3, [r2, #48]	; 0x30
 80060fe:	4b39      	ldr	r3, [pc, #228]	; (80061e4 <MX_GPIO_Init+0x10c>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	f003 0301 	and.w	r3, r3, #1
 8006106:	60bb      	str	r3, [r7, #8]
 8006108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	4b35      	ldr	r3, [pc, #212]	; (80061e4 <MX_GPIO_Init+0x10c>)
 8006110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006112:	4a34      	ldr	r2, [pc, #208]	; (80061e4 <MX_GPIO_Init+0x10c>)
 8006114:	f043 0302 	orr.w	r3, r3, #2
 8006118:	6313      	str	r3, [r2, #48]	; 0x30
 800611a:	4b32      	ldr	r3, [pc, #200]	; (80061e4 <MX_GPIO_Init+0x10c>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	607b      	str	r3, [r7, #4]
 8006124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	4b2e      	ldr	r3, [pc, #184]	; (80061e4 <MX_GPIO_Init+0x10c>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <MX_GPIO_Init+0x10c>)
 8006130:	f043 0304 	orr.w	r3, r3, #4
 8006134:	6313      	str	r3, [r2, #48]	; 0x30
 8006136:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <MX_GPIO_Init+0x10c>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006142:	2200      	movs	r2, #0
 8006144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006148:	4827      	ldr	r0, [pc, #156]	; (80061e8 <MX_GPIO_Init+0x110>)
 800614a:	f002 fcc7 	bl	8008adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800614e:	2201      	movs	r2, #1
 8006150:	2110      	movs	r1, #16
 8006152:	4826      	ldr	r0, [pc, #152]	; (80061ec <MX_GPIO_Init+0x114>)
 8006154:	f002 fcc2 	bl	8008adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : encoder2_Pin encoder1_Pin */
  GPIO_InitStruct.Pin = encoder2_Pin|encoder1_Pin;
 8006158:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800615c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800615e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006168:	f107 030c 	add.w	r3, r7, #12
 800616c:	4619      	mov	r1, r3
 800616e:	481f      	ldr	r0, [pc, #124]	; (80061ec <MX_GPIO_Init+0x114>)
 8006170:	f002 fb30 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800617a:	2301      	movs	r3, #1
 800617c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006182:	2300      	movs	r3, #0
 8006184:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	4619      	mov	r1, r3
 800618c:	4816      	ldr	r0, [pc, #88]	; (80061e8 <MX_GPIO_Init+0x110>)
 800618e:	f002 fb21 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : record_pin_Pin PB2 */
  GPIO_InitStruct.Pin = record_pin_Pin|GPIO_PIN_2;
 8006192:	f241 0304 	movw	r3, #4100	; 0x1004
 8006196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006198:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800619c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800619e:	2301      	movs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061a2:	f107 030c 	add.w	r3, r7, #12
 80061a6:	4619      	mov	r1, r3
 80061a8:	4811      	ldr	r0, [pc, #68]	; (80061f0 <MX_GPIO_Init+0x118>)
 80061aa:	f002 fb13 	bl	80087d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80061ae:	2310      	movs	r3, #16
 80061b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061b2:	2301      	movs	r3, #1
 80061b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ba:	2303      	movs	r3, #3
 80061bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80061be:	f107 030c 	add.w	r3, r7, #12
 80061c2:	4619      	mov	r1, r3
 80061c4:	4809      	ldr	r0, [pc, #36]	; (80061ec <MX_GPIO_Init+0x114>)
 80061c6:	f002 fb05 	bl	80087d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80061ca:	2200      	movs	r2, #0
 80061cc:	2104      	movs	r1, #4
 80061ce:	2028      	movs	r0, #40	; 0x28
 80061d0:	f001 fee9 	bl	8007fa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80061d4:	2028      	movs	r0, #40	; 0x28
 80061d6:	f001 ff02 	bl	8007fde <HAL_NVIC_EnableIRQ>

}
 80061da:	bf00      	nop
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40020800 	.word	0x40020800
 80061ec:	40020000 	.word	0x40020000
 80061f0:	40020400 	.word	0x40020400

080061f4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]

	}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	2000cf10 	.word	0x2000cf10

08006214 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 800621c:	4b07      	ldr	r3, [pc, #28]	; (800623c <HAL_ADC_ConvCpltCallback+0x28>)
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 8006222:	4807      	ldr	r0, [pc, #28]	; (8006240 <HAL_ADC_ConvCpltCallback+0x2c>)
 8006224:	f000 ffe8 	bl	80071f8 <HAL_ADC_Stop_DMA>
 8006228:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800622c:	4905      	ldr	r1, [pc, #20]	; (8006244 <HAL_ADC_ConvCpltCallback+0x30>)
 800622e:	4804      	ldr	r0, [pc, #16]	; (8006240 <HAL_ADC_ConvCpltCallback+0x2c>)
 8006230:	f000 fef2 	bl	8007018 <HAL_ADC_Start_DMA>

	}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	2000cf10 	.word	0x2000cf10
 8006240:	20012c4c 	.word	0x20012c4c
 8006244:	2000a92c 	.word	0x2000a92c

08006248 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a10      	ldr	r2, [pc, #64]	; (8006298 <HAL_SPI_TxRxHalfCpltCallback+0x50>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d118      	bne.n	800628c <HAL_SPI_TxRxHalfCpltCallback+0x44>

				if  ((flash_read_block2[10]+   flash_read_block2[11]+  flash_read_block2[12]+  flash_read_block2[13])== 1020                  )
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 800625c:	7a9b      	ldrb	r3, [r3, #10]
 800625e:	461a      	mov	r2, r3
 8006260:	4b0e      	ldr	r3, [pc, #56]	; (800629c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 8006262:	7adb      	ldrb	r3, [r3, #11]
 8006264:	4413      	add	r3, r2
 8006266:	4a0d      	ldr	r2, [pc, #52]	; (800629c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 8006268:	7b12      	ldrb	r2, [r2, #12]
 800626a:	4413      	add	r3, r2
 800626c:	4a0b      	ldr	r2, [pc, #44]	; (800629c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 800626e:	7b52      	ldrb	r2, [r2, #13]
 8006270:	4413      	add	r3, r2
 8006272:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8006276:	d109      	bne.n	800628c <HAL_SPI_TxRxHalfCpltCallback+0x44>

				    {
				    error_count++;
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	3301      	adds	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 8006284:	801a      	strh	r2, [r3, #0]
		//	memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice

						flash_flag=1;}
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]


	}		}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	40013000 	.word	0x40013000
 800629c:	200123e8 	.word	0x200123e8
 80062a0:	2000cf1a 	.word	0x2000cf1a
 80062a4:	20008eec 	.word	0x20008eec

080062a8 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a07      	ldr	r2, [pc, #28]	; (80062d4 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d107      	bne.n	80062ca <HAL_SPI_TxRxCpltCallback+0x22>


		       flash_flag=2;
 80062ba:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <HAL_SPI_TxRxCpltCallback+0x30>)
 80062bc:	2202      	movs	r2, #2
 80062be:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 80062c0:	2201      	movs	r2, #1
 80062c2:	2110      	movs	r1, #16
 80062c4:	4805      	ldr	r0, [pc, #20]	; (80062dc <HAL_SPI_TxRxCpltCallback+0x34>)
 80062c6:	f002 fc09 	bl	8008adc <HAL_GPIO_WritePin>
		   }
		}
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40013000 	.word	0x40013000
 80062d8:	20008eec 	.word	0x20008eec
 80062dc:	40020000 	.word	0x40020000

080062e0 <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a07      	ldr	r2, [pc, #28]	; (800630c <HAL_SPI_ErrorCallback+0x2c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d106      	bne.n	8006300 <HAL_SPI_ErrorCallback+0x20>
error_count++;
 80062f2:	4b07      	ldr	r3, [pc, #28]	; (8006310 <HAL_SPI_ErrorCallback+0x30>)
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3301      	adds	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <HAL_SPI_ErrorCallback+0x30>)
 80062fe:	801a      	strh	r2, [r3, #0]

		   }
	}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	40013000 	.word	0x40013000
 8006310:	2000cf1a 	.word	0x2000cf1a

08006314 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006338:	d102      	bne.n	8006340 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 800633a:	4b08      	ldr	r3, [pc, #32]	; (800635c <HAL_GPIO_EXTI_Callback+0x34>)
 800633c:	2201      	movs	r2, #1
 800633e:	739a      	strb	r2, [r3, #14]
  }

  if(GPIO_Pin == encoder1_Pin) {
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006346:	d102      	bne.n	800634e <HAL_GPIO_EXTI_Callback+0x26>
  //page_skip=1;
  record_output=1;
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_GPIO_EXTI_Callback+0x38>)
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
  if(GPIO_Pin == encoder2_Pin) {
  //record_output=1;
  }


}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20008ebc 	.word	0x20008ebc
 8006360:	20012805 	.word	0x20012805

08006364 <stop_start>:



//NVIC_DisableIRQ(TIM3_IRQn);   //  disables all tim irq
void stop_start	(void)             {
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  //  if (TIM3==htim ->Instance)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <stop_start+0x24>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d102      	bne.n	8006376 <stop_start+0x12>
 8006370:	4806      	ldr	r0, [pc, #24]	; (800638c <stop_start+0x28>)
 8006372:	f005 f8b1 	bl	800b4d8 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8006376:	4b04      	ldr	r3, [pc, #16]	; (8006388 <stop_start+0x24>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d102      	bne.n	8006384 <stop_start+0x20>
 800637e:	4803      	ldr	r0, [pc, #12]	; (800638c <stop_start+0x28>)
 8006380:	f005 f848 	bl	800b414 <HAL_TIM_Base_Start_IT>

}
 8006384:	bf00      	nop
 8006386:	bd80      	pop	{r7, pc}
 8006388:	200127f8 	.word	0x200127f8
 800638c:	20012f60 	.word	0x20012f60

08006390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006394:	b672      	cpsid	i
}
 8006396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006398:	e7fe      	b.n	8006398 <Error_Handler+0x8>
	...

0800639c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	4b10      	ldr	r3, [pc, #64]	; (80063e8 <HAL_MspInit+0x4c>)
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <HAL_MspInit+0x4c>)
 80063ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063b0:	6453      	str	r3, [r2, #68]	; 0x44
 80063b2:	4b0d      	ldr	r3, [pc, #52]	; (80063e8 <HAL_MspInit+0x4c>)
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ba:	607b      	str	r3, [r7, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <HAL_MspInit+0x4c>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	4a08      	ldr	r2, [pc, #32]	; (80063e8 <HAL_MspInit+0x4c>)
 80063c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063cc:	6413      	str	r3, [r2, #64]	; 0x40
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_MspInit+0x4c>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40023800 	.word	0x40023800

080063ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b08a      	sub	sp, #40	; 0x28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f4:	f107 0314 	add.w	r3, r7, #20
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	609a      	str	r2, [r3, #8]
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a3c      	ldr	r2, [pc, #240]	; (80064fc <HAL_ADC_MspInit+0x110>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d171      	bne.n	80064f2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	4a3a      	ldr	r2, [pc, #232]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641c:	6453      	str	r3, [r2, #68]	; 0x44
 800641e:	4b38      	ldr	r3, [pc, #224]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	4b34      	ldr	r3, [pc, #208]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006432:	4a33      	ldr	r2, [pc, #204]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	6313      	str	r3, [r2, #48]	; 0x30
 800643a:	4b31      	ldr	r3, [pc, #196]	; (8006500 <HAL_ADC_MspInit+0x114>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	4b2d      	ldr	r3, [pc, #180]	; (8006500 <HAL_ADC_MspInit+0x114>)
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	4a2c      	ldr	r2, [pc, #176]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006450:	f043 0302 	orr.w	r3, r3, #2
 8006454:	6313      	str	r3, [r2, #48]	; 0x30
 8006456:	4b2a      	ldr	r3, [pc, #168]	; (8006500 <HAL_ADC_MspInit+0x114>)
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	60bb      	str	r3, [r7, #8]
 8006460:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8006462:	2305      	movs	r3, #5
 8006464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006466:	2303      	movs	r3, #3
 8006468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800646e:	f107 0314 	add.w	r3, r7, #20
 8006472:	4619      	mov	r1, r3
 8006474:	4823      	ldr	r0, [pc, #140]	; (8006504 <HAL_ADC_MspInit+0x118>)
 8006476:	f002 f9ad 	bl	80087d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800647a:	2303      	movs	r3, #3
 800647c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800647e:	2303      	movs	r3, #3
 8006480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006482:	2300      	movs	r3, #0
 8006484:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006486:	f107 0314 	add.w	r3, r7, #20
 800648a:	4619      	mov	r1, r3
 800648c:	481e      	ldr	r0, [pc, #120]	; (8006508 <HAL_ADC_MspInit+0x11c>)
 800648e:	f002 f9a1 	bl	80087d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8006492:	4b1e      	ldr	r3, [pc, #120]	; (800650c <HAL_ADC_MspInit+0x120>)
 8006494:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <HAL_ADC_MspInit+0x124>)
 8006496:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006498:	4b1c      	ldr	r3, [pc, #112]	; (800650c <HAL_ADC_MspInit+0x120>)
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800649e:	4b1b      	ldr	r3, [pc, #108]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064a4:	4b19      	ldr	r3, [pc, #100]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064b2:	4b16      	ldr	r3, [pc, #88]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064ba:	4b14      	ldr	r3, [pc, #80]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064c2:	4b12      	ldr	r3, [pc, #72]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064d0:	4b0e      	ldr	r3, [pc, #56]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80064d6:	480d      	ldr	r0, [pc, #52]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064d8:	f001 fd9c 	bl	8008014 <HAL_DMA_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80064e2:	f7ff ff55 	bl	8006390 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a08      	ldr	r2, [pc, #32]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064ea:	639a      	str	r2, [r3, #56]	; 0x38
 80064ec:	4a07      	ldr	r2, [pc, #28]	; (800650c <HAL_ADC_MspInit+0x120>)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80064f2:	bf00      	nop
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	40012000 	.word	0x40012000
 8006500:	40023800 	.word	0x40023800
 8006504:	40020000 	.word	0x40020000
 8006508:	40020400 	.word	0x40020400
 800650c:	20012c94 	.word	0x20012c94
 8006510:	40026470 	.word	0x40026470

08006514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	2200      	movs	r2, #0
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	605a      	str	r2, [r3, #4]
 8006526:	609a      	str	r2, [r3, #8]
 8006528:	60da      	str	r2, [r3, #12]
 800652a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a22      	ldr	r2, [pc, #136]	; (80065bc <HAL_I2C_MspInit+0xa8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d13d      	bne.n	80065b2 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	4b21      	ldr	r3, [pc, #132]	; (80065c0 <HAL_I2C_MspInit+0xac>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	4a20      	ldr	r2, [pc, #128]	; (80065c0 <HAL_I2C_MspInit+0xac>)
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	6313      	str	r3, [r2, #48]	; 0x30
 8006546:	4b1e      	ldr	r3, [pc, #120]	; (80065c0 <HAL_I2C_MspInit+0xac>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006558:	2312      	movs	r3, #18
 800655a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655c:	2300      	movs	r3, #0
 800655e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006560:	2303      	movs	r3, #3
 8006562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006564:	2309      	movs	r3, #9
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	4619      	mov	r1, r3
 800656e:	4815      	ldr	r0, [pc, #84]	; (80065c4 <HAL_I2C_MspInit+0xb0>)
 8006570:	f002 f930 	bl	80087d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800657a:	2312      	movs	r3, #18
 800657c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006582:	2303      	movs	r3, #3
 8006584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006586:	2304      	movs	r3, #4
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800658a:	f107 0314 	add.w	r3, r7, #20
 800658e:	4619      	mov	r1, r3
 8006590:	480c      	ldr	r0, [pc, #48]	; (80065c4 <HAL_I2C_MspInit+0xb0>)
 8006592:	f002 f91f 	bl	80087d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	4b09      	ldr	r3, [pc, #36]	; (80065c0 <HAL_I2C_MspInit+0xac>)
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	4a08      	ldr	r2, [pc, #32]	; (80065c0 <HAL_I2C_MspInit+0xac>)
 80065a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065a4:	6413      	str	r3, [r2, #64]	; 0x40
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_I2C_MspInit+0xac>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80065b2:	bf00      	nop
 80065b4:	3728      	adds	r7, #40	; 0x28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	40005800 	.word	0x40005800
 80065c0:	40023800 	.word	0x40023800
 80065c4:	40020400 	.word	0x40020400

080065c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08c      	sub	sp, #48	; 0x30
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d0:	f107 031c 	add.w	r3, r7, #28
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a77      	ldr	r2, [pc, #476]	; (80067c4 <HAL_SPI_MspInit+0x1fc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	f040 8089 	bne.w	80066fe <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
 80065f0:	4b75      	ldr	r3, [pc, #468]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 80065f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f4:	4a74      	ldr	r2, [pc, #464]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 80065f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065fa:	6453      	str	r3, [r2, #68]	; 0x44
 80065fc:	4b72      	ldr	r3, [pc, #456]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 80065fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	4b6e      	ldr	r3, [pc, #440]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	4a6d      	ldr	r2, [pc, #436]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 8006612:	f043 0301 	orr.w	r3, r3, #1
 8006616:	6313      	str	r3, [r2, #48]	; 0x30
 8006618:	4b6b      	ldr	r3, [pc, #428]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 800661a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006624:	23e0      	movs	r3, #224	; 0xe0
 8006626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006628:	2302      	movs	r3, #2
 800662a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662c:	2300      	movs	r3, #0
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006630:	2302      	movs	r3, #2
 8006632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006634:	2305      	movs	r3, #5
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006638:	f107 031c 	add.w	r3, r7, #28
 800663c:	4619      	mov	r1, r3
 800663e:	4863      	ldr	r0, [pc, #396]	; (80067cc <HAL_SPI_MspInit+0x204>)
 8006640:	f002 f8c8 	bl	80087d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006644:	4b62      	ldr	r3, [pc, #392]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006646:	4a63      	ldr	r2, [pc, #396]	; (80067d4 <HAL_SPI_MspInit+0x20c>)
 8006648:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800664a:	4b61      	ldr	r3, [pc, #388]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 800664c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006650:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006652:	4b5f      	ldr	r3, [pc, #380]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006654:	2200      	movs	r2, #0
 8006656:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006658:	4b5d      	ldr	r3, [pc, #372]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 800665a:	2200      	movs	r2, #0
 800665c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800665e:	4b5c      	ldr	r3, [pc, #368]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006664:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006666:	4b5a      	ldr	r3, [pc, #360]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006668:	2200      	movs	r2, #0
 800666a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800666c:	4b58      	ldr	r3, [pc, #352]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 800666e:	2200      	movs	r2, #0
 8006670:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006672:	4b57      	ldr	r3, [pc, #348]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006674:	2200      	movs	r2, #0
 8006676:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006678:	4b55      	ldr	r3, [pc, #340]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 800667a:	2200      	movs	r2, #0
 800667c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800667e:	4b54      	ldr	r3, [pc, #336]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006680:	2200      	movs	r2, #0
 8006682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006684:	4852      	ldr	r0, [pc, #328]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006686:	f001 fcc5 	bl	8008014 <HAL_DMA_Init>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006690:	f7ff fe7e 	bl	8006390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a4e      	ldr	r2, [pc, #312]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 8006698:	64da      	str	r2, [r3, #76]	; 0x4c
 800669a:	4a4d      	ldr	r2, [pc, #308]	; (80067d0 <HAL_SPI_MspInit+0x208>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80066a0:	4b4d      	ldr	r3, [pc, #308]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066a2:	4a4e      	ldr	r2, [pc, #312]	; (80067dc <HAL_SPI_MspInit+0x214>)
 80066a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80066a6:	4b4c      	ldr	r3, [pc, #304]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066a8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80066ac:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80066ae:	4b4a      	ldr	r3, [pc, #296]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066b0:	2240      	movs	r2, #64	; 0x40
 80066b2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066b4:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066c0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066c2:	4b45      	ldr	r3, [pc, #276]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066c8:	4b43      	ldr	r3, [pc, #268]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80066ce:	4b42      	ldr	r3, [pc, #264]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066d4:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066da:	4b3f      	ldr	r3, [pc, #252]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066dc:	2200      	movs	r2, #0
 80066de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80066e0:	483d      	ldr	r0, [pc, #244]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066e2:	f001 fc97 	bl	8008014 <HAL_DMA_Init>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80066ec:	f7ff fe50 	bl	8006390 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a39      	ldr	r2, [pc, #228]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066f4:	649a      	str	r2, [r3, #72]	; 0x48
 80066f6:	4a38      	ldr	r2, [pc, #224]	; (80067d8 <HAL_SPI_MspInit+0x210>)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80066fc:	e05e      	b.n	80067bc <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a37      	ldr	r2, [pc, #220]	; (80067e0 <HAL_SPI_MspInit+0x218>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d159      	bne.n	80067bc <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]
 800670c:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	4a2d      	ldr	r2, [pc, #180]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 8006712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006716:	6413      	str	r3, [r2, #64]	; 0x40
 8006718:	4b2b      	ldr	r3, [pc, #172]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	4b27      	ldr	r3, [pc, #156]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 800672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672c:	4a26      	ldr	r2, [pc, #152]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 800672e:	f043 0302 	orr.w	r3, r3, #2
 8006732:	6313      	str	r3, [r2, #48]	; 0x30
 8006734:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <HAL_SPI_MspInit+0x200>)
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006740:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006746:	2302      	movs	r3, #2
 8006748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674e:	2303      	movs	r3, #3
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006752:	2305      	movs	r3, #5
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006756:	f107 031c 	add.w	r3, r7, #28
 800675a:	4619      	mov	r1, r3
 800675c:	4821      	ldr	r0, [pc, #132]	; (80067e4 <HAL_SPI_MspInit+0x21c>)
 800675e:	f002 f839 	bl	80087d4 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 8006764:	4a21      	ldr	r2, [pc, #132]	; (80067ec <HAL_SPI_MspInit+0x224>)
 8006766:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006768:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 800676a:	2200      	movs	r2, #0
 800676c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800676e:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 8006770:	2240      	movs	r2, #64	; 0x40
 8006772:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006774:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 8006776:	2200      	movs	r2, #0
 8006778:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800677a:	4b1b      	ldr	r3, [pc, #108]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 800677c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006780:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006782:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 8006784:	2200      	movs	r2, #0
 8006786:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006788:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 800678a:	2200      	movs	r2, #0
 800678c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800678e:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 8006790:	2200      	movs	r2, #0
 8006792:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006794:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 8006796:	2200      	movs	r2, #0
 8006798:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800679a:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 800679c:	2200      	movs	r2, #0
 800679e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80067a0:	4811      	ldr	r0, [pc, #68]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 80067a2:	f001 fc37 	bl	8008014 <HAL_DMA_Init>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 80067ac:	f7ff fdf0 	bl	8006390 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a0d      	ldr	r2, [pc, #52]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 80067b4:	649a      	str	r2, [r3, #72]	; 0x48
 80067b6:	4a0c      	ldr	r2, [pc, #48]	; (80067e8 <HAL_SPI_MspInit+0x220>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80067bc:	bf00      	nop
 80067be:	3730      	adds	r7, #48	; 0x30
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40013000 	.word	0x40013000
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40020000 	.word	0x40020000
 80067d0:	20012df8 	.word	0x20012df8
 80067d4:	40026410 	.word	0x40026410
 80067d8:	20012e58 	.word	0x20012e58
 80067dc:	40026440 	.word	0x40026440
 80067e0:	40003800 	.word	0x40003800
 80067e4:	40020400 	.word	0x40020400
 80067e8:	20012eb8 	.word	0x20012eb8
 80067ec:	40026070 	.word	0x40026070

080067f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08c      	sub	sp, #48	; 0x30
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067f8:	f107 031c 	add.w	r3, r7, #28
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006810:	d12d      	bne.n	800686e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
 8006822:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	4b29      	ldr	r3, [pc, #164]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	4a28      	ldr	r2, [pc, #160]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006838:	f043 0301 	orr.w	r3, r3, #1
 800683c:	6313      	str	r3, [r2, #48]	; 0x30
 800683e:	4b26      	ldr	r3, [pc, #152]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 800684a:	f248 0302 	movw	r3, #32770	; 0x8002
 800684e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006850:	2302      	movs	r3, #2
 8006852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006854:	2301      	movs	r3, #1
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006858:	2300      	movs	r3, #0
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800685c:	2301      	movs	r3, #1
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006860:	f107 031c 	add.w	r3, r7, #28
 8006864:	4619      	mov	r1, r3
 8006866:	481d      	ldr	r0, [pc, #116]	; (80068dc <HAL_TIM_Encoder_MspInit+0xec>)
 8006868:	f001 ffb4 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800686c:	e030      	b.n	80068d0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d12b      	bne.n	80068d0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006882:	f043 0304 	orr.w	r3, r3, #4
 8006886:	6413      	str	r3, [r2, #64]	; 0x40
 8006888:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	4a0e      	ldr	r2, [pc, #56]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800689e:	f043 0302 	orr.w	r3, r3, #2
 80068a2:	6313      	str	r3, [r2, #48]	; 0x30
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80068a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068b0:	23c0      	movs	r3, #192	; 0xc0
 80068b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b4:	2302      	movs	r3, #2
 80068b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068b8:	2301      	movs	r3, #1
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068bc:	2300      	movs	r3, #0
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80068c0:	2302      	movs	r3, #2
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068c4:	f107 031c 	add.w	r3, r7, #28
 80068c8:	4619      	mov	r1, r3
 80068ca:	4806      	ldr	r0, [pc, #24]	; (80068e4 <HAL_TIM_Encoder_MspInit+0xf4>)
 80068cc:	f001 ff82 	bl	80087d4 <HAL_GPIO_Init>
}
 80068d0:	bf00      	nop
 80068d2:	3730      	adds	r7, #48	; 0x30
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40023800 	.word	0x40023800
 80068dc:	40020000 	.word	0x40020000
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40020400 	.word	0x40020400

080068e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <HAL_TIM_Base_MspInit+0x80>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d116      	bne.n	8006928 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	4b1b      	ldr	r3, [pc, #108]	; (800696c <HAL_TIM_Base_MspInit+0x84>)
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	4a1a      	ldr	r2, [pc, #104]	; (800696c <HAL_TIM_Base_MspInit+0x84>)
 8006904:	f043 0302 	orr.w	r3, r3, #2
 8006908:	6413      	str	r3, [r2, #64]	; 0x40
 800690a:	4b18      	ldr	r3, [pc, #96]	; (800696c <HAL_TIM_Base_MspInit+0x84>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006916:	2200      	movs	r2, #0
 8006918:	2101      	movs	r1, #1
 800691a:	201d      	movs	r0, #29
 800691c:	f001 fb43 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006920:	201d      	movs	r0, #29
 8006922:	f001 fb5c 	bl	8007fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006926:	e01a      	b.n	800695e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a10      	ldr	r2, [pc, #64]	; (8006970 <HAL_TIM_Base_MspInit+0x88>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d115      	bne.n	800695e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006932:	2300      	movs	r3, #0
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <HAL_TIM_Base_MspInit+0x84>)
 8006938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800693a:	4a0c      	ldr	r2, [pc, #48]	; (800696c <HAL_TIM_Base_MspInit+0x84>)
 800693c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006940:	6453      	str	r3, [r2, #68]	; 0x44
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <HAL_TIM_Base_MspInit+0x84>)
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 800694e:	2200      	movs	r2, #0
 8006950:	2103      	movs	r1, #3
 8006952:	2019      	movs	r0, #25
 8006954:	f001 fb27 	bl	8007fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006958:	2019      	movs	r0, #25
 800695a:	f001 fb40 	bl	8007fde <HAL_NVIC_EnableIRQ>
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40000400 	.word	0x40000400
 800696c:	40023800 	.word	0x40023800
 8006970:	40014400 	.word	0x40014400

08006974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 030c 	add.w	r3, r7, #12
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a12      	ldr	r2, [pc, #72]	; (80069dc <HAL_TIM_MspPostInit+0x68>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d11d      	bne.n	80069d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	4b11      	ldr	r3, [pc, #68]	; (80069e0 <HAL_TIM_MspPostInit+0x6c>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	4a10      	ldr	r2, [pc, #64]	; (80069e0 <HAL_TIM_MspPostInit+0x6c>)
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	6313      	str	r3, [r2, #48]	; 0x30
 80069a6:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <HAL_TIM_MspPostInit+0x6c>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80069b2:	2330      	movs	r3, #48	; 0x30
 80069b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b6:	2302      	movs	r3, #2
 80069b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ba:	2300      	movs	r3, #0
 80069bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069be:	2300      	movs	r3, #0
 80069c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80069c2:	2302      	movs	r3, #2
 80069c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	4619      	mov	r1, r3
 80069cc:	4805      	ldr	r0, [pc, #20]	; (80069e4 <HAL_TIM_MspPostInit+0x70>)
 80069ce:	f001 ff01 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80069d2:	bf00      	nop
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40023800 	.word	0x40023800
 80069e4:	40020400 	.word	0x40020400

080069e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	609a      	str	r2, [r3, #8]
 80069fc:	60da      	str	r2, [r3, #12]
 80069fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <HAL_UART_MspInit+0x84>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d12c      	bne.n	8006a64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <HAL_UART_MspInit+0x88>)
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	4a17      	ldr	r2, [pc, #92]	; (8006a70 <HAL_UART_MspInit+0x88>)
 8006a14:	f043 0310 	orr.w	r3, r3, #16
 8006a18:	6453      	str	r3, [r2, #68]	; 0x44
 8006a1a:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <HAL_UART_MspInit+0x88>)
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_UART_MspInit+0x88>)
 8006a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2e:	4a10      	ldr	r2, [pc, #64]	; (8006a70 <HAL_UART_MspInit+0x88>)
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	6313      	str	r3, [r2, #48]	; 0x30
 8006a36:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <HAL_UART_MspInit+0x88>)
 8006a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a50:	2300      	movs	r3, #0
 8006a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006a54:	2307      	movs	r3, #7
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a58:	f107 0314 	add.w	r3, r7, #20
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4805      	ldr	r0, [pc, #20]	; (8006a74 <HAL_UART_MspInit+0x8c>)
 8006a60:	f001 feb8 	bl	80087d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006a64:	bf00      	nop
 8006a66:	3728      	adds	r7, #40	; 0x28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	40011000 	.word	0x40011000
 8006a70:	40023800 	.word	0x40023800
 8006a74:	40020000 	.word	0x40020000

08006a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a7c:	e7fe      	b.n	8006a7c <NMI_Handler+0x4>

08006a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a82:	e7fe      	b.n	8006a82 <HardFault_Handler+0x4>

08006a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a88:	e7fe      	b.n	8006a88 <MemManage_Handler+0x4>

08006a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a8e:	e7fe      	b.n	8006a8e <BusFault_Handler+0x4>

08006a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a94:	e7fe      	b.n	8006a94 <UsageFault_Handler+0x4>

08006a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a96:	b480      	push	{r7}
 8006a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a9a:	bf00      	nop
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ab6:	bf00      	nop
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ac4:	f000 f8e0 	bl	8006c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ac8:	bf00      	nop
 8006aca:	bd80      	pop	{r7, pc}

08006acc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006ad0:	4802      	ldr	r0, [pc, #8]	; (8006adc <DMA1_Stream4_IRQHandler+0x10>)
 8006ad2:	f001 fc15 	bl	8008300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006ad6:	bf00      	nop
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20012eb8 	.word	0x20012eb8

08006ae0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006ae4:	4802      	ldr	r0, [pc, #8]	; (8006af0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006ae6:	f004 ff2f 	bl	800b948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20012ff0 	.word	0x20012ff0

08006af4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006af8:	4802      	ldr	r0, [pc, #8]	; (8006b04 <TIM3_IRQHandler+0x10>)
 8006afa:	f004 ff25 	bl	800b948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006afe:	bf00      	nop
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20012f60 	.word	0x20012f60

08006b08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 8006b0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006b10:	f001 fffe 	bl	8008b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(encoder2_Pin);
 8006b14:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b18:	f001 fffa 	bl	8008b10 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8006b1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b20:	f001 fff6 	bl	8008b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006b24:	bf00      	nop
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006b2c:	4802      	ldr	r0, [pc, #8]	; (8006b38 <DMA2_Stream0_IRQHandler+0x10>)
 8006b2e:	f001 fbe7 	bl	8008300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006b32:	bf00      	nop
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20012df8 	.word	0x20012df8

08006b3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006b40:	4802      	ldr	r0, [pc, #8]	; (8006b4c <DMA2_Stream2_IRQHandler+0x10>)
 8006b42:	f001 fbdd 	bl	8008300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20012e58 	.word	0x20012e58

08006b50 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006b54:	4802      	ldr	r0, [pc, #8]	; (8006b60 <DMA2_Stream4_IRQHandler+0x10>)
 8006b56:	f001 fbd3 	bl	8008300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20012c94 	.word	0x20012c94

08006b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b64:	b480      	push	{r7}
 8006b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b68:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <SystemInit+0x28>)
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6e:	4a07      	ldr	r2, [pc, #28]	; (8006b8c <SystemInit+0x28>)
 8006b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <SystemInit+0x28>)
 8006b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	e000ed00 	.word	0xe000ed00

08006b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006b96:	e003      	b.n	8006ba0 <LoopCopyDataInit>

08006b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006b9e:	3104      	adds	r1, #4

08006ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ba0:	480b      	ldr	r0, [pc, #44]	; (8006bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	; (8006bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006ba8:	d3f6      	bcc.n	8006b98 <CopyDataInit>
  ldr  r2, =_sbss
 8006baa:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006bac:	e002      	b.n	8006bb4 <LoopFillZerobss>

08006bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006bb0:	f842 3b04 	str.w	r3, [r2], #4

08006bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006bb4:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006bb8:	d3f9      	bcc.n	8006bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006bba:	f7ff ffd3 	bl	8006b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bbe:	f006 f93f 	bl	800ce40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bc2:	f7fe fadf 	bl	8005184 <main>
  bx  lr    
 8006bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006bcc:	0800f38c 	.word	0x0800f38c
  ldr  r0, =_sdata
 8006bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006bd4:	20008f60 	.word	0x20008f60
  ldr  r2, =_sbss
 8006bd8:	20008f60 	.word	0x20008f60
  ldr  r3, = _ebss
 8006bdc:	20013080 	.word	0x20013080

08006be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006be0:	e7fe      	b.n	8006be0 <ADC_IRQHandler>
	...

08006be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006be8:	4b0e      	ldr	r3, [pc, #56]	; (8006c24 <HAL_Init+0x40>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a0d      	ldr	r2, [pc, #52]	; (8006c24 <HAL_Init+0x40>)
 8006bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <HAL_Init+0x40>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a0a      	ldr	r2, [pc, #40]	; (8006c24 <HAL_Init+0x40>)
 8006bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c00:	4b08      	ldr	r3, [pc, #32]	; (8006c24 <HAL_Init+0x40>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a07      	ldr	r2, [pc, #28]	; (8006c24 <HAL_Init+0x40>)
 8006c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c0c:	2003      	movs	r0, #3
 8006c0e:	f001 f9bf 	bl	8007f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c12:	2000      	movs	r0, #0
 8006c14:	f000 f808 	bl	8006c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c18:	f7ff fbc0 	bl	800639c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40023c00 	.word	0x40023c00

08006c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c30:	4b12      	ldr	r3, [pc, #72]	; (8006c7c <HAL_InitTick+0x54>)
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <HAL_InitTick+0x58>)
 8006c36:	781b      	ldrb	r3, [r3, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f9d7 	bl	8007ffa <HAL_SYSTICK_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d001      	beq.n	8006c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e00e      	b.n	8006c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b0f      	cmp	r3, #15
 8006c5a:	d80a      	bhi.n	8006c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	6879      	ldr	r1, [r7, #4]
 8006c60:	f04f 30ff 	mov.w	r0, #4294967295
 8006c64:	f001 f99f 	bl	8007fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c68:	4a06      	ldr	r2, [pc, #24]	; (8006c84 <HAL_InitTick+0x5c>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e000      	b.n	8006c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20008ef0 	.word	0x20008ef0
 8006c80:	20008ef8 	.word	0x20008ef8
 8006c84:	20008ef4 	.word	0x20008ef4

08006c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <HAL_IncTick+0x20>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <HAL_IncTick+0x24>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4413      	add	r3, r2
 8006c98:	4a04      	ldr	r2, [pc, #16]	; (8006cac <HAL_IncTick+0x24>)
 8006c9a:	6013      	str	r3, [r2, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20008ef8 	.word	0x20008ef8
 8006cac:	2001307c 	.word	0x2001307c

08006cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8006cb4:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <HAL_GetTick+0x14>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	2001307c 	.word	0x2001307c

08006cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cd0:	f7ff ffee 	bl	8006cb0 <HAL_GetTick>
 8006cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d005      	beq.n	8006cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ce2:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <HAL_Delay+0x44>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4413      	add	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cee:	bf00      	nop
 8006cf0:	f7ff ffde 	bl	8006cb0 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d8f7      	bhi.n	8006cf0 <HAL_Delay+0x28>
  {
  }
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20008ef8 	.word	0x20008ef8

08006d10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e033      	b.n	8006d8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d109      	bne.n	8006d42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fb5c 	bl	80063ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f003 0310 	and.w	r3, r3, #16
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d118      	bne.n	8006d80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d56:	f023 0302 	bic.w	r3, r3, #2
 8006d5a:	f043 0202 	orr.w	r2, r3, #2
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fbde 	bl	8007524 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	f023 0303 	bic.w	r3, r3, #3
 8006d76:	f043 0201 	orr.w	r2, r3, #1
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40
 8006d7e:	e001      	b.n	8006d84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
	...

08006d98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_ADC_Start+0x1a>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e097      	b.n	8006ee2 <HAL_ADC_Start+0x14a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d018      	beq.n	8006dfa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006dd8:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <HAL_ADC_Start+0x158>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a45      	ldr	r2, [pc, #276]	; (8006ef4 <HAL_ADC_Start+0x15c>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	0c9a      	lsrs	r2, r3, #18
 8006de4:	4613      	mov	r3, r2
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	4413      	add	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006dec:	e002      	b.n	8006df4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f9      	bne.n	8006dee <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d15f      	bne.n	8006ec8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d007      	beq.n	8006e3a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	d106      	bne.n	8006e56 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e4c:	f023 0206 	bic.w	r2, r3, #6
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	645a      	str	r2, [r3, #68]	; 0x44
 8006e54:	e002      	b.n	8006e5c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e64:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <HAL_ADC_Start+0x160>)
 8006e66:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006e70:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10f      	bne.n	8006e9e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d129      	bne.n	8006ee0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	e020      	b.n	8006ee0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a16      	ldr	r2, [pc, #88]	; (8006efc <HAL_ADC_Start+0x164>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d11b      	bne.n	8006ee0 <HAL_ADC_Start+0x148>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d114      	bne.n	8006ee0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ec4:	609a      	str	r2, [r3, #8]
 8006ec6:	e00b      	b.n	8006ee0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	f043 0210 	orr.w	r2, r3, #16
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed8:	f043 0201 	orr.w	r2, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20008ef0 	.word	0x20008ef0
 8006ef4:	431bde83 	.word	0x431bde83
 8006ef8:	40012300 	.word	0x40012300
 8006efc:	40012000 	.word	0x40012000

08006f00 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1c:	d113      	bne.n	8006f46 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d10b      	bne.n	8006f46 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f043 0220 	orr.w	r2, r3, #32
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e063      	b.n	800700e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006f46:	f7ff feb3 	bl	8006cb0 <HAL_GetTick>
 8006f4a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006f4c:	e021      	b.n	8006f92 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d01d      	beq.n	8006f92 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <HAL_ADC_PollForConversion+0x6c>
 8006f5c:	f7ff fea8 	bl	8006cb0 <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d212      	bcs.n	8006f92 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d00b      	beq.n	8006f92 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f043 0204 	orr.w	r2, r3, #4
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e03d      	b.n	800700e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d1d6      	bne.n	8006f4e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0212 	mvn.w	r2, #18
 8006fa8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d123      	bne.n	800700c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11f      	bne.n	800700c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d006      	beq.n	8006fe8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d111      	bne.n	800700c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d105      	bne.n	800700c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	f043 0201 	orr.w	r2, r3, #1
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_ADC_Start_DMA+0x1e>
 8007032:	2302      	movs	r3, #2
 8007034:	e0ce      	b.n	80071d4 <HAL_ADC_Start_DMA+0x1bc>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d018      	beq.n	800707e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800705c:	4b5f      	ldr	r3, [pc, #380]	; (80071dc <HAL_ADC_Start_DMA+0x1c4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a5f      	ldr	r2, [pc, #380]	; (80071e0 <HAL_ADC_Start_DMA+0x1c8>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	0c9a      	lsrs	r2, r3, #18
 8007068:	4613      	mov	r3, r2
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	4413      	add	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007070:	e002      	b.n	8007078 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3b01      	subs	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f9      	bne.n	8007072 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800708c:	d107      	bne.n	800709e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800709c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	f040 8086 	bne.w	80071ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ec:	d106      	bne.n	80070fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	f023 0206 	bic.w	r2, r3, #6
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
 80070fa:	e002      	b.n	8007102 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800710a:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <HAL_ADC_Start_DMA+0x1cc>)
 800710c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	4a35      	ldr	r2, [pc, #212]	; (80071e8 <HAL_ADC_Start_DMA+0x1d0>)
 8007114:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	4a34      	ldr	r2, [pc, #208]	; (80071ec <HAL_ADC_Start_DMA+0x1d4>)
 800711c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	4a33      	ldr	r2, [pc, #204]	; (80071f0 <HAL_ADC_Start_DMA+0x1d8>)
 8007124:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800712e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800713e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	334c      	adds	r3, #76	; 0x4c
 800715a:	4619      	mov	r1, r3
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f001 f806 	bl	8008170 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10f      	bne.n	8007190 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d129      	bne.n	80071d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800718c:	609a      	str	r2, [r3, #8]
 800718e:	e020      	b.n	80071d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <HAL_ADC_Start_DMA+0x1dc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d11b      	bne.n	80071d2 <HAL_ADC_Start_DMA+0x1ba>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d114      	bne.n	80071d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	e00b      	b.n	80071d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f043 0210 	orr.w	r2, r3, #16
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ca:	f043 0201 	orr.w	r2, r3, #1
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	20008ef0 	.word	0x20008ef0
 80071e0:	431bde83 	.word	0x431bde83
 80071e4:	40012300 	.word	0x40012300
 80071e8:	0800771d 	.word	0x0800771d
 80071ec:	080077d7 	.word	0x080077d7
 80071f0:	080077f3 	.word	0x080077f3
 80071f4:	40012000 	.word	0x40012000

080071f8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_ADC_Stop_DMA+0x1a>
 800720e:	2302      	movs	r3, #2
 8007210:	e048      	b.n	80072a4 <HAL_ADC_Stop_DMA+0xac>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d130      	bne.n	800729a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007246:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d10f      	bne.n	8007276 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	4618      	mov	r0, r3
 800725c:	f000 ffe0 	bl	8008220 <HAL_DMA_Abort>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d005      	beq.n	8007276 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007284:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	f043 0201 	orr.w	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_ADC_ConfigChannel+0x1c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e113      	b.n	8007504 <HAL_ADC_ConfigChannel+0x244>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	d925      	bls.n	8007338 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68d9      	ldr	r1, [r3, #12]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	4613      	mov	r3, r2
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4413      	add	r3, r2
 8007300:	3b1e      	subs	r3, #30
 8007302:	2207      	movs	r2, #7
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	43da      	mvns	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	400a      	ands	r2, r1
 8007310:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68d9      	ldr	r1, [r3, #12]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	4618      	mov	r0, r3
 8007324:	4603      	mov	r3, r0
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4403      	add	r3, r0
 800732a:	3b1e      	subs	r3, #30
 800732c:	409a      	lsls	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	60da      	str	r2, [r3, #12]
 8007336:	e022      	b.n	800737e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6919      	ldr	r1, [r3, #16]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	4613      	mov	r3, r2
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4413      	add	r3, r2
 800734c:	2207      	movs	r2, #7
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	43da      	mvns	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	400a      	ands	r2, r1
 800735a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6919      	ldr	r1, [r3, #16]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	4618      	mov	r0, r3
 800736e:	4603      	mov	r3, r0
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	4403      	add	r3, r0
 8007374:	409a      	lsls	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d824      	bhi.n	80073d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	3b05      	subs	r3, #5
 8007398:	221f      	movs	r2, #31
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43da      	mvns	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	400a      	ands	r2, r1
 80073a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4618      	mov	r0, r3
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	3b05      	subs	r3, #5
 80073c2:	fa00 f203 	lsl.w	r2, r0, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	635a      	str	r2, [r3, #52]	; 0x34
 80073ce:	e04c      	b.n	800746a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	d824      	bhi.n	8007422 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	3b23      	subs	r3, #35	; 0x23
 80073ea:	221f      	movs	r2, #31
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	43da      	mvns	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	400a      	ands	r2, r1
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	b29b      	uxth	r3, r3
 8007406:	4618      	mov	r0, r3
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	3b23      	subs	r3, #35	; 0x23
 8007414:	fa00 f203 	lsl.w	r2, r0, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	430a      	orrs	r2, r1
 800741e:	631a      	str	r2, [r3, #48]	; 0x30
 8007420:	e023      	b.n	800746a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	3b41      	subs	r3, #65	; 0x41
 8007434:	221f      	movs	r2, #31
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43da      	mvns	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	400a      	ands	r2, r1
 8007442:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	4618      	mov	r0, r3
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	3b41      	subs	r3, #65	; 0x41
 800745e:	fa00 f203 	lsl.w	r2, r0, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800746a:	4b29      	ldr	r3, [pc, #164]	; (8007510 <HAL_ADC_ConfigChannel+0x250>)
 800746c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a28      	ldr	r2, [pc, #160]	; (8007514 <HAL_ADC_ConfigChannel+0x254>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d10f      	bne.n	8007498 <HAL_ADC_ConfigChannel+0x1d8>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2b12      	cmp	r3, #18
 800747e:	d10b      	bne.n	8007498 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <HAL_ADC_ConfigChannel+0x254>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d12b      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x23a>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <HAL_ADC_ConfigChannel+0x258>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d003      	beq.n	80074b4 <HAL_ADC_ConfigChannel+0x1f4>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b11      	cmp	r3, #17
 80074b2:	d122      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a11      	ldr	r2, [pc, #68]	; (8007518 <HAL_ADC_ConfigChannel+0x258>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d111      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80074d6:	4b11      	ldr	r3, [pc, #68]	; (800751c <HAL_ADC_ConfigChannel+0x25c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a11      	ldr	r2, [pc, #68]	; (8007520 <HAL_ADC_ConfigChannel+0x260>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	0c9a      	lsrs	r2, r3, #18
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80074ec:	e002      	b.n	80074f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f9      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007502:	2300      	movs	r3, #0
}
 8007504:	4618      	mov	r0, r3
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	40012300 	.word	0x40012300
 8007514:	40012000 	.word	0x40012000
 8007518:	10000012 	.word	0x10000012
 800751c:	20008ef0 	.word	0x20008ef0
 8007520:	431bde83 	.word	0x431bde83

08007524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800752c:	4b79      	ldr	r3, [pc, #484]	; (8007714 <ADC_Init+0x1f0>)
 800752e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6859      	ldr	r1, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	021a      	lsls	r2, r3, #8
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800757c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800759e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6899      	ldr	r1, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	4a58      	ldr	r2, [pc, #352]	; (8007718 <ADC_Init+0x1f4>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d022      	beq.n	8007602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6899      	ldr	r1, [r3, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6899      	ldr	r1, [r3, #8]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	609a      	str	r2, [r3, #8]
 8007600:	e00f      	b.n	8007622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007620:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0202 	bic.w	r2, r2, #2
 8007630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6899      	ldr	r1, [r3, #8]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7e1b      	ldrb	r3, [r3, #24]
 800763c:	005a      	lsls	r2, r3, #1
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01b      	beq.n	8007688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800766e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6859      	ldr	r1, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	3b01      	subs	r3, #1
 800767c:	035a      	lsls	r2, r3, #13
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	e007      	b.n	8007698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007696:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	051a      	lsls	r2, r3, #20
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6899      	ldr	r1, [r3, #8]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076da:	025a      	lsls	r2, r3, #9
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689a      	ldr	r2, [r3, #8]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6899      	ldr	r1, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	029a      	lsls	r2, r3, #10
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	40012300 	.word	0x40012300
 8007718:	0f000001 	.word	0x0f000001

0800771c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007732:	2b00      	cmp	r3, #0
 8007734:	d13c      	bne.n	80077b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d12b      	bne.n	80077a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007754:	2b00      	cmp	r3, #0
 8007756:	d127      	bne.n	80077a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007770:	2b00      	cmp	r3, #0
 8007772:	d119      	bne.n	80077a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0220 	bic.w	r2, r2, #32
 8007782:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d105      	bne.n	80077a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	f043 0201 	orr.w	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7fe fd33 	bl	8006214 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80077ae:	e00e      	b.n	80077ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7ff fd75 	bl	80072ac <HAL_ADC_ErrorCallback>
}
 80077c2:	e004      	b.n	80077ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
}
 80077ce:	bf00      	nop
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f7fe fd05 	bl	80061f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b084      	sub	sp, #16
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2240      	movs	r2, #64	; 0x40
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780a:	f043 0204 	orr.w	r2, r3, #4
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff fd4a 	bl	80072ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_ADCEx_InjectedStart+0x22>
 800783e:	2302      	movs	r3, #2
 8007840:	e0aa      	b.n	8007998 <HAL_ADCEx_InjectedStart+0x178>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d018      	beq.n	800788a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007868:	4b4e      	ldr	r3, [pc, #312]	; (80079a4 <HAL_ADCEx_InjectedStart+0x184>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a4e      	ldr	r2, [pc, #312]	; (80079a8 <HAL_ADCEx_InjectedStart+0x188>)
 800786e:	fba2 2303 	umull	r2, r3, r2, r3
 8007872:	0c9a      	lsrs	r2, r3, #18
 8007874:	4613      	mov	r3, r2
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	4413      	add	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800787c:	e002      	b.n	8007884 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3b01      	subs	r3, #1
 8007882:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1f9      	bne.n	800787e <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b01      	cmp	r3, #1
 8007896:	d172      	bne.n	800797e <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078a0:	f023 0301 	bic.w	r3, r3, #1
 80078a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f06f 0204 	mvn.w	r2, #4
 80078ce:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078d0:	4b36      	ldr	r3, [pc, #216]	; (80079ac <HAL_ADCEx_InjectedStart+0x18c>)
 80078d2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f003 031f 	and.w	r3, r3, #31
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d124      	bne.n	800792a <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007900:	2b00      	cmp	r3, #0
 8007902:	bf0c      	ite	eq
 8007904:	2301      	moveq	r3, #1
 8007906:	2300      	movne	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d041      	beq.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d03e      	beq.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007926:	609a      	str	r2, [r3, #8]
 8007928:	e035      	b.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007934:	2b00      	cmp	r3, #0
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf0c      	ite	eq
 800794e:	2301      	moveq	r3, #1
 8007950:	2300      	movne	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a15      	ldr	r2, [pc, #84]	; (80079b0 <HAL_ADCEx_InjectedStart+0x190>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d11a      	bne.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d014      	beq.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800797a:	609a      	str	r2, [r3, #8]
 800797c:	e00b      	b.n	8007996 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	f043 0210 	orr.w	r2, r3, #16
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798e:	f043 0201 	orr.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	371c      	adds	r7, #28
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20008ef0 	.word	0x20008ef0
 80079a8:	431bde83 	.word	0x431bde83
 80079ac:	40012300 	.word	0x40012300
 80079b0:	40012000 	.word	0x40012000

080079b4 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d101      	bne.n	80079ce <HAL_ADCEx_InjectedStop+0x1a>
 80079ca:	2302      	movs	r3, #2
 80079cc:	e037      	b.n	8007a3e <HAL_ADCEx_InjectedStop+0x8a>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d120      	bne.n	8007a24 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d119      	bne.n	8007a24 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0201 	bic.w	r2, r2, #1
 80079fe:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d112      	bne.n	8007a34 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a16:	f023 0301 	bic.w	r3, r3, #1
 8007a1a:	f043 0201 	orr.w	r2, r3, #1
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a22:	e007      	b.n	8007a34 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a28:	f043 0220 	orr.w	r2, r3, #32
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
	...

08007a4c <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0204 	mvn.w	r2, #4
 8007a62:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	3b01      	subs	r3, #1
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d81f      	bhi.n	8007aac <HAL_ADCEx_InjectedGetValue+0x60>
 8007a6c:	a201      	add	r2, pc, #4	; (adr r2, 8007a74 <HAL_ADCEx_InjectedGetValue+0x28>)
 8007a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a72:	bf00      	nop
 8007a74:	08007aa3 	.word	0x08007aa3
 8007a78:	08007a99 	.word	0x08007a99
 8007a7c:	08007a8f 	.word	0x08007a8f
 8007a80:	08007a85 	.word	0x08007a85
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007a8c:	e00f      	b.n	8007aae <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a94:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007a96:	e00a      	b.n	8007aae <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007aa0:	e005      	b.n	8007aae <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa8:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007aaa:	e000      	b.n	8007aae <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8007aac:	bf00      	nop
  }
  return tmp;
 8007aae:	68fb      	ldr	r3, [r7, #12]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d101      	bne.n	8007ad4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e17e      	b.n	8007dd2 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b09      	cmp	r3, #9
 8007ae2:	d925      	bls.n	8007b30 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68d9      	ldr	r1, [r3, #12]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	461a      	mov	r2, r3
 8007af2:	4613      	mov	r3, r2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	4413      	add	r3, r2
 8007af8:	3b1e      	subs	r3, #30
 8007afa:	2207      	movs	r2, #7
 8007afc:	fa02 f303 	lsl.w	r3, r2, r3
 8007b00:	43da      	mvns	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	400a      	ands	r2, r1
 8007b08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68d9      	ldr	r1, [r3, #12]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	4403      	add	r3, r0
 8007b22:	3b1e      	subs	r3, #30
 8007b24:	409a      	lsls	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	e022      	b.n	8007b76 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6919      	ldr	r1, [r3, #16]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4613      	mov	r3, r2
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	2207      	movs	r2, #7
 8007b46:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4a:	43da      	mvns	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	400a      	ands	r2, r1
 8007b52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6919      	ldr	r1, [r3, #16]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	4618      	mov	r0, r3
 8007b66:	4603      	mov	r3, r0
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	4403      	add	r3, r0
 8007b6c:	409a      	lsls	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007b84:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	051a      	lsls	r2, r3, #20
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	3303      	adds	r3, #3
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	4613      	mov	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	221f      	movs	r2, #31
 8007bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc4:	43da      	mvns	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	400a      	ands	r2, r1
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4618      	mov	r0, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	3303      	adds	r3, #3
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	fa00 f203 	lsl.w	r2, r0, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	4a75      	ldr	r2, [pc, #468]	; (8007de0 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	6899      	ldr	r1, [r3, #8]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699a      	ldr	r2, [r3, #24]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6899      	ldr	r1, [r3, #8]
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	69da      	ldr	r2, [r3, #28]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	609a      	str	r2, [r3, #8]
 8007c52:	e00f      	b.n	8007c74 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007c62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007c72:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	7d5b      	ldrb	r3, [r3, #21]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d008      	beq.n	8007c8e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8a:	605a      	str	r2, [r3, #4]
 8007c8c:	e007      	b.n	8007c9e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685a      	ldr	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	7d1b      	ldrb	r3, [r3, #20]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	e007      	b.n	8007cc8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cc6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d02e      	beq.n	8007d2e <HAL_ADCEx_InjectedConfigChannel+0x272>
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d840      	bhi.n	8007d56 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d002      	beq.n	8007cde <HAL_ADCEx_InjectedConfigChannel+0x222>
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d014      	beq.n	8007d06 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8007cdc:	e03b      	b.n	8007d56 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6812      	ldr	r2, [r2, #0]
 8007ce8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007cec:	f023 030f 	bic.w	r3, r3, #15
 8007cf0:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6959      	ldr	r1, [r3, #20]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	615a      	str	r2, [r3, #20]
      break;
 8007d04:	e03b      	b.n	8007d7e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d14:	f023 030f 	bic.w	r3, r3, #15
 8007d18:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6999      	ldr	r1, [r3, #24]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	68da      	ldr	r2, [r3, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	430a      	orrs	r2, r1
 8007d2a:	619a      	str	r2, [r3, #24]
      break;
 8007d2c:	e027      	b.n	8007d7e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d3c:	f023 030f 	bic.w	r3, r3, #15
 8007d40:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69d9      	ldr	r1, [r3, #28]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	61da      	str	r2, [r3, #28]
      break;
 8007d54:	e013      	b.n	8007d7e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d64:	f023 030f 	bic.w	r3, r3, #15
 8007d68:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6a19      	ldr	r1, [r3, #32]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	621a      	str	r2, [r3, #32]
      break;
 8007d7c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d7e:	4b19      	ldr	r3, [pc, #100]	; (8007de4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8007d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d109      	bne.n	8007da0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b12      	cmp	r3, #18
 8007d92:	d105      	bne.n	8007da0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d10e      	bne.n	8007dc8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a0f      	ldr	r2, [pc, #60]	; (8007dec <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <HAL_ADCEx_InjectedConfigChannel+0x300>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b11      	cmp	r3, #17
 8007dba:	d105      	bne.n	8007dc8 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	000f0001 	.word	0x000f0001
 8007de4:	40012300 	.word	0x40012300
 8007de8:	40012000 	.word	0x40012000
 8007dec:	10000012 	.word	0x10000012

08007df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e00:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <__NVIC_SetPriorityGrouping+0x44>)
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e22:	4a04      	ldr	r2, [pc, #16]	; (8007e34 <__NVIC_SetPriorityGrouping+0x44>)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	60d3      	str	r3, [r2, #12]
}
 8007e28:	bf00      	nop
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	e000ed00 	.word	0xe000ed00

08007e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e3c:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <__NVIC_GetPriorityGrouping+0x18>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	0a1b      	lsrs	r3, r3, #8
 8007e42:	f003 0307 	and.w	r3, r3, #7
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	e000ed00 	.word	0xe000ed00

08007e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	db0b      	blt.n	8007e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	f003 021f 	and.w	r2, r3, #31
 8007e6c:	4907      	ldr	r1, [pc, #28]	; (8007e8c <__NVIC_EnableIRQ+0x38>)
 8007e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	2001      	movs	r0, #1
 8007e76:	fa00 f202 	lsl.w	r2, r0, r2
 8007e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e7e:	bf00      	nop
 8007e80:	370c      	adds	r7, #12
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	e000e100 	.word	0xe000e100

08007e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	6039      	str	r1, [r7, #0]
 8007e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	db0a      	blt.n	8007eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	490c      	ldr	r1, [pc, #48]	; (8007edc <__NVIC_SetPriority+0x4c>)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	0112      	lsls	r2, r2, #4
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007eb8:	e00a      	b.n	8007ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	4908      	ldr	r1, [pc, #32]	; (8007ee0 <__NVIC_SetPriority+0x50>)
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	3b04      	subs	r3, #4
 8007ec8:	0112      	lsls	r2, r2, #4
 8007eca:	b2d2      	uxtb	r2, r2
 8007ecc:	440b      	add	r3, r1
 8007ece:	761a      	strb	r2, [r3, #24]
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	e000e100 	.word	0xe000e100
 8007ee0:	e000ed00 	.word	0xe000ed00

08007ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b089      	sub	sp, #36	; 0x24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f003 0307 	and.w	r3, r3, #7
 8007ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f1c3 0307 	rsb	r3, r3, #7
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	bf28      	it	cs
 8007f02:	2304      	movcs	r3, #4
 8007f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	2b06      	cmp	r3, #6
 8007f0c:	d902      	bls.n	8007f14 <NVIC_EncodePriority+0x30>
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	3b03      	subs	r3, #3
 8007f12:	e000      	b.n	8007f16 <NVIC_EncodePriority+0x32>
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f18:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	43da      	mvns	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	401a      	ands	r2, r3
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	fa01 f303 	lsl.w	r3, r1, r3
 8007f36:	43d9      	mvns	r1, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f3c:	4313      	orrs	r3, r2
         );
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3724      	adds	r7, #36	; 0x24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
	...

08007f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f5c:	d301      	bcc.n	8007f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e00f      	b.n	8007f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f62:	4a0a      	ldr	r2, [pc, #40]	; (8007f8c <SysTick_Config+0x40>)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f6a:	210f      	movs	r1, #15
 8007f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f70:	f7ff ff8e 	bl	8007e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <SysTick_Config+0x40>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f7a:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <SysTick_Config+0x40>)
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000e010 	.word	0xe000e010

08007f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7ff ff29 	bl	8007df0 <__NVIC_SetPriorityGrouping>
}
 8007f9e:	bf00      	nop
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b086      	sub	sp, #24
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4603      	mov	r3, r0
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007fb8:	f7ff ff3e 	bl	8007e38 <__NVIC_GetPriorityGrouping>
 8007fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	68b9      	ldr	r1, [r7, #8]
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f7ff ff8e 	bl	8007ee4 <NVIC_EncodePriority>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff ff5d 	bl	8007e90 <__NVIC_SetPriority>
}
 8007fd6:	bf00      	nop
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff ff31 	bl	8007e54 <__NVIC_EnableIRQ>
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff ffa2 	bl	8007f4c <SysTick_Config>
 8008008:	4603      	mov	r3, r0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
	...

08008014 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008020:	f7fe fe46 	bl	8006cb0 <HAL_GetTick>
 8008024:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e099      	b.n	8008164 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0201 	bic.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008050:	e00f      	b.n	8008072 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008052:	f7fe fe2d 	bl	8006cb0 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b05      	cmp	r3, #5
 800805e:	d908      	bls.n	8008072 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2220      	movs	r2, #32
 8008064:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2203      	movs	r2, #3
 800806a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e078      	b.n	8008164 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1e8      	bne.n	8008052 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	4b38      	ldr	r3, [pc, #224]	; (800816c <HAL_DMA_Init+0x158>)
 800808c:	4013      	ands	r3, r2
 800808e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800809e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d107      	bne.n	80080dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d4:	4313      	orrs	r3, r2
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f023 0307 	bic.w	r3, r3, #7
 80080f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b04      	cmp	r3, #4
 8008104:	d117      	bne.n	8008136 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00e      	beq.n	8008136 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 fadf 	bl	80086dc <DMA_CheckFifoParam>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2240      	movs	r2, #64	; 0x40
 8008128:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008132:	2301      	movs	r3, #1
 8008134:	e016      	b.n	8008164 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fa96 	bl	8008670 <DMA_CalcBaseAndBitshift>
 8008144:	4603      	mov	r3, r0
 8008146:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814c:	223f      	movs	r2, #63	; 0x3f
 800814e:	409a      	lsls	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	f010803f 	.word	0xf010803f

08008170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_DMA_Start_IT+0x26>
 8008192:	2302      	movs	r3, #2
 8008194:	e040      	b.n	8008218 <HAL_DMA_Start_IT+0xa8>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d12f      	bne.n	800820a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fa28 	bl	8008614 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c8:	223f      	movs	r2, #63	; 0x3f
 80081ca:	409a      	lsls	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0216 	orr.w	r2, r2, #22
 80081de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0208 	orr.w	r2, r2, #8
 80081f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e005      	b.n	8008216 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008212:	2302      	movs	r3, #2
 8008214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800822e:	f7fe fd3f 	bl	8006cb0 <HAL_GetTick>
 8008232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d008      	beq.n	8008252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2280      	movs	r2, #128	; 0x80
 8008244:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e052      	b.n	80082f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0216 	bic.w	r2, r2, #22
 8008260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <HAL_DMA_Abort+0x62>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0208 	bic.w	r2, r2, #8
 8008290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082a2:	e013      	b.n	80082cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082a4:	f7fe fd04 	bl	8006cb0 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d90c      	bls.n	80082cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2203      	movs	r2, #3
 80082bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e015      	b.n	80082f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e4      	bne.n	80082a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082de:	223f      	movs	r2, #63	; 0x3f
 80082e0:	409a      	lsls	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800830c:	4b8e      	ldr	r3, [pc, #568]	; (8008548 <HAL_DMA_IRQHandler+0x248>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a8e      	ldr	r2, [pc, #568]	; (800854c <HAL_DMA_IRQHandler+0x24c>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	0a9b      	lsrs	r3, r3, #10
 8008318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832a:	2208      	movs	r2, #8
 800832c:	409a      	lsls	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4013      	ands	r3, r2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01a      	beq.n	800836c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0204 	bic.w	r2, r2, #4
 8008352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008358:	2208      	movs	r2, #8
 800835a:	409a      	lsls	r2, r3
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008364:	f043 0201 	orr.w	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008370:	2201      	movs	r2, #1
 8008372:	409a      	lsls	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4013      	ands	r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d012      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838e:	2201      	movs	r2, #1
 8008390:	409a      	lsls	r2, r3
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	f043 0202 	orr.w	r2, r3, #2
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a6:	2204      	movs	r2, #4
 80083a8:	409a      	lsls	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4013      	ands	r3, r2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d012      	beq.n	80083d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083c4:	2204      	movs	r2, #4
 80083c6:	409a      	lsls	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d0:	f043 0204 	orr.w	r2, r3, #4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083dc:	2210      	movs	r2, #16
 80083de:	409a      	lsls	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4013      	ands	r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d043      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d03c      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083fa:	2210      	movs	r2, #16
 80083fc:	409a      	lsls	r2, r3
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d108      	bne.n	8008430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d024      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
 800842e:	e01f      	b.n	8008470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	4798      	blx	r3
 8008440:	e016      	b.n	8008470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844c:	2b00      	cmp	r3, #0
 800844e:	d107      	bne.n	8008460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0208 	bic.w	r2, r2, #8
 800845e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008474:	2220      	movs	r2, #32
 8008476:	409a      	lsls	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 808f 	beq.w	80085a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8087 	beq.w	80085a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008496:	2220      	movs	r2, #32
 8008498:	409a      	lsls	r2, r3
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d136      	bne.n	8008518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0216 	bic.w	r2, r2, #22
 80084b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d103      	bne.n	80084da <HAL_DMA_IRQHandler+0x1da>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0208 	bic.w	r2, r2, #8
 80084e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ee:	223f      	movs	r2, #63	; 0x3f
 80084f0:	409a      	lsls	r2, r3
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800850a:	2b00      	cmp	r3, #0
 800850c:	d07e      	beq.n	800860c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
        }
        return;
 8008516:	e079      	b.n	800860c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01d      	beq.n	8008562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008538:	2b00      	cmp	r3, #0
 800853a:	d031      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
 8008544:	e02c      	b.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
 8008546:	bf00      	nop
 8008548:	20008ef0 	.word	0x20008ef0
 800854c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d023      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
 8008560:	e01e      	b.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10f      	bne.n	8008590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0210 	bic.w	r2, r2, #16
 800857e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d032      	beq.n	800860e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d022      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2205      	movs	r2, #5
 80085b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60bb      	str	r3, [r7, #8]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d307      	bcc.n	80085e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f2      	bne.n	80085cc <HAL_DMA_IRQHandler+0x2cc>
 80085e6:	e000      	b.n	80085ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80085e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
 800860a:	e000      	b.n	800860e <HAL_DMA_IRQHandler+0x30e>
        return;
 800860c:	bf00      	nop
    }
  }
}
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008630:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b40      	cmp	r3, #64	; 0x40
 8008640:	d108      	bne.n	8008654 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008652:	e007      	b.n	8008664 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	60da      	str	r2, [r3, #12]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	3b10      	subs	r3, #16
 8008680:	4a14      	ldr	r2, [pc, #80]	; (80086d4 <DMA_CalcBaseAndBitshift+0x64>)
 8008682:	fba2 2303 	umull	r2, r3, r2, r3
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800868a:	4a13      	ldr	r2, [pc, #76]	; (80086d8 <DMA_CalcBaseAndBitshift+0x68>)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b03      	cmp	r3, #3
 800869c:	d909      	bls.n	80086b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086a6:	f023 0303 	bic.w	r3, r3, #3
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	659a      	str	r2, [r3, #88]	; 0x58
 80086b0:	e007      	b.n	80086c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	aaaaaaab 	.word	0xaaaaaaab
 80086d8:	0800ea6c 	.word	0x0800ea6c

080086dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d11f      	bne.n	8008736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d856      	bhi.n	80087aa <DMA_CheckFifoParam+0xce>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <DMA_CheckFifoParam+0x28>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008715 	.word	0x08008715
 8008708:	08008727 	.word	0x08008727
 800870c:	08008715 	.word	0x08008715
 8008710:	080087ab 	.word	0x080087ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d046      	beq.n	80087ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008724:	e043      	b.n	80087ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800872e:	d140      	bne.n	80087b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008734:	e03d      	b.n	80087b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800873e:	d121      	bne.n	8008784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d837      	bhi.n	80087b6 <DMA_CheckFifoParam+0xda>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <DMA_CheckFifoParam+0x70>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800875d 	.word	0x0800875d
 8008750:	08008763 	.word	0x08008763
 8008754:	0800875d 	.word	0x0800875d
 8008758:	08008775 	.word	0x08008775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
      break;
 8008760:	e030      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d025      	beq.n	80087ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008772:	e022      	b.n	80087ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800877c:	d11f      	bne.n	80087be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008782:	e01c      	b.n	80087be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d903      	bls.n	8008792 <DMA_CheckFifoParam+0xb6>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d003      	beq.n	8008798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008790:	e018      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]
      break;
 8008796:	e015      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00e      	beq.n	80087c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
      break;
 80087a8:	e00b      	b.n	80087c2 <DMA_CheckFifoParam+0xe6>
      break;
 80087aa:	bf00      	nop
 80087ac:	e00a      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087ae:	bf00      	nop
 80087b0:	e008      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087b2:	bf00      	nop
 80087b4:	e006      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087b6:	bf00      	nop
 80087b8:	e004      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087c2:	bf00      	nop
    }
  } 
  
  return status; 
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop

080087d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b089      	sub	sp, #36	; 0x24
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80087de:	2300      	movs	r3, #0
 80087e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80087e2:	2300      	movs	r3, #0
 80087e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
 80087ee:	e159      	b.n	8008aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80087f0:	2201      	movs	r2, #1
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	4013      	ands	r3, r2
 8008802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	429a      	cmp	r2, r3
 800880a:	f040 8148 	bne.w	8008a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	2b01      	cmp	r3, #1
 8008818:	d005      	beq.n	8008826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008822:	2b02      	cmp	r3, #2
 8008824:	d130      	bne.n	8008888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	2203      	movs	r2, #3
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	43db      	mvns	r3, r3
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	4013      	ands	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	fa02 f303 	lsl.w	r3, r2, r3
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	4313      	orrs	r3, r2
 800884e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800885c:	2201      	movs	r2, #1
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	fa02 f303 	lsl.w	r3, r2, r3
 8008864:	43db      	mvns	r3, r3
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	4013      	ands	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	091b      	lsrs	r3, r3, #4
 8008872:	f003 0201 	and.w	r2, r3, #1
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	fa02 f303 	lsl.w	r3, r2, r3
 800887c:	69ba      	ldr	r2, [r7, #24]
 800887e:	4313      	orrs	r3, r2
 8008880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69ba      	ldr	r2, [r7, #24]
 8008886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f003 0303 	and.w	r3, r3, #3
 8008890:	2b03      	cmp	r3, #3
 8008892:	d017      	beq.n	80088c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	2203      	movs	r2, #3
 80088a0:	fa02 f303 	lsl.w	r3, r2, r3
 80088a4:	43db      	mvns	r3, r3
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	4013      	ands	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f003 0303 	and.w	r3, r3, #3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d123      	bne.n	8008918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	08da      	lsrs	r2, r3, #3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3208      	adds	r2, #8
 80088d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	220f      	movs	r2, #15
 80088e8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ec:	43db      	mvns	r3, r3
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	4013      	ands	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4313      	orrs	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	08da      	lsrs	r2, r3, #3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3208      	adds	r2, #8
 8008912:	69b9      	ldr	r1, [r7, #24]
 8008914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	2203      	movs	r2, #3
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	43db      	mvns	r3, r3
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	4013      	ands	r3, r2
 800892e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f003 0203 	and.w	r2, r3, #3
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	4313      	orrs	r3, r2
 8008944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008954:	2b00      	cmp	r3, #0
 8008956:	f000 80a2 	beq.w	8008a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	4b57      	ldr	r3, [pc, #348]	; (8008abc <HAL_GPIO_Init+0x2e8>)
 8008960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008962:	4a56      	ldr	r2, [pc, #344]	; (8008abc <HAL_GPIO_Init+0x2e8>)
 8008964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008968:	6453      	str	r3, [r2, #68]	; 0x44
 800896a:	4b54      	ldr	r3, [pc, #336]	; (8008abc <HAL_GPIO_Init+0x2e8>)
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008976:	4a52      	ldr	r2, [pc, #328]	; (8008ac0 <HAL_GPIO_Init+0x2ec>)
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	089b      	lsrs	r3, r3, #2
 800897c:	3302      	adds	r3, #2
 800897e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	220f      	movs	r2, #15
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	43db      	mvns	r3, r3
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	4013      	ands	r3, r2
 8008998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a49      	ldr	r2, [pc, #292]	; (8008ac4 <HAL_GPIO_Init+0x2f0>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d019      	beq.n	80089d6 <HAL_GPIO_Init+0x202>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a48      	ldr	r2, [pc, #288]	; (8008ac8 <HAL_GPIO_Init+0x2f4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d013      	beq.n	80089d2 <HAL_GPIO_Init+0x1fe>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a47      	ldr	r2, [pc, #284]	; (8008acc <HAL_GPIO_Init+0x2f8>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00d      	beq.n	80089ce <HAL_GPIO_Init+0x1fa>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a46      	ldr	r2, [pc, #280]	; (8008ad0 <HAL_GPIO_Init+0x2fc>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d007      	beq.n	80089ca <HAL_GPIO_Init+0x1f6>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a45      	ldr	r2, [pc, #276]	; (8008ad4 <HAL_GPIO_Init+0x300>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d101      	bne.n	80089c6 <HAL_GPIO_Init+0x1f2>
 80089c2:	2304      	movs	r3, #4
 80089c4:	e008      	b.n	80089d8 <HAL_GPIO_Init+0x204>
 80089c6:	2307      	movs	r3, #7
 80089c8:	e006      	b.n	80089d8 <HAL_GPIO_Init+0x204>
 80089ca:	2303      	movs	r3, #3
 80089cc:	e004      	b.n	80089d8 <HAL_GPIO_Init+0x204>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e002      	b.n	80089d8 <HAL_GPIO_Init+0x204>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <HAL_GPIO_Init+0x204>
 80089d6:	2300      	movs	r3, #0
 80089d8:	69fa      	ldr	r2, [r7, #28]
 80089da:	f002 0203 	and.w	r2, r2, #3
 80089de:	0092      	lsls	r2, r2, #2
 80089e0:	4093      	lsls	r3, r2
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089e8:	4935      	ldr	r1, [pc, #212]	; (8008ac0 <HAL_GPIO_Init+0x2ec>)
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	089b      	lsrs	r3, r3, #2
 80089ee:	3302      	adds	r3, #2
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80089f6:	4b38      	ldr	r3, [pc, #224]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	43db      	mvns	r3, r3
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	4013      	ands	r3, r2
 8008a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d003      	beq.n	8008a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a1a:	4a2f      	ldr	r2, [pc, #188]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a20:	4b2d      	ldr	r3, [pc, #180]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008a44:	4a24      	ldr	r2, [pc, #144]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008a4a:	4b23      	ldr	r3, [pc, #140]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	43db      	mvns	r3, r3
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	4013      	ands	r3, r2
 8008a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008a6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a74:	4b18      	ldr	r3, [pc, #96]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	43db      	mvns	r3, r3
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4013      	ands	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d003      	beq.n	8008a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a98:	4a0f      	ldr	r2, [pc, #60]	; (8008ad8 <HAL_GPIO_Init+0x304>)
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	61fb      	str	r3, [r7, #28]
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	2b0f      	cmp	r3, #15
 8008aa8:	f67f aea2 	bls.w	80087f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008aac:	bf00      	nop
 8008aae:	bf00      	nop
 8008ab0:	3724      	adds	r7, #36	; 0x24
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	40023800 	.word	0x40023800
 8008ac0:	40013800 	.word	0x40013800
 8008ac4:	40020000 	.word	0x40020000
 8008ac8:	40020400 	.word	0x40020400
 8008acc:	40020800 	.word	0x40020800
 8008ad0:	40020c00 	.word	0x40020c00
 8008ad4:	40021000 	.word	0x40021000
 8008ad8:	40013c00 	.word	0x40013c00

08008adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	807b      	strh	r3, [r7, #2]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008aec:	787b      	ldrb	r3, [r7, #1]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008af2:	887a      	ldrh	r2, [r7, #2]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008af8:	e003      	b.n	8008b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008afa:	887b      	ldrh	r3, [r7, #2]
 8008afc:	041a      	lsls	r2, r3, #16
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	619a      	str	r2, [r3, #24]
}
 8008b02:	bf00      	nop
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008b1a:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b1c:	695a      	ldr	r2, [r3, #20]
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	4013      	ands	r3, r2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d006      	beq.n	8008b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b26:	4a05      	ldr	r2, [pc, #20]	; (8008b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b28:	88fb      	ldrh	r3, [r7, #6]
 8008b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b2c:	88fb      	ldrh	r3, [r7, #6]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fd fbfa 	bl	8006328 <HAL_GPIO_EXTI_Callback>
  }
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	40013c00 	.word	0x40013c00

08008b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e12b      	b.n	8008daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d106      	bne.n	8008b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7fd fcd4 	bl	8006514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2224      	movs	r2, #36	; 0x24
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f022 0201 	bic.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ba4:	f001 fbbc 	bl	800a320 <HAL_RCC_GetPCLK1Freq>
 8008ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4a81      	ldr	r2, [pc, #516]	; (8008db4 <HAL_I2C_Init+0x274>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d807      	bhi.n	8008bc4 <HAL_I2C_Init+0x84>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4a80      	ldr	r2, [pc, #512]	; (8008db8 <HAL_I2C_Init+0x278>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	bf94      	ite	ls
 8008bbc:	2301      	movls	r3, #1
 8008bbe:	2300      	movhi	r3, #0
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	e006      	b.n	8008bd2 <HAL_I2C_Init+0x92>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a7d      	ldr	r2, [pc, #500]	; (8008dbc <HAL_I2C_Init+0x27c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	bf94      	ite	ls
 8008bcc:	2301      	movls	r3, #1
 8008bce:	2300      	movhi	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e0e7      	b.n	8008daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4a78      	ldr	r2, [pc, #480]	; (8008dc0 <HAL_I2C_Init+0x280>)
 8008bde:	fba2 2303 	umull	r2, r3, r2, r3
 8008be2:	0c9b      	lsrs	r3, r3, #18
 8008be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4a6a      	ldr	r2, [pc, #424]	; (8008db4 <HAL_I2C_Init+0x274>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d802      	bhi.n	8008c14 <HAL_I2C_Init+0xd4>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	3301      	adds	r3, #1
 8008c12:	e009      	b.n	8008c28 <HAL_I2C_Init+0xe8>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
 8008c1e:	4a69      	ldr	r2, [pc, #420]	; (8008dc4 <HAL_I2C_Init+0x284>)
 8008c20:	fba2 2303 	umull	r2, r3, r2, r3
 8008c24:	099b      	lsrs	r3, r3, #6
 8008c26:	3301      	adds	r3, #1
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	495c      	ldr	r1, [pc, #368]	; (8008db4 <HAL_I2C_Init+0x274>)
 8008c44:	428b      	cmp	r3, r1
 8008c46:	d819      	bhi.n	8008c7c <HAL_I2C_Init+0x13c>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	1e59      	subs	r1, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c56:	1c59      	adds	r1, r3, #1
 8008c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c5c:	400b      	ands	r3, r1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00a      	beq.n	8008c78 <HAL_I2C_Init+0x138>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1e59      	subs	r1, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	005b      	lsls	r3, r3, #1
 8008c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c70:	3301      	adds	r3, #1
 8008c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c76:	e051      	b.n	8008d1c <HAL_I2C_Init+0x1dc>
 8008c78:	2304      	movs	r3, #4
 8008c7a:	e04f      	b.n	8008d1c <HAL_I2C_Init+0x1dc>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d111      	bne.n	8008ca8 <HAL_I2C_Init+0x168>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	1e58      	subs	r0, r3, #1
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6859      	ldr	r1, [r3, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	005b      	lsls	r3, r3, #1
 8008c90:	440b      	add	r3, r1
 8008c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c96:	3301      	adds	r3, #1
 8008c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	e012      	b.n	8008cce <HAL_I2C_Init+0x18e>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	1e58      	subs	r0, r3, #1
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6859      	ldr	r1, [r3, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	0099      	lsls	r1, r3, #2
 8008cb8:	440b      	add	r3, r1
 8008cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2301      	moveq	r3, #1
 8008cca:	2300      	movne	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_I2C_Init+0x196>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e022      	b.n	8008d1c <HAL_I2C_Init+0x1dc>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10e      	bne.n	8008cfc <HAL_I2C_Init+0x1bc>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	1e58      	subs	r0, r3, #1
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6859      	ldr	r1, [r3, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	440b      	add	r3, r1
 8008cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfa:	e00f      	b.n	8008d1c <HAL_I2C_Init+0x1dc>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	1e58      	subs	r0, r3, #1
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6859      	ldr	r1, [r3, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	0099      	lsls	r1, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d12:	3301      	adds	r3, #1
 8008d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	6809      	ldr	r1, [r1, #0]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69da      	ldr	r2, [r3, #28]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6911      	ldr	r1, [r2, #16]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	68d2      	ldr	r2, [r2, #12]
 8008d56:	4311      	orrs	r1, r2
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	6812      	ldr	r2, [r2, #0]
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695a      	ldr	r2, [r3, #20]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0201 	orr.w	r2, r2, #1
 8008d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2220      	movs	r2, #32
 8008d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	000186a0 	.word	0x000186a0
 8008db8:	001e847f 	.word	0x001e847f
 8008dbc:	003d08ff 	.word	0x003d08ff
 8008dc0:	431bde83 	.word	0x431bde83
 8008dc4:	10624dd3 	.word	0x10624dd3

08008dc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	4608      	mov	r0, r1
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	817b      	strh	r3, [r7, #10]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	813b      	strh	r3, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008de2:	f7fd ff65 	bl	8006cb0 <HAL_GetTick>
 8008de6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b20      	cmp	r3, #32
 8008df2:	f040 80d9 	bne.w	8008fa8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2319      	movs	r3, #25
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	496d      	ldr	r1, [pc, #436]	; (8008fb4 <HAL_I2C_Mem_Write+0x1ec>)
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f000 fc7f 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e0cc      	b.n	8008faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <HAL_I2C_Mem_Write+0x56>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e0c5      	b.n	8008faa <HAL_I2C_Mem_Write+0x1e2>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d007      	beq.n	8008e44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2221      	movs	r2, #33	; 0x21
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2240      	movs	r2, #64	; 0x40
 8008e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a3a      	ldr	r2, [r7, #32]
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a4d      	ldr	r2, [pc, #308]	; (8008fb8 <HAL_I2C_Mem_Write+0x1f0>)
 8008e84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e86:	88f8      	ldrh	r0, [r7, #6]
 8008e88:	893a      	ldrh	r2, [r7, #8]
 8008e8a:	8979      	ldrh	r1, [r7, #10]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	9300      	str	r3, [sp, #0]
 8008e94:	4603      	mov	r3, r0
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fab6 	bl	8009408 <I2C_RequestMemoryWrite>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d052      	beq.n	8008f48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e081      	b.n	8008faa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f000 fd00 	bl	80098b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00d      	beq.n	8008ed2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d107      	bne.n	8008ece <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e06b      	b.n	8008faa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed6:	781a      	ldrb	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	3b01      	subs	r3, #1
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d11b      	bne.n	8008f48 <HAL_I2C_Mem_Write+0x180>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d017      	beq.n	8008f48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f32:	3b01      	subs	r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	3b01      	subs	r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1aa      	bne.n	8008ea6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 fcec 	bl	8009932 <I2C_WaitOnBTFFlagUntilTimeout>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00d      	beq.n	8008f7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d107      	bne.n	8008f78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e016      	b.n	8008faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e000      	b.n	8008faa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008fa8:	2302      	movs	r3, #2
  }
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3718      	adds	r7, #24
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	00100002 	.word	0x00100002
 8008fb8:	ffff0000 	.word	0xffff0000

08008fbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b08c      	sub	sp, #48	; 0x30
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	461a      	mov	r2, r3
 8008fca:	4603      	mov	r3, r0
 8008fcc:	817b      	strh	r3, [r7, #10]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	813b      	strh	r3, [r7, #8]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008fd6:	f7fd fe6b 	bl	8006cb0 <HAL_GetTick>
 8008fda:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	f040 8208 	bne.w	80093fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	2319      	movs	r3, #25
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	497b      	ldr	r1, [pc, #492]	; (80091e0 <HAL_I2C_Mem_Read+0x224>)
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fb85 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d001      	beq.n	8009004 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009000:	2302      	movs	r3, #2
 8009002:	e1fb      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <HAL_I2C_Mem_Read+0x56>
 800900e:	2302      	movs	r3, #2
 8009010:	e1f4      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b01      	cmp	r3, #1
 8009026:	d007      	beq.n	8009038 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0201 	orr.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2222      	movs	r2, #34	; 0x22
 800904c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2240      	movs	r2, #64	; 0x40
 8009054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800906e:	b29a      	uxth	r2, r3
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4a5b      	ldr	r2, [pc, #364]	; (80091e4 <HAL_I2C_Mem_Read+0x228>)
 8009078:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800907a:	88f8      	ldrh	r0, [r7, #6]
 800907c:	893a      	ldrh	r2, [r7, #8]
 800907e:	8979      	ldrh	r1, [r7, #10]
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	9300      	str	r3, [sp, #0]
 8009088:	4603      	mov	r3, r0
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fa52 	bl	8009534 <I2C_RequestMemoryRead>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e1b0      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d113      	bne.n	80090ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a2:	2300      	movs	r3, #0
 80090a4:	623b      	str	r3, [r7, #32]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	623b      	str	r3, [r7, #32]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	623b      	str	r3, [r7, #32]
 80090b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	e184      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d11b      	bne.n	800910a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090e2:	2300      	movs	r3, #0
 80090e4:	61fb      	str	r3, [r7, #28]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	61fb      	str	r3, [r7, #28]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	699b      	ldr	r3, [r3, #24]
 80090f4:	61fb      	str	r3, [r7, #28]
 80090f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	e164      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910e:	2b02      	cmp	r3, #2
 8009110:	d11b      	bne.n	800914a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009120:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009132:	2300      	movs	r3, #0
 8009134:	61bb      	str	r3, [r7, #24]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	61bb      	str	r3, [r7, #24]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	61bb      	str	r3, [r7, #24]
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	e144      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800914a:	2300      	movs	r3, #0
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	617b      	str	r3, [r7, #20]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	617b      	str	r3, [r7, #20]
 800915e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009160:	e138      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009166:	2b03      	cmp	r3, #3
 8009168:	f200 80f1 	bhi.w	800934e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009170:	2b01      	cmp	r3, #1
 8009172:	d123      	bne.n	80091bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f000 fc1b 	bl	80099b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e139      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a4:	3b01      	subs	r3, #1
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b01      	subs	r3, #1
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091ba:	e10b      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d14e      	bne.n	8009262 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	2200      	movs	r2, #0
 80091cc:	4906      	ldr	r1, [pc, #24]	; (80091e8 <HAL_I2C_Mem_Read+0x22c>)
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fa98 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d008      	beq.n	80091ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e10e      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
 80091de:	bf00      	nop
 80091e0:	00100002 	.word	0x00100002
 80091e4:	ffff0000 	.word	0xffff0000
 80091e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691a      	ldr	r2, [r3, #16]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	b2d2      	uxtb	r2, r2
 8009208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009218:	3b01      	subs	r3, #1
 800921a:	b29a      	uxth	r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	b2d2      	uxtb	r2, r2
 800923a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009256:	b29b      	uxth	r3, r3
 8009258:	3b01      	subs	r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009260:	e0b8      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	2200      	movs	r2, #0
 800926a:	4966      	ldr	r1, [pc, #408]	; (8009404 <HAL_I2C_Mem_Read+0x448>)
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fa49 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0bf      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800928a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	691a      	ldr	r2, [r3, #16]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	b2d2      	uxtb	r2, r2
 8009298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a8:	3b01      	subs	r3, #1
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	3b01      	subs	r3, #1
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	9300      	str	r3, [sp, #0]
 80092c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c4:	2200      	movs	r2, #0
 80092c6:	494f      	ldr	r1, [pc, #316]	; (8009404 <HAL_I2C_Mem_Read+0x448>)
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fa1b 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e091      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	691a      	ldr	r2, [r3, #16]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009304:	3b01      	subs	r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009310:	b29b      	uxth	r3, r3
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	b2d2      	uxtb	r2, r2
 8009326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009342:	b29b      	uxth	r3, r3
 8009344:	3b01      	subs	r3, #1
 8009346:	b29a      	uxth	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800934c:	e042      	b.n	80093d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800934e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009350:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f000 fb2e 	bl	80099b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009358:	4603      	mov	r3, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d001      	beq.n	8009362 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e04c      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	691a      	ldr	r2, [r3, #16]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937e:	3b01      	subs	r3, #1
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800938a:	b29b      	uxth	r3, r3
 800938c:	3b01      	subs	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d118      	bne.n	80093d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	691a      	ldr	r2, [r3, #16]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	b2d2      	uxtb	r2, r2
 80093ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093be:	3b01      	subs	r3, #1
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f47f aec2 	bne.w	8009162 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2220      	movs	r2, #32
 80093e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e000      	b.n	80093fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80093fa:	2302      	movs	r3, #2
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3728      	adds	r7, #40	; 0x28
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	00010004 	.word	0x00010004

08009408 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	4608      	mov	r0, r1
 8009412:	4611      	mov	r1, r2
 8009414:	461a      	mov	r2, r3
 8009416:	4603      	mov	r3, r0
 8009418:	817b      	strh	r3, [r7, #10]
 800941a:	460b      	mov	r3, r1
 800941c:	813b      	strh	r3, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	2200      	movs	r2, #0
 800943a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f960 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009458:	d103      	bne.n	8009462 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009460:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e05f      	b.n	8009526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009466:	897b      	ldrh	r3, [r7, #10]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	6a3a      	ldr	r2, [r7, #32]
 800947a:	492d      	ldr	r1, [pc, #180]	; (8009530 <I2C_RequestMemoryWrite+0x128>)
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f998 	bl	80097b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e04c      	b.n	8009526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a4:	6a39      	ldr	r1, [r7, #32]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 fa02 	bl	80098b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d107      	bne.n	80094ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e02b      	b.n	8009526 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d105      	bne.n	80094e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094d4:	893b      	ldrh	r3, [r7, #8]
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	611a      	str	r2, [r3, #16]
 80094de:	e021      	b.n	8009524 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80094e0:	893b      	ldrh	r3, [r7, #8]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f0:	6a39      	ldr	r1, [r7, #32]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f9dc 	bl	80098b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	2b04      	cmp	r3, #4
 8009504:	d107      	bne.n	8009516 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e005      	b.n	8009526 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800951a:	893b      	ldrh	r3, [r7, #8]
 800951c:	b2da      	uxtb	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	00010002 	.word	0x00010002

08009534 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	461a      	mov	r2, r3
 8009542:	4603      	mov	r3, r0
 8009544:	817b      	strh	r3, [r7, #10]
 8009546:	460b      	mov	r3, r1
 8009548:	813b      	strh	r3, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800955c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800956c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	2200      	movs	r2, #0
 8009576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f8c2 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00d      	beq.n	80095a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009594:	d103      	bne.n	800959e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800959c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e0aa      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095a2:	897b      	ldrh	r3, [r7, #10]
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	461a      	mov	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	6a3a      	ldr	r2, [r7, #32]
 80095b6:	4952      	ldr	r1, [pc, #328]	; (8009700 <I2C_RequestMemoryRead+0x1cc>)
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 f8fa 	bl	80097b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e097      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095c8:	2300      	movs	r3, #0
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	617b      	str	r3, [r7, #20]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	699b      	ldr	r3, [r3, #24]
 80095da:	617b      	str	r3, [r7, #20]
 80095dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e0:	6a39      	ldr	r1, [r7, #32]
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f000 f964 	bl	80098b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00d      	beq.n	800960a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d107      	bne.n	8009606 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e076      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d105      	bne.n	800961c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009610:	893b      	ldrh	r3, [r7, #8]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	611a      	str	r2, [r3, #16]
 800961a:	e021      	b.n	8009660 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800961c:	893b      	ldrh	r3, [r7, #8]
 800961e:	0a1b      	lsrs	r3, r3, #8
 8009620:	b29b      	uxth	r3, r3
 8009622:	b2da      	uxtb	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800962a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962c:	6a39      	ldr	r1, [r7, #32]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f93e 	bl	80098b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00d      	beq.n	8009656 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	2b04      	cmp	r3, #4
 8009640:	d107      	bne.n	8009652 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e050      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009656:	893b      	ldrh	r3, [r7, #8]
 8009658:	b2da      	uxtb	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009662:	6a39      	ldr	r1, [r7, #32]
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 f923 	bl	80098b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00d      	beq.n	800968c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009674:	2b04      	cmp	r3, #4
 8009676:	d107      	bne.n	8009688 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009686:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e035      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800969a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f000 f82b 	bl	8009704 <I2C_WaitOnFlagUntilTimeout>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00d      	beq.n	80096d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c2:	d103      	bne.n	80096cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e013      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80096d0:	897b      	ldrh	r3, [r7, #10]
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	b2da      	uxtb	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	6a3a      	ldr	r2, [r7, #32]
 80096e4:	4906      	ldr	r1, [pc, #24]	; (8009700 <I2C_RequestMemoryRead+0x1cc>)
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 f863 	bl	80097b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80096f6:	2300      	movs	r3, #0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	00010002 	.word	0x00010002

08009704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	603b      	str	r3, [r7, #0]
 8009710:	4613      	mov	r3, r2
 8009712:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009714:	e025      	b.n	8009762 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971c:	d021      	beq.n	8009762 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800971e:	f7fd fac7 	bl	8006cb0 <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d302      	bcc.n	8009734 <I2C_WaitOnFlagUntilTimeout+0x30>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d116      	bne.n	8009762 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2200      	movs	r2, #0
 8009738:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2220      	movs	r2, #32
 800973e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	f043 0220 	orr.w	r2, r3, #32
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e023      	b.n	80097aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	0c1b      	lsrs	r3, r3, #16
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b01      	cmp	r3, #1
 800976a:	d10d      	bne.n	8009788 <I2C_WaitOnFlagUntilTimeout+0x84>
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	43da      	mvns	r2, r3
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4013      	ands	r3, r2
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b00      	cmp	r3, #0
 800977c:	bf0c      	ite	eq
 800977e:	2301      	moveq	r3, #1
 8009780:	2300      	movne	r3, #0
 8009782:	b2db      	uxtb	r3, r3
 8009784:	461a      	mov	r2, r3
 8009786:	e00c      	b.n	80097a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	43da      	mvns	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	4013      	ands	r3, r2
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	bf0c      	ite	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	2300      	movne	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	461a      	mov	r2, r3
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d0b6      	beq.n	8009716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
 80097be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097c0:	e051      	b.n	8009866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d0:	d123      	bne.n	800981a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2220      	movs	r2, #32
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	f043 0204 	orr.w	r2, r3, #4
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e046      	b.n	80098a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d021      	beq.n	8009866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009822:	f7fd fa45 	bl	8006cb0 <HAL_GetTick>
 8009826:	4602      	mov	r2, r0
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	429a      	cmp	r2, r3
 8009830:	d302      	bcc.n	8009838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d116      	bne.n	8009866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2220      	movs	r2, #32
 8009842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	f043 0220 	orr.w	r2, r3, #32
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2200      	movs	r2, #0
 800985e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e020      	b.n	80098a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	0c1b      	lsrs	r3, r3, #16
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10c      	bne.n	800988a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	43da      	mvns	r2, r3
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	4013      	ands	r3, r2
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	bf14      	ite	ne
 8009882:	2301      	movne	r3, #1
 8009884:	2300      	moveq	r3, #0
 8009886:	b2db      	uxtb	r3, r3
 8009888:	e00b      	b.n	80098a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	43da      	mvns	r2, r3
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	4013      	ands	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	bf14      	ite	ne
 800989c:	2301      	movne	r3, #1
 800989e:	2300      	moveq	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d18d      	bne.n	80097c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098bc:	e02d      	b.n	800991a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 f8ce 	bl	8009a60 <I2C_IsAcknowledgeFailed>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e02d      	b.n	800992a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d4:	d021      	beq.n	800991a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098d6:	f7fd f9eb 	bl	8006cb0 <HAL_GetTick>
 80098da:	4602      	mov	r2, r0
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d302      	bcc.n	80098ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d116      	bne.n	800991a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	f043 0220 	orr.w	r2, r3, #32
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e007      	b.n	800992a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	695b      	ldr	r3, [r3, #20]
 8009920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009924:	2b80      	cmp	r3, #128	; 0x80
 8009926:	d1ca      	bne.n	80098be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800993e:	e02d      	b.n	800999c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f88d 	bl	8009a60 <I2C_IsAcknowledgeFailed>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e02d      	b.n	80099ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009956:	d021      	beq.n	800999c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009958:	f7fd f9aa 	bl	8006cb0 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	429a      	cmp	r2, r3
 8009966:	d302      	bcc.n	800996e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d116      	bne.n	800999c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009988:	f043 0220 	orr.w	r2, r3, #32
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e007      	b.n	80099ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	f003 0304 	and.w	r3, r3, #4
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	d1ca      	bne.n	8009940 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099c0:	e042      	b.n	8009a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	695b      	ldr	r3, [r3, #20]
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b10      	cmp	r3, #16
 80099ce:	d119      	bne.n	8009a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f06f 0210 	mvn.w	r2, #16
 80099d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2220      	movs	r2, #32
 80099e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e029      	b.n	8009a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a04:	f7fd f954 	bl	8006cb0 <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d302      	bcc.n	8009a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d116      	bne.n	8009a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2220      	movs	r2, #32
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	f043 0220 	orr.w	r2, r3, #32
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e007      	b.n	8009a58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a52:	2b40      	cmp	r3, #64	; 0x40
 8009a54:	d1b5      	bne.n	80099c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a76:	d11b      	bne.n	8009ab0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2220      	movs	r2, #32
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	f043 0204 	orr.w	r2, r3, #4
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e000      	b.n	8009ab2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr
	...

08009ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e267      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d075      	beq.n	8009bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009ade:	4b88      	ldr	r3, [pc, #544]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f003 030c 	and.w	r3, r3, #12
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d00c      	beq.n	8009b04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aea:	4b85      	ldr	r3, [pc, #532]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d112      	bne.n	8009b1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009af6:	4b82      	ldr	r3, [pc, #520]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b02:	d10b      	bne.n	8009b1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b04:	4b7e      	ldr	r3, [pc, #504]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d05b      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x108>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d157      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e242      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b24:	d106      	bne.n	8009b34 <HAL_RCC_OscConfig+0x74>
 8009b26:	4b76      	ldr	r3, [pc, #472]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a75      	ldr	r2, [pc, #468]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	e01d      	b.n	8009b70 <HAL_RCC_OscConfig+0xb0>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b3c:	d10c      	bne.n	8009b58 <HAL_RCC_OscConfig+0x98>
 8009b3e:	4b70      	ldr	r3, [pc, #448]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a6f      	ldr	r2, [pc, #444]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b48:	6013      	str	r3, [r2, #0]
 8009b4a:	4b6d      	ldr	r3, [pc, #436]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a6c      	ldr	r2, [pc, #432]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	e00b      	b.n	8009b70 <HAL_RCC_OscConfig+0xb0>
 8009b58:	4b69      	ldr	r3, [pc, #420]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a68      	ldr	r2, [pc, #416]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b62:	6013      	str	r3, [r2, #0]
 8009b64:	4b66      	ldr	r3, [pc, #408]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a65      	ldr	r2, [pc, #404]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d013      	beq.n	8009ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b78:	f7fd f89a 	bl	8006cb0 <HAL_GetTick>
 8009b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b80:	f7fd f896 	bl	8006cb0 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b64      	cmp	r3, #100	; 0x64
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e207      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b92:	4b5b      	ldr	r3, [pc, #364]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0xc0>
 8009b9e:	e014      	b.n	8009bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ba0:	f7fd f886 	bl	8006cb0 <HAL_GetTick>
 8009ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ba6:	e008      	b.n	8009bba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ba8:	f7fd f882 	bl	8006cb0 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b64      	cmp	r3, #100	; 0x64
 8009bb4:	d901      	bls.n	8009bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e1f3      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009bba:	4b51      	ldr	r3, [pc, #324]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1f0      	bne.n	8009ba8 <HAL_RCC_OscConfig+0xe8>
 8009bc6:	e000      	b.n	8009bca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0302 	and.w	r3, r3, #2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d063      	beq.n	8009c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bd6:	4b4a      	ldr	r3, [pc, #296]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 030c 	and.w	r3, r3, #12
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009be2:	4b47      	ldr	r3, [pc, #284]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d11c      	bne.n	8009c28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009bee:	4b44      	ldr	r3, [pc, #272]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d116      	bne.n	8009c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bfa:	4b41      	ldr	r3, [pc, #260]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_RCC_OscConfig+0x152>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d001      	beq.n	8009c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e1c7      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c12:	4b3b      	ldr	r3, [pc, #236]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	00db      	lsls	r3, r3, #3
 8009c20:	4937      	ldr	r1, [pc, #220]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c26:	e03a      	b.n	8009c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d020      	beq.n	8009c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009c30:	4b34      	ldr	r3, [pc, #208]	; (8009d04 <HAL_RCC_OscConfig+0x244>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c36:	f7fd f83b 	bl	8006cb0 <HAL_GetTick>
 8009c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c3e:	f7fd f837 	bl	8006cb0 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e1a8      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c50:	4b2b      	ldr	r3, [pc, #172]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f0      	beq.n	8009c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c5c:	4b28      	ldr	r3, [pc, #160]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	00db      	lsls	r3, r3, #3
 8009c6a:	4925      	ldr	r1, [pc, #148]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	600b      	str	r3, [r1, #0]
 8009c70:	e015      	b.n	8009c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c72:	4b24      	ldr	r3, [pc, #144]	; (8009d04 <HAL_RCC_OscConfig+0x244>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c78:	f7fd f81a 	bl	8006cb0 <HAL_GetTick>
 8009c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c7e:	e008      	b.n	8009c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c80:	f7fd f816 	bl	8006cb0 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e187      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c92:	4b1b      	ldr	r3, [pc, #108]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f0      	bne.n	8009c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d036      	beq.n	8009d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d016      	beq.n	8009ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cb2:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <HAL_RCC_OscConfig+0x248>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb8:	f7fc fffa 	bl	8006cb0 <HAL_GetTick>
 8009cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cbe:	e008      	b.n	8009cd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cc0:	f7fc fff6 	bl	8006cb0 <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d901      	bls.n	8009cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e167      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <HAL_RCC_OscConfig+0x240>)
 8009cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cd6:	f003 0302 	and.w	r3, r3, #2
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0f0      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x200>
 8009cde:	e01b      	b.n	8009d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ce0:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <HAL_RCC_OscConfig+0x248>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ce6:	f7fc ffe3 	bl	8006cb0 <HAL_GetTick>
 8009cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cec:	e00e      	b.n	8009d0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009cee:	f7fc ffdf 	bl	8006cb0 <HAL_GetTick>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	1ad3      	subs	r3, r2, r3
 8009cf8:	2b02      	cmp	r3, #2
 8009cfa:	d907      	bls.n	8009d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e150      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
 8009d00:	40023800 	.word	0x40023800
 8009d04:	42470000 	.word	0x42470000
 8009d08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d0c:	4b88      	ldr	r3, [pc, #544]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d1ea      	bne.n	8009cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 8097 	beq.w	8009e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009d2a:	4b81      	ldr	r3, [pc, #516]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10f      	bne.n	8009d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d36:	2300      	movs	r3, #0
 8009d38:	60bb      	str	r3, [r7, #8]
 8009d3a:	4b7d      	ldr	r3, [pc, #500]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3e:	4a7c      	ldr	r2, [pc, #496]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d44:	6413      	str	r3, [r2, #64]	; 0x40
 8009d46:	4b7a      	ldr	r3, [pc, #488]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d4e:	60bb      	str	r3, [r7, #8]
 8009d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d56:	4b77      	ldr	r3, [pc, #476]	; (8009f34 <HAL_RCC_OscConfig+0x474>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d118      	bne.n	8009d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d62:	4b74      	ldr	r3, [pc, #464]	; (8009f34 <HAL_RCC_OscConfig+0x474>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a73      	ldr	r2, [pc, #460]	; (8009f34 <HAL_RCC_OscConfig+0x474>)
 8009d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d6e:	f7fc ff9f 	bl	8006cb0 <HAL_GetTick>
 8009d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d74:	e008      	b.n	8009d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d76:	f7fc ff9b 	bl	8006cb0 <HAL_GetTick>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d901      	bls.n	8009d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e10c      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d88:	4b6a      	ldr	r3, [pc, #424]	; (8009f34 <HAL_RCC_OscConfig+0x474>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d0f0      	beq.n	8009d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d106      	bne.n	8009daa <HAL_RCC_OscConfig+0x2ea>
 8009d9c:	4b64      	ldr	r3, [pc, #400]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da0:	4a63      	ldr	r2, [pc, #396]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	6713      	str	r3, [r2, #112]	; 0x70
 8009da8:	e01c      	b.n	8009de4 <HAL_RCC_OscConfig+0x324>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	2b05      	cmp	r3, #5
 8009db0:	d10c      	bne.n	8009dcc <HAL_RCC_OscConfig+0x30c>
 8009db2:	4b5f      	ldr	r3, [pc, #380]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009db6:	4a5e      	ldr	r2, [pc, #376]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009db8:	f043 0304 	orr.w	r3, r3, #4
 8009dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8009dbe:	4b5c      	ldr	r3, [pc, #368]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc2:	4a5b      	ldr	r2, [pc, #364]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009dc4:	f043 0301 	orr.w	r3, r3, #1
 8009dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8009dca:	e00b      	b.n	8009de4 <HAL_RCC_OscConfig+0x324>
 8009dcc:	4b58      	ldr	r3, [pc, #352]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dd0:	4a57      	ldr	r2, [pc, #348]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009dd2:	f023 0301 	bic.w	r3, r3, #1
 8009dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8009dd8:	4b55      	ldr	r3, [pc, #340]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ddc:	4a54      	ldr	r2, [pc, #336]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009dde:	f023 0304 	bic.w	r3, r3, #4
 8009de2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d015      	beq.n	8009e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dec:	f7fc ff60 	bl	8006cb0 <HAL_GetTick>
 8009df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009df2:	e00a      	b.n	8009e0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009df4:	f7fc ff5c 	bl	8006cb0 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d901      	bls.n	8009e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e0cb      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e0a:	4b49      	ldr	r3, [pc, #292]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0ee      	beq.n	8009df4 <HAL_RCC_OscConfig+0x334>
 8009e16:	e014      	b.n	8009e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e18:	f7fc ff4a 	bl	8006cb0 <HAL_GetTick>
 8009e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e1e:	e00a      	b.n	8009e36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e20:	f7fc ff46 	bl	8006cb0 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e0b5      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009e36:	4b3e      	ldr	r3, [pc, #248]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1ee      	bne.n	8009e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d105      	bne.n	8009e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e48:	4b39      	ldr	r3, [pc, #228]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4c:	4a38      	ldr	r2, [pc, #224]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 80a1 	beq.w	8009fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e5e:	4b34      	ldr	r3, [pc, #208]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 030c 	and.w	r3, r3, #12
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d05c      	beq.n	8009f24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	699b      	ldr	r3, [r3, #24]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d141      	bne.n	8009ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e72:	4b31      	ldr	r3, [pc, #196]	; (8009f38 <HAL_RCC_OscConfig+0x478>)
 8009e74:	2200      	movs	r2, #0
 8009e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e78:	f7fc ff1a 	bl	8006cb0 <HAL_GetTick>
 8009e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e7e:	e008      	b.n	8009e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e80:	f7fc ff16 	bl	8006cb0 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e087      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e92:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f0      	bne.n	8009e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	69da      	ldr	r2, [r3, #28]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	019b      	lsls	r3, r3, #6
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	085b      	lsrs	r3, r3, #1
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	041b      	lsls	r3, r3, #16
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	061b      	lsls	r3, r3, #24
 8009ec2:	491b      	ldr	r1, [pc, #108]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <HAL_RCC_OscConfig+0x478>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ece:	f7fc feef 	bl	8006cb0 <HAL_GetTick>
 8009ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ed4:	e008      	b.n	8009ee8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed6:	f7fc feeb 	bl	8006cb0 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e05c      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ee8:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0f0      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x416>
 8009ef4:	e054      	b.n	8009fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef6:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <HAL_RCC_OscConfig+0x478>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009efc:	f7fc fed8 	bl	8006cb0 <HAL_GetTick>
 8009f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f02:	e008      	b.n	8009f16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f04:	f7fc fed4 	bl	8006cb0 <HAL_GetTick>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d901      	bls.n	8009f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e045      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f16:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <HAL_RCC_OscConfig+0x470>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1f0      	bne.n	8009f04 <HAL_RCC_OscConfig+0x444>
 8009f22:	e03d      	b.n	8009fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d107      	bne.n	8009f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e038      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
 8009f30:	40023800 	.word	0x40023800
 8009f34:	40007000 	.word	0x40007000
 8009f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009f3c:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <HAL_RCC_OscConfig+0x4ec>)
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d028      	beq.n	8009f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d121      	bne.n	8009f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d11a      	bne.n	8009f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d111      	bne.n	8009f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	3b01      	subs	r3, #1
 8009f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d107      	bne.n	8009f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d001      	beq.n	8009fa0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e000      	b.n	8009fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	40023800 	.word	0x40023800

08009fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e0cc      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fc4:	4b68      	ldr	r3, [pc, #416]	; (800a168 <HAL_RCC_ClockConfig+0x1b8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d90c      	bls.n	8009fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fd2:	4b65      	ldr	r3, [pc, #404]	; (800a168 <HAL_RCC_ClockConfig+0x1b8>)
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fda:	4b63      	ldr	r3, [pc, #396]	; (800a168 <HAL_RCC_ClockConfig+0x1b8>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0307 	and.w	r3, r3, #7
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d001      	beq.n	8009fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e0b8      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0302 	and.w	r3, r3, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d020      	beq.n	800a03a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	2b00      	cmp	r3, #0
 800a002:	d005      	beq.n	800a010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a004:	4b59      	ldr	r3, [pc, #356]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	4a58      	ldr	r2, [pc, #352]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a00a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a00e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d005      	beq.n	800a028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a01c:	4b53      	ldr	r3, [pc, #332]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	4a52      	ldr	r2, [pc, #328]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a028:	4b50      	ldr	r3, [pc, #320]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	494d      	ldr	r1, [pc, #308]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a036:	4313      	orrs	r3, r2
 800a038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d044      	beq.n	800a0d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d107      	bne.n	800a05e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a04e:	4b47      	ldr	r3, [pc, #284]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a056:	2b00      	cmp	r3, #0
 800a058:	d119      	bne.n	800a08e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e07f      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	2b02      	cmp	r3, #2
 800a064:	d003      	beq.n	800a06e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a06a:	2b03      	cmp	r3, #3
 800a06c:	d107      	bne.n	800a07e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a06e:	4b3f      	ldr	r3, [pc, #252]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d109      	bne.n	800a08e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e06f      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a07e:	4b3b      	ldr	r3, [pc, #236]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e067      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a08e:	4b37      	ldr	r3, [pc, #220]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	f023 0203 	bic.w	r2, r3, #3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	4934      	ldr	r1, [pc, #208]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a0a0:	f7fc fe06 	bl	8006cb0 <HAL_GetTick>
 800a0a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0a6:	e00a      	b.n	800a0be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0a8:	f7fc fe02 	bl	8006cb0 <HAL_GetTick>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	1ad3      	subs	r3, r2, r3
 800a0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d901      	bls.n	800a0be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e04f      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0be:	4b2b      	ldr	r3, [pc, #172]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f003 020c 	and.w	r2, r3, #12
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	009b      	lsls	r3, r3, #2
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d1eb      	bne.n	800a0a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a0d0:	4b25      	ldr	r3, [pc, #148]	; (800a168 <HAL_RCC_ClockConfig+0x1b8>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0307 	and.w	r3, r3, #7
 800a0d8:	683a      	ldr	r2, [r7, #0]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d20c      	bcs.n	800a0f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0de:	4b22      	ldr	r3, [pc, #136]	; (800a168 <HAL_RCC_ClockConfig+0x1b8>)
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	b2d2      	uxtb	r2, r2
 800a0e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0e6:	4b20      	ldr	r3, [pc, #128]	; (800a168 <HAL_RCC_ClockConfig+0x1b8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0307 	and.w	r3, r3, #7
 800a0ee:	683a      	ldr	r2, [r7, #0]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d001      	beq.n	800a0f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e032      	b.n	800a15e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d008      	beq.n	800a116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a104:	4b19      	ldr	r3, [pc, #100]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	4916      	ldr	r1, [pc, #88]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a112:	4313      	orrs	r3, r2
 800a114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0308 	and.w	r3, r3, #8
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d009      	beq.n	800a136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a122:	4b12      	ldr	r3, [pc, #72]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	490e      	ldr	r1, [pc, #56]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a132:	4313      	orrs	r3, r2
 800a134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a136:	f000 f821 	bl	800a17c <HAL_RCC_GetSysClockFreq>
 800a13a:	4602      	mov	r2, r0
 800a13c:	4b0b      	ldr	r3, [pc, #44]	; (800a16c <HAL_RCC_ClockConfig+0x1bc>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	091b      	lsrs	r3, r3, #4
 800a142:	f003 030f 	and.w	r3, r3, #15
 800a146:	490a      	ldr	r1, [pc, #40]	; (800a170 <HAL_RCC_ClockConfig+0x1c0>)
 800a148:	5ccb      	ldrb	r3, [r1, r3]
 800a14a:	fa22 f303 	lsr.w	r3, r2, r3
 800a14e:	4a09      	ldr	r2, [pc, #36]	; (800a174 <HAL_RCC_ClockConfig+0x1c4>)
 800a150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a152:	4b09      	ldr	r3, [pc, #36]	; (800a178 <HAL_RCC_ClockConfig+0x1c8>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4618      	mov	r0, r3
 800a158:	f7fc fd66 	bl	8006c28 <HAL_InitTick>

  return HAL_OK;
 800a15c:	2300      	movs	r3, #0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	40023c00 	.word	0x40023c00
 800a16c:	40023800 	.word	0x40023800
 800a170:	0800ea54 	.word	0x0800ea54
 800a174:	20008ef0 	.word	0x20008ef0
 800a178:	20008ef4 	.word	0x20008ef4

0800a17c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a17c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a180:	b090      	sub	sp, #64	; 0x40
 800a182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	637b      	str	r3, [r7, #52]	; 0x34
 800a188:	2300      	movs	r3, #0
 800a18a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a18c:	2300      	movs	r3, #0
 800a18e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a194:	4b59      	ldr	r3, [pc, #356]	; (800a2fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f003 030c 	and.w	r3, r3, #12
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d00d      	beq.n	800a1bc <HAL_RCC_GetSysClockFreq+0x40>
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	f200 80a1 	bhi.w	800a2e8 <HAL_RCC_GetSysClockFreq+0x16c>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <HAL_RCC_GetSysClockFreq+0x34>
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d003      	beq.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a1ae:	e09b      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a1b0:	4b53      	ldr	r3, [pc, #332]	; (800a300 <HAL_RCC_GetSysClockFreq+0x184>)
 800a1b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a1b4:	e09b      	b.n	800a2ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a1b6:	4b53      	ldr	r3, [pc, #332]	; (800a304 <HAL_RCC_GetSysClockFreq+0x188>)
 800a1b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a1ba:	e098      	b.n	800a2ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a1bc:	4b4f      	ldr	r3, [pc, #316]	; (800a2fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a1c6:	4b4d      	ldr	r3, [pc, #308]	; (800a2fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d028      	beq.n	800a224 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a1d2:	4b4a      	ldr	r3, [pc, #296]	; (800a2fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	099b      	lsrs	r3, r3, #6
 800a1d8:	2200      	movs	r2, #0
 800a1da:	623b      	str	r3, [r7, #32]
 800a1dc:	627a      	str	r2, [r7, #36]	; 0x24
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4b47      	ldr	r3, [pc, #284]	; (800a304 <HAL_RCC_GetSysClockFreq+0x188>)
 800a1e8:	fb03 f201 	mul.w	r2, r3, r1
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	fb00 f303 	mul.w	r3, r0, r3
 800a1f2:	4413      	add	r3, r2
 800a1f4:	4a43      	ldr	r2, [pc, #268]	; (800a304 <HAL_RCC_GetSysClockFreq+0x188>)
 800a1f6:	fba0 1202 	umull	r1, r2, r0, r2
 800a1fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1fc:	460a      	mov	r2, r1
 800a1fe:	62ba      	str	r2, [r7, #40]	; 0x28
 800a200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a202:	4413      	add	r3, r2
 800a204:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a208:	2200      	movs	r2, #0
 800a20a:	61bb      	str	r3, [r7, #24]
 800a20c:	61fa      	str	r2, [r7, #28]
 800a20e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a216:	f7f6 fb3d 	bl	8000894 <__aeabi_uldivmod>
 800a21a:	4602      	mov	r2, r0
 800a21c:	460b      	mov	r3, r1
 800a21e:	4613      	mov	r3, r2
 800a220:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a222:	e053      	b.n	800a2cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a224:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	099b      	lsrs	r3, r3, #6
 800a22a:	2200      	movs	r2, #0
 800a22c:	613b      	str	r3, [r7, #16]
 800a22e:	617a      	str	r2, [r7, #20]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a236:	f04f 0b00 	mov.w	fp, #0
 800a23a:	4652      	mov	r2, sl
 800a23c:	465b      	mov	r3, fp
 800a23e:	f04f 0000 	mov.w	r0, #0
 800a242:	f04f 0100 	mov.w	r1, #0
 800a246:	0159      	lsls	r1, r3, #5
 800a248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a24c:	0150      	lsls	r0, r2, #5
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	ebb2 080a 	subs.w	r8, r2, sl
 800a256:	eb63 090b 	sbc.w	r9, r3, fp
 800a25a:	f04f 0200 	mov.w	r2, #0
 800a25e:	f04f 0300 	mov.w	r3, #0
 800a262:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a266:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a26a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a26e:	ebb2 0408 	subs.w	r4, r2, r8
 800a272:	eb63 0509 	sbc.w	r5, r3, r9
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	00eb      	lsls	r3, r5, #3
 800a280:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a284:	00e2      	lsls	r2, r4, #3
 800a286:	4614      	mov	r4, r2
 800a288:	461d      	mov	r5, r3
 800a28a:	eb14 030a 	adds.w	r3, r4, sl
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	eb45 030b 	adc.w	r3, r5, fp
 800a294:	607b      	str	r3, [r7, #4]
 800a296:	f04f 0200 	mov.w	r2, #0
 800a29a:	f04f 0300 	mov.w	r3, #0
 800a29e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	028b      	lsls	r3, r1, #10
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	028a      	lsls	r2, r1, #10
 800a2b0:	4610      	mov	r0, r2
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
 800a2ba:	60fa      	str	r2, [r7, #12]
 800a2bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2c0:	f7f6 fae8 	bl	8000894 <__aeabi_uldivmod>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2cc:	4b0b      	ldr	r3, [pc, #44]	; (800a2fc <HAL_RCC_GetSysClockFreq+0x180>)
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	0c1b      	lsrs	r3, r3, #16
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	005b      	lsls	r3, r3, #1
 800a2da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a2dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a2e6:	e002      	b.n	800a2ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2e8:	4b05      	ldr	r3, [pc, #20]	; (800a300 <HAL_RCC_GetSysClockFreq+0x184>)
 800a2ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a2ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3740      	adds	r7, #64	; 0x40
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2fa:	bf00      	nop
 800a2fc:	40023800 	.word	0x40023800
 800a300:	00f42400 	.word	0x00f42400
 800a304:	017d7840 	.word	0x017d7840

0800a308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a30c:	4b03      	ldr	r3, [pc, #12]	; (800a31c <HAL_RCC_GetHCLKFreq+0x14>)
 800a30e:	681b      	ldr	r3, [r3, #0]
}
 800a310:	4618      	mov	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20008ef0 	.word	0x20008ef0

0800a320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a324:	f7ff fff0 	bl	800a308 <HAL_RCC_GetHCLKFreq>
 800a328:	4602      	mov	r2, r0
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	0a9b      	lsrs	r3, r3, #10
 800a330:	f003 0307 	and.w	r3, r3, #7
 800a334:	4903      	ldr	r1, [pc, #12]	; (800a344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a336:	5ccb      	ldrb	r3, [r1, r3]
 800a338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	40023800 	.word	0x40023800
 800a344:	0800ea64 	.word	0x0800ea64

0800a348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a34c:	f7ff ffdc 	bl	800a308 <HAL_RCC_GetHCLKFreq>
 800a350:	4602      	mov	r2, r0
 800a352:	4b05      	ldr	r3, [pc, #20]	; (800a368 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	0b5b      	lsrs	r3, r3, #13
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	4903      	ldr	r1, [pc, #12]	; (800a36c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a35e:	5ccb      	ldrb	r3, [r1, r3]
 800a360:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a364:	4618      	mov	r0, r3
 800a366:	bd80      	pop	{r7, pc}
 800a368:	40023800 	.word	0x40023800
 800a36c:	0800ea64 	.word	0x0800ea64

0800a370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e07b      	b.n	800a47a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d108      	bne.n	800a39c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a392:	d009      	beq.n	800a3a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	61da      	str	r2, [r3, #28]
 800a39a:	e005      	b.n	800a3a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d106      	bne.n	800a3c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7fc f900 	bl	80065c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	f003 0302 	and.w	r3, r3, #2
 800a404:	431a      	orrs	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	431a      	orrs	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a418:	431a      	orrs	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a422:	431a      	orrs	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a1b      	ldr	r3, [r3, #32]
 800a428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42c:	ea42 0103 	orr.w	r1, r2, r3
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a434:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	430a      	orrs	r2, r1
 800a43e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	0c1b      	lsrs	r3, r3, #16
 800a446:	f003 0104 	and.w	r1, r3, #4
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44e:	f003 0210 	and.w	r2, r3, #16
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69da      	ldr	r2, [r3, #28]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3708      	adds	r7, #8
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b088      	sub	sp, #32
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	603b      	str	r3, [r7, #0]
 800a48e:	4613      	mov	r3, r2
 800a490:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_SPI_Transmit+0x22>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e126      	b.n	800a6f2 <HAL_SPI_Transmit+0x270>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a4ac:	f7fc fc00 	bl	8006cb0 <HAL_GetTick>
 800a4b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d002      	beq.n	800a4c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a4c6:	e10b      	b.n	800a6e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_SPI_Transmit+0x52>
 800a4ce:	88fb      	ldrh	r3, [r7, #6]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a4d8:	e102      	b.n	800a6e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2203      	movs	r2, #3
 800a4de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	88fa      	ldrh	r2, [r7, #6]
 800a4f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	88fa      	ldrh	r2, [r7, #6]
 800a4f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a520:	d10f      	bne.n	800a542 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a540:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b40      	cmp	r3, #64	; 0x40
 800a54e:	d007      	beq.n	800a560 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a55e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a568:	d14b      	bne.n	800a602 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <HAL_SPI_Transmit+0xf6>
 800a572:	8afb      	ldrh	r3, [r7, #22]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d13e      	bne.n	800a5f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a57c:	881a      	ldrh	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a588:	1c9a      	adds	r2, r3, #2
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a592:	b29b      	uxth	r3, r3
 800a594:	3b01      	subs	r3, #1
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a59c:	e02b      	b.n	800a5f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f003 0302 	and.w	r3, r3, #2
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d112      	bne.n	800a5d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b0:	881a      	ldrh	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5bc:	1c9a      	adds	r2, r3, #2
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	86da      	strh	r2, [r3, #54]	; 0x36
 800a5d0:	e011      	b.n	800a5f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5d2:	f7fc fb6d 	bl	8006cb0 <HAL_GetTick>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d803      	bhi.n	800a5ea <HAL_SPI_Transmit+0x168>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e8:	d102      	bne.n	800a5f0 <HAL_SPI_Transmit+0x16e>
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a5f4:	e074      	b.n	800a6e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d1ce      	bne.n	800a59e <HAL_SPI_Transmit+0x11c>
 800a600:	e04c      	b.n	800a69c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <HAL_SPI_Transmit+0x18e>
 800a60a:	8afb      	ldrh	r3, [r7, #22]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d140      	bne.n	800a692 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	330c      	adds	r3, #12
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a622:	1c5a      	adds	r2, r3, #1
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	b29a      	uxth	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a636:	e02c      	b.n	800a692 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f003 0302 	and.w	r3, r3, #2
 800a642:	2b02      	cmp	r3, #2
 800a644:	d113      	bne.n	800a66e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	330c      	adds	r3, #12
 800a650:	7812      	ldrb	r2, [r2, #0]
 800a652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a658:	1c5a      	adds	r2, r3, #1
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a662:	b29b      	uxth	r3, r3
 800a664:	3b01      	subs	r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	86da      	strh	r2, [r3, #54]	; 0x36
 800a66c:	e011      	b.n	800a692 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a66e:	f7fc fb1f 	bl	8006cb0 <HAL_GetTick>
 800a672:	4602      	mov	r2, r0
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d803      	bhi.n	800a686 <HAL_SPI_Transmit+0x204>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a684:	d102      	bne.n	800a68c <HAL_SPI_Transmit+0x20a>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d102      	bne.n	800a692 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a690:	e026      	b.n	800a6e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a696:	b29b      	uxth	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1cd      	bne.n	800a638 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fdcb 	bl	800b23c <SPI_EndRxTxTransaction>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10a      	bne.n	800a6d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	613b      	str	r3, [r7, #16]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	613b      	str	r3, [r7, #16]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	613b      	str	r3, [r7, #16]
 800a6ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	77fb      	strb	r3, [r7, #31]
 800a6dc:	e000      	b.n	800a6e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a6de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a6f0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3720      	adds	r7, #32
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b08c      	sub	sp, #48	; 0x30
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	60f8      	str	r0, [r7, #12]
 800a702:	60b9      	str	r1, [r7, #8]
 800a704:	607a      	str	r2, [r7, #4]
 800a706:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a708:	2301      	movs	r3, #1
 800a70a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_SPI_TransmitReceive+0x26>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e18a      	b.n	800aa36 <HAL_SPI_TransmitReceive+0x33c>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a728:	f7fc fac2 	bl	8006cb0 <HAL_GetTick>
 800a72c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a73e:	887b      	ldrh	r3, [r7, #2]
 800a740:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a746:	2b01      	cmp	r3, #1
 800a748:	d00f      	beq.n	800a76a <HAL_SPI_TransmitReceive+0x70>
 800a74a:	69fb      	ldr	r3, [r7, #28]
 800a74c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a750:	d107      	bne.n	800a762 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d103      	bne.n	800a762 <HAL_SPI_TransmitReceive+0x68>
 800a75a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d003      	beq.n	800a76a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a762:	2302      	movs	r3, #2
 800a764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a768:	e15b      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d005      	beq.n	800a77c <HAL_SPI_TransmitReceive+0x82>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d002      	beq.n	800a77c <HAL_SPI_TransmitReceive+0x82>
 800a776:	887b      	ldrh	r3, [r7, #2]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a782:	e14e      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b04      	cmp	r3, #4
 800a78e:	d003      	beq.n	800a798 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2205      	movs	r2, #5
 800a794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	887a      	ldrh	r2, [r7, #2]
 800a7a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	887a      	ldrh	r2, [r7, #2]
 800a7ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	887a      	ldrh	r2, [r7, #2]
 800a7ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	887a      	ldrh	r2, [r7, #2]
 800a7c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d8:	2b40      	cmp	r3, #64	; 0x40
 800a7da:	d007      	beq.n	800a7ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f4:	d178      	bne.n	800a8e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <HAL_SPI_TransmitReceive+0x10a>
 800a7fe:	8b7b      	ldrh	r3, [r7, #26]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d166      	bne.n	800a8d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a808:	881a      	ldrh	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a814:	1c9a      	adds	r2, r3, #2
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a81e:	b29b      	uxth	r3, r3
 800a820:	3b01      	subs	r3, #1
 800a822:	b29a      	uxth	r2, r3
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a828:	e053      	b.n	800a8d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	2b02      	cmp	r3, #2
 800a836:	d11b      	bne.n	800a870 <HAL_SPI_TransmitReceive+0x176>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d016      	beq.n	800a870 <HAL_SPI_TransmitReceive+0x176>
 800a842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a844:	2b01      	cmp	r3, #1
 800a846:	d113      	bne.n	800a870 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84c:	881a      	ldrh	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a858:	1c9a      	adds	r2, r3, #2
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a862:	b29b      	uxth	r3, r3
 800a864:	3b01      	subs	r3, #1
 800a866:	b29a      	uxth	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a86c:	2300      	movs	r3, #0
 800a86e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d119      	bne.n	800a8b2 <HAL_SPI_TransmitReceive+0x1b8>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a882:	b29b      	uxth	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	d014      	beq.n	800a8b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	b292      	uxth	r2, r2
 800a894:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89a:	1c9a      	adds	r2, r3, #2
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a8b2:	f7fc f9fd 	bl	8006cb0 <HAL_GetTick>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	1ad3      	subs	r3, r2, r3
 800a8bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d807      	bhi.n	800a8d2 <HAL_SPI_TransmitReceive+0x1d8>
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c8:	d003      	beq.n	800a8d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a8ca:	2303      	movs	r3, #3
 800a8cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a8d0:	e0a7      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1a6      	bne.n	800a82a <HAL_SPI_TransmitReceive+0x130>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1a1      	bne.n	800a82a <HAL_SPI_TransmitReceive+0x130>
 800a8e6:	e07c      	b.n	800a9e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <HAL_SPI_TransmitReceive+0x1fc>
 800a8f0:	8b7b      	ldrh	r3, [r7, #26]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d16b      	bne.n	800a9ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	330c      	adds	r3, #12
 800a900:	7812      	ldrb	r2, [r2, #0]
 800a902:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a912:	b29b      	uxth	r3, r3
 800a914:	3b01      	subs	r3, #1
 800a916:	b29a      	uxth	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a91c:	e057      	b.n	800a9ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d11c      	bne.n	800a966 <HAL_SPI_TransmitReceive+0x26c>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a930:	b29b      	uxth	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d017      	beq.n	800a966 <HAL_SPI_TransmitReceive+0x26c>
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d114      	bne.n	800a966 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	330c      	adds	r3, #12
 800a946:	7812      	ldrb	r2, [r2, #0]
 800a948:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a958:	b29b      	uxth	r3, r3
 800a95a:	3b01      	subs	r3, #1
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	2b01      	cmp	r3, #1
 800a972:	d119      	bne.n	800a9a8 <HAL_SPI_TransmitReceive+0x2ae>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a978:	b29b      	uxth	r3, r3
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d014      	beq.n	800a9a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68da      	ldr	r2, [r3, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	b2d2      	uxtb	r2, r2
 800a98a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a990:	1c5a      	adds	r2, r3, #1
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	3b01      	subs	r3, #1
 800a99e:	b29a      	uxth	r2, r3
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a9a8:	f7fc f982 	bl	8006cb0 <HAL_GetTick>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b0:	1ad3      	subs	r3, r2, r3
 800a9b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d803      	bhi.n	800a9c0 <HAL_SPI_TransmitReceive+0x2c6>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9be:	d102      	bne.n	800a9c6 <HAL_SPI_TransmitReceive+0x2cc>
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d103      	bne.n	800a9ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a9cc:	e029      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1a2      	bne.n	800a91e <HAL_SPI_TransmitReceive+0x224>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d19d      	bne.n	800a91e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 fc28 	bl	800b23c <SPI_EndRxTxTransaction>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d006      	beq.n	800aa00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a9fe:	e010      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10b      	bne.n	800aa20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	617b      	str	r3, [r7, #20]
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	e000      	b.n	800aa22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aa20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3730      	adds	r7, #48	; 0x30
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
	...

0800aa40 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d101      	bne.n	800aa60 <HAL_SPI_Transmit_DMA+0x20>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e09b      	b.n	800ab98 <HAL_SPI_Transmit_DMA+0x158>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d002      	beq.n	800aa7a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800aa74:	2302      	movs	r3, #2
 800aa76:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa78:	e089      	b.n	800ab8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <HAL_SPI_Transmit_DMA+0x46>
 800aa80:	88fb      	ldrh	r3, [r7, #6]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d102      	bne.n	800aa8c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aa8a:	e080      	b.n	800ab8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2203      	movs	r2, #3
 800aa90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	88fa      	ldrh	r2, [r7, #6]
 800aaa4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	88fa      	ldrh	r2, [r7, #6]
 800aaaa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2200      	movs	r2, #0
 800aab0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2200      	movs	r2, #0
 800aabc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2200      	movs	r2, #0
 800aac8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aad2:	d10f      	bne.n	800aaf4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aaf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aaf8:	4a29      	ldr	r2, [pc, #164]	; (800aba0 <HAL_SPI_Transmit_DMA+0x160>)
 800aafa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab00:	4a28      	ldr	r2, [pc, #160]	; (800aba4 <HAL_SPI_Transmit_DMA+0x164>)
 800ab02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab08:	4a27      	ldr	r2, [pc, #156]	; (800aba8 <HAL_SPI_Transmit_DMA+0x168>)
 800ab0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab10:	2200      	movs	r2, #0
 800ab12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	330c      	adds	r3, #12
 800ab24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ab2c:	f7fd fb20 	bl	8008170 <HAL_DMA_Start_IT>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00c      	beq.n	800ab50 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab3a:	f043 0210 	orr.w	r2, r3, #16
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ab4e:	e01e      	b.n	800ab8e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab5a:	2b40      	cmp	r3, #64	; 0x40
 800ab5c:	d007      	beq.n	800ab6e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab6c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0220 	orr.w	r2, r2, #32
 800ab7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f042 0202 	orr.w	r2, r2, #2
 800ab8c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	0800afcd 	.word	0x0800afcd
 800aba4:	0800aded 	.word	0x0800aded
 800aba8:	0800b021 	.word	0x0800b021

0800abac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800abba:	2300      	movs	r3, #0
 800abbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d101      	bne.n	800abcc <HAL_SPI_TransmitReceive_DMA+0x20>
 800abc8:	2302      	movs	r3, #2
 800abca:	e0e3      	b.n	800ad94 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abda:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800abe2:	7dbb      	ldrb	r3, [r7, #22]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d00d      	beq.n	800ac04 <HAL_SPI_TransmitReceive_DMA+0x58>
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abee:	d106      	bne.n	800abfe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <HAL_SPI_TransmitReceive_DMA+0x52>
 800abf8:	7dbb      	ldrb	r3, [r7, #22]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d002      	beq.n	800ac04 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800abfe:	2302      	movs	r3, #2
 800ac00:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac02:	e0c2      	b.n	800ad8a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d005      	beq.n	800ac16 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ac10:	887b      	ldrh	r3, [r7, #2]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d102      	bne.n	800ac1c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ac1a:	e0b6      	b.n	800ad8a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d003      	beq.n	800ac30 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2205      	movs	r2, #5
 800ac2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	68ba      	ldr	r2, [r7, #8]
 800ac3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	887a      	ldrh	r2, [r7, #2]
 800ac40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	887a      	ldrh	r2, [r7, #2]
 800ac46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	887a      	ldrh	r2, [r7, #2]
 800ac52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	887a      	ldrh	r2, [r7, #2]
 800ac58:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d108      	bne.n	800ac84 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac76:	4a49      	ldr	r2, [pc, #292]	; (800ad9c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800ac78:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7e:	4a48      	ldr	r2, [pc, #288]	; (800ada0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800ac80:	63da      	str	r2, [r3, #60]	; 0x3c
 800ac82:	e007      	b.n	800ac94 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac88:	4a46      	ldr	r2, [pc, #280]	; (800ada4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800ac8a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac90:	4a45      	ldr	r2, [pc, #276]	; (800ada8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800ac92:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac98:	4a44      	ldr	r2, [pc, #272]	; (800adac <HAL_SPI_TransmitReceive_DMA+0x200>)
 800ac9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aca0:	2200      	movs	r2, #0
 800aca2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	330c      	adds	r3, #12
 800acae:	4619      	mov	r1, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800acbc:	f7fd fa58 	bl	8008170 <HAL_DMA_Start_IT>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00c      	beq.n	800ace0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acca:	f043 0210 	orr.w	r2, r3, #16
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2201      	movs	r2, #1
 800acda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800acde:	e054      	b.n	800ad8a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	685a      	ldr	r2, [r3, #4]
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f042 0201 	orr.w	r2, r2, #1
 800acee:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf4:	2200      	movs	r2, #0
 800acf6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acfc:	2200      	movs	r2, #0
 800acfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad04:	2200      	movs	r2, #0
 800ad06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad18:	4619      	mov	r1, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	330c      	adds	r3, #12
 800ad20:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad26:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad28:	f7fd fa22 	bl	8008170 <HAL_DMA_Start_IT>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00c      	beq.n	800ad4c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad36:	f043 0210 	orr.w	r2, r3, #16
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ad4a:	e01e      	b.n	800ad8a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad56:	2b40      	cmp	r3, #64	; 0x40
 800ad58:	d007      	beq.n	800ad6a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad68:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f042 0220 	orr.w	r2, r2, #32
 800ad78:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	685a      	ldr	r2, [r3, #4]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f042 0202 	orr.w	r2, r2, #2
 800ad88:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	0800afe9 	.word	0x0800afe9
 800ada0:	0800ae95 	.word	0x0800ae95
 800ada4:	0800b005 	.word	0x0800b005
 800ada8:	0800af3d 	.word	0x0800af3d
 800adac:	0800b021 	.word	0x0800b021

0800adb0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800adfa:	f7fb ff59 	bl	8006cb0 <HAL_GetTick>
 800adfe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae0e:	d03b      	beq.n	800ae88 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f022 0220 	bic.w	r2, r2, #32
 800ae1e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685a      	ldr	r2, [r3, #4]
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f022 0202 	bic.w	r2, r2, #2
 800ae2e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	2164      	movs	r1, #100	; 0x64
 800ae34:	6978      	ldr	r0, [r7, #20]
 800ae36:	f000 fa01 	bl	800b23c <SPI_EndRxTxTransaction>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae44:	f043 0220 	orr.w	r2, r3, #32
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae54:	2300      	movs	r3, #0
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	60fb      	str	r3, [r7, #12]
 800ae68:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d003      	beq.n	800ae88 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae80:	6978      	ldr	r0, [r7, #20]
 800ae82:	f7fb fa2d 	bl	80062e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae86:	e002      	b.n	800ae8e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ae88:	6978      	ldr	r0, [r7, #20]
 800ae8a:	f7fb fa43 	bl	8006314 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aea2:	f7fb ff05 	bl	8006cb0 <HAL_GetTick>
 800aea6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeb6:	d03b      	beq.n	800af30 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 0220 	bic.w	r2, r2, #32
 800aec6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10d      	bne.n	800aeec <SPI_DMAReceiveCplt+0x58>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aed8:	d108      	bne.n	800aeec <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f022 0203 	bic.w	r2, r2, #3
 800aee8:	605a      	str	r2, [r3, #4]
 800aeea:	e007      	b.n	800aefc <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0201 	bic.w	r2, r2, #1
 800aefa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	2164      	movs	r1, #100	; 0x64
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f935 	bl	800b170 <SPI_EndRxTransaction>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2220      	movs	r2, #32
 800af10:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af24:	2b00      	cmp	r3, #0
 800af26:	d003      	beq.n	800af30 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f7fb f9d9 	bl	80062e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800af2e:	e002      	b.n	800af36 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff ff3d 	bl	800adb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af48:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af4a:	f7fb feb1 	bl	8006cb0 <HAL_GetTick>
 800af4e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af5e:	d02f      	beq.n	800afc0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 0220 	bic.w	r2, r2, #32
 800af6e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	2164      	movs	r1, #100	; 0x64
 800af74:	68f8      	ldr	r0, [r7, #12]
 800af76:	f000 f961 	bl	800b23c <SPI_EndRxTxTransaction>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d005      	beq.n	800af8c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af84:	f043 0220 	orr.w	r2, r3, #32
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f022 0203 	bic.w	r2, r2, #3
 800af9a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2200      	movs	r2, #0
 800afa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d003      	beq.n	800afc0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7fb f991 	bl	80062e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800afbe:	e002      	b.n	800afc6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7fb f971 	bl	80062a8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800afda:	68f8      	ldr	r0, [r7, #12]
 800afdc:	f7ff fef2 	bl	800adc4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afe0:	bf00      	nop
 800afe2:	3710      	adds	r7, #16
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7ff feee 	bl	800add8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800affc:	bf00      	nop
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b010:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7fb f918 	bl	8006248 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0203 	bic.w	r2, r2, #3
 800b03c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b042:	f043 0210 	orr.w	r2, r3, #16
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7fb f944 	bl	80062e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b058:	bf00      	nop
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	603b      	str	r3, [r7, #0]
 800b06c:	4613      	mov	r3, r2
 800b06e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b070:	f7fb fe1e 	bl	8006cb0 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	4413      	add	r3, r2
 800b07e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b080:	f7fb fe16 	bl	8006cb0 <HAL_GetTick>
 800b084:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b086:	4b39      	ldr	r3, [pc, #228]	; (800b16c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	015b      	lsls	r3, r3, #5
 800b08c:	0d1b      	lsrs	r3, r3, #20
 800b08e:	69fa      	ldr	r2, [r7, #28]
 800b090:	fb02 f303 	mul.w	r3, r2, r3
 800b094:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b096:	e054      	b.n	800b142 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d050      	beq.n	800b142 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b0a0:	f7fb fe06 	bl	8006cb0 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	69fa      	ldr	r2, [r7, #28]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d902      	bls.n	800b0b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d13d      	bne.n	800b132 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b0c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0ce:	d111      	bne.n	800b0f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0d8:	d004      	beq.n	800b0e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0e2:	d107      	bne.n	800b0f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0fc:	d10f      	bne.n	800b11e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b11c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e017      	b.n	800b162 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b138:	2300      	movs	r3, #0
 800b13a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	3b01      	subs	r3, #1
 800b140:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689a      	ldr	r2, [r3, #8]
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	4013      	ands	r3, r2
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	429a      	cmp	r2, r3
 800b150:	bf0c      	ite	eq
 800b152:	2301      	moveq	r3, #1
 800b154:	2300      	movne	r3, #0
 800b156:	b2db      	uxtb	r3, r3
 800b158:	461a      	mov	r2, r3
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d19b      	bne.n	800b098 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3720      	adds	r7, #32
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20008ef0 	.word	0x20008ef0

0800b170 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af02      	add	r7, sp, #8
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b184:	d111      	bne.n	800b1aa <SPI_EndRxTransaction+0x3a>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b18e:	d004      	beq.n	800b19a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b198:	d107      	bne.n	800b1aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1b2:	d12a      	bne.n	800b20a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1bc:	d012      	beq.n	800b1e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2180      	movs	r1, #128	; 0x80
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f7ff ff49 	bl	800b060 <SPI_WaitFlagStateUntilTimeout>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d02d      	beq.n	800b230 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d8:	f043 0220 	orr.w	r2, r3, #32
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e026      	b.n	800b232 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff ff36 	bl	800b060 <SPI_WaitFlagStateUntilTimeout>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d01a      	beq.n	800b230 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fe:	f043 0220 	orr.w	r2, r3, #32
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e013      	b.n	800b232 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2200      	movs	r2, #0
 800b212:	2101      	movs	r1, #1
 800b214:	68f8      	ldr	r0, [r7, #12]
 800b216:	f7ff ff23 	bl	800b060 <SPI_WaitFlagStateUntilTimeout>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b224:	f043 0220 	orr.w	r2, r3, #32
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e000      	b.n	800b232 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af02      	add	r7, sp, #8
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b248:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <SPI_EndRxTxTransaction+0x7c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1b      	ldr	r2, [pc, #108]	; (800b2bc <SPI_EndRxTxTransaction+0x80>)
 800b24e:	fba2 2303 	umull	r2, r3, r2, r3
 800b252:	0d5b      	lsrs	r3, r3, #21
 800b254:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b258:	fb02 f303 	mul.w	r3, r2, r3
 800b25c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b266:	d112      	bne.n	800b28e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	2200      	movs	r2, #0
 800b270:	2180      	movs	r1, #128	; 0x80
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fef4 	bl	800b060 <SPI_WaitFlagStateUntilTimeout>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d016      	beq.n	800b2ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b282:	f043 0220 	orr.w	r2, r3, #32
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e00f      	b.n	800b2ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d00a      	beq.n	800b2aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	3b01      	subs	r3, #1
 800b298:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2a4:	2b80      	cmp	r3, #128	; 0x80
 800b2a6:	d0f2      	beq.n	800b28e <SPI_EndRxTxTransaction+0x52>
 800b2a8:	e000      	b.n	800b2ac <SPI_EndRxTxTransaction+0x70>
        break;
 800b2aa:	bf00      	nop
  }

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3718      	adds	r7, #24
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20008ef0 	.word	0x20008ef0
 800b2bc:	165e9f81 	.word	0x165e9f81

0800b2c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e041      	b.n	800b356 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7fb fafe 	bl	80068e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4610      	mov	r0, r2
 800b300:	f000 fe38 	bl	800bf74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3708      	adds	r7, #8
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
	...

0800b360 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b01      	cmp	r3, #1
 800b372:	d001      	beq.n	800b378 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e03c      	b.n	800b3f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <HAL_TIM_Base_Start+0xa0>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d018      	beq.n	800b3bc <HAL_TIM_Base_Start+0x5c>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b392:	d013      	beq.n	800b3bc <HAL_TIM_Base_Start+0x5c>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a1a      	ldr	r2, [pc, #104]	; (800b404 <HAL_TIM_Base_Start+0xa4>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d00e      	beq.n	800b3bc <HAL_TIM_Base_Start+0x5c>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a19      	ldr	r2, [pc, #100]	; (800b408 <HAL_TIM_Base_Start+0xa8>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d009      	beq.n	800b3bc <HAL_TIM_Base_Start+0x5c>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a17      	ldr	r2, [pc, #92]	; (800b40c <HAL_TIM_Base_Start+0xac>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d004      	beq.n	800b3bc <HAL_TIM_Base_Start+0x5c>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a16      	ldr	r2, [pc, #88]	; (800b410 <HAL_TIM_Base_Start+0xb0>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d111      	bne.n	800b3e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b06      	cmp	r3, #6
 800b3cc:	d010      	beq.n	800b3f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 0201 	orr.w	r2, r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3de:	e007      	b.n	800b3f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f042 0201 	orr.w	r2, r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	40010000 	.word	0x40010000
 800b404:	40000400 	.word	0x40000400
 800b408:	40000800 	.word	0x40000800
 800b40c:	40000c00 	.word	0x40000c00
 800b410:	40014000 	.word	0x40014000

0800b414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b01      	cmp	r3, #1
 800b426:	d001      	beq.n	800b42c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e044      	b.n	800b4b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2202      	movs	r2, #2
 800b430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f042 0201 	orr.w	r2, r2, #1
 800b442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a1e      	ldr	r2, [pc, #120]	; (800b4c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d018      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x6c>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b456:	d013      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x6c>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a1a      	ldr	r2, [pc, #104]	; (800b4c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00e      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x6c>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a19      	ldr	r2, [pc, #100]	; (800b4cc <HAL_TIM_Base_Start_IT+0xb8>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d009      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x6c>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a17      	ldr	r2, [pc, #92]	; (800b4d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d004      	beq.n	800b480 <HAL_TIM_Base_Start_IT+0x6c>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a16      	ldr	r2, [pc, #88]	; (800b4d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d111      	bne.n	800b4a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b06      	cmp	r3, #6
 800b490:	d010      	beq.n	800b4b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f042 0201 	orr.w	r2, r2, #1
 800b4a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4a2:	e007      	b.n	800b4b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f042 0201 	orr.w	r2, r2, #1
 800b4b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	40010000 	.word	0x40010000
 800b4c8:	40000400 	.word	0x40000400
 800b4cc:	40000800 	.word	0x40000800
 800b4d0:	40000c00 	.word	0x40000c00
 800b4d4:	40014000 	.word	0x40014000

0800b4d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68da      	ldr	r2, [r3, #12]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f022 0201 	bic.w	r2, r2, #1
 800b4ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	6a1a      	ldr	r2, [r3, #32]
 800b4f6:	f241 1311 	movw	r3, #4369	; 0x1111
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10f      	bne.n	800b520 <HAL_TIM_Base_Stop_IT+0x48>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6a1a      	ldr	r2, [r3, #32]
 800b506:	f240 4344 	movw	r3, #1092	; 0x444
 800b50a:	4013      	ands	r3, r2
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d107      	bne.n	800b520 <HAL_TIM_Base_Stop_IT+0x48>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f022 0201 	bic.w	r2, r2, #1
 800b51e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	370c      	adds	r7, #12
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr

0800b536 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e041      	b.n	800b5cc <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b00      	cmp	r3, #0
 800b552:	d106      	bne.n	800b562 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f000 f839 	bl	800b5d4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2202      	movs	r2, #2
 800b566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681a      	ldr	r2, [r3, #0]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3304      	adds	r3, #4
 800b572:	4619      	mov	r1, r3
 800b574:	4610      	mov	r0, r2
 800b576:	f000 fcfd 	bl	800bf74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b5dc:	bf00      	nop
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e041      	b.n	800b67e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d106      	bne.n	800b614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f839 	bl	800b686 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f000 fca4 	bl	800bf74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2201      	movs	r2, #1
 800b630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2201      	movs	r2, #1
 800b640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2201      	movs	r2, #1
 800b668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b67c:	2300      	movs	r3, #0
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b686:	b480      	push	{r7}
 800b688:	b083      	sub	sp, #12
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
	...

0800b69c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d109      	bne.n	800b6c0 <HAL_TIM_PWM_Start+0x24>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	e022      	b.n	800b706 <HAL_TIM_PWM_Start+0x6a>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	d109      	bne.n	800b6da <HAL_TIM_PWM_Start+0x3e>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	bf14      	ite	ne
 800b6d2:	2301      	movne	r3, #1
 800b6d4:	2300      	moveq	r3, #0
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	e015      	b.n	800b706 <HAL_TIM_PWM_Start+0x6a>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d109      	bne.n	800b6f4 <HAL_TIM_PWM_Start+0x58>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	bf14      	ite	ne
 800b6ec:	2301      	movne	r3, #1
 800b6ee:	2300      	moveq	r3, #0
 800b6f0:	b2db      	uxtb	r3, r3
 800b6f2:	e008      	b.n	800b706 <HAL_TIM_PWM_Start+0x6a>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	2b00      	cmp	r3, #0
 800b708:	d001      	beq.n	800b70e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e068      	b.n	800b7e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d104      	bne.n	800b71e <HAL_TIM_PWM_Start+0x82>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b71c:	e013      	b.n	800b746 <HAL_TIM_PWM_Start+0xaa>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d104      	bne.n	800b72e <HAL_TIM_PWM_Start+0x92>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b72c:	e00b      	b.n	800b746 <HAL_TIM_PWM_Start+0xaa>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b08      	cmp	r3, #8
 800b732:	d104      	bne.n	800b73e <HAL_TIM_PWM_Start+0xa2>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b73c:	e003      	b.n	800b746 <HAL_TIM_PWM_Start+0xaa>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2202      	movs	r2, #2
 800b742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2201      	movs	r2, #1
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 feb6 	bl	800c4c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a23      	ldr	r2, [pc, #140]	; (800b7e8 <HAL_TIM_PWM_Start+0x14c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d107      	bne.n	800b76e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b76c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a1d      	ldr	r2, [pc, #116]	; (800b7e8 <HAL_TIM_PWM_Start+0x14c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d018      	beq.n	800b7aa <HAL_TIM_PWM_Start+0x10e>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b780:	d013      	beq.n	800b7aa <HAL_TIM_PWM_Start+0x10e>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a19      	ldr	r2, [pc, #100]	; (800b7ec <HAL_TIM_PWM_Start+0x150>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d00e      	beq.n	800b7aa <HAL_TIM_PWM_Start+0x10e>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a17      	ldr	r2, [pc, #92]	; (800b7f0 <HAL_TIM_PWM_Start+0x154>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d009      	beq.n	800b7aa <HAL_TIM_PWM_Start+0x10e>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a16      	ldr	r2, [pc, #88]	; (800b7f4 <HAL_TIM_PWM_Start+0x158>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d004      	beq.n	800b7aa <HAL_TIM_PWM_Start+0x10e>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a14      	ldr	r2, [pc, #80]	; (800b7f8 <HAL_TIM_PWM_Start+0x15c>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d111      	bne.n	800b7ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f003 0307 	and.w	r3, r3, #7
 800b7b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b06      	cmp	r3, #6
 800b7ba:	d010      	beq.n	800b7de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f042 0201 	orr.w	r2, r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7cc:	e007      	b.n	800b7de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f042 0201 	orr.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	40010000 	.word	0x40010000
 800b7ec:	40000400 	.word	0x40000400
 800b7f0:	40000800 	.word	0x40000800
 800b7f4:	40000c00 	.word	0x40000c00
 800b7f8:	40014000 	.word	0x40014000

0800b7fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e097      	b.n	800b940 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b816:	b2db      	uxtb	r3, r3
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7fa ffe3 	bl	80067f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2202      	movs	r2, #2
 800b82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689b      	ldr	r3, [r3, #8]
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	6812      	ldr	r2, [r2, #0]
 800b83c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b840:	f023 0307 	bic.w	r3, r3, #7
 800b844:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4619      	mov	r1, r3
 800b850:	4610      	mov	r0, r2
 800b852:	f000 fb8f 	bl	800bf74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	4313      	orrs	r3, r2
 800b876:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87e:	f023 0303 	bic.w	r3, r3, #3
 800b882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	021b      	lsls	r3, r3, #8
 800b88e:	4313      	orrs	r3, r2
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	4313      	orrs	r3, r2
 800b894:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b89c:	f023 030c 	bic.w	r3, r3, #12
 800b8a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	68da      	ldr	r2, [r3, #12]
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	69db      	ldr	r3, [r3, #28]
 800b8b6:	021b      	lsls	r3, r3, #8
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	011a      	lsls	r2, r3, #4
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	031b      	lsls	r3, r3, #12
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b8da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685a      	ldr	r2, [r3, #4]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	695b      	ldr	r3, [r3, #20]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3718      	adds	r7, #24
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	d122      	bne.n	800b9a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	f003 0302 	and.w	r3, r3, #2
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d11b      	bne.n	800b9a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f06f 0202 	mvn.w	r2, #2
 800b974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	f003 0303 	and.w	r3, r3, #3
 800b986:	2b00      	cmp	r3, #0
 800b988:	d003      	beq.n	800b992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 fad3 	bl	800bf36 <HAL_TIM_IC_CaptureCallback>
 800b990:	e005      	b.n	800b99e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 fac5 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 fad6 	bl	800bf4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	f003 0304 	and.w	r3, r3, #4
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d122      	bne.n	800b9f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	f003 0304 	and.w	r3, r3, #4
 800b9bc:	2b04      	cmp	r3, #4
 800b9be:	d11b      	bne.n	800b9f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f06f 0204 	mvn.w	r2, #4
 800b9c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2202      	movs	r2, #2
 800b9ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 faa9 	bl	800bf36 <HAL_TIM_IC_CaptureCallback>
 800b9e4:	e005      	b.n	800b9f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fa9b 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 faac 	bl	800bf4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	691b      	ldr	r3, [r3, #16]
 800b9fe:	f003 0308 	and.w	r3, r3, #8
 800ba02:	2b08      	cmp	r3, #8
 800ba04:	d122      	bne.n	800ba4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	f003 0308 	and.w	r3, r3, #8
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d11b      	bne.n	800ba4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f06f 0208 	mvn.w	r2, #8
 800ba1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2204      	movs	r2, #4
 800ba22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	69db      	ldr	r3, [r3, #28]
 800ba2a:	f003 0303 	and.w	r3, r3, #3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fa7f 	bl	800bf36 <HAL_TIM_IC_CaptureCallback>
 800ba38:	e005      	b.n	800ba46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa71 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fa82 	bl	800bf4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	f003 0310 	and.w	r3, r3, #16
 800ba56:	2b10      	cmp	r3, #16
 800ba58:	d122      	bne.n	800baa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	f003 0310 	and.w	r3, r3, #16
 800ba64:	2b10      	cmp	r3, #16
 800ba66:	d11b      	bne.n	800baa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f06f 0210 	mvn.w	r2, #16
 800ba70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2208      	movs	r2, #8
 800ba76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 fa55 	bl	800bf36 <HAL_TIM_IC_CaptureCallback>
 800ba8c:	e005      	b.n	800ba9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fa47 	bl	800bf22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fa58 	bl	800bf4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d10e      	bne.n	800bacc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	f003 0301 	and.w	r3, r3, #1
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d107      	bne.n	800bacc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f06f 0201 	mvn.w	r2, #1
 800bac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7f5 fe9a 	bl	8001800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad6:	2b80      	cmp	r3, #128	; 0x80
 800bad8:	d10e      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae4:	2b80      	cmp	r3, #128	; 0x80
 800bae6:	d107      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800baf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fd82 	bl	800c5fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb02:	2b40      	cmp	r3, #64	; 0x40
 800bb04:	d10e      	bne.n	800bb24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb10:	2b40      	cmp	r3, #64	; 0x40
 800bb12:	d107      	bne.n	800bb24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa1d 	bl	800bf5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d10e      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	f003 0320 	and.w	r3, r3, #32
 800bb3c:	2b20      	cmp	r3, #32
 800bb3e:	d107      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f06f 0220 	mvn.w	r2, #32
 800bb48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fd4c 	bl	800c5e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb50:	bf00      	nop
 800bb52:	3708      	adds	r7, #8
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d101      	bne.n	800bb76 <HAL_TIM_OC_ConfigChannel+0x1e>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e048      	b.n	800bc08 <HAL_TIM_OC_ConfigChannel+0xb0>
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b0c      	cmp	r3, #12
 800bb82:	d839      	bhi.n	800bbf8 <HAL_TIM_OC_ConfigChannel+0xa0>
 800bb84:	a201      	add	r2, pc, #4	; (adr r2, 800bb8c <HAL_TIM_OC_ConfigChannel+0x34>)
 800bb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb8a:	bf00      	nop
 800bb8c:	0800bbc1 	.word	0x0800bbc1
 800bb90:	0800bbf9 	.word	0x0800bbf9
 800bb94:	0800bbf9 	.word	0x0800bbf9
 800bb98:	0800bbf9 	.word	0x0800bbf9
 800bb9c:	0800bbcf 	.word	0x0800bbcf
 800bba0:	0800bbf9 	.word	0x0800bbf9
 800bba4:	0800bbf9 	.word	0x0800bbf9
 800bba8:	0800bbf9 	.word	0x0800bbf9
 800bbac:	0800bbdd 	.word	0x0800bbdd
 800bbb0:	0800bbf9 	.word	0x0800bbf9
 800bbb4:	0800bbf9 	.word	0x0800bbf9
 800bbb8:	0800bbf9 	.word	0x0800bbf9
 800bbbc:	0800bbeb 	.word	0x0800bbeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68b9      	ldr	r1, [r7, #8]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 fa54 	bl	800c074 <TIM_OC1_SetConfig>
      break;
 800bbcc:	e017      	b.n	800bbfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fab3 	bl	800c140 <TIM_OC2_SetConfig>
      break;
 800bbda:	e010      	b.n	800bbfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68b9      	ldr	r1, [r7, #8]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fb18 	bl	800c218 <TIM_OC3_SetConfig>
      break;
 800bbe8:	e009      	b.n	800bbfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68b9      	ldr	r1, [r7, #8]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f000 fb7b 	bl	800c2ec <TIM_OC4_SetConfig>
      break;
 800bbf6:	e002      	b.n	800bbfe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	75fb      	strb	r3, [r7, #23]
      break;
 800bbfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b086      	sub	sp, #24
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d101      	bne.n	800bc2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e0ae      	b.n	800bd8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b0c      	cmp	r3, #12
 800bc3a:	f200 809f 	bhi.w	800bd7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bc3e:	a201      	add	r2, pc, #4	; (adr r2, 800bc44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc44:	0800bc79 	.word	0x0800bc79
 800bc48:	0800bd7d 	.word	0x0800bd7d
 800bc4c:	0800bd7d 	.word	0x0800bd7d
 800bc50:	0800bd7d 	.word	0x0800bd7d
 800bc54:	0800bcb9 	.word	0x0800bcb9
 800bc58:	0800bd7d 	.word	0x0800bd7d
 800bc5c:	0800bd7d 	.word	0x0800bd7d
 800bc60:	0800bd7d 	.word	0x0800bd7d
 800bc64:	0800bcfb 	.word	0x0800bcfb
 800bc68:	0800bd7d 	.word	0x0800bd7d
 800bc6c:	0800bd7d 	.word	0x0800bd7d
 800bc70:	0800bd7d 	.word	0x0800bd7d
 800bc74:	0800bd3b 	.word	0x0800bd3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68b9      	ldr	r1, [r7, #8]
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 f9f8 	bl	800c074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	699a      	ldr	r2, [r3, #24]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0208 	orr.w	r2, r2, #8
 800bc92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	699a      	ldr	r2, [r3, #24]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f022 0204 	bic.w	r2, r2, #4
 800bca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6999      	ldr	r1, [r3, #24]
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	691a      	ldr	r2, [r3, #16]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	430a      	orrs	r2, r1
 800bcb4:	619a      	str	r2, [r3, #24]
      break;
 800bcb6:	e064      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68b9      	ldr	r1, [r7, #8]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 fa3e 	bl	800c140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	699a      	ldr	r2, [r3, #24]
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	699a      	ldr	r2, [r3, #24]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6999      	ldr	r1, [r3, #24]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	021a      	lsls	r2, r3, #8
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	430a      	orrs	r2, r1
 800bcf6:	619a      	str	r2, [r3, #24]
      break;
 800bcf8:	e043      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68b9      	ldr	r1, [r7, #8]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 fa89 	bl	800c218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	69da      	ldr	r2, [r3, #28]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f042 0208 	orr.w	r2, r2, #8
 800bd14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	69da      	ldr	r2, [r3, #28]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f022 0204 	bic.w	r2, r2, #4
 800bd24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	69d9      	ldr	r1, [r3, #28]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	691a      	ldr	r2, [r3, #16]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	430a      	orrs	r2, r1
 800bd36:	61da      	str	r2, [r3, #28]
      break;
 800bd38:	e023      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68b9      	ldr	r1, [r7, #8]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fad3 	bl	800c2ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	69da      	ldr	r2, [r3, #28]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	69da      	ldr	r2, [r3, #28]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	69d9      	ldr	r1, [r3, #28]
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	021a      	lsls	r2, r3, #8
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	430a      	orrs	r2, r1
 800bd78:	61da      	str	r2, [r3, #28]
      break;
 800bd7a:	e002      	b.n	800bd82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_TIM_ConfigClockSource+0x1c>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e0b4      	b.n	800bf1a <HAL_TIM_ConfigClockSource+0x186>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	689b      	ldr	r3, [r3, #8]
 800bdc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bdce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68ba      	ldr	r2, [r7, #8]
 800bdde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bde8:	d03e      	beq.n	800be68 <HAL_TIM_ConfigClockSource+0xd4>
 800bdea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdee:	f200 8087 	bhi.w	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800bdf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdf6:	f000 8086 	beq.w	800bf06 <HAL_TIM_ConfigClockSource+0x172>
 800bdfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdfe:	d87f      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be00:	2b70      	cmp	r3, #112	; 0x70
 800be02:	d01a      	beq.n	800be3a <HAL_TIM_ConfigClockSource+0xa6>
 800be04:	2b70      	cmp	r3, #112	; 0x70
 800be06:	d87b      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be08:	2b60      	cmp	r3, #96	; 0x60
 800be0a:	d050      	beq.n	800beae <HAL_TIM_ConfigClockSource+0x11a>
 800be0c:	2b60      	cmp	r3, #96	; 0x60
 800be0e:	d877      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be10:	2b50      	cmp	r3, #80	; 0x50
 800be12:	d03c      	beq.n	800be8e <HAL_TIM_ConfigClockSource+0xfa>
 800be14:	2b50      	cmp	r3, #80	; 0x50
 800be16:	d873      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be18:	2b40      	cmp	r3, #64	; 0x40
 800be1a:	d058      	beq.n	800bece <HAL_TIM_ConfigClockSource+0x13a>
 800be1c:	2b40      	cmp	r3, #64	; 0x40
 800be1e:	d86f      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be20:	2b30      	cmp	r3, #48	; 0x30
 800be22:	d064      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be24:	2b30      	cmp	r3, #48	; 0x30
 800be26:	d86b      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be28:	2b20      	cmp	r3, #32
 800be2a:	d060      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be2c:	2b20      	cmp	r3, #32
 800be2e:	d867      	bhi.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
 800be30:	2b00      	cmp	r3, #0
 800be32:	d05c      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be34:	2b10      	cmp	r3, #16
 800be36:	d05a      	beq.n	800beee <HAL_TIM_ConfigClockSource+0x15a>
 800be38:	e062      	b.n	800bf00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6818      	ldr	r0, [r3, #0]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	6899      	ldr	r1, [r3, #8]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	f000 fb19 	bl	800c480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	609a      	str	r2, [r3, #8]
      break;
 800be66:	e04f      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6818      	ldr	r0, [r3, #0]
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	6899      	ldr	r1, [r3, #8]
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	685a      	ldr	r2, [r3, #4]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f000 fb02 	bl	800c480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	689a      	ldr	r2, [r3, #8]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be8a:	609a      	str	r2, [r3, #8]
      break;
 800be8c:	e03c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6818      	ldr	r0, [r3, #0]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	6859      	ldr	r1, [r3, #4]
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	461a      	mov	r2, r3
 800be9c:	f000 fa76 	bl	800c38c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	2150      	movs	r1, #80	; 0x50
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 facf 	bl	800c44a <TIM_ITRx_SetConfig>
      break;
 800beac:	e02c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	6859      	ldr	r1, [r3, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	68db      	ldr	r3, [r3, #12]
 800beba:	461a      	mov	r2, r3
 800bebc:	f000 fa95 	bl	800c3ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2160      	movs	r1, #96	; 0x60
 800bec6:	4618      	mov	r0, r3
 800bec8:	f000 fabf 	bl	800c44a <TIM_ITRx_SetConfig>
      break;
 800becc:	e01c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	6859      	ldr	r1, [r3, #4]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	461a      	mov	r2, r3
 800bedc:	f000 fa56 	bl	800c38c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2140      	movs	r1, #64	; 0x40
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 faaf 	bl	800c44a <TIM_ITRx_SetConfig>
      break;
 800beec:	e00c      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f000 faa6 	bl	800c44a <TIM_ITRx_SetConfig>
      break;
 800befe:	e003      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	73fb      	strb	r3, [r7, #15]
      break;
 800bf04:	e000      	b.n	800bf08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bf06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf22:	b480      	push	{r7}
 800bf24:	b083      	sub	sp, #12
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf2a:	bf00      	nop
 800bf2c:	370c      	adds	r7, #12
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf36:	b480      	push	{r7}
 800bf38:	b083      	sub	sp, #12
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf3e:	bf00      	nop
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf52:	bf00      	nop
 800bf54:	370c      	adds	r7, #12
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr

0800bf5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf66:	bf00      	nop
 800bf68:	370c      	adds	r7, #12
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
	...

0800bf74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a34      	ldr	r2, [pc, #208]	; (800c058 <TIM_Base_SetConfig+0xe4>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d00f      	beq.n	800bfac <TIM_Base_SetConfig+0x38>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf92:	d00b      	beq.n	800bfac <TIM_Base_SetConfig+0x38>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4a31      	ldr	r2, [pc, #196]	; (800c05c <TIM_Base_SetConfig+0xe8>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d007      	beq.n	800bfac <TIM_Base_SetConfig+0x38>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	4a30      	ldr	r2, [pc, #192]	; (800c060 <TIM_Base_SetConfig+0xec>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d003      	beq.n	800bfac <TIM_Base_SetConfig+0x38>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	4a2f      	ldr	r2, [pc, #188]	; (800c064 <TIM_Base_SetConfig+0xf0>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d108      	bne.n	800bfbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	68fa      	ldr	r2, [r7, #12]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4a25      	ldr	r2, [pc, #148]	; (800c058 <TIM_Base_SetConfig+0xe4>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d01b      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfcc:	d017      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a22      	ldr	r2, [pc, #136]	; (800c05c <TIM_Base_SetConfig+0xe8>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d013      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	4a21      	ldr	r2, [pc, #132]	; (800c060 <TIM_Base_SetConfig+0xec>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d00f      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a20      	ldr	r2, [pc, #128]	; (800c064 <TIM_Base_SetConfig+0xf0>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d00b      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a1f      	ldr	r2, [pc, #124]	; (800c068 <TIM_Base_SetConfig+0xf4>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d007      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a1e      	ldr	r2, [pc, #120]	; (800c06c <TIM_Base_SetConfig+0xf8>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d003      	beq.n	800bffe <TIM_Base_SetConfig+0x8a>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a1d      	ldr	r2, [pc, #116]	; (800c070 <TIM_Base_SetConfig+0xfc>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d108      	bne.n	800c010 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	68fa      	ldr	r2, [r7, #12]
 800c022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	689a      	ldr	r2, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a08      	ldr	r2, [pc, #32]	; (800c058 <TIM_Base_SetConfig+0xe4>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d103      	bne.n	800c044 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	691a      	ldr	r2, [r3, #16]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	615a      	str	r2, [r3, #20]
}
 800c04a:	bf00      	nop
 800c04c:	3714      	adds	r7, #20
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr
 800c056:	bf00      	nop
 800c058:	40010000 	.word	0x40010000
 800c05c:	40000400 	.word	0x40000400
 800c060:	40000800 	.word	0x40000800
 800c064:	40000c00 	.word	0x40000c00
 800c068:	40014000 	.word	0x40014000
 800c06c:	40014400 	.word	0x40014400
 800c070:	40014800 	.word	0x40014800

0800c074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c074:	b480      	push	{r7}
 800c076:	b087      	sub	sp, #28
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	f023 0201 	bic.w	r2, r3, #1
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a1b      	ldr	r3, [r3, #32]
 800c08e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f023 0302 	bic.w	r3, r3, #2
 800c0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a1c      	ldr	r2, [pc, #112]	; (800c13c <TIM_OC1_SetConfig+0xc8>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d10c      	bne.n	800c0ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f023 0308 	bic.w	r3, r3, #8
 800c0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f023 0304 	bic.w	r3, r3, #4
 800c0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a13      	ldr	r2, [pc, #76]	; (800c13c <TIM_OC1_SetConfig+0xc8>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d111      	bne.n	800c116 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	4313      	orrs	r3, r2
 800c10a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	4313      	orrs	r3, r2
 800c114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	685a      	ldr	r2, [r3, #4]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	697a      	ldr	r2, [r7, #20]
 800c12e:	621a      	str	r2, [r3, #32]
}
 800c130:	bf00      	nop
 800c132:	371c      	adds	r7, #28
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	40010000 	.word	0x40010000

0800c140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c140:	b480      	push	{r7}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	f023 0210 	bic.w	r2, r3, #16
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	021b      	lsls	r3, r3, #8
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	4313      	orrs	r3, r2
 800c182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	f023 0320 	bic.w	r3, r3, #32
 800c18a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	011b      	lsls	r3, r3, #4
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	4313      	orrs	r3, r2
 800c196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a1e      	ldr	r2, [pc, #120]	; (800c214 <TIM_OC2_SetConfig+0xd4>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d10d      	bne.n	800c1bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	011b      	lsls	r3, r3, #4
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a15      	ldr	r2, [pc, #84]	; (800c214 <TIM_OC2_SetConfig+0xd4>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d113      	bne.n	800c1ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	685a      	ldr	r2, [r3, #4]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	621a      	str	r2, [r3, #32]
}
 800c206:	bf00      	nop
 800c208:	371c      	adds	r7, #28
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	40010000 	.word	0x40010000

0800c218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c218:	b480      	push	{r7}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6a1b      	ldr	r3, [r3, #32]
 800c226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f023 0303 	bic.w	r3, r3, #3
 800c24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	4313      	orrs	r3, r2
 800c258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	021b      	lsls	r3, r3, #8
 800c268:	697a      	ldr	r2, [r7, #20]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a1d      	ldr	r2, [pc, #116]	; (800c2e8 <TIM_OC3_SetConfig+0xd0>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d10d      	bne.n	800c292 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c27c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	021b      	lsls	r3, r3, #8
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	4313      	orrs	r3, r2
 800c288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a14      	ldr	r2, [pc, #80]	; (800c2e8 <TIM_OC3_SetConfig+0xd0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d113      	bne.n	800c2c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	011b      	lsls	r3, r3, #4
 800c2b0:	693a      	ldr	r2, [r7, #16]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	697a      	ldr	r2, [r7, #20]
 800c2da:	621a      	str	r2, [r3, #32]
}
 800c2dc:	bf00      	nop
 800c2de:	371c      	adds	r7, #28
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	40010000 	.word	0x40010000

0800c2ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	021b      	lsls	r3, r3, #8
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	4313      	orrs	r3, r2
 800c32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	031b      	lsls	r3, r3, #12
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	4313      	orrs	r3, r2
 800c342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a10      	ldr	r2, [pc, #64]	; (800c388 <TIM_OC4_SetConfig+0x9c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d109      	bne.n	800c360 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	695b      	ldr	r3, [r3, #20]
 800c358:	019b      	lsls	r3, r3, #6
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	621a      	str	r2, [r3, #32]
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	40010000 	.word	0x40010000

0800c38c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6a1b      	ldr	r3, [r3, #32]
 800c39c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	f023 0201 	bic.w	r2, r3, #1
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	011b      	lsls	r3, r3, #4
 800c3bc:	693a      	ldr	r2, [r7, #16]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f023 030a 	bic.w	r3, r3, #10
 800c3c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr

0800c3ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3ea:	b480      	push	{r7}
 800c3ec:	b087      	sub	sp, #28
 800c3ee:	af00      	add	r7, sp, #0
 800c3f0:	60f8      	str	r0, [r7, #12]
 800c3f2:	60b9      	str	r1, [r7, #8]
 800c3f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	f023 0210 	bic.w	r2, r3, #16
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	6a1b      	ldr	r3, [r3, #32]
 800c40c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	031b      	lsls	r3, r3, #12
 800c41a:	697a      	ldr	r2, [r7, #20]
 800c41c:	4313      	orrs	r3, r2
 800c41e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	011b      	lsls	r3, r3, #4
 800c42c:	693a      	ldr	r2, [r7, #16]
 800c42e:	4313      	orrs	r3, r2
 800c430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	693a      	ldr	r2, [r7, #16]
 800c43c:	621a      	str	r2, [r3, #32]
}
 800c43e:	bf00      	nop
 800c440:	371c      	adds	r7, #28
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr

0800c44a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c44a:	b480      	push	{r7}
 800c44c:	b085      	sub	sp, #20
 800c44e:	af00      	add	r7, sp, #0
 800c450:	6078      	str	r0, [r7, #4]
 800c452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	4313      	orrs	r3, r2
 800c468:	f043 0307 	orr.w	r3, r3, #7
 800c46c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	609a      	str	r2, [r3, #8]
}
 800c474:	bf00      	nop
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c49a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	021a      	lsls	r2, r3, #8
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	697a      	ldr	r2, [r7, #20]
 800c4b2:	609a      	str	r2, [r3, #8]
}
 800c4b4:	bf00      	nop
 800c4b6:	371c      	adds	r7, #28
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f003 031f 	and.w	r3, r3, #31
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6a1a      	ldr	r2, [r3, #32]
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	43db      	mvns	r3, r3
 800c4e2:	401a      	ands	r2, r3
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	6a1a      	ldr	r2, [r3, #32]
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f003 031f 	and.w	r3, r3, #31
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	621a      	str	r2, [r3, #32]
}
 800c4fe:	bf00      	nop
 800c500:	371c      	adds	r7, #28
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
	...

0800c50c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d101      	bne.n	800c524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c520:	2302      	movs	r3, #2
 800c522:	e050      	b.n	800c5c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a1c      	ldr	r2, [pc, #112]	; (800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d018      	beq.n	800c59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c570:	d013      	beq.n	800c59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a18      	ldr	r2, [pc, #96]	; (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d00e      	beq.n	800c59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a16      	ldr	r2, [pc, #88]	; (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d009      	beq.n	800c59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a15      	ldr	r2, [pc, #84]	; (800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d004      	beq.n	800c59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a13      	ldr	r2, [pc, #76]	; (800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d10c      	bne.n	800c5b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3714      	adds	r7, #20
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
 800c5d2:	bf00      	nop
 800c5d4:	40010000 	.word	0x40010000
 800c5d8:	40000400 	.word	0x40000400
 800c5dc:	40000800 	.word	0x40000800
 800c5e0:	40000c00 	.word	0x40000c00
 800c5e4:	40014000 	.word	0x40014000

0800c5e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	e047      	b.n	800c6b2 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d106      	bne.n	800c63c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f7fa f9d6 	bl	80069e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2224      	movs	r2, #36	; 0x24
 800c640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68da      	ldr	r2, [r3, #12]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f931 	bl	800c8bc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	691a      	ldr	r2, [r3, #16]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	695a      	ldr	r2, [r3, #20]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800c678:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	695a      	ldr	r2, [r3, #20]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f042 0208 	orr.w	r2, r2, #8
 800c688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68da      	ldr	r2, [r3, #12]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b08a      	sub	sp, #40	; 0x28
 800c6be:	af02      	add	r7, sp, #8
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	603b      	str	r3, [r7, #0]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b20      	cmp	r3, #32
 800c6d8:	d17c      	bne.n	800c7d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <HAL_UART_Transmit+0x2c>
 800c6e0:	88fb      	ldrh	r3, [r7, #6]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e075      	b.n	800c7d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d101      	bne.n	800c6f8 <HAL_UART_Transmit+0x3e>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e06e      	b.n	800c7d6 <HAL_UART_Transmit+0x11c>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2221      	movs	r2, #33	; 0x21
 800c70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c70e:	f7fa facf 	bl	8006cb0 <HAL_GetTick>
 800c712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	88fa      	ldrh	r2, [r7, #6]
 800c718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	88fa      	ldrh	r2, [r7, #6]
 800c71e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	689b      	ldr	r3, [r3, #8]
 800c724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c728:	d108      	bne.n	800c73c <HAL_UART_Transmit+0x82>
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d104      	bne.n	800c73c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c732:	2300      	movs	r3, #0
 800c734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	61bb      	str	r3, [r7, #24]
 800c73a:	e003      	b.n	800c744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c740:	2300      	movs	r3, #0
 800c742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c74c:	e02a      	b.n	800c7a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2200      	movs	r2, #0
 800c756:	2180      	movs	r1, #128	; 0x80
 800c758:	68f8      	ldr	r0, [r7, #12]
 800c75a:	f000 f840 	bl	800c7de <UART_WaitOnFlagUntilTimeout>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d001      	beq.n	800c768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e036      	b.n	800c7d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10b      	bne.n	800c786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c77c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	3302      	adds	r3, #2
 800c782:	61bb      	str	r3, [r7, #24]
 800c784:	e007      	b.n	800c796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	3301      	adds	r3, #1
 800c794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	3b01      	subs	r3, #1
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1cf      	bne.n	800c74e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2140      	movs	r1, #64	; 0x40
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 f810 	bl	800c7de <UART_WaitOnFlagUntilTimeout>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d001      	beq.n	800c7c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	e006      	b.n	800c7d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	e000      	b.n	800c7d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c7d4:	2302      	movs	r3, #2
  }
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3720      	adds	r7, #32
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b090      	sub	sp, #64	; 0x40
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	60f8      	str	r0, [r7, #12]
 800c7e6:	60b9      	str	r1, [r7, #8]
 800c7e8:	603b      	str	r3, [r7, #0]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7ee:	e050      	b.n	800c892 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f6:	d04c      	beq.n	800c892 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c7f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d007      	beq.n	800c80e <UART_WaitOnFlagUntilTimeout+0x30>
 800c7fe:	f7fa fa57 	bl	8006cb0 <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d241      	bcs.n	800c892 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	330c      	adds	r3, #12
 800c814:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	330c      	adds	r3, #12
 800c82c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c82e:	637a      	str	r2, [r7, #52]	; 0x34
 800c830:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c836:	e841 2300 	strex	r3, r2, [r1]
 800c83a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1e5      	bne.n	800c80e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3314      	adds	r3, #20
 800c848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	e853 3f00 	ldrex	r3, [r3]
 800c850:	613b      	str	r3, [r7, #16]
   return(result);
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	f023 0301 	bic.w	r3, r3, #1
 800c858:	63bb      	str	r3, [r7, #56]	; 0x38
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3314      	adds	r3, #20
 800c860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c862:	623a      	str	r2, [r7, #32]
 800c864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c866:	69f9      	ldr	r1, [r7, #28]
 800c868:	6a3a      	ldr	r2, [r7, #32]
 800c86a:	e841 2300 	strex	r3, r2, [r1]
 800c86e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d1e5      	bne.n	800c842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2220      	movs	r2, #32
 800c87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2220      	movs	r2, #32
 800c882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2200      	movs	r2, #0
 800c88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e00f      	b.n	800c8b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	4013      	ands	r3, r2
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	bf0c      	ite	eq
 800c8a2:	2301      	moveq	r3, #1
 800c8a4:	2300      	movne	r3, #0
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	79fb      	ldrb	r3, [r7, #7]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d09f      	beq.n	800c7f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3740      	adds	r7, #64	; 0x40
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8c0:	b0c0      	sub	sp, #256	; 0x100
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8d8:	68d9      	ldr	r1, [r3, #12]
 800c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	ea40 0301 	orr.w	r3, r0, r1
 800c8e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8ea:	689a      	ldr	r2, [r3, #8]
 800c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f8:	695b      	ldr	r3, [r3, #20]
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	4313      	orrs	r3, r2
 800c904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c914:	f021 010c 	bic.w	r1, r1, #12
 800c918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c922:	430b      	orrs	r3, r1
 800c924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c936:	6999      	ldr	r1, [r3, #24]
 800c938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	ea40 0301 	orr.w	r3, r0, r1
 800c942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	4b8f      	ldr	r3, [pc, #572]	; (800cb88 <UART_SetConfig+0x2cc>)
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d005      	beq.n	800c95c <UART_SetConfig+0xa0>
 800c950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	4b8d      	ldr	r3, [pc, #564]	; (800cb8c <UART_SetConfig+0x2d0>)
 800c958:	429a      	cmp	r2, r3
 800c95a:	d104      	bne.n	800c966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c95c:	f7fd fcf4 	bl	800a348 <HAL_RCC_GetPCLK2Freq>
 800c960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c964:	e003      	b.n	800c96e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c966:	f7fd fcdb 	bl	800a320 <HAL_RCC_GetPCLK1Freq>
 800c96a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c978:	f040 810c 	bne.w	800cb94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c97c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c980:	2200      	movs	r2, #0
 800c982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c98a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c98e:	4622      	mov	r2, r4
 800c990:	462b      	mov	r3, r5
 800c992:	1891      	adds	r1, r2, r2
 800c994:	65b9      	str	r1, [r7, #88]	; 0x58
 800c996:	415b      	adcs	r3, r3
 800c998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c99a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c99e:	4621      	mov	r1, r4
 800c9a0:	eb12 0801 	adds.w	r8, r2, r1
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	eb43 0901 	adc.w	r9, r3, r1
 800c9aa:	f04f 0200 	mov.w	r2, #0
 800c9ae:	f04f 0300 	mov.w	r3, #0
 800c9b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c9b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c9ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9be:	4690      	mov	r8, r2
 800c9c0:	4699      	mov	r9, r3
 800c9c2:	4623      	mov	r3, r4
 800c9c4:	eb18 0303 	adds.w	r3, r8, r3
 800c9c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	eb49 0303 	adc.w	r3, r9, r3
 800c9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c9e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c9e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	18db      	adds	r3, r3, r3
 800c9ee:	653b      	str	r3, [r7, #80]	; 0x50
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	eb42 0303 	adc.w	r3, r2, r3
 800c9f6:	657b      	str	r3, [r7, #84]	; 0x54
 800c9f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c9fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ca00:	f7f3 ff48 	bl	8000894 <__aeabi_uldivmod>
 800ca04:	4602      	mov	r2, r0
 800ca06:	460b      	mov	r3, r1
 800ca08:	4b61      	ldr	r3, [pc, #388]	; (800cb90 <UART_SetConfig+0x2d4>)
 800ca0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca0e:	095b      	lsrs	r3, r3, #5
 800ca10:	011c      	lsls	r4, r3, #4
 800ca12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ca20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ca24:	4642      	mov	r2, r8
 800ca26:	464b      	mov	r3, r9
 800ca28:	1891      	adds	r1, r2, r2
 800ca2a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca2c:	415b      	adcs	r3, r3
 800ca2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ca34:	4641      	mov	r1, r8
 800ca36:	eb12 0a01 	adds.w	sl, r2, r1
 800ca3a:	4649      	mov	r1, r9
 800ca3c:	eb43 0b01 	adc.w	fp, r3, r1
 800ca40:	f04f 0200 	mov.w	r2, #0
 800ca44:	f04f 0300 	mov.w	r3, #0
 800ca48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ca4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ca50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca54:	4692      	mov	sl, r2
 800ca56:	469b      	mov	fp, r3
 800ca58:	4643      	mov	r3, r8
 800ca5a:	eb1a 0303 	adds.w	r3, sl, r3
 800ca5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca62:	464b      	mov	r3, r9
 800ca64:	eb4b 0303 	adc.w	r3, fp, r3
 800ca68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ca7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ca80:	460b      	mov	r3, r1
 800ca82:	18db      	adds	r3, r3, r3
 800ca84:	643b      	str	r3, [r7, #64]	; 0x40
 800ca86:	4613      	mov	r3, r2
 800ca88:	eb42 0303 	adc.w	r3, r2, r3
 800ca8c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ca92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ca96:	f7f3 fefd 	bl	8000894 <__aeabi_uldivmod>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4b3b      	ldr	r3, [pc, #236]	; (800cb90 <UART_SetConfig+0x2d4>)
 800caa2:	fba3 2301 	umull	r2, r3, r3, r1
 800caa6:	095b      	lsrs	r3, r3, #5
 800caa8:	2264      	movs	r2, #100	; 0x64
 800caaa:	fb02 f303 	mul.w	r3, r2, r3
 800caae:	1acb      	subs	r3, r1, r3
 800cab0:	00db      	lsls	r3, r3, #3
 800cab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cab6:	4b36      	ldr	r3, [pc, #216]	; (800cb90 <UART_SetConfig+0x2d4>)
 800cab8:	fba3 2302 	umull	r2, r3, r3, r2
 800cabc:	095b      	lsrs	r3, r3, #5
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cac4:	441c      	add	r4, r3
 800cac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caca:	2200      	movs	r2, #0
 800cacc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	1891      	adds	r1, r2, r2
 800cade:	63b9      	str	r1, [r7, #56]	; 0x38
 800cae0:	415b      	adcs	r3, r3
 800cae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cae8:	4641      	mov	r1, r8
 800caea:	1851      	adds	r1, r2, r1
 800caec:	6339      	str	r1, [r7, #48]	; 0x30
 800caee:	4649      	mov	r1, r9
 800caf0:	414b      	adcs	r3, r1
 800caf2:	637b      	str	r3, [r7, #52]	; 0x34
 800caf4:	f04f 0200 	mov.w	r2, #0
 800caf8:	f04f 0300 	mov.w	r3, #0
 800cafc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cb00:	4659      	mov	r1, fp
 800cb02:	00cb      	lsls	r3, r1, #3
 800cb04:	4651      	mov	r1, sl
 800cb06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb0a:	4651      	mov	r1, sl
 800cb0c:	00ca      	lsls	r2, r1, #3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	4619      	mov	r1, r3
 800cb12:	4603      	mov	r3, r0
 800cb14:	4642      	mov	r2, r8
 800cb16:	189b      	adds	r3, r3, r2
 800cb18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb1c:	464b      	mov	r3, r9
 800cb1e:	460a      	mov	r2, r1
 800cb20:	eb42 0303 	adc.w	r3, r2, r3
 800cb24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cb34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cb38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	18db      	adds	r3, r3, r3
 800cb40:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb42:	4613      	mov	r3, r2
 800cb44:	eb42 0303 	adc.w	r3, r2, r3
 800cb48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cb4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cb52:	f7f3 fe9f 	bl	8000894 <__aeabi_uldivmod>
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <UART_SetConfig+0x2d4>)
 800cb5c:	fba3 1302 	umull	r1, r3, r3, r2
 800cb60:	095b      	lsrs	r3, r3, #5
 800cb62:	2164      	movs	r1, #100	; 0x64
 800cb64:	fb01 f303 	mul.w	r3, r1, r3
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	3332      	adds	r3, #50	; 0x32
 800cb6e:	4a08      	ldr	r2, [pc, #32]	; (800cb90 <UART_SetConfig+0x2d4>)
 800cb70:	fba2 2303 	umull	r2, r3, r2, r3
 800cb74:	095b      	lsrs	r3, r3, #5
 800cb76:	f003 0207 	and.w	r2, r3, #7
 800cb7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4422      	add	r2, r4
 800cb82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cb84:	e105      	b.n	800cd92 <UART_SetConfig+0x4d6>
 800cb86:	bf00      	nop
 800cb88:	40011000 	.word	0x40011000
 800cb8c:	40011400 	.word	0x40011400
 800cb90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cb9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cba6:	4642      	mov	r2, r8
 800cba8:	464b      	mov	r3, r9
 800cbaa:	1891      	adds	r1, r2, r2
 800cbac:	6239      	str	r1, [r7, #32]
 800cbae:	415b      	adcs	r3, r3
 800cbb0:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cbb6:	4641      	mov	r1, r8
 800cbb8:	1854      	adds	r4, r2, r1
 800cbba:	4649      	mov	r1, r9
 800cbbc:	eb43 0501 	adc.w	r5, r3, r1
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	f04f 0300 	mov.w	r3, #0
 800cbc8:	00eb      	lsls	r3, r5, #3
 800cbca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cbce:	00e2      	lsls	r2, r4, #3
 800cbd0:	4614      	mov	r4, r2
 800cbd2:	461d      	mov	r5, r3
 800cbd4:	4643      	mov	r3, r8
 800cbd6:	18e3      	adds	r3, r4, r3
 800cbd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cbdc:	464b      	mov	r3, r9
 800cbde:	eb45 0303 	adc.w	r3, r5, r3
 800cbe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cbe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cbf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cbf6:	f04f 0200 	mov.w	r2, #0
 800cbfa:	f04f 0300 	mov.w	r3, #0
 800cbfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cc02:	4629      	mov	r1, r5
 800cc04:	008b      	lsls	r3, r1, #2
 800cc06:	4621      	mov	r1, r4
 800cc08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc0c:	4621      	mov	r1, r4
 800cc0e:	008a      	lsls	r2, r1, #2
 800cc10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cc14:	f7f3 fe3e 	bl	8000894 <__aeabi_uldivmod>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4b60      	ldr	r3, [pc, #384]	; (800cda0 <UART_SetConfig+0x4e4>)
 800cc1e:	fba3 2302 	umull	r2, r3, r3, r2
 800cc22:	095b      	lsrs	r3, r3, #5
 800cc24:	011c      	lsls	r4, r3, #4
 800cc26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cc30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cc34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cc38:	4642      	mov	r2, r8
 800cc3a:	464b      	mov	r3, r9
 800cc3c:	1891      	adds	r1, r2, r2
 800cc3e:	61b9      	str	r1, [r7, #24]
 800cc40:	415b      	adcs	r3, r3
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc48:	4641      	mov	r1, r8
 800cc4a:	1851      	adds	r1, r2, r1
 800cc4c:	6139      	str	r1, [r7, #16]
 800cc4e:	4649      	mov	r1, r9
 800cc50:	414b      	adcs	r3, r1
 800cc52:	617b      	str	r3, [r7, #20]
 800cc54:	f04f 0200 	mov.w	r2, #0
 800cc58:	f04f 0300 	mov.w	r3, #0
 800cc5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cc60:	4659      	mov	r1, fp
 800cc62:	00cb      	lsls	r3, r1, #3
 800cc64:	4651      	mov	r1, sl
 800cc66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc6a:	4651      	mov	r1, sl
 800cc6c:	00ca      	lsls	r2, r1, #3
 800cc6e:	4610      	mov	r0, r2
 800cc70:	4619      	mov	r1, r3
 800cc72:	4603      	mov	r3, r0
 800cc74:	4642      	mov	r2, r8
 800cc76:	189b      	adds	r3, r3, r2
 800cc78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc7c:	464b      	mov	r3, r9
 800cc7e:	460a      	mov	r2, r1
 800cc80:	eb42 0303 	adc.w	r3, r2, r3
 800cc84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc92:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cc94:	f04f 0200 	mov.w	r2, #0
 800cc98:	f04f 0300 	mov.w	r3, #0
 800cc9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cca0:	4649      	mov	r1, r9
 800cca2:	008b      	lsls	r3, r1, #2
 800cca4:	4641      	mov	r1, r8
 800cca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccaa:	4641      	mov	r1, r8
 800ccac:	008a      	lsls	r2, r1, #2
 800ccae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ccb2:	f7f3 fdef 	bl	8000894 <__aeabi_uldivmod>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4b39      	ldr	r3, [pc, #228]	; (800cda0 <UART_SetConfig+0x4e4>)
 800ccbc:	fba3 1302 	umull	r1, r3, r3, r2
 800ccc0:	095b      	lsrs	r3, r3, #5
 800ccc2:	2164      	movs	r1, #100	; 0x64
 800ccc4:	fb01 f303 	mul.w	r3, r1, r3
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	011b      	lsls	r3, r3, #4
 800cccc:	3332      	adds	r3, #50	; 0x32
 800ccce:	4a34      	ldr	r2, [pc, #208]	; (800cda0 <UART_SetConfig+0x4e4>)
 800ccd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd4:	095b      	lsrs	r3, r3, #5
 800ccd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccda:	441c      	add	r4, r3
 800ccdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cce0:	2200      	movs	r2, #0
 800cce2:	673b      	str	r3, [r7, #112]	; 0x70
 800cce4:	677a      	str	r2, [r7, #116]	; 0x74
 800cce6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ccea:	4642      	mov	r2, r8
 800ccec:	464b      	mov	r3, r9
 800ccee:	1891      	adds	r1, r2, r2
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	415b      	adcs	r3, r3
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ccfa:	4641      	mov	r1, r8
 800ccfc:	1851      	adds	r1, r2, r1
 800ccfe:	6039      	str	r1, [r7, #0]
 800cd00:	4649      	mov	r1, r9
 800cd02:	414b      	adcs	r3, r1
 800cd04:	607b      	str	r3, [r7, #4]
 800cd06:	f04f 0200 	mov.w	r2, #0
 800cd0a:	f04f 0300 	mov.w	r3, #0
 800cd0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cd12:	4659      	mov	r1, fp
 800cd14:	00cb      	lsls	r3, r1, #3
 800cd16:	4651      	mov	r1, sl
 800cd18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd1c:	4651      	mov	r1, sl
 800cd1e:	00ca      	lsls	r2, r1, #3
 800cd20:	4610      	mov	r0, r2
 800cd22:	4619      	mov	r1, r3
 800cd24:	4603      	mov	r3, r0
 800cd26:	4642      	mov	r2, r8
 800cd28:	189b      	adds	r3, r3, r2
 800cd2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd2c:	464b      	mov	r3, r9
 800cd2e:	460a      	mov	r2, r1
 800cd30:	eb42 0303 	adc.w	r3, r2, r3
 800cd34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	663b      	str	r3, [r7, #96]	; 0x60
 800cd40:	667a      	str	r2, [r7, #100]	; 0x64
 800cd42:	f04f 0200 	mov.w	r2, #0
 800cd46:	f04f 0300 	mov.w	r3, #0
 800cd4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cd4e:	4649      	mov	r1, r9
 800cd50:	008b      	lsls	r3, r1, #2
 800cd52:	4641      	mov	r1, r8
 800cd54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd58:	4641      	mov	r1, r8
 800cd5a:	008a      	lsls	r2, r1, #2
 800cd5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cd60:	f7f3 fd98 	bl	8000894 <__aeabi_uldivmod>
 800cd64:	4602      	mov	r2, r0
 800cd66:	460b      	mov	r3, r1
 800cd68:	4b0d      	ldr	r3, [pc, #52]	; (800cda0 <UART_SetConfig+0x4e4>)
 800cd6a:	fba3 1302 	umull	r1, r3, r3, r2
 800cd6e:	095b      	lsrs	r3, r3, #5
 800cd70:	2164      	movs	r1, #100	; 0x64
 800cd72:	fb01 f303 	mul.w	r3, r1, r3
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	011b      	lsls	r3, r3, #4
 800cd7a:	3332      	adds	r3, #50	; 0x32
 800cd7c:	4a08      	ldr	r2, [pc, #32]	; (800cda0 <UART_SetConfig+0x4e4>)
 800cd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd82:	095b      	lsrs	r3, r3, #5
 800cd84:	f003 020f 	and.w	r2, r3, #15
 800cd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4422      	add	r2, r4
 800cd90:	609a      	str	r2, [r3, #8]
}
 800cd92:	bf00      	nop
 800cd94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd9e:	bf00      	nop
 800cda0:	51eb851f 	.word	0x51eb851f

0800cda4 <arm_sin_f32>:
 800cda4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ce20 <arm_sin_f32+0x7c>
 800cda8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cdac:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cdb8:	d42c      	bmi.n	800ce14 <arm_sin_f32+0x70>
 800cdba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cdbe:	eddf 6a19 	vldr	s13, [pc, #100]	; 800ce24 <arm_sin_f32+0x80>
 800cdc2:	4a19      	ldr	r2, [pc, #100]	; (800ce28 <arm_sin_f32+0x84>)
 800cdc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cdcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdd0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800cdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd8:	bfa8      	it	ge
 800cdda:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800cdde:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800cde2:	ee17 3a10 	vmov	r3, s14
 800cde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdea:	ee07 3a10 	vmov	s14, r3
 800cdee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800cdf2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800cdf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cdfa:	edd1 6a01 	vldr	s13, [r1, #4]
 800cdfe:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ce02:	ed91 0a00 	vldr	s0, [r1]
 800ce06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce0a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ce0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce12:	4770      	bx	lr
 800ce14:	ee17 3a90 	vmov	r3, s15
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	ee07 3a90 	vmov	s15, r3
 800ce1e:	e7cc      	b.n	800cdba <arm_sin_f32+0x16>
 800ce20:	3e22f983 	.word	0x3e22f983
 800ce24:	44000000 	.word	0x44000000
 800ce28:	0800ea74 	.word	0x0800ea74

0800ce2c <atoi>:
 800ce2c:	220a      	movs	r2, #10
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f000 b8d6 	b.w	800cfe0 <strtol>

0800ce34 <__errno>:
 800ce34:	4b01      	ldr	r3, [pc, #4]	; (800ce3c <__errno+0x8>)
 800ce36:	6818      	ldr	r0, [r3, #0]
 800ce38:	4770      	bx	lr
 800ce3a:	bf00      	nop
 800ce3c:	20008efc 	.word	0x20008efc

0800ce40 <__libc_init_array>:
 800ce40:	b570      	push	{r4, r5, r6, lr}
 800ce42:	4d0d      	ldr	r5, [pc, #52]	; (800ce78 <__libc_init_array+0x38>)
 800ce44:	4c0d      	ldr	r4, [pc, #52]	; (800ce7c <__libc_init_array+0x3c>)
 800ce46:	1b64      	subs	r4, r4, r5
 800ce48:	10a4      	asrs	r4, r4, #2
 800ce4a:	2600      	movs	r6, #0
 800ce4c:	42a6      	cmp	r6, r4
 800ce4e:	d109      	bne.n	800ce64 <__libc_init_array+0x24>
 800ce50:	4d0b      	ldr	r5, [pc, #44]	; (800ce80 <__libc_init_array+0x40>)
 800ce52:	4c0c      	ldr	r4, [pc, #48]	; (800ce84 <__libc_init_array+0x44>)
 800ce54:	f000 f8ce 	bl	800cff4 <_init>
 800ce58:	1b64      	subs	r4, r4, r5
 800ce5a:	10a4      	asrs	r4, r4, #2
 800ce5c:	2600      	movs	r6, #0
 800ce5e:	42a6      	cmp	r6, r4
 800ce60:	d105      	bne.n	800ce6e <__libc_init_array+0x2e>
 800ce62:	bd70      	pop	{r4, r5, r6, pc}
 800ce64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce68:	4798      	blx	r3
 800ce6a:	3601      	adds	r6, #1
 800ce6c:	e7ee      	b.n	800ce4c <__libc_init_array+0xc>
 800ce6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce72:	4798      	blx	r3
 800ce74:	3601      	adds	r6, #1
 800ce76:	e7f2      	b.n	800ce5e <__libc_init_array+0x1e>
 800ce78:	0800f384 	.word	0x0800f384
 800ce7c:	0800f384 	.word	0x0800f384
 800ce80:	0800f384 	.word	0x0800f384
 800ce84:	0800f388 	.word	0x0800f388

0800ce88 <memcpy>:
 800ce88:	440a      	add	r2, r1
 800ce8a:	4291      	cmp	r1, r2
 800ce8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce90:	d100      	bne.n	800ce94 <memcpy+0xc>
 800ce92:	4770      	bx	lr
 800ce94:	b510      	push	{r4, lr}
 800ce96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce9e:	4291      	cmp	r1, r2
 800cea0:	d1f9      	bne.n	800ce96 <memcpy+0xe>
 800cea2:	bd10      	pop	{r4, pc}

0800cea4 <memset>:
 800cea4:	4402      	add	r2, r0
 800cea6:	4603      	mov	r3, r0
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d100      	bne.n	800ceae <memset+0xa>
 800ceac:	4770      	bx	lr
 800ceae:	f803 1b01 	strb.w	r1, [r3], #1
 800ceb2:	e7f9      	b.n	800cea8 <memset+0x4>

0800ceb4 <strncmp>:
 800ceb4:	b510      	push	{r4, lr}
 800ceb6:	b17a      	cbz	r2, 800ced8 <strncmp+0x24>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	3901      	subs	r1, #1
 800cebc:	1884      	adds	r4, r0, r2
 800cebe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cec2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cec6:	4290      	cmp	r0, r2
 800cec8:	d101      	bne.n	800cece <strncmp+0x1a>
 800ceca:	42a3      	cmp	r3, r4
 800cecc:	d101      	bne.n	800ced2 <strncmp+0x1e>
 800cece:	1a80      	subs	r0, r0, r2
 800ced0:	bd10      	pop	{r4, pc}
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d1f3      	bne.n	800cebe <strncmp+0xa>
 800ced6:	e7fa      	b.n	800cece <strncmp+0x1a>
 800ced8:	4610      	mov	r0, r2
 800ceda:	e7f9      	b.n	800ced0 <strncmp+0x1c>

0800cedc <_strtol_l.constprop.0>:
 800cedc:	2b01      	cmp	r3, #1
 800cede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cee2:	d001      	beq.n	800cee8 <_strtol_l.constprop.0+0xc>
 800cee4:	2b24      	cmp	r3, #36	; 0x24
 800cee6:	d906      	bls.n	800cef6 <_strtol_l.constprop.0+0x1a>
 800cee8:	f7ff ffa4 	bl	800ce34 <__errno>
 800ceec:	2316      	movs	r3, #22
 800ceee:	6003      	str	r3, [r0, #0]
 800cef0:	2000      	movs	r0, #0
 800cef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cef6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cfdc <_strtol_l.constprop.0+0x100>
 800cefa:	460d      	mov	r5, r1
 800cefc:	462e      	mov	r6, r5
 800cefe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf02:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cf06:	f017 0708 	ands.w	r7, r7, #8
 800cf0a:	d1f7      	bne.n	800cefc <_strtol_l.constprop.0+0x20>
 800cf0c:	2c2d      	cmp	r4, #45	; 0x2d
 800cf0e:	d132      	bne.n	800cf76 <_strtol_l.constprop.0+0x9a>
 800cf10:	782c      	ldrb	r4, [r5, #0]
 800cf12:	2701      	movs	r7, #1
 800cf14:	1cb5      	adds	r5, r6, #2
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d05b      	beq.n	800cfd2 <_strtol_l.constprop.0+0xf6>
 800cf1a:	2b10      	cmp	r3, #16
 800cf1c:	d109      	bne.n	800cf32 <_strtol_l.constprop.0+0x56>
 800cf1e:	2c30      	cmp	r4, #48	; 0x30
 800cf20:	d107      	bne.n	800cf32 <_strtol_l.constprop.0+0x56>
 800cf22:	782c      	ldrb	r4, [r5, #0]
 800cf24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf28:	2c58      	cmp	r4, #88	; 0x58
 800cf2a:	d14d      	bne.n	800cfc8 <_strtol_l.constprop.0+0xec>
 800cf2c:	786c      	ldrb	r4, [r5, #1]
 800cf2e:	2310      	movs	r3, #16
 800cf30:	3502      	adds	r5, #2
 800cf32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf36:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf3a:	f04f 0c00 	mov.w	ip, #0
 800cf3e:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf42:	4666      	mov	r6, ip
 800cf44:	fb03 8a19 	mls	sl, r3, r9, r8
 800cf48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cf4c:	f1be 0f09 	cmp.w	lr, #9
 800cf50:	d816      	bhi.n	800cf80 <_strtol_l.constprop.0+0xa4>
 800cf52:	4674      	mov	r4, lr
 800cf54:	42a3      	cmp	r3, r4
 800cf56:	dd24      	ble.n	800cfa2 <_strtol_l.constprop.0+0xc6>
 800cf58:	f1bc 0f00 	cmp.w	ip, #0
 800cf5c:	db1e      	blt.n	800cf9c <_strtol_l.constprop.0+0xc0>
 800cf5e:	45b1      	cmp	r9, r6
 800cf60:	d31c      	bcc.n	800cf9c <_strtol_l.constprop.0+0xc0>
 800cf62:	d101      	bne.n	800cf68 <_strtol_l.constprop.0+0x8c>
 800cf64:	45a2      	cmp	sl, r4
 800cf66:	db19      	blt.n	800cf9c <_strtol_l.constprop.0+0xc0>
 800cf68:	fb06 4603 	mla	r6, r6, r3, r4
 800cf6c:	f04f 0c01 	mov.w	ip, #1
 800cf70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf74:	e7e8      	b.n	800cf48 <_strtol_l.constprop.0+0x6c>
 800cf76:	2c2b      	cmp	r4, #43	; 0x2b
 800cf78:	bf04      	itt	eq
 800cf7a:	782c      	ldrbeq	r4, [r5, #0]
 800cf7c:	1cb5      	addeq	r5, r6, #2
 800cf7e:	e7ca      	b.n	800cf16 <_strtol_l.constprop.0+0x3a>
 800cf80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cf84:	f1be 0f19 	cmp.w	lr, #25
 800cf88:	d801      	bhi.n	800cf8e <_strtol_l.constprop.0+0xb2>
 800cf8a:	3c37      	subs	r4, #55	; 0x37
 800cf8c:	e7e2      	b.n	800cf54 <_strtol_l.constprop.0+0x78>
 800cf8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cf92:	f1be 0f19 	cmp.w	lr, #25
 800cf96:	d804      	bhi.n	800cfa2 <_strtol_l.constprop.0+0xc6>
 800cf98:	3c57      	subs	r4, #87	; 0x57
 800cf9a:	e7db      	b.n	800cf54 <_strtol_l.constprop.0+0x78>
 800cf9c:	f04f 3cff 	mov.w	ip, #4294967295
 800cfa0:	e7e6      	b.n	800cf70 <_strtol_l.constprop.0+0x94>
 800cfa2:	f1bc 0f00 	cmp.w	ip, #0
 800cfa6:	da05      	bge.n	800cfb4 <_strtol_l.constprop.0+0xd8>
 800cfa8:	2322      	movs	r3, #34	; 0x22
 800cfaa:	6003      	str	r3, [r0, #0]
 800cfac:	4646      	mov	r6, r8
 800cfae:	b942      	cbnz	r2, 800cfc2 <_strtol_l.constprop.0+0xe6>
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	e79e      	b.n	800cef2 <_strtol_l.constprop.0+0x16>
 800cfb4:	b107      	cbz	r7, 800cfb8 <_strtol_l.constprop.0+0xdc>
 800cfb6:	4276      	negs	r6, r6
 800cfb8:	2a00      	cmp	r2, #0
 800cfba:	d0f9      	beq.n	800cfb0 <_strtol_l.constprop.0+0xd4>
 800cfbc:	f1bc 0f00 	cmp.w	ip, #0
 800cfc0:	d000      	beq.n	800cfc4 <_strtol_l.constprop.0+0xe8>
 800cfc2:	1e69      	subs	r1, r5, #1
 800cfc4:	6011      	str	r1, [r2, #0]
 800cfc6:	e7f3      	b.n	800cfb0 <_strtol_l.constprop.0+0xd4>
 800cfc8:	2430      	movs	r4, #48	; 0x30
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d1b1      	bne.n	800cf32 <_strtol_l.constprop.0+0x56>
 800cfce:	2308      	movs	r3, #8
 800cfd0:	e7af      	b.n	800cf32 <_strtol_l.constprop.0+0x56>
 800cfd2:	2c30      	cmp	r4, #48	; 0x30
 800cfd4:	d0a5      	beq.n	800cf22 <_strtol_l.constprop.0+0x46>
 800cfd6:	230a      	movs	r3, #10
 800cfd8:	e7ab      	b.n	800cf32 <_strtol_l.constprop.0+0x56>
 800cfda:	bf00      	nop
 800cfdc:	0800f279 	.word	0x0800f279

0800cfe0 <strtol>:
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	4601      	mov	r1, r0
 800cfe6:	4802      	ldr	r0, [pc, #8]	; (800cff0 <strtol+0x10>)
 800cfe8:	6800      	ldr	r0, [r0, #0]
 800cfea:	f7ff bf77 	b.w	800cedc <_strtol_l.constprop.0>
 800cfee:	bf00      	nop
 800cff0:	20008efc 	.word	0x20008efc

0800cff4 <_init>:
 800cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff6:	bf00      	nop
 800cff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffa:	bc08      	pop	{r3}
 800cffc:	469e      	mov	lr, r3
 800cffe:	4770      	bx	lr

0800d000 <_fini>:
 800d000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d002:	bf00      	nop
 800d004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d006:	bc08      	pop	{r3}
 800d008:	469e      	mov	lr, r3
 800d00a:	4770      	bx	lr
