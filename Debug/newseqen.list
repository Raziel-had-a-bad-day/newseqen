
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002358  0800c778  0800c778  0001c778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ead0  0800ead0  000286e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ead0  0800ead0  0001ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ead8  0800ead8  000286e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ead8  0800ead8  0001ead8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eadc  0800eadc  0001eadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000086e0  20000000  0800eae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000091e0  200086e0  080171c0  000286e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200118c0  080171c0  000318c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000286e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018316  00000000  00000000  00028710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  00040a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00043268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  000446c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018da6  00000000  00000000  00045a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dca  00000000  00000000  0005e7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a5a  00000000  00000000  000775b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011900a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  001190cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  0011eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200086e0 	.word	0x200086e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c760 	.word	0x0800c760

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200086e4 	.word	0x200086e4
 80001d4:	0800c760 	.word	0x0800c760

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bba      	ldr	r3, [pc, #744]	; (8000e98 <menu_vars+0x300>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bb8      	ldr	r3, [pc, #736]	; (8000e98 <menu_vars+0x300>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bb8      	ldr	r3, [pc, #736]	; (8000e9c <menu_vars+0x304>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00b fd24 	bl	800c620 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4bae      	ldr	r3, [pc, #696]	; (8000e98 <menu_vars+0x300>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bac      	ldr	r3, [pc, #688]	; (8000e98 <menu_vars+0x300>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4baa      	ldr	r3, [pc, #680]	; (8000e98 <menu_vars+0x300>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4ba9      	ldr	r3, [pc, #676]	; (8000e98 <menu_vars+0x300>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b36      	cmp	r3, #54	; 0x36
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aa9      	ldr	r2, [pc, #676]	; (8000ea0 <menu_vars+0x308>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aa8      	ldr	r2, [pc, #672]	; (8000ea4 <menu_vars+0x30c>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa5      	ldr	r2, [pc, #660]	; (8000ea4 <menu_vars+0x30c>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b35      	cmp	r3, #53	; 0x35
 8000c16:	f200 8224 	bhi.w	8001062 <menu_vars+0x4ca>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000cf9 	.word	0x08000cf9
 8000c24:	08000cff 	.word	0x08000cff
 8000c28:	08000d11 	.word	0x08000d11
 8000c2c:	08000d25 	.word	0x08000d25
 8000c30:	08000d39 	.word	0x08000d39
 8000c34:	08000d4d 	.word	0x08000d4d
 8000c38:	08000d61 	.word	0x08000d61
 8000c3c:	08000d67 	.word	0x08000d67
 8000c40:	08000d79 	.word	0x08000d79
 8000c44:	08000d8d 	.word	0x08000d8d
 8000c48:	08000da1 	.word	0x08000da1
 8000c4c:	08000db5 	.word	0x08000db5
 8000c50:	08000dbb 	.word	0x08000dbb
 8000c54:	08000dcd 	.word	0x08000dcd
 8000c58:	08000de1 	.word	0x08000de1
 8000c5c:	08000df5 	.word	0x08000df5
 8000c60:	08000e09 	.word	0x08000e09
 8000c64:	08000e1d 	.word	0x08000e1d
 8000c68:	08000e31 	.word	0x08000e31
 8000c6c:	08000e45 	.word	0x08000e45
 8000c70:	08000e59 	.word	0x08000e59
 8000c74:	08000e6d 	.word	0x08000e6d
 8000c78:	08000e73 	.word	0x08000e73
 8000c7c:	08000e79 	.word	0x08000e79
 8000c80:	08000e7f 	.word	0x08000e7f
 8000c84:	08000e8b 	.word	0x08000e8b
 8000c88:	08000ec1 	.word	0x08000ec1
 8000c8c:	08000ecf 	.word	0x08000ecf
 8000c90:	08000edb 	.word	0x08000edb
 8000c94:	08000ee9 	.word	0x08000ee9
 8000c98:	08000ef7 	.word	0x08000ef7
 8000c9c:	08000f05 	.word	0x08000f05
 8000ca0:	08000f13 	.word	0x08000f13
 8000ca4:	08000f21 	.word	0x08000f21
 8000ca8:	08000f2f 	.word	0x08000f2f
 8000cac:	08000f3d 	.word	0x08000f3d
 8000cb0:	08000f51 	.word	0x08000f51
 8000cb4:	08000f63 	.word	0x08000f63
 8000cb8:	08000f77 	.word	0x08000f77
 8000cbc:	08000f8b 	.word	0x08000f8b
 8000cc0:	08000f9f 	.word	0x08000f9f
 8000cc4:	08000fb1 	.word	0x08000fb1
 8000cc8:	08000fc5 	.word	0x08000fc5
 8000ccc:	08000fd9 	.word	0x08000fd9
 8000cd0:	08000fed 	.word	0x08000fed
 8000cd4:	08000ff3 	.word	0x08000ff3
 8000cd8:	08000ff9 	.word	0x08000ff9
 8000cdc:	08000fff 	.word	0x08000fff
 8000ce0:	08001005 	.word	0x08001005
 8000ce4:	0800100b 	.word	0x0800100b
 8000ce8:	0800101d 	.word	0x0800101d
 8000cec:	08001031 	.word	0x08001031
 8000cf0:	08001045 	.word	0x08001045
 8000cf4:	08001059 	.word	0x08001059
	case 0:     menu_vars_var1= NULL; break;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	e1b4      	b.n	8001068 <menu_vars+0x4d0>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	4613      	mov	r3, r2
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4a67      	ldr	r2, [pc, #412]	; (8000ea8 <menu_vars+0x310>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e1ab      	b.n	8001068 <menu_vars+0x4d0>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d10:	78fa      	ldrb	r2, [r7, #3]
 8000d12:	4613      	mov	r3, r2
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	4413      	add	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4a63      	ldr	r2, [pc, #396]	; (8000ea8 <menu_vars+0x310>)
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3301      	adds	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e1a1      	b.n	8001068 <menu_vars+0x4d0>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d24:	78fa      	ldrb	r2, [r7, #3]
 8000d26:	4613      	mov	r3, r2
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4a5e      	ldr	r2, [pc, #376]	; (8000ea8 <menu_vars+0x310>)
 8000d30:	4413      	add	r3, r2
 8000d32:	3304      	adds	r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e197      	b.n	8001068 <menu_vars+0x4d0>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d38:	78fa      	ldrb	r2, [r7, #3]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4413      	add	r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	4a59      	ldr	r2, [pc, #356]	; (8000ea8 <menu_vars+0x310>)
 8000d44:	4413      	add	r3, r2
 8000d46:	3303      	adds	r3, #3
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	e18d      	b.n	8001068 <menu_vars+0x4d0>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d4c:	78fa      	ldrb	r2, [r7, #3]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4a55      	ldr	r2, [pc, #340]	; (8000eac <menu_vars+0x314>)
 8000d58:	4413      	add	r3, r2
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	e183      	b.n	8001068 <menu_vars+0x4d0>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	e180      	b.n	8001068 <menu_vars+0x4d0>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <menu_vars+0x318>)
 8000d72:	4413      	add	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e177      	b.n	8001068 <menu_vars+0x4d0>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <menu_vars+0x318>)
 8000d84:	4413      	add	r3, r2
 8000d86:	3301      	adds	r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	e16d      	b.n	8001068 <menu_vars+0x4d0>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d92:	fb02 f303 	mul.w	r3, r2, r3
 8000d96:	4a46      	ldr	r2, [pc, #280]	; (8000eb0 <menu_vars+0x318>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	e163      	b.n	8001068 <menu_vars+0x4d0>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	4a41      	ldr	r2, [pc, #260]	; (8000eb0 <menu_vars+0x318>)
 8000dac:	4413      	add	r3, r2
 8000dae:	3303      	adds	r3, #3
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e159      	b.n	8001068 <menu_vars+0x4d0>
	case 11:     menu_vars_var1= NULL  ; break;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	e156      	b.n	8001068 <menu_vars+0x4d0>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000dba:	78fa      	ldrb	r2, [r7, #3]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	1a9b      	subs	r3, r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4a3b      	ldr	r2, [pc, #236]	; (8000eb4 <menu_vars+0x31c>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	e14d      	b.n	8001068 <menu_vars+0x4d0>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	1a9b      	subs	r3, r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <menu_vars+0x31c>)
 8000dd8:	4413      	add	r3, r2
 8000dda:	3301      	adds	r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	e143      	b.n	8001068 <menu_vars+0x4d0>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000de0:	78fa      	ldrb	r2, [r7, #3]
 8000de2:	4613      	mov	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4a32      	ldr	r2, [pc, #200]	; (8000eb4 <menu_vars+0x31c>)
 8000dec:	4413      	add	r3, r2
 8000dee:	3302      	adds	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	e139      	b.n	8001068 <menu_vars+0x4d0>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000df4:	78fa      	ldrb	r2, [r7, #3]
 8000df6:	4613      	mov	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <menu_vars+0x31c>)
 8000e00:	4413      	add	r3, r2
 8000e02:	3303      	adds	r3, #3
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	e12f      	b.n	8001068 <menu_vars+0x4d0>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <menu_vars+0x31c>)
 8000e14:	4413      	add	r3, r2
 8000e16:	3304      	adds	r3, #4
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	e125      	b.n	8001068 <menu_vars+0x4d0>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	1a9b      	subs	r3, r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <menu_vars+0x31c>)
 8000e28:	4413      	add	r3, r2
 8000e2a:	3305      	adds	r3, #5
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	e11b      	b.n	8001068 <menu_vars+0x4d0>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	4613      	mov	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <menu_vars+0x31c>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3306      	adds	r3, #6
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e111      	b.n	8001068 <menu_vars+0x4d0>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e44:	78fa      	ldrb	r2, [r7, #3]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <menu_vars+0x31c>)
 8000e50:	4413      	add	r3, r2
 8000e52:	3307      	adds	r3, #7
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e107      	b.n	8001068 <menu_vars+0x4d0>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e58:	78fa      	ldrb	r2, [r7, #3]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	3308      	adds	r3, #8
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <menu_vars+0x31c>)
 8000e66:	4413      	add	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	e0fd      	b.n	8001068 <menu_vars+0x4d0>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e0fa      	b.n	8001068 <menu_vars+0x4d0>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <menu_vars+0x320>)
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	e0f7      	b.n	8001068 <menu_vars+0x4d0>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e78:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <menu_vars+0x324>)
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e0f4      	b.n	8001068 <menu_vars+0x4d0>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <menu_vars+0x320>)
 8000e82:	4413      	add	r3, r2
 8000e84:	3302      	adds	r3, #2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e0ee      	b.n	8001068 <menu_vars+0x4d0>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	3310      	adds	r3, #16
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <menu_vars+0x320>)
 8000e90:	4413      	add	r3, r2
 8000e92:	3303      	adds	r3, #3
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	e0e7      	b.n	8001068 <menu_vars+0x4d0>
 8000e98:	20008bca 	.word	0x20008bca
 8000e9c:	20000438 	.word	0x20000438
 8000ea0:	2000f9a9 	.word	0x2000f9a9
 8000ea4:	0800dd00 	.word	0x0800dd00
 8000ea8:	2000c1dc 	.word	0x2000c1dc
 8000eac:	2000d044 	.word	0x2000d044
 8000eb0:	2000c588 	.word	0x2000c588
 8000eb4:	20000158 	.word	0x20000158
 8000eb8:	2000d014 	.word	0x2000d014
 8000ebc:	2000d015 	.word	0x2000d015
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	3320      	adds	r3, #32
 8000ec4:	4a6b      	ldr	r2, [pc, #428]	; (8001074 <menu_vars+0x4dc>)
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3304      	adds	r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	e0cc      	b.n	8001068 <menu_vars+0x4d0>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4a69      	ldr	r2, [pc, #420]	; (8001078 <menu_vars+0x4e0>)
 8000ed4:	4413      	add	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	e0c6      	b.n	8001068 <menu_vars+0x4d0>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000eda:	78fb      	ldrb	r3, [r7, #3]
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4a66      	ldr	r2, [pc, #408]	; (8001078 <menu_vars+0x4e0>)
 8000ee0:	4413      	add	r3, r2
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	e0bf      	b.n	8001068 <menu_vars+0x4d0>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4a62      	ldr	r2, [pc, #392]	; (8001078 <menu_vars+0x4e0>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e0b8      	b.n	8001068 <menu_vars+0x4d0>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4a5f      	ldr	r2, [pc, #380]	; (8001078 <menu_vars+0x4e0>)
 8000efc:	4413      	add	r3, r2
 8000efe:	3303      	adds	r3, #3
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	e0b1      	b.n	8001068 <menu_vars+0x4d0>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4a5b      	ldr	r2, [pc, #364]	; (8001078 <menu_vars+0x4e0>)
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	e0aa      	b.n	8001068 <menu_vars+0x4d0>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f12:	78fb      	ldrb	r3, [r7, #3]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4a58      	ldr	r2, [pc, #352]	; (8001078 <menu_vars+0x4e0>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	3307      	adds	r3, #7
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e0a3      	b.n	8001068 <menu_vars+0x4d0>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4a54      	ldr	r2, [pc, #336]	; (8001078 <menu_vars+0x4e0>)
 8000f26:	4413      	add	r3, r2
 8000f28:	3306      	adds	r3, #6
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e09c      	b.n	8001068 <menu_vars+0x4d0>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f2e:	78fb      	ldrb	r3, [r7, #3]
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	4a51      	ldr	r2, [pc, #324]	; (8001078 <menu_vars+0x4e0>)
 8000f34:	4413      	add	r3, r2
 8000f36:	3305      	adds	r3, #5
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e095      	b.n	8001068 <menu_vars+0x4d0>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f3c:	78fa      	ldrb	r2, [r7, #3]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4a4d      	ldr	r2, [pc, #308]	; (800107c <menu_vars+0x4e4>)
 8000f48:	4413      	add	r3, r2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	e08b      	b.n	8001068 <menu_vars+0x4d0>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f50:	78fa      	ldrb	r2, [r7, #3]
 8000f52:	4613      	mov	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4a48      	ldr	r2, [pc, #288]	; (800107c <menu_vars+0x4e4>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e082      	b.n	8001068 <menu_vars+0x4d0>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f62:	78fa      	ldrb	r2, [r7, #3]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4a43      	ldr	r2, [pc, #268]	; (800107c <menu_vars+0x4e4>)
 8000f6e:	4413      	add	r3, r2
 8000f70:	3303      	adds	r3, #3
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e078      	b.n	8001068 <menu_vars+0x4d0>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f76:	78fa      	ldrb	r2, [r7, #3]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4a3e      	ldr	r2, [pc, #248]	; (800107c <menu_vars+0x4e4>)
 8000f82:	4413      	add	r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e06e      	b.n	8001068 <menu_vars+0x4d0>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4a39      	ldr	r2, [pc, #228]	; (800107c <menu_vars+0x4e4>)
 8000f96:	4413      	add	r3, r2
 8000f98:	3305      	adds	r3, #5
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e064      	b.n	8001068 <menu_vars+0x4d0>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f9e:	78fa      	ldrb	r2, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4a35      	ldr	r2, [pc, #212]	; (8001080 <menu_vars+0x4e8>)
 8000faa:	4413      	add	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e05b      	b.n	8001068 <menu_vars+0x4d0>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4a31      	ldr	r2, [pc, #196]	; (8001080 <menu_vars+0x4e8>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e051      	b.n	8001068 <menu_vars+0x4d0>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4a2c      	ldr	r2, [pc, #176]	; (8001080 <menu_vars+0x4e8>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e047      	b.n	8001068 <menu_vars+0x4d0>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4a27      	ldr	r2, [pc, #156]	; (8001080 <menu_vars+0x4e8>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e03d      	b.n	8001068 <menu_vars+0x4d0>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000fec:	4b25      	ldr	r3, [pc, #148]	; (8001084 <menu_vars+0x4ec>)
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	e03a      	b.n	8001068 <menu_vars+0x4d0>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000ff2:	4b25      	ldr	r3, [pc, #148]	; (8001088 <menu_vars+0x4f0>)
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e037      	b.n	8001068 <menu_vars+0x4d0>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <menu_vars+0x4f4>)
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	e034      	b.n	8001068 <menu_vars+0x4d0>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <menu_vars+0x4f8>)
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	e031      	b.n	8001068 <menu_vars+0x4d0>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <menu_vars+0x4fc>)
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	e02e      	b.n	8001068 <menu_vars+0x4d0>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 800100a:	78fa      	ldrb	r2, [r7, #3]
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4a20      	ldr	r2, [pc, #128]	; (8001098 <menu_vars+0x500>)
 8001016:	4413      	add	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	e025      	b.n	8001068 <menu_vars+0x4d0>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <menu_vars+0x500>)
 8001028:	4413      	add	r3, r2
 800102a:	3301      	adds	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e01b      	b.n	8001068 <menu_vars+0x4d0>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <menu_vars+0x500>)
 800103c:	4413      	add	r3, r2
 800103e:	3302      	adds	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e011      	b.n	8001068 <menu_vars+0x4d0>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4a12      	ldr	r2, [pc, #72]	; (8001098 <menu_vars+0x500>)
 8001050:	4413      	add	r3, r2
 8001052:	3303      	adds	r3, #3
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e007      	b.n	8001068 <menu_vars+0x4d0>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <menu_vars+0x504>)
 800105c:	4413      	add	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	e002      	b.n	8001068 <menu_vars+0x4d0>


	default :		menu_vars_var1= NULL   ; break;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8001068:	693b      	ldr	r3, [r7, #16]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000d014 	.word	0x2000d014
 8001078:	200001e4 	.word	0x200001e4
 800107c:	2000d044 	.word	0x2000d044
 8001080:	2000c484 	.word	0x2000c484
 8001084:	20000212 	.word	0x20000212
 8001088:	20000213 	.word	0x20000213
 800108c:	20000214 	.word	0x20000214
 8001090:	20000215 	.word	0x20000215
 8001094:	20000208 	.word	0x20000208
 8001098:	2000c4c0 	.word	0x2000c4c0
 800109c:	20010dc4 	.word	0x20010dc4

080010a0 <menu_parser>:
}




void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 80010a6:	4a6b      	ldr	r2, [pc, #428]	; (8001254 <menu_parser+0x1b4>)
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b0:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 80010b4:	4a68      	ldr	r2, [pc, #416]	; (8001258 <menu_parser+0x1b8>)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010bc:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 80010c4:	f640 23ae 	movw	r3, #2734	; 0xaae
 80010c8:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 80010ca:	4b64      	ldr	r3, [pc, #400]	; (800125c <menu_parser+0x1bc>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	8aba      	ldrh	r2, [r7, #20]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	f0c0 80bb 	bcc.w	800124c <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 80010d6:	4b61      	ldr	r3, [pc, #388]	; (800125c <menu_parser+0x1bc>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <menu_parser+0x1c0>)
 80010de:	441a      	add	r2, r3
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	6810      	ldr	r0, [r2, #0]
 80010e6:	6851      	ldr	r1, [r2, #4]
 80010e8:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 80010ea:	2300      	movs	r3, #0
 80010ec:	75fb      	strb	r3, [r7, #23]
 80010ee:	e092      	b.n	8001216 <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <menu_parser+0x1c4>)
 80010f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	6851      	ldr	r1, [r2, #4]
 80010fe:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001100:	1d39      	adds	r1, r7, #4
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2208      	movs	r2, #8
 8001108:	4618      	mov	r0, r3
 800110a:	f00b fa89 	bl	800c620 <strncmp>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d17d      	bne.n	8001210 <menu_parser+0x170>
		    {

			    if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001114:	4b54      	ldr	r3, [pc, #336]	; (8001268 <menu_parser+0x1c8>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	2b6e      	cmp	r3, #110	; 0x6e
 800111a:	d909      	bls.n	8001130 <menu_parser+0x90>
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <menu_parser+0x1c8>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	2b7f      	cmp	r3, #127	; 0x7f
 8001122:	d805      	bhi.n	8001130 <menu_parser+0x90>
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <menu_parser+0x1c8>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	3310      	adds	r3, #16
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <menu_parser+0x1c8>)
 800112e:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>238)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <menu_parser+0x1c8>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	2bee      	cmp	r3, #238	; 0xee
 8001136:	d909      	bls.n	800114c <menu_parser+0xac>
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <menu_parser+0x1c8>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	2bff      	cmp	r3, #255	; 0xff
 800113e:	d805      	bhi.n	800114c <menu_parser+0xac>
 8001140:	4b49      	ldr	r3, [pc, #292]	; (8001268 <menu_parser+0x1c8>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	3310      	adds	r3, #16
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <menu_parser+0x1c8>)
 800114a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 800114c:	4b46      	ldr	r3, [pc, #280]	; (8001268 <menu_parser+0x1c8>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8001154:	d30a      	bcc.n	800116c <menu_parser+0xcc>
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <menu_parser+0x1c8>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800115e:	d205      	bcs.n	800116c <menu_parser+0xcc>
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <menu_parser+0x1c8>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	3310      	adds	r3, #16
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <menu_parser+0x1c8>)
 800116a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 800116c:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <menu_parser+0x1c8>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8001174:	d30a      	bcc.n	800118c <menu_parser+0xec>
 8001176:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <menu_parser+0x1c8>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117e:	d205      	bcs.n	800118c <menu_parser+0xec>
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <menu_parser+0x1c8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	3310      	adds	r3, #16
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b37      	ldr	r3, [pc, #220]	; (8001268 <menu_parser+0x1c8>)
 800118a:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <menu_parser+0x1c8>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001194:	d30a      	bcc.n	80011ac <menu_parser+0x10c>
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <menu_parser+0x1c8>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800119e:	d205      	bcs.n	80011ac <menu_parser+0x10c>
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <menu_parser+0x1c8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	3310      	adds	r3, #16
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <menu_parser+0x1c8>)
 80011aa:	801a      	strh	r2, [r3, #0]
			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	041a      	lsls	r2, r3, #16
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011b8:	18d1      	adds	r1, r2, r3
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <menu_parser+0x1cc>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <menu_parser+0x1d0>)
 80011c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80011c6:	4b29      	ldr	r3, [pc, #164]	; (800126c <menu_parser+0x1cc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <menu_parser+0x1d4>)
 80011d0:	18d0      	adds	r0, r2, r3
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <menu_parser+0x1bc>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	3b02      	subs	r3, #2
 80011d8:	4a21      	ldr	r2, [pc, #132]	; (8001260 <menu_parser+0x1c0>)
 80011da:	4413      	add	r3, r2
 80011dc:	2202      	movs	r2, #2
 80011de:	4619      	mov	r1, r3
 80011e0:	f00b fa08 	bl	800c5f4 <memcpy>
        			    menu_title_count++;
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <menu_parser+0x1cc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <menu_parser+0x1cc>)
 80011ee:	701a      	strb	r2, [r3, #0]
			    menu_counter++;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <menu_parser+0x1c8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <menu_parser+0x1c8>)
 80011fa:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <menu_parser+0x1d8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <menu_parser+0x1bc>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	3308      	adds	r3, #8
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b14      	ldr	r3, [pc, #80]	; (800125c <menu_parser+0x1bc>)
 800120c:	801a      	strh	r2, [r3, #0]
    			    return;}
 800120e:	e01e      	b.n	800124e <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3301      	adds	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b36      	cmp	r3, #54	; 0x36
 800121a:	f67f af69 	bls.w	80010f0 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <menu_parser+0x1d8>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d905      	bls.n	8001232 <menu_parser+0x192>
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <menu_parser+0x1c8>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <menu_parser+0x1c8>)
 8001230:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <menu_parser+0x1d8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <menu_parser+0x1d8>)
 800123c:	701a      	strb	r2, [r3, #0]
	    string_search++;
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <menu_parser+0x1bc>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <menu_parser+0x1bc>)
 8001248:	801a      	strh	r2, [r3, #0]
	    return;
 800124a:	e000      	b.n	800124e <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 800124c:	bf00      	nop

    }
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	0800cdfc 	.word	0x0800cdfc
 8001258:	0800ce04 	.word	0x0800ce04
 800125c:	2000d364 	.word	0x2000d364
 8001260:	0800d248 	.word	0x0800d248
 8001264:	20000438 	.word	0x20000438
 8001268:	2000d366 	.word	0x2000d366
 800126c:	2000d369 	.word	0x2000d369
 8001270:	2000d36c 	.word	0x2000d36c
 8001274:	2000d76c 	.word	0x2000d76c
 8001278:	2000d368 	.word	0x2000d368

0800127c <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 8001286:	2300      	movs	r3, #0
 8001288:	73bb      	strb	r3, [r7, #14]
 800128a:	e0f5      	b.n	8001478 <patch_target_parse+0x1fc>

			uint16_t* output_hold;
			uint8_t input_hold=patch[counter].input1;
 800128c:	7bba      	ldrb	r2, [r7, #14]
 800128e:	497f      	ldr	r1, [pc, #508]	; (800148c <patch_target_parse+0x210>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	717b      	strb	r3, [r7, #5]
			if (patch[counter].input1>=menu_lookup_count) patch[counter].input1=0;    // limit
 800129e:	7bba      	ldrb	r2, [r7, #14]
 80012a0:	497a      	ldr	r1, [pc, #488]	; (800148c <patch_target_parse+0x210>)
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b36      	cmp	r3, #54	; 0x36
 80012b0:	d908      	bls.n	80012c4 <patch_target_parse+0x48>
 80012b2:	7bba      	ldrb	r2, [r7, #14]
 80012b4:	4975      	ldr	r1, [pc, #468]	; (800148c <patch_target_parse+0x210>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	440b      	add	r3, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d840      	bhi.n	8001350 <patch_target_parse+0xd4>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <patch_target_parse+0x58>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012ff 	.word	0x080012ff
 80012dc:	0800131b 	.word	0x0800131b
 80012e0:	08001337 	.word	0x08001337

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	4613      	mov	r3, r2
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4a66      	ldr	r2, [pc, #408]	; (8001490 <patch_target_parse+0x214>)
 80012f6:	4413      	add	r3, r2
 80012f8:	3306      	adds	r3, #6
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	e028      	b.n	8001350 <patch_target_parse+0xd4>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 80012fe:	797b      	ldrb	r3, [r7, #5]
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	3318      	adds	r3, #24
 8001310:	4a5f      	ldr	r2, [pc, #380]	; (8001490 <patch_target_parse+0x214>)
 8001312:	4413      	add	r3, r2
 8001314:	3302      	adds	r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	e01a      	b.n	8001350 <patch_target_parse+0xd4>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800131a:	797b      	ldrb	r3, [r7, #5]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	3328      	adds	r3, #40	; 0x28
 800132c:	4a58      	ldr	r2, [pc, #352]	; (8001490 <patch_target_parse+0x214>)
 800132e:	4413      	add	r3, r2
 8001330:	3306      	adds	r3, #6
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	e00c      	b.n	8001350 <patch_target_parse+0xd4>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4a53      	ldr	r2, [pc, #332]	; (8001494 <patch_target_parse+0x218>)
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	bf00      	nop
			}

			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 8001350:	7bba      	ldrb	r2, [r7, #14]
 8001352:	494e      	ldr	r1, [pc, #312]	; (800148c <patch_target_parse+0x210>)
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	440b      	add	r3, r1
 800135e:	3320      	adds	r3, #32
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	601a      	str	r2, [r3, #0]
			if (patch[counter].target) {  // test if above zero
 8001364:	7bba      	ldrb	r2, [r7, #14]
 8001366:	4949      	ldr	r1, [pc, #292]	; (800148c <patch_target_parse+0x210>)
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	440b      	add	r3, r1
 8001372:	3301      	adds	r3, #1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07b      	beq.n	8001472 <patch_target_parse+0x1f6>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 800137a:	7bba      	ldrb	r2, [r7, #14]
 800137c:	4943      	ldr	r1, [pc, #268]	; (800148c <patch_target_parse+0x210>)
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	440b      	add	r3, r1
 8001388:	3301      	adds	r3, #1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00a      	b.n	80013aa <patch_target_parse+0x12e>
					if (patch_skip_list[target_input]==1)  target_input++;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	4a40      	ldr	r2, [pc, #256]	; (8001498 <patch_target_parse+0x21c>)
 8001398:	5cd3      	ldrb	r3, [r2, r3]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d102      	bne.n	80013a4 <patch_target_parse+0x128>
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3301      	adds	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b36      	cmp	r3, #54	; 0x36
 80013ae:	d9f1      	bls.n	8001394 <patch_target_parse+0x118>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b36      	cmp	r3, #54	; 0x36
 80013b4:	d901      	bls.n	80013ba <patch_target_parse+0x13e>
 80013b6:	2336      	movs	r3, #54	; 0x36
 80013b8:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b23      	cmp	r3, #35	; 0x23
 80013be:	d04e      	beq.n	800145e <patch_target_parse+0x1e2>
			patch[counter].target=target_input; // write back corrected value
 80013c0:	7bba      	ldrb	r2, [r7, #14]
 80013c2:	4932      	ldr	r1, [pc, #200]	; (800148c <patch_target_parse+0x210>)
 80013c4:	4613      	mov	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	3301      	adds	r3, #1
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80013d4:	7bba      	ldrb	r2, [r7, #14]
 80013d6:	492d      	ldr	r1, [pc, #180]	; (800148c <patch_target_parse+0x210>)
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	3302      	adds	r3, #2
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	71bb      	strb	r3, [r7, #6]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	4a2c      	ldr	r2, [pc, #176]	; (800149c <patch_target_parse+0x220>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	79ba      	ldrb	r2, [r7, #6]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d903      	bls.n	80013fc <patch_target_parse+0x180>
			{	target_index=menu_vars_index_limit[target_index]; }
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <patch_target_parse+0x220>)
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
 80013fa:	71bb      	strb	r3, [r7, #6]
			patch[counter].target_index=target_index;
 80013fc:	7bba      	ldrb	r2, [r7, #14]
 80013fe:	4923      	ldr	r1, [pc, #140]	; (800148c <patch_target_parse+0x210>)
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3302      	adds	r3, #2
 800140c:	79ba      	ldrb	r2, [r7, #6]
 800140e:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4a23      	ldr	r2, [pc, #140]	; (80014a0 <patch_target_parse+0x224>)
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	79ba      	ldrb	r2, [r7, #6]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fbbb 	bl	8000b98 <menu_vars>
 8001422:	6038      	str	r0, [r7, #0]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d023      	beq.n	8001472 <patch_target_parse+0x1f6>
 800142a:	7bba      	ldrb	r2, [r7, #14]
 800142c:	4917      	ldr	r1, [pc, #92]	; (800148c <patch_target_parse+0x210>)
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	331c      	adds	r3, #28
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	601a      	str	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <patch_target_parse+0x228>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	7bba      	ldrb	r2, [r7, #14]
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <patch_target_parse+0x22c>)
 8001448:	5c58      	ldrb	r0, [r3, r1]
 800144a:	4910      	ldr	r1, [pc, #64]	; (800148c <patch_target_parse+0x210>)
 800144c:	4613      	mov	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3324      	adds	r3, #36	; 0x24
 8001458:	4602      	mov	r2, r0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	e009      	b.n	8001472 <patch_target_parse+0x1f6>
				}
				else patch[counter].target=0;  // write back 0 if failed
 800145e:	7bba      	ldrb	r2, [r7, #14]
 8001460:	490a      	ldr	r1, [pc, #40]	; (800148c <patch_target_parse+0x210>)
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	3301      	adds	r3, #1
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	3301      	adds	r3, #1
 8001476:	73bb      	strb	r3, [r7, #14]
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	2b13      	cmp	r3, #19
 800147c:	f67f af06 	bls.w	800128c <patch_target_parse+0x10>
			}
		}
	}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000d044 	.word	0x2000d044
 8001490:	2000c1dc 	.word	0x2000c1dc
 8001494:	2000c4c0 	.word	0x2000c4c0
 8001498:	0800dd70 	.word	0x0800dd70
 800149c:	0800dd00 	.word	0x0800dd00
 80014a0:	20000438 	.word	0x20000438
 80014a4:	2000f9a9 	.word	0x2000f9a9
 80014a8:	0800dd38 	.word	0x0800dd38

080014ac <patch_target_replace>:
			*ptr_to_modify =var_replaced;   // replace original value,ok
		}
	}
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 80014ac:	b490      	push	{r4, r7}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <patch_target_replace+0xe0>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	737b      	strb	r3, [r7, #13]
	    uint8_t counter;
	    for (counter=0;counter<20;counter++){
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e05a      	b.n	8001578 <patch_target_replace+0xcc>



		    if (patch[counter].target) {         // check first for enable
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	4932      	ldr	r1, [pc, #200]	; (8001590 <patch_target_replace+0xe4>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	440b      	add	r3, r1
 80014d0:	3301      	adds	r3, #1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d04c      	beq.n	8001572 <patch_target_replace+0xc6>

			    patch[counter].output[loop_position]=*(patch[counter].in1_ptr+(loop_position));   //write output here
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	492d      	ldr	r1, [pc, #180]	; (8001590 <patch_target_replace+0xe4>)
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	440b      	add	r3, r1
 80014e6:	3320      	adds	r3, #32
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	7b79      	ldrb	r1, [r7, #13]
 80014f4:	881c      	ldrh	r4, [r3, #0]
 80014f6:	4826      	ldr	r0, [pc, #152]	; (8001590 <patch_target_replace+0xe4>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4403      	add	r3, r0
 8001506:	4622      	mov	r2, r4
 8001508:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	4920      	ldr	r1, [pc, #128]	; (8001590 <patch_target_replace+0xe4>)
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	331c      	adds	r3, #28
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60bb      	str	r3, [r7, #8]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	7b79      	ldrb	r1, [r7, #13]
 8001522:	481b      	ldr	r0, [pc, #108]	; (8001590 <patch_target_replace+0xe4>)
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4403      	add	r3, r0
 8001532:	88db      	ldrh	r3, [r3, #6]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	80fb      	strh	r3, [r7, #6]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	717b      	strb	r3, [r7, #5]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 800153c:	88fb      	ldrh	r3, [r7, #6]
 800153e:	73bb      	strb	r3, [r7, #14]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	4913      	ldr	r1, [pc, #76]	; (8001590 <patch_target_replace+0xe4>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3324      	adds	r3, #36	; 0x24
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	7bba      	ldrb	r2, [r7, #14]
 8001554:	429a      	cmp	r2, r3
 8001556:	d909      	bls.n	800156c <patch_target_replace+0xc0>
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <patch_target_replace+0xe4>)
 800155c:	4613      	mov	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	440b      	add	r3, r1
 8001566:	3324      	adds	r3, #36	; 0x24
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	73bb      	strb	r3, [r7, #14]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	7bba      	ldrb	r2, [r7, #14]
 8001570:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	3301      	adds	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	2b13      	cmp	r3, #19
 800157c:	d9a1      	bls.n	80014c2 <patch_target_replace+0x16>
		    }
	    }
    }
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bc90      	pop	{r4, r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000d980 	.word	0x2000d980
 8001590:	2000d044 	.word	0x2000d044

08001594 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d118      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 80015a6:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80015ae:	4413      	add	r3, r2
 80015b0:	2236      	movs	r2, #54	; 0x36
 80015b2:	4619      	mov	r1, r3
 80015b4:	482c      	ldr	r0, [pc, #176]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80015b6:	f008 fe15 	bl	800a1e4 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80015c2:	d206      	bcs.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3336      	adds	r3, #54	; 0x36
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	e002      	b.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0x44>
 80015d2:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a23      	ldr	r2, [pc, #140]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d137      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80015ec:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015fe:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b29b      	uxth	r3, r3
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	3301      	adds	r3, #1
 800160a:	4a1b      	ldr	r2, [pc, #108]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800160c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001612:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001614:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800161e:	4293      	cmp	r3, r2
 8001620:	d906      	bls.n	8001630 <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001624:	2202      	movs	r2, #2
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	e006      	b.n	800163e <HAL_TIM_PeriodElapsedCallback+0xaa>
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	b29b      	uxth	r3, r3
 8001636:	3301      	adds	r3, #1
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800163c:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b29a      	uxth	r2, r3
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001646:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001650:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40014400 	.word	0x40014400
 8001660:	20010bb4 	.word	0x20010bb4
 8001664:	2000fbb4 	.word	0x2000fbb4
 8001668:	2001159c 	.word	0x2001159c
 800166c:	40000400 	.word	0x40000400
 8001670:	2000c1d8 	.word	0x2000c1d8
 8001674:	20009bd0 	.word	0x20009bd0
 8001678:	20008bcc 	.word	0x20008bcc
 800167c:	20009bd2 	.word	0x20009bd2
 8001680:	20009bd4 	.word	0x20009bd4
 8001684:	2000014e 	.word	0x2000014e

08001688 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800168c:	4b32      	ldr	r3, [pc, #200]	; (8001758 <analoginputloopb+0xd0>)
 800168e:	889b      	ldrh	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	b29b      	uxth	r3, r3
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <analoginputloopb+0xd4>)
 8001698:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <analoginputloopb+0xd0>)
 800169c:	2200      	movs	r2, #0
 800169e:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 80016a0:	4b2f      	ldr	r3, [pc, #188]	; (8001760 <analoginputloopb+0xd8>)
 80016a2:	881a      	ldrh	r2, [r3, #0]
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <analoginputloopb+0xd0>)
 80016a6:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80016a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80016b2:	337f      	adds	r3, #127	; 0x7f
 80016b4:	085b      	lsrs	r3, r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b2a      	ldr	r3, [pc, #168]	; (8001764 <analoginputloopb+0xdc>)
 80016ba:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <analoginputloopb+0xe0>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80016c4:	337f      	adds	r3, #127	; 0x7f
 80016c6:	085b      	lsrs	r3, r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b28      	ldr	r3, [pc, #160]	; (800176c <analoginputloopb+0xe4>)
 80016cc:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 80016ce:	4b25      	ldr	r3, [pc, #148]	; (8001764 <analoginputloopb+0xdc>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b27      	ldr	r3, [pc, #156]	; (8001770 <analoginputloopb+0xe8>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d908      	bls.n	80016ec <analoginputloopb+0x64>
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <analoginputloopb+0xec>)
 80016dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <analoginputloopb+0xec>)
 80016ea:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <analoginputloopb+0xdc>)
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <analoginputloopb+0xe8>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d208      	bcs.n	800170a <analoginputloopb+0x82>
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <analoginputloopb+0xec>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21a      	sxth	r2, r3
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <analoginputloopb+0xec>)
 8001708:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <analoginputloopb+0xe4>)
 800170c:	881b      	ldrh	r3, [r3, #0]
 800170e:	43db      	mvns	r3, r3
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <analoginputloopb+0xd8>)
 8001714:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <analoginputloopb+0xec>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001720:	4293      	cmp	r3, r2
 8001722:	dd02      	ble.n	800172a <analoginputloopb+0xa2>
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <analoginputloopb+0xec>)
 8001726:	2200      	movs	r2, #0
 8001728:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 800172a:	4b12      	ldr	r3, [pc, #72]	; (8001774 <analoginputloopb+0xec>)
 800172c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001730:	2b00      	cmp	r3, #0
 8001732:	da03      	bge.n	800173c <analoginputloopb+0xb4>
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <analoginputloopb+0xec>)
 8001736:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800173a:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <analoginputloopb+0xdc>)
 800173e:	881a      	ldrh	r2, [r3, #0]
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <analoginputloopb+0xe8>)
 8001742:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <analoginputloopb+0xe4>)
 8001746:	881a      	ldrh	r2, [r3, #0]
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <analoginputloopb+0xf0>)
 800174a:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000b418 	.word	0x2000b418
 800175c:	20008bc2 	.word	0x20008bc2
 8001760:	2000b402 	.word	0x2000b402
 8001764:	2000b3fa 	.word	0x2000b3fa
 8001768:	40000800 	.word	0x40000800
 800176c:	2000b3fe 	.word	0x2000b3fe
 8001770:	2000b3fc 	.word	0x2000b3fc
 8001774:	2000b404 	.word	0x2000b404
 8001778:	2000b400 	.word	0x2000b400

0800177c <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <note_reset+0x78>)
 8001782:	22ff      	movs	r2, #255	; 0xff
 8001784:	71da      	strb	r2, [r3, #7]
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <note_reset+0x78>)
 8001788:	22ff      	movs	r2, #255	; 0xff
 800178a:	755a      	strb	r2, [r3, #21]
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <note_reset+0x78>)
 800178e:	22ff      	movs	r2, #255	; 0xff
 8001790:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <note_reset+0x78>)
 8001796:	22ff      	movs	r2, #255	; 0xff
 8001798:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <note_reset+0x78>)
 800179e:	22ff      	movs	r2, #255	; 0xff
 80017a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <note_reset+0x78>)
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <note_reset+0x78>)
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <note_reset+0x78>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	721a      	strb	r2, [r3, #8]
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <note_reset+0x78>)
 80017bc:	2200      	movs	r2, #0
 80017be:	759a      	strb	r2, [r3, #22]
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <note_reset+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <note_reset+0x78>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <note_reset+0x78>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 80017d8:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <note_reset+0x78>)
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <note_reset+0x78>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000158 	.word	0x20000158

080017f8 <main_initial>:

void main_initial(void){
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b0df      	sub	sp, #380	; 0x17c
 80017fc:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 80017fe:	4bc4      	ldr	r3, [pc, #784]	; (8001b10 <main_initial+0x318>)
 8001800:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160



	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001804:	48c3      	ldr	r0, [pc, #780]	; (8001b14 <main_initial+0x31c>)
 8001806:	f008 f875 	bl	80098f4 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 800180a:	48c3      	ldr	r0, [pc, #780]	; (8001b18 <main_initial+0x320>)
 800180c:	f008 f872 	bl	80098f4 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001810:	48c2      	ldr	r0, [pc, #776]	; (8001b1c <main_initial+0x324>)
 8001812:	f009 f9e5 	bl	800abe0 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001816:	4bc2      	ldr	r3, [pc, #776]	; (8001b20 <main_initial+0x328>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 800181c:	48c1      	ldr	r0, [pc, #772]	; (8001b24 <main_initial+0x32c>)
 800181e:	f009 f985 	bl	800ab2c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001822:	48c1      	ldr	r0, [pc, #772]	; (8001b28 <main_initial+0x330>)
 8001824:	f009 f982 	bl	800ab2c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001828:	2100      	movs	r1, #0
 800182a:	48bc      	ldr	r0, [pc, #752]	; (8001b1c <main_initial+0x324>)
 800182c:	f009 faec 	bl	800ae08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001830:	2104      	movs	r1, #4
 8001832:	48ba      	ldr	r0, [pc, #744]	; (8001b1c <main_initial+0x324>)
 8001834:	f009 fae8 	bl	800ae08 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001842:	48ba      	ldr	r0, [pc, #744]	; (8001b2c <main_initial+0x334>)
 8001844:	f004 fd6a 	bl	800631c <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001848:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800184c:	49b8      	ldr	r1, [pc, #736]	; (8001b30 <main_initial+0x338>)
 800184e:	48b7      	ldr	r0, [pc, #732]	; (8001b2c <main_initial+0x334>)
 8001850:	f004 fea4 	bl	800659c <HAL_ADC_Start_DMA>

	HAL_DMA_Init(&hdma_spi2_tx);
 8001854:	48b7      	ldr	r0, [pc, #732]	; (8001b34 <main_initial+0x33c>)
 8001856:	f005 fe9f 	bl	8007598 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 800185a:	48b7      	ldr	r0, [pc, #732]	; (8001b38 <main_initial+0x340>)
 800185c:	f005 fe9c 	bl	8007598 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001860:	48b6      	ldr	r0, [pc, #728]	; (8001b3c <main_initial+0x344>)
 8001862:	f005 fe99 	bl	8007598 <HAL_DMA_Init>


	HAL_I2C_MspInit(&hi2c2);
 8001866:	48b6      	ldr	r0, [pc, #728]	; (8001b40 <main_initial+0x348>)
 8001868:	f004 f8e8 	bl	8005a3c <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 800186c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001870:	f5a3 768a 	sub.w	r6, r3, #276	; 0x114
 8001874:	4bb3      	ldr	r3, [pc, #716]	; (8001b44 <main_initial+0x34c>)
 8001876:	4634      	mov	r4, r6
 8001878:	461d      	mov	r5, r3
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	8022      	strh	r2, [r4, #0]
 8001884:	3402      	adds	r4, #2
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	7023      	strb	r3, [r4, #0]
 800188a:	f106 0313 	add.w	r3, r6, #19
 800188e:	22f1      	movs	r2, #241	; 0xf1
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f00a febc 	bl	800c610 <memset>
	HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

	*/


	HAL_Delay(5);
 8001898:	2005      	movs	r0, #5
 800189a:	f004 fcd7 	bl	800624c <HAL_Delay>

	//               ----                  16Mbyte   flash   , w25q128   -----  16M (24bit) * 8bits   ( 1 page 256 bytes)
		send_spi1[0]=0x06; //enable write  , only lasts for single operation
 800189e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018a6:	2206      	movs	r2, #6
 80018a8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 80018aa:	2200      	movs	r2, #0
 80018ac:	2110      	movs	r1, #16
 80018ae:	48a6      	ldr	r0, [pc, #664]	; (8001b48 <main_initial+0x350>)
 80018b0:	f006 fbd6 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);       // enable write
 80018b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80018b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018bc:	2201      	movs	r2, #1
 80018be:	4896      	ldr	r0, [pc, #600]	; (8001b18 <main_initial+0x320>)
 80018c0:	f008 f8a1 	bl	8009a06 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 80018c4:	2201      	movs	r2, #1
 80018c6:	2110      	movs	r1, #16
 80018c8:	489f      	ldr	r0, [pc, #636]	; (8001b48 <main_initial+0x350>)
 80018ca:	f006 fbc9 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f004 fcbc 	bl	800624c <HAL_Delay>
		send_spi1[0]=0x20; //sector erase
 80018d4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018dc:	2220      	movs	r2, #32
 80018de:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=0; //24bit address msb
 80018e0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018e8:	2200      	movs	r2, #0
 80018ea:	705a      	strb	r2, [r3, #1]
		send_spi1[2]=0; //24bit address
 80018ec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80018f4:	2200      	movs	r2, #0
 80018f6:	709a      	strb	r2, [r3, #2]
		send_spi1[3]=1; //24bit address lsb
 80018f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001900:	2201      	movs	r2, #1
 8001902:	70da      	strb	r2, [r3, #3]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8001904:	2200      	movs	r2, #0
 8001906:	2110      	movs	r1, #16
 8001908:	488f      	ldr	r0, [pc, #572]	; (8001b48 <main_initial+0x350>)
 800190a:	f006 fba9 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 800190e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	2204      	movs	r2, #4
 8001918:	487f      	ldr	r0, [pc, #508]	; (8001b18 <main_initial+0x320>)
 800191a:	f008 f874 	bl	8009a06 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800191e:	2201      	movs	r2, #1
 8001920:	2110      	movs	r1, #16
 8001922:	4889      	ldr	r0, [pc, #548]	; (8001b48 <main_initial+0x350>)
 8001924:	f006 fb9c 	bl	8008060 <HAL_GPIO_WritePin>


		send_spi1[0]=0x05; //read status register  if writing
 8001928:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800192c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001930:	2205      	movs	r2, #5
 8001932:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=0; //24bit address msb
 8001934:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001938:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800193c:	2200      	movs	r2, #0
 800193e:	705a      	strb	r2, [r3, #1]
		status_reg[1]=1; // set busy on
 8001940:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <main_initial+0x354>)
 8001942:	2201      	movs	r2, #1
 8001944:	705a      	strb	r2, [r3, #1]

		while (status_reg[1]&1){								// check if write busy
 8001946:	e012      	b.n	800196e <main_initial+0x176>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2110      	movs	r1, #16
 800194c:	487e      	ldr	r0, [pc, #504]	; (8001b48 <main_initial+0x350>)
 800194e:	f006 fb87 	bl	8008060 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8001952:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001956:	23c8      	movs	r3, #200	; 0xc8
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	4a7b      	ldr	r2, [pc, #492]	; (8001b4c <main_initial+0x354>)
 800195e:	486e      	ldr	r0, [pc, #440]	; (8001b18 <main_initial+0x320>)
 8001960:	f008 fa9e 	bl	8009ea0 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8001964:	2201      	movs	r2, #1
 8001966:	2110      	movs	r1, #16
 8001968:	4877      	ldr	r0, [pc, #476]	; (8001b48 <main_initial+0x350>)
 800196a:	f006 fb79 	bl	8008060 <HAL_GPIO_WritePin>
		while (status_reg[1]&1){								// check if write busy
 800196e:	4b77      	ldr	r3, [pc, #476]	; (8001b4c <main_initial+0x354>)
 8001970:	785b      	ldrb	r3, [r3, #1]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e6      	bne.n	8001948 <main_initial+0x150>
		}

		send_spi1[0]=0x06; //enable write again
 800197a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800197e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001982:	2206      	movs	r2, #6
 8001984:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2110      	movs	r1, #16
 800198a:	486f      	ldr	r0, [pc, #444]	; (8001b48 <main_initial+0x350>)
 800198c:	f006 fb68 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001990:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001998:	2201      	movs	r2, #1
 800199a:	485f      	ldr	r0, [pc, #380]	; (8001b18 <main_initial+0x320>)
 800199c:	f008 f833 	bl	8009a06 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2110      	movs	r1, #16
 80019a4:	4868      	ldr	r0, [pc, #416]	; (8001b48 <main_initial+0x350>)
 80019a6:	f006 fb5b 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 80019aa:	2005      	movs	r0, #5
 80019ac:	f004 fc4e 	bl	800624c <HAL_Delay>

		//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
		uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 80019b0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80019b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80019b8:	4a65      	ldr	r2, [pc, #404]	; (8001b50 <main_initial+0x358>)
 80019ba:	461c      	mov	r4, r3
 80019bc:	4615      	mov	r5, r2
 80019be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	8023      	strh	r3, [r4, #0]
		memcpy  (send_spi1,temp_spi1, 16);   // copy new array over old
 80019c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80019ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ce:	2210      	movs	r2, #16
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00a fe0f 	bl	800c5f4 <memcpy>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 80019d6:	2200      	movs	r2, #0
 80019d8:	2110      	movs	r1, #16
 80019da:	485b      	ldr	r0, [pc, #364]	; (8001b48 <main_initial+0x350>)
 80019dc:	f006 fb40 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 16, 1000);  //address,then data
 80019e0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	2210      	movs	r2, #16
 80019ea:	484b      	ldr	r0, [pc, #300]	; (8001b18 <main_initial+0x320>)
 80019ec:	f008 f80b 	bl	8009a06 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 80019f0:	2201      	movs	r2, #1
 80019f2:	2110      	movs	r1, #16
 80019f4:	4854      	ldr	r0, [pc, #336]	; (8001b48 <main_initial+0x350>)
 80019f6:	f006 fb33 	bl	8008060 <HAL_GPIO_WritePin>

		HAL_Delay(25);
 80019fa:	2019      	movs	r0, #25
 80019fc:	f004 fc26 	bl	800624c <HAL_Delay>
		send_spi1[0]=0x04; //disable write
 8001a00:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a08:	2204      	movs	r2, #4
 8001a0a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2110      	movs	r1, #16
 8001a10:	484d      	ldr	r0, [pc, #308]	; (8001b48 <main_initial+0x350>)
 8001a12:	f006 fb25 	bl	8008060 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a16:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1e:	2201      	movs	r2, #1
 8001a20:	483d      	ldr	r0, [pc, #244]	; (8001b18 <main_initial+0x320>)
 8001a22:	f007 fff0 	bl	8009a06 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8001a26:	2201      	movs	r2, #1
 8001a28:	2110      	movs	r1, #16
 8001a2a:	4847      	ldr	r0, [pc, #284]	; (8001b48 <main_initial+0x350>)
 8001a2c:	f006 fb18 	bl	8008060 <HAL_GPIO_WritePin>

		HAL_Delay(5);
 8001a30:	2005      	movs	r0, #5
 8001a32:	f004 fc0b 	bl	800624c <HAL_Delay>
	//	memcpy  (send_spi1,return_spi1, 14);   // clear out
		send_spi1[0]=0x03; //read page 1
 8001a36:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a3e:	2203      	movs	r2, #3
 8001a40:	701a      	strb	r2, [r3, #0]
		send_spi1[1]=0; //24bit address msb
 8001a42:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a46:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	705a      	strb	r2, [r3, #1]
		send_spi1[2]=0; //24bit address
 8001a4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a56:	2200      	movs	r2, #0
 8001a58:	709a      	strb	r2, [r3, #2]
		send_spi1[3]=1; //24bit address lsb
 8001a5a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001a5e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a62:	2201      	movs	r2, #1
 8001a64:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4837      	ldr	r0, [pc, #220]	; (8001b48 <main_initial+0x350>)
 8001a6c:	f006 faf8 	bl	8008060 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100); // request data
 8001a70:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	2204      	movs	r2, #4
 8001a78:	4827      	ldr	r0, [pc, #156]	; (8001b18 <main_initial+0x320>)
 8001a7a:	f007 ffc4 	bl	8009a06 <HAL_SPI_Transmit>
		HAL_SPI_Receive (&hspi1, return_spi1, 12, 100);   // works fine
 8001a7e:	2364      	movs	r3, #100	; 0x64
 8001a80:	220c      	movs	r2, #12
 8001a82:	4934      	ldr	r1, [pc, #208]	; (8001b54 <main_initial+0x35c>)
 8001a84:	4824      	ldr	r0, [pc, #144]	; (8001b18 <main_initial+0x320>)
 8001a86:	f008 f8fa 	bl	8009c7e <HAL_SPI_Receive>

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2110      	movs	r1, #16
 8001a8e:	482e      	ldr	r0, [pc, #184]	; (8001b48 <main_initial+0x350>)
 8001a90:	f006 fae6 	bl	8008060 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8001a94:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	481e      	ldr	r0, [pc, #120]	; (8001b18 <main_initial+0x320>)
 8001aa0:	f007 ffb1 	bl	8009a06 <HAL_SPI_Transmit>


	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001aa4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001aa8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	223c      	movs	r2, #60	; 0x3c
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f00a fdaa 	bl	800c610 <memset>
	uint16_t mem_count2=0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
	uint16_t mem_counter=0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
	HAL_SPI_Receive_DMA(&hspi1, flash_read_block2, 512);  // ignore first 4 bytes
	HAL_SPI_Transmit (&hspi1, send_spi1, 516, 10); // request data
*/
//flash_page_read(256);

	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001acc:	9302      	str	r3, [sp, #8]
 8001ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <main_initial+0x360>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2302      	movs	r3, #2
 8001ada:	2240      	movs	r2, #64	; 0x40
 8001adc:	21a0      	movs	r1, #160	; 0xa0
 8001ade:	4818      	ldr	r0, [pc, #96]	; (8001b40 <main_initial+0x348>)
 8001ae0:	f006 fd2e 	bl	8008540 <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <main_initial+0x364>)
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <main_initial+0x360>)
 8001ae8:	4614      	mov	r4, r2
 8001aea:	461d      	mov	r5, r3
 8001aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001af8:	c407      	stmia	r4!, {r0, r1, r2}
 8001afa:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <main_initial+0x368>)
 8001afe:	22a0      	movs	r2, #160	; 0xa0
 8001b00:	4619      	mov	r1, r3
 8001b02:	4818      	ldr	r0, [pc, #96]	; (8001b64 <main_initial+0x36c>)
 8001b04:	f00a fd76 	bl	800c5f4 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
 8001b0e:	e0ac      	b.n	8001c6a <main_initial+0x472>
 8001b10:	0800d2f0 	.word	0x0800d2f0
 8001b14:	2001159c 	.word	0x2001159c
 8001b18:	20011544 	.word	0x20011544
 8001b1c:	2001175c 	.word	0x2001175c
 8001b20:	40000400 	.word	0x40000400
 8001b24:	20011714 	.word	0x20011714
 8001b28:	200117a4 	.word	0x200117a4
 8001b2c:	20011448 	.word	0x20011448
 8001b30:	20009bdc 	.word	0x20009bdc
 8001b34:	200116b4 	.word	0x200116b4
 8001b38:	200115f4 	.word	0x200115f4
 8001b3c:	20011654 	.word	0x20011654
 8001b40:	200114f0 	.word	0x200114f0
 8001b44:	0800ce0c 	.word	0x0800ce0c
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	20000154 	.word	0x20000154
 8001b50:	0800cf10 	.word	0x0800cf10
 8001b54:	2000c1c4 	.word	0x2000c1c4
 8001b58:	20008960 	.word	0x20008960
 8001b5c:	2000d014 	.word	0x2000d014
 8001b60:	200089fc 	.word	0x200089fc
 8001b64:	20000158 	.word	0x20000158

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001b68:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4aaa      	ldr	r2, [pc, #680]	; (8001e20 <main_initial+0x628>)
 8001b76:	1898      	adds	r0, r3, r2
 8001b78:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	332e      	adds	r3, #46	; 0x2e
 8001b86:	4aa7      	ldr	r2, [pc, #668]	; (8001e24 <main_initial+0x62c>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	2206      	movs	r2, #6
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f00a fd31 	bl	800c5f4 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001b92:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001b96:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4aa2      	ldr	r2, [pc, #648]	; (8001e28 <main_initial+0x630>)
 8001ba0:	1898      	adds	r0, r3, r2
 8001ba2:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	336a      	adds	r3, #106	; 0x6a
 8001bae:	4a9d      	ldr	r2, [pc, #628]	; (8001e24 <main_initial+0x62c>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2205      	movs	r2, #5
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f00a fd1d 	bl	800c5f4 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*3),3 );
 8001bba:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4a99      	ldr	r2, [pc, #612]	; (8001e2c <main_initial+0x634>)
 8001bc8:	1898      	adds	r0, r3, r2
 8001bca:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001bd8:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <main_initial+0x62c>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4619      	mov	r1, r3
 8001be0:	f00a fd08 	bl	800c5f4 <memcpy>
			memcpy(&patch[mem_counter+10],potSource+346+(mem_counter*3),3 );
 8001be4:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001be8:	f103 020a 	add.w	r2, r3, #10
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4a8d      	ldr	r2, [pc, #564]	; (8001e2c <main_initial+0x634>)
 8001bf6:	1898      	adds	r0, r3, r2
 8001bf8:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 8001c06:	4a87      	ldr	r2, [pc, #540]	; (8001e24 <main_initial+0x62c>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f00a fcf1 	bl	800c5f4 <memcpy>
			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001c12:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4a84      	ldr	r2, [pc, #528]	; (8001e30 <main_initial+0x638>)
 8001c20:	1898      	adds	r0, r3, r2
 8001c22:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c32:	4a7c      	ldr	r2, [pc, #496]	; (8001e24 <main_initial+0x62c>)
 8001c34:	4413      	add	r3, r2
 8001c36:	2206      	movs	r2, #6
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f00a fcdb 	bl	800c5f4 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001c3e:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <main_initial+0x63c>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001c58:	4972      	ldr	r1, [pc, #456]	; (8001e24 <main_initial+0x62c>)
 8001c5a:	440a      	add	r2, r1
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	601a      	str	r2, [r3, #0]
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001c60:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001c64:	3301      	adds	r3, #1
 8001c66:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
 8001c6a:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	f67f af7a 	bls.w	8001b68 <main_initial+0x370>
	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001c74:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <main_initial+0x640>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e057      	b.n	8001d2c <main_initial+0x534>

		for 	(n=0;n<18;n++){					// this is ok
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <main_initial+0x644>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	e049      	b.n	8001d18 <main_initial+0x520>
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001c84:	4b6d      	ldr	r3, [pc, #436]	; (8001e3c <main_initial+0x644>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d114      	bne.n	8001cb6 <main_initial+0x4be>
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <main_initial+0x640>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <main_initial+0x640>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	440b      	add	r3, r1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <main_initial+0x644>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	440b      	add	r3, r1
 8001cae:	3a80      	subs	r2, #128	; 0x80
 8001cb0:	b2d1      	uxtb	r1, r2
 8001cb2:	4a63      	ldr	r2, [pc, #396]	; (8001e40 <main_initial+0x648>)
 8001cb4:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <main_initial+0x644>)
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d114      	bne.n	8001ce8 <main_initial+0x4f0>
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	; (8001e38 <main_initial+0x640>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3310      	adds	r3, #16
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b5b      	ldr	r3, [pc, #364]	; (8001e38 <main_initial+0x640>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	440b      	add	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <main_initial+0x644>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	440b      	add	r3, r1
 8001ce0:	00d2      	lsls	r2, r2, #3
 8001ce2:	b2d1      	uxtb	r1, r2
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <main_initial+0x648>)
 8001ce6:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <main_initial+0x644>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d90d      	bls.n	8001d0c <main_initial+0x514>
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <main_initial+0x640>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b4e      	ldr	r3, [pc, #312]	; (8001e3c <main_initial+0x644>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <main_initial+0x648>)
 8001d08:	21ff      	movs	r1, #255	; 0xff
 8001d0a:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001d0c:	4b4b      	ldr	r3, [pc, #300]	; (8001e3c <main_initial+0x644>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <main_initial+0x644>)
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	4b48      	ldr	r3, [pc, #288]	; (8001e3c <main_initial+0x644>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	2b11      	cmp	r3, #17
 8001d1e:	d9b1      	bls.n	8001c84 <main_initial+0x48c>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <main_initial+0x640>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <main_initial+0x640>)
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <main_initial+0x640>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	2b3f      	cmp	r3, #63	; 0x3f
 8001d32:	d9a3      	bls.n	8001c7c <main_initial+0x484>

		}

		}
	seq.pos=0;
 8001d34:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <main_initial+0x64c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <main_initial+0x640>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	801a      	strh	r2, [r3, #0]
 8001d46:	e01a      	b.n	8001d7e <main_initial+0x586>
	  		tempo_hold=i;
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <main_initial+0x640>)
 8001d4a:	881b      	ldrh	r3, [r3, #0]
 8001d4c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001d50:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	4a3c      	ldr	r2, [pc, #240]	; (8001e48 <main_initial+0x650>)
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

	  	tempo_lut[i]=tempo_hold;
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <main_initial+0x640>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d6a:	b299      	uxth	r1, r3
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <main_initial+0x654>)
 8001d6e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <main_initial+0x640>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <main_initial+0x640>)
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <main_initial+0x640>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d9e0      	bls.n	8001d48 <main_initial+0x550>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <main_initial+0x658>)
 8001d88:	2218      	movs	r2, #24
 8001d8a:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <main_initial+0x640>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e00b      	b.n	8001dac <main_initial+0x5b4>
			spell[i]=67;
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <main_initial+0x640>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <main_initial+0x65c>)
 8001d9c:	2143      	movs	r1, #67	; 0x43
 8001d9e:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <main_initial+0x640>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	3301      	adds	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <main_initial+0x640>)
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <main_initial+0x640>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001db4:	d3ee      	bcc.n	8001d94 <main_initial+0x59c>

		}

		gfx_clear();
 8001db6:	f002 fa4f 	bl	8004258 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8001dc0:	e006      	b.n	8001dd0 <main_initial+0x5d8>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001dc2:	f7ff f96d 	bl	80010a0 <menu_parser>
	for (pars_counter=0;pars_counter<1000;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001dc6:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8001dd0:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dd8:	d3f3      	bcc.n	8001dc2 <main_initial+0x5ca>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <main_initial+0x640>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	e005      	b.n	8001dee <main_initial+0x5f6>
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <main_initial+0x640>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <main_initial+0x640>)
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <main_initial+0x640>)
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df6:	d3f4      	bcc.n	8001de2 <main_initial+0x5ea>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <main_initial+0x640>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	e005      	b.n	8001e0c <main_initial+0x614>
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <main_initial+0x640>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <main_initial+0x640>)
 8001e0a:	801a      	strh	r2, [r3, #0]
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <main_initial+0x640>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e14:	d3f4      	bcc.n	8001e00 <main_initial+0x608>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8001e1c:	e029      	b.n	8001e72 <main_initial+0x67a>
 8001e1e:	bf00      	nop
 8001e20:	2000c1dc 	.word	0x2000c1dc
 8001e24:	20008960 	.word	0x20008960
 8001e28:	2000c588 	.word	0x2000c588
 8001e2c:	2000d044 	.word	0x2000d044
 8001e30:	2000c484 	.word	0x2000c484
 8001e34:	2000c4c0 	.word	0x2000c4c0
 8001e38:	20008bca 	.word	0x20008bca
 8001e3c:	20008bc4 	.word	0x20008bc4
 8001e40:	2000b930 	.word	0x2000b930
 8001e44:	2000d014 	.word	0x2000d014
 8001e48:	0020b584 	.word	0x0020b584
 8001e4c:	2000b52c 	.word	0x2000b52c
 8001e50:	2000875c 	.word	0x2000875c
 8001e54:	20000000 	.word	0x20000000
 8001e58:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <main_initial+0x6fc>)
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	5499      	strb	r1, [r3, r2]
 8001e68:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8001e72:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7a:	d3ed      	bcc.n	8001e58 <main_initial+0x660>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001e7c:	481d      	ldr	r0, [pc, #116]	; (8001ef4 <main_initial+0x6fc>)
 8001e7e:	f7fe f9ab 	bl	80001d8 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <main_initial+0x700>)
 8001e88:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <main_initial+0x704>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <main_initial+0x704>)
 8001e94:	701a      	strb	r2, [r3, #0]
			display_clear ();
 8001e96:	f002 fa21 	bl	80042dc <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8001ea0:	e00e      	b.n	8001ec0 <main_initial+0x6c8>
 8001ea2:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001ea6:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <main_initial+0x708>)
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eb0:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <main_initial+0x6fc>)
 8001eb2:	2130      	movs	r1, #48	; 0x30
 8001eb4:	54d1      	strb	r1, [r2, r3]
 8001eb6:	f8b7 3164 	ldrh.w	r3, [r7, #356]	; 0x164
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f8a7 3164 	strh.w	r3, [r7, #356]	; 0x164
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <main_initial+0x704>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f8b7 2164 	ldrh.w	r2, [r7, #356]	; 0x164
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d3e9      	bcc.n	8001ea2 <main_initial+0x6aa>
			note_reset();
 8001ece:	f7ff fc55 	bl	800177c <note_reset>
			byte_swap(RAM,sizeof(RAM));
 8001ed2:	f248 01b8 	movw	r1, #32952	; 0x80b8
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <main_initial+0x70c>)
 8001ed8:	f000 f862 	bl	8001fa0 <byte_swap>
			menuSelect=0;
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <main_initial+0x710>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <main_initial+0x714>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001ee8:	bf00      	nop
 8001eea:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20011048 	.word	0x20011048
 8001ef8:	2000d97a 	.word	0x2000d97a
 8001efc:	2000d369 	.word	0x2000d369
 8001f00:	2000d36c 	.word	0x2000d36c
 8001f04:	200005b8 	.word	0x200005b8
 8001f08:	20008bc2 	.word	0x20008bc2
 8001f0c:	20008bc3 	.word	0x20008bc3

08001f10 <patch_lists>:



}

void patch_lists(void){   //   ok
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	e02e      	b.n	8001f7e <patch_lists+0x6e>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	491c      	ldr	r1, [pc, #112]	; (8001f94 <patch_lists+0x84>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d11f      	bne.n	8001f78 <patch_lists+0x68>
 8001f38:	79fa      	ldrb	r2, [r7, #7]
 8001f3a:	4916      	ldr	r1, [pc, #88]	; (8001f94 <patch_lists+0x84>)
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	3302      	adds	r3, #2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	79bb      	ldrb	r3, [r7, #6]
 8001f52:	3230      	adds	r2, #48	; 0x30
 8001f54:	b2d1      	uxtb	r1, r2
 8001f56:	4a10      	ldr	r2, [pc, #64]	; (8001f98 <patch_lists+0x88>)
 8001f58:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8001f5a:	79fa      	ldrb	r2, [r7, #7]
 8001f5c:	79b9      	ldrb	r1, [r7, #6]
 8001f5e:	480d      	ldr	r0, [pc, #52]	; (8001f94 <patch_lists+0x84>)
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4403      	add	r3, r0
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <patch_lists+0x8c>)
 8001f70:	545a      	strb	r2, [r3, r1]
	list_counter2++;
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	3301      	adds	r3, #1
 8001f76:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	2b13      	cmp	r3, #19
 8001f82:	d9cd      	bls.n	8001f20 <patch_lists+0x10>
	}

    }

}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	2000d044 	.word	0x2000d044
 8001f98:	20010bb8 	.word	0x20010bb8
 8001f9c:	20010e28 	.word	0x20010e28

08001fa0 <byte_swap>:
void byte_swap(uint16_t* to_swap, uint32_t  array_size){   // sample byte  swap
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    uint32_t counter;
    uint32_t swap_size=array_size; // in bytes !
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	613b      	str	r3, [r7, #16]


    for (counter=0;counter<swap_size;counter=counter+2){
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e01f      	b.n	8001ff4 <byte_swap+0x54>

	uint8_t* byte1=&to_swap[counter>>1];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
	uint8_t* byte2=&to_swap[counter>>1]+1;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60bb      	str	r3, [r7, #8]

	to_swap[counter>>1]=((*byte2)<<8)+(*byte1);
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b299      	uxth	r1, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	085b      	lsrs	r3, r3, #1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4403      	add	r3, r0
 8001fe8:	440a      	add	r2, r1
 8001fea:	b292      	uxth	r2, r2
 8001fec:	801a      	strh	r2, [r3, #0]
    for (counter=0;counter<swap_size;counter=counter+2){
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3db      	bcc.n	8001fb4 <byte_swap+0x14>





}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	0000      	movs	r0, r0
 800200c:	0000      	movs	r0, r0
	...

08002010 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	f5ad 6db7 	sub.w	sp, sp, #1464	; 0x5b8
 8002016:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8002018:	4bc4      	ldr	r3, [pc, #784]	; (800232c <sampling+0x31c>)
 800201a:	2200      	movs	r2, #0
 800201c:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 800201e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8002022:	2228      	movs	r2, #40	; 0x28
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f00a faf2 	bl	800c610 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 800202c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8002030:	2228      	movs	r2, #40	; 0x28
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f00a faeb 	bl	800c610 <memset>
uint16_t tuned_list[10];
int32_t sample_adc;
int32_t ram_temp;
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 800203a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800203e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002042:	4618      	mov	r0, r3
 8002044:	2350      	movs	r3, #80	; 0x50
 8002046:	461a      	mov	r2, r3
 8002048:	2100      	movs	r1, #0
 800204a:	f00a fae1 	bl	800c610 <memset>
 800204e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002056:	2201      	movs	r2, #1
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800205e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002062:	2201      	movs	r2, #1
 8002064:	805a      	strh	r2, [r3, #2]
 8002066:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800206a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800206e:	2201      	movs	r2, #1
 8002070:	809a      	strh	r2, [r3, #4]
 8002072:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800207a:	2201      	movs	r2, #1
 800207c:	80da      	strh	r2, [r3, #6]
 800207e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002086:	2201      	movs	r2, #1
 8002088:	811a      	strh	r2, [r3, #8]
 800208a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800208e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002092:	2201      	movs	r2, #1
 8002094:	815a      	strh	r2, [r3, #10]
 8002096:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800209a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800209e:	2201      	movs	r2, #1
 80020a0:	819a      	strh	r2, [r3, #12]
 80020a2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020aa:	2201      	movs	r2, #1
 80020ac:	81da      	strh	r2, [r3, #14]
 80020ae:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020b6:	2201      	movs	r2, #1
 80020b8:	821a      	strh	r2, [r3, #16]
 80020ba:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020c2:	2201      	movs	r2, #1
 80020c4:	825a      	strh	r2, [r3, #18]
 80020c6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020ce:	2201      	movs	r2, #1
 80020d0:	829a      	strh	r2, [r3, #20]
 80020d2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020da:	2201      	movs	r2, #1
 80020dc:	82da      	strh	r2, [r3, #22]
 80020de:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020e6:	2201      	movs	r2, #1
 80020e8:	831a      	strh	r2, [r3, #24]
 80020ea:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020f2:	2201      	movs	r2, #1
 80020f4:	835a      	strh	r2, [r3, #26]
 80020f6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80020fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020fe:	2201      	movs	r2, #1
 8002100:	839a      	strh	r2, [r3, #28]
 8002102:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800210a:	2201      	movs	r2, #1
 800210c:	83da      	strh	r2, [r3, #30]
 800210e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002116:	2201      	movs	r2, #1
 8002118:	841a      	strh	r2, [r3, #32]
 800211a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800211e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002122:	2201      	movs	r2, #1
 8002124:	845a      	strh	r2, [r3, #34]	; 0x22
 8002126:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800212a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800212e:	2201      	movs	r2, #1
 8002130:	849a      	strh	r2, [r3, #36]	; 0x24
 8002132:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800213a:	2201      	movs	r2, #1
 800213c:	84da      	strh	r2, [r3, #38]	; 0x26
 800213e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002146:	2201      	movs	r2, #1
 8002148:	851a      	strh	r2, [r3, #40]	; 0x28
 800214a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800214e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002152:	2201      	movs	r2, #1
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002156:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800215a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800215e:	2201      	movs	r2, #1
 8002160:	859a      	strh	r2, [r3, #44]	; 0x2c
 8002162:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800216a:	2201      	movs	r2, #1
 800216c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800216e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002172:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002176:	2201      	movs	r2, #1
 8002178:	861a      	strh	r2, [r3, #48]	; 0x30
 800217a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800217e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002182:	2201      	movs	r2, #1
 8002184:	865a      	strh	r2, [r3, #50]	; 0x32
 8002186:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800218a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800218e:	2201      	movs	r2, #1
 8002190:	869a      	strh	r2, [r3, #52]	; 0x34
 8002192:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002196:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800219a:	2201      	movs	r2, #1
 800219c:	86da      	strh	r2, [r3, #54]	; 0x36
 800219e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021a6:	2201      	movs	r2, #1
 80021a8:	871a      	strh	r2, [r3, #56]	; 0x38
 80021aa:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021b2:	2201      	movs	r2, #1
 80021b4:	875a      	strh	r2, [r3, #58]	; 0x3a
 80021b6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021be:	2201      	movs	r2, #1
 80021c0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80021c2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021ca:	2201      	movs	r2, #1
 80021cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ce:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021d6:	2201      	movs	r2, #1
 80021d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80021dc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021e4:	2201      	movs	r2, #1
 80021e6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80021ea:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021f2:	2201      	movs	r2, #1
 80021f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80021f8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80021fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002200:	2201      	movs	r2, #1
 8002202:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002206:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800220a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800220e:	2201      	movs	r2, #1
 8002210:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
uint8_t flash_result;

//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <sampling+0x320>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d104      	bne.n	8002226 <sampling+0x216>
 800221c:	4b45      	ldr	r3, [pc, #276]	; (8002334 <sampling+0x324>)
 800221e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	e002      	b.n	800222c <sampling+0x21c>
 8002226:	4b43      	ldr	r3, [pc, #268]	; (8002334 <sampling+0x324>)
 8002228:	2200      	movs	r2, #0
 800222a:	801a      	strh	r2, [r3, #0]

bank_write=0;
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <sampling+0x320>)
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8002232:	2210      	movs	r2, #16
 8002234:	4940      	ldr	r1, [pc, #256]	; (8002338 <sampling+0x328>)
 8002236:	4841      	ldr	r0, [pc, #260]	; (800233c <sampling+0x32c>)
 8002238:	f00a f9dc 	bl	800c5f4 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <sampling+0x330>)
 800223e:	2210      	movs	r2, #16
 8002240:	4940      	ldr	r1, [pc, #256]	; (8002344 <sampling+0x334>)
 8002242:	4618      	mov	r0, r3
 8002244:	f00a f9d6 	bl	800c5f4 <memcpy>
sample_pointB=sample_pointD;
 8002248:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <sampling+0x324>)
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <sampling+0x338>)
 800224e:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002250:	2300      	movs	r3, #0
 8002252:	f8a7 35b4 	strh.w	r3, [r7, #1460]	; 0x5b4

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <sampling+0x33c>)
 8002258:	785b      	ldrb	r3, [r3, #1]
 800225a:	461a      	mov	r2, r3
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <sampling+0x340>)
 800225e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002262:	f8a7 35b2 	strh.w	r3, [r7, #1458]	; 0x5b2
if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
 8002266:	4b39      	ldr	r3, [pc, #228]	; (800234c <sampling+0x33c>)
 8002268:	785b      	ldrb	r3, [r3, #1]
 800226a:	2b27      	cmp	r3, #39	; 0x27
 800226c:	d803      	bhi.n	8002276 <sampling+0x266>
 800226e:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002272:	f8a7 35b2 	strh.w	r3, [r7, #1458]	; 0x5b2
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002276:	f8b7 35b2 	ldrh.w	r3, [r7, #1458]	; 0x5b2
 800227a:	2b00      	cmp	r3, #0
 800227c:	da00      	bge.n	8002280 <sampling+0x270>
 800227e:	331f      	adds	r3, #31
 8002280:	115b      	asrs	r3, r3, #5
 8002282:	461a      	mov	r2, r3
 8002284:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002288:	fb93 f3f2 	sdiv	r3, r3, r2
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002294:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <sampling+0x344>)
 8002296:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <sampling+0x344>)
 800229c:	ed93 7a00 	vldr	s14, [r3]
 80022a0:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002358 <sampling+0x348>
 80022a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022a8:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <sampling+0x344>)
 80022aa:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80022ae:	f8b7 35b2 	ldrh.w	r3, [r7, #1458]	; 0x5b2
 80022b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d110      	bne.n	80022dc <sampling+0x2cc>
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <sampling+0x34c>)
 80022bc:	8b1b      	ldrh	r3, [r3, #24]
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d80b      	bhi.n	80022dc <sampling+0x2cc>
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <sampling+0x33c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <sampling+0x2cc>
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <sampling+0x350>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	801a      	strh	r2, [r3, #0]
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <sampling+0x354>)
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <sampling+0x358>)
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]

uint8_t looper_dat[8]={1,3,7,15};
 80022e2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80022e6:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80022ea:	4920      	ldr	r1, [pc, #128]	; (800236c <sampling+0x35c>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	c903      	ldmia	r1, {r0, r1}
 80022f0:	6018      	str	r0, [r3, #0]
 80022f2:	3304      	adds	r3, #4
 80022f4:	7019      	strb	r1, [r3, #0]
 80022f6:	1d53      	adds	r3, r2, #5
 80022f8:	2200      	movs	r2, #0
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 80022fe:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <sampling+0x360>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	f8b7 25b2 	ldrh.w	r2, [r7, #1458]	; 0x5b2
 8002306:	429a      	cmp	r2, r3
 8002308:	d062      	beq.n	80023d0 <sampling+0x3c0>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 800230a:	f8b7 35b2 	ldrh.w	r3, [r7, #1458]	; 0x5b2
 800230e:	4a19      	ldr	r2, [pc, #100]	; (8002374 <sampling+0x364>)
 8002310:	fb92 f3f3 	sdiv	r3, r2, r3
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231c:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 8002320:	edc3 7a00 	vstr	s15, [r3]


						for (i=0;i<256;i++){								// 128 is 1 note
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <sampling+0x368>)
 8002326:	2200      	movs	r2, #0
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	e04d      	b.n	80023c8 <sampling+0x3b8>
 800232c:	2000c1d8 	.word	0x2000c1d8
 8002330:	2000014e 	.word	0x2000014e
 8002334:	20009bd6 	.word	0x20009bd6
 8002338:	2000d016 	.word	0x2000d016
 800233c:	2000f988 	.word	0x2000f988
 8002340:	2000f998 	.word	0x2000f998
 8002344:	2000d027 	.word	0x2000d027
 8002348:	20008bc8 	.word	0x20008bc8
 800234c:	2000d014 	.word	0x2000d014
 8002350:	2000b52c 	.word	0x2000b52c
 8002354:	2000bdb8 	.word	0x2000bdb8
 8002358:	42a00000 	.word	0x42a00000
 800235c:	20000204 	.word	0x20000204
 8002360:	2000b3dc 	.word	0x2000b3dc
 8002364:	2000b408 	.word	0x2000b408
 8002368:	20010e3c 	.word	0x20010e3c
 800236c:	0800cf24 	.word	0x0800cf24
 8002370:	2000b92c 	.word	0x2000b92c
 8002374:	006487ec 	.word	0x006487ec
 8002378:	20008bca 	.word	0x20008bca
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 800237c:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <sampling+0x4dc>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238a:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002396:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800239a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800239e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a2:	ee17 3a90 	vmov	r3, s15
 80023a6:	f8c7 35a0 	str.w	r3, [r7, #1440]	; 0x5a0
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <sampling+0x4dc>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f8d7 35a0 	ldr.w	r3, [r7, #1440]	; 0x5a0
 80023b4:	b299      	uxth	r1, r3
 80023b6:	4b4e      	ldr	r3, [pc, #312]	; (80024f0 <sampling+0x4e0>)
 80023b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <sampling+0x4dc>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b49      	ldr	r3, [pc, #292]	; (80024ec <sampling+0x4dc>)
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <sampling+0x4dc>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	2bff      	cmp	r3, #255	; 0xff
 80023ce:	d9d5      	bls.n	800237c <sampling+0x36c>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 80023d0:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <sampling+0x4e4>)
 80023d2:	f8b7 35b2 	ldrh.w	r3, [r7, #1458]	; 0x5b2
 80023d6:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 80023d8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80023dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80023e0:	4618      	mov	r0, r3
 80023e2:	2344      	movs	r3, #68	; 0x44
 80023e4:	461a      	mov	r2, r3
 80023e6:	2100      	movs	r1, #0
 80023e8:	f00a f912 	bl	800c610 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 80023ec:	4b3f      	ldr	r3, [pc, #252]	; (80024ec <sampling+0x4dc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	801a      	strh	r2, [r3, #0]
 80023f2:	e00f      	b.n	8002414 <sampling+0x404>
 80023f4:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <sampling+0x4dc>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80023fe:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002402:	2200      	movs	r2, #0
 8002404:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <sampling+0x4dc>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <sampling+0x4dc>)
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	4b35      	ldr	r3, [pc, #212]	; (80024ec <sampling+0x4dc>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	2b0f      	cmp	r3, #15
 800241a:	d9eb      	bls.n	80023f4 <sampling+0x3e4>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 800241c:	4b36      	ldr	r3, [pc, #216]	; (80024f8 <sampling+0x4e8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4a36      	ldr	r2, [pc, #216]	; (80024fc <sampling+0x4ec>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	b2db      	uxtb	r3, r3
 800242a:	3330      	adds	r3, #48	; 0x30
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b34      	ldr	r3, [pc, #208]	; (8002500 <sampling+0x4f0>)
 8002430:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8002434:	4b30      	ldr	r3, [pc, #192]	; (80024f8 <sampling+0x4e8>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4a30      	ldr	r2, [pc, #192]	; (80024fc <sampling+0x4ec>)
 800243a:	fba2 1203 	umull	r1, r2, r2, r3
 800243e:	0952      	lsrs	r2, r2, #5
 8002440:	2164      	movs	r1, #100	; 0x64
 8002442:	fb01 f202 	mul.w	r2, r1, r2
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <sampling+0x4f4>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3330      	adds	r3, #48	; 0x30
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <sampling+0x4f0>)
 800245a:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_temp%10)+48;
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <sampling+0x4e8>)
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	4b28      	ldr	r3, [pc, #160]	; (8002504 <sampling+0x4f4>)
 8002464:	fba3 1302 	umull	r1, r3, r3, r2
 8002468:	08d9      	lsrs	r1, r3, #3
 800246a:	460b      	mov	r3, r1
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3330      	adds	r3, #48	; 0x30
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <sampling+0x4f0>)
 800247c:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

LCD_Info[0]  =( seq.pos/100) +48;
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <sampling+0x4f8>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <sampling+0x4ec>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3330      	adds	r3, #48	; 0x30
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <sampling+0x4fc>)
 8002494:	701a      	strb	r2, [r3, #0]
LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <sampling+0x4f8>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <sampling+0x4ec>)
 800249c:	fba2 1203 	umull	r1, r2, r2, r3
 80024a0:	0952      	lsrs	r2, r2, #5
 80024a2:	2164      	movs	r1, #100	; 0x64
 80024a4:	fb01 f202 	mul.w	r2, r1, r2
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4a15      	ldr	r2, [pc, #84]	; (8002504 <sampling+0x4f4>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	08db      	lsrs	r3, r3, #3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	3330      	adds	r3, #48	; 0x30
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <sampling+0x4fc>)
 80024bc:	705a      	strb	r2, [r3, #1]
LCD_Info[2]  =( seq.pos%10)+48 ;
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <sampling+0x4f8>)
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <sampling+0x4f4>)
 80024c4:	fba3 1302 	umull	r1, r3, r3, r2
 80024c8:	08d9      	lsrs	r1, r3, #3
 80024ca:	460b      	mov	r3, r1
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3330      	adds	r3, #48	; 0x30
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <sampling+0x4fc>)
 80024dc:	709a      	strb	r2, [r3, #2]
patch_lists();
 80024de:	f7ff fd17 	bl	8001f10 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 35b1 	strb.w	r3, [r7, #1457]	; 0x5b1
 80024e8:	e0fe      	b.n	80026e8 <sampling+0x6d8>
 80024ea:	bf00      	nop
 80024ec:	20008bca 	.word	0x20008bca
 80024f0:	2000b72c 	.word	0x2000b72c
 80024f4:	2000b92c 	.word	0x2000b92c
 80024f8:	2000d97e 	.word	0x2000d97e
 80024fc:	51eb851f 	.word	0x51eb851f
 8002500:	20008960 	.word	0x20008960
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	2000d014 	.word	0x2000d014
 800250c:	20010dc4 	.word	0x20010dc4


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002510:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 8002514:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 8002518:	49ac      	ldr	r1, [pc, #688]	; (80027cc <sampling+0x7bc>)
 800251a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	f503 63b7 	add.w	r3, r3, #1464	; 0x5b8
 8002524:	443b      	add	r3, r7
 8002526:	f843 2c70 	str.w	r2, [r3, #-112]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800252a:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 800252e:	49a8      	ldr	r1, [pc, #672]	; (80027d0 <sampling+0x7c0>)
 8002530:	4613      	mov	r3, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10a      	bne.n	8002556 <sampling+0x546>
 8002540:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 8002544:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002548:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800254c:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 8002550:	3114      	adds	r1, #20
 8002552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002556:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 800255a:	499d      	ldr	r1, [pc, #628]	; (80027d0 <sampling+0x7c0>)
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	440b      	add	r3, r1
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d10d      	bne.n	8002588 <sampling+0x578>
 800256c:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 8002570:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 8002574:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4419      	add	r1, r3
 800257c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002580:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 8002588:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 800258c:	4990      	ldr	r1, [pc, #576]	; (80027d0 <sampling+0x7c0>)
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	440b      	add	r3, r1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d10d      	bne.n	80025ba <sampling+0x5aa>
 800259e:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 80025a2:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 80025a6:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4419      	add	r1, r3
 80025ae:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80025b2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot | (1<<pars_counter);}   // sine
 80025ba:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 80025be:	4984      	ldr	r1, [pc, #528]	; (80027d0 <sampling+0x7c0>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d11c      	bne.n	800260a <sampling+0x5fa>
 80025d0:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 80025d4:	3306      	adds	r3, #6
 80025d6:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 80025da:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4419      	add	r1, r3
 80025e2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80025e6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80025ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025ee:	4b79      	ldr	r3, [pc, #484]	; (80027d4 <sampling+0x7c4>)
 80025f0:	78db      	ldrb	r3, [r3, #3]
 80025f2:	b25a      	sxtb	r2, r3
 80025f4:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	b25b      	sxtb	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b25b      	sxtb	r3, r3
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b73      	ldr	r3, [pc, #460]	; (80027d4 <sampling+0x7c4>)
 8002608:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];sampler.one_shot=sampler.one_shot &  ~(1<<pars_counter);}  // looping sample
 800260a:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 800260e:	4970      	ldr	r1, [pc, #448]	; (80027d0 <sampling+0x7c0>)
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	440b      	add	r3, r1
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d11e      	bne.n	800265e <sampling+0x64e>
 8002620:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 8002624:	3306      	adds	r3, #6
 8002626:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 800262a:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4419      	add	r1, r3
 8002632:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002636:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800263a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <sampling+0x7c4>)
 8002640:	78db      	ldrb	r3, [r3, #3]
 8002642:	b25a      	sxtb	r2, r3
 8002644:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 8002648:	2101      	movs	r1, #1
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	b25b      	sxtb	r3, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	b25b      	sxtb	r3, r3
 8002654:	4013      	ands	r3, r2
 8002656:	b25b      	sxtb	r3, r3
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4b5e      	ldr	r3, [pc, #376]	; (80027d4 <sampling+0x7c4>)
 800265c:	70da      	strb	r2, [r3, #3]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 800265e:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 8002662:	495b      	ldr	r1, [pc, #364]	; (80027d0 <sampling+0x7c0>)
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b05      	cmp	r3, #5
 8002672:	d109      	bne.n	8002688 <sampling+0x678>
 8002674:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 8002678:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800267c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002680:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // sine
 8002688:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 800268c:	4950      	ldr	r1, [pc, #320]	; (80027d0 <sampling+0x7c0>)
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	440b      	add	r3, r1
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d109      	bne.n	80026b2 <sampling+0x6a2>
 800269e:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 80026a2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80026a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80026aa:	f207 5104 	addw	r1, r7, #1284	; 0x504
 80026ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>6) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80026b2:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 80026b6:	4946      	ldr	r1, [pc, #280]	; (80027d0 <sampling+0x7c0>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b06      	cmp	r3, #6
 80026c6:	d90a      	bls.n	80026de <sampling+0x6ce>
 80026c8:	f897 25b1 	ldrb.w	r2, [r7, #1457]	; 0x5b1
 80026cc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80026d0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80026d4:	f507 61a4 	add.w	r1, r7, #1312	; 0x520
 80026d8:	3114      	adds	r1, #20
 80026da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80026de:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 80026e2:	3301      	adds	r3, #1
 80026e4:	f887 35b1 	strb.w	r3, [r7, #1457]	; 0x5b1
 80026e8:	f897 35b1 	ldrb.w	r3, [r7, #1457]	; 0x5b1
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	f67f af0f 	bls.w	8002510 <sampling+0x500>


 }

note_holdA=0;
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <sampling+0x7c8>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80026f8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80026fc:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002700:	2200      	movs	r2, #0
 8002702:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002704:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002708:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800270c:	4a33      	ldr	r2, [pc, #204]	; (80027dc <sampling+0x7cc>)
 800270e:	461c      	mov	r4, r3
 8002710:	4615      	mov	r5, r2
 8002712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002716:	682b      	ldr	r3, [r5, #0]
 8002718:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <sampling+0x7d0>)
 800271c:	2200      	movs	r2, #0
 800271e:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002720:	4b30      	ldr	r3, [pc, #192]	; (80027e4 <sampling+0x7d4>)
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	b29b      	uxth	r3, r3
 8002728:	3301      	adds	r3, #1
 800272a:	2201      	movs	r2, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	f887 359f 	strb.w	r3, [r7, #1439]	; 0x59f
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <sampling+0x7d8>)
 800273a:	2200      	movs	r2, #0
 800273c:	801a      	strh	r2, [r3, #0]
 800273e:	e205      	b.n	8002b4c <sampling+0xb3c>

	i_total=i+sample_pointB;
 8002740:	4b29      	ldr	r3, [pc, #164]	; (80027e8 <sampling+0x7d8>)
 8002742:	881a      	ldrh	r2, [r3, #0]
 8002744:	4b29      	ldr	r3, [pc, #164]	; (80027ec <sampling+0x7dc>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	4413      	add	r3, r2
 800274a:	f8a7 3592 	strh.w	r3, [r7, #1426]	; 0x592
	sampling_position=i>>6;   //   0-8 steps
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <sampling+0x7d8>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	b29b      	uxth	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4b25      	ldr	r3, [pc, #148]	; (80027f0 <sampling+0x7e0>)
 800275a:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 800275c:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <sampling+0x7e0>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	3307      	adds	r3, #7
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b22      	ldr	r3, [pc, #136]	; (80027f4 <sampling+0x7e4>)
 800276c:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <sampling+0x7e8>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <sampling+0x7e8>)
 8002778:	4413      	add	r3, r2
 800277a:	789b      	ldrb	r3, [r3, #2]
 800277c:	f887 3577 	strb.w	r3, [r7, #1399]	; 0x577
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <sampling+0x7d8>)
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <sampling+0x7ec>)
 8002788:	5cd2      	ldrb	r2, [r2, r3]
 800278a:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <sampling+0x7d8>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	0912      	lsrs	r2, r2, #4
 8002792:	b2d1      	uxtb	r1, r2
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <sampling+0x7f0>)
 8002796:	54d1      	strb	r1, [r2, r3]

//tempo_large++;
//if (tempo_large>=(tempo_mod*4096))  tempo_large=0;     // use it count for lfo long  16*16 notes

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <sampling+0x7f4>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	f8b7 25b2 	ldrh.w	r2, [r7, #1458]	; 0x5b2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d833      	bhi.n	800280c <sampling+0x7fc>
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <sampling+0x7f8>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <sampling+0x7f8>)
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <sampling+0x7f4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <sampling+0x7f8>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	3301      	adds	r3, #1
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <sampling+0x7d0>)
 80027c6:	801a      	strh	r2, [r3, #0]
 80027c8:	e026      	b.n	8002818 <sampling+0x808>
 80027ca:	bf00      	nop
 80027cc:	2000b3e0 	.word	0x2000b3e0
 80027d0:	20000158 	.word	0x20000158
 80027d4:	20000204 	.word	0x20000204
 80027d8:	2000b3de 	.word	0x2000b3de
 80027dc:	0800cf2c 	.word	0x0800cf2c
 80027e0:	20008bc0 	.word	0x20008bc0
 80027e4:	20000144 	.word	0x20000144
 80027e8:	20008bca 	.word	0x20008bca
 80027ec:	20008bc8 	.word	0x20008bc8
 80027f0:	2000d980 	.word	0x2000d980
 80027f4:	2000d981 	.word	0x2000d981
 80027f8:	2000d014 	.word	0x2000d014
 80027fc:	20008960 	.word	0x20008960
 8002800:	20008760 	.word	0x20008760
 8002804:	2000b408 	.word	0x2000b408
 8002808:	2000b3dc 	.word	0x2000b3dc
 800280c:	4b94      	ldr	r3, [pc, #592]	; (8002a60 <sampling+0xa50>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b92      	ldr	r3, [pc, #584]	; (8002a60 <sampling+0xa50>)
 8002816:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002818:	2300      	movs	r3, #0
 800281a:	f8a7 35b4 	strh.w	r3, [r7, #1460]	; 0x5b4
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800281e:	4b91      	ldr	r3, [pc, #580]	; (8002a64 <sampling+0xa54>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	b29a      	uxth	r2, r3
 8002826:	4b90      	ldr	r3, [pc, #576]	; (8002a68 <sampling+0xa58>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	429a      	cmp	r2, r3
 800282e:	d009      	beq.n	8002844 <sampling+0x834>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002830:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <sampling+0xa54>)
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	b29b      	uxth	r3, r3
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b8b      	ldr	r3, [pc, #556]	; (8002a68 <sampling+0xa58>)
 800283c:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800283e:	2301      	movs	r3, #1
 8002840:	f8a7 35b4 	strh.w	r3, [r7, #1460]	; 0x5b4
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}

	if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always
 8002844:	4b87      	ldr	r3, [pc, #540]	; (8002a64 <sampling+0xa54>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <sampling+0xa5c>)
 800284c:	791b      	ldrb	r3, [r3, #4]
 800284e:	4053      	eors	r3, r2
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	2b00      	cmp	r3, #0
 8002856:	d103      	bne.n	8002860 <sampling+0x850>
 8002858:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <sampling+0xa60>)
 800285a:	2201      	movs	r2, #1
 800285c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002860:	f8b7 35b4 	ldrh.w	r3, [r7, #1460]	; 0x5b4
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 8161 	beq.w	8002b2c <sampling+0xb1c>
	{
		serial_tosend=1;
 800286a:	4b82      	ldr	r3, [pc, #520]	; (8002a74 <sampling+0xa64>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 8002870:	4b81      	ldr	r3, [pc, #516]	; (8002a78 <sampling+0xa68>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b80      	ldr	r3, [pc, #512]	; (8002a7c <sampling+0xa6c>)
 800287a:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 800287c:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <sampling+0xa58>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	b2da      	uxtb	r2, r3
 8002886:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800288a:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 800288e:	701a      	strb	r2, [r3, #0]
		loop_temp1[1]=adc_values[1]>>2;
 8002890:	4b7b      	ldr	r3, [pc, #492]	; (8002a80 <sampling+0xa70>)
 8002892:	885b      	ldrh	r3, [r3, #2]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	b29b      	uxth	r3, r3
 8002898:	b2da      	uxtb	r2, r3
 800289a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800289e:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80028a2:	705a      	strb	r2, [r3, #1]
		loop_temp1[2]=adc_values[2]>>2;
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <sampling+0xa70>)
 80028a6:	889b      	ldrh	r3, [r3, #4]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80028b2:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80028b6:	709a      	strb	r2, [r3, #2]
		loop_temp1[3]=adc_values[0]>>2;
 80028b8:	4b71      	ldr	r3, [pc, #452]	; (8002a80 <sampling+0xa70>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	089b      	lsrs	r3, r3, #2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80028c6:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80028ca:	70da      	strb	r2, [r3, #3]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length


		seq.loop[0]=(note[0].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <sampling+0xa60>)
 80028ce:	799a      	ldrb	r2, [r3, #6]
 80028d0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80028d4:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80028e2:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	4413      	add	r3, r2
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b5d      	ldr	r3, [pc, #372]	; (8002a68 <sampling+0xa58>)
 80028f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[2])&31;
 80028f8:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <sampling+0xa60>)
 80028fa:	7d1a      	ldrb	r2, [r3, #20]
 80028fc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002900:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	b2da      	uxtb	r2, r3
 800290a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800290e:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002912:	789b      	ldrb	r3, [r3, #2]
 8002914:	4413      	add	r3, r2
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b52      	ldr	r3, [pc, #328]	; (8002a68 <sampling+0xa58>)
 8002920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 8002924:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <sampling+0xa60>)
 8002926:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800292a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800292e:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4413      	add	r3, r2
 8002936:	b2db      	uxtb	r3, r3
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <sampling+0xa58>)
 8002940:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 8002944:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <sampling+0xa60>)
 8002946:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800294a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800294e:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4413      	add	r3, r2
 8002956:	b2da      	uxtb	r2, r3
 8002958:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800295c:	f5a3 63b7 	sub.w	r3, r3, #1464	; 0x5b8
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	4413      	add	r3, r2
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <sampling+0xa58>)
 800296e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <sampling+0xa58>)
 8002974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002978:	461a      	mov	r2, r3
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <sampling+0xa74>)
 800297c:	5c9a      	ldrb	r2, [r3, r2]
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <sampling+0xa60>)
 8002980:	795b      	ldrb	r3, [r3, #5]
 8002982:	4413      	add	r3, r2
 8002984:	b2da      	uxtb	r2, r3
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <sampling+0xa60>)
 8002988:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 800298a:	4b37      	ldr	r3, [pc, #220]	; (8002a68 <sampling+0xa58>)
 800298c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002990:	461a      	mov	r2, r3
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <sampling+0xa74>)
 8002994:	5c9a      	ldrb	r2, [r3, r2]
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <sampling+0xa60>)
 8002998:	7cdb      	ldrb	r3, [r3, #19]
 800299a:	4413      	add	r3, r2
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <sampling+0xa60>)
 80029a0:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <sampling+0xa58>)
 80029a4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <sampling+0xa74>)
 80029ac:	5c9a      	ldrb	r2, [r3, r2]
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <sampling+0xa60>)
 80029b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029b4:	4413      	add	r3, r2
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <sampling+0xa60>)
 80029ba:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80029bc:	4b2a      	ldr	r3, [pc, #168]	; (8002a68 <sampling+0xa58>)
 80029be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <sampling+0xa74>)
 80029c6:	5c9a      	ldrb	r2, [r3, r2]
 80029c8:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <sampling+0xa60>)
 80029ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80029ce:	4413      	add	r3, r2
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <sampling+0xa60>)
 80029d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

//	note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose);  //
		patch_target_replace();
 80029d8:	f7fe fd68 	bl	80014ac <patch_target_replace>
		uint8_t detune_temp=0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 35b0 	strb.w	r3, [r7, #1456]	; 0x5b0
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 80029e2:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <sampling+0xa78>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 35b7 	strb.w	r3, [r7, #1463]	; 0x5b7
 80029ee:	e098      	b.n	8002b22 <sampling+0xb12>
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 80029f0:	f897 25b7 	ldrb.w	r2, [r7, #1463]	; 0x5b7
 80029f4:	491e      	ldr	r1, [pc, #120]	; (8002a70 <sampling+0xa60>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	440b      	add	r3, r1
 8002a00:	3302      	adds	r3, #2
 8002a02:	7819      	ldrb	r1, [r3, #0]
 8002a04:	f897 25b7 	ldrb.w	r2, [r7, #1463]	; 0x5b7
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <sampling+0xa60>)
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4403      	add	r3, r0
 8002a14:	3308      	adds	r3, #8
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	440b      	add	r3, r1
 8002a1a:	f887 35b0 	strb.w	r3, [r7, #1456]	; 0x5b0

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002a1e:	f897 35b0 	ldrb.w	r3, [r7, #1456]	; 0x5b0
 8002a22:	2b3c      	cmp	r3, #60	; 0x3c
 8002a24:	d902      	bls.n	8002a2c <sampling+0xa1c>
 8002a26:	233c      	movs	r3, #60	; 0x3c
 8002a28:	f887 35b0 	strb.w	r3, [r7, #1456]	; 0x5b0
		    if (detune_temp>30 )   note[mask_i].tuned=sample_Noteadd[MinorNote[detune_temp-31]];    // for now
 8002a2c:	f897 35b0 	ldrb.w	r3, [r7, #1456]	; 0x5b0
 8002a30:	2b1e      	cmp	r3, #30
 8002a32:	d92f      	bls.n	8002a94 <sampling+0xa84>
 8002a34:	f897 35b0 	ldrb.w	r3, [r7, #1456]	; 0x5b0
 8002a38:	3b1f      	subs	r3, #31
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <sampling+0xa7c>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f897 25b7 	ldrb.w	r2, [r7, #1463]	; 0x5b7
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <sampling+0xa80>)
 8002a46:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002a4a:	4909      	ldr	r1, [pc, #36]	; (8002a70 <sampling+0xa60>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	440b      	add	r3, r1
 8002a56:	330c      	adds	r3, #12
 8002a58:	4602      	mov	r2, r0
 8002a5a:	801a      	strh	r2, [r3, #0]
 8002a5c:	e02d      	b.n	8002aba <sampling+0xaaa>
 8002a5e:	bf00      	nop
 8002a60:	2000b408 	.word	0x2000b408
 8002a64:	2000b3dc 	.word	0x2000b3dc
 8002a68:	2000d014 	.word	0x2000d014
 8002a6c:	20000204 	.word	0x20000204
 8002a70:	20000158 	.word	0x20000158
 8002a74:	2000fbad 	.word	0x2000fbad
 8002a78:	20008bca 	.word	0x20008bca
 8002a7c:	20010e3c 	.word	0x20010e3c
 8002a80:	20000144 	.word	0x20000144
 8002a84:	2000f988 	.word	0x2000f988
 8002a88:	20009bd8 	.word	0x20009bd8
 8002a8c:	0800d1c0 	.word	0x0800d1c0
 8002a90:	0800d1e0 	.word	0x0800d1e0
	else note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 8002a94:	f897 35b0 	ldrb.w	r3, [r7, #1456]	; 0x5b0
 8002a98:	4ab1      	ldr	r2, [pc, #708]	; (8002d60 <sampling+0xd50>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f897 25b7 	ldrb.w	r2, [r7, #1463]	; 0x5b7
 8002aa2:	4bb0      	ldr	r3, [pc, #704]	; (8002d64 <sampling+0xd54>)
 8002aa4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8002aa8:	49af      	ldr	r1, [pc, #700]	; (8002d68 <sampling+0xd58>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	801a      	strh	r2, [r3, #0]

	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002aba:	f897 25b7 	ldrb.w	r2, [r7, #1463]	; 0x5b7
 8002abe:	49aa      	ldr	r1, [pc, #680]	; (8002d68 <sampling+0xd58>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	330c      	adds	r3, #12
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8002ada:	edc3 7a00 	vstr	s15, [r3]
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002ade:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	f7fd fe0e 	bl	8000704 <__aeabi_f2d>
 8002ae8:	a39b      	add	r3, pc, #620	; (adr r3, 8002d58 <sampling+0xd48>)
 8002aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aee:	f7fd fb7b 	bl	80001e8 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	f897 45b7 	ldrb.w	r4, [r7, #1463]	; 0x5b7
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fd fe59 	bl	80007b4 <__aeabi_d2uiz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b299      	uxth	r1, r3
 8002b06:	4a98      	ldr	r2, [pc, #608]	; (8002d68 <sampling+0xd58>)
 8002b08:	4623      	mov	r3, r4
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	1b1b      	subs	r3, r3, r4
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	4413      	add	r3, r2
 8002b12:	330c      	adds	r3, #12
 8002b14:	460a      	mov	r2, r1
 8002b16:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002b18:	f897 35b7 	ldrb.w	r3, [r7, #1463]	; 0x5b7
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f887 35b7 	strb.w	r3, [r7, #1463]	; 0x5b7
 8002b22:	f897 35b7 	ldrb.w	r3, [r7, #1463]	; 0x5b7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	f67f af62 	bls.w	80029f0 <sampling+0x9e0>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002b2c:	4b8f      	ldr	r3, [pc, #572]	; (8002d6c <sampling+0xd5c>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <sampling+0xb30>
	{
	    LFO_square_one_pulse();
 8002b38:	f000 fe7e 	bl	8003838 <LFO_square_one_pulse>

		LFO_source_synced();
 8002b3c:	f000 ff28 	bl	8003990 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002b40:	4b8a      	ldr	r3, [pc, #552]	; (8002d6c <sampling+0xd5c>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b88      	ldr	r3, [pc, #544]	; (8002d6c <sampling+0xd5c>)
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	4b87      	ldr	r3, [pc, #540]	; (8002d6c <sampling+0xd5c>)
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b54:	f4ff adf4 	bcc.w	8002740 <sampling+0x730>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002b58:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b60:	4a83      	ldr	r2, [pc, #524]	; (8002d70 <sampling+0xd60>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	4611      	mov	r1, r2
 8002b66:	2350      	movs	r3, #80	; 0x50
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f009 fd43 	bl	800c5f4 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002b6e:	4b7e      	ldr	r3, [pc, #504]	; (8002d68 <sampling+0xd58>)
 8002b70:	899a      	ldrh	r2, [r3, #12]
 8002b72:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b7a:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002b7c:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <sampling+0xd58>)
 8002b7e:	8b5a      	ldrh	r2, [r3, #26]
 8002b80:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b88:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002b8a:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <sampling+0xd58>)
 8002b8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002b8e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002b92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002b96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002b9a:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <sampling+0xd58>)
 8002b9c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002b9e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002ba2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ba6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002baa:	4b72      	ldr	r3, [pc, #456]	; (8002d74 <sampling+0xd64>)
 8002bac:	7b9b      	ldrb	r3, [r3, #14]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b6f      	ldr	r3, [pc, #444]	; (8002d74 <sampling+0xd64>)
 8002bb6:	7bdb      	ldrb	r3, [r3, #15]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	; (8002d74 <sampling+0xd64>)
 8002bc0:	80da      	strh	r2, [r3, #6]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002bc2:	4b6c      	ldr	r3, [pc, #432]	; (8002d74 <sampling+0xd64>)
 8002bc4:	7c1b      	ldrb	r3, [r3, #16]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b69      	ldr	r3, [pc, #420]	; (8002d74 <sampling+0xd64>)
 8002bce:	7c5b      	ldrb	r3, [r3, #17]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <sampling+0xd64>)
 8002bd8:	811a      	strh	r2, [r3, #8]
	if ((sampler.one_shot&2) && (sine_counter[7]>(sampler.end-1000))&& (note[1].osc==3))     {note[0].position=0; sine_counter[7] =0;}
	if ((sampler.one_shot&4) && (sine_counter[11]>(sampler.end-1000))&& (note[2].osc==3))     {note[0].position=0; sine_counter[8] =0;}
	if ((sampler.one_shot&8) && (sine_counter[14]>(sampler.end-1000))&& (note[3].osc==3))  {note[0].position=0; sine_counter[9] =0;}
*/

	sine_ptr_temp[0]=&sine_counter[3];
 8002bda:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002bde:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002be2:	4a65      	ldr	r2, [pc, #404]	; (8002d78 <sampling+0xd68>)
 8002be4:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002be6:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002bea:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002bee:	4a63      	ldr	r2, [pc, #396]	; (8002d7c <sampling+0xd6c>)
 8002bf0:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002bf2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002bf6:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002bfa:	4a61      	ldr	r2, [pc, #388]	; (8002d80 <sampling+0xd70>)
 8002bfc:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002bfe:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002c02:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8002c06:	4a5f      	ldr	r2, [pc, #380]	; (8002d84 <sampling+0xd74>)
 8002c08:	60da      	str	r2, [r3, #12]


	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002c0a:	4b5a      	ldr	r3, [pc, #360]	; (8002d74 <sampling+0xd64>)
 8002c0c:	7b9a      	ldrb	r2, [r3, #14]
 8002c0e:	4b59      	ldr	r3, [pc, #356]	; (8002d74 <sampling+0xd64>)
 8002c10:	7c1b      	ldrb	r3, [r3, #16]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d902      	bls.n	8002c1c <sampling+0xc0c>
 8002c16:	4b57      	ldr	r3, [pc, #348]	; (8002d74 <sampling+0xd64>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	739a      	strb	r2, [r3, #14]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002c1c:	4b55      	ldr	r3, [pc, #340]	; (8002d74 <sampling+0xd64>)
 8002c1e:	8b1a      	ldrh	r2, [r3, #24]
 8002c20:	4b54      	ldr	r3, [pc, #336]	; (8002d74 <sampling+0xd64>)
 8002c22:	88db      	ldrh	r3, [r3, #6]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d203      	bcs.n	8002c30 <sampling+0xc20>
 8002c28:	4b52      	ldr	r3, [pc, #328]	; (8002d74 <sampling+0xd64>)
 8002c2a:	88da      	ldrh	r2, [r3, #6]
 8002c2c:	4b51      	ldr	r3, [pc, #324]	; (8002d74 <sampling+0xd64>)
 8002c2e:	831a      	strh	r2, [r3, #24]
	if ((sampler.ram_seq+256)>sampler.end) sampler.ram_seq=sampler.start;     // just for playback counter
 8002c30:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <sampling+0xd64>)
 8002c32:	8b1b      	ldrh	r3, [r3, #24]
 8002c34:	33ff      	adds	r3, #255	; 0xff
 8002c36:	4a4f      	ldr	r2, [pc, #316]	; (8002d74 <sampling+0xd64>)
 8002c38:	8912      	ldrh	r2, [r2, #8]
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	db03      	blt.n	8002c46 <sampling+0xc36>
 8002c3e:	4b4d      	ldr	r3, [pc, #308]	; (8002d74 <sampling+0xd64>)
 8002c40:	88da      	ldrh	r2, [r3, #6]
 8002c42:	4b4c      	ldr	r3, [pc, #304]	; (8002d74 <sampling+0xd64>)
 8002c44:	831a      	strh	r2, [r3, #24]

	sampler.length=sampler.end-sampler.start;
 8002c46:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <sampling+0xd64>)
 8002c48:	891a      	ldrh	r2, [r3, #8]
 8002c4a:	4b4a      	ldr	r3, [pc, #296]	; (8002d74 <sampling+0xd64>)
 8002c4c:	88db      	ldrh	r3, [r3, #6]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b48      	ldr	r3, [pc, #288]	; (8002d74 <sampling+0xd64>)
 8002c54:	815a      	strh	r2, [r3, #10]
//	 if(!note[3].position )	sampler_offset=(sampler.offset&15)*1024;   // use positon to trigger   , this needs to be better

	if(sine_counter[9]<=sampler.start) sine_counter[9]=sampler.start;
 8002c56:	4b4c      	ldr	r3, [pc, #304]	; (8002d88 <sampling+0xd78>)
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	4a46      	ldr	r2, [pc, #280]	; (8002d74 <sampling+0xd64>)
 8002c5c:	88d2      	ldrh	r2, [r2, #6]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d804      	bhi.n	8002c6c <sampling+0xc5c>
 8002c62:	4b44      	ldr	r3, [pc, #272]	; (8002d74 <sampling+0xd64>)
 8002c64:	88db      	ldrh	r3, [r3, #6]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <sampling+0xd78>)
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24


	//if (sine_counter[9]>((sampler.length+sampler.start+sampler_offset)-256))   {sine_counter[9]=sampler.start+sampler_offset; note[3].position=0;}// jump to start , turn off
	if (sine_counter[9]>((sampler.length+sampler.start)-256))   {sine_counter[9]=sampler.start; note[3].position=0;}
 8002c6c:	4b46      	ldr	r3, [pc, #280]	; (8002d88 <sampling+0xd78>)
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	4a40      	ldr	r2, [pc, #256]	; (8002d74 <sampling+0xd64>)
 8002c72:	8952      	ldrh	r2, [r2, #10]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4a3f      	ldr	r2, [pc, #252]	; (8002d74 <sampling+0xd64>)
 8002c78:	88d2      	ldrh	r2, [r2, #6]
 8002c7a:	440a      	add	r2, r1
 8002c7c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d908      	bls.n	8002c96 <sampling+0xc86>
 8002c84:	4b3b      	ldr	r3, [pc, #236]	; (8002d74 <sampling+0xd64>)
 8002c86:	88db      	ldrh	r3, [r3, #6]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <sampling+0xd78>)
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <sampling+0xd58>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	sampler.start_ptr=&RAM[sine_counter[9]];
 8002c96:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <sampling+0xd78>)
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <sampling+0xd7c>)
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <sampling+0xd64>)
 8002ca2:	6153      	str	r3, [r2, #20]
	//sampler.start_ptr=&RAM[sine_counter[9]-sampler_offset];    // only 256
//	sampler_offset=(sampler.offset&15)*(sampler.length>>4);

//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002ca4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002ca8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002cac:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <sampling+0xd80>)
 8002cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb2:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002cb6:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8002cba:	2210      	movs	r2, #16
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <sampling+0xd84>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f009 fc98 	bl	800c5f4 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <sampling+0xd88>)
 8002cc6:	f8c7 3598 	str.w	r3, [r7, #1432]	; 0x598


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
*/

	uint8_t send_spi2[520]={0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
 8002cca:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002cce:	f2a3 55b4 	subw	r5, r3, #1460	; 0x5b4
 8002cd2:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <sampling+0xd8c>)
 8002cd4:	462c      	mov	r4, r5
 8002cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cd8:	c407      	stmia	r4!, {r0, r1, r2}
 8002cda:	8023      	strh	r3, [r4, #0]
 8002cdc:	3402      	adds	r4, #2
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	7023      	strb	r3, [r4, #0]
 8002ce2:	f105 030f 	add.w	r3, r5, #15
 8002ce6:	f240 12f9 	movw	r2, #505	; 0x1f9
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f009 fc8f 	bl	800c610 <memset>
	uint32_t address=sampler.ram_seq<<1 ;
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <sampling+0xd64>)
 8002cf4:	8b1b      	ldrh	r3, [r3, #24]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
//	send_spi1[0]=0x03; //read page 1
//	send_spi1[1]=(address>>16)&255;
//	send_spi1[2]=(address>>8)&255;
//	send_spi1[3]=address&255;     // can start anywhere
	send_spi2[0]=0x03; //read page 1
 8002cfc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002d00:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002d04:	2203      	movs	r2, #3
 8002d06:	701a      	strb	r2, [r3, #0]
	send_spi2[1]=0;
 8002d08:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002d0c:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002d10:	2200      	movs	r2, #0
 8002d12:	705a      	strb	r2, [r3, #1]
	send_spi2[2]=0;
 8002d14:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002d18:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	709a      	strb	r2, [r3, #2]
	send_spi2[3]=0;     // can start anywhere*/
 8002d20:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002d24:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 8002d28:	2200      	movs	r2, #0
 8002d2a:	70da      	strb	r2, [r3, #3]

	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //    reading is ok , problem is writing
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	2110      	movs	r1, #16
 8002d30:	481b      	ldr	r0, [pc, #108]	; (8002da0 <sampling+0xd90>)
 8002d32:	f005 f995 	bl	8008060 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,512);  // ignore first 4 bytes
 8002d36:	1d39      	adds	r1, r7, #4
 8002d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <sampling+0xd94>)
 8002d3e:	481a      	ldr	r0, [pc, #104]	; (8002da8 <sampling+0xd98>)
 8002d40:	f007 fb06 	bl	800a350 <HAL_SPI_TransmitReceive_DMA>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // goes low after calling dma
 8002d44:	2200      	movs	r2, #0
 8002d46:	2110      	movs	r1, #16
 8002d48:	4815      	ldr	r0, [pc, #84]	; (8002da0 <sampling+0xd90>)
 8002d4a:	f005 f989 	bl	8008060 <HAL_GPIO_WritePin>

//
//if (sampler.record_enable==0)      flash_result = flash_page_read (sampler.ram_seq<<1 );   // should jump 256
//  memcpy(&sample_block_temp,flash_read_block,512);

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <sampling+0xd5c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]
 8002d54:	e25a      	b.n	800320c <sampling+0x11fc>
 8002d56:	bf00      	nop
 8002d58:	7ae147ae 	.word	0x7ae147ae
 8002d5c:	3fefae14 	.word	0x3fefae14
 8002d60:	0800d1a0 	.word	0x0800d1a0
 8002d64:	0800d1e0 	.word	0x0800d1e0
 8002d68:	20000158 	.word	0x20000158
 8002d6c:	20008bca 	.word	0x20008bca
 8002d70:	200086fc 	.word	0x200086fc
 8002d74:	20000204 	.word	0x20000204
 8002d78:	20008b6c 	.word	0x20008b6c
 8002d7c:	20008b78 	.word	0x20008b78
 8002d80:	20008b84 	.word	0x20008b84
 8002d84:	20008b90 	.word	0x20008b90
 8002d88:	20008b60 	.word	0x20008b60
 8002d8c:	200005b8 	.word	0x200005b8
 8002d90:	2000874c 	.word	0x2000874c
 8002d94:	2000b3e0 	.word	0x2000b3e0
 8002d98:	2000022c 	.word	0x2000022c
 8002d9c:	0800cf40 	.word	0x0800cf40
 8002da0:	40020000 	.word	0x40020000
 8002da4:	20010e40 	.word	0x20010e40
 8002da8:	20011544 	.word	0x20011544
	i_total=i+sample_pointB;
 8002dac:	4bd0      	ldr	r3, [pc, #832]	; (80030f0 <sampling+0x10e0>)
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	4bd0      	ldr	r3, [pc, #832]	; (80030f4 <sampling+0x10e4>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	f8a7 3592 	strh.w	r3, [r7, #1426]	; 0x592
	sampling_position=(i>>6);
 8002dba:	4bcd      	ldr	r3, [pc, #820]	; (80030f0 <sampling+0x10e0>)
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4bcc      	ldr	r3, [pc, #816]	; (80030f8 <sampling+0x10e8>)
 8002dc6:	701a      	strb	r2, [r3, #0]


	sample_adc=input_holder[i>>1];
 8002dc8:	4bc9      	ldr	r3, [pc, #804]	; (80030f0 <sampling+0x10e0>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4bca      	ldr	r3, [pc, #808]	; (80030fc <sampling+0x10ec>)
 8002dd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dd8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
	sample_adc=(sample_adc-2040)<<11;
 8002ddc:	f8d7 3508 	ldr.w	r3, [r7, #1288]	; 0x508
 8002de0:	f5a3 63ff 	sub.w	r3, r3, #2040	; 0x7f8
 8002de4:	02db      	lsls	r3, r3, #11
 8002de6:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508

	//uint8_t* byte1=&RAM[sampler.ram_seq];
	//uint8_t* byte2=&RAM[sampler.ram_seq]+1;

	ram_temp=RAM[sampler.ram_seq];
 8002dea:	4bc5      	ldr	r3, [pc, #788]	; (8003100 <sampling+0x10f0>)
 8002dec:	8b1b      	ldrh	r3, [r3, #24]
 8002dee:	461a      	mov	r2, r3
 8002df0:	4bc4      	ldr	r3, [pc, #784]	; (8003104 <sampling+0x10f4>)
 8002df2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002df6:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
	//ram_temp=((RAM[sampler.ram_seq])>>8)+ram_temp;  // back to front
//	tempvar = myvar.byte[0];
	//   myvar.byte[0] = myvar.byte[1];
	//   myvar.byte[1] = tempvar

	ram_temp=(ram_temp-32767)<<4;
 8002dfa:	f8d7 3504 	ldr.w	r3, [r7, #1284]	; 0x504
 8002dfe:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002e02:	3b7f      	subs	r3, #127	; 0x7f
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504


	//ram_temp=(ram_temp)<<4;    // will clip sometimes


	if(i&1)  sampler.ram_seq=sampler.ram_seq+1;
 8002e0a:	4bb9      	ldr	r3, [pc, #740]	; (80030f0 <sampling+0x10e0>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <sampling+0xe12>
 8002e16:	4bba      	ldr	r3, [pc, #744]	; (8003100 <sampling+0x10f0>)
 8002e18:	8b1b      	ldrh	r3, [r3, #24]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4bb8      	ldr	r3, [pc, #736]	; (8003100 <sampling+0x10f0>)
 8002e20:	831a      	strh	r2, [r3, #24]

	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002e22:	4bb3      	ldr	r3, [pc, #716]	; (80030f0 <sampling+0x10e0>)
 8002e24:	881a      	ldrh	r2, [r3, #0]
 8002e26:	4bb8      	ldr	r3, [pc, #736]	; (8003108 <sampling+0x10f8>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d129      	bne.n	8002e82 <sampling+0xe72>
 8002e2e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e36:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002e38:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e40:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002e42:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e4a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002e4c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002e56:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e5e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002e62:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e6a:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002e6c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e74:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002e78:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e80:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002e82:	4b9b      	ldr	r3, [pc, #620]	; (80030f0 <sampling+0x10e0>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 80a5 	bne.w	8002fda <sampling+0xfca>
	  //  LFO_source_new(); // calculate lfo maybe 8 times for now
	    patch_target_replace();    // update values , not too bad
 8002e90:	f7fe fb0c 	bl	80014ac <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002e94:	4b9d      	ldr	r3, [pc, #628]	; (800310c <sampling+0x10fc>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fc21 	bl	80006e0 <__aeabi_i2d>
 8002e9e:	a390      	add	r3, pc, #576	; (adr r3, 80030e0 <sampling+0x10d0>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd f9a0 	bl	80001e8 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fd fca0 	bl	80007f4 <__aeabi_d2f>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	ee00 3a10 	vmov	s0, r3
 8002eba:	f009 fb29 	bl	800c510 <arm_sin_f32>
 8002ebe:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002ec2:	ed83 0a00 	vstr	s0, [r3]
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002ec6:	4b8c      	ldr	r3, [pc, #560]	; (80030f8 <sampling+0x10e8>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ece:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8002ed2:	edd2 7a00 	vldr	s15, [r2]
 8002ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eda:	4a8d      	ldr	r2, [pc, #564]	; (8003110 <sampling+0x1100>)
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002ee4:	4b89      	ldr	r3, [pc, #548]	; (800310c <sampling+0x10fc>)
 8002ee6:	7a1b      	ldrb	r3, [r3, #8]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fbf9 	bl	80006e0 <__aeabi_i2d>
 8002eee:	a37e      	add	r3, pc, #504	; (adr r3, 80030e8 <sampling+0x10d8>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd f978 	bl	80001e8 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fd fc78 	bl	80007f4 <__aeabi_d2f>
 8002f04:	4603      	mov	r3, r0
 8002f06:	ee00 3a10 	vmov	s0, r3
 8002f0a:	f009 fb01 	bl	800c510 <arm_sin_f32>
 8002f0e:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002f12:	ed83 0a00 	vstr	s0, [r3]
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002f16:	4b78      	ldr	r3, [pc, #480]	; (80030f8 <sampling+0x10e8>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f1e:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8002f22:	edd2 7a00 	vldr	s15, [r2]
 8002f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f2a:	4a79      	ldr	r2, [pc, #484]	; (8003110 <sampling+0x1100>)
 8002f2c:	3309      	adds	r3, #9
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002f36:	4b75      	ldr	r3, [pc, #468]	; (800310c <sampling+0x10fc>)
 8002f38:	7c1b      	ldrb	r3, [r3, #16]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fbd0 	bl	80006e0 <__aeabi_i2d>
 8002f40:	a369      	add	r3, pc, #420	; (adr r3, 80030e8 <sampling+0x10d8>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd f94f 	bl	80001e8 <__aeabi_dmul>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fc4f 	bl	80007f4 <__aeabi_d2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	ee00 3a10 	vmov	s0, r3
 8002f5c:	f009 fad8 	bl	800c510 <arm_sin_f32>
 8002f60:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002f64:	ed83 0a00 	vstr	s0, [r3]
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002f68:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <sampling+0x10e8>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f70:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8002f74:	edd2 7a00 	vldr	s15, [r2]
 8002f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7c:	4a64      	ldr	r2, [pc, #400]	; (8003110 <sampling+0x1100>)
 8002f7e:	3312      	adds	r3, #18
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002f88:	4b60      	ldr	r3, [pc, #384]	; (800310c <sampling+0x10fc>)
 8002f8a:	7e1b      	ldrb	r3, [r3, #24]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fba7 	bl	80006e0 <__aeabi_i2d>
 8002f92:	a355      	add	r3, pc, #340	; (adr r3, 80030e8 <sampling+0x10d8>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd f926 	bl	80001e8 <__aeabi_dmul>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fc26 	bl	80007f4 <__aeabi_d2f>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	ee00 3a10 	vmov	s0, r3
 8002fae:	f009 faaf 	bl	800c510 <arm_sin_f32>
 8002fb2:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8002fb6:	ed83 0a00 	vstr	s0, [r3]
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002fba:	4b4f      	ldr	r3, [pc, #316]	; (80030f8 <sampling+0x10e8>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fc2:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8002fc6:	edd2 7a00 	vldr	s15, [r2]
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	4a50      	ldr	r2, [pc, #320]	; (8003110 <sampling+0x1100>)
 8002fd0:	331b      	adds	r3, #27
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8002fda:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8002fde:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 8002fe2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002fe6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002fe8:	4413      	add	r3, r2
 8002fea:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 8002fee:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8002ff2:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 8002ff6:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002ffa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 8003002:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8003006:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800300a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800300e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003010:	4413      	add	r3, r2
 8003012:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 8003016:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800301a:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 800301e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003022:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8003024:	4413      	add	r3, r2
 8003026:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 800302a:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800302e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003032:	db04      	blt.n	800303e <sampling+0x102e>
 8003034:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 8003038:	425b      	negs	r3, r3
 800303a:	f8c7 3548 	str.w	r3, [r7, #1352]	; 0x548
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 800303e:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8003042:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003046:	db04      	blt.n	8003052 <sampling+0x1042>
 8003048:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 800304c:	425b      	negs	r3, r3
 800304e:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 8003052:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8003056:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800305a:	db04      	blt.n	8003066 <sampling+0x1056>
 800305c:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 8003060:	425b      	negs	r3, r3
 8003062:	f8c7 3550 	str.w	r3, [r7, #1360]	; 0x550
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 8003066:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 800306a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800306e:	db04      	blt.n	800307a <sampling+0x106a>
 8003070:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 8003074:	425b      	negs	r3, r3
 8003076:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
//		if (sample_accus[0]>(1048575)) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
//		if (sample_accus[1]>1048575) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
//		if (sample_accus[2]>1048575) sample_accus[2] =-0-sample_accus[2] ; //
//		if (sample_accus[3]>1048575) sample_accus[3] =-0-sample_accus[3] ; //

	sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 800307a:	f8d7 3548 	ldr.w	r3, [r7, #1352]	; 0x548
 800307e:	2b00      	cmp	r3, #0
 8003080:	bfb8      	it	lt
 8003082:	425b      	neglt	r3, r3
 8003084:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
	sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 800308e:	f8d7 354c 	ldr.w	r3, [r7, #1356]	; 0x54c
 8003092:	2b00      	cmp	r3, #0
 8003094:	bfb8      	it	lt
 8003096:	425b      	neglt	r3, r3
 8003098:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 80030a2:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfb8      	it	lt
 80030aa:	425b      	neglt	r3, r3
 80030ac:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
	sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 80030b6:	f8d7 3554 	ldr.w	r3, [r7, #1364]	; 0x554
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bfb8      	it	lt
 80030be:	425b      	neglt	r3, r3
 80030c0:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c



					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 80030ca:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80030ce:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <sampling+0x1104>)
 80030d8:	79d2      	ldrb	r2, [r2, #7]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	e01b      	b.n	8003118 <sampling+0x1108>
 80030e0:	f9378ee3 	.word	0xf9378ee3
 80030e4:	3f793a2d 	.word	0x3f793a2d
 80030e8:	bc6a7efa 	.word	0xbc6a7efa
 80030ec:	3f789374 	.word	0x3f789374
 80030f0:	20008bca 	.word	0x20008bca
 80030f4:	20008bc8 	.word	0x20008bc8
 80030f8:	2000d980 	.word	0x2000d980
 80030fc:	2000bdc0 	.word	0x2000bdc0
 8003100:	20000204 	.word	0x20000204
 8003104:	200005b8 	.word	0x200005b8
 8003108:	20010e3c 	.word	0x20010e3c
 800310c:	200001e4 	.word	0x200001e4
 8003110:	2000b498 	.word	0x2000b498
 8003114:	20000158 	.word	0x20000158
 8003118:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					sample_temp2=(sample_temp1)>>2;
 800311c:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8003120:	109b      	asrs	r3, r3, #2
 8003122:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 8003126:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800312a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a4f      	ldr	r2, [pc, #316]	; (8003270 <sampling+0x1260>)
 8003134:	7d52      	ldrb	r2, [r2, #21]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					sample_temp3=sample_temp1>>2; // 20+8
 800313e:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8003142:	109b      	asrs	r3, r3, #2
 8003144:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580

					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 8003148:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800314c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a46      	ldr	r2, [pc, #280]	; (8003270 <sampling+0x1260>)
 8003156:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 8003162:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 8003166:	109b      	asrs	r3, r3, #2
 8003168:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c

					if (note[3].position) sample_Accu[9]=((*(sampler.start_ptr+(i>>1))-32767)<<4)+(sample_Accu[9]>>1); // bit hot , also  add avr
 800316c:	4b40      	ldr	r3, [pc, #256]	; (8003270 <sampling+0x1260>)
 800316e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <sampling+0x118c>
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <sampling+0x1264>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	4b3f      	ldr	r3, [pc, #252]	; (8003278 <sampling+0x1268>)
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800318c:	3b7f      	subs	r3, #127	; 0x7f
 800318e:	011a      	lsls	r2, r3, #4
 8003190:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8003194:	105b      	asrs	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544


					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 800319c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80031a0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a31      	ldr	r2, [pc, #196]	; (8003270 <sampling+0x1260>)
 80031aa:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					sample_temp5 =sample_temp1>>2;
 80031b6:	f8d7 3588 	ldr.w	r3, [r7, #1416]	; 0x588
 80031ba:	109b      	asrs	r3, r3, #2
 80031bc:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
					//sample_Accu[3] =sine_out>>4;
	play_holder0[i]=sample_temp2;  // write to bank
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <sampling+0x1268>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	4619      	mov	r1, r3
 80031c6:	4a2d      	ldr	r2, [pc, #180]	; (800327c <sampling+0x126c>)
 80031c8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80031cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 80031d0:	4b29      	ldr	r3, [pc, #164]	; (8003278 <sampling+0x1268>)
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <sampling+0x1270>)
 80031d8:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 80031dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <sampling+0x1268>)
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	4a27      	ldr	r2, [pc, #156]	; (8003284 <sampling+0x1274>)
 80031e8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 80031ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <sampling+0x1268>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	4a24      	ldr	r2, [pc, #144]	; (8003288 <sampling+0x1278>)
 80031f8:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 80031fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <sampling+0x1268>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <sampling+0x1268>)
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <sampling+0x1268>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003214:	f4ff adca 	bcc.w	8002dac <sampling+0xd9c>
	} // end of osc , doing some sound

						if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <sampling+0x1260>)
 800321a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <sampling+0x121e>
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <sampling+0x127c>)
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <sampling+0x127c>)
 800322c:	6253      	str	r3, [r2, #36]	; 0x24

memcpy(&sample_accus_hold,sample_accus,16);
 800322e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8003232:	2210      	movs	r2, #16
 8003234:	4619      	mov	r1, r3
 8003236:	4816      	ldr	r0, [pc, #88]	; (8003290 <sampling+0x1280>)
 8003238:	f009 f9dc 	bl	800c5f4 <memcpy>
memcpy(&sample_accu_counter,accu_count,8);   // copy back
 800323c:	4915      	ldr	r1, [pc, #84]	; (8003294 <sampling+0x1284>)
 800323e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8003242:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 8003246:	460b      	mov	r3, r1
 8003248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800324c:	e883 0003 	stmia.w	r3, {r0, r1}
memcpy(&sample_counts_holder,sample_counts_temp,80);
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <sampling+0x1288>)
 8003252:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8003256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800325a:	4610      	mov	r0, r2
 800325c:	4619      	mov	r1, r3
 800325e:	2350      	movs	r3, #80	; 0x50
 8003260:	461a      	mov	r2, r3
 8003262:	f009 f9c7 	bl	800c5f4 <memcpy>
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <sampling+0x1268>)
 8003268:	2200      	movs	r2, #0
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	e2b3      	b.n	80037d6 <sampling+0x17c6>
 800326e:	bf00      	nop
 8003270:	20000158 	.word	0x20000158
 8003274:	20000204 	.word	0x20000204
 8003278:	20008bca 	.word	0x20008bca
 800327c:	2000f184 	.word	0x2000f184
 8003280:	2000d984 	.word	0x2000d984
 8003284:	2000e184 	.word	0x2000e184
 8003288:	2000e984 	.word	0x2000e984
 800328c:	20008b60 	.word	0x20008b60
 8003290:	2000b3e0 	.word	0x2000b3e0
 8003294:	2000874c 	.word	0x2000874c
 8003298:	200086fc 	.word	0x200086fc
				i_total=i+sample_pointB;
 800329c:	4bbd      	ldr	r3, [pc, #756]	; (8003594 <sampling+0x1584>)
 800329e:	881a      	ldrh	r2, [r3, #0]
 80032a0:	4bbd      	ldr	r3, [pc, #756]	; (8003598 <sampling+0x1588>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	f8a7 3592 	strh.w	r3, [r7, #1426]	; 0x592

			sampling_position=(i>>6);
 80032aa:	4bba      	ldr	r3, [pc, #744]	; (8003594 <sampling+0x1584>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	099b      	lsrs	r3, r3, #6
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	4bb9      	ldr	r3, [pc, #740]	; (800359c <sampling+0x158c>)
 80032b6:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 80032b8:	4bb6      	ldr	r3, [pc, #728]	; (8003594 <sampling+0x1584>)
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80032c6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ce:	4ab1      	ldr	r2, [pc, #708]	; (8003594 <sampling+0x1584>)
 80032d0:	8812      	ldrh	r2, [r2, #0]
 80032d2:	f002 021f 	and.w	r2, r2, #31
 80032d6:	2101      	movs	r1, #1
 80032d8:	fa01 f202 	lsl.w	r2, r1, r2
 80032dc:	4293      	cmp	r3, r2
 80032de:	d10f      	bne.n	8003300 <sampling+0x12f0>
 80032e0:	4baf      	ldr	r3, [pc, #700]	; (80035a0 <sampling+0x1590>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	711a      	strb	r2, [r3, #4]
 80032e6:	4baf      	ldr	r3, [pc, #700]	; (80035a4 <sampling+0x1594>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	4bad      	ldr	r3, [pc, #692]	; (80035a4 <sampling+0x1594>)
 80032f0:	801a      	strh	r2, [r3, #0]
 80032f2:	4bac      	ldr	r3, [pc, #688]	; (80035a4 <sampling+0x1594>)
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	4ba9      	ldr	r3, [pc, #676]	; (80035a4 <sampling+0x1594>)
 80032fe:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 8003300:	4ba4      	ldr	r3, [pc, #656]	; (8003594 <sampling+0x1584>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	461a      	mov	r2, r3
 8003306:	4ba8      	ldr	r3, [pc, #672]	; (80035a8 <sampling+0x1598>)
 8003308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800330c:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8003310:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <sampling+0x1584>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800331c:	49a3      	ldr	r1, [pc, #652]	; (80035ac <sampling+0x159c>)
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 8003322:	4b9c      	ldr	r3, [pc, #624]	; (8003594 <sampling+0x1584>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4ba1      	ldr	r3, [pc, #644]	; (80035b0 <sampling+0x15a0>)
 800332a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332e:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8003332:	4b98      	ldr	r3, [pc, #608]	; (8003594 <sampling+0x1584>)
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800333e:	499d      	ldr	r1, [pc, #628]	; (80035b4 <sampling+0x15a4>)
 8003340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003344:	4b93      	ldr	r3, [pc, #588]	; (8003594 <sampling+0x1584>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b9b      	ldr	r3, [pc, #620]	; (80035b8 <sampling+0x15a8>)
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 8003354:	4b8f      	ldr	r3, [pc, #572]	; (8003594 <sampling+0x1584>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8003360:	4996      	ldr	r1, [pc, #600]	; (80035bc <sampling+0x15ac>)
 8003362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 8003366:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <sampling+0x1584>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	4b94      	ldr	r3, [pc, #592]	; (80035c0 <sampling+0x15b0>)
 800336e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003372:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8003376:	4b87      	ldr	r3, [pc, #540]	; (8003594 <sampling+0x1584>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 8003382:	4990      	ldr	r1, [pc, #576]	; (80035c4 <sampling+0x15b4>)
 8003384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 8003388:	4b8f      	ldr	r3, [pc, #572]	; (80035c8 <sampling+0x15b8>)
 800338a:	789b      	ldrb	r3, [r3, #2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d012      	beq.n	80033b6 <sampling+0x13a6>
 8003390:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8003394:	105a      	asrs	r2, r3, #1
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <sampling+0x1584>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	4b8a      	ldr	r3, [pc, #552]	; (80035c8 <sampling+0x15b8>)
 800339e:	789b      	ldrb	r3, [r3, #2]
 80033a0:	1acb      	subs	r3, r1, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	4980      	ldr	r1, [pc, #512]	; (80035ac <sampling+0x159c>)
 80033aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033ae:	105b      	asrs	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 80033b6:	4b84      	ldr	r3, [pc, #528]	; (80035c8 <sampling+0x15b8>)
 80033b8:	7a9b      	ldrb	r3, [r3, #10]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <sampling+0x13d4>
 80033be:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80033c2:	105a      	asrs	r2, r3, #1
 80033c4:	4b73      	ldr	r3, [pc, #460]	; (8003594 <sampling+0x1584>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4b7f      	ldr	r3, [pc, #508]	; (80035c8 <sampling+0x15b8>)
 80033cc:	7a9b      	ldrb	r3, [r3, #10]
 80033ce:	1acb      	subs	r3, r1, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	4977      	ldr	r1, [pc, #476]	; (80035b4 <sampling+0x15a4>)
 80033d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033dc:	105b      	asrs	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 80033e4:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <sampling+0x15b8>)
 80033e6:	7c9b      	ldrb	r3, [r3, #18]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <sampling+0x1402>
 80033ec:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80033f0:	105a      	asrs	r2, r3, #1
 80033f2:	4b68      	ldr	r3, [pc, #416]	; (8003594 <sampling+0x1584>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	4619      	mov	r1, r3
 80033f8:	4b73      	ldr	r3, [pc, #460]	; (80035c8 <sampling+0x15b8>)
 80033fa:	7c9b      	ldrb	r3, [r3, #18]
 80033fc:	1acb      	subs	r3, r1, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	496d      	ldr	r1, [pc, #436]	; (80035bc <sampling+0x15ac>)
 8003406:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800340a:	105b      	asrs	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 8003412:	4b6d      	ldr	r3, [pc, #436]	; (80035c8 <sampling+0x15b8>)
 8003414:	7e9b      	ldrb	r3, [r3, #26]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d012      	beq.n	8003440 <sampling+0x1430>
 800341a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800341e:	105a      	asrs	r2, r3, #1
 8003420:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <sampling+0x1584>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	4619      	mov	r1, r3
 8003426:	4b68      	ldr	r3, [pc, #416]	; (80035c8 <sampling+0x15b8>)
 8003428:	7e9b      	ldrb	r3, [r3, #26]
 800342a:	1acb      	subs	r3, r1, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	4964      	ldr	r1, [pc, #400]	; (80035c4 <sampling+0x15b4>)
 8003434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003438:	105b      	asrs	r3, r3, #1
 800343a:	4413      	add	r3, r2
 800343c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 8003440:	4b54      	ldr	r3, [pc, #336]	; (8003594 <sampling+0x1584>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <sampling+0x1440>
 800344c:	f000 fbe8 	bl	8003c20 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003450:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345c:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <sampling+0x15bc>)
 800345e:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003462:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <sampling+0x15bc>)
 8003464:	ed93 7a01 	vldr	s14, [r3, #4]
 8003468:	4b58      	ldr	r3, [pc, #352]	; (80035cc <sampling+0x15bc>)
 800346a:	edd3 6a03 	vldr	s13, [r3, #12]
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <sampling+0x15c0>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347c:	4b53      	ldr	r3, [pc, #332]	; (80035cc <sampling+0x15bc>)
 800347e:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 8003482:	4b52      	ldr	r3, [pc, #328]	; (80035cc <sampling+0x15bc>)
 8003484:	ed93 7a01 	vldr	s14, [r3, #4]
 8003488:	4b52      	ldr	r3, [pc, #328]	; (80035d4 <sampling+0x15c4>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <sampling+0x15bc>)
 8003494:	edd3 6a02 	vldr	s13, [r3, #8]
 8003498:	4b4e      	ldr	r3, [pc, #312]	; (80035d4 <sampling+0x15c4>)
 800349a:	edd3 7a01 	vldr	s15, [r3, #4]
 800349e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <sampling+0x15bc>)
 80034a8:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80034ac:	4b47      	ldr	r3, [pc, #284]	; (80035cc <sampling+0x15bc>)
 80034ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80034b2:	4b48      	ldr	r3, [pc, #288]	; (80035d4 <sampling+0x15c4>)
 80034b4:	edd3 7a00 	vldr	s15, [r3]
 80034b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034bc:	4b43      	ldr	r3, [pc, #268]	; (80035cc <sampling+0x15bc>)
 80034be:	edd3 6a03 	vldr	s13, [r3, #12]
 80034c2:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <sampling+0x15c4>)
 80034c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80034c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d0:	4b3e      	ldr	r3, [pc, #248]	; (80035cc <sampling+0x15bc>)
 80034d2:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80034d6:	4b3d      	ldr	r3, [pc, #244]	; (80035cc <sampling+0x15bc>)
 80034d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80034dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034e0:	ee17 3a90 	vmov	r3, s15
 80034e4:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 80034e8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <sampling+0x15bc>)
 80034f6:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <sampling+0x15bc>)
 80034fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8003500:	4b32      	ldr	r3, [pc, #200]	; (80035cc <sampling+0x15bc>)
 8003502:	edd3 6a06 	vldr	s13, [r3, #24]
 8003506:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <sampling+0x15c0>)
 8003508:	edd3 7a01 	vldr	s15, [r3, #4]
 800350c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <sampling+0x15bc>)
 8003516:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <sampling+0x15bc>)
 800351c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <sampling+0x15c4>)
 8003522:	edd3 7a02 	vldr	s15, [r3, #8]
 8003526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352a:	4b28      	ldr	r3, [pc, #160]	; (80035cc <sampling+0x15bc>)
 800352c:	edd3 6a05 	vldr	s13, [r3, #20]
 8003530:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <sampling+0x15c4>)
 8003532:	edd3 7a03 	vldr	s15, [r3, #12]
 8003536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <sampling+0x15bc>)
 8003540:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003544:	4b21      	ldr	r3, [pc, #132]	; (80035cc <sampling+0x15bc>)
 8003546:	ed93 7a05 	vldr	s14, [r3, #20]
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <sampling+0x15c4>)
 800354c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <sampling+0x15bc>)
 8003556:	edd3 6a06 	vldr	s13, [r3, #24]
 800355a:	4b1e      	ldr	r3, [pc, #120]	; (80035d4 <sampling+0x15c4>)
 800355c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	4b18      	ldr	r3, [pc, #96]	; (80035cc <sampling+0x15bc>)
 800356a:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <sampling+0x15bc>)
 8003570:	edd3 7a06 	vldr	s15, [r3, #24]
 8003574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003578:	ee17 3a90 	vmov	r3, s15
 800357c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

		filter_accus[7]=sample_Accu[2];
 8003580:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800358c:	4b0f      	ldr	r3, [pc, #60]	; (80035cc <sampling+0x15bc>)
 800358e:	edc3 7a07 	vstr	s15, [r3, #28]
 8003592:	e021      	b.n	80035d8 <sampling+0x15c8>
 8003594:	20008bca 	.word	0x20008bca
 8003598:	20008bc8 	.word	0x20008bc8
 800359c:	2000d980 	.word	0x2000d980
 80035a0:	2000c588 	.word	0x2000c588
 80035a4:	2000b528 	.word	0x2000b528
 80035a8:	2000f184 	.word	0x2000f184
 80035ac:	20010bc4 	.word	0x20010bc4
 80035b0:	2000d984 	.word	0x2000d984
 80035b4:	20010c44 	.word	0x20010c44
 80035b8:	2000e184 	.word	0x2000e184
 80035bc:	20010cc4 	.word	0x20010cc4
 80035c0:	2000e984 	.word	0x2000e984
 80035c4:	20010d44 	.word	0x20010d44
 80035c8:	200001e4 	.word	0x200001e4
 80035cc:	2000b43c 	.word	0x2000b43c
 80035d0:	2000b428 	.word	0x2000b428
 80035d4:	2000b478 	.word	0x2000b478
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80035d8:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <sampling+0x17f8>)
 80035da:	ed93 7a07 	vldr	s14, [r3, #28]
 80035de:	4b8a      	ldr	r3, [pc, #552]	; (8003808 <sampling+0x17f8>)
 80035e0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80035e4:	4b89      	ldr	r3, [pc, #548]	; (800380c <sampling+0x17fc>)
 80035e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80035ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f2:	4b85      	ldr	r3, [pc, #532]	; (8003808 <sampling+0x17f8>)
 80035f4:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80035f8:	4b83      	ldr	r3, [pc, #524]	; (8003808 <sampling+0x17f8>)
 80035fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80035fe:	4b84      	ldr	r3, [pc, #528]	; (8003810 <sampling+0x1800>)
 8003600:	edd3 7a04 	vldr	s15, [r3, #16]
 8003604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003608:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <sampling+0x17f8>)
 800360a:	edd3 6a08 	vldr	s13, [r3, #32]
 800360e:	4b80      	ldr	r3, [pc, #512]	; (8003810 <sampling+0x1800>)
 8003610:	edd3 7a05 	vldr	s15, [r3, #20]
 8003614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003618:	ee77 7a27 	vadd.f32	s15, s14, s15
 800361c:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <sampling+0x17f8>)
 800361e:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003622:	4b79      	ldr	r3, [pc, #484]	; (8003808 <sampling+0x17f8>)
 8003624:	ed93 7a08 	vldr	s14, [r3, #32]
 8003628:	4b79      	ldr	r3, [pc, #484]	; (8003810 <sampling+0x1800>)
 800362a:	edd3 7a04 	vldr	s15, [r3, #16]
 800362e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003632:	4b75      	ldr	r3, [pc, #468]	; (8003808 <sampling+0x17f8>)
 8003634:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003638:	4b75      	ldr	r3, [pc, #468]	; (8003810 <sampling+0x1800>)
 800363a:	edd3 7a05 	vldr	s15, [r3, #20]
 800363e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003646:	4b70      	ldr	r3, [pc, #448]	; (8003808 <sampling+0x17f8>)
 8003648:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800364c:	4b6e      	ldr	r3, [pc, #440]	; (8003808 <sampling+0x17f8>)
 800364e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003656:	ee17 3a90 	vmov	r3, s15
 800365a:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528

				filter_accus[10]=sample_Accu[3];
 800365e:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800366a:	4b67      	ldr	r3, [pc, #412]	; (8003808 <sampling+0x17f8>)
 800366c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 8003670:	4b65      	ldr	r3, [pc, #404]	; (8003808 <sampling+0x17f8>)
 8003672:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003676:	4b64      	ldr	r3, [pc, #400]	; (8003808 <sampling+0x17f8>)
 8003678:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800367c:	4b63      	ldr	r3, [pc, #396]	; (800380c <sampling+0x17fc>)
 800367e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <sampling+0x17f8>)
 800368c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 8003690:	4b5d      	ldr	r3, [pc, #372]	; (8003808 <sampling+0x17f8>)
 8003692:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003696:	4b5e      	ldr	r3, [pc, #376]	; (8003810 <sampling+0x1800>)
 8003698:	edd3 7a06 	vldr	s15, [r3, #24]
 800369c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a0:	4b59      	ldr	r3, [pc, #356]	; (8003808 <sampling+0x17f8>)
 80036a2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80036a6:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <sampling+0x1800>)
 80036a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80036ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b4:	4b54      	ldr	r3, [pc, #336]	; (8003808 <sampling+0x17f8>)
 80036b6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80036ba:	4b53      	ldr	r3, [pc, #332]	; (8003808 <sampling+0x17f8>)
 80036bc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80036c0:	4b53      	ldr	r3, [pc, #332]	; (8003810 <sampling+0x1800>)
 80036c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80036c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <sampling+0x17f8>)
 80036cc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80036d0:	4b4f      	ldr	r3, [pc, #316]	; (8003810 <sampling+0x1800>)
 80036d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80036d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036de:	4b4a      	ldr	r3, [pc, #296]	; (8003808 <sampling+0x17f8>)
 80036e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80036e4:	4b48      	ldr	r3, [pc, #288]	; (8003808 <sampling+0x17f8>)
 80036e6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80036ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ee:	ee17 3a90 	vmov	r3, s15
 80036f2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 80036fc:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 8003700:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 8003704:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8003708:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800370c:	4413      	add	r3, r2
 800370e:	141b      	asrs	r3, r3, #16
 8003710:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 8003714:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8003718:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800371c:	4413      	add	r3, r2
 800371e:	141b      	asrs	r3, r3, #16
 8003720:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8003724:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <sampling+0x1804>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2bc7      	cmp	r3, #199	; 0xc7
 800372a:	d005      	beq.n	8003738 <sampling+0x1728>
 800372c:	4b39      	ldr	r3, [pc, #228]	; (8003814 <sampling+0x1804>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b37      	ldr	r3, [pc, #220]	; (8003814 <sampling+0x1804>)
 8003736:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003738:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	db0a      	blt.n	8003758 <sampling+0x1748>
 8003742:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003746:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <sampling+0x1808>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	3301      	adds	r3, #1
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <sampling+0x1808>)
 8003754:	701a      	strb	r2, [r3, #0]
 8003756:	e007      	b.n	8003768 <sampling+0x1758>
 8003758:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800375c:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003760:	dc02      	bgt.n	8003768 <sampling+0x1758>
 8003762:	4b2e      	ldr	r3, [pc, #184]	; (800381c <sampling+0x180c>)
 8003764:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003768:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800376c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003770:	db0a      	blt.n	8003788 <sampling+0x1778>
 8003772:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003776:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <sampling+0x1808>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	3301      	adds	r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <sampling+0x1808>)
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	e007      	b.n	8003798 <sampling+0x1788>
 8003788:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 800378c:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003790:	dc02      	bgt.n	8003798 <sampling+0x1788>
 8003792:	4b22      	ldr	r3, [pc, #136]	; (800381c <sampling+0x180c>)
 8003794:	f8c7 35a8 	str.w	r3, [r7, #1448]	; 0x5a8



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003798:	f8d7 35ac 	ldr.w	r3, [r7, #1452]	; 0x5ac
 800379c:	b29a      	uxth	r2, r3
 800379e:	f8b7 3592 	ldrh.w	r3, [r7, #1426]	; 0x592
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80037a8:	b291      	uxth	r1, r2
 80037aa:	4a1d      	ldr	r2, [pc, #116]	; (8003820 <sampling+0x1810>)
 80037ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80037b0:	f8d7 35a8 	ldr.w	r3, [r7, #1448]	; 0x5a8
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	f8b7 3592 	ldrh.w	r3, [r7, #1426]	; 0x592
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	3301      	adds	r3, #1
 80037be:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80037c2:	b291      	uxth	r1, r2
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <sampling+0x1810>)
 80037c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80037ca:	4b16      	ldr	r3, [pc, #88]	; (8003824 <sampling+0x1814>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	3301      	adds	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <sampling+0x1814>)
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <sampling+0x1814>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037de:	f4ff ad5d 	bcc.w	800329c <sampling+0x128c>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80037e2:	4b11      	ldr	r3, [pc, #68]	; (8003828 <sampling+0x1818>)
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <sampling+0x17e6>
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <sampling+0x181c>)
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	3301      	adds	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <sampling+0x181c>)
 80037f4:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <sampling+0x1820>)
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <sampling+0x1824>)
 80037fc:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 80037fe:	bf00      	nop
 8003800:	f507 67b7 	add.w	r7, r7, #1464	; 0x5b8
 8003804:	46bd      	mov	sp, r7
 8003806:	bdb0      	pop	{r4, r5, r7, pc}
 8003808:	2000b43c 	.word	0x2000b43c
 800380c:	2000b428 	.word	0x2000b428
 8003810:	2000b478 	.word	0x2000b478
 8003814:	2000b3f8 	.word	0x2000b3f8
 8003818:	2000f984 	.word	0x2000f984
 800381c:	fffffc01 	.word	0xfffffc01
 8003820:	20008bcc 	.word	0x20008bcc
 8003824:	20008bca 	.word	0x20008bca
 8003828:	2000014e 	.word	0x2000014e
 800382c:	2000c1da 	.word	0x2000c1da
 8003830:	2000c1d8 	.word	0x2000c1d8
 8003834:	2000c1d4 	.word	0x2000c1d4

08003838 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003838:	b490      	push	{r4, r7}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 800383e:	4b50      	ldr	r3, [pc, #320]	; (8003980 <LFO_square_one_pulse+0x148>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	70fb      	strb	r3, [r7, #3]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003844:	2307      	movs	r3, #7
 8003846:	71bb      	strb	r3, [r7, #6]
	uint8_t lfo_c ;
	uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t delay;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003848:	2300      	movs	r3, #0
 800384a:	717b      	strb	r3, [r7, #5]
 800384c:	e08e      	b.n	800396c <LFO_square_one_pulse+0x134>

	    pulse_length=LFO_square[lfo_c].rate;
 800384e:	797a      	ldrb	r2, [r7, #5]
 8003850:	494c      	ldr	r1, [pc, #304]	; (8003984 <LFO_square_one_pulse+0x14c>)
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	803b      	strh	r3, [r7, #0]
	    if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
 8003860:	797a      	ldrb	r2, [r7, #5]
 8003862:	4948      	ldr	r1, [pc, #288]	; (8003984 <LFO_square_one_pulse+0x14c>)
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3303      	adds	r3, #3
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b07      	cmp	r3, #7
 8003874:	d80a      	bhi.n	800388c <LFO_square_one_pulse+0x54>
 8003876:	797a      	ldrb	r2, [r7, #5]
 8003878:	4942      	ldr	r1, [pc, #264]	; (8003984 <LFO_square_one_pulse+0x14c>)
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3303      	adds	r3, #3
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	713b      	strb	r3, [r7, #4]
 800388a:	e001      	b.n	8003890 <LFO_square_one_pulse+0x58>
 800388c:	2307      	movs	r3, #7
 800388e:	713b      	strb	r3, [r7, #4]

	    if (pulse_length<120)  {pulse_low=pulse_length-56;seq_div=63;}  // This is the end
 8003890:	883b      	ldrh	r3, [r7, #0]
 8003892:	2b77      	cmp	r3, #119	; 0x77
 8003894:	d805      	bhi.n	80038a2 <LFO_square_one_pulse+0x6a>
 8003896:	883b      	ldrh	r3, [r7, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3b38      	subs	r3, #56	; 0x38
 800389c:	71fb      	strb	r3, [r7, #7]
 800389e:	233f      	movs	r3, #63	; 0x3f
 80038a0:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<56)  {pulse_low=pulse_length-24;seq_div=31;}
 80038a2:	883b      	ldrh	r3, [r7, #0]
 80038a4:	2b37      	cmp	r3, #55	; 0x37
 80038a6:	d805      	bhi.n	80038b4 <LFO_square_one_pulse+0x7c>
 80038a8:	883b      	ldrh	r3, [r7, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3b18      	subs	r3, #24
 80038ae:	71fb      	strb	r3, [r7, #7]
 80038b0:	231f      	movs	r3, #31
 80038b2:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<24)  {pulse_low=pulse_length-8; seq_div=15;}
 80038b4:	883b      	ldrh	r3, [r7, #0]
 80038b6:	2b17      	cmp	r3, #23
 80038b8:	d805      	bhi.n	80038c6 <LFO_square_one_pulse+0x8e>
 80038ba:	883b      	ldrh	r3, [r7, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3b08      	subs	r3, #8
 80038c0:	71fb      	strb	r3, [r7, #7]
 80038c2:	230f      	movs	r3, #15
 80038c4:	71bb      	strb	r3, [r7, #6]
	    if (pulse_length<8)  {pulse_low=pulse_length; seq_div=7;}
 80038c6:	883b      	ldrh	r3, [r7, #0]
 80038c8:	2b07      	cmp	r3, #7
 80038ca:	d803      	bhi.n	80038d4 <LFO_square_one_pulse+0x9c>
 80038cc:	883b      	ldrh	r3, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
 80038d0:	2307      	movs	r3, #7
 80038d2:	71bb      	strb	r3, [r7, #6]

	    delay=(delay*seq_div)>>3;   // this is the start
 80038d4:	793b      	ldrb	r3, [r7, #4]
 80038d6:	79ba      	ldrb	r2, [r7, #6]
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	10db      	asrs	r3, r3, #3
 80038de:	713b      	strb	r3, [r7, #4]

	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=delay))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	79bb      	ldrb	r3, [r7, #6]
 80038e4:	4013      	ands	r3, r2
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	79fa      	ldrb	r2, [r7, #7]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d321      	bcc.n	8003932 <LFO_square_one_pulse+0xfa>
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	79bb      	ldrb	r3, [r7, #6]
 80038f2:	4013      	ands	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	793a      	ldrb	r2, [r7, #4]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d81a      	bhi.n	8003932 <LFO_square_one_pulse+0xfa>
 80038fc:	797a      	ldrb	r2, [r7, #5]
 80038fe:	4921      	ldr	r1, [pc, #132]	; (8003984 <LFO_square_one_pulse+0x14c>)
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	3301      	adds	r3, #1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	797a      	ldrb	r2, [r7, #5]
 8003912:	491d      	ldr	r1, [pc, #116]	; (8003988 <LFO_square_one_pulse+0x150>)
 8003914:	7809      	ldrb	r1, [r1, #0]
 8003916:	460c      	mov	r4, r1
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	b298      	uxth	r0, r3
 800391c:	4919      	ldr	r1, [pc, #100]	; (8003984 <LFO_square_one_pulse+0x14c>)
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4423      	add	r3, r4
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	440b      	add	r3, r1
 800392c:	4602      	mov	r2, r0
 800392e:	809a      	strh	r2, [r3, #4]
 8003930:	e019      	b.n	8003966 <LFO_square_one_pulse+0x12e>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8003932:	797a      	ldrb	r2, [r7, #5]
 8003934:	4913      	ldr	r1, [pc, #76]	; (8003984 <LFO_square_one_pulse+0x14c>)
 8003936:	4613      	mov	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3302      	adds	r3, #2
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	797a      	ldrb	r2, [r7, #5]
 8003948:	490f      	ldr	r1, [pc, #60]	; (8003988 <LFO_square_one_pulse+0x150>)
 800394a:	7809      	ldrb	r1, [r1, #0]
 800394c:	460c      	mov	r4, r1
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	b298      	uxth	r0, r3
 8003952:	490c      	ldr	r1, [pc, #48]	; (8003984 <LFO_square_one_pulse+0x14c>)
 8003954:	4613      	mov	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4423      	add	r3, r4
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	440b      	add	r3, r1
 8003962:	4602      	mov	r2, r0
 8003964:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003966:	797b      	ldrb	r3, [r7, #5]
 8003968:	3301      	adds	r3, #1
 800396a:	717b      	strb	r3, [r7, #5]
 800396c:	797b      	ldrb	r3, [r7, #5]
 800396e:	2b09      	cmp	r3, #9
 8003970:	f67f af6d 	bls.w	800384e <LFO_square_one_pulse+0x16>

	}
    }
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bc90      	pop	{r4, r7}
 800397e:	4770      	bx	lr
 8003980:	2000d014 	.word	0x2000d014
 8003984:	2000c4c0 	.word	0x2000c4c0
 8003988:	2000d980 	.word	0x2000d980
 800398c:	00000000 	.word	0x00000000

08003990 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b08d      	sub	sp, #52	; 0x34
 8003994:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 80039b0:	2300      	movs	r3, #0
 80039b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80039b6:	e117      	b.n	8003be8 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 80039b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039bc:	4992      	ldr	r1, [pc, #584]	; (8003c08 <LFO_source_synced+0x278>)
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 80039cc:	8b7b      	ldrh	r3, [r7, #26]
 80039ce:	2b0a      	cmp	r3, #10
 80039d0:	d901      	bls.n	80039d6 <LFO_source_synced+0x46>
 80039d2:	230a      	movs	r3, #10
 80039d4:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 80039d6:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <LFO_source_synced+0x27c>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	4619      	mov	r1, r3
 80039dc:	8b7b      	ldrh	r3, [r7, #26]
 80039de:	2201      	movs	r2, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	400b      	ands	r3, r1
 80039e8:	8b7a      	ldrh	r2, [r7, #26]
 80039ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039ee:	fa41 f202 	asr.w	r2, r1, r2
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);
 80039f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039fc:	4982      	ldr	r1, [pc, #520]	; (8003c08 <LFO_source_synced+0x278>)
 80039fe:	4613      	mov	r3, r2
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3304      	adds	r3, #4
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	035b      	lsls	r3, r3, #13
 8003a12:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003a14:	68b8      	ldr	r0, [r7, #8]
 8003a16:	f7fc fe53 	bl	80006c0 <__aeabi_ui2d>
 8003a1a:	a379      	add	r3, pc, #484	; (adr r3, 8003c00 <LFO_source_synced+0x270>)
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f7fc fbe2 	bl	80001e8 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7fc fee2 	bl	80007f4 <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8003a34:	ed97 0a05 	vldr	s0, [r7, #20]
 8003a38:	f008 fd6a 	bl	800c510 <arm_sin_f32>
 8003a3c:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003a40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a44:	4970      	ldr	r1, [pc, #448]	; (8003c08 <LFO_source_synced+0x278>)
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	4413      	add	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3301      	adds	r3, #1
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5c:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003a60:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003c10 <LFO_source_synced+0x280>
 8003a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a74:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003a82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a86:	4960      	ldr	r1, [pc, #384]	; (8003c08 <LFO_source_synced+0x278>)
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3303      	adds	r3, #3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa0:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 8003aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aac:	ee17 3a90 	vmov	r3, s15
 8003ab0:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8003ab2:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8003ac2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ac6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003c14 <LFO_source_synced+0x284>
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	dd01      	ble.n	8003ad8 <LFO_source_synced+0x148>
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <LFO_source_synced+0x288>)
 8003ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8003ad8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae0:	ee17 3a90 	vmov	r3, s15
 8003ae4:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d902      	bls.n	8003af6 <LFO_source_synced+0x166>
 8003af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003af4:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003af6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003afa:	4943      	ldr	r1, [pc, #268]	; (8003c08 <LFO_source_synced+0x278>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3301      	adds	r3, #1
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d902      	bls.n	8003b2a <LFO_source_synced+0x19a>
 8003b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b28:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003b2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <LFO_source_synced+0x28c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461c      	mov	r4, r3
 8003b34:	8878      	ldrh	r0, [r7, #2]
 8003b36:	4934      	ldr	r1, [pc, #208]	; (8003c08 <LFO_source_synced+0x278>)
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	4413      	add	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	4423      	add	r3, r4
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	440b      	add	r3, r1
 8003b46:	4602      	mov	r2, r0
 8003b48:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003b4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <LFO_source_synced+0x28c>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	461c      	mov	r4, r3
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	b298      	uxth	r0, r3
 8003b58:	492b      	ldr	r1, [pc, #172]	; (8003c08 <LFO_source_synced+0x278>)
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	4413      	add	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4423      	add	r3, r4
 8003b64:	330c      	adds	r3, #12
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	440b      	add	r3, r1
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b74:	d202      	bcs.n	8003b7c <LFO_source_synced+0x1ec>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	e003      	b.n	8003b84 <LFO_source_synced+0x1f4>
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003b82:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003b84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b88:	491f      	ldr	r1, [pc, #124]	; (8003c08 <LFO_source_synced+0x278>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3301      	adds	r3, #1
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	11db      	asrs	r3, r3, #7
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	dd02      	ble.n	8003bba <LFO_source_synced+0x22a>
 8003bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bb8:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003bba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bbe:	4b17      	ldr	r3, [pc, #92]	; (8003c1c <LFO_source_synced+0x28c>)
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	b298      	uxth	r0, r3
 8003bc8:	490f      	ldr	r1, [pc, #60]	; (8003c08 <LFO_source_synced+0x278>)
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4423      	add	r3, r4
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	440b      	add	r3, r1
 8003bda:	4602      	mov	r2, r0
 8003bdc:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003bde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be2:	3301      	adds	r3, #1
 8003be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	f67f aee3 	bls.w	80039b8 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	3734      	adds	r7, #52	; 0x34
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	f3af 8000 	nop.w
 8003c00:	64dc8498 	.word	0x64dc8498
 8003c04:	3f092213 	.word	0x3f092213
 8003c08:	2000c1dc 	.word	0x2000c1dc
 8003c0c:	2000b3dc 	.word	0x2000b3dc
 8003c10:	43800000 	.word	0x43800000
 8003c14:	477ffe00 	.word	0x477ffe00
 8003c18:	477fff00 	.word	0x477fff00
 8003c1c:	2000d980 	.word	0x2000d980

08003c20 <frq_point>:


void  frq_point(void){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003c24:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <frq_point+0x218>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	4a84      	ldr	r2, [pc, #528]	; (8003e3c <frq_point+0x21c>)
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a83      	ldr	r2, [pc, #524]	; (8003e40 <frq_point+0x220>)
 8003c32:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003c34:	4b80      	ldr	r3, [pc, #512]	; (8003e38 <frq_point+0x218>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	4a80      	ldr	r2, [pc, #512]	; (8003e3c <frq_point+0x21c>)
 8003c3a:	3309      	adds	r3, #9
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7f      	ldr	r2, [pc, #508]	; (8003e40 <frq_point+0x220>)
 8003c44:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003c46:	4b7c      	ldr	r3, [pc, #496]	; (8003e38 <frq_point+0x218>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <frq_point+0x21c>)
 8003c4c:	3312      	adds	r3, #18
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <frq_point+0x220>)
 8003c56:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003c58:	4b77      	ldr	r3, [pc, #476]	; (8003e38 <frq_point+0x218>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	4a77      	ldr	r2, [pc, #476]	; (8003e3c <frq_point+0x21c>)
 8003c5e:	331b      	adds	r3, #27
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a76      	ldr	r2, [pc, #472]	; (8003e40 <frq_point+0x220>)
 8003c68:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003c6a:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <frq_point+0x220>)
 8003c6c:	edd3 7a00 	vldr	s15, [r3]
 8003c70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	dd04      	ble.n	8003c88 <frq_point+0x68>
 8003c7e:	4b70      	ldr	r3, [pc, #448]	; (8003e40 <frq_point+0x220>)
 8003c80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e00b      	b.n	8003ca0 <frq_point+0x80>
 8003c88:	4b6d      	ldr	r3, [pc, #436]	; (8003e40 <frq_point+0x220>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	d503      	bpl.n	8003ca0 <frq_point+0x80>
 8003c98:	4b69      	ldr	r3, [pc, #420]	; (8003e40 <frq_point+0x220>)
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003ca0:	4b67      	ldr	r3, [pc, #412]	; (8003e40 <frq_point+0x220>)
 8003ca2:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	dd04      	ble.n	8003cbe <frq_point+0x9e>
 8003cb4:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <frq_point+0x220>)
 8003cb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cba:	611a      	str	r2, [r3, #16]
 8003cbc:	e00b      	b.n	8003cd6 <frq_point+0xb6>
 8003cbe:	4b60      	ldr	r3, [pc, #384]	; (8003e40 <frq_point+0x220>)
 8003cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	d503      	bpl.n	8003cd6 <frq_point+0xb6>
 8003cce:	4b5c      	ldr	r3, [pc, #368]	; (8003e40 <frq_point+0x220>)
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003cd6:	4b5a      	ldr	r3, [pc, #360]	; (8003e40 <frq_point+0x220>)
 8003cd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	dd04      	ble.n	8003cf4 <frq_point+0xd4>
 8003cea:	4b55      	ldr	r3, [pc, #340]	; (8003e40 <frq_point+0x220>)
 8003cec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	e00b      	b.n	8003d0c <frq_point+0xec>
 8003cf4:	4b52      	ldr	r3, [pc, #328]	; (8003e40 <frq_point+0x220>)
 8003cf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d503      	bpl.n	8003d0c <frq_point+0xec>
 8003d04:	4b4e      	ldr	r3, [pc, #312]	; (8003e40 <frq_point+0x220>)
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <frq_point+0x220>)
 8003d0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	dd04      	ble.n	8003d2a <frq_point+0x10a>
 8003d20:	4b47      	ldr	r3, [pc, #284]	; (8003e40 <frq_point+0x220>)
 8003d22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003d26:	619a      	str	r2, [r3, #24]
 8003d28:	e00b      	b.n	8003d42 <frq_point+0x122>
 8003d2a:	4b45      	ldr	r3, [pc, #276]	; (8003e40 <frq_point+0x220>)
 8003d2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	d503      	bpl.n	8003d42 <frq_point+0x122>
 8003d3a:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <frq_point+0x220>)
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003d42:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <frq_point+0x220>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d50:	4b3b      	ldr	r3, [pc, #236]	; (8003e40 <frq_point+0x220>)
 8003d52:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003d56:	4b3a      	ldr	r3, [pc, #232]	; (8003e40 <frq_point+0x220>)
 8003d58:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <frq_point+0x220>)
 8003d66:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003d6a:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <frq_point+0x220>)
 8003d6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d78:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <frq_point+0x220>)
 8003d7a:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <frq_point+0x220>)
 8003d80:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8c:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <frq_point+0x220>)
 8003d8e:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003d92:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <frq_point+0x220>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fc fcb4 	bl	8000704 <__aeabi_f2d>
 8003d9c:	a324      	add	r3, pc, #144	; (adr r3, 8003e30 <frq_point+0x210>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	f7fc fa21 	bl	80001e8 <__aeabi_dmul>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fc fd21 	bl	80007f4 <__aeabi_d2f>
 8003db2:	4603      	mov	r3, r0
 8003db4:	4a23      	ldr	r2, [pc, #140]	; (8003e44 <frq_point+0x224>)
 8003db6:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003db8:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <frq_point+0x220>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fca1 	bl	8000704 <__aeabi_f2d>
 8003dc2:	a31b      	add	r3, pc, #108	; (adr r3, 8003e30 <frq_point+0x210>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	f7fc fa0e 	bl	80001e8 <__aeabi_dmul>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f7fc fd0e 	bl	80007f4 <__aeabi_d2f>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <frq_point+0x224>)
 8003ddc:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003dde:	4b18      	ldr	r3, [pc, #96]	; (8003e40 <frq_point+0x220>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fc8e 	bl	8000704 <__aeabi_f2d>
 8003de8:	a311      	add	r3, pc, #68	; (adr r3, 8003e30 <frq_point+0x210>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc f9fb 	bl	80001e8 <__aeabi_dmul>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f7fc fcfb 	bl	80007f4 <__aeabi_d2f>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4a10      	ldr	r2, [pc, #64]	; (8003e44 <frq_point+0x224>)
 8003e02:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003e04:	4b0e      	ldr	r3, [pc, #56]	; (8003e40 <frq_point+0x220>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc fc7b 	bl	8000704 <__aeabi_f2d>
 8003e0e:	a308      	add	r3, pc, #32	; (adr r3, 8003e30 <frq_point+0x210>)
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f7fc f9e8 	bl	80001e8 <__aeabi_dmul>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	4619      	mov	r1, r3
 8003e20:	f7fc fce8 	bl	80007f4 <__aeabi_d2f>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <frq_point+0x224>)
 8003e28:	60d3      	str	r3, [r2, #12]

}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	9999999a 	.word	0x9999999a
 8003e34:	3fc99999 	.word	0x3fc99999
 8003e38:	2000d980 	.word	0x2000d980
 8003e3c:	2000b498 	.word	0x2000b498
 8003e40:	2000b478 	.word	0x2000b478
 8003e44:	2000b428 	.word	0x2000b428

08003e48 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0




}   // end o void
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003e5e:	4b72      	ldr	r3, [pc, #456]	; (8004028 <displayBuffer2+0x1d0>)
 8003e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b71      	ldr	r3, [pc, #452]	; (800402c <displayBuffer2+0x1d4>)
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	336b      	adds	r3, #107	; 0x6b
 8003e76:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003e78:	4b6b      	ldr	r3, [pc, #428]	; (8004028 <displayBuffer2+0x1d0>)
 8003e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b6a      	ldr	r3, [pc, #424]	; (800402c <displayBuffer2+0x1d4>)
 8003e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4a68      	ldr	r2, [pc, #416]	; (8004030 <displayBuffer2+0x1d8>)
 8003e90:	4413      	add	r3, r2
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b67      	ldr	r3, [pc, #412]	; (8004034 <displayBuffer2+0x1dc>)
 8003e96:	6810      	ldr	r0, [r2, #0]
 8003e98:	6851      	ldr	r1, [r2, #4]
 8003e9a:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003e9c:	4a66      	ldr	r2, [pc, #408]	; (8004038 <displayBuffer2+0x1e0>)
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	8019      	strh	r1, [r3, #0]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	0c12      	lsrs	r2, r2, #16
 8003eaa:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <displayBuffer2+0x1d0>)
 8003eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4b61      	ldr	r3, [pc, #388]	; (800403c <displayBuffer2+0x1e4>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f008 fb68 	bl	800c598 <atoi>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <displayBuffer2+0x1e8>)
 8003ece:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003ed0:	4b5b      	ldr	r3, [pc, #364]	; (8004040 <displayBuffer2+0x1e8>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4857      	ldr	r0, [pc, #348]	; (8004034 <displayBuffer2+0x1dc>)
 8003ed8:	f7fc fe5e 	bl	8000b98 <menu_vars>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4a59      	ldr	r2, [pc, #356]	; (8004044 <displayBuffer2+0x1ec>)
 8003ee0:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003ee2:	88bb      	ldrh	r3, [r7, #4]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	4a58      	ldr	r2, [pc, #352]	; (8004048 <displayBuffer2+0x1f0>)
 8003ee8:	1898      	adds	r0, r3, r2
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a50      	ldr	r2, [pc, #320]	; (8004030 <displayBuffer2+0x1d8>)
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f008 fb7c 	bl	800c5f4 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);
 8003efc:	88bb      	ldrh	r3, [r7, #4]
 8003efe:	3311      	adds	r3, #17
 8003f00:	4a51      	ldr	r2, [pc, #324]	; (8004048 <displayBuffer2+0x1f0>)
 8003f02:	4413      	add	r3, r2
 8003f04:	4951      	ldr	r1, [pc, #324]	; (800404c <displayBuffer2+0x1f4>)
 8003f06:	2203      	movs	r2, #3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f008 fb73 	bl	800c5f4 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003f0e:	88bb      	ldrh	r3, [r7, #4]
 8003f10:	3305      	adds	r3, #5
 8003f12:	4a4d      	ldr	r2, [pc, #308]	; (8004048 <displayBuffer2+0x1f0>)
 8003f14:	4413      	add	r3, r2
 8003f16:	883a      	ldrh	r2, [r7, #0]
 8003f18:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <displayBuffer2+0x1f8>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d102      	bne.n	8003f28 <displayBuffer2+0xd0>
 8003f22:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <displayBuffer2+0x1fc>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003f28:	4b49      	ldr	r3, [pc, #292]	; (8004050 <displayBuffer2+0x1f8>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b24      	cmp	r3, #36	; 0x24
 8003f2e:	d102      	bne.n	8003f36 <displayBuffer2+0xde>
 8003f30:	4b48      	ldr	r3, [pc, #288]	; (8004054 <displayBuffer2+0x1fc>)
 8003f32:	2202      	movs	r2, #2
 8003f34:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003f36:	4b46      	ldr	r3, [pc, #280]	; (8004050 <displayBuffer2+0x1f8>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b30      	cmp	r3, #48	; 0x30
 8003f3c:	d906      	bls.n	8003f4c <displayBuffer2+0xf4>
 8003f3e:	4b44      	ldr	r3, [pc, #272]	; (8004050 <displayBuffer2+0x1f8>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b34      	cmp	r3, #52	; 0x34
 8003f44:	d802      	bhi.n	8003f4c <displayBuffer2+0xf4>
 8003f46:	4b43      	ldr	r3, [pc, #268]	; (8004054 <displayBuffer2+0x1fc>)
 8003f48:	2203      	movs	r2, #3
 8003f4a:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <displayBuffer2+0x1fc>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d054      	beq.n	8003ffe <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003f54:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <displayBuffer2+0x1ec>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	2b36      	cmp	r3, #54	; 0x36
 8003f60:	d901      	bls.n	8003f66 <displayBuffer2+0x10e>
 8003f62:	2300      	movs	r3, #0
 8003f64:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <displayBuffer2+0x1fc>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d10c      	bne.n	8003f88 <displayBuffer2+0x130>
 8003f6e:	88bb      	ldrh	r3, [r7, #4]
 8003f70:	3308      	adds	r3, #8
 8003f72:	4a35      	ldr	r2, [pc, #212]	; (8004048 <displayBuffer2+0x1f0>)
 8003f74:	1898      	adds	r0, r3, r2
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a2d      	ldr	r2, [pc, #180]	; (8004030 <displayBuffer2+0x1d8>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2208      	movs	r2, #8
 8003f82:	4619      	mov	r1, r3
 8003f84:	f008 fb36 	bl	800c5f4 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <displayBuffer2+0x1fc>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d10c      	bne.n	8003faa <displayBuffer2+0x152>
 8003f90:	88bb      	ldrh	r3, [r7, #4]
 8003f92:	3308      	adds	r3, #8
 8003f94:	4a2c      	ldr	r2, [pc, #176]	; (8004048 <displayBuffer2+0x1f0>)
 8003f96:	1898      	adds	r0, r3, r2
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <displayBuffer2+0x200>)
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f008 fb25 	bl	800c5f4 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8003faa:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <displayBuffer2+0x1fc>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d125      	bne.n	8003ffe <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <displayBuffer2+0x1e8>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	4a28      	ldr	r2, [pc, #160]	; (800405c <displayBuffer2+0x204>)
 8003fbc:	5cd3      	ldrb	r3, [r2, r3]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d017      	beq.n	8003ff2 <displayBuffer2+0x19a>
 8003fc2:	4827      	ldr	r0, [pc, #156]	; (8004060 <displayBuffer2+0x208>)
 8003fc4:	4b1e      	ldr	r3, [pc, #120]	; (8004040 <displayBuffer2+0x1e8>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	4a25      	ldr	r2, [pc, #148]	; (8004064 <displayBuffer2+0x20c>)
 8003fce:	5cd3      	ldrb	r3, [r2, r3]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b17      	ldr	r3, [pc, #92]	; (8004030 <displayBuffer2+0x1d8>)
 8003fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd8:	2206      	movs	r2, #6
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f008 fb0a 	bl	800c5f4 <memcpy>
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <displayBuffer2+0x1e8>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <displayBuffer2+0x204>)
 8003fea:	5cd2      	ldrb	r2, [r2, r3]
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <displayBuffer2+0x210>)
 8003fee:	729a      	strb	r2, [r3, #10]
 8003ff0:	e005      	b.n	8003ffe <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <displayBuffer2+0x208>)
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	491d      	ldr	r1, [pc, #116]	; (800406c <displayBuffer2+0x214>)
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f008 fafb 	bl	800c5f4 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <displayBuffer2+0x1fc>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8004004:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <displayBuffer2+0x218>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b11      	cmp	r3, #17
 800400a:	d103      	bne.n	8004014 <displayBuffer2+0x1bc>
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <displayBuffer2+0x218>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8004012:	e005      	b.n	8004020 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8004014:	4b16      	ldr	r3, [pc, #88]	; (8004070 <displayBuffer2+0x218>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	3301      	adds	r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	4b14      	ldr	r3, [pc, #80]	; (8004070 <displayBuffer2+0x218>)
 800401e:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000220 	.word	0x20000220
 800402c:	2000d36c 	.word	0x2000d36c
 8004030:	20000438 	.word	0x20000438
 8004034:	2000d970 	.word	0x2000d970
 8004038:	0800d154 	.word	0x0800d154
 800403c:	2000d76c 	.word	0x2000d76c
 8004040:	2000d978 	.word	0x2000d978
 8004044:	2000d96c 	.word	0x2000d96c
 8004048:	20011048 	.word	0x20011048
 800404c:	20008adc 	.word	0x20008adc
 8004050:	2000f9a9 	.word	0x2000f9a9
 8004054:	2000d97f 	.word	0x2000d97f
 8004058:	20000514 	.word	0x20000514
 800405c:	20010bb8 	.word	0x20010bb8
 8004060:	20010dc7 	.word	0x20010dc7
 8004064:	20010e28 	.word	0x20010e28
 8004068:	20010dc4 	.word	0x20010dc4
 800406c:	0800d148 	.word	0x0800d148
 8004070:	20000150 	.word	0x20000150

08004074 <SPI_command>:

void SPI_command(void){
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <SPI_command+0x68>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d128      	bne.n	80040d4 <SPI_command+0x60>
 8004082:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <SPI_command+0x6c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d124      	bne.n	80040d4 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800408a:	4b16      	ldr	r3, [pc, #88]	; (80040e4 <SPI_command+0x70>)
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	0a1b      	lsrs	r3, r3, #8
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <SPI_command+0x2a>
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <SPI_command+0x74>)
 8004098:	22f8      	movs	r2, #248	; 0xf8
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e002      	b.n	80040a4 <SPI_command+0x30>
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <SPI_command+0x74>)
 80040a0:	22fa      	movs	r2, #250	; 0xfa
 80040a2:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 80040a4:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <SPI_command+0x74>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 80040aa:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <SPI_command+0x70>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 80040b8:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <SPI_command+0x70>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 80040c2:	4639      	mov	r1, r7
 80040c4:	2303      	movs	r3, #3
 80040c6:	2203      	movs	r2, #3
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <SPI_command+0x78>)
 80040ca:	f005 fc9c 	bl	8009a06 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 80040ce:	4b03      	ldr	r3, [pc, #12]	; (80040dc <SPI_command+0x68>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	801a      	strh	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	2000b40c 	.word	0x2000b40c
 80040e0:	2000b412 	.word	0x2000b412
 80040e4:	2000b410 	.word	0x2000b410
 80040e8:	2000b40e 	.word	0x2000b40e
 80040ec:	2001159c 	.word	0x2001159c

080040f0 <display_init>:

void display_init(void){
 80040f0:	b5b0      	push	{r4, r5, r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <display_init+0x90>)
 80040f8:	1d3c      	adds	r4, r7, #4
 80040fa:	461d      	mov	r5, r3
 80040fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8004108:	4b1e      	ldr	r3, [pc, #120]	; (8004184 <display_init+0x94>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d132      	bne.n	8004176 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8004110:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <display_init+0x98>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b06      	subs	r3, #6
 8004118:	b29a      	uxth	r2, r3
 800411a:	4b1c      	ldr	r3, [pc, #112]	; (800418c <display_init+0x9c>)
 800411c:	801a      	strh	r2, [r3, #0]
 800411e:	f7ff fe9b 	bl	8003e58 <displayBuffer2>
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <display_init+0x9c>)
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <display_init+0xa0>)
 800412a:	5c9b      	ldrb	r3, [r3, r2]
 800412c:	b29a      	uxth	r2, r3
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <display_init+0xa4>)
 8004130:	801a      	strh	r2, [r3, #0]
 8004132:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <display_init+0x98>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d80b      	bhi.n	8004154 <display_init+0x64>
 800413c:	2003      	movs	r0, #3
 800413e:	f002 f885 	bl	800624c <HAL_Delay>
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <display_init+0x98>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	3328      	adds	r3, #40	; 0x28
 800414a:	443b      	add	r3, r7
 800414c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <display_init+0xa4>)
 8004152:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <display_init+0x98>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	3301      	adds	r3, #1
 800415a:	b2da      	uxtb	r2, r3
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <display_init+0x98>)
 800415e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <display_init+0x94>)
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	f7ff ff85 	bl	8004074 <SPI_command>
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <display_init+0x94>)
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <display_init+0xa8>)
 8004172:	2200      	movs	r2, #0
 8004174:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8004176:	bf00      	nop
 8004178:	3728      	adds	r7, #40	; 0x28
 800417a:	46bd      	mov	sp, r7
 800417c:	bdb0      	pop	{r4, r5, r7, pc}
 800417e:	bf00      	nop
 8004180:	0800d158 	.word	0x0800d158
 8004184:	2000b412 	.word	0x2000b412
 8004188:	2000b413 	.word	0x2000b413
 800418c:	2000b414 	.word	0x2000b414
 8004190:	20000000 	.word	0x20000000
 8004194:	2000b410 	.word	0x2000b410
 8004198:	2000b40c 	.word	0x2000b40c

0800419c <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 80041b2:	4b25      	ldr	r3, [pc, #148]	; (8004248 <gfx_TX_block+0xac>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 80041b8:	2300      	movs	r3, #0
 80041ba:	81bb      	strh	r3, [r7, #12]
 80041bc:	e034      	b.n	8004228 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 80041be:	4b22      	ldr	r3, [pc, #136]	; (8004248 <gfx_TX_block+0xac>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b21      	ldr	r3, [pc, #132]	; (800424c <gfx_TX_block+0xb0>)
 80041c6:	5c9b      	ldrb	r3, [r3, r2]
 80041c8:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 80041ca:	7afb      	ldrb	r3, [r7, #11]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d902      	bls.n	80041d6 <gfx_TX_block+0x3a>
 80041d0:	23fa      	movs	r3, #250	; 0xfa
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	e001      	b.n	80041da <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80041d6:	23f8      	movs	r3, #248	; 0xf8
 80041d8:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 80041de:	7abb      	ldrb	r3, [r7, #10]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 80041ea:	7abb      	ldrb	r3, [r7, #10]
 80041ec:	011b      	lsls	r3, r3, #4
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 80041f2:	89bb      	ldrh	r3, [r7, #12]
 80041f4:	4a16      	ldr	r2, [pc, #88]	; (8004250 <gfx_TX_block+0xb4>)
 80041f6:	4413      	add	r3, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	8819      	ldrh	r1, [r3, #0]
 80041fe:	789b      	ldrb	r3, [r3, #2]
 8004200:	8011      	strh	r1, [r2, #0]
 8004202:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	2b11      	cmp	r3, #17
 8004208:	d102      	bne.n	8004210 <gfx_TX_block+0x74>
 800420a:	2300      	movs	r3, #0
 800420c:	72fb      	strb	r3, [r7, #11]
 800420e:	e002      	b.n	8004216 <gfx_TX_block+0x7a>
 8004210:	7afb      	ldrb	r3, [r7, #11]
 8004212:	3301      	adds	r3, #1
 8004214:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8004216:	4b0c      	ldr	r3, [pc, #48]	; (8004248 <gfx_TX_block+0xac>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	4b0a      	ldr	r3, [pc, #40]	; (8004248 <gfx_TX_block+0xac>)
 8004220:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004222:	89bb      	ldrh	r3, [r7, #12]
 8004224:	3303      	adds	r3, #3
 8004226:	81bb      	strh	r3, [r7, #12]
 8004228:	89bb      	ldrh	r3, [r7, #12]
 800422a:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800422e:	d3c6      	bcc.n	80041be <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <gfx_TX_block+0xac>)
 8004232:	2200      	movs	r2, #0
 8004234:	801a      	strh	r2, [r3, #0]
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <gfx_TX_block+0xb8>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]

}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	2000bdb2 	.word	0x2000bdb2
 800424c:	2000b930 	.word	0x2000b930
 8004250:	2000fbb4 	.word	0x2000fbb4
 8004254:	2000bdbe 	.word	0x2000bdbe

08004258 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <gfx_clear+0x6c>)
 800425e:	2200      	movs	r2, #0
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	e01c      	b.n	800429e <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8004264:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <gfx_clear+0x70>)
 8004266:	2202      	movs	r2, #2
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	e00e      	b.n	800428a <gfx_clear+0x32>
 800426c:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <gfx_clear+0x6c>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <gfx_clear+0x70>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	4413      	add	r3, r2
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <gfx_clear+0x74>)
 800427a:	2100      	movs	r1, #0
 800427c:	54d1      	strb	r1, [r2, r3]
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <gfx_clear+0x70>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <gfx_clear+0x70>)
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <gfx_clear+0x70>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	2b11      	cmp	r3, #17
 8004290:	d9ec      	bls.n	800426c <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <gfx_clear+0x6c>)
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	3312      	adds	r3, #18
 8004298:	b29a      	uxth	r2, r3
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <gfx_clear+0x6c>)
 800429c:	801a      	strh	r2, [r3, #0]
 800429e:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <gfx_clear+0x6c>)
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80042a6:	d3dd      	bcc.n	8004264 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <gfx_clear+0x78>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <gfx_clear+0x7c>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80042b4:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <gfx_clear+0x80>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]

}
 80042ba:	bf00      	nop
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	20008bc4 	.word	0x20008bc4
 80042c8:	20008bca 	.word	0x20008bca
 80042cc:	2000b930 	.word	0x2000b930
 80042d0:	2000bdb4 	.word	0x2000bdb4
 80042d4:	2000bdb2 	.word	0x2000bdb2
 80042d8:	2000bdbe 	.word	0x2000bdbe

080042dc <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80042e6:	2300      	movs	r3, #0
 80042e8:	80fb      	strh	r3, [r7, #6]
 80042ea:	e006      	b.n	80042fa <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80042ec:	88fb      	ldrh	r3, [r7, #6]
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <display_clear+0x34>)
 80042f0:	212f      	movs	r1, #47	; 0x2f
 80042f2:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	3301      	adds	r3, #1
 80042f8:	80fb      	strh	r3, [r7, #6]
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004300:	d3f4      	bcc.n	80042ec <display_clear+0x10>
	}


}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	20011048 	.word	0x20011048

08004314 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004318:	4b05      	ldr	r3, [pc, #20]	; (8004330 <display_generate+0x1c>)
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 800431e:	f7ff fd93 	bl	8003e48 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8004322:	f7ff fd99 	bl	8003e58 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8004326:	4b03      	ldr	r3, [pc, #12]	; (8004334 <display_generate+0x20>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 800432c:	bf00      	nop
 800432e:	bd80      	pop	{r7, pc}
 8004330:	2000d982 	.word	0x2000d982
 8004334:	2000bdbe 	.word	0x2000bdbe

08004338 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004338:	b480      	push	{r7}
 800433a:	b08b      	sub	sp, #44	; 0x2c
 800433c:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 800433e:	4b5c      	ldr	r3, [pc, #368]	; (80044b0 <gfx_line_fill+0x178>)
 8004340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004344:	461a      	mov	r2, r3
 8004346:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <gfx_line_fill+0x17c>)
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 800434e:	4b5a      	ldr	r3, [pc, #360]	; (80044b8 <gfx_line_fill+0x180>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	b29a      	uxth	r2, r3
 800435a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800435c:	09db      	lsrs	r3, r3, #7
 800435e:	b29b      	uxth	r3, r3
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	b29b      	uxth	r3, r3
 8004364:	4413      	add	r3, r2
 8004366:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8004368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	b29b      	uxth	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	00d2      	lsls	r2, r2, #3
 8004374:	4413      	add	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 800437a:	8c3b      	ldrh	r3, [r7, #32]
 800437c:	3390      	adds	r3, #144	; 0x90
 800437e:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8004380:	4b4e      	ldr	r3, [pc, #312]	; (80044bc <gfx_line_fill+0x184>)
 8004382:	2201      	movs	r2, #1
 8004384:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 800438c:	2300      	movs	r3, #0
 800438e:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8004390:	2300      	movs	r3, #0
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 80043a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d107      	bne.n	80043bc <gfx_line_fill+0x84>
 80043ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	3328      	adds	r3, #40	; 0x28
 80043b4:	443b      	add	r3, r7
 80043b6:	2201      	movs	r2, #1
 80043b8:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 80043bc:	4a40      	ldr	r2, [pc, #256]	; (80044c0 <gfx_line_fill+0x188>)
 80043be:	8c3b      	ldrh	r3, [r7, #32]
 80043c0:	8013      	strh	r3, [r2, #0]
 80043c2:	e068      	b.n	8004496 <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 80043c4:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <gfx_line_fill+0x18c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	801a      	strh	r2, [r3, #0]
 80043ca:	e055      	b.n	8004478 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 80043cc:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <gfx_line_fill+0x18c>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	4413      	add	r3, r2
 80043d8:	4a3b      	ldr	r2, [pc, #236]	; (80044c8 <gfx_line_fill+0x190>)
 80043da:	5cd3      	ldrb	r3, [r2, r3]
 80043dc:	3b2f      	subs	r3, #47	; 0x2f
 80043de:	b29b      	uxth	r3, r3
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 80043ee:	8b7b      	ldrh	r3, [r7, #26]
 80043f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f4:	4a35      	ldr	r2, [pc, #212]	; (80044cc <gfx_line_fill+0x194>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 80043fa:	4b32      	ldr	r3, [pc, #200]	; (80044c4 <gfx_line_fill+0x18c>)
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	3328      	adds	r3, #40	; 0x28
 8004400:	443b      	add	r3, r7
 8004402:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004406:	461a      	mov	r2, r3
 8004408:	01d2      	lsls	r2, r2, #7
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	b25a      	sxtb	r2, r3
 8004410:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004414:	4053      	eors	r3, r2
 8004416:	b25b      	sxtb	r3, r3
 8004418:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 800441a:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <gfx_line_fill+0x188>)
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	4b28      	ldr	r3, [pc, #160]	; (80044c4 <gfx_line_fill+0x18c>)
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	4413      	add	r3, r2
 8004426:	3302      	adds	r3, #2
 8004428:	4929      	ldr	r1, [pc, #164]	; (80044d0 <gfx_line_fill+0x198>)
 800442a:	7f7a      	ldrb	r2, [r7, #29]
 800442c:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 800442e:	23fa      	movs	r3, #250	; 0xfa
 8004430:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8004432:	7f7b      	ldrb	r3, [r7, #29]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	b2db      	uxtb	r3, r3
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	b2db      	uxtb	r3, r3
 800443c:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 800443e:	7f7b      	ldrb	r3, [r7, #29]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	b2db      	uxtb	r3, r3
 8004444:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8004446:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <gfx_line_fill+0x188>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <gfx_line_fill+0x18c>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	441a      	add	r2, r3
 8004452:	4613      	mov	r3, r2
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4413      	add	r3, r2
 8004458:	3306      	adds	r3, #6
 800445a:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <gfx_line_fill+0x19c>)
 800445c:	4413      	add	r3, r2
 800445e:	461a      	mov	r2, r3
 8004460:	f107 0314 	add.w	r3, r7, #20
 8004464:	8819      	ldrh	r1, [r3, #0]
 8004466:	789b      	ldrb	r3, [r3, #2]
 8004468:	8011      	strh	r1, [r2, #0]
 800446a:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <gfx_line_fill+0x18c>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	3301      	adds	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	4b13      	ldr	r3, [pc, #76]	; (80044c4 <gfx_line_fill+0x18c>)
 8004476:	801a      	strh	r2, [r3, #0]
 8004478:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <gfx_line_fill+0x18c>)
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	2b0f      	cmp	r3, #15
 800447e:	d9a5      	bls.n	80043cc <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004484:	3301      	adds	r3, #1
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 800448a:	4b0d      	ldr	r3, [pc, #52]	; (80044c0 <gfx_line_fill+0x188>)
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	3312      	adds	r3, #18
 8004490:	b29a      	uxth	r2, r3
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <gfx_line_fill+0x188>)
 8004494:	801a      	strh	r2, [r3, #0]
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <gfx_line_fill+0x188>)
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	8bfa      	ldrh	r2, [r7, #30]
 800449c:	429a      	cmp	r2, r3
 800449e:	d891      	bhi.n	80043c4 <gfx_line_fill+0x8c>
    }
    }
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	372c      	adds	r7, #44	; 0x2c
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	20000220 	.word	0x20000220
 80044b4:	2000d36c 	.word	0x2000d36c
 80044b8:	20008bc6 	.word	0x20008bc6
 80044bc:	2000bdbe 	.word	0x2000bdbe
 80044c0:	20008bc4 	.word	0x20008bc4
 80044c4:	20008bca 	.word	0x20008bca
 80044c8:	20011048 	.word	0x20011048
 80044cc:	0800dda8 	.word	0x0800dda8
 80044d0:	2000b930 	.word	0x2000b930
 80044d4:	2000fbb4 	.word	0x2000fbb4

080044d8 <encoder2>:


void encoder2(void){  // encoder pos and data input
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <encoder2+0x184>)
 80044e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e4:	461a      	mov	r2, r3
 80044e6:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <encoder2+0x188>)
 80044e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4a5b      	ldr	r2, [pc, #364]	; (8004664 <encoder2+0x18c>)
 80044f6:	4413      	add	r3, r2
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b5b      	ldr	r3, [pc, #364]	; (8004668 <encoder2+0x190>)
 80044fc:	6810      	ldr	r0, [r2, #0]
 80044fe:	6851      	ldr	r1, [r2, #4]
 8004500:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004502:	4a5a      	ldr	r2, [pc, #360]	; (800466c <encoder2+0x194>)
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	4611      	mov	r1, r2
 800450a:	8019      	strh	r1, [r3, #0]
 800450c:	3302      	adds	r3, #2
 800450e:	0c12      	lsrs	r2, r2, #16
 8004510:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004512:	4b52      	ldr	r3, [pc, #328]	; (800465c <encoder2+0x184>)
 8004514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	461a      	mov	r2, r3
 800451c:	4b54      	ldr	r3, [pc, #336]	; (8004670 <encoder2+0x198>)
 800451e:	4413      	add	r3, r2
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	4618      	mov	r0, r3
 800452a:	f008 f835 	bl	800c598 <atoi>
 800452e:	4603      	mov	r3, r0
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4b50      	ldr	r3, [pc, #320]	; (8004674 <encoder2+0x19c>)
 8004534:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004536:	4b4f      	ldr	r3, [pc, #316]	; (8004674 <encoder2+0x19c>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	4619      	mov	r1, r3
 800453c:	484a      	ldr	r0, [pc, #296]	; (8004668 <encoder2+0x190>)
 800453e:	f7fc fb2b 	bl	8000b98 <menu_vars>
 8004542:	4603      	mov	r3, r0
 8004544:	4a4c      	ldr	r2, [pc, #304]	; (8004678 <encoder2+0x1a0>)
 8004546:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004548:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <encoder2+0x1a0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	4b4b      	ldr	r3, [pc, #300]	; (800467c <encoder2+0x1a4>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	4b4a      	ldr	r3, [pc, #296]	; (8004680 <encoder2+0x1a8>)
 8004556:	5c5b      	ldrb	r3, [r3, r1]
 8004558:	429a      	cmp	r2, r3
 800455a:	d907      	bls.n	800456c <encoder2+0x94>
 800455c:	4b47      	ldr	r3, [pc, #284]	; (800467c <encoder2+0x1a4>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	4b45      	ldr	r3, [pc, #276]	; (8004678 <encoder2+0x1a0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a46      	ldr	r2, [pc, #280]	; (8004680 <encoder2+0x1a8>)
 8004568:	5c52      	ldrb	r2, [r2, r1]
 800456a:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 800456c:	4b45      	ldr	r3, [pc, #276]	; (8004684 <encoder2+0x1ac>)
 800456e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004572:	461a      	mov	r2, r3
 8004574:	4b44      	ldr	r3, [pc, #272]	; (8004688 <encoder2+0x1b0>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d024      	beq.n	80045c6 <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <encoder2+0x1ac>)
 800457e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004582:	461a      	mov	r2, r3
 8004584:	4b40      	ldr	r3, [pc, #256]	; (8004688 <encoder2+0x1b0>)
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	429a      	cmp	r2, r3
 800458a:	dd07      	ble.n	800459c <encoder2+0xc4>
 800458c:	4b3a      	ldr	r3, [pc, #232]	; (8004678 <encoder2+0x1a0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	781a      	ldrb	r2, [r3, #0]
 8004592:	4b39      	ldr	r3, [pc, #228]	; (8004678 <encoder2+0x1a0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3201      	adds	r2, #1
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <encoder2+0x1ac>)
 800459e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a2:	461a      	mov	r2, r3
 80045a4:	4b38      	ldr	r3, [pc, #224]	; (8004688 <encoder2+0x1b0>)
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	da0c      	bge.n	80045c6 <encoder2+0xee>
 80045ac:	4b32      	ldr	r3, [pc, #200]	; (8004678 <encoder2+0x1a0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <encoder2+0xee>
 80045b6:	4b30      	ldr	r3, [pc, #192]	; (8004678 <encoder2+0x1a0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <encoder2+0x1a0>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3a01      	subs	r2, #1
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 80045c6:	4b2f      	ldr	r3, [pc, #188]	; (8004684 <encoder2+0x1ac>)
 80045c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <encoder2+0x1b0>)
 80045d0:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 80045d2:	4b2e      	ldr	r3, [pc, #184]	; (800468c <encoder2+0x1b4>)
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <encoder2+0x1b8>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d01d      	beq.n	800461a <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <encoder2+0x1b4>)
 80045e0:	881a      	ldrh	r2, [r3, #0]
 80045e2:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <encoder2+0x1b8>)
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d908      	bls.n	80045fc <encoder2+0x124>
 80045ea:	4b1c      	ldr	r3, [pc, #112]	; (800465c <encoder2+0x184>)
 80045ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3301      	adds	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	b21a      	sxth	r2, r3
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <encoder2+0x184>)
 80045fa:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 80045fc:	4b23      	ldr	r3, [pc, #140]	; (800468c <encoder2+0x1b4>)
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <encoder2+0x1b8>)
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d208      	bcs.n	800461a <encoder2+0x142>
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <encoder2+0x184>)
 800460a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29b      	uxth	r3, r3
 8004614:	b21a      	sxth	r2, r3
 8004616:	4b11      	ldr	r3, [pc, #68]	; (800465c <encoder2+0x184>)
 8004618:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 800461a:	4b10      	ldr	r3, [pc, #64]	; (800465c <encoder2+0x184>)
 800461c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004620:	461a      	mov	r2, r3
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <encoder2+0x1bc>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	dd02      	ble.n	8004630 <encoder2+0x158>
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <encoder2+0x184>)
 800462c:	2200      	movs	r2, #0
 800462e:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <encoder2+0x184>)
 8004632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da04      	bge.n	8004644 <encoder2+0x16c>
 800463a:	4b16      	ldr	r3, [pc, #88]	; (8004694 <encoder2+0x1bc>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b21a      	sxth	r2, r3
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <encoder2+0x184>)
 8004642:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 8004644:	4b11      	ldr	r3, [pc, #68]	; (800468c <encoder2+0x1b4>)
 8004646:	881a      	ldrh	r2, [r3, #0]
 8004648:	4b11      	ldr	r3, [pc, #68]	; (8004690 <encoder2+0x1b8>)
 800464a:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 800464c:	4b12      	ldr	r3, [pc, #72]	; (8004698 <encoder2+0x1c0>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]

    }
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000220 	.word	0x20000220
 8004660:	2000d36c 	.word	0x2000d36c
 8004664:	20000438 	.word	0x20000438
 8004668:	2000d970 	.word	0x2000d970
 800466c:	0800d154 	.word	0x0800d154
 8004670:	2000d76c 	.word	0x2000d76c
 8004674:	2000d978 	.word	0x2000d978
 8004678:	2000d96c 	.word	0x2000d96c
 800467c:	2000f9a9 	.word	0x2000f9a9
 8004680:	0800dd38 	.word	0x0800dd38
 8004684:	2000b404 	.word	0x2000b404
 8004688:	2000fbae 	.word	0x2000fbae
 800468c:	2000b402 	.word	0x2000b402
 8004690:	2000d97c 	.word	0x2000d97c
 8004694:	2000d369 	.word	0x2000d369
 8004698:	2000b406 	.word	0x2000b406

0800469c <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 80046a2:	4b4e      	ldr	r3, [pc, #312]	; (80047dc <menu3_fill+0x140>)
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 80046a8:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <menu3_fill+0x144>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	89fa      	ldrh	r2, [r7, #14]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d904      	bls.n	80046be <menu3_fill+0x22>
 80046b4:	2300      	movs	r3, #0
 80046b6:	81fb      	strh	r3, [r7, #14]
 80046b8:	4b48      	ldr	r3, [pc, #288]	; (80047dc <menu3_fill+0x140>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 80046be:	89fb      	ldrh	r3, [r7, #14]
 80046c0:	4a48      	ldr	r2, [pc, #288]	; (80047e4 <menu3_fill+0x148>)
 80046c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 80046ca:	7b7b      	ldrb	r3, [r7, #13]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a46      	ldr	r2, [pc, #280]	; (80047e8 <menu3_fill+0x14c>)
 80046d0:	4413      	add	r3, r2
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b45      	ldr	r3, [pc, #276]	; (80047ec <menu3_fill+0x150>)
 80046d6:	6810      	ldr	r0, [r2, #0]
 80046d8:	6851      	ldr	r1, [r2, #4]
 80046da:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 80046dc:	4a44      	ldr	r2, [pc, #272]	; (80047f0 <menu3_fill+0x154>)
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4611      	mov	r1, r2
 80046e4:	8019      	strh	r1, [r3, #0]
 80046e6:	3302      	adds	r3, #2
 80046e8:	0c12      	lsrs	r2, r2, #16
 80046ea:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 80046ec:	89fb      	ldrh	r3, [r7, #14]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	461a      	mov	r2, r3
 80046f2:	4b40      	ldr	r3, [pc, #256]	; (80047f4 <menu3_fill+0x158>)
 80046f4:	4413      	add	r3, r2
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80046fc:	1d3b      	adds	r3, r7, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f007 ff4a 	bl	800c598 <atoi>
 8004704:	4603      	mov	r3, r0
 8004706:	b2da      	uxtb	r2, r3
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <menu3_fill+0x15c>)
 800470a:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <menu3_fill+0x15c>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	4836      	ldr	r0, [pc, #216]	; (80047ec <menu3_fill+0x150>)
 8004714:	f7fc fa40 	bl	8000b98 <menu_vars>
 8004718:	4603      	mov	r3, r0
 800471a:	4a38      	ldr	r2, [pc, #224]	; (80047fc <menu3_fill+0x160>)
 800471c:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 800471e:	4b37      	ldr	r3, [pc, #220]	; (80047fc <menu3_fill+0x160>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	b29a      	uxth	r2, r3
 8004726:	4b36      	ldr	r3, [pc, #216]	; (8004800 <menu3_fill+0x164>)
 8004728:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <menu3_fill+0x168>)
 800472c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004730:	461a      	mov	r2, r3
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	429a      	cmp	r2, r3
 8004736:	d104      	bne.n	8004742 <menu3_fill+0xa6>
 8004738:	4b31      	ldr	r3, [pc, #196]	; (8004800 <menu3_fill+0x164>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	4b32      	ldr	r3, [pc, #200]	; (8004808 <menu3_fill+0x16c>)
 8004740:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 8004742:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <menu3_fill+0x164>)
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	4b30      	ldr	r3, [pc, #192]	; (800480c <menu3_fill+0x170>)
 800474a:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 800474c:	4b2f      	ldr	r3, [pc, #188]	; (800480c <menu3_fill+0x170>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b09      	cmp	r3, #9
 8004752:	d902      	bls.n	800475a <menu3_fill+0xbe>
 8004754:	4b2d      	ldr	r3, [pc, #180]	; (800480c <menu3_fill+0x170>)
 8004756:	2209      	movs	r2, #9
 8004758:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	4a21      	ldr	r2, [pc, #132]	; (80047e4 <menu3_fill+0x148>)
 800475e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004762:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 8004764:	4b29      	ldr	r3, [pc, #164]	; (800480c <menu3_fill+0x170>)
 8004766:	781a      	ldrb	r2, [r3, #0]
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	3230      	adds	r2, #48	; 0x30
 800476c:	b2d1      	uxtb	r1, r2
 800476e:	4a28      	ldr	r2, [pc, #160]	; (8004810 <menu3_fill+0x174>)
 8004770:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8004772:	4b28      	ldr	r3, [pc, #160]	; (8004814 <menu3_fill+0x178>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b35      	cmp	r3, #53	; 0x35
 8004778:	d105      	bne.n	8004786 <menu3_fill+0xea>
 800477a:	4b21      	ldr	r3, [pc, #132]	; (8004800 <menu3_fill+0x164>)
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	b2d1      	uxtb	r1, r2
 8004782:	4a23      	ldr	r2, [pc, #140]	; (8004810 <menu3_fill+0x174>)
 8004784:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004786:	4b23      	ldr	r3, [pc, #140]	; (8004814 <menu3_fill+0x178>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b18      	cmp	r3, #24
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2da      	uxtb	r2, r3
 8004794:	4b1f      	ldr	r3, [pc, #124]	; (8004814 <menu3_fill+0x178>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b19      	cmp	r3, #25
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <menu3_fill+0x120>
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <menu3_fill+0x164>)
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	f003 021f 	and.w	r2, r3, #31
 80047b2:	897b      	ldrh	r3, [r7, #10]
 80047b4:	4918      	ldr	r1, [pc, #96]	; (8004818 <menu3_fill+0x17c>)
 80047b6:	5c89      	ldrb	r1, [r1, r2]
 80047b8:	4a15      	ldr	r2, [pc, #84]	; (8004810 <menu3_fill+0x174>)
 80047ba:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 80047bc:	4b07      	ldr	r3, [pc, #28]	; (80047dc <menu3_fill+0x140>)
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	3301      	adds	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <menu3_fill+0x140>)
 80047c6:	801a      	strh	r2, [r3, #0]
				disp_up_counter=disp_up_counter&255;
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <menu3_fill+0x140>)
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	4b02      	ldr	r3, [pc, #8]	; (80047dc <menu3_fill+0x140>)
 80047d2:	801a      	strh	r2, [r3, #0]

    }
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	2000fbb0 	.word	0x2000fbb0
 80047e0:	2000d369 	.word	0x2000d369
 80047e4:	2000d36c 	.word	0x2000d36c
 80047e8:	20000438 	.word	0x20000438
 80047ec:	2000d970 	.word	0x2000d970
 80047f0:	0800d154 	.word	0x0800d154
 80047f4:	2000d76c 	.word	0x2000d76c
 80047f8:	2000d978 	.word	0x2000d978
 80047fc:	2000d96c 	.word	0x2000d96c
 8004800:	2000bdbc 	.word	0x2000bdbc
 8004804:	20000220 	.word	0x20000220
 8004808:	2000d97e 	.word	0x2000d97e
 800480c:	2000f9aa 	.word	0x2000f9aa
 8004810:	20011048 	.word	0x20011048
 8004814:	2000f9a9 	.word	0x2000f9a9
 8004818:	0800d17c 	.word	0x0800d17c

0800481c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	b0a5      	sub	sp, #148	; 0x94
 8004820:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004822:	f001 fca1 	bl	8006168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004826:	f000 fbaf 	bl	8004f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800482a:	f000 ff57 	bl	80056dc <MX_GPIO_Init>
  MX_DMA_Init();
 800482e:	f000 ff0f 	bl	8005650 <MX_DMA_Init>
  MX_ADC1_Init();
 8004832:	f000 fc13 	bl	800505c <MX_ADC1_Init>
  MX_SPI2_Init();
 8004836:	f000 fd0b 	bl	8005250 <MX_SPI2_Init>
  MX_TIM3_Init();
 800483a:	f000 fd93 	bl	8005364 <MX_TIM3_Init>
  MX_TIM4_Init();
 800483e:	f000 fe13 	bl	8005468 <MX_TIM4_Init>
  MX_I2C2_Init();
 8004842:	f000 fca1 	bl	8005188 <MX_I2C2_Init>
  MX_SPI1_Init();
 8004846:	f000 fccd 	bl	80051e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800484a:	f000 fead 	bl	80055a8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800484e:	f000 fed5 	bl	80055fc <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8004852:	f000 fe5f 	bl	8005514 <MX_TIM10_Init>
  MX_TIM2_Init();
 8004856:	f000 fd31 	bl	80052bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 800485a:	f7fc ffcd 	bl	80017f8 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 800485e:	4baf      	ldr	r3, [pc, #700]	; (8004b1c <main+0x300>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	3301      	adds	r3, #1
 8004864:	b2da      	uxtb	r2, r3
 8004866:	4bad      	ldr	r3, [pc, #692]	; (8004b1c <main+0x300>)
 8004868:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 800486a:	4bad      	ldr	r3, [pc, #692]	; (8004b20 <main+0x304>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4aab      	ldr	r2, [pc, #684]	; (8004b20 <main+0x304>)
 8004872:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

			  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8004874:	4baa      	ldr	r3, [pc, #680]	; (8004b20 <main+0x304>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	2b06      	cmp	r3, #6
 800487e:	d101      	bne.n	8004884 <main+0x68>
 8004880:	f7fc ff02 	bl	8001688 <analoginputloopb>


		if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8004884:	4ba6      	ldr	r3, [pc, #664]	; (8004b20 <main+0x304>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f640 72b8 	movw	r2, #4024	; 0xfb8
 800488c:	4293      	cmp	r3, r2
 800488e:	f040 8187 	bne.w	8004ba0 <main+0x384>

		    if (mem_count>510) mem_count=0; else mem_count++;
 8004892:	4ba4      	ldr	r3, [pc, #656]	; (8004b24 <main+0x308>)
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800489a:	d903      	bls.n	80048a4 <main+0x88>
 800489c:	4ba1      	ldr	r3, [pc, #644]	; (8004b24 <main+0x308>)
 800489e:	2200      	movs	r2, #0
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e005      	b.n	80048b0 <main+0x94>
 80048a4:	4b9f      	ldr	r3, [pc, #636]	; (8004b24 <main+0x308>)
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	4b9d      	ldr	r3, [pc, #628]	; (8004b24 <main+0x308>)
 80048ae:	801a      	strh	r2, [r3, #0]
		    if (mem_count>460) mem_count=461;  // this might feedback
 80048b0:	4b9c      	ldr	r3, [pc, #624]	; (8004b24 <main+0x308>)
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 80048b8:	d903      	bls.n	80048c2 <main+0xa6>
 80048ba:	4b9a      	ldr	r3, [pc, #616]	; (8004b24 <main+0x308>)
 80048bc:	f240 12cd 	movw	r2, #461	; 0x1cd
 80048c0:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 80048c2:	f7fc fcdb 	bl	800127c <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 80048c6:	2300      	movs	r3, #0
 80048c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76


			memcpy(potSource,&seq,46); // about 35
 80048cc:	4a96      	ldr	r2, [pc, #600]	; (8004b28 <main+0x30c>)
 80048ce:	4b97      	ldr	r3, [pc, #604]	; (8004b2c <main+0x310>)
 80048d0:	4614      	mov	r4, r2
 80048d2:	461d      	mov	r5, r3
 80048d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048e0:	c407      	stmia	r4!, {r0, r1, r2}
 80048e2:	8023      	strh	r3, [r4, #0]

			for(i=0;i<10;i++){
 80048e4:	4b92      	ldr	r3, [pc, #584]	; (8004b30 <main+0x314>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	e0a2      	b.n	8004a32 <main+0x216>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 80048ec:	4b90      	ldr	r3, [pc, #576]	; (8004b30 <main+0x314>)
 80048ee:	881b      	ldrh	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	339c      	adds	r3, #156	; 0x9c
 80048fc:	4a8a      	ldr	r2, [pc, #552]	; (8004b28 <main+0x30c>)
 80048fe:	1898      	adds	r0, r3, r2
 8004900:	4b8b      	ldr	r3, [pc, #556]	; (8004b30 <main+0x314>)
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4a89      	ldr	r2, [pc, #548]	; (8004b34 <main+0x318>)
 8004910:	4413      	add	r3, r2
 8004912:	220e      	movs	r2, #14
 8004914:	4619      	mov	r1, r3
 8004916:	f007 fe6d 	bl	800c5f4 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 800491a:	4b85      	ldr	r3, [pc, #532]	; (8004b30 <main+0x314>)
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	332e      	adds	r3, #46	; 0x2e
 800492a:	4a7f      	ldr	r2, [pc, #508]	; (8004b28 <main+0x30c>)
 800492c:	1898      	adds	r0, r3, r2
 800492e:	4b80      	ldr	r3, [pc, #512]	; (8004b30 <main+0x314>)
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4a7e      	ldr	r2, [pc, #504]	; (8004b38 <main+0x31c>)
 800493e:	4413      	add	r3, r2
 8004940:	2206      	movs	r2, #6
 8004942:	4619      	mov	r1, r3
 8004944:	f007 fe56 	bl	800c5f4 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004948:	4b79      	ldr	r3, [pc, #484]	; (8004b30 <main+0x314>)
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	461a      	mov	r2, r3
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	336a      	adds	r3, #106	; 0x6a
 8004956:	4a74      	ldr	r2, [pc, #464]	; (8004b28 <main+0x30c>)
 8004958:	1898      	adds	r0, r3, r2
 800495a:	4b75      	ldr	r3, [pc, #468]	; (8004b30 <main+0x314>)
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8004964:	fb02 f303 	mul.w	r3, r2, r3
 8004968:	4a74      	ldr	r2, [pc, #464]	; (8004b3c <main+0x320>)
 800496a:	4413      	add	r3, r2
 800496c:	2205      	movs	r2, #5
 800496e:	4619      	mov	r1, r3
 8004970:	f007 fe40 	bl	800c5f4 <memcpy>
				memcpy(potSource+316+(i*3),&patch[i],3 );
 8004974:	4b6e      	ldr	r3, [pc, #440]	; (8004b30 <main+0x314>)
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004984:	4a68      	ldr	r2, [pc, #416]	; (8004b28 <main+0x30c>)
 8004986:	1898      	adds	r0, r3, r2
 8004988:	4b69      	ldr	r3, [pc, #420]	; (8004b30 <main+0x314>)
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4a6a      	ldr	r2, [pc, #424]	; (8004b40 <main+0x324>)
 8004998:	4413      	add	r3, r2
 800499a:	2203      	movs	r2, #3
 800499c:	4619      	mov	r1, r3
 800499e:	f007 fe29 	bl	800c5f4 <memcpy>
				memcpy(potSource+346+(i*3),&patch[i+10],3 );
 80049a2:	4b63      	ldr	r3, [pc, #396]	; (8004b30 <main+0x314>)
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	4613      	mov	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 73ad 	add.w	r3, r3, #346	; 0x15a
 80049b2:	4a5d      	ldr	r2, [pc, #372]	; (8004b28 <main+0x30c>)
 80049b4:	1898      	adds	r0, r3, r2
 80049b6:	4b5e      	ldr	r3, [pc, #376]	; (8004b30 <main+0x314>)
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	f103 020a 	add.w	r2, r3, #10
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4a5e      	ldr	r2, [pc, #376]	; (8004b40 <main+0x324>)
 80049c8:	4413      	add	r3, r2
 80049ca:	2203      	movs	r2, #3
 80049cc:	4619      	mov	r1, r3
 80049ce:	f007 fe11 	bl	800c5f4 <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80049d2:	4b57      	ldr	r3, [pc, #348]	; (8004b30 <main+0x314>)
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80049e4:	4a50      	ldr	r2, [pc, #320]	; (8004b28 <main+0x30c>)
 80049e6:	1898      	adds	r0, r3, r2
 80049e8:	4b51      	ldr	r3, [pc, #324]	; (8004b30 <main+0x314>)
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4a53      	ldr	r2, [pc, #332]	; (8004b44 <main+0x328>)
 80049f8:	4413      	add	r3, r2
 80049fa:	2206      	movs	r2, #6
 80049fc:	4619      	mov	r1, r3
 80049fe:	f007 fdf9 	bl	800c5f4 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8004a02:	4b4b      	ldr	r3, [pc, #300]	; (8004b30 <main+0x314>)
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004a0c:	4a46      	ldr	r2, [pc, #280]	; (8004b28 <main+0x30c>)
 8004a0e:	441a      	add	r2, r3
 8004a10:	4b47      	ldr	r3, [pc, #284]	; (8004b30 <main+0x314>)
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	4619      	mov	r1, r3
 8004a16:	460b      	mov	r3, r1
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	494a      	ldr	r1, [pc, #296]	; (8004b48 <main+0x32c>)
 8004a20:	440b      	add	r3, r1
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 8004a26:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <main+0x314>)
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b40      	ldr	r3, [pc, #256]	; (8004b30 <main+0x314>)
 8004a30:	801a      	strh	r2, [r3, #0]
 8004a32:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <main+0x314>)
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	2b09      	cmp	r3, #9
 8004a38:	f67f af58 	bls.w	80048ec <main+0xd0>
			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8004a42:	2300      	movs	r3, #0
 8004a44:	603b      	str	r3, [r7, #0]
 8004a46:	1d3b      	adds	r3, r7, #4
 8004a48:	222e      	movs	r2, #46	; 0x2e
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f007 fddf 	bl	800c610 <memset>
			 uint8_t mem_verify_list[50]={0};
 8004a52:	2300      	movs	r3, #0
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
 8004a56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a5a:	222e      	movs	r2, #46	; 0x2e
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f007 fdd6 	bl	800c610 <memset>
			 uint8_t read_counter=0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 8004a6a:	4b2e      	ldr	r3, [pc, #184]	; (8004b24 <main+0x308>)
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <main+0x30c>)
 8004a72:	4413      	add	r3, r2
 8004a74:	461c      	mov	r4, r3
 8004a76:	463e      	mov	r6, r7
 8004a78:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8004a7c:	4635      	mov	r5, r6
 8004a7e:	4623      	mov	r3, r4
 8004a80:	6818      	ldr	r0, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a8a:	3410      	adds	r4, #16
 8004a8c:	3610      	adds	r6, #16
 8004a8e:	4564      	cmp	r4, ip
 8004a90:	d1f4      	bne.n	8004a7c <main+0x260>
 8004a92:	4632      	mov	r2, r6
 8004a94:	4623      	mov	r3, r4
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <main+0x308>)
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	019b      	lsls	r3, r3, #6
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <main+0x308>)
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 8004aba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004abe:	2364      	movs	r3, #100	; 0x64
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	2332      	movs	r3, #50	; 0x32
 8004ac4:	9301      	str	r3, [sp, #4]
 8004ac6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	2302      	movs	r3, #2
 8004ace:	21a0      	movs	r1, #160	; 0xa0
 8004ad0:	481e      	ldr	r0, [pc, #120]	; (8004b4c <main+0x330>)
 8004ad2:	f003 fd35 	bl	8008540 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004adc:	e018      	b.n	8004b10 <main+0x2f4>

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8004ade:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004ae2:	3380      	adds	r3, #128	; 0x80
 8004ae4:	443b      	add	r3, r7
 8004ae6:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8004aea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004aee:	3380      	adds	r3, #128	; 0x80
 8004af0:	443b      	add	r3, r7
 8004af2:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d12a      	bne.n	8004b50 <main+0x334>
			     mem_count++;
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <main+0x308>)
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	3301      	adds	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <main+0x308>)
 8004b04:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8004b06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b10:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004b14:	2b31      	cmp	r3, #49	; 0x31
 8004b16:	d9e2      	bls.n	8004ade <main+0x2c2>
 8004b18:	e01b      	b.n	8004b52 <main+0x336>
 8004b1a:	bf00      	nop
 8004b1c:	20008bc6 	.word	0x20008bc6
 8004b20:	2000b420 	.word	0x2000b420
 8004b24:	2000b41e 	.word	0x2000b41e
 8004b28:	20008960 	.word	0x20008960
 8004b2c:	2000d014 	.word	0x2000d014
 8004b30:	20008bca 	.word	0x20008bca
 8004b34:	20000158 	.word	0x20000158
 8004b38:	2000c1dc 	.word	0x2000c1dc
 8004b3c:	2000c588 	.word	0x2000c588
 8004b40:	2000d044 	.word	0x2000d044
 8004b44:	2000c484 	.word	0x2000c484
 8004b48:	2000c4c0 	.word	0x2000c4c0
 8004b4c:	200114f0 	.word	0x200114f0
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8004b50:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8004b52:	4b66      	ldr	r3, [pc, #408]	; (8004cec <main+0x4d0>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	4b65      	ldr	r3, [pc, #404]	; (8004cf0 <main+0x4d4>)
 8004b5a:	5c9a      	ldrb	r2, [r3, r2]
 8004b5c:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <main+0x4d8>)
 8004b5e:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8004b60:	4b62      	ldr	r3, [pc, #392]	; (8004cec <main+0x4d0>)
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	099b      	lsrs	r3, r3, #6
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	019b      	lsls	r3, r3, #6
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	4b5e      	ldr	r3, [pc, #376]	; (8004cec <main+0x4d0>)
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 8004b80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b84:	2364      	movs	r3, #100	; 0x64
 8004b86:	9302      	str	r3, [sp, #8]
 8004b88:	2301      	movs	r3, #1
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	4b59      	ldr	r3, [pc, #356]	; (8004cf4 <main+0x4d8>)
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2302      	movs	r3, #2
 8004b92:	21a0      	movs	r1, #160	; 0xa0
 8004b94:	4858      	ldr	r0, [pc, #352]	; (8004cf8 <main+0x4dc>)
 8004b96:	f003 fbd9 	bl	800834c <HAL_I2C_Mem_Write>



		//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

		loop_counter2=0; //reset
 8004b9a:	4b58      	ldr	r3, [pc, #352]	; (8004cfc <main+0x4e0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 8004ba0:	4b57      	ldr	r3, [pc, #348]	; (8004d00 <main+0x4e4>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8093 	beq.w	8004cd0 <main+0x4b4>
		uint16_t mem_counter=0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
		  memcpy(serial_source,&seq,36); // copy bits
 8004bb0:	2224      	movs	r2, #36	; 0x24
 8004bb2:	4954      	ldr	r1, [pc, #336]	; (8004d04 <main+0x4e8>)
 8004bb4:	4854      	ldr	r0, [pc, #336]	; (8004d08 <main+0x4ec>)
 8004bb6:	f007 fd1d 	bl	800c5f4 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8004bba:	4b54      	ldr	r3, [pc, #336]	; (8004d0c <main+0x4f0>)
 8004bbc:	4954      	ldr	r1, [pc, #336]	; (8004d10 <main+0x4f4>)
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f007 fd17 	bl	800c5f4 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004bcc:	e032      	b.n	8004c34 <main+0x418>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8004bce:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d814      	bhi.n	8004c00 <main+0x3e4>
 8004bd6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	3360      	adds	r3, #96	; 0x60
 8004be2:	4a49      	ldr	r2, [pc, #292]	; (8004d08 <main+0x4ec>)
 8004be4:	1898      	adds	r0, r3, r2
 8004be6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004bea:	1d9a      	adds	r2, r3, #6
 8004bec:	4613      	mov	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4a47      	ldr	r2, [pc, #284]	; (8004d14 <main+0x4f8>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f007 fcfa 	bl	800c5f4 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8004c00:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004c04:	4613      	mov	r3, r2
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4413      	add	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	3324      	adds	r3, #36	; 0x24
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	; (8004d08 <main+0x4ec>)
 8004c10:	1898      	adds	r0, r3, r2
 8004c12:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004c16:	4613      	mov	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4413      	add	r3, r2
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	4a3e      	ldr	r2, [pc, #248]	; (8004d18 <main+0x4fc>)
 8004c20:	4413      	add	r3, r2
 8004c22:	2206      	movs	r2, #6
 8004c24:	4619      	mov	r1, r3
 8004c26:	f007 fce5 	bl	800c5f4 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8004c2a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8004c34:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8004c38:	2b09      	cmp	r3, #9
 8004c3a:	d9c8      	bls.n	8004bce <main+0x3b2>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004c3c:	e005      	b.n	8004c4a <main+0x42e>
			  serial_up++;
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <main+0x500>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <main+0x500>)
 8004c48:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <main+0x500>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4b33      	ldr	r3, [pc, #204]	; (8004d20 <main+0x504>)
 8004c52:	5c9a      	ldrb	r2, [r3, r2]
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <main+0x500>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <main+0x4ec>)
 8004c5c:	5c5b      	ldrb	r3, [r3, r1]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d103      	bne.n	8004c6a <main+0x44e>
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <main+0x500>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2ba0      	cmp	r3, #160	; 0xa0
 8004c68:	d9e9      	bls.n	8004c3e <main+0x422>
		  }

		  serial_send[6]=0;
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <main+0x508>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <main+0x4e8>)
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	4b2b      	ldr	r3, [pc, #172]	; (8004d24 <main+0x508>)
 8004c76:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8004c78:	4b28      	ldr	r3, [pc, #160]	; (8004d1c <main+0x500>)
 8004c7a:	781a      	ldrb	r2, [r3, #0]
 8004c7c:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <main+0x508>)
 8004c7e:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 8004c80:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <main+0x500>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <main+0x4ec>)
 8004c88:	5c9a      	ldrb	r2, [r3, r2]
 8004c8a:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <main+0x508>)
 8004c8c:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <main+0x500>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <main+0x500>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <main+0x4ec>)
 8004c9c:	5c59      	ldrb	r1, [r3, r1]
 8004c9e:	4b20      	ldr	r3, [pc, #128]	; (8004d20 <main+0x504>)
 8004ca0:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 8004ca2:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <main+0x500>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2ba1      	cmp	r3, #161	; 0xa1
 8004ca8:	d903      	bls.n	8004cb2 <main+0x496>
 8004caa:	4b1c      	ldr	r3, [pc, #112]	; (8004d1c <main+0x500>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e005      	b.n	8004cbe <main+0x4a2>
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <main+0x500>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <main+0x500>)
 8004cbc:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8004cbe:	2364      	movs	r3, #100	; 0x64
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4918      	ldr	r1, [pc, #96]	; (8004d24 <main+0x508>)
 8004cc4:	4818      	ldr	r0, [pc, #96]	; (8004d28 <main+0x50c>)
 8004cc6:	f007 f8ae 	bl	800be26 <HAL_UART_Transmit>
		  serial_tosend=0;
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <main+0x4e4>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8004cd0:	4b16      	ldr	r3, [pc, #88]	; (8004d2c <main+0x510>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <main+0x4c0>
 8004cd8:	f7ff fb1c 	bl	8004314 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8004cdc:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <main+0x514>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b05      	cmp	r3, #5
 8004ce2:	d841      	bhi.n	8004d68 <main+0x54c>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <main+0x518>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	801a      	strh	r2, [r3, #0]
 8004cea:	e02d      	b.n	8004d48 <main+0x52c>
 8004cec:	2000b41e 	.word	0x2000b41e
 8004cf0:	20008960 	.word	0x20008960
 8004cf4:	2000b424 	.word	0x2000b424
 8004cf8:	200114f0 	.word	0x200114f0
 8004cfc:	2000b420 	.word	0x2000b420
 8004d00:	2000fbad 	.word	0x2000fbad
 8004d04:	2000d014 	.word	0x2000d014
 8004d08:	2000f9ac 	.word	0x2000f9ac
 8004d0c:	2000fa0c 	.word	0x2000fa0c
 8004d10:	20008a5c 	.word	0x20008a5c
 8004d14:	20000158 	.word	0x20000158
 8004d18:	2000c484 	.word	0x2000c484
 8004d1c:	2000fbac 	.word	0x2000fbac
 8004d20:	2000faac 	.word	0x2000faac
 8004d24:	20000224 	.word	0x20000224
 8004d28:	20011834 	.word	0x20011834
 8004d2c:	2000bdbe 	.word	0x2000bdbe
 8004d30:	2000b413 	.word	0x2000b413
 8004d34:	20008bca 	.word	0x20008bca
 8004d38:	f7ff f9da 	bl	80040f0 <display_init>
 8004d3c:	4b81      	ldr	r3, [pc, #516]	; (8004f44 <main+0x728>)
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <main+0x728>)
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	4b7e      	ldr	r3, [pc, #504]	; (8004f44 <main+0x728>)
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d9f3      	bls.n	8004d38 <main+0x51c>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8004d50:	4b7d      	ldr	r3, [pc, #500]	; (8004f48 <main+0x72c>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b06      	cmp	r3, #6
 8004d56:	d107      	bne.n	8004d68 <main+0x54c>
 8004d58:	487c      	ldr	r0, [pc, #496]	; (8004f4c <main+0x730>)
 8004d5a:	f005 ff41 	bl	800abe0 <HAL_TIM_Base_Start_IT>
 8004d5e:	487b      	ldr	r0, [pc, #492]	; (8004f4c <main+0x730>)
 8004d60:	f005 fee4 	bl	800ab2c <HAL_TIM_Base_Start>
 8004d64:	f7ff fa1a 	bl	800419c <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8004d68:	4b77      	ldr	r3, [pc, #476]	; (8004f48 <main+0x72c>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d903      	bls.n	8004d78 <main+0x55c>


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8004d70:	f7ff fc94 	bl	800469c <menu3_fill>
 8004d74:	f7ff fbb0 	bl	80044d8 <encoder2>
		}


		if (loop_counter2==4000){ // grab adc readings + 3ms , 32 step  // no freeze
 8004d78:	4b75      	ldr	r3, [pc, #468]	; (8004f50 <main+0x734>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8004d80:	d144      	bne.n	8004e0c <main+0x5f0>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8004d82:	4874      	ldr	r0, [pc, #464]	; (8004f54 <main+0x738>)
 8004d84:	f002 f80e 	bl	8006da4 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8004d88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8004d92:	2101      	movs	r1, #1
 8004d94:	486f      	ldr	r0, [pc, #444]	; (8004f54 <main+0x738>)
 8004d96:	f001 fb75 	bl	8006484 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	486d      	ldr	r0, [pc, #436]	; (8004f54 <main+0x738>)
 8004d9e:	f002 f917 	bl	8006fd0 <HAL_ADCEx_InjectedGetValue>
 8004da2:	4603      	mov	r3, r0
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8004daa:	2102      	movs	r1, #2
 8004dac:	4869      	ldr	r0, [pc, #420]	; (8004f54 <main+0x738>)
 8004dae:	f002 f90f 	bl	8006fd0 <HAL_ADCEx_InjectedGetValue>
 8004db2:	4603      	mov	r3, r0
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8004dba:	2103      	movs	r1, #3
 8004dbc:	4865      	ldr	r0, [pc, #404]	; (8004f54 <main+0x738>)
 8004dbe:	f002 f907 	bl	8006fd0 <HAL_ADCEx_InjectedGetValue>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8004dca:	4862      	ldr	r0, [pc, #392]	; (8004f54 <main+0x738>)
 8004dcc:	f002 f8b4 	bl	8006f38 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	31- ( adc_temp1[0]>>7);
 8004dd0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004dd4:	09db      	lsrs	r3, r3, #7
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	f1c3 031f 	rsb	r3, r3, #31
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <main+0x73c>)
 8004de0:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 31-( adc_temp1[1]>>7);
 8004de2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004de6:	09db      	lsrs	r3, r3, #7
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f1c3 031f 	rsb	r3, r3, #31
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	4b59      	ldr	r3, [pc, #356]	; (8004f58 <main+0x73c>)
 8004df2:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 31-( adc_temp1[2]>>7);
 8004df4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004df8:	09db      	lsrs	r3, r3, #7
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f1c3 031f 	rsb	r3, r3, #31
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <main+0x73c>)
 8004e04:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8004e06:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <main+0x740>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8004e0c:	4b54      	ldr	r3, [pc, #336]	; (8004f60 <main+0x744>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b07      	cmp	r3, #7
 8004e12:	d106      	bne.n	8004e22 <main+0x606>
 8004e14:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <main+0x748>)
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <main+0x606>
 8004e1c:	4b51      	ldr	r3, [pc, #324]	; (8004f64 <main+0x748>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8004e22:	4b4f      	ldr	r3, [pc, #316]	; (8004f60 <main+0x744>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e32:	484d      	ldr	r0, [pc, #308]	; (8004f68 <main+0x74c>)
 8004e34:	f003 f914 	bl	8008060 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8004e38:	4b4c      	ldr	r3, [pc, #304]	; (8004f6c <main+0x750>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d051      	beq.n	8004ee4 <main+0x6c8>


			uint16_t    adc_page=0; ;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8004e46:	4b49      	ldr	r3, [pc, #292]	; (8004f6c <main+0x750>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d102      	bne.n	8004e54 <main+0x638>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 8004e54:	4b45      	ldr	r3, [pc, #276]	; (8004f6c <main+0x750>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d103      	bne.n	8004e64 <main+0x648>
 8004e5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004e60:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8004e64:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <main+0x728>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	e033      	b.n	8004ed4 <main+0x6b8>
				adc_convert_count=(i*3)+adc_page;
 8004e6c:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <main+0x728>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	0052      	lsls	r2, r2, #1
 8004e74:	4413      	add	r3, r2
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 8004e82:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004e86:	4a3a      	ldr	r2, [pc, #232]	; (8004f70 <main+0x754>)
 8004e88:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004e8c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004e90:	3301      	adds	r3, #1
 8004e92:	4937      	ldr	r1, [pc, #220]	; (8004f70 <main+0x754>)
 8004e94:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004e98:	4413      	add	r3, r2
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8004ea0:	3302      	adds	r3, #2
 8004ea2:	4933      	ldr	r1, [pc, #204]	; (8004f70 <main+0x754>)
 8004ea4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
				input_holder[i]=adc_convert_temp/3;
 8004eae:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <main+0x728>)
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8004eb8:	4a2e      	ldr	r2, [pc, #184]	; (8004f74 <main+0x758>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <main+0x75c>)
 8004ec4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			for (i=0;i<512;i++){
 8004ec8:	4b1e      	ldr	r3, [pc, #120]	; (8004f44 <main+0x728>)
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <main+0x728>)
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <main+0x728>)
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004edc:	d3c6      	bcc.n	8004e6c <main+0x650>
				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
		//	if (sampler.record_enable)  {sampler_ram_record(); sampler.start_MSB=0; sampler.start_LSB=0;sampler.end_MSB=63;}

			adc_flag=0;
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <main+0x750>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <main+0x760>)
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eee:	d923      	bls.n	8004f38 <main+0x71c>
 8004ef0:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <main+0x764>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ef8:	d11e      	bne.n	8004f38 <main+0x71c>
 8004efa:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <main+0x768>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8004f00:	e01a      	b.n	8004f38 <main+0x71c>

			sampling();
 8004f02:	f7fd f885 	bl	8002010 <sampling>

			uint8_t up_counter2=0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			while ((up_counter2<8) && (init > 5) )								{
 8004f0c:	e00c      	b.n	8004f28 <main+0x70c>

			gfx_line_fill();   // just run 8 times between sampling , dont need more
 8004f0e:	f7ff fa13 	bl	8004338 <gfx_line_fill>
			up_counter2++;
 8004f12:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004f16:	3301      	adds	r3, #1
 8004f18:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			loop_counter++;
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <main+0x740>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	4b0d      	ldr	r3, [pc, #52]	; (8004f5c <main+0x740>)
 8004f26:	701a      	strb	r2, [r3, #0]
			while ((up_counter2<8) && (init > 5) )								{
 8004f28:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8004f2c:	2b07      	cmp	r3, #7
 8004f2e:	d803      	bhi.n	8004f38 <main+0x71c>
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <main+0x72c>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b05      	cmp	r3, #5
 8004f36:	d8ea      	bhi.n	8004f0e <main+0x6f2>
		while  (bank_write)                         {							// wait for adc , priority
 8004f38:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <main+0x768>)
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e0      	bne.n	8004f02 <main+0x6e6>
	  loop_counter++ ;
 8004f40:	e48d      	b.n	800485e <main+0x42>
 8004f42:	bf00      	nop
 8004f44:	20008bca 	.word	0x20008bca
 8004f48:	2000b413 	.word	0x2000b413
 8004f4c:	200117ec 	.word	0x200117ec
 8004f50:	2000b420 	.word	0x2000b420
 8004f54:	20011448 	.word	0x20011448
 8004f58:	20000144 	.word	0x20000144
 8004f5c:	20008bc6 	.word	0x20008bc6
 8004f60:	2000d014 	.word	0x2000d014
 8004f64:	2000b40a 	.word	0x2000b40a
 8004f68:	40020800 	.word	0x40020800
 8004f6c:	2000c1c0 	.word	0x2000c1c0
 8004f70:	20009bdc 	.word	0x20009bdc
 8004f74:	aaaaaaab 	.word	0xaaaaaaab
 8004f78:	2000bdc0 	.word	0x2000bdc0
 8004f7c:	20009bd0 	.word	0x20009bd0
 8004f80:	20009bd6 	.word	0x20009bd6
 8004f84:	2000014e 	.word	0x2000014e

08004f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b094      	sub	sp, #80	; 0x50
 8004f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f8e:	f107 0320 	add.w	r3, r7, #32
 8004f92:	2230      	movs	r2, #48	; 0x30
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f007 fb3a 	bl	800c610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fac:	2300      	movs	r3, #0
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	4b28      	ldr	r3, [pc, #160]	; (8005054 <SystemClock_Config+0xcc>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	4a27      	ldr	r2, [pc, #156]	; (8005054 <SystemClock_Config+0xcc>)
 8004fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fba:	6413      	str	r3, [r2, #64]	; 0x40
 8004fbc:	4b25      	ldr	r3, [pc, #148]	; (8005054 <SystemClock_Config+0xcc>)
 8004fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fc8:	2300      	movs	r3, #0
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	4b22      	ldr	r3, [pc, #136]	; (8005058 <SystemClock_Config+0xd0>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a21      	ldr	r2, [pc, #132]	; (8005058 <SystemClock_Config+0xd0>)
 8004fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <SystemClock_Config+0xd0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fec:	2310      	movs	r3, #16
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004ffc:	2364      	movs	r3, #100	; 0x64
 8004ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005000:	2302      	movs	r3, #2
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005004:	2304      	movs	r3, #4
 8005006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005008:	f107 0320 	add.w	r3, r7, #32
 800500c:	4618      	mov	r0, r3
 800500e:	f004 f819 	bl	8009044 <HAL_RCC_OscConfig>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005018:	f000 fc4e 	bl	80058b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800501c:	230f      	movs	r3, #15
 800501e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005020:	2302      	movs	r3, #2
 8005022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800502c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800502e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005032:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005034:	f107 030c 	add.w	r3, r7, #12
 8005038:	2103      	movs	r1, #3
 800503a:	4618      	mov	r0, r3
 800503c:	f004 fa7a 	bl	8009534 <HAL_RCC_ClockConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005046:	f000 fc37 	bl	80058b8 <Error_Handler>
  }
}
 800504a:	bf00      	nop
 800504c:	3750      	adds	r7, #80	; 0x50
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	40007000 	.word	0x40007000

0800505c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	; 0x30
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005062:	f107 0320 	add.w	r3, r7, #32
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005070:	463b      	mov	r3, r7
 8005072:	2220      	movs	r2, #32
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f007 faca 	bl	800c610 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800507c:	4b3e      	ldr	r3, [pc, #248]	; (8005178 <MX_ADC1_Init+0x11c>)
 800507e:	4a3f      	ldr	r2, [pc, #252]	; (800517c <MX_ADC1_Init+0x120>)
 8005080:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005082:	4b3d      	ldr	r3, [pc, #244]	; (8005178 <MX_ADC1_Init+0x11c>)
 8005084:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005088:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800508a:	4b3b      	ldr	r3, [pc, #236]	; (8005178 <MX_ADC1_Init+0x11c>)
 800508c:	2200      	movs	r2, #0
 800508e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <MX_ADC1_Init+0x11c>)
 8005092:	2201      	movs	r2, #1
 8005094:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005096:	4b38      	ldr	r3, [pc, #224]	; (8005178 <MX_ADC1_Init+0x11c>)
 8005098:	2201      	movs	r2, #1
 800509a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <MX_ADC1_Init+0x11c>)
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050aa:	4b33      	ldr	r3, [pc, #204]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050ac:	4a34      	ldr	r2, [pc, #208]	; (8005180 <MX_ADC1_Init+0x124>)
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050b0:	4b31      	ldr	r3, [pc, #196]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80050bc:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80050c4:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80050ca:	482b      	ldr	r0, [pc, #172]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050cc:	f001 f8e2 	bl	8006294 <HAL_ADC_Init>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80050d6:	f000 fbef 	bl	80058b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80050da:	2309      	movs	r3, #9
 80050dc:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80050e2:	2306      	movs	r3, #6
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050e6:	f107 0320 	add.w	r3, r7, #32
 80050ea:	4619      	mov	r1, r3
 80050ec:	4822      	ldr	r0, [pc, #136]	; (8005178 <MX_ADC1_Init+0x11c>)
 80050ee:	f001 fba9 	bl	8006844 <HAL_ADC_ConfigChannel>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80050f8:	f000 fbde 	bl	80058b8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005100:	2301      	movs	r3, #1
 8005102:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005104:	2303      	movs	r3, #3
 8005106:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005108:	2303      	movs	r3, #3
 800510a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005110:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <MX_ADC1_Init+0x128>)
 8005112:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005114:	2300      	movs	r3, #0
 8005116:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005118:	2300      	movs	r3, #0
 800511a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005120:	463b      	mov	r3, r7
 8005122:	4619      	mov	r1, r3
 8005124:	4814      	ldr	r0, [pc, #80]	; (8005178 <MX_ADC1_Init+0x11c>)
 8005126:	f001 ff8b 	bl	8007040 <HAL_ADCEx_InjectedConfigChannel>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8005130:	f000 fbc2 	bl	80058b8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005134:	2302      	movs	r3, #2
 8005136:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8005138:	2302      	movs	r3, #2
 800513a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800513c:	463b      	mov	r3, r7
 800513e:	4619      	mov	r1, r3
 8005140:	480d      	ldr	r0, [pc, #52]	; (8005178 <MX_ADC1_Init+0x11c>)
 8005142:	f001 ff7d 	bl	8007040 <HAL_ADCEx_InjectedConfigChannel>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800514c:	f000 fbb4 	bl	80058b8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8005150:	2308      	movs	r3, #8
 8005152:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8005154:	2303      	movs	r3, #3
 8005156:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800515c:	463b      	mov	r3, r7
 800515e:	4619      	mov	r1, r3
 8005160:	4805      	ldr	r0, [pc, #20]	; (8005178 <MX_ADC1_Init+0x11c>)
 8005162:	f001 ff6d 	bl	8007040 <HAL_ADCEx_InjectedConfigChannel>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800516c:	f000 fba4 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005170:	bf00      	nop
 8005172:	3730      	adds	r7, #48	; 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20011448 	.word	0x20011448
 800517c:	40012000 	.word	0x40012000
 8005180:	0f000001 	.word	0x0f000001
 8005184:	000f0001 	.word	0x000f0001

08005188 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <MX_I2C2_Init+0x50>)
 800518e:	4a13      	ldr	r2, [pc, #76]	; (80051dc <MX_I2C2_Init+0x54>)
 8005190:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <MX_I2C2_Init+0x50>)
 8005194:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <MX_I2C2_Init+0x58>)
 8005196:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005198:	4b0f      	ldr	r3, [pc, #60]	; (80051d8 <MX_I2C2_Init+0x50>)
 800519a:	2200      	movs	r2, #0
 800519c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051a4:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051b8:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80051c4:	4804      	ldr	r0, [pc, #16]	; (80051d8 <MX_I2C2_Init+0x50>)
 80051c6:	f002 ff7d 	bl	80080c4 <HAL_I2C_Init>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80051d0:	f000 fb72 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80051d4:	bf00      	nop
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200114f0 	.word	0x200114f0
 80051dc:	40005800 	.word	0x40005800
 80051e0:	000186a0 	.word	0x000186a0

080051e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <MX_SPI1_Init+0x64>)
 80051ea:	4a18      	ldr	r2, [pc, #96]	; (800524c <MX_SPI1_Init+0x68>)
 80051ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80051ee:	4b16      	ldr	r3, [pc, #88]	; (8005248 <MX_SPI1_Init+0x64>)
 80051f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <MX_SPI1_Init+0x64>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80051fc:	4b12      	ldr	r3, [pc, #72]	; (8005248 <MX_SPI1_Init+0x64>)
 80051fe:	2200      	movs	r2, #0
 8005200:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005202:	4b11      	ldr	r3, [pc, #68]	; (8005248 <MX_SPI1_Init+0x64>)
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <MX_SPI1_Init+0x64>)
 800520a:	2200      	movs	r2, #0
 800520c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800520e:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <MX_SPI1_Init+0x64>)
 8005210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005214:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005216:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <MX_SPI1_Init+0x64>)
 8005218:	2220      	movs	r2, #32
 800521a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <MX_SPI1_Init+0x64>)
 800521e:	2200      	movs	r2, #0
 8005220:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <MX_SPI1_Init+0x64>)
 8005224:	2200      	movs	r2, #0
 8005226:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <MX_SPI1_Init+0x64>)
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <MX_SPI1_Init+0x64>)
 8005230:	220a      	movs	r2, #10
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005234:	4804      	ldr	r0, [pc, #16]	; (8005248 <MX_SPI1_Init+0x64>)
 8005236:	f004 fb5d 	bl	80098f4 <HAL_SPI_Init>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005240:	f000 fb3a 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005244:	bf00      	nop
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20011544 	.word	0x20011544
 800524c:	40013000 	.word	0x40013000

08005250 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005254:	4b17      	ldr	r3, [pc, #92]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005256:	4a18      	ldr	r2, [pc, #96]	; (80052b8 <MX_SPI2_Init+0x68>)
 8005258:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800525a:	4b16      	ldr	r3, [pc, #88]	; (80052b4 <MX_SPI2_Init+0x64>)
 800525c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005260:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005262:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005264:	2200      	movs	r2, #0
 8005266:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005268:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <MX_SPI2_Init+0x64>)
 800526a:	2200      	movs	r2, #0
 800526c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005270:	2200      	movs	r2, #0
 8005272:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005276:	2200      	movs	r2, #0
 8005278:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <MX_SPI2_Init+0x64>)
 800527c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005280:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005284:	2230      	movs	r2, #48	; 0x30
 8005286:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <MX_SPI2_Init+0x64>)
 800528a:	2200      	movs	r2, #0
 800528c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800528e:	4b09      	ldr	r3, [pc, #36]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005290:	2200      	movs	r2, #0
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <MX_SPI2_Init+0x64>)
 8005296:	2200      	movs	r2, #0
 8005298:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <MX_SPI2_Init+0x64>)
 800529c:	220a      	movs	r2, #10
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80052a0:	4804      	ldr	r0, [pc, #16]	; (80052b4 <MX_SPI2_Init+0x64>)
 80052a2:	f004 fb27 	bl	80098f4 <HAL_SPI_Init>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80052ac:	f000 fb04 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80052b0:	bf00      	nop
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	2001159c 	.word	0x2001159c
 80052b8:	40003800 	.word	0x40003800

080052bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08c      	sub	sp, #48	; 0x30
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80052c2:	f107 030c 	add.w	r3, r7, #12
 80052c6:	2224      	movs	r2, #36	; 0x24
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f007 f9a0 	bl	800c610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052d8:	4b21      	ldr	r3, [pc, #132]	; (8005360 <MX_TIM2_Init+0xa4>)
 80052da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80052e0:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <MX_TIM2_Init+0xa4>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <MX_TIM2_Init+0xa4>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80052ec:	4b1c      	ldr	r3, [pc, #112]	; (8005360 <MX_TIM2_Init+0xa4>)
 80052ee:	f04f 32ff 	mov.w	r2, #4294967295
 80052f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <MX_TIM2_Init+0xa4>)
 80052f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <MX_TIM2_Init+0xa4>)
 80052fe:	2200      	movs	r2, #0
 8005300:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005306:	2302      	movs	r3, #2
 8005308:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8005312:	2302      	movs	r3, #2
 8005314:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005316:	2302      	movs	r3, #2
 8005318:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800531a:	2301      	movs	r3, #1
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800531e:	2300      	movs	r3, #0
 8005320:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8005322:	2302      	movs	r3, #2
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005326:	f107 030c 	add.w	r3, r7, #12
 800532a:	4619      	mov	r1, r3
 800532c:	480c      	ldr	r0, [pc, #48]	; (8005360 <MX_TIM2_Init+0xa4>)
 800532e:	f005 fe1b 	bl	800af68 <HAL_TIM_Encoder_Init>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005338:	f000 fabe 	bl	80058b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005340:	2300      	movs	r3, #0
 8005342:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <MX_TIM2_Init+0xa4>)
 800534a:	f006 fc95 	bl	800bc78 <HAL_TIMEx_MasterConfigSynchronization>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005354:	f000 fab0 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005358:	bf00      	nop
 800535a:	3730      	adds	r7, #48	; 0x30
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20011714 	.word	0x20011714

08005364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08e      	sub	sp, #56	; 0x38
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800536a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	605a      	str	r2, [r3, #4]
 8005374:	609a      	str	r2, [r3, #8]
 8005376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005378:	f107 0320 	add.w	r3, r7, #32
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
 8005390:	615a      	str	r2, [r3, #20]
 8005392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005394:	4b32      	ldr	r3, [pc, #200]	; (8005460 <MX_TIM3_Init+0xfc>)
 8005396:	4a33      	ldr	r2, [pc, #204]	; (8005464 <MX_TIM3_Init+0x100>)
 8005398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800539a:	4b31      	ldr	r3, [pc, #196]	; (8005460 <MX_TIM3_Init+0xfc>)
 800539c:	2200      	movs	r2, #0
 800539e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a0:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 80053a6:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053a8:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80053ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ae:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053b4:	4b2a      	ldr	r3, [pc, #168]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80053ba:	4829      	ldr	r0, [pc, #164]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053bc:	f005 fb66 	bl	800aa8c <HAL_TIM_Base_Init>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80053c6:	f000 fa77 	bl	80058b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80053d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d4:	4619      	mov	r1, r3
 80053d6:	4822      	ldr	r0, [pc, #136]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053d8:	f006 f892 	bl	800b500 <HAL_TIM_ConfigClockSource>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80053e2:	f000 fa69 	bl	80058b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053e6:	481e      	ldr	r0, [pc, #120]	; (8005460 <MX_TIM3_Init+0xfc>)
 80053e8:	f005 fcb5 	bl	800ad56 <HAL_TIM_PWM_Init>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80053f2:	f000 fa61 	bl	80058b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053f6:	2300      	movs	r3, #0
 80053f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053fe:	f107 0320 	add.w	r3, r7, #32
 8005402:	4619      	mov	r1, r3
 8005404:	4816      	ldr	r0, [pc, #88]	; (8005460 <MX_TIM3_Init+0xfc>)
 8005406:	f006 fc37 	bl	800bc78 <HAL_TIMEx_MasterConfigSynchronization>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005410:	f000 fa52 	bl	80058b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005414:	2360      	movs	r3, #96	; 0x60
 8005416:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005420:	2304      	movs	r3, #4
 8005422:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005424:	1d3b      	adds	r3, r7, #4
 8005426:	2200      	movs	r2, #0
 8005428:	4619      	mov	r1, r3
 800542a:	480d      	ldr	r0, [pc, #52]	; (8005460 <MX_TIM3_Init+0xfc>)
 800542c:	f005 ffa6 	bl	800b37c <HAL_TIM_PWM_ConfigChannel>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005436:	f000 fa3f 	bl	80058b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800543a:	1d3b      	adds	r3, r7, #4
 800543c:	2204      	movs	r2, #4
 800543e:	4619      	mov	r1, r3
 8005440:	4807      	ldr	r0, [pc, #28]	; (8005460 <MX_TIM3_Init+0xfc>)
 8005442:	f005 ff9b 	bl	800b37c <HAL_TIM_PWM_ConfigChannel>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800544c:	f000 fa34 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005450:	4803      	ldr	r0, [pc, #12]	; (8005460 <MX_TIM3_Init+0xfc>)
 8005452:	f000 fd23 	bl	8005e9c <HAL_TIM_MspPostInit>

}
 8005456:	bf00      	nop
 8005458:	3738      	adds	r7, #56	; 0x38
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	2001175c 	.word	0x2001175c
 8005464:	40000400 	.word	0x40000400

08005468 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08c      	sub	sp, #48	; 0x30
 800546c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800546e:	f107 030c 	add.w	r3, r7, #12
 8005472:	2224      	movs	r2, #36	; 0x24
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f007 f8ca 	bl	800c610 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005484:	4b21      	ldr	r3, [pc, #132]	; (800550c <MX_TIM4_Init+0xa4>)
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <MX_TIM4_Init+0xa8>)
 8005488:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <MX_TIM4_Init+0xa4>)
 800548c:	2200      	movs	r2, #0
 800548e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005490:	4b1e      	ldr	r3, [pc, #120]	; (800550c <MX_TIM4_Init+0xa4>)
 8005492:	2200      	movs	r2, #0
 8005494:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005496:	4b1d      	ldr	r3, [pc, #116]	; (800550c <MX_TIM4_Init+0xa4>)
 8005498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800549c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <MX_TIM4_Init+0xa4>)
 80054a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <MX_TIM4_Init+0xa4>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80054ac:	2302      	movs	r3, #2
 80054ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80054b0:	2302      	movs	r3, #2
 80054b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054b4:	2301      	movs	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054b8:	2300      	movs	r3, #0
 80054ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 80054bc:	2304      	movs	r3, #4
 80054be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80054c0:	2302      	movs	r3, #2
 80054c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054c4:	2301      	movs	r3, #1
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 80054cc:	2304      	movs	r3, #4
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80054d0:	f107 030c 	add.w	r3, r7, #12
 80054d4:	4619      	mov	r1, r3
 80054d6:	480d      	ldr	r0, [pc, #52]	; (800550c <MX_TIM4_Init+0xa4>)
 80054d8:	f005 fd46 	bl	800af68 <HAL_TIM_Encoder_Init>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80054e2:	f000 f9e9 	bl	80058b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054e6:	2300      	movs	r3, #0
 80054e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	4619      	mov	r1, r3
 80054f2:	4806      	ldr	r0, [pc, #24]	; (800550c <MX_TIM4_Init+0xa4>)
 80054f4:	f006 fbc0 	bl	800bc78 <HAL_TIMEx_MasterConfigSynchronization>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80054fe:	f000 f9db 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005502:	bf00      	nop
 8005504:	3730      	adds	r7, #48	; 0x30
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	200117a4 	.word	0x200117a4
 8005510:	40000800 	.word	0x40000800

08005514 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	2200      	movs	r2, #0
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	605a      	str	r2, [r3, #4]
 8005522:	609a      	str	r2, [r3, #8]
 8005524:	60da      	str	r2, [r3, #12]
 8005526:	611a      	str	r2, [r3, #16]
 8005528:	615a      	str	r2, [r3, #20]
 800552a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800552c:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <MX_TIM10_Init+0x8c>)
 800552e:	4a1d      	ldr	r2, [pc, #116]	; (80055a4 <MX_TIM10_Init+0x90>)
 8005530:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8005532:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <MX_TIM10_Init+0x8c>)
 8005534:	2204      	movs	r2, #4
 8005536:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005538:	4b19      	ldr	r3, [pc, #100]	; (80055a0 <MX_TIM10_Init+0x8c>)
 800553a:	2200      	movs	r2, #0
 800553c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <MX_TIM10_Init+0x8c>)
 8005540:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005544:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005546:	4b16      	ldr	r3, [pc, #88]	; (80055a0 <MX_TIM10_Init+0x8c>)
 8005548:	2200      	movs	r2, #0
 800554a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <MX_TIM10_Init+0x8c>)
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005552:	4813      	ldr	r0, [pc, #76]	; (80055a0 <MX_TIM10_Init+0x8c>)
 8005554:	f005 fa9a 	bl	800aa8c <HAL_TIM_Base_Init>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800555e:	f000 f9ab 	bl	80058b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8005562:	480f      	ldr	r0, [pc, #60]	; (80055a0 <MX_TIM10_Init+0x8c>)
 8005564:	f005 fb9e 	bl	800aca4 <HAL_TIM_OC_Init>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800556e:	f000 f9a3 	bl	80058b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800557e:	2300      	movs	r3, #0
 8005580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005582:	1d3b      	adds	r3, r7, #4
 8005584:	2200      	movs	r2, #0
 8005586:	4619      	mov	r1, r3
 8005588:	4805      	ldr	r0, [pc, #20]	; (80055a0 <MX_TIM10_Init+0x8c>)
 800558a:	f005 fe9b 	bl	800b2c4 <HAL_TIM_OC_ConfigChannel>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005594:	f000 f990 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005598:	bf00      	nop
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	200117ec 	.word	0x200117ec
 80055a4:	40014400 	.word	0x40014400

080055a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80055ac:	4b11      	ldr	r3, [pc, #68]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055ae:	4a12      	ldr	r2, [pc, #72]	; (80055f8 <MX_USART1_UART_Init+0x50>)
 80055b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80055b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055ce:	2208      	movs	r2, #8
 80055d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80055de:	4805      	ldr	r0, [pc, #20]	; (80055f4 <MX_USART1_UART_Init+0x4c>)
 80055e0:	f006 fbcc 	bl	800bd7c <HAL_HalfDuplex_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80055ea:	f000 f965 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80055ee:	bf00      	nop
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	20011834 	.word	0x20011834
 80055f8:	40011000 	.word	0x40011000

080055fc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005602:	4a12      	ldr	r2, [pc, #72]	; (800564c <MX_USART6_UART_Init+0x50>)
 8005604:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800560c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800561a:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 800561c:	2200      	movs	r2, #0
 800561e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005622:	220c      	movs	r2, #12
 8005624:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005626:	4b08      	ldr	r3, [pc, #32]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800562c:	4b06      	ldr	r3, [pc, #24]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8005632:	4805      	ldr	r0, [pc, #20]	; (8005648 <MX_USART6_UART_Init+0x4c>)
 8005634:	f006 fba2 	bl	800bd7c <HAL_HalfDuplex_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800563e:	f000 f93b 	bl	80058b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005642:	bf00      	nop
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20011878 	.word	0x20011878
 800564c:	40011400 	.word	0x40011400

08005650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
 800565a:	4b1f      	ldr	r3, [pc, #124]	; (80056d8 <MX_DMA_Init+0x88>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <MX_DMA_Init+0x88>)
 8005660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005664:	6313      	str	r3, [r2, #48]	; 0x30
 8005666:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <MX_DMA_Init+0x88>)
 8005668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	603b      	str	r3, [r7, #0]
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <MX_DMA_Init+0x88>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <MX_DMA_Init+0x88>)
 800567c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005680:	6313      	str	r3, [r2, #48]	; 0x30
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <MX_DMA_Init+0x88>)
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800568e:	2200      	movs	r2, #0
 8005690:	2100      	movs	r1, #0
 8005692:	200f      	movs	r0, #15
 8005694:	f001 ff49 	bl	800752a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005698:	200f      	movs	r0, #15
 800569a:	f001 ff62 	bl	8007562 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	2038      	movs	r0, #56	; 0x38
 80056a4:	f001 ff41 	bl	800752a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80056a8:	2038      	movs	r0, #56	; 0x38
 80056aa:	f001 ff5a 	bl	8007562 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	203a      	movs	r0, #58	; 0x3a
 80056b4:	f001 ff39 	bl	800752a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80056b8:	203a      	movs	r0, #58	; 0x3a
 80056ba:	f001 ff52 	bl	8007562 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80056be:	2200      	movs	r2, #0
 80056c0:	2100      	movs	r1, #0
 80056c2:	203c      	movs	r0, #60	; 0x3c
 80056c4:	f001 ff31 	bl	800752a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80056c8:	203c      	movs	r0, #60	; 0x3c
 80056ca:	f001 ff4a 	bl	8007562 <HAL_NVIC_EnableIRQ>

}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800

080056dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	609a      	str	r2, [r3, #8]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
 80056f6:	4b35      	ldr	r3, [pc, #212]	; (80057cc <MX_GPIO_Init+0xf0>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	4a34      	ldr	r2, [pc, #208]	; (80057cc <MX_GPIO_Init+0xf0>)
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	6313      	str	r3, [r2, #48]	; 0x30
 8005702:	4b32      	ldr	r3, [pc, #200]	; (80057cc <MX_GPIO_Init+0xf0>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800570e:	2300      	movs	r3, #0
 8005710:	607b      	str	r3, [r7, #4]
 8005712:	4b2e      	ldr	r3, [pc, #184]	; (80057cc <MX_GPIO_Init+0xf0>)
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	4a2d      	ldr	r2, [pc, #180]	; (80057cc <MX_GPIO_Init+0xf0>)
 8005718:	f043 0302 	orr.w	r3, r3, #2
 800571c:	6313      	str	r3, [r2, #48]	; 0x30
 800571e:	4b2b      	ldr	r3, [pc, #172]	; (80057cc <MX_GPIO_Init+0xf0>)
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800572a:	2300      	movs	r3, #0
 800572c:	603b      	str	r3, [r7, #0]
 800572e:	4b27      	ldr	r3, [pc, #156]	; (80057cc <MX_GPIO_Init+0xf0>)
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <MX_GPIO_Init+0xf0>)
 8005734:	f043 0304 	orr.w	r3, r3, #4
 8005738:	6313      	str	r3, [r2, #48]	; 0x30
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <MX_GPIO_Init+0xf0>)
 800573c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	603b      	str	r3, [r7, #0]
 8005744:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005746:	2200      	movs	r2, #0
 8005748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800574c:	4820      	ldr	r0, [pc, #128]	; (80057d0 <MX_GPIO_Init+0xf4>)
 800574e:	f002 fc87 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8005752:	2201      	movs	r2, #1
 8005754:	2110      	movs	r1, #16
 8005756:	481f      	ldr	r0, [pc, #124]	; (80057d4 <MX_GPIO_Init+0xf8>)
 8005758:	f002 fc82 	bl	8008060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800575c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005762:	2301      	movs	r3, #1
 8005764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005766:	2300      	movs	r3, #0
 8005768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	4619      	mov	r1, r3
 8005774:	4816      	ldr	r0, [pc, #88]	; (80057d0 <MX_GPIO_Init+0xf4>)
 8005776:	f002 faef 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 800577a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800577e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005780:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005786:	2301      	movs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 800578a:	f107 030c 	add.w	r3, r7, #12
 800578e:	4619      	mov	r1, r3
 8005790:	4811      	ldr	r0, [pc, #68]	; (80057d8 <MX_GPIO_Init+0xfc>)
 8005792:	f002 fae1 	bl	8007d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8005796:	2310      	movs	r3, #16
 8005798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800579a:	2301      	movs	r3, #1
 800579c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a2:	2303      	movs	r3, #3
 80057a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80057a6:	f107 030c 	add.w	r3, r7, #12
 80057aa:	4619      	mov	r1, r3
 80057ac:	4809      	ldr	r0, [pc, #36]	; (80057d4 <MX_GPIO_Init+0xf8>)
 80057ae:	f002 fad3 	bl	8007d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2104      	movs	r1, #4
 80057b6:	2028      	movs	r0, #40	; 0x28
 80057b8:	f001 feb7 	bl	800752a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80057bc:	2028      	movs	r0, #40	; 0x28
 80057be:	f001 fed0 	bl	8007562 <HAL_NVIC_EnableIRQ>

}
 80057c2:	bf00      	nop
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40020800 	.word	0x40020800
 80057d4:	40020000 	.word	0x40020000
 80057d8:	40020400 	.word	0x40020400

080057dc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80057e6:	2201      	movs	r2, #1
 80057e8:	701a      	strb	r2, [r3, #0]

	}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000c1c0 	.word	0x2000c1c0

080057fc <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8005804:	4b07      	ldr	r3, [pc, #28]	; (8005824 <HAL_ADC_ConvCpltCallback+0x28>)
 8005806:	2202      	movs	r2, #2
 8005808:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 800580a:	4807      	ldr	r0, [pc, #28]	; (8005828 <HAL_ADC_ConvCpltCallback+0x2c>)
 800580c:	f000 ffb6 	bl	800677c <HAL_ADC_Stop_DMA>
 8005810:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8005814:	4905      	ldr	r1, [pc, #20]	; (800582c <HAL_ADC_ConvCpltCallback+0x30>)
 8005816:	4804      	ldr	r0, [pc, #16]	; (8005828 <HAL_ADC_ConvCpltCallback+0x2c>)
 8005818:	f000 fec0 	bl	800659c <HAL_ADC_Start_DMA>

	}
 800581c:	bf00      	nop
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	2000c1c0 	.word	0x2000c1c0
 8005828:	20011448 	.word	0x20011448
 800582c:	20009bdc 	.word	0x20009bdc

08005830 <HAL_SPI_TxRxCpltCallback>:


	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <HAL_SPI_TxRxCpltCallback+0x38>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d10e      	bne.n	8005860 <HAL_SPI_TxRxCpltCallback+0x30>

		       memcpy( &flash_read_block, flash_read_block2+4,512);
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_SPI_TxRxCpltCallback+0x3c>)
 8005844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005848:	4619      	mov	r1, r3
 800584a:	4809      	ldr	r0, [pc, #36]	; (8005870 <HAL_SPI_TxRxCpltCallback+0x40>)
 800584c:	f006 fed2 	bl	800c5f4 <memcpy>
		       flash_flag=1;
 8005850:	4b08      	ldr	r3, [pc, #32]	; (8005874 <HAL_SPI_TxRxCpltCallback+0x44>)
 8005852:	2201      	movs	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 8005856:	2201      	movs	r2, #1
 8005858:	2110      	movs	r1, #16
 800585a:	4807      	ldr	r0, [pc, #28]	; (8005878 <HAL_SPI_TxRxCpltCallback+0x48>)
 800585c:	f002 fc00 	bl	8008060 <HAL_GPIO_WritePin>
		   }
		}
 8005860:	bf00      	nop
 8005862:	3708      	adds	r7, #8
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40013000 	.word	0x40013000
 800586c:	20010e44 	.word	0x20010e44
 8005870:	2000022c 	.word	0x2000022c
 8005874:	20000434 	.word	0x20000434
 8005878:	40020000 	.word	0x40020000

0800587c <HAL_SPI_TxCpltCallback>:



void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a0:	d102      	bne.n	80058a8 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 80058a2:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x24>)
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
  }
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	20000204 	.word	0x20000204

080058b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80058bc:	b672      	cpsid	i
}
 80058be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80058c0:	e7fe      	b.n	80058c0 <Error_Handler+0x8>
	...

080058c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	4b10      	ldr	r3, [pc, #64]	; (8005910 <HAL_MspInit+0x4c>)
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	4a0f      	ldr	r2, [pc, #60]	; (8005910 <HAL_MspInit+0x4c>)
 80058d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d8:	6453      	str	r3, [r2, #68]	; 0x44
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <HAL_MspInit+0x4c>)
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058e6:	2300      	movs	r3, #0
 80058e8:	603b      	str	r3, [r7, #0]
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <HAL_MspInit+0x4c>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	4a08      	ldr	r2, [pc, #32]	; (8005910 <HAL_MspInit+0x4c>)
 80058f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f4:	6413      	str	r3, [r2, #64]	; 0x40
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <HAL_MspInit+0x4c>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	f107 0314 	add.w	r3, r7, #20
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a3c      	ldr	r2, [pc, #240]	; (8005a24 <HAL_ADC_MspInit+0x110>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d171      	bne.n	8005a1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	4a3a      	ldr	r2, [pc, #232]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005944:	6453      	str	r3, [r2, #68]	; 0x44
 8005946:	4b38      	ldr	r3, [pc, #224]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b34      	ldr	r3, [pc, #208]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	4a33      	ldr	r2, [pc, #204]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6313      	str	r3, [r2, #48]	; 0x30
 8005962:	4b31      	ldr	r3, [pc, #196]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	4b2d      	ldr	r3, [pc, #180]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005976:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005978:	f043 0302 	orr.w	r3, r3, #2
 800597c:	6313      	str	r3, [r2, #48]	; 0x30
 800597e:	4b2a      	ldr	r3, [pc, #168]	; (8005a28 <HAL_ADC_MspInit+0x114>)
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 800598a:	2305      	movs	r3, #5
 800598c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800598e:	2303      	movs	r3, #3
 8005990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	2300      	movs	r3, #0
 8005994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	4619      	mov	r1, r3
 800599c:	4823      	ldr	r0, [pc, #140]	; (8005a2c <HAL_ADC_MspInit+0x118>)
 800599e:	f002 f9db 	bl	8007d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80059a2:	2303      	movs	r3, #3
 80059a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059a6:	2303      	movs	r3, #3
 80059a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059aa:	2300      	movs	r3, #0
 80059ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ae:	f107 0314 	add.w	r3, r7, #20
 80059b2:	4619      	mov	r1, r3
 80059b4:	481e      	ldr	r0, [pc, #120]	; (8005a30 <HAL_ADC_MspInit+0x11c>)
 80059b6:	f002 f9cf 	bl	8007d58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80059ba:	4b1e      	ldr	r3, [pc, #120]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059bc:	4a1e      	ldr	r2, [pc, #120]	; (8005a38 <HAL_ADC_MspInit+0x124>)
 80059be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80059c0:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059c6:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80059d2:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059da:	4b16      	ldr	r3, [pc, #88]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80059e2:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059f8:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80059fe:	480d      	ldr	r0, [pc, #52]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 8005a00:	f001 fdca 	bl	8007598 <HAL_DMA_Init>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8005a0a:	f7ff ff55 	bl	80058b8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a08      	ldr	r2, [pc, #32]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
 8005a14:	4a07      	ldr	r2, [pc, #28]	; (8005a34 <HAL_ADC_MspInit+0x120>)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005a1a:	bf00      	nop
 8005a1c:	3728      	adds	r7, #40	; 0x28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40012000 	.word	0x40012000
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40020000 	.word	0x40020000
 8005a30:	40020400 	.word	0x40020400
 8005a34:	20011490 	.word	0x20011490
 8005a38:	40026470 	.word	0x40026470

08005a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a44:	f107 0314 	add.w	r3, r7, #20
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	605a      	str	r2, [r3, #4]
 8005a4e:	609a      	str	r2, [r3, #8]
 8005a50:	60da      	str	r2, [r3, #12]
 8005a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_I2C_MspInit+0xa8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d13d      	bne.n	8005ada <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a5e:	2300      	movs	r3, #0
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_I2C_MspInit+0xac>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	4a20      	ldr	r2, [pc, #128]	; (8005ae8 <HAL_I2C_MspInit+0xac>)
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ae8 <HAL_I2C_MspInit+0xac>)
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	613b      	str	r3, [r7, #16]
 8005a78:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a80:	2312      	movs	r3, #18
 8005a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005a8c:	2309      	movs	r3, #9
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4619      	mov	r1, r3
 8005a96:	4815      	ldr	r0, [pc, #84]	; (8005aec <HAL_I2C_MspInit+0xb0>)
 8005a98:	f002 f95e 	bl	8007d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005aa2:	2312      	movs	r3, #18
 8005aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005aae:	2304      	movs	r3, #4
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ab2:	f107 0314 	add.w	r3, r7, #20
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	480c      	ldr	r0, [pc, #48]	; (8005aec <HAL_I2C_MspInit+0xb0>)
 8005aba:	f002 f94d 	bl	8007d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <HAL_I2C_MspInit+0xac>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	4a08      	ldr	r2, [pc, #32]	; (8005ae8 <HAL_I2C_MspInit+0xac>)
 8005ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005acc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ace:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <HAL_I2C_MspInit+0xac>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005ada:	bf00      	nop
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40005800 	.word	0x40005800
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	40020400 	.word	0x40020400

08005af0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08c      	sub	sp, #48	; 0x30
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af8:	f107 031c 	add.w	r3, r7, #28
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	609a      	str	r2, [r3, #8]
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a77      	ldr	r2, [pc, #476]	; (8005cec <HAL_SPI_MspInit+0x1fc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	f040 8089 	bne.w	8005c26 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
 8005b18:	4b75      	ldr	r3, [pc, #468]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	4a74      	ldr	r2, [pc, #464]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005b1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b22:	6453      	str	r3, [r2, #68]	; 0x44
 8005b24:	4b72      	ldr	r3, [pc, #456]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	4b6e      	ldr	r3, [pc, #440]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	4a6d      	ldr	r2, [pc, #436]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b40:	4b6b      	ldr	r3, [pc, #428]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8005b4c:	23e0      	movs	r3, #224	; 0xe0
 8005b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b50:	2302      	movs	r3, #2
 8005b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b5c:	2305      	movs	r3, #5
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b60:	f107 031c 	add.w	r3, r7, #28
 8005b64:	4619      	mov	r1, r3
 8005b66:	4863      	ldr	r0, [pc, #396]	; (8005cf4 <HAL_SPI_MspInit+0x204>)
 8005b68:	f002 f8f6 	bl	8007d58 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005b6c:	4b62      	ldr	r3, [pc, #392]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b6e:	4a63      	ldr	r2, [pc, #396]	; (8005cfc <HAL_SPI_MspInit+0x20c>)
 8005b70:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8005b72:	4b61      	ldr	r3, [pc, #388]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b74:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005b78:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005b7a:	4b5f      	ldr	r3, [pc, #380]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b80:	4b5d      	ldr	r3, [pc, #372]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005b86:	4b5c      	ldr	r3, [pc, #368]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b8c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b8e:	4b5a      	ldr	r3, [pc, #360]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b94:	4b58      	ldr	r3, [pc, #352]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8005b9a:	4b57      	ldr	r3, [pc, #348]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ba0:	4b55      	ldr	r3, [pc, #340]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ba6:	4b54      	ldr	r3, [pc, #336]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005bac:	4852      	ldr	r0, [pc, #328]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005bae:	f001 fcf3 	bl	8007598 <HAL_DMA_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8005bb8:	f7ff fe7e 	bl	80058b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a4e      	ldr	r2, [pc, #312]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005bc0:	64da      	str	r2, [r3, #76]	; 0x4c
 8005bc2:	4a4d      	ldr	r2, [pc, #308]	; (8005cf8 <HAL_SPI_MspInit+0x208>)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8005bc8:	4b4d      	ldr	r3, [pc, #308]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bca:	4a4e      	ldr	r2, [pc, #312]	; (8005d04 <HAL_SPI_MspInit+0x214>)
 8005bcc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005bd4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005bd6:	4b4a      	ldr	r3, [pc, #296]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bd8:	2240      	movs	r2, #64	; 0x40
 8005bda:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bdc:	4b48      	ldr	r3, [pc, #288]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bde:	2200      	movs	r2, #0
 8005be0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005be2:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005be8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bea:	4b45      	ldr	r3, [pc, #276]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005bf0:	4b43      	ldr	r3, [pc, #268]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005bf6:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005bfc:	4b40      	ldr	r3, [pc, #256]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c02:	4b3f      	ldr	r3, [pc, #252]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005c08:	483d      	ldr	r0, [pc, #244]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005c0a:	f001 fcc5 	bl	8007598 <HAL_DMA_Init>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8005c14:	f7ff fe50 	bl	80058b8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a39      	ldr	r2, [pc, #228]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005c1c:	649a      	str	r2, [r3, #72]	; 0x48
 8005c1e:	4a38      	ldr	r2, [pc, #224]	; (8005d00 <HAL_SPI_MspInit+0x210>)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005c24:	e05e      	b.n	8005ce4 <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a37      	ldr	r2, [pc, #220]	; (8005d08 <HAL_SPI_MspInit+0x218>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d159      	bne.n	8005ce4 <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	4b2e      	ldr	r3, [pc, #184]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005c3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8005c40:	4b2b      	ldr	r3, [pc, #172]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005c56:	f043 0302 	orr.w	r3, r3, #2
 8005c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005c5c:	4b24      	ldr	r3, [pc, #144]	; (8005cf0 <HAL_SPI_MspInit+0x200>)
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8005c68:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c76:	2303      	movs	r3, #3
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005c7a:	2305      	movs	r3, #5
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c7e:	f107 031c 	add.w	r3, r7, #28
 8005c82:	4619      	mov	r1, r3
 8005c84:	4821      	ldr	r0, [pc, #132]	; (8005d0c <HAL_SPI_MspInit+0x21c>)
 8005c86:	f002 f867 	bl	8007d58 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005c8c:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <HAL_SPI_MspInit+0x224>)
 8005c8e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005c90:	4b1f      	ldr	r3, [pc, #124]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c96:	4b1e      	ldr	r3, [pc, #120]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005c98:	2240      	movs	r2, #64	; 0x40
 8005c9a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c9c:	4b1c      	ldr	r3, [pc, #112]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ca2:	4b1b      	ldr	r3, [pc, #108]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ca8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005caa:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cb0:	4b17      	ldr	r3, [pc, #92]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005cbc:	4b14      	ldr	r3, [pc, #80]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cc2:	4b13      	ldr	r3, [pc, #76]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005cc8:	4811      	ldr	r0, [pc, #68]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cca:	f001 fc65 	bl	8007598 <HAL_DMA_Init>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 8005cd4:	f7ff fdf0 	bl	80058b8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a0d      	ldr	r2, [pc, #52]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005cdc:	649a      	str	r2, [r3, #72]	; 0x48
 8005cde:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <HAL_SPI_MspInit+0x220>)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ce4:	bf00      	nop
 8005ce6:	3730      	adds	r7, #48	; 0x30
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	40013000 	.word	0x40013000
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	40020000 	.word	0x40020000
 8005cf8:	200115f4 	.word	0x200115f4
 8005cfc:	40026410 	.word	0x40026410
 8005d00:	20011654 	.word	0x20011654
 8005d04:	40026440 	.word	0x40026440
 8005d08:	40003800 	.word	0x40003800
 8005d0c:	40020400 	.word	0x40020400
 8005d10:	200116b4 	.word	0x200116b4
 8005d14:	40026070 	.word	0x40026070

08005d18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	; 0x30
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d12d      	bne.n	8005d96 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	4b30      	ldr	r3, [pc, #192]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	4a2f      	ldr	r2, [pc, #188]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	6413      	str	r3, [r2, #64]	; 0x40
 8005d4a:	4b2d      	ldr	r3, [pc, #180]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	4b29      	ldr	r3, [pc, #164]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	4a28      	ldr	r2, [pc, #160]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	6313      	str	r3, [r2, #48]	; 0x30
 8005d66:	4b26      	ldr	r3, [pc, #152]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	617b      	str	r3, [r7, #20]
 8005d70:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8005d72:	f248 0302 	movw	r3, #32770	; 0x8002
 8005d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d78:	2302      	movs	r3, #2
 8005d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d80:	2300      	movs	r3, #0
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d84:	2301      	movs	r3, #1
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d88:	f107 031c 	add.w	r3, r7, #28
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	481d      	ldr	r0, [pc, #116]	; (8005e04 <HAL_TIM_Encoder_MspInit+0xec>)
 8005d90:	f001 ffe2 	bl	8007d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d94:	e030      	b.n	8005df8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <HAL_TIM_Encoder_MspInit+0xf0>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d12b      	bne.n	8005df8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005da0:	2300      	movs	r3, #0
 8005da2:	613b      	str	r3, [r7, #16]
 8005da4:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	4a15      	ldr	r2, [pc, #84]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	6413      	str	r3, [r2, #64]	; 0x40
 8005db0:	4b13      	ldr	r3, [pc, #76]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	4b0f      	ldr	r3, [pc, #60]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	4a0e      	ldr	r2, [pc, #56]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005dc6:	f043 0302 	orr.w	r3, r3, #2
 8005dca:	6313      	str	r3, [r2, #48]	; 0x30
 8005dcc:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dd8:	23c0      	movs	r3, #192	; 0xc0
 8005dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005de0:	2301      	movs	r3, #1
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005de4:	2300      	movs	r3, #0
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005de8:	2302      	movs	r3, #2
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dec:	f107 031c 	add.w	r3, r7, #28
 8005df0:	4619      	mov	r1, r3
 8005df2:	4806      	ldr	r0, [pc, #24]	; (8005e0c <HAL_TIM_Encoder_MspInit+0xf4>)
 8005df4:	f001 ffb0 	bl	8007d58 <HAL_GPIO_Init>
}
 8005df8:	bf00      	nop
 8005dfa:	3730      	adds	r7, #48	; 0x30
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	40023800 	.word	0x40023800
 8005e04:	40020000 	.word	0x40020000
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	40020400 	.word	0x40020400

08005e10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <HAL_TIM_Base_MspInit+0x80>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d116      	bne.n	8005e50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <HAL_TIM_Base_MspInit+0x84>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	4a1a      	ldr	r2, [pc, #104]	; (8005e94 <HAL_TIM_Base_MspInit+0x84>)
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	6413      	str	r3, [r2, #64]	; 0x40
 8005e32:	4b18      	ldr	r3, [pc, #96]	; (8005e94 <HAL_TIM_Base_MspInit+0x84>)
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2101      	movs	r1, #1
 8005e42:	201d      	movs	r0, #29
 8005e44:	f001 fb71 	bl	800752a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e48:	201d      	movs	r0, #29
 8005e4a:	f001 fb8a 	bl	8007562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005e4e:	e01a      	b.n	8005e86 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a10      	ldr	r2, [pc, #64]	; (8005e98 <HAL_TIM_Base_MspInit+0x88>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d115      	bne.n	8005e86 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <HAL_TIM_Base_MspInit+0x84>)
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <HAL_TIM_Base_MspInit+0x84>)
 8005e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e68:	6453      	str	r3, [r2, #68]	; 0x44
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <HAL_TIM_Base_MspInit+0x84>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	2102      	movs	r1, #2
 8005e7a:	2019      	movs	r0, #25
 8005e7c:	f001 fb55 	bl	800752a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005e80:	2019      	movs	r0, #25
 8005e82:	f001 fb6e 	bl	8007562 <HAL_NVIC_EnableIRQ>
}
 8005e86:	bf00      	nop
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	40000400 	.word	0x40000400
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40014400 	.word	0x40014400

08005e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea4:	f107 030c 	add.w	r3, r7, #12
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	605a      	str	r2, [r3, #4]
 8005eae:	609a      	str	r2, [r3, #8]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a12      	ldr	r2, [pc, #72]	; (8005f04 <HAL_TIM_MspPostInit+0x68>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d11d      	bne.n	8005efa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	4b11      	ldr	r3, [pc, #68]	; (8005f08 <HAL_TIM_MspPostInit+0x6c>)
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec6:	4a10      	ldr	r2, [pc, #64]	; (8005f08 <HAL_TIM_MspPostInit+0x6c>)
 8005ec8:	f043 0302 	orr.w	r3, r3, #2
 8005ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8005ece:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <HAL_TIM_MspPostInit+0x6c>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005eda:	2330      	movs	r3, #48	; 0x30
 8005edc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ede:	2302      	movs	r3, #2
 8005ee0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005eea:	2302      	movs	r3, #2
 8005eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eee:	f107 030c 	add.w	r3, r7, #12
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4805      	ldr	r0, [pc, #20]	; (8005f0c <HAL_TIM_MspPostInit+0x70>)
 8005ef6:	f001 ff2f 	bl	8007d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005efa:	bf00      	nop
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40023800 	.word	0x40023800
 8005f0c:	40020400 	.word	0x40020400

08005f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	; 0x30
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f18:	f107 031c 	add.w	r3, r7, #28
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a33      	ldr	r2, [pc, #204]	; (8005ffc <HAL_UART_MspInit+0xec>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d12d      	bne.n	8005f8e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	4b32      	ldr	r3, [pc, #200]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	4a31      	ldr	r2, [pc, #196]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f3c:	f043 0310 	orr.w	r3, r3, #16
 8005f40:	6453      	str	r3, [r2, #68]	; 0x44
 8005f42:	4b2f      	ldr	r3, [pc, #188]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	4b2b      	ldr	r3, [pc, #172]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a2a      	ldr	r2, [pc, #168]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f58:	f043 0301 	orr.w	r3, r3, #1
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b28      	ldr	r3, [pc, #160]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f70:	2302      	movs	r3, #2
 8005f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005f7c:	2307      	movs	r3, #7
 8005f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f80:	f107 031c 	add.w	r3, r7, #28
 8005f84:	4619      	mov	r1, r3
 8005f86:	481f      	ldr	r0, [pc, #124]	; (8006004 <HAL_UART_MspInit+0xf4>)
 8005f88:	f001 fee6 	bl	8007d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005f8c:	e031      	b.n	8005ff2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a1d      	ldr	r2, [pc, #116]	; (8006008 <HAL_UART_MspInit+0xf8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d12c      	bne.n	8005ff2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	4b18      	ldr	r3, [pc, #96]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005fa2:	f043 0320 	orr.w	r3, r3, #32
 8005fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8005fa8:	4b15      	ldr	r3, [pc, #84]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fac:	f003 0320 	and.w	r3, r3, #32
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	4b11      	ldr	r3, [pc, #68]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	4a10      	ldr	r2, [pc, #64]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc4:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <HAL_UART_MspInit+0xf0>)
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	60fb      	str	r3, [r7, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005fd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fe6:	f107 031c 	add.w	r3, r7, #28
 8005fea:	4619      	mov	r1, r3
 8005fec:	4805      	ldr	r0, [pc, #20]	; (8006004 <HAL_UART_MspInit+0xf4>)
 8005fee:	f001 feb3 	bl	8007d58 <HAL_GPIO_Init>
}
 8005ff2:	bf00      	nop
 8005ff4:	3730      	adds	r7, #48	; 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40011000 	.word	0x40011000
 8006000:	40023800 	.word	0x40023800
 8006004:	40020000 	.word	0x40020000
 8006008:	40011400 	.word	0x40011400

0800600c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006010:	e7fe      	b.n	8006010 <NMI_Handler+0x4>

08006012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006016:	e7fe      	b.n	8006016 <HardFault_Handler+0x4>

08006018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800601c:	e7fe      	b.n	800601c <MemManage_Handler+0x4>

0800601e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800601e:	b480      	push	{r7}
 8006020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006022:	e7fe      	b.n	8006022 <BusFault_Handler+0x4>

08006024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006028:	e7fe      	b.n	8006028 <UsageFault_Handler+0x4>

0800602a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800602e:	bf00      	nop
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800603c:	bf00      	nop
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006046:	b480      	push	{r7}
 8006048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800604a:	bf00      	nop
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006058:	f000 f8d8 	bl	800620c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800605c:	bf00      	nop
 800605e:	bd80      	pop	{r7, pc}

08006060 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006064:	4802      	ldr	r0, [pc, #8]	; (8006070 <DMA1_Stream4_IRQHandler+0x10>)
 8006066:	f001 fc0d 	bl	8007884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800606a:	bf00      	nop
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200116b4 	.word	0x200116b4

08006074 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006078:	4802      	ldr	r0, [pc, #8]	; (8006084 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800607a:	f005 f81b 	bl	800b0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200117ec 	.word	0x200117ec

08006088 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800608c:	4802      	ldr	r0, [pc, #8]	; (8006098 <TIM3_IRQHandler+0x10>)
 800608e:	f005 f811 	bl	800b0b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006092:	bf00      	nop
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	2001175c 	.word	0x2001175c

0800609c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 80060a0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80060a4:	f001 fff6 	bl	8008094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80060a8:	bf00      	nop
 80060aa:	bd80      	pop	{r7, pc}

080060ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80060b0:	4802      	ldr	r0, [pc, #8]	; (80060bc <DMA2_Stream0_IRQHandler+0x10>)
 80060b2:	f001 fbe7 	bl	8007884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80060b6:	bf00      	nop
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200115f4 	.word	0x200115f4

080060c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80060c4:	4802      	ldr	r0, [pc, #8]	; (80060d0 <DMA2_Stream2_IRQHandler+0x10>)
 80060c6:	f001 fbdd 	bl	8007884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20011654 	.word	0x20011654

080060d4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80060d8:	4802      	ldr	r0, [pc, #8]	; (80060e4 <DMA2_Stream4_IRQHandler+0x10>)
 80060da:	f001 fbd3 	bl	8007884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20011490 	.word	0x20011490

080060e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <SystemInit+0x28>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <SystemInit+0x28>)
 80060f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <SystemInit+0x28>)
 80060fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006102:	609a      	str	r2, [r3, #8]
#endif
}
 8006104:	bf00      	nop
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	e000ed00 	.word	0xe000ed00

08006114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800614c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800611a:	e003      	b.n	8006124 <LoopCopyDataInit>

0800611c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800611c:	4b0c      	ldr	r3, [pc, #48]	; (8006150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800611e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006122:	3104      	adds	r1, #4

08006124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006124:	480b      	ldr	r0, [pc, #44]	; (8006154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006126:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800612a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800612c:	d3f6      	bcc.n	800611c <CopyDataInit>
  ldr  r2, =_sbss
 800612e:	4a0b      	ldr	r2, [pc, #44]	; (800615c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006130:	e002      	b.n	8006138 <LoopFillZerobss>

08006132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006134:	f842 3b04 	str.w	r3, [r2], #4

08006138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006138:	4b09      	ldr	r3, [pc, #36]	; (8006160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800613a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800613c:	d3f9      	bcc.n	8006132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800613e:	f7ff ffd3 	bl	80060e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006142:	f006 fa33 	bl	800c5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006146:	f7fe fb69 	bl	800481c <main>
  bx  lr    
 800614a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800614c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006150:	0800eae0 	.word	0x0800eae0
  ldr  r0, =_sdata
 8006154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006158:	200086e0 	.word	0x200086e0
  ldr  r2, =_sbss
 800615c:	200086e0 	.word	0x200086e0
  ldr  r3, = _ebss
 8006160:	200118c0 	.word	0x200118c0

08006164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006164:	e7fe      	b.n	8006164 <ADC_IRQHandler>
	...

08006168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800616c:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <HAL_Init+0x40>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <HAL_Init+0x40>)
 8006172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006176:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_Init+0x40>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <HAL_Init+0x40>)
 800617e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006182:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <HAL_Init+0x40>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <HAL_Init+0x40>)
 800618a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800618e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006190:	2003      	movs	r0, #3
 8006192:	f001 f9bf 	bl	8007514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006196:	2000      	movs	r0, #0
 8006198:	f000 f808 	bl	80061ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800619c:	f7ff fb92 	bl	80058c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	40023c00 	.word	0x40023c00

080061ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061b4:	4b12      	ldr	r3, [pc, #72]	; (8006200 <HAL_InitTick+0x54>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b12      	ldr	r3, [pc, #72]	; (8006204 <HAL_InitTick+0x58>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4619      	mov	r1, r3
 80061be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f9d7 	bl	800757e <HAL_SYSTICK_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e00e      	b.n	80061f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d80a      	bhi.n	80061f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061e0:	2200      	movs	r2, #0
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	f001 f99f 	bl	800752a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061ec:	4a06      	ldr	r2, [pc, #24]	; (8006208 <HAL_InitTick+0x5c>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	e000      	b.n	80061f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20008670 	.word	0x20008670
 8006204:	20008678 	.word	0x20008678
 8006208:	20008674 	.word	0x20008674

0800620c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006210:	4b06      	ldr	r3, [pc, #24]	; (800622c <HAL_IncTick+0x20>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <HAL_IncTick+0x24>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4413      	add	r3, r2
 800621c:	4a04      	ldr	r2, [pc, #16]	; (8006230 <HAL_IncTick+0x24>)
 800621e:	6013      	str	r3, [r2, #0]
}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20008678 	.word	0x20008678
 8006230:	200118bc 	.word	0x200118bc

08006234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return uwTick;
 8006238:	4b03      	ldr	r3, [pc, #12]	; (8006248 <HAL_GetTick+0x14>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200118bc 	.word	0x200118bc

0800624c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006254:	f7ff ffee 	bl	8006234 <HAL_GetTick>
 8006258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d005      	beq.n	8006272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006266:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <HAL_Delay+0x44>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	461a      	mov	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4413      	add	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006272:	bf00      	nop
 8006274:	f7ff ffde 	bl	8006234 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	429a      	cmp	r2, r3
 8006282:	d8f7      	bhi.n	8006274 <HAL_Delay+0x28>
  {
  }
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20008678 	.word	0x20008678

08006294 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e033      	b.n	8006312 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d109      	bne.n	80062c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fb2e 	bl	8005914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f003 0310 	and.w	r3, r3, #16
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d118      	bne.n	8006304 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80062da:	f023 0302 	bic.w	r3, r3, #2
 80062de:	f043 0202 	orr.w	r2, r3, #2
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fbde 	bl	8006aa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
 8006302:	e001      	b.n	8006308 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_ADC_Start+0x1a>
 8006332:	2302      	movs	r3, #2
 8006334:	e097      	b.n	8006466 <HAL_ADC_Start+0x14a>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b01      	cmp	r3, #1
 800634a:	d018      	beq.n	800637e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800635c:	4b45      	ldr	r3, [pc, #276]	; (8006474 <HAL_ADC_Start+0x158>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a45      	ldr	r2, [pc, #276]	; (8006478 <HAL_ADC_Start+0x15c>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	0c9a      	lsrs	r2, r3, #18
 8006368:	4613      	mov	r3, r2
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	4413      	add	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006370:	e002      	b.n	8006378 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	3b01      	subs	r3, #1
 8006376:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f9      	bne.n	8006372 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	d15f      	bne.n	800644c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80063b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ca:	d106      	bne.n	80063da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d0:	f023 0206 	bic.w	r2, r3, #6
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	645a      	str	r2, [r3, #68]	; 0x44
 80063d8:	e002      	b.n	80063e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063e8:	4b24      	ldr	r3, [pc, #144]	; (800647c <HAL_ADC_Start+0x160>)
 80063ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80063f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10f      	bne.n	8006422 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d129      	bne.n	8006464 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689a      	ldr	r2, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	e020      	b.n	8006464 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a16      	ldr	r2, [pc, #88]	; (8006480 <HAL_ADC_Start+0x164>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d11b      	bne.n	8006464 <HAL_ADC_Start+0x148>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d114      	bne.n	8006464 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006448:	609a      	str	r2, [r3, #8]
 800644a:	e00b      	b.n	8006464 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006450:	f043 0210 	orr.w	r2, r3, #16
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20008670 	.word	0x20008670
 8006478:	431bde83 	.word	0x431bde83
 800647c:	40012300 	.word	0x40012300
 8006480:	40012000 	.word	0x40012000

08006484 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a0:	d113      	bne.n	80064ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80064ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b0:	d10b      	bne.n	80064ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0220 	orr.w	r2, r3, #32
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e063      	b.n	8006592 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80064ca:	f7ff feb3 	bl	8006234 <HAL_GetTick>
 80064ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064d0:	e021      	b.n	8006516 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d01d      	beq.n	8006516 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d007      	beq.n	80064f0 <HAL_ADC_PollForConversion+0x6c>
 80064e0:	f7ff fea8 	bl	8006234 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d212      	bcs.n	8006516 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d00b      	beq.n	8006516 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e03d      	b.n	8006592 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0302 	and.w	r3, r3, #2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d1d6      	bne.n	80064d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0212 	mvn.w	r2, #18
 800652c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d123      	bne.n	8006590 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800654c:	2b00      	cmp	r3, #0
 800654e:	d11f      	bne.n	8006590 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006568:	2b00      	cmp	r3, #0
 800656a:	d111      	bne.n	8006590 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d105      	bne.n	8006590 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006588:	f043 0201 	orr.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Start_DMA+0x1e>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0ce      	b.n	8006758 <HAL_ADC_Start_DMA+0x1bc>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d018      	beq.n	8006602 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80065e0:	4b5f      	ldr	r3, [pc, #380]	; (8006760 <HAL_ADC_Start_DMA+0x1c4>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a5f      	ldr	r2, [pc, #380]	; (8006764 <HAL_ADC_Start_DMA+0x1c8>)
 80065e6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ea:	0c9a      	lsrs	r2, r3, #18
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065f4:	e002      	b.n	80065fc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f9      	bne.n	80065f6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006610:	d107      	bne.n	8006622 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006620:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 8086 	bne.w	800673e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800663a:	f023 0301 	bic.w	r3, r3, #1
 800663e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006658:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800665c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006670:	d106      	bne.n	8006680 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	f023 0206 	bic.w	r2, r3, #6
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	645a      	str	r2, [r3, #68]	; 0x44
 800667e:	e002      	b.n	8006686 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800668e:	4b36      	ldr	r3, [pc, #216]	; (8006768 <HAL_ADC_Start_DMA+0x1cc>)
 8006690:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	4a35      	ldr	r2, [pc, #212]	; (800676c <HAL_ADC_Start_DMA+0x1d0>)
 8006698:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	4a34      	ldr	r2, [pc, #208]	; (8006770 <HAL_ADC_Start_DMA+0x1d4>)
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	4a33      	ldr	r2, [pc, #204]	; (8006774 <HAL_ADC_Start_DMA+0x1d8>)
 80066a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80066b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80066c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	334c      	adds	r3, #76	; 0x4c
 80066de:	4619      	mov	r1, r3
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f001 f806 	bl	80076f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10f      	bne.n	8006714 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d129      	bne.n	8006756 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006710:	609a      	str	r2, [r3, #8]
 8006712:	e020      	b.n	8006756 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a17      	ldr	r2, [pc, #92]	; (8006778 <HAL_ADC_Start_DMA+0x1dc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d11b      	bne.n	8006756 <HAL_ADC_Start_DMA+0x1ba>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d114      	bne.n	8006756 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	e00b      	b.n	8006756 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f043 0210 	orr.w	r2, r3, #16
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	f043 0201 	orr.w	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20008670 	.word	0x20008670
 8006764:	431bde83 	.word	0x431bde83
 8006768:	40012300 	.word	0x40012300
 800676c:	08006ca1 	.word	0x08006ca1
 8006770:	08006d5b 	.word	0x08006d5b
 8006774:	08006d77 	.word	0x08006d77
 8006778:	40012000 	.word	0x40012000

0800677c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_ADC_Stop_DMA+0x1a>
 8006792:	2302      	movs	r3, #2
 8006794:	e048      	b.n	8006828 <HAL_ADC_Stop_DMA+0xac>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d130      	bne.n	800681e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067ca:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d10f      	bne.n	80067fa <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 ffe0 	bl	80077a4 <HAL_DMA_Abort>
 80067e4:	4603      	mov	r3, r0
 80067e6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006808:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	f043 0201 	orr.w	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_ADC_ConfigChannel+0x1c>
 800685c:	2302      	movs	r3, #2
 800685e:	e113      	b.n	8006a88 <HAL_ADC_ConfigChannel+0x244>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b09      	cmp	r3, #9
 800686e:	d925      	bls.n	80068bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68d9      	ldr	r1, [r3, #12]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	4613      	mov	r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	4413      	add	r3, r2
 8006884:	3b1e      	subs	r3, #30
 8006886:	2207      	movs	r2, #7
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	43da      	mvns	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	400a      	ands	r2, r1
 8006894:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68d9      	ldr	r1, [r3, #12]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	4618      	mov	r0, r3
 80068a8:	4603      	mov	r3, r0
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	4403      	add	r3, r0
 80068ae:	3b1e      	subs	r3, #30
 80068b0:	409a      	lsls	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	430a      	orrs	r2, r1
 80068b8:	60da      	str	r2, [r3, #12]
 80068ba:	e022      	b.n	8006902 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6919      	ldr	r1, [r3, #16]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	4613      	mov	r3, r2
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	4413      	add	r3, r2
 80068d0:	2207      	movs	r2, #7
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	43da      	mvns	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	400a      	ands	r2, r1
 80068de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6919      	ldr	r1, [r3, #16]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	4618      	mov	r0, r3
 80068f2:	4603      	mov	r3, r0
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4403      	add	r3, r0
 80068f8:	409a      	lsls	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b06      	cmp	r3, #6
 8006908:	d824      	bhi.n	8006954 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	3b05      	subs	r3, #5
 800691c:	221f      	movs	r2, #31
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	43da      	mvns	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	400a      	ands	r2, r1
 800692a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	4618      	mov	r0, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	3b05      	subs	r3, #5
 8006946:	fa00 f203 	lsl.w	r2, r0, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	635a      	str	r2, [r3, #52]	; 0x34
 8006952:	e04c      	b.n	80069ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d824      	bhi.n	80069a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	3b23      	subs	r3, #35	; 0x23
 800696e:	221f      	movs	r2, #31
 8006970:	fa02 f303 	lsl.w	r3, r2, r3
 8006974:	43da      	mvns	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	400a      	ands	r2, r1
 800697c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	4618      	mov	r0, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	3b23      	subs	r3, #35	; 0x23
 8006998:	fa00 f203 	lsl.w	r2, r0, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
 80069a4:	e023      	b.n	80069ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	3b41      	subs	r3, #65	; 0x41
 80069b8:	221f      	movs	r2, #31
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43da      	mvns	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	400a      	ands	r2, r1
 80069c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	4618      	mov	r0, r3
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	3b41      	subs	r3, #65	; 0x41
 80069e2:	fa00 f203 	lsl.w	r2, r0, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069ee:	4b29      	ldr	r3, [pc, #164]	; (8006a94 <HAL_ADC_ConfigChannel+0x250>)
 80069f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a28      	ldr	r2, [pc, #160]	; (8006a98 <HAL_ADC_ConfigChannel+0x254>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10f      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x1d8>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b12      	cmp	r3, #18
 8006a02:	d10b      	bne.n	8006a1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a1d      	ldr	r2, [pc, #116]	; (8006a98 <HAL_ADC_ConfigChannel+0x254>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d12b      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x23a>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a1c      	ldr	r2, [pc, #112]	; (8006a9c <HAL_ADC_ConfigChannel+0x258>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <HAL_ADC_ConfigChannel+0x1f4>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b11      	cmp	r3, #17
 8006a36:	d122      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <HAL_ADC_ConfigChannel+0x258>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d111      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a11      	ldr	r2, [pc, #68]	; (8006aa4 <HAL_ADC_ConfigChannel+0x260>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	0c9a      	lsrs	r2, r3, #18
 8006a66:	4613      	mov	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a70:	e002      	b.n	8006a78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1f9      	bne.n	8006a72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40012300 	.word	0x40012300
 8006a98:	40012000 	.word	0x40012000
 8006a9c:	10000012 	.word	0x10000012
 8006aa0:	20008670 	.word	0x20008670
 8006aa4:	431bde83 	.word	0x431bde83

08006aa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ab0:	4b79      	ldr	r3, [pc, #484]	; (8006c98 <ADC_Init+0x1f0>)
 8006ab2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6859      	ldr	r1, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	021a      	lsls	r2, r3, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6899      	ldr	r1, [r3, #8]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3a:	4a58      	ldr	r2, [pc, #352]	; (8006c9c <ADC_Init+0x1f4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d022      	beq.n	8006b86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6899      	ldr	r1, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6899      	ldr	r1, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
 8006b84:	e00f      	b.n	8006ba6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0202 	bic.w	r2, r2, #2
 8006bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6899      	ldr	r1, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	7e1b      	ldrb	r3, [r3, #24]
 8006bc0:	005a      	lsls	r2, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01b      	beq.n	8006c0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6859      	ldr	r1, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	035a      	lsls	r2, r3, #13
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
 8006c0a:	e007      	b.n	8006c1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	3b01      	subs	r3, #1
 8006c38:	051a      	lsls	r2, r3, #20
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6899      	ldr	r1, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c5e:	025a      	lsls	r2, r3, #9
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6899      	ldr	r1, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	029a      	lsls	r2, r3, #10
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	40012300 	.word	0x40012300
 8006c9c:	0f000001 	.word	0x0f000001

08006ca0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d13c      	bne.n	8006d34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d12b      	bne.n	8006d2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d127      	bne.n	8006d2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d006      	beq.n	8006cf8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d119      	bne.n	8006d2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0220 	bic.w	r2, r2, #32
 8006d06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	f043 0201 	orr.w	r2, r3, #1
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7fe fd65 	bl	80057fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d32:	e00e      	b.n	8006d52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fd75 	bl	8006830 <HAL_ADC_ErrorCallback>
}
 8006d46:	e004      	b.n	8006d52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	4798      	blx	r3
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7fe fd37 	bl	80057dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2240      	movs	r2, #64	; 0x40
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f043 0204 	orr.w	r2, r3, #4
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fd4a 	bl	8006830 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d9c:	bf00      	nop
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_ADCEx_InjectedStart+0x22>
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	e0aa      	b.n	8006f1c <HAL_ADCEx_InjectedStart+0x178>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d018      	beq.n	8006e0e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006dec:	4b4e      	ldr	r3, [pc, #312]	; (8006f28 <HAL_ADCEx_InjectedStart+0x184>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a4e      	ldr	r2, [pc, #312]	; (8006f2c <HAL_ADCEx_InjectedStart+0x188>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	0c9a      	lsrs	r2, r3, #18
 8006df8:	4613      	mov	r3, r2
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	4413      	add	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e00:	e002      	b.n	8006e08 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f9      	bne.n	8006e02 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d172      	bne.n	8006f02 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006e24:	f023 0301 	bic.w	r3, r3, #1
 8006e28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f06f 0204 	mvn.w	r2, #4
 8006e52:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e54:	4b36      	ldr	r3, [pc, #216]	; (8006f30 <HAL_ADCEx_InjectedStart+0x18c>)
 8006e56:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d124      	bne.n	8006eae <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bf0c      	ite	eq
 8006e72:	2301      	moveq	r3, #1
 8006e74:	2300      	movne	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bf0c      	ite	eq
 8006e88:	2301      	moveq	r3, #1
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d041      	beq.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d03e      	beq.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006eaa:	609a      	str	r2, [r3, #8]
 8006eac:	e035      	b.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bf0c      	ite	eq
 8006ebc:	2301      	moveq	r3, #1
 8006ebe:	2300      	movne	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a15      	ldr	r2, [pc, #84]	; (8006f34 <HAL_ADCEx_InjectedStart+0x190>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d11a      	bne.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d017      	beq.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d014      	beq.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689a      	ldr	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006efe:	609a      	str	r2, [r3, #8]
 8006f00:	e00b      	b.n	8006f1a <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f043 0210 	orr.w	r2, r3, #16
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f12:	f043 0201 	orr.w	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	20008670 	.word	0x20008670
 8006f2c:	431bde83 	.word	0x431bde83
 8006f30:	40012300 	.word	0x40012300
 8006f34:	40012000 	.word	0x40012000

08006f38 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_ADCEx_InjectedStop+0x1a>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e037      	b.n	8006fc2 <HAL_ADCEx_InjectedStop+0x8a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d120      	bne.n	8006fa8 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d119      	bne.n	8006fa8 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d112      	bne.n	8006fb8 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	f043 0201 	orr.w	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006fa6:	e007      	b.n	8006fb8 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f06f 0204 	mvn.w	r2, #4
 8006fe6:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d81f      	bhi.n	8007030 <HAL_ADCEx_InjectedGetValue+0x60>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <HAL_ADCEx_InjectedGetValue+0x28>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	08007027 	.word	0x08007027
 8006ffc:	0800701d 	.word	0x0800701d
 8007000:	08007013 	.word	0x08007013
 8007004:	08007009 	.word	0x08007009
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800700e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007010:	e00f      	b.n	8007032 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007018:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800701a:	e00a      	b.n	8007032 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007024:	e005      	b.n	8007032 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800702e:	e000      	b.n	8007032 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8007030:	bf00      	nop
  }
  return tmp;
 8007032:	68fb      	ldr	r3, [r7, #12]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8007054:	2302      	movs	r3, #2
 8007056:	e17e      	b.n	8007356 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b09      	cmp	r3, #9
 8007066:	d925      	bls.n	80070b4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68d9      	ldr	r1, [r3, #12]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	461a      	mov	r2, r3
 8007076:	4613      	mov	r3, r2
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	4413      	add	r3, r2
 800707c:	3b1e      	subs	r3, #30
 800707e:	2207      	movs	r2, #7
 8007080:	fa02 f303 	lsl.w	r3, r2, r3
 8007084:	43da      	mvns	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	400a      	ands	r2, r1
 800708c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68d9      	ldr	r1, [r3, #12]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	b29b      	uxth	r3, r3
 800709e:	4618      	mov	r0, r3
 80070a0:	4603      	mov	r3, r0
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4403      	add	r3, r0
 80070a6:	3b1e      	subs	r3, #30
 80070a8:	409a      	lsls	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	60da      	str	r2, [r3, #12]
 80070b2:	e022      	b.n	80070fa <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6919      	ldr	r1, [r3, #16]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	461a      	mov	r2, r3
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	2207      	movs	r2, #7
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	43da      	mvns	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	400a      	ands	r2, r1
 80070d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6919      	ldr	r1, [r3, #16]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	4618      	mov	r0, r3
 80070ea:	4603      	mov	r3, r0
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	4403      	add	r3, r0
 80070f0:	409a      	lsls	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	3b01      	subs	r3, #1
 8007116:	051a      	lsls	r2, r3, #20
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	b2da      	uxtb	r2, r3
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	b2db      	uxtb	r3, r3
 8007136:	3303      	adds	r3, #3
 8007138:	b2db      	uxtb	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	4613      	mov	r3, r2
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	221f      	movs	r2, #31
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	43da      	mvns	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	400a      	ands	r2, r1
 8007150:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	b29b      	uxth	r3, r3
 800715e:	4618      	mov	r0, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	b2db      	uxtb	r3, r3
 8007170:	3303      	adds	r3, #3
 8007172:	b2db      	uxtb	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	fa00 f203 	lsl.w	r2, r0, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	4a75      	ldr	r2, [pc, #468]	; (8007364 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d022      	beq.n	80071d8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80071a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6899      	ldr	r1, [r3, #8]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	699a      	ldr	r2, [r3, #24]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80071c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6899      	ldr	r1, [r3, #8]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	69da      	ldr	r2, [r3, #28]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
 80071d6:	e00f      	b.n	80071f8 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80071e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80071f6:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	7d5b      	ldrb	r3, [r3, #21]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d008      	beq.n	8007212 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800720e:	605a      	str	r2, [r3, #4]
 8007210:	e007      	b.n	8007222 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007220:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	7d1b      	ldrb	r3, [r3, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d008      	beq.n	800723c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	e007      	b.n	800724c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800724a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d02e      	beq.n	80072b2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8007254:	2b03      	cmp	r3, #3
 8007256:	d840      	bhi.n	80072da <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8007258:	2b01      	cmp	r3, #1
 800725a:	d002      	beq.n	8007262 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800725c:	2b02      	cmp	r3, #2
 800725e:	d014      	beq.n	800728a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8007260:	e03b      	b.n	80072da <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007270:	f023 030f 	bic.w	r3, r3, #15
 8007274:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6959      	ldr	r1, [r3, #20]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	615a      	str	r2, [r3, #20]
      break;
 8007288:	e03b      	b.n	8007302 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007298:	f023 030f 	bic.w	r3, r3, #15
 800729c:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6999      	ldr	r1, [r3, #24]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	619a      	str	r2, [r3, #24]
      break;
 80072b0:	e027      	b.n	8007302 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69db      	ldr	r3, [r3, #28]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072c0:	f023 030f 	bic.w	r3, r3, #15
 80072c4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69d9      	ldr	r1, [r3, #28]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	61da      	str	r2, [r3, #28]
      break;
 80072d8:	e013      	b.n	8007302 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80072e8:	f023 030f 	bic.w	r3, r3, #15
 80072ec:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a19      	ldr	r1, [r3, #32]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	621a      	str	r2, [r3, #32]
      break;
 8007300:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8007304:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a18      	ldr	r2, [pc, #96]	; (800736c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d109      	bne.n	8007324 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b12      	cmp	r3, #18
 8007316:	d105      	bne.n	8007324 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a10      	ldr	r2, [pc, #64]	; (800736c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d10e      	bne.n	800734c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a0f      	ldr	r2, [pc, #60]	; (8007370 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b11      	cmp	r3, #17
 800733e:	d105      	bne.n	800734c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	000f0001 	.word	0x000f0001
 8007368:	40012300 	.word	0x40012300
 800736c:	40012000 	.word	0x40012000
 8007370:	10000012 	.word	0x10000012

08007374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <__NVIC_SetPriorityGrouping+0x44>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007390:	4013      	ands	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800739c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073a6:	4a04      	ldr	r2, [pc, #16]	; (80073b8 <__NVIC_SetPriorityGrouping+0x44>)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	60d3      	str	r3, [r2, #12]
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	e000ed00 	.word	0xe000ed00

080073bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <__NVIC_GetPriorityGrouping+0x18>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	0a1b      	lsrs	r3, r3, #8
 80073c6:	f003 0307 	and.w	r3, r3, #7
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	e000ed00 	.word	0xe000ed00

080073d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	db0b      	blt.n	8007402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	f003 021f 	and.w	r2, r3, #31
 80073f0:	4907      	ldr	r1, [pc, #28]	; (8007410 <__NVIC_EnableIRQ+0x38>)
 80073f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f6:	095b      	lsrs	r3, r3, #5
 80073f8:	2001      	movs	r0, #1
 80073fa:	fa00 f202 	lsl.w	r2, r0, r2
 80073fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	e000e100 	.word	0xe000e100

08007414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	6039      	str	r1, [r7, #0]
 800741e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007424:	2b00      	cmp	r3, #0
 8007426:	db0a      	blt.n	800743e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	b2da      	uxtb	r2, r3
 800742c:	490c      	ldr	r1, [pc, #48]	; (8007460 <__NVIC_SetPriority+0x4c>)
 800742e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007432:	0112      	lsls	r2, r2, #4
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	440b      	add	r3, r1
 8007438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800743c:	e00a      	b.n	8007454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	b2da      	uxtb	r2, r3
 8007442:	4908      	ldr	r1, [pc, #32]	; (8007464 <__NVIC_SetPriority+0x50>)
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	f003 030f 	and.w	r3, r3, #15
 800744a:	3b04      	subs	r3, #4
 800744c:	0112      	lsls	r2, r2, #4
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	440b      	add	r3, r1
 8007452:	761a      	strb	r2, [r3, #24]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	e000e100 	.word	0xe000e100
 8007464:	e000ed00 	.word	0xe000ed00

08007468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007468:	b480      	push	{r7}
 800746a:	b089      	sub	sp, #36	; 0x24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	f1c3 0307 	rsb	r3, r3, #7
 8007482:	2b04      	cmp	r3, #4
 8007484:	bf28      	it	cs
 8007486:	2304      	movcs	r3, #4
 8007488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	3304      	adds	r3, #4
 800748e:	2b06      	cmp	r3, #6
 8007490:	d902      	bls.n	8007498 <NVIC_EncodePriority+0x30>
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3b03      	subs	r3, #3
 8007496:	e000      	b.n	800749a <NVIC_EncodePriority+0x32>
 8007498:	2300      	movs	r3, #0
 800749a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800749c:	f04f 32ff 	mov.w	r2, #4294967295
 80074a0:	69bb      	ldr	r3, [r7, #24]
 80074a2:	fa02 f303 	lsl.w	r3, r2, r3
 80074a6:	43da      	mvns	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	401a      	ands	r2, r3
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074b0:	f04f 31ff 	mov.w	r1, #4294967295
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ba:	43d9      	mvns	r1, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074c0:	4313      	orrs	r3, r2
         );
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3724      	adds	r7, #36	; 0x24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3b01      	subs	r3, #1
 80074dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074e0:	d301      	bcc.n	80074e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80074e2:	2301      	movs	r3, #1
 80074e4:	e00f      	b.n	8007506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80074e6:	4a0a      	ldr	r2, [pc, #40]	; (8007510 <SysTick_Config+0x40>)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80074ee:	210f      	movs	r1, #15
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	f7ff ff8e 	bl	8007414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80074f8:	4b05      	ldr	r3, [pc, #20]	; (8007510 <SysTick_Config+0x40>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80074fe:	4b04      	ldr	r3, [pc, #16]	; (8007510 <SysTick_Config+0x40>)
 8007500:	2207      	movs	r2, #7
 8007502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	e000e010 	.word	0xe000e010

08007514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff ff29 	bl	8007374 <__NVIC_SetPriorityGrouping>
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800752a:	b580      	push	{r7, lr}
 800752c:	b086      	sub	sp, #24
 800752e:	af00      	add	r7, sp, #0
 8007530:	4603      	mov	r3, r0
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
 8007536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800753c:	f7ff ff3e 	bl	80073bc <__NVIC_GetPriorityGrouping>
 8007540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	6978      	ldr	r0, [r7, #20]
 8007548:	f7ff ff8e 	bl	8007468 <NVIC_EncodePriority>
 800754c:	4602      	mov	r2, r0
 800754e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff ff5d 	bl	8007414 <__NVIC_SetPriority>
}
 800755a:	bf00      	nop
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	4603      	mov	r3, r0
 800756a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800756c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ff31 	bl	80073d8 <__NVIC_EnableIRQ>
}
 8007576:	bf00      	nop
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff ffa2 	bl	80074d0 <SysTick_Config>
 800758c:	4603      	mov	r3, r0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075a0:	2300      	movs	r3, #0
 80075a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075a4:	f7fe fe46 	bl	8006234 <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e099      	b.n	80076e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075d4:	e00f      	b.n	80075f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80075d6:	f7fe fe2d 	bl	8006234 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b05      	cmp	r3, #5
 80075e2:	d908      	bls.n	80075f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2203      	movs	r2, #3
 80075ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e078      	b.n	80076e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e8      	bne.n	80075d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4b38      	ldr	r3, [pc, #224]	; (80076f0 <HAL_DMA_Init+0x158>)
 8007610:	4013      	ands	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800762e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800763a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b04      	cmp	r3, #4
 800764e:	d107      	bne.n	8007660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	4313      	orrs	r3, r2
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	4313      	orrs	r3, r2
 800765e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0307 	bic.w	r3, r3, #7
 8007676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b04      	cmp	r3, #4
 8007688:	d117      	bne.n	80076ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00e      	beq.n	80076ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fadf 	bl	8007c60 <DMA_CheckFifoParam>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d008      	beq.n	80076ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2240      	movs	r2, #64	; 0x40
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80076b6:	2301      	movs	r3, #1
 80076b8:	e016      	b.n	80076e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fa96 	bl	8007bf4 <DMA_CalcBaseAndBitshift>
 80076c8:	4603      	mov	r3, r0
 80076ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d0:	223f      	movs	r2, #63	; 0x3f
 80076d2:	409a      	lsls	r2, r3
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	f010803f 	.word	0xf010803f

080076f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
 8007700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007712:	2b01      	cmp	r3, #1
 8007714:	d101      	bne.n	800771a <HAL_DMA_Start_IT+0x26>
 8007716:	2302      	movs	r3, #2
 8007718:	e040      	b.n	800779c <HAL_DMA_Start_IT+0xa8>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b01      	cmp	r3, #1
 800772c:	d12f      	bne.n	800778e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 fa28 	bl	8007b98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	223f      	movs	r2, #63	; 0x3f
 800774e:	409a      	lsls	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0216 	orr.w	r2, r2, #22
 8007762:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007768:	2b00      	cmp	r3, #0
 800776a:	d007      	beq.n	800777c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0208 	orr.w	r2, r2, #8
 800777a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	e005      	b.n	800779a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007796:	2302      	movs	r3, #2
 8007798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80077b2:	f7fe fd3f 	bl	8006234 <HAL_GetTick>
 80077b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d008      	beq.n	80077d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2280      	movs	r2, #128	; 0x80
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e052      	b.n	800787c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0216 	bic.w	r2, r2, #22
 80077e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695a      	ldr	r2, [r3, #20]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <HAL_DMA_Abort+0x62>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007802:	2b00      	cmp	r3, #0
 8007804:	d007      	beq.n	8007816 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0208 	bic.w	r2, r2, #8
 8007814:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f022 0201 	bic.w	r2, r2, #1
 8007824:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007826:	e013      	b.n	8007850 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007828:	f7fe fd04 	bl	8006234 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	2b05      	cmp	r3, #5
 8007834:	d90c      	bls.n	8007850 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800784c:	2303      	movs	r3, #3
 800784e:	e015      	b.n	800787c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e4      	bne.n	8007828 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007862:	223f      	movs	r2, #63	; 0x3f
 8007864:	409a      	lsls	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007890:	4b8e      	ldr	r3, [pc, #568]	; (8007acc <HAL_DMA_IRQHandler+0x248>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a8e      	ldr	r2, [pc, #568]	; (8007ad0 <HAL_DMA_IRQHandler+0x24c>)
 8007896:	fba2 2303 	umull	r2, r3, r2, r3
 800789a:	0a9b      	lsrs	r3, r3, #10
 800789c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ae:	2208      	movs	r2, #8
 80078b0:	409a      	lsls	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4013      	ands	r3, r2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d01a      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d013      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0204 	bic.w	r2, r2, #4
 80078d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078dc:	2208      	movs	r2, #8
 80078de:	409a      	lsls	r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	f043 0201 	orr.w	r2, r3, #1
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f4:	2201      	movs	r2, #1
 80078f6:	409a      	lsls	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4013      	ands	r3, r2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d012      	beq.n	8007926 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007912:	2201      	movs	r2, #1
 8007914:	409a      	lsls	r2, r3
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800791e:	f043 0202 	orr.w	r2, r3, #2
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792a:	2204      	movs	r2, #4
 800792c:	409a      	lsls	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d012      	beq.n	800795c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00b      	beq.n	800795c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007948:	2204      	movs	r2, #4
 800794a:	409a      	lsls	r2, r3
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	f043 0204 	orr.w	r2, r3, #4
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007960:	2210      	movs	r2, #16
 8007962:	409a      	lsls	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4013      	ands	r3, r2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d043      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0308 	and.w	r3, r3, #8
 8007976:	2b00      	cmp	r3, #0
 8007978:	d03c      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800797e:	2210      	movs	r2, #16
 8007980:	409a      	lsls	r2, r3
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d018      	beq.n	80079c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d108      	bne.n	80079b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d024      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	4798      	blx	r3
 80079b2:	e01f      	b.n	80079f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d01b      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	4798      	blx	r3
 80079c4:	e016      	b.n	80079f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0208 	bic.w	r2, r2, #8
 80079e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d003      	beq.n	80079f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	2220      	movs	r2, #32
 80079fa:	409a      	lsls	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 808f 	beq.w	8007b24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8087 	beq.w	8007b24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	409a      	lsls	r2, r3
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d136      	bne.n	8007a9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 0216 	bic.w	r2, r2, #22
 8007a3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695a      	ldr	r2, [r3, #20]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d103      	bne.n	8007a5e <HAL_DMA_IRQHandler+0x1da>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 0208 	bic.w	r2, r2, #8
 8007a6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a72:	223f      	movs	r2, #63	; 0x3f
 8007a74:	409a      	lsls	r2, r3
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d07e      	beq.n	8007b90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
        }
        return;
 8007a9a:	e079      	b.n	8007b90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01d      	beq.n	8007ae6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10d      	bne.n	8007ad4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d031      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
 8007ac8:	e02c      	b.n	8007b24 <HAL_DMA_IRQHandler+0x2a0>
 8007aca:	bf00      	nop
 8007acc:	20008670 	.word	0x20008670
 8007ad0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d023      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	4798      	blx	r3
 8007ae4:	e01e      	b.n	8007b24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10f      	bne.n	8007b14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0210 	bic.w	r2, r2, #16
 8007b02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d032      	beq.n	8007b92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d022      	beq.n	8007b7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d307      	bcc.n	8007b6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1f2      	bne.n	8007b50 <HAL_DMA_IRQHandler+0x2cc>
 8007b6a:	e000      	b.n	8007b6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007b6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d005      	beq.n	8007b92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	4798      	blx	r3
 8007b8e:	e000      	b.n	8007b92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007b90:	bf00      	nop
    }
  }
}
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	2b40      	cmp	r3, #64	; 0x40
 8007bc4:	d108      	bne.n	8007bd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007bd6:	e007      	b.n	8007be8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]
}
 8007be8:	bf00      	nop
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	3b10      	subs	r3, #16
 8007c04:	4a14      	ldr	r2, [pc, #80]	; (8007c58 <DMA_CalcBaseAndBitshift+0x64>)
 8007c06:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0a:	091b      	lsrs	r3, r3, #4
 8007c0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007c0e:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <DMA_CalcBaseAndBitshift+0x68>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d909      	bls.n	8007c36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	1d1a      	adds	r2, r3, #4
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	659a      	str	r2, [r3, #88]	; 0x58
 8007c34:	e007      	b.n	8007c46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	aaaaaaab 	.word	0xaaaaaaab
 8007c5c:	0800e1c0 	.word	0x0800e1c0

08007c60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d11f      	bne.n	8007cba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d856      	bhi.n	8007d2e <DMA_CheckFifoParam+0xce>
 8007c80:	a201      	add	r2, pc, #4	; (adr r2, 8007c88 <DMA_CheckFifoParam+0x28>)
 8007c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c86:	bf00      	nop
 8007c88:	08007c99 	.word	0x08007c99
 8007c8c:	08007cab 	.word	0x08007cab
 8007c90:	08007c99 	.word	0x08007c99
 8007c94:	08007d2f 	.word	0x08007d2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d046      	beq.n	8007d32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ca8:	e043      	b.n	8007d32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007cb2:	d140      	bne.n	8007d36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cb8:	e03d      	b.n	8007d36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cc2:	d121      	bne.n	8007d08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d837      	bhi.n	8007d3a <DMA_CheckFifoParam+0xda>
 8007cca:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <DMA_CheckFifoParam+0x70>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007ce7 	.word	0x08007ce7
 8007cd8:	08007ce1 	.word	0x08007ce1
 8007cdc:	08007cf9 	.word	0x08007cf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e030      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d025      	beq.n	8007d3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cf6:	e022      	b.n	8007d3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007d00:	d11f      	bne.n	8007d42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007d06:	e01c      	b.n	8007d42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d903      	bls.n	8007d16 <DMA_CheckFifoParam+0xb6>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d003      	beq.n	8007d1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007d14:	e018      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
      break;
 8007d1a:	e015      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00e      	beq.n	8007d46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d2c:	e00b      	b.n	8007d46 <DMA_CheckFifoParam+0xe6>
      break;
 8007d2e:	bf00      	nop
 8007d30:	e00a      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      break;
 8007d32:	bf00      	nop
 8007d34:	e008      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      break;
 8007d36:	bf00      	nop
 8007d38:	e006      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      break;
 8007d3a:	bf00      	nop
 8007d3c:	e004      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      break;
 8007d3e:	bf00      	nop
 8007d40:	e002      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      break;   
 8007d42:	bf00      	nop
 8007d44:	e000      	b.n	8007d48 <DMA_CheckFifoParam+0xe8>
      break;
 8007d46:	bf00      	nop
    }
  } 
  
  return status; 
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop

08007d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b089      	sub	sp, #36	; 0x24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	61fb      	str	r3, [r7, #28]
 8007d72:	e159      	b.n	8008028 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d74:	2201      	movs	r2, #1
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4013      	ands	r3, r2
 8007d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	f040 8148 	bne.w	8008022 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d005      	beq.n	8007daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d130      	bne.n	8007e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	2203      	movs	r2, #3
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	69ba      	ldr	r2, [r7, #24]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007de0:	2201      	movs	r2, #1
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	43db      	mvns	r3, r3
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4013      	ands	r3, r2
 8007dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	f003 0201 	and.w	r2, r3, #1
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d017      	beq.n	8007e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	2203      	movs	r2, #3
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	689a      	ldr	r2, [r3, #8]
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d123      	bne.n	8007e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	08da      	lsrs	r2, r3, #3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3208      	adds	r2, #8
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	220f      	movs	r2, #15
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	43db      	mvns	r3, r3
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	4013      	ands	r3, r2
 8007e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f003 0307 	and.w	r3, r3, #7
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	fa02 f303 	lsl.w	r3, r2, r3
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	08da      	lsrs	r2, r3, #3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3208      	adds	r2, #8
 8007e96:	69b9      	ldr	r1, [r7, #24]
 8007e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8007eac:	43db      	mvns	r3, r3
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f003 0203 	and.w	r2, r3, #3
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 80a2 	beq.w	8008022 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	4b57      	ldr	r3, [pc, #348]	; (8008040 <HAL_GPIO_Init+0x2e8>)
 8007ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee6:	4a56      	ldr	r2, [pc, #344]	; (8008040 <HAL_GPIO_Init+0x2e8>)
 8007ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eec:	6453      	str	r3, [r2, #68]	; 0x44
 8007eee:	4b54      	ldr	r3, [pc, #336]	; (8008040 <HAL_GPIO_Init+0x2e8>)
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007efa:	4a52      	ldr	r2, [pc, #328]	; (8008044 <HAL_GPIO_Init+0x2ec>)
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	3302      	adds	r3, #2
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	220f      	movs	r2, #15
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43db      	mvns	r3, r3
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a49      	ldr	r2, [pc, #292]	; (8008048 <HAL_GPIO_Init+0x2f0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d019      	beq.n	8007f5a <HAL_GPIO_Init+0x202>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a48      	ldr	r2, [pc, #288]	; (800804c <HAL_GPIO_Init+0x2f4>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_GPIO_Init+0x1fe>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a47      	ldr	r2, [pc, #284]	; (8008050 <HAL_GPIO_Init+0x2f8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00d      	beq.n	8007f52 <HAL_GPIO_Init+0x1fa>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a46      	ldr	r2, [pc, #280]	; (8008054 <HAL_GPIO_Init+0x2fc>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d007      	beq.n	8007f4e <HAL_GPIO_Init+0x1f6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a45      	ldr	r2, [pc, #276]	; (8008058 <HAL_GPIO_Init+0x300>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d101      	bne.n	8007f4a <HAL_GPIO_Init+0x1f2>
 8007f46:	2304      	movs	r3, #4
 8007f48:	e008      	b.n	8007f5c <HAL_GPIO_Init+0x204>
 8007f4a:	2307      	movs	r3, #7
 8007f4c:	e006      	b.n	8007f5c <HAL_GPIO_Init+0x204>
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e004      	b.n	8007f5c <HAL_GPIO_Init+0x204>
 8007f52:	2302      	movs	r3, #2
 8007f54:	e002      	b.n	8007f5c <HAL_GPIO_Init+0x204>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <HAL_GPIO_Init+0x204>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	f002 0203 	and.w	r2, r2, #3
 8007f62:	0092      	lsls	r2, r2, #2
 8007f64:	4093      	lsls	r3, r2
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f6c:	4935      	ldr	r1, [pc, #212]	; (8008044 <HAL_GPIO_Init+0x2ec>)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	089b      	lsrs	r3, r3, #2
 8007f72:	3302      	adds	r3, #2
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f7a:	4b38      	ldr	r3, [pc, #224]	; (800805c <HAL_GPIO_Init+0x304>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	43db      	mvns	r3, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	4013      	ands	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f9e:	4a2f      	ldr	r2, [pc, #188]	; (800805c <HAL_GPIO_Init+0x304>)
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fa4:	4b2d      	ldr	r3, [pc, #180]	; (800805c <HAL_GPIO_Init+0x304>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	43db      	mvns	r3, r3
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d003      	beq.n	8007fc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007fc8:	4a24      	ldr	r2, [pc, #144]	; (800805c <HAL_GPIO_Init+0x304>)
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007fce:	4b23      	ldr	r3, [pc, #140]	; (800805c <HAL_GPIO_Init+0x304>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	43db      	mvns	r3, r3
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ff2:	4a1a      	ldr	r2, [pc, #104]	; (800805c <HAL_GPIO_Init+0x304>)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007ff8:	4b18      	ldr	r3, [pc, #96]	; (800805c <HAL_GPIO_Init+0x304>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	43db      	mvns	r3, r3
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	4013      	ands	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800801c:	4a0f      	ldr	r2, [pc, #60]	; (800805c <HAL_GPIO_Init+0x304>)
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	3301      	adds	r3, #1
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	2b0f      	cmp	r3, #15
 800802c:	f67f aea2 	bls.w	8007d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	3724      	adds	r7, #36	; 0x24
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40023800 	.word	0x40023800
 8008044:	40013800 	.word	0x40013800
 8008048:	40020000 	.word	0x40020000
 800804c:	40020400 	.word	0x40020400
 8008050:	40020800 	.word	0x40020800
 8008054:	40020c00 	.word	0x40020c00
 8008058:	40021000 	.word	0x40021000
 800805c:	40013c00 	.word	0x40013c00

08008060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	807b      	strh	r3, [r7, #2]
 800806c:	4613      	mov	r3, r2
 800806e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008070:	787b      	ldrb	r3, [r7, #1]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800807c:	e003      	b.n	8008086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800807e:	887b      	ldrh	r3, [r7, #2]
 8008080:	041a      	lsls	r2, r3, #16
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	619a      	str	r2, [r3, #24]
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
	...

08008094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800809e:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080a0:	695a      	ldr	r2, [r3, #20]
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d006      	beq.n	80080b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080aa:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080b0:	88fb      	ldrh	r3, [r7, #6]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fd fbec 	bl	8005890 <HAL_GPIO_EXTI_Callback>
  }
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40013c00 	.word	0x40013c00

080080c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e12b      	b.n	800832e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fd fca6 	bl	8005a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2224      	movs	r2, #36	; 0x24
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008128:	f001 fbbc 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 800812c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4a81      	ldr	r2, [pc, #516]	; (8008338 <HAL_I2C_Init+0x274>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d807      	bhi.n	8008148 <HAL_I2C_Init+0x84>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4a80      	ldr	r2, [pc, #512]	; (800833c <HAL_I2C_Init+0x278>)
 800813c:	4293      	cmp	r3, r2
 800813e:	bf94      	ite	ls
 8008140:	2301      	movls	r3, #1
 8008142:	2300      	movhi	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	e006      	b.n	8008156 <HAL_I2C_Init+0x92>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4a7d      	ldr	r2, [pc, #500]	; (8008340 <HAL_I2C_Init+0x27c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	bf94      	ite	ls
 8008150:	2301      	movls	r3, #1
 8008152:	2300      	movhi	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e0e7      	b.n	800832e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a78      	ldr	r2, [pc, #480]	; (8008344 <HAL_I2C_Init+0x280>)
 8008162:	fba2 2303 	umull	r2, r3, r2, r3
 8008166:	0c9b      	lsrs	r3, r3, #18
 8008168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	430a      	orrs	r2, r1
 800817c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6a1b      	ldr	r3, [r3, #32]
 8008184:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a6a      	ldr	r2, [pc, #424]	; (8008338 <HAL_I2C_Init+0x274>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d802      	bhi.n	8008198 <HAL_I2C_Init+0xd4>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	3301      	adds	r3, #1
 8008196:	e009      	b.n	80081ac <HAL_I2C_Init+0xe8>
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800819e:	fb02 f303 	mul.w	r3, r2, r3
 80081a2:	4a69      	ldr	r2, [pc, #420]	; (8008348 <HAL_I2C_Init+0x284>)
 80081a4:	fba2 2303 	umull	r2, r3, r2, r3
 80081a8:	099b      	lsrs	r3, r3, #6
 80081aa:	3301      	adds	r3, #1
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	430b      	orrs	r3, r1
 80081b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	495c      	ldr	r1, [pc, #368]	; (8008338 <HAL_I2C_Init+0x274>)
 80081c8:	428b      	cmp	r3, r1
 80081ca:	d819      	bhi.n	8008200 <HAL_I2C_Init+0x13c>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1e59      	subs	r1, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80081da:	1c59      	adds	r1, r3, #1
 80081dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081e0:	400b      	ands	r3, r1
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00a      	beq.n	80081fc <HAL_I2C_Init+0x138>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	1e59      	subs	r1, r3, #1
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80081f4:	3301      	adds	r3, #1
 80081f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fa:	e051      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 80081fc:	2304      	movs	r3, #4
 80081fe:	e04f      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d111      	bne.n	800822c <HAL_I2C_Init+0x168>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	1e58      	subs	r0, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6859      	ldr	r1, [r3, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	005b      	lsls	r3, r3, #1
 8008214:	440b      	add	r3, r1
 8008216:	fbb0 f3f3 	udiv	r3, r0, r3
 800821a:	3301      	adds	r3, #1
 800821c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e012      	b.n	8008252 <HAL_I2C_Init+0x18e>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	1e58      	subs	r0, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6859      	ldr	r1, [r3, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	440b      	add	r3, r1
 800823a:	0099      	lsls	r1, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008242:	3301      	adds	r3, #1
 8008244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008248:	2b00      	cmp	r3, #0
 800824a:	bf0c      	ite	eq
 800824c:	2301      	moveq	r3, #1
 800824e:	2300      	movne	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d001      	beq.n	800825a <HAL_I2C_Init+0x196>
 8008256:	2301      	movs	r3, #1
 8008258:	e022      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10e      	bne.n	8008280 <HAL_I2C_Init+0x1bc>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1e58      	subs	r0, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	460b      	mov	r3, r1
 800826c:	005b      	lsls	r3, r3, #1
 800826e:	440b      	add	r3, r1
 8008270:	fbb0 f3f3 	udiv	r3, r0, r3
 8008274:	3301      	adds	r3, #1
 8008276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800827a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800827e:	e00f      	b.n	80082a0 <HAL_I2C_Init+0x1dc>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	1e58      	subs	r0, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6859      	ldr	r1, [r3, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	440b      	add	r3, r1
 800828e:	0099      	lsls	r1, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	fbb0 f3f3 	udiv	r3, r0, r3
 8008296:	3301      	adds	r3, #1
 8008298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	6809      	ldr	r1, [r1, #0]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69da      	ldr	r2, [r3, #28]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	430a      	orrs	r2, r1
 80082c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6911      	ldr	r1, [r2, #16]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	68d2      	ldr	r2, [r2, #12]
 80082da:	4311      	orrs	r1, r2
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	430b      	orrs	r3, r1
 80082e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	695a      	ldr	r2, [r3, #20]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f042 0201 	orr.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	000186a0 	.word	0x000186a0
 800833c:	001e847f 	.word	0x001e847f
 8008340:	003d08ff 	.word	0x003d08ff
 8008344:	431bde83 	.word	0x431bde83
 8008348:	10624dd3 	.word	0x10624dd3

0800834c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af02      	add	r7, sp, #8
 8008352:	60f8      	str	r0, [r7, #12]
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	461a      	mov	r2, r3
 800835a:	4603      	mov	r3, r0
 800835c:	817b      	strh	r3, [r7, #10]
 800835e:	460b      	mov	r3, r1
 8008360:	813b      	strh	r3, [r7, #8]
 8008362:	4613      	mov	r3, r2
 8008364:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008366:	f7fd ff65 	bl	8006234 <HAL_GetTick>
 800836a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b20      	cmp	r3, #32
 8008376:	f040 80d9 	bne.w	800852c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2319      	movs	r3, #25
 8008380:	2201      	movs	r2, #1
 8008382:	496d      	ldr	r1, [pc, #436]	; (8008538 <HAL_I2C_Mem_Write+0x1ec>)
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 fc7f 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008390:	2302      	movs	r3, #2
 8008392:	e0cc      	b.n	800852e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_I2C_Mem_Write+0x56>
 800839e:	2302      	movs	r3, #2
 80083a0:	e0c5      	b.n	800852e <HAL_I2C_Mem_Write+0x1e2>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d007      	beq.n	80083c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0201 	orr.w	r2, r2, #1
 80083c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2221      	movs	r2, #33	; 0x21
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2240      	movs	r2, #64	; 0x40
 80083e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a3a      	ldr	r2, [r7, #32]
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80083f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4a4d      	ldr	r2, [pc, #308]	; (800853c <HAL_I2C_Mem_Write+0x1f0>)
 8008408:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800840a:	88f8      	ldrh	r0, [r7, #6]
 800840c:	893a      	ldrh	r2, [r7, #8]
 800840e:	8979      	ldrh	r1, [r7, #10]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	4603      	mov	r3, r0
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 fab6 	bl	800898c <I2C_RequestMemoryWrite>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d052      	beq.n	80084cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e081      	b.n	800852e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 fd00 	bl	8008e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00d      	beq.n	8008456 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	2b04      	cmp	r3, #4
 8008440:	d107      	bne.n	8008452 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008450:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e06b      	b.n	800852e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	f003 0304 	and.w	r3, r3, #4
 8008490:	2b04      	cmp	r3, #4
 8008492:	d11b      	bne.n	80084cc <HAL_I2C_Mem_Write+0x180>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d017      	beq.n	80084cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	781a      	ldrb	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	1c5a      	adds	r2, r3, #1
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b6:	3b01      	subs	r3, #1
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1aa      	bne.n	800842a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fcec 	bl	8008eb6 <I2C_WaitOnBTFFlagUntilTimeout>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00d      	beq.n	8008500 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d107      	bne.n	80084fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e016      	b.n	800852e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800850e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	e000      	b.n	800852e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	00100002 	.word	0x00100002
 800853c:	ffff0000 	.word	0xffff0000

08008540 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08c      	sub	sp, #48	; 0x30
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	4608      	mov	r0, r1
 800854a:	4611      	mov	r1, r2
 800854c:	461a      	mov	r2, r3
 800854e:	4603      	mov	r3, r0
 8008550:	817b      	strh	r3, [r7, #10]
 8008552:	460b      	mov	r3, r1
 8008554:	813b      	strh	r3, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800855a:	f7fd fe6b 	bl	8006234 <HAL_GetTick>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b20      	cmp	r3, #32
 800856a:	f040 8208 	bne.w	800897e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	2319      	movs	r3, #25
 8008574:	2201      	movs	r2, #1
 8008576:	497b      	ldr	r1, [pc, #492]	; (8008764 <HAL_I2C_Mem_Read+0x224>)
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 fb85 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008584:	2302      	movs	r3, #2
 8008586:	e1fb      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858e:	2b01      	cmp	r3, #1
 8008590:	d101      	bne.n	8008596 <HAL_I2C_Mem_Read+0x56>
 8008592:	2302      	movs	r3, #2
 8008594:	e1f4      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d007      	beq.n	80085bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0201 	orr.w	r2, r2, #1
 80085ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2222      	movs	r2, #34	; 0x22
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2240      	movs	r2, #64	; 0x40
 80085d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80085ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4a5b      	ldr	r2, [pc, #364]	; (8008768 <HAL_I2C_Mem_Read+0x228>)
 80085fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085fe:	88f8      	ldrh	r0, [r7, #6]
 8008600:	893a      	ldrh	r2, [r7, #8]
 8008602:	8979      	ldrh	r1, [r7, #10]
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	9301      	str	r3, [sp, #4]
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	4603      	mov	r3, r0
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fa52 	bl	8008ab8 <I2C_RequestMemoryRead>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e1b0      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008622:	2b00      	cmp	r3, #0
 8008624:	d113      	bne.n	800864e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008626:	2300      	movs	r3, #0
 8008628:	623b      	str	r3, [r7, #32]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	623b      	str	r3, [r7, #32]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	623b      	str	r3, [r7, #32]
 800863a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	e184      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008652:	2b01      	cmp	r3, #1
 8008654:	d11b      	bne.n	800868e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008664:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008666:	2300      	movs	r3, #0
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	61fb      	str	r3, [r7, #28]
 800867a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	e164      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008692:	2b02      	cmp	r3, #2
 8008694:	d11b      	bne.n	80086ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086b6:	2300      	movs	r3, #0
 80086b8:	61bb      	str	r3, [r7, #24]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	61bb      	str	r3, [r7, #24]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	e144      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ce:	2300      	movs	r3, #0
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80086e4:	e138      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	f200 80f1 	bhi.w	80088d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d123      	bne.n	8008740 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fc1b 	bl	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e139      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691a      	ldr	r2, [r3, #16]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	b2d2      	uxtb	r2, r2
 8008718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008728:	3b01      	subs	r3, #1
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008734:	b29b      	uxth	r3, r3
 8008736:	3b01      	subs	r3, #1
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800873e:	e10b      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008744:	2b02      	cmp	r3, #2
 8008746:	d14e      	bne.n	80087e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	2200      	movs	r2, #0
 8008750:	4906      	ldr	r1, [pc, #24]	; (800876c <HAL_I2C_Mem_Read+0x22c>)
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 fa98 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e10e      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
 8008762:	bf00      	nop
 8008764:	00100002 	.word	0x00100002
 8008768:	ffff0000 	.word	0xffff0000
 800876c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691a      	ldr	r2, [r3, #16]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879c:	3b01      	subs	r3, #1
 800879e:	b29a      	uxth	r2, r3
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b01      	subs	r3, #1
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087da:	b29b      	uxth	r3, r3
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087e4:	e0b8      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	2200      	movs	r2, #0
 80087ee:	4966      	ldr	r1, [pc, #408]	; (8008988 <HAL_I2C_Mem_Read+0x448>)
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fa49 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e0bf      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800880e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	2200      	movs	r2, #0
 800884a:	494f      	ldr	r1, [pc, #316]	; (8008988 <HAL_I2C_Mem_Read+0x448>)
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f000 fa1b 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e091      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800886a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	b2d2      	uxtb	r2, r2
 8008878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008894:	b29b      	uxth	r3, r3
 8008896:	3b01      	subs	r3, #1
 8008898:	b29a      	uxth	r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	1c5a      	adds	r2, r3, #1
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ba:	3b01      	subs	r3, #1
 80088bc:	b29a      	uxth	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80088d0:	e042      	b.n	8008958 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 fb2e 	bl	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e04c      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	b2d2      	uxtb	r2, r2
 80088f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008902:	3b01      	subs	r3, #1
 8008904:	b29a      	uxth	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29a      	uxth	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	f003 0304 	and.w	r3, r3, #4
 8008922:	2b04      	cmp	r3, #4
 8008924:	d118      	bne.n	8008958 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008942:	3b01      	subs	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894e:	b29b      	uxth	r3, r3
 8008950:	3b01      	subs	r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800895c:	2b00      	cmp	r3, #0
 800895e:	f47f aec2 	bne.w	80086e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	e000      	b.n	8008980 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800897e:	2302      	movs	r3, #2
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3728      	adds	r7, #40	; 0x28
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	00010004 	.word	0x00010004

0800898c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af02      	add	r7, sp, #8
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	461a      	mov	r2, r3
 800899a:	4603      	mov	r3, r0
 800899c:	817b      	strh	r3, [r7, #10]
 800899e:	460b      	mov	r3, r1
 80089a0:	813b      	strh	r3, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	2200      	movs	r2, #0
 80089be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f960 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089dc:	d103      	bne.n	80089e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e05f      	b.n	8008aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80089ea:	897b      	ldrh	r3, [r7, #10]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	461a      	mov	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	6a3a      	ldr	r2, [r7, #32]
 80089fe:	492d      	ldr	r1, [pc, #180]	; (8008ab4 <I2C_RequestMemoryWrite+0x128>)
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f998 	bl	8008d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e04c      	b.n	8008aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a10:	2300      	movs	r3, #0
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	617b      	str	r3, [r7, #20]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a28:	6a39      	ldr	r1, [r7, #32]
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 fa02 	bl	8008e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00d      	beq.n	8008a52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d107      	bne.n	8008a4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e02b      	b.n	8008aaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d105      	bne.n	8008a64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a58:	893b      	ldrh	r3, [r7, #8]
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	611a      	str	r2, [r3, #16]
 8008a62:	e021      	b.n	8008aa8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a64:	893b      	ldrh	r3, [r7, #8]
 8008a66:	0a1b      	lsrs	r3, r3, #8
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a74:	6a39      	ldr	r1, [r7, #32]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 f9dc 	bl	8008e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00d      	beq.n	8008a9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	d107      	bne.n	8008a9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e005      	b.n	8008aaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a9e:	893b      	ldrh	r3, [r7, #8]
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	00010002 	.word	0x00010002

08008ab8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	4608      	mov	r0, r1
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	817b      	strh	r3, [r7, #10]
 8008aca:	460b      	mov	r3, r1
 8008acc:	813b      	strh	r3, [r7, #8]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ae0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	2200      	movs	r2, #0
 8008afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 f8c2 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00d      	beq.n	8008b26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b18:	d103      	bne.n	8008b22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e0aa      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b26:	897b      	ldrh	r3, [r7, #10]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008b34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	6a3a      	ldr	r2, [r7, #32]
 8008b3a:	4952      	ldr	r1, [pc, #328]	; (8008c84 <I2C_RequestMemoryRead+0x1cc>)
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f8fa 	bl	8008d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e097      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	617b      	str	r3, [r7, #20]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b64:	6a39      	ldr	r1, [r7, #32]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 f964 	bl	8008e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00d      	beq.n	8008b8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b76:	2b04      	cmp	r3, #4
 8008b78:	d107      	bne.n	8008b8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e076      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d105      	bne.n	8008ba0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b94:	893b      	ldrh	r3, [r7, #8]
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	611a      	str	r2, [r3, #16]
 8008b9e:	e021      	b.n	8008be4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008ba0:	893b      	ldrh	r3, [r7, #8]
 8008ba2:	0a1b      	lsrs	r3, r3, #8
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb0:	6a39      	ldr	r1, [r7, #32]
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 f93e 	bl	8008e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00d      	beq.n	8008bda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d107      	bne.n	8008bd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e050      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bda:	893b      	ldrh	r3, [r7, #8]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	6a39      	ldr	r1, [r7, #32]
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 f923 	bl	8008e34 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00d      	beq.n	8008c10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d107      	bne.n	8008c0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e035      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f82b 	bl	8008c88 <I2C_WaitOnFlagUntilTimeout>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00d      	beq.n	8008c54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c46:	d103      	bne.n	8008c50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e013      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c54:	897b      	ldrh	r3, [r7, #10]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f043 0301 	orr.w	r3, r3, #1
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	6a3a      	ldr	r2, [r7, #32]
 8008c68:	4906      	ldr	r1, [pc, #24]	; (8008c84 <I2C_RequestMemoryRead+0x1cc>)
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 f863 	bl	8008d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e000      	b.n	8008c7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	00010002 	.word	0x00010002

08008c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c98:	e025      	b.n	8008ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca0:	d021      	beq.n	8008ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ca2:	f7fd fac7 	bl	8006234 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d302      	bcc.n	8008cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d116      	bne.n	8008ce6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd2:	f043 0220 	orr.w	r2, r3, #32
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e023      	b.n	8008d2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d10d      	bne.n	8008d0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	43da      	mvns	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bf0c      	ite	eq
 8008d02:	2301      	moveq	r3, #1
 8008d04:	2300      	movne	r3, #0
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	461a      	mov	r2, r3
 8008d0a:	e00c      	b.n	8008d26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	43da      	mvns	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4013      	ands	r3, r2
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bf0c      	ite	eq
 8008d1e:	2301      	moveq	r3, #1
 8008d20:	2300      	movne	r3, #0
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d0b6      	beq.n	8008c9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60f8      	str	r0, [r7, #12]
 8008d3e:	60b9      	str	r1, [r7, #8]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d44:	e051      	b.n	8008dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d54:	d123      	bne.n	8008d9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	f043 0204 	orr.w	r2, r3, #4
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e046      	b.n	8008e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da4:	d021      	beq.n	8008dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da6:	f7fd fa45 	bl	8006234 <HAL_GetTick>
 8008daa:	4602      	mov	r2, r0
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	1ad3      	subs	r3, r2, r3
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d302      	bcc.n	8008dbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d116      	bne.n	8008dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2220      	movs	r2, #32
 8008dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f043 0220 	orr.w	r2, r3, #32
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e020      	b.n	8008e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	0c1b      	lsrs	r3, r3, #16
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d10c      	bne.n	8008e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	43da      	mvns	r2, r3
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bf14      	ite	ne
 8008e06:	2301      	movne	r3, #1
 8008e08:	2300      	moveq	r3, #0
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	e00b      	b.n	8008e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	43da      	mvns	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf14      	ite	ne
 8008e20:	2301      	movne	r3, #1
 8008e22:	2300      	moveq	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d18d      	bne.n	8008d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e40:	e02d      	b.n	8008e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f000 f8ce 	bl	8008fe4 <I2C_IsAcknowledgeFailed>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e02d      	b.n	8008eae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e58:	d021      	beq.n	8008e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e5a:	f7fd f9eb 	bl	8006234 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d302      	bcc.n	8008e70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d116      	bne.n	8008e9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f043 0220 	orr.w	r2, r3, #32
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e007      	b.n	8008eae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea8:	2b80      	cmp	r3, #128	; 0x80
 8008eaa:	d1ca      	bne.n	8008e42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b084      	sub	sp, #16
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	60f8      	str	r0, [r7, #12]
 8008ebe:	60b9      	str	r1, [r7, #8]
 8008ec0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ec2:	e02d      	b.n	8008f20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008ec4:	68f8      	ldr	r0, [r7, #12]
 8008ec6:	f000 f88d 	bl	8008fe4 <I2C_IsAcknowledgeFailed>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e02d      	b.n	8008f30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d021      	beq.n	8008f20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008edc:	f7fd f9aa 	bl	8006234 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d302      	bcc.n	8008ef2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d116      	bne.n	8008f20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	f043 0220 	orr.w	r2, r3, #32
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e007      	b.n	8008f30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f003 0304 	and.w	r3, r3, #4
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d1ca      	bne.n	8008ec4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f44:	e042      	b.n	8008fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d119      	bne.n	8008f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0210 	mvn.w	r2, #16
 8008f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e029      	b.n	8008fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f88:	f7fd f954 	bl	8006234 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d116      	bne.n	8008fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb8:	f043 0220 	orr.w	r2, r3, #32
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e007      	b.n	8008fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	695b      	ldr	r3, [r3, #20]
 8008fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d1b5      	bne.n	8008f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffa:	d11b      	bne.n	8009034 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009004:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009020:	f043 0204 	orr.w	r2, r3, #4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
	...

08009044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e267      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d075      	beq.n	800914e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009062:	4b88      	ldr	r3, [pc, #544]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f003 030c 	and.w	r3, r3, #12
 800906a:	2b04      	cmp	r3, #4
 800906c:	d00c      	beq.n	8009088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800906e:	4b85      	ldr	r3, [pc, #532]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009076:	2b08      	cmp	r3, #8
 8009078:	d112      	bne.n	80090a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800907a:	4b82      	ldr	r3, [pc, #520]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009086:	d10b      	bne.n	80090a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009088:	4b7e      	ldr	r3, [pc, #504]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d05b      	beq.n	800914c <HAL_RCC_OscConfig+0x108>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d157      	bne.n	800914c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e242      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a8:	d106      	bne.n	80090b8 <HAL_RCC_OscConfig+0x74>
 80090aa:	4b76      	ldr	r3, [pc, #472]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a75      	ldr	r2, [pc, #468]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	e01d      	b.n	80090f4 <HAL_RCC_OscConfig+0xb0>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090c0:	d10c      	bne.n	80090dc <HAL_RCC_OscConfig+0x98>
 80090c2:	4b70      	ldr	r3, [pc, #448]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a6f      	ldr	r2, [pc, #444]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090cc:	6013      	str	r3, [r2, #0]
 80090ce:	4b6d      	ldr	r3, [pc, #436]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a6c      	ldr	r2, [pc, #432]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090d8:	6013      	str	r3, [r2, #0]
 80090da:	e00b      	b.n	80090f4 <HAL_RCC_OscConfig+0xb0>
 80090dc:	4b69      	ldr	r3, [pc, #420]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a68      	ldr	r2, [pc, #416]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	4b66      	ldr	r3, [pc, #408]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a65      	ldr	r2, [pc, #404]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80090ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d013      	beq.n	8009124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090fc:	f7fd f89a 	bl	8006234 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009104:	f7fd f896 	bl	8006234 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b64      	cmp	r3, #100	; 0x64
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e207      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009116:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0f0      	beq.n	8009104 <HAL_RCC_OscConfig+0xc0>
 8009122:	e014      	b.n	800914e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009124:	f7fd f886 	bl	8006234 <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800912a:	e008      	b.n	800913e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800912c:	f7fd f882 	bl	8006234 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b64      	cmp	r3, #100	; 0x64
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e1f3      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800913e:	4b51      	ldr	r3, [pc, #324]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f0      	bne.n	800912c <HAL_RCC_OscConfig+0xe8>
 800914a:	e000      	b.n	800914e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800914c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f003 0302 	and.w	r3, r3, #2
 8009156:	2b00      	cmp	r3, #0
 8009158:	d063      	beq.n	8009222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800915a:	4b4a      	ldr	r3, [pc, #296]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 030c 	and.w	r3, r3, #12
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00b      	beq.n	800917e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009166:	4b47      	ldr	r3, [pc, #284]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800916e:	2b08      	cmp	r3, #8
 8009170:	d11c      	bne.n	80091ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009172:	4b44      	ldr	r3, [pc, #272]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d116      	bne.n	80091ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800917e:	4b41      	ldr	r3, [pc, #260]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <HAL_RCC_OscConfig+0x152>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d001      	beq.n	8009196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e1c7      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009196:	4b3b      	ldr	r3, [pc, #236]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	4937      	ldr	r1, [pc, #220]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80091aa:	e03a      	b.n	8009222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d020      	beq.n	80091f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091b4:	4b34      	ldr	r3, [pc, #208]	; (8009288 <HAL_RCC_OscConfig+0x244>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ba:	f7fd f83b 	bl	8006234 <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091c0:	e008      	b.n	80091d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091c2:	f7fd f837 	bl	8006234 <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d901      	bls.n	80091d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e1a8      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091d4:	4b2b      	ldr	r3, [pc, #172]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0f0      	beq.n	80091c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e0:	4b28      	ldr	r3, [pc, #160]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4925      	ldr	r1, [pc, #148]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	600b      	str	r3, [r1, #0]
 80091f4:	e015      	b.n	8009222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091f6:	4b24      	ldr	r3, [pc, #144]	; (8009288 <HAL_RCC_OscConfig+0x244>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091fc:	f7fd f81a 	bl	8006234 <HAL_GetTick>
 8009200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009202:	e008      	b.n	8009216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009204:	f7fd f816 	bl	8006234 <HAL_GetTick>
 8009208:	4602      	mov	r2, r0
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	1ad3      	subs	r3, r2, r3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d901      	bls.n	8009216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009212:	2303      	movs	r3, #3
 8009214:	e187      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009216:	4b1b      	ldr	r3, [pc, #108]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f0      	bne.n	8009204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d036      	beq.n	800929c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d016      	beq.n	8009264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009236:	4b15      	ldr	r3, [pc, #84]	; (800928c <HAL_RCC_OscConfig+0x248>)
 8009238:	2201      	movs	r2, #1
 800923a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923c:	f7fc fffa 	bl	8006234 <HAL_GetTick>
 8009240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009242:	e008      	b.n	8009256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009244:	f7fc fff6 	bl	8006234 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d901      	bls.n	8009256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e167      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009256:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <HAL_RCC_OscConfig+0x240>)
 8009258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925a:	f003 0302 	and.w	r3, r3, #2
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0f0      	beq.n	8009244 <HAL_RCC_OscConfig+0x200>
 8009262:	e01b      	b.n	800929c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009264:	4b09      	ldr	r3, [pc, #36]	; (800928c <HAL_RCC_OscConfig+0x248>)
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800926a:	f7fc ffe3 	bl	8006234 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009270:	e00e      	b.n	8009290 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009272:	f7fc ffdf 	bl	8006234 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d907      	bls.n	8009290 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e150      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
 8009284:	40023800 	.word	0x40023800
 8009288:	42470000 	.word	0x42470000
 800928c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009290:	4b88      	ldr	r3, [pc, #544]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1ea      	bne.n	8009272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0304 	and.w	r3, r3, #4
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8097 	beq.w	80093d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092aa:	2300      	movs	r3, #0
 80092ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092ae:	4b81      	ldr	r3, [pc, #516]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80092b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10f      	bne.n	80092da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092ba:	2300      	movs	r3, #0
 80092bc:	60bb      	str	r3, [r7, #8]
 80092be:	4b7d      	ldr	r3, [pc, #500]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	4a7c      	ldr	r2, [pc, #496]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80092c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c8:	6413      	str	r3, [r2, #64]	; 0x40
 80092ca:	4b7a      	ldr	r3, [pc, #488]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80092cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d2:	60bb      	str	r3, [r7, #8]
 80092d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092d6:	2301      	movs	r3, #1
 80092d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092da:	4b77      	ldr	r3, [pc, #476]	; (80094b8 <HAL_RCC_OscConfig+0x474>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d118      	bne.n	8009318 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092e6:	4b74      	ldr	r3, [pc, #464]	; (80094b8 <HAL_RCC_OscConfig+0x474>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a73      	ldr	r2, [pc, #460]	; (80094b8 <HAL_RCC_OscConfig+0x474>)
 80092ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092f2:	f7fc ff9f 	bl	8006234 <HAL_GetTick>
 80092f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092f8:	e008      	b.n	800930c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092fa:	f7fc ff9b 	bl	8006234 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	2b02      	cmp	r3, #2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e10c      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800930c:	4b6a      	ldr	r3, [pc, #424]	; (80094b8 <HAL_RCC_OscConfig+0x474>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0f0      	beq.n	80092fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d106      	bne.n	800932e <HAL_RCC_OscConfig+0x2ea>
 8009320:	4b64      	ldr	r3, [pc, #400]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009324:	4a63      	ldr	r2, [pc, #396]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	6713      	str	r3, [r2, #112]	; 0x70
 800932c:	e01c      	b.n	8009368 <HAL_RCC_OscConfig+0x324>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2b05      	cmp	r3, #5
 8009334:	d10c      	bne.n	8009350 <HAL_RCC_OscConfig+0x30c>
 8009336:	4b5f      	ldr	r3, [pc, #380]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933a:	4a5e      	ldr	r2, [pc, #376]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 800933c:	f043 0304 	orr.w	r3, r3, #4
 8009340:	6713      	str	r3, [r2, #112]	; 0x70
 8009342:	4b5c      	ldr	r3, [pc, #368]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009346:	4a5b      	ldr	r2, [pc, #364]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009348:	f043 0301 	orr.w	r3, r3, #1
 800934c:	6713      	str	r3, [r2, #112]	; 0x70
 800934e:	e00b      	b.n	8009368 <HAL_RCC_OscConfig+0x324>
 8009350:	4b58      	ldr	r3, [pc, #352]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009354:	4a57      	ldr	r2, [pc, #348]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009356:	f023 0301 	bic.w	r3, r3, #1
 800935a:	6713      	str	r3, [r2, #112]	; 0x70
 800935c:	4b55      	ldr	r3, [pc, #340]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 800935e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009360:	4a54      	ldr	r2, [pc, #336]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009362:	f023 0304 	bic.w	r3, r3, #4
 8009366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d015      	beq.n	800939c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009370:	f7fc ff60 	bl	8006234 <HAL_GetTick>
 8009374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009376:	e00a      	b.n	800938e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009378:	f7fc ff5c 	bl	8006234 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	f241 3288 	movw	r2, #5000	; 0x1388
 8009386:	4293      	cmp	r3, r2
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e0cb      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800938e:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0ee      	beq.n	8009378 <HAL_RCC_OscConfig+0x334>
 800939a:	e014      	b.n	80093c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800939c:	f7fc ff4a 	bl	8006234 <HAL_GetTick>
 80093a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093a2:	e00a      	b.n	80093ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093a4:	f7fc ff46 	bl	8006234 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e0b5      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093ba:	4b3e      	ldr	r3, [pc, #248]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80093bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1ee      	bne.n	80093a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d105      	bne.n	80093d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093cc:	4b39      	ldr	r3, [pc, #228]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80093ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d0:	4a38      	ldr	r2, [pc, #224]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80093d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80a1 	beq.w	8009524 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093e2:	4b34      	ldr	r3, [pc, #208]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	f003 030c 	and.w	r3, r3, #12
 80093ea:	2b08      	cmp	r3, #8
 80093ec:	d05c      	beq.n	80094a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d141      	bne.n	800947a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093f6:	4b31      	ldr	r3, [pc, #196]	; (80094bc <HAL_RCC_OscConfig+0x478>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093fc:	f7fc ff1a 	bl	8006234 <HAL_GetTick>
 8009400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009402:	e008      	b.n	8009416 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009404:	f7fc ff16 	bl	8006234 <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d901      	bls.n	8009416 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e087      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009416:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1f0      	bne.n	8009404 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	69da      	ldr	r2, [r3, #28]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	019b      	lsls	r3, r3, #6
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009438:	085b      	lsrs	r3, r3, #1
 800943a:	3b01      	subs	r3, #1
 800943c:	041b      	lsls	r3, r3, #16
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	061b      	lsls	r3, r3, #24
 8009446:	491b      	ldr	r1, [pc, #108]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 8009448:	4313      	orrs	r3, r2
 800944a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800944c:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <HAL_RCC_OscConfig+0x478>)
 800944e:	2201      	movs	r2, #1
 8009450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009452:	f7fc feef 	bl	8006234 <HAL_GetTick>
 8009456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009458:	e008      	b.n	800946c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800945a:	f7fc feeb 	bl	8006234 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	2b02      	cmp	r3, #2
 8009466:	d901      	bls.n	800946c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e05c      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800946c:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d0f0      	beq.n	800945a <HAL_RCC_OscConfig+0x416>
 8009478:	e054      	b.n	8009524 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800947a:	4b10      	ldr	r3, [pc, #64]	; (80094bc <HAL_RCC_OscConfig+0x478>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009480:	f7fc fed8 	bl	8006234 <HAL_GetTick>
 8009484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009486:	e008      	b.n	800949a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009488:	f7fc fed4 	bl	8006234 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b02      	cmp	r3, #2
 8009494:	d901      	bls.n	800949a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e045      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800949a:	4b06      	ldr	r3, [pc, #24]	; (80094b4 <HAL_RCC_OscConfig+0x470>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1f0      	bne.n	8009488 <HAL_RCC_OscConfig+0x444>
 80094a6:	e03d      	b.n	8009524 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d107      	bne.n	80094c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e038      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
 80094b4:	40023800 	.word	0x40023800
 80094b8:	40007000 	.word	0x40007000
 80094bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80094c0:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <HAL_RCC_OscConfig+0x4ec>)
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d028      	beq.n	8009520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094d8:	429a      	cmp	r2, r3
 80094da:	d121      	bne.n	8009520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d11a      	bne.n	8009520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094f0:	4013      	ands	r3, r2
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d111      	bne.n	8009520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	3b01      	subs	r3, #1
 800950a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800950c:	429a      	cmp	r2, r3
 800950e:	d107      	bne.n	8009520 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800951c:	429a      	cmp	r2, r3
 800951e:	d001      	beq.n	8009524 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e000      	b.n	8009526 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	40023800 	.word	0x40023800

08009534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e0cc      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009548:	4b68      	ldr	r3, [pc, #416]	; (80096ec <HAL_RCC_ClockConfig+0x1b8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0307 	and.w	r3, r3, #7
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	429a      	cmp	r2, r3
 8009554:	d90c      	bls.n	8009570 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009556:	4b65      	ldr	r3, [pc, #404]	; (80096ec <HAL_RCC_ClockConfig+0x1b8>)
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800955e:	4b63      	ldr	r3, [pc, #396]	; (80096ec <HAL_RCC_ClockConfig+0x1b8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	683a      	ldr	r2, [r7, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d001      	beq.n	8009570 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0b8      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0302 	and.w	r3, r3, #2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d020      	beq.n	80095be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009588:	4b59      	ldr	r3, [pc, #356]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	4a58      	ldr	r2, [pc, #352]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 800958e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009592:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b00      	cmp	r3, #0
 800959e:	d005      	beq.n	80095ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80095a0:	4b53      	ldr	r3, [pc, #332]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	4a52      	ldr	r2, [pc, #328]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80095a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80095aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ac:	4b50      	ldr	r3, [pc, #320]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	494d      	ldr	r1, [pc, #308]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d044      	beq.n	8009654 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d107      	bne.n	80095e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095d2:	4b47      	ldr	r3, [pc, #284]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d119      	bne.n	8009612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e07f      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d003      	beq.n	80095f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d107      	bne.n	8009602 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095f2:	4b3f      	ldr	r3, [pc, #252]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d109      	bne.n	8009612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e06f      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009602:	4b3b      	ldr	r3, [pc, #236]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e067      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009612:	4b37      	ldr	r3, [pc, #220]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f023 0203 	bic.w	r2, r3, #3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	4934      	ldr	r1, [pc, #208]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009620:	4313      	orrs	r3, r2
 8009622:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009624:	f7fc fe06 	bl	8006234 <HAL_GetTick>
 8009628:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800962a:	e00a      	b.n	8009642 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800962c:	f7fc fe02 	bl	8006234 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	f241 3288 	movw	r2, #5000	; 0x1388
 800963a:	4293      	cmp	r3, r2
 800963c:	d901      	bls.n	8009642 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800963e:	2303      	movs	r3, #3
 8009640:	e04f      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009642:	4b2b      	ldr	r3, [pc, #172]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	f003 020c 	and.w	r2, r3, #12
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	429a      	cmp	r2, r3
 8009652:	d1eb      	bne.n	800962c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009654:	4b25      	ldr	r3, [pc, #148]	; (80096ec <HAL_RCC_ClockConfig+0x1b8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	683a      	ldr	r2, [r7, #0]
 800965e:	429a      	cmp	r2, r3
 8009660:	d20c      	bcs.n	800967c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009662:	4b22      	ldr	r3, [pc, #136]	; (80096ec <HAL_RCC_ClockConfig+0x1b8>)
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800966a:	4b20      	ldr	r3, [pc, #128]	; (80096ec <HAL_RCC_ClockConfig+0x1b8>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0307 	and.w	r3, r3, #7
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d001      	beq.n	800967c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	e032      	b.n	80096e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d008      	beq.n	800969a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009688:	4b19      	ldr	r3, [pc, #100]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	4916      	ldr	r1, [pc, #88]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 8009696:	4313      	orrs	r3, r2
 8009698:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096a6:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	490e      	ldr	r1, [pc, #56]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80096ba:	f000 f821 	bl	8009700 <HAL_RCC_GetSysClockFreq>
 80096be:	4602      	mov	r2, r0
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <HAL_RCC_ClockConfig+0x1bc>)
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	091b      	lsrs	r3, r3, #4
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	490a      	ldr	r1, [pc, #40]	; (80096f4 <HAL_RCC_ClockConfig+0x1c0>)
 80096cc:	5ccb      	ldrb	r3, [r1, r3]
 80096ce:	fa22 f303 	lsr.w	r3, r2, r3
 80096d2:	4a09      	ldr	r2, [pc, #36]	; (80096f8 <HAL_RCC_ClockConfig+0x1c4>)
 80096d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <HAL_RCC_ClockConfig+0x1c8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fc fd66 	bl	80061ac <HAL_InitTick>

  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	40023c00 	.word	0x40023c00
 80096f0:	40023800 	.word	0x40023800
 80096f4:	0800e1a8 	.word	0x0800e1a8
 80096f8:	20008670 	.word	0x20008670
 80096fc:	20008674 	.word	0x20008674

08009700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009704:	b090      	sub	sp, #64	; 0x40
 8009706:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	637b      	str	r3, [r7, #52]	; 0x34
 800970c:	2300      	movs	r3, #0
 800970e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009710:	2300      	movs	r3, #0
 8009712:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009718:	4b59      	ldr	r3, [pc, #356]	; (8009880 <HAL_RCC_GetSysClockFreq+0x180>)
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f003 030c 	and.w	r3, r3, #12
 8009720:	2b08      	cmp	r3, #8
 8009722:	d00d      	beq.n	8009740 <HAL_RCC_GetSysClockFreq+0x40>
 8009724:	2b08      	cmp	r3, #8
 8009726:	f200 80a1 	bhi.w	800986c <HAL_RCC_GetSysClockFreq+0x16c>
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_RCC_GetSysClockFreq+0x34>
 800972e:	2b04      	cmp	r3, #4
 8009730:	d003      	beq.n	800973a <HAL_RCC_GetSysClockFreq+0x3a>
 8009732:	e09b      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009734:	4b53      	ldr	r3, [pc, #332]	; (8009884 <HAL_RCC_GetSysClockFreq+0x184>)
 8009736:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8009738:	e09b      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800973a:	4b53      	ldr	r3, [pc, #332]	; (8009888 <HAL_RCC_GetSysClockFreq+0x188>)
 800973c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800973e:	e098      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009740:	4b4f      	ldr	r3, [pc, #316]	; (8009880 <HAL_RCC_GetSysClockFreq+0x180>)
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800974a:	4b4d      	ldr	r3, [pc, #308]	; (8009880 <HAL_RCC_GetSysClockFreq+0x180>)
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d028      	beq.n	80097a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009756:	4b4a      	ldr	r3, [pc, #296]	; (8009880 <HAL_RCC_GetSysClockFreq+0x180>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	099b      	lsrs	r3, r3, #6
 800975c:	2200      	movs	r2, #0
 800975e:	623b      	str	r3, [r7, #32]
 8009760:	627a      	str	r2, [r7, #36]	; 0x24
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009768:	2100      	movs	r1, #0
 800976a:	4b47      	ldr	r3, [pc, #284]	; (8009888 <HAL_RCC_GetSysClockFreq+0x188>)
 800976c:	fb03 f201 	mul.w	r2, r3, r1
 8009770:	2300      	movs	r3, #0
 8009772:	fb00 f303 	mul.w	r3, r0, r3
 8009776:	4413      	add	r3, r2
 8009778:	4a43      	ldr	r2, [pc, #268]	; (8009888 <HAL_RCC_GetSysClockFreq+0x188>)
 800977a:	fba0 1202 	umull	r1, r2, r0, r2
 800977e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009780:	460a      	mov	r2, r1
 8009782:	62ba      	str	r2, [r7, #40]	; 0x28
 8009784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009786:	4413      	add	r3, r2
 8009788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800978a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978c:	2200      	movs	r2, #0
 800978e:	61bb      	str	r3, [r7, #24]
 8009790:	61fa      	str	r2, [r7, #28]
 8009792:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009796:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800979a:	f7f7 f87b 	bl	8000894 <__aeabi_uldivmod>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4613      	mov	r3, r2
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097a6:	e053      	b.n	8009850 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097a8:	4b35      	ldr	r3, [pc, #212]	; (8009880 <HAL_RCC_GetSysClockFreq+0x180>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	099b      	lsrs	r3, r3, #6
 80097ae:	2200      	movs	r2, #0
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	617a      	str	r2, [r7, #20]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80097ba:	f04f 0b00 	mov.w	fp, #0
 80097be:	4652      	mov	r2, sl
 80097c0:	465b      	mov	r3, fp
 80097c2:	f04f 0000 	mov.w	r0, #0
 80097c6:	f04f 0100 	mov.w	r1, #0
 80097ca:	0159      	lsls	r1, r3, #5
 80097cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097d0:	0150      	lsls	r0, r2, #5
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	ebb2 080a 	subs.w	r8, r2, sl
 80097da:	eb63 090b 	sbc.w	r9, r3, fp
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80097ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80097ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80097f2:	ebb2 0408 	subs.w	r4, r2, r8
 80097f6:	eb63 0509 	sbc.w	r5, r3, r9
 80097fa:	f04f 0200 	mov.w	r2, #0
 80097fe:	f04f 0300 	mov.w	r3, #0
 8009802:	00eb      	lsls	r3, r5, #3
 8009804:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009808:	00e2      	lsls	r2, r4, #3
 800980a:	4614      	mov	r4, r2
 800980c:	461d      	mov	r5, r3
 800980e:	eb14 030a 	adds.w	r3, r4, sl
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	eb45 030b 	adc.w	r3, r5, fp
 8009818:	607b      	str	r3, [r7, #4]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009826:	4629      	mov	r1, r5
 8009828:	028b      	lsls	r3, r1, #10
 800982a:	4621      	mov	r1, r4
 800982c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009830:	4621      	mov	r1, r4
 8009832:	028a      	lsls	r2, r1, #10
 8009834:	4610      	mov	r0, r2
 8009836:	4619      	mov	r1, r3
 8009838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800983a:	2200      	movs	r2, #0
 800983c:	60bb      	str	r3, [r7, #8]
 800983e:	60fa      	str	r2, [r7, #12]
 8009840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009844:	f7f7 f826 	bl	8000894 <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4613      	mov	r3, r2
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <HAL_RCC_GetSysClockFreq+0x180>)
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	0c1b      	lsrs	r3, r3, #16
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	3301      	adds	r3, #1
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009864:	fbb2 f3f3 	udiv	r3, r2, r3
 8009868:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800986a:	e002      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <HAL_RCC_GetSysClockFreq+0x184>)
 800986e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009874:	4618      	mov	r0, r3
 8009876:	3740      	adds	r7, #64	; 0x40
 8009878:	46bd      	mov	sp, r7
 800987a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800987e:	bf00      	nop
 8009880:	40023800 	.word	0x40023800
 8009884:	00f42400 	.word	0x00f42400
 8009888:	017d7840 	.word	0x017d7840

0800988c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009890:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009892:	681b      	ldr	r3, [r3, #0]
}
 8009894:	4618      	mov	r0, r3
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20008670 	.word	0x20008670

080098a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098a8:	f7ff fff0 	bl	800988c <HAL_RCC_GetHCLKFreq>
 80098ac:	4602      	mov	r2, r0
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	0a9b      	lsrs	r3, r3, #10
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	4903      	ldr	r1, [pc, #12]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098ba:	5ccb      	ldrb	r3, [r1, r3]
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40023800 	.word	0x40023800
 80098c8:	0800e1b8 	.word	0x0800e1b8

080098cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098d0:	f7ff ffdc 	bl	800988c <HAL_RCC_GetHCLKFreq>
 80098d4:	4602      	mov	r2, r0
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	0b5b      	lsrs	r3, r3, #13
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	4903      	ldr	r1, [pc, #12]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e2:	5ccb      	ldrb	r3, [r1, r3]
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	40023800 	.word	0x40023800
 80098f0:	0800e1b8 	.word	0x0800e1b8

080098f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e07b      	b.n	80099fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	d108      	bne.n	8009920 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009916:	d009      	beq.n	800992c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	61da      	str	r2, [r3, #28]
 800991e:	e005      	b.n	800992c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d106      	bne.n	800994c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f7fc f8d2 	bl	8005af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009962:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	695b      	ldr	r3, [r3, #20]
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	431a      	orrs	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800999c:	431a      	orrs	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b0:	ea42 0103 	orr.w	r1, r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	0c1b      	lsrs	r3, r3, #16
 80099ca:	f003 0104 	and.w	r1, r3, #4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d2:	f003 0210 	and.w	r2, r3, #16
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	69da      	ldr	r2, [r3, #28]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	603b      	str	r3, [r7, #0]
 8009a12:	4613      	mov	r3, r2
 8009a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d101      	bne.n	8009a28 <HAL_SPI_Transmit+0x22>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e126      	b.n	8009c76 <HAL_SPI_Transmit+0x270>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a30:	f7fc fc00 	bl	8006234 <HAL_GetTick>
 8009a34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d002      	beq.n	8009a4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009a46:	2302      	movs	r3, #2
 8009a48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a4a:	e10b      	b.n	8009c64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <HAL_SPI_Transmit+0x52>
 8009a52:	88fb      	ldrh	r3, [r7, #6]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d102      	bne.n	8009a5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009a5c:	e102      	b.n	8009c64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2203      	movs	r2, #3
 8009a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	88fa      	ldrh	r2, [r7, #6]
 8009a76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	88fa      	ldrh	r2, [r7, #6]
 8009a7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2200      	movs	r2, #0
 8009a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa4:	d10f      	bne.n	8009ac6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ab4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ac4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b40      	cmp	r3, #64	; 0x40
 8009ad2:	d007      	beq.n	8009ae4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aec:	d14b      	bne.n	8009b86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <HAL_SPI_Transmit+0xf6>
 8009af6:	8afb      	ldrh	r3, [r7, #22]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d13e      	bne.n	8009b7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	881a      	ldrh	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b0c:	1c9a      	adds	r2, r3, #2
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009b20:	e02b      	b.n	8009b7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d112      	bne.n	8009b56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b34:	881a      	ldrh	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b40:	1c9a      	adds	r2, r3, #2
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	86da      	strh	r2, [r3, #54]	; 0x36
 8009b54:	e011      	b.n	8009b7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b56:	f7fc fb6d 	bl	8006234 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d803      	bhi.n	8009b6e <HAL_SPI_Transmit+0x168>
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d102      	bne.n	8009b74 <HAL_SPI_Transmit+0x16e>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d102      	bne.n	8009b7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b78:	e074      	b.n	8009c64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1ce      	bne.n	8009b22 <HAL_SPI_Transmit+0x11c>
 8009b84:	e04c      	b.n	8009c20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d002      	beq.n	8009b94 <HAL_SPI_Transmit+0x18e>
 8009b8e:	8afb      	ldrh	r3, [r7, #22]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d140      	bne.n	8009c16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	7812      	ldrb	r2, [r2, #0]
 8009ba0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009bba:	e02c      	b.n	8009c16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	d113      	bne.n	8009bf2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	330c      	adds	r3, #12
 8009bd4:	7812      	ldrb	r2, [r2, #0]
 8009bd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	3b01      	subs	r3, #1
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	86da      	strh	r2, [r3, #54]	; 0x36
 8009bf0:	e011      	b.n	8009c16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bf2:	f7fc fb1f 	bl	8006234 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d803      	bhi.n	8009c0a <HAL_SPI_Transmit+0x204>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c08:	d102      	bne.n	8009c10 <HAL_SPI_Transmit+0x20a>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d102      	bne.n	8009c16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c14:	e026      	b.n	8009c64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1cd      	bne.n	8009bbc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 feef 	bl	800aa08 <SPI_EndRxTxTransaction>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2220      	movs	r2, #32
 8009c34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d10a      	bne.n	8009c54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c3e:	2300      	movs	r3, #0
 8009c40:	613b      	str	r3, [r7, #16]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	613b      	str	r3, [r7, #16]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	77fb      	strb	r3, [r7, #31]
 8009c60:	e000      	b.n	8009c64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009c62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c74:	7ffb      	ldrb	r3, [r7, #31]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3720      	adds	r7, #32
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b088      	sub	sp, #32
 8009c82:	af02      	add	r7, sp, #8
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	603b      	str	r3, [r7, #0]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c9a:	d112      	bne.n	8009cc2 <HAL_SPI_Receive+0x44>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10e      	bne.n	8009cc2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2204      	movs	r2, #4
 8009ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009cac:	88fa      	ldrh	r2, [r7, #6]
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	68ba      	ldr	r2, [r7, #8]
 8009cb6:	68b9      	ldr	r1, [r7, #8]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f8f1 	bl	8009ea0 <HAL_SPI_TransmitReceive>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	e0ea      	b.n	8009e98 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d101      	bne.n	8009cd0 <HAL_SPI_Receive+0x52>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e0e3      	b.n	8009e98 <HAL_SPI_Receive+0x21a>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cd8:	f7fc faac 	bl	8006234 <HAL_GetTick>
 8009cdc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d002      	beq.n	8009cf0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009cea:	2302      	movs	r3, #2
 8009cec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009cee:	e0ca      	b.n	8009e86 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d002      	beq.n	8009cfc <HAL_SPI_Receive+0x7e>
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009d00:	e0c1      	b.n	8009e86 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2204      	movs	r2, #4
 8009d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	88fa      	ldrh	r2, [r7, #6]
 8009d1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	88fa      	ldrh	r2, [r7, #6]
 8009d20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d48:	d10f      	bne.n	8009d6a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d74:	2b40      	cmp	r3, #64	; 0x40
 8009d76:	d007      	beq.n	8009d88 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d162      	bne.n	8009e56 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009d90:	e02e      	b.n	8009df0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d115      	bne.n	8009dcc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f103 020c 	add.w	r2, r3, #12
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	7812      	ldrb	r2, [r2, #0]
 8009dae:	b2d2      	uxtb	r2, r2
 8009db0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009dca:	e011      	b.n	8009df0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009dcc:	f7fc fa32 	bl	8006234 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	683a      	ldr	r2, [r7, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d803      	bhi.n	8009de4 <HAL_SPI_Receive+0x166>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d102      	bne.n	8009dea <HAL_SPI_Receive+0x16c>
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d102      	bne.n	8009df0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009dee:	e04a      	b.n	8009e86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1cb      	bne.n	8009d92 <HAL_SPI_Receive+0x114>
 8009dfa:	e031      	b.n	8009e60 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d113      	bne.n	8009e32 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68da      	ldr	r2, [r3, #12]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e14:	b292      	uxth	r2, r2
 8009e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1c:	1c9a      	adds	r2, r3, #2
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009e30:	e011      	b.n	8009e56 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e32:	f7fc f9ff 	bl	8006234 <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d803      	bhi.n	8009e4a <HAL_SPI_Receive+0x1cc>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d102      	bne.n	8009e50 <HAL_SPI_Receive+0x1d2>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d102      	bne.n	8009e56 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009e54:	e017      	b.n	8009e86 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1cd      	bne.n	8009dfc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fd69 	bl	800a93c <SPI_EndRxTransaction>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2220      	movs	r2, #32
 8009e74:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	75fb      	strb	r3, [r7, #23]
 8009e82:	e000      	b.n	8009e86 <HAL_SPI_Receive+0x208>
  }

error :
 8009e84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08c      	sub	sp, #48	; 0x30
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x26>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e18a      	b.n	800a1dc <HAL_SPI_TransmitReceive+0x33c>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ece:	f7fc f9b1 	bl	8006234 <HAL_GetTick>
 8009ed2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ee4:	887b      	ldrh	r3, [r7, #2]
 8009ee6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d00f      	beq.n	8009f10 <HAL_SPI_TransmitReceive+0x70>
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ef6:	d107      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <HAL_SPI_TransmitReceive+0x68>
 8009f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d003      	beq.n	8009f10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f0e:	e15b      	b.n	800a1c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d005      	beq.n	8009f22 <HAL_SPI_TransmitReceive+0x82>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d002      	beq.n	8009f22 <HAL_SPI_TransmitReceive+0x82>
 8009f1c:	887b      	ldrh	r3, [r7, #2]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d103      	bne.n	8009f2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f28:	e14e      	b.n	800a1c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d003      	beq.n	8009f3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2205      	movs	r2, #5
 8009f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	887a      	ldrh	r2, [r7, #2]
 8009f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	887a      	ldrh	r2, [r7, #2]
 8009f54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	887a      	ldrh	r2, [r7, #2]
 8009f60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	887a      	ldrh	r2, [r7, #2]
 8009f66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f7e:	2b40      	cmp	r3, #64	; 0x40
 8009f80:	d007      	beq.n	8009f92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f9a:	d178      	bne.n	800a08e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <HAL_SPI_TransmitReceive+0x10a>
 8009fa4:	8b7b      	ldrh	r3, [r7, #26]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d166      	bne.n	800a078 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fae:	881a      	ldrh	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	1c9a      	adds	r2, r3, #2
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fce:	e053      	b.n	800a078 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	d11b      	bne.n	800a016 <HAL_SPI_TransmitReceive+0x176>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d016      	beq.n	800a016 <HAL_SPI_TransmitReceive+0x176>
 8009fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d113      	bne.n	800a016 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff2:	881a      	ldrh	r2, [r3, #0]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffe:	1c9a      	adds	r2, r3, #2
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a008:	b29b      	uxth	r3, r3
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b01      	cmp	r3, #1
 800a022:	d119      	bne.n	800a058 <HAL_SPI_TransmitReceive+0x1b8>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a028:	b29b      	uxth	r3, r3
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d014      	beq.n	800a058 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	b292      	uxth	r2, r2
 800a03a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	1c9a      	adds	r2, r3, #2
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	3b01      	subs	r3, #1
 800a04e:	b29a      	uxth	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a054:	2301      	movs	r3, #1
 800a056:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a058:	f7fc f8ec 	bl	8006234 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a064:	429a      	cmp	r2, r3
 800a066:	d807      	bhi.n	800a078 <HAL_SPI_TransmitReceive+0x1d8>
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06e:	d003      	beq.n	800a078 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a076:	e0a7      	b.n	800a1c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1a6      	bne.n	8009fd0 <HAL_SPI_TransmitReceive+0x130>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a086:	b29b      	uxth	r3, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1a1      	bne.n	8009fd0 <HAL_SPI_TransmitReceive+0x130>
 800a08c:	e07c      	b.n	800a188 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <HAL_SPI_TransmitReceive+0x1fc>
 800a096:	8b7b      	ldrh	r3, [r7, #26]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d16b      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	330c      	adds	r3, #12
 800a0a6:	7812      	ldrb	r2, [r2, #0]
 800a0a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0c2:	e057      	b.n	800a174 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d11c      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x26c>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d017      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x26c>
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d114      	bne.n	800a10c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	330c      	adds	r3, #12
 800a0ec:	7812      	ldrb	r2, [r2, #0]
 800a0ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0f4:	1c5a      	adds	r2, r3, #1
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	3b01      	subs	r3, #1
 800a102:	b29a      	uxth	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	2b01      	cmp	r3, #1
 800a118:	d119      	bne.n	800a14e <HAL_SPI_TransmitReceive+0x2ae>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a11e:	b29b      	uxth	r3, r3
 800a120:	2b00      	cmp	r3, #0
 800a122:	d014      	beq.n	800a14e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12e:	b2d2      	uxtb	r2, r2
 800a130:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	1c5a      	adds	r2, r3, #1
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a140:	b29b      	uxth	r3, r3
 800a142:	3b01      	subs	r3, #1
 800a144:	b29a      	uxth	r2, r3
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a14a:	2301      	movs	r3, #1
 800a14c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a14e:	f7fc f871 	bl	8006234 <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d803      	bhi.n	800a166 <HAL_SPI_TransmitReceive+0x2c6>
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a164:	d102      	bne.n	800a16c <HAL_SPI_TransmitReceive+0x2cc>
 800a166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d103      	bne.n	800a174 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a16c:	2303      	movs	r3, #3
 800a16e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a172:	e029      	b.n	800a1c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a178:	b29b      	uxth	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1a2      	bne.n	800a0c4 <HAL_SPI_TransmitReceive+0x224>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a182:	b29b      	uxth	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	d19d      	bne.n	800a0c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fc3b 	bl	800aa08 <SPI_EndRxTxTransaction>
 800a192:	4603      	mov	r3, r0
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a1a4:	e010      	b.n	800a1c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10b      	bne.n	800a1c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	e000      	b.n	800a1c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a1c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a1d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3730      	adds	r7, #48	; 0x30
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <HAL_SPI_Transmit_DMA+0x20>
 800a200:	2302      	movs	r3, #2
 800a202:	e09b      	b.n	800a33c <HAL_SPI_Transmit_DMA+0x158>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b01      	cmp	r3, #1
 800a216:	d002      	beq.n	800a21e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a218:	2302      	movs	r3, #2
 800a21a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a21c:	e089      	b.n	800a332 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <HAL_SPI_Transmit_DMA+0x46>
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a22e:	e080      	b.n	800a332 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2203      	movs	r2, #3
 800a234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	88fa      	ldrh	r2, [r7, #6]
 800a24e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a276:	d10f      	bne.n	800a298 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a286:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a296:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a29c:	4a29      	ldr	r2, [pc, #164]	; (800a344 <HAL_SPI_Transmit_DMA+0x160>)
 800a29e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a4:	4a28      	ldr	r2, [pc, #160]	; (800a348 <HAL_SPI_Transmit_DMA+0x164>)
 800a2a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ac:	4a27      	ldr	r2, [pc, #156]	; (800a34c <HAL_SPI_Transmit_DMA+0x168>)
 800a2ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a2d0:	f7fd fa10 	bl	80076f4 <HAL_DMA_Start_IT>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00c      	beq.n	800a2f4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2de:	f043 0210 	orr.w	r2, r3, #16
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a2f2:	e01e      	b.n	800a332 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2fe:	2b40      	cmp	r3, #64	; 0x40
 800a300:	d007      	beq.n	800a312 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a310:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f042 0220 	orr.w	r2, r2, #32
 800a320:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0202 	orr.w	r2, r2, #2
 800a330:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3718      	adds	r7, #24
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	0800a799 	.word	0x0800a799
 800a348:	0800a5b9 	.word	0x0800a5b9
 800a34c:	0800a7ed 	.word	0x0800a7ed

0800a350 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a35e:	2300      	movs	r3, #0
 800a360:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d101      	bne.n	800a370 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a36c:	2302      	movs	r3, #2
 800a36e:	e0e3      	b.n	800a538 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a37e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a386:	7dbb      	ldrb	r3, [r7, #22]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d00d      	beq.n	800a3a8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a392:	d106      	bne.n	800a3a2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d102      	bne.n	800a3a2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800a39c:	7dbb      	ldrb	r3, [r7, #22]
 800a39e:	2b04      	cmp	r3, #4
 800a3a0:	d002      	beq.n	800a3a8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3a6:	e0c2      	b.n	800a52e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d005      	beq.n	800a3ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a3b4:	887b      	ldrh	r3, [r7, #2]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d102      	bne.n	800a3c0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3be:	e0b6      	b.n	800a52e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d003      	beq.n	800a3d4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2205      	movs	r2, #5
 800a3d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	887a      	ldrh	r2, [r7, #2]
 800a3e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	887a      	ldrh	r2, [r7, #2]
 800a3ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	887a      	ldrh	r2, [r7, #2]
 800a3f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	887a      	ldrh	r2, [r7, #2]
 800a3fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b04      	cmp	r3, #4
 800a414:	d108      	bne.n	800a428 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a41a:	4a49      	ldr	r2, [pc, #292]	; (800a540 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800a41c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a422:	4a48      	ldr	r2, [pc, #288]	; (800a544 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800a424:	63da      	str	r2, [r3, #60]	; 0x3c
 800a426:	e007      	b.n	800a438 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42c:	4a46      	ldr	r2, [pc, #280]	; (800a548 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800a42e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a434:	4a45      	ldr	r2, [pc, #276]	; (800a54c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800a436:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43c:	4a44      	ldr	r2, [pc, #272]	; (800a550 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800a43e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a444:	2200      	movs	r2, #0
 800a446:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	330c      	adds	r3, #12
 800a452:	4619      	mov	r1, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a458:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a45e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a460:	f7fd f948 	bl	80076f4 <HAL_DMA_Start_IT>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00c      	beq.n	800a484 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46e:	f043 0210 	orr.w	r2, r3, #16
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a482:	e054      	b.n	800a52e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f042 0201 	orr.w	r2, r2, #1
 800a492:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a498:	2200      	movs	r2, #0
 800a49a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	4619      	mov	r1, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	330c      	adds	r3, #12
 800a4c4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a4cc:	f7fd f912 	bl	80076f4 <HAL_DMA_Start_IT>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4da:	f043 0210 	orr.w	r2, r3, #16
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800a4ee:	e01e      	b.n	800a52e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d007      	beq.n	800a50e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a50c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f042 0220 	orr.w	r2, r2, #32
 800a51c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f042 0202 	orr.w	r2, r2, #2
 800a52c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a536:	7dfb      	ldrb	r3, [r7, #23]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	0800a7b5 	.word	0x0800a7b5
 800a544:	0800a661 	.word	0x0800a661
 800a548:	0800a7d1 	.word	0x0800a7d1
 800a54c:	0800a709 	.word	0x0800a709
 800a550:	0800a7ed 	.word	0x0800a7ed

0800a554 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5c4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5c6:	f7fb fe35 	bl	8006234 <HAL_GetTick>
 800a5ca:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5da:	d03b      	beq.n	800a654 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f022 0220 	bic.w	r2, r2, #32
 800a5ea:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0202 	bic.w	r2, r2, #2
 800a5fa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	2164      	movs	r1, #100	; 0x64
 800a600:	6978      	ldr	r0, [r7, #20]
 800a602:	f000 fa01 	bl	800aa08 <SPI_EndRxTxTransaction>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a610:	f043 0220 	orr.w	r2, r3, #32
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10a      	bne.n	800a636 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	2200      	movs	r2, #0
 800a63a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d003      	beq.n	800a654 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a64c:	6978      	ldr	r0, [r7, #20]
 800a64e:	f7ff ffa9 	bl	800a5a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a652:	e002      	b.n	800a65a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a654:	6978      	ldr	r0, [r7, #20]
 800a656:	f7fb f911 	bl	800587c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a65a:	3718      	adds	r7, #24
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a66e:	f7fb fde1 	bl	8006234 <HAL_GetTick>
 800a672:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a682:	d03b      	beq.n	800a6fc <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f022 0220 	bic.w	r2, r2, #32
 800a692:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10d      	bne.n	800a6b8 <SPI_DMAReceiveCplt+0x58>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6a4:	d108      	bne.n	800a6b8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0203 	bic.w	r2, r2, #3
 800a6b4:	605a      	str	r2, [r3, #4]
 800a6b6:	e007      	b.n	800a6c8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685a      	ldr	r2, [r3, #4]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0201 	bic.w	r2, r2, #1
 800a6c6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	2164      	movs	r1, #100	; 0x64
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f000 f935 	bl	800a93c <SPI_EndRxTransaction>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d003      	beq.n	800a6fc <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f7ff ff55 	bl	800a5a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a6fa:	e002      	b.n	800a702 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff ff29 	bl	800a554 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a716:	f7fb fd8d 	bl	8006234 <HAL_GetTick>
 800a71a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a72a:	d02f      	beq.n	800a78c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0220 	bic.w	r2, r2, #32
 800a73a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	2164      	movs	r1, #100	; 0x64
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f961 	bl	800aa08 <SPI_EndRxTxTransaction>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d005      	beq.n	800a758 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a750:	f043 0220 	orr.w	r2, r3, #32
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f022 0203 	bic.w	r2, r2, #3
 800a766:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff ff0d 	bl	800a5a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a78a:	e002      	b.n	800a792 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f7fb f84f 	bl	8005830 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a792:	3710      	adds	r7, #16
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f7ff fede 	bl	800a568 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7ac:	bf00      	nop
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f7ff feda 	bl	800a57c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7c8:	bf00      	nop
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f7ff fed6 	bl	800a590 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7e4:	bf00      	nop
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0203 	bic.w	r2, r2, #3
 800a808:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80e:	f043 0210 	orr.w	r2, r3, #16
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a81e:	68f8      	ldr	r0, [r7, #12]
 800a820:	f7ff fec0 	bl	800a5a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a824:	bf00      	nop
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	4613      	mov	r3, r2
 800a83a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a83c:	f7fb fcfa 	bl	8006234 <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	4413      	add	r3, r2
 800a84a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a84c:	f7fb fcf2 	bl	8006234 <HAL_GetTick>
 800a850:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a852:	4b39      	ldr	r3, [pc, #228]	; (800a938 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	015b      	lsls	r3, r3, #5
 800a858:	0d1b      	lsrs	r3, r3, #20
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	fb02 f303 	mul.w	r3, r2, r3
 800a860:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a862:	e054      	b.n	800a90e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d050      	beq.n	800a90e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a86c:	f7fb fce2 	bl	8006234 <HAL_GetTick>
 800a870:	4602      	mov	r2, r0
 800a872:	69bb      	ldr	r3, [r7, #24]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d902      	bls.n	800a882 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d13d      	bne.n	800a8fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a89a:	d111      	bne.n	800a8c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a4:	d004      	beq.n	800a8b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ae:	d107      	bne.n	800a8c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8c8:	d10f      	bne.n	800a8ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8d8:	601a      	str	r2, [r3, #0]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e017      	b.n	800a92e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d101      	bne.n	800a908 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	3b01      	subs	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	689a      	ldr	r2, [r3, #8]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	4013      	ands	r3, r2
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	bf0c      	ite	eq
 800a91e:	2301      	moveq	r3, #1
 800a920:	2300      	movne	r3, #0
 800a922:	b2db      	uxtb	r3, r3
 800a924:	461a      	mov	r2, r3
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d19b      	bne.n	800a864 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20008670 	.word	0x20008670

0800a93c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af02      	add	r7, sp, #8
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a950:	d111      	bne.n	800a976 <SPI_EndRxTransaction+0x3a>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a95a:	d004      	beq.n	800a966 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a964:	d107      	bne.n	800a976 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a974:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a97e:	d12a      	bne.n	800a9d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a988:	d012      	beq.n	800a9b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2200      	movs	r2, #0
 800a992:	2180      	movs	r1, #128	; 0x80
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7ff ff49 	bl	800a82c <SPI_WaitFlagStateUntilTimeout>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d02d      	beq.n	800a9fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a4:	f043 0220 	orr.w	r2, r3, #32
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e026      	b.n	800a9fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff ff36 	bl	800a82c <SPI_WaitFlagStateUntilTimeout>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d01a      	beq.n	800a9fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ca:	f043 0220 	orr.w	r2, r3, #32
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e013      	b.n	800a9fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	9300      	str	r3, [sp, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	2101      	movs	r1, #1
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff ff23 	bl	800a82c <SPI_WaitFlagStateUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d007      	beq.n	800a9fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f0:	f043 0220 	orr.w	r2, r3, #32
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e000      	b.n	800a9fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa14:	4b1b      	ldr	r3, [pc, #108]	; (800aa84 <SPI_EndRxTxTransaction+0x7c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a1b      	ldr	r2, [pc, #108]	; (800aa88 <SPI_EndRxTxTransaction+0x80>)
 800aa1a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1e:	0d5b      	lsrs	r3, r3, #21
 800aa20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa24:	fb02 f303 	mul.w	r3, r2, r3
 800aa28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa32:	d112      	bne.n	800aa5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2180      	movs	r1, #128	; 0x80
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f7ff fef4 	bl	800a82c <SPI_WaitFlagStateUntilTimeout>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d016      	beq.n	800aa78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4e:	f043 0220 	orr.w	r2, r3, #32
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e00f      	b.n	800aa7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00a      	beq.n	800aa76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa70:	2b80      	cmp	r3, #128	; 0x80
 800aa72:	d0f2      	beq.n	800aa5a <SPI_EndRxTxTransaction+0x52>
 800aa74:	e000      	b.n	800aa78 <SPI_EndRxTxTransaction+0x70>
        break;
 800aa76:	bf00      	nop
  }

  return HAL_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20008670 	.word	0x20008670
 800aa88:	165e9f81 	.word	0x165e9f81

0800aa8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e041      	b.n	800ab22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d106      	bne.n	800aab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7fb f9ac 	bl	8005e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3304      	adds	r3, #4
 800aac8:	4619      	mov	r1, r3
 800aaca:	4610      	mov	r0, r2
 800aacc:	f000 fe08 	bl	800b6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
	...

0800ab2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d001      	beq.n	800ab44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e03c      	b.n	800abbe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1e      	ldr	r2, [pc, #120]	; (800abcc <HAL_TIM_Base_Start+0xa0>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d018      	beq.n	800ab88 <HAL_TIM_Base_Start+0x5c>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab5e:	d013      	beq.n	800ab88 <HAL_TIM_Base_Start+0x5c>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a1a      	ldr	r2, [pc, #104]	; (800abd0 <HAL_TIM_Base_Start+0xa4>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d00e      	beq.n	800ab88 <HAL_TIM_Base_Start+0x5c>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a19      	ldr	r2, [pc, #100]	; (800abd4 <HAL_TIM_Base_Start+0xa8>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d009      	beq.n	800ab88 <HAL_TIM_Base_Start+0x5c>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a17      	ldr	r2, [pc, #92]	; (800abd8 <HAL_TIM_Base_Start+0xac>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d004      	beq.n	800ab88 <HAL_TIM_Base_Start+0x5c>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a16      	ldr	r2, [pc, #88]	; (800abdc <HAL_TIM_Base_Start+0xb0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d111      	bne.n	800abac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f003 0307 	and.w	r3, r3, #7
 800ab92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2b06      	cmp	r3, #6
 800ab98:	d010      	beq.n	800abbc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f042 0201 	orr.w	r2, r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abaa:	e007      	b.n	800abbc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f042 0201 	orr.w	r2, r2, #1
 800abba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	40010000 	.word	0x40010000
 800abd0:	40000400 	.word	0x40000400
 800abd4:	40000800 	.word	0x40000800
 800abd8:	40000c00 	.word	0x40000c00
 800abdc:	40014000 	.word	0x40014000

0800abe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d001      	beq.n	800abf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e044      	b.n	800ac82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68da      	ldr	r2, [r3, #12]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0201 	orr.w	r2, r2, #1
 800ac0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a1e      	ldr	r2, [pc, #120]	; (800ac90 <HAL_TIM_Base_Start_IT+0xb0>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d018      	beq.n	800ac4c <HAL_TIM_Base_Start_IT+0x6c>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac22:	d013      	beq.n	800ac4c <HAL_TIM_Base_Start_IT+0x6c>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a1a      	ldr	r2, [pc, #104]	; (800ac94 <HAL_TIM_Base_Start_IT+0xb4>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d00e      	beq.n	800ac4c <HAL_TIM_Base_Start_IT+0x6c>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a19      	ldr	r2, [pc, #100]	; (800ac98 <HAL_TIM_Base_Start_IT+0xb8>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d009      	beq.n	800ac4c <HAL_TIM_Base_Start_IT+0x6c>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a17      	ldr	r2, [pc, #92]	; (800ac9c <HAL_TIM_Base_Start_IT+0xbc>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d004      	beq.n	800ac4c <HAL_TIM_Base_Start_IT+0x6c>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a16      	ldr	r2, [pc, #88]	; (800aca0 <HAL_TIM_Base_Start_IT+0xc0>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d111      	bne.n	800ac70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f003 0307 	and.w	r3, r3, #7
 800ac56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b06      	cmp	r3, #6
 800ac5c:	d010      	beq.n	800ac80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f042 0201 	orr.w	r2, r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6e:	e007      	b.n	800ac80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	40010000 	.word	0x40010000
 800ac94:	40000400 	.word	0x40000400
 800ac98:	40000800 	.word	0x40000800
 800ac9c:	40000c00 	.word	0x40000c00
 800aca0:	40014000 	.word	0x40014000

0800aca4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800acb2:	2301      	movs	r3, #1
 800acb4:	e041      	b.n	800ad3a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f839 	bl	800ad42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3304      	adds	r3, #4
 800ace0:	4619      	mov	r1, r3
 800ace2:	4610      	mov	r0, r2
 800ace4:	f000 fcfc 	bl	800b6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad38:	2300      	movs	r3, #0
}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}

0800ad42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800ad42:	b480      	push	{r7}
 800ad44:	b083      	sub	sp, #12
 800ad46:	af00      	add	r7, sp, #0
 800ad48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ad4a:	bf00      	nop
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr

0800ad56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b082      	sub	sp, #8
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e041      	b.n	800adec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d106      	bne.n	800ad82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f839 	bl	800adf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3304      	adds	r3, #4
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f000 fca3 	bl	800b6e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2201      	movs	r2, #1
 800adae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2201      	movs	r2, #1
 800adb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d109      	bne.n	800ae2c <HAL_TIM_PWM_Start+0x24>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	bf14      	ite	ne
 800ae24:	2301      	movne	r3, #1
 800ae26:	2300      	moveq	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	e022      	b.n	800ae72 <HAL_TIM_PWM_Start+0x6a>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d109      	bne.n	800ae46 <HAL_TIM_PWM_Start+0x3e>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	bf14      	ite	ne
 800ae3e:	2301      	movne	r3, #1
 800ae40:	2300      	moveq	r3, #0
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	e015      	b.n	800ae72 <HAL_TIM_PWM_Start+0x6a>
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d109      	bne.n	800ae60 <HAL_TIM_PWM_Start+0x58>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	bf14      	ite	ne
 800ae58:	2301      	movne	r3, #1
 800ae5a:	2300      	moveq	r3, #0
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	e008      	b.n	800ae72 <HAL_TIM_PWM_Start+0x6a>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	bf14      	ite	ne
 800ae6c:	2301      	movne	r3, #1
 800ae6e:	2300      	moveq	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e068      	b.n	800af4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d104      	bne.n	800ae8a <HAL_TIM_PWM_Start+0x82>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae88:	e013      	b.n	800aeb2 <HAL_TIM_PWM_Start+0xaa>
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	2b04      	cmp	r3, #4
 800ae8e:	d104      	bne.n	800ae9a <HAL_TIM_PWM_Start+0x92>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae98:	e00b      	b.n	800aeb2 <HAL_TIM_PWM_Start+0xaa>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	2b08      	cmp	r3, #8
 800ae9e:	d104      	bne.n	800aeaa <HAL_TIM_PWM_Start+0xa2>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aea8:	e003      	b.n	800aeb2 <HAL_TIM_PWM_Start+0xaa>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2202      	movs	r2, #2
 800aeae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 feb6 	bl	800bc2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a23      	ldr	r2, [pc, #140]	; (800af54 <HAL_TIM_PWM_Start+0x14c>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d107      	bne.n	800aeda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a1d      	ldr	r2, [pc, #116]	; (800af54 <HAL_TIM_PWM_Start+0x14c>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d018      	beq.n	800af16 <HAL_TIM_PWM_Start+0x10e>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeec:	d013      	beq.n	800af16 <HAL_TIM_PWM_Start+0x10e>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a19      	ldr	r2, [pc, #100]	; (800af58 <HAL_TIM_PWM_Start+0x150>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d00e      	beq.n	800af16 <HAL_TIM_PWM_Start+0x10e>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a17      	ldr	r2, [pc, #92]	; (800af5c <HAL_TIM_PWM_Start+0x154>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d009      	beq.n	800af16 <HAL_TIM_PWM_Start+0x10e>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a16      	ldr	r2, [pc, #88]	; (800af60 <HAL_TIM_PWM_Start+0x158>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d004      	beq.n	800af16 <HAL_TIM_PWM_Start+0x10e>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a14      	ldr	r2, [pc, #80]	; (800af64 <HAL_TIM_PWM_Start+0x15c>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d111      	bne.n	800af3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f003 0307 	and.w	r3, r3, #7
 800af20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b06      	cmp	r3, #6
 800af26:	d010      	beq.n	800af4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0201 	orr.w	r2, r2, #1
 800af36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af38:	e007      	b.n	800af4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0201 	orr.w	r2, r2, #1
 800af48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3710      	adds	r7, #16
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	40010000 	.word	0x40010000
 800af58:	40000400 	.word	0x40000400
 800af5c:	40000800 	.word	0x40000800
 800af60:	40000c00 	.word	0x40000c00
 800af64:	40014000 	.word	0x40014000

0800af68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e097      	b.n	800b0ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7fa fec1 	bl	8005d18 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2202      	movs	r2, #2
 800af9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	6812      	ldr	r2, [r2, #0]
 800afa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afac:	f023 0307 	bic.w	r3, r3, #7
 800afb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3304      	adds	r3, #4
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f000 fb8f 	bl	800b6e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afea:	f023 0303 	bic.w	r3, r3, #3
 800afee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	4313      	orrs	r3, r2
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	4313      	orrs	r3, r2
 800b000:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b008:	f023 030c 	bic.w	r3, r3, #12
 800b00c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	021b      	lsls	r3, r3, #8
 800b024:	4313      	orrs	r3, r2
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4313      	orrs	r3, r2
 800b02a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	011a      	lsls	r2, r3, #4
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	031b      	lsls	r3, r3, #12
 800b038:	4313      	orrs	r3, r2
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b046:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b04e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	685a      	ldr	r2, [r3, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	011b      	lsls	r3, r3, #4
 800b05a:	4313      	orrs	r3, r2
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	4313      	orrs	r3, r2
 800b060:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	697a      	ldr	r2, [r7, #20]
 800b068:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2201      	movs	r2, #1
 800b086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d122      	bne.n	800b110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d11b      	bne.n	800b110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f06f 0202 	mvn.w	r2, #2
 800b0e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fad3 	bl	800b6a2 <HAL_TIM_IC_CaptureCallback>
 800b0fc:	e005      	b.n	800b10a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fac5 	bl	800b68e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fad6 	bl	800b6b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d122      	bne.n	800b164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68db      	ldr	r3, [r3, #12]
 800b124:	f003 0304 	and.w	r3, r3, #4
 800b128:	2b04      	cmp	r3, #4
 800b12a:	d11b      	bne.n	800b164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f06f 0204 	mvn.w	r2, #4
 800b134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2202      	movs	r2, #2
 800b13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	699b      	ldr	r3, [r3, #24]
 800b142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b146:	2b00      	cmp	r3, #0
 800b148:	d003      	beq.n	800b152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f000 faa9 	bl	800b6a2 <HAL_TIM_IC_CaptureCallback>
 800b150:	e005      	b.n	800b15e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fa9b 	bl	800b68e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 faac 	bl	800b6b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b08      	cmp	r3, #8
 800b170:	d122      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0308 	and.w	r3, r3, #8
 800b17c:	2b08      	cmp	r3, #8
 800b17e:	d11b      	bne.n	800b1b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f06f 0208 	mvn.w	r2, #8
 800b188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2204      	movs	r2, #4
 800b18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	f003 0303 	and.w	r3, r3, #3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fa7f 	bl	800b6a2 <HAL_TIM_IC_CaptureCallback>
 800b1a4:	e005      	b.n	800b1b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 fa71 	bl	800b68e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fa82 	bl	800b6b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	691b      	ldr	r3, [r3, #16]
 800b1be:	f003 0310 	and.w	r3, r3, #16
 800b1c2:	2b10      	cmp	r3, #16
 800b1c4:	d122      	bne.n	800b20c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0310 	and.w	r3, r3, #16
 800b1d0:	2b10      	cmp	r3, #16
 800b1d2:	d11b      	bne.n	800b20c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f06f 0210 	mvn.w	r2, #16
 800b1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2208      	movs	r2, #8
 800b1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d003      	beq.n	800b1fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fa55 	bl	800b6a2 <HAL_TIM_IC_CaptureCallback>
 800b1f8:	e005      	b.n	800b206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa47 	bl	800b68e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 fa58 	bl	800b6b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b01      	cmp	r3, #1
 800b218:	d10e      	bne.n	800b238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	f003 0301 	and.w	r3, r3, #1
 800b224:	2b01      	cmp	r3, #1
 800b226:	d107      	bne.n	800b238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0201 	mvn.w	r2, #1
 800b230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7f6 f9ae 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	691b      	ldr	r3, [r3, #16]
 800b23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b242:	2b80      	cmp	r3, #128	; 0x80
 800b244:	d10e      	bne.n	800b264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b250:	2b80      	cmp	r3, #128	; 0x80
 800b252:	d107      	bne.n	800b264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fd82 	bl	800bd68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26e:	2b40      	cmp	r3, #64	; 0x40
 800b270:	d10e      	bne.n	800b290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27c:	2b40      	cmp	r3, #64	; 0x40
 800b27e:	d107      	bne.n	800b290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 fa1d 	bl	800b6ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0320 	and.w	r3, r3, #32
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d10e      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0320 	and.w	r3, r3, #32
 800b2a8:	2b20      	cmp	r3, #32
 800b2aa:	d107      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0220 	mvn.w	r2, #32
 800b2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fd4c 	bl	800bd54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b086      	sub	sp, #24
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d101      	bne.n	800b2e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e048      	b.n	800b374 <HAL_TIM_OC_ConfigChannel+0xb0>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2b0c      	cmp	r3, #12
 800b2ee:	d839      	bhi.n	800b364 <HAL_TIM_OC_ConfigChannel+0xa0>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b32d 	.word	0x0800b32d
 800b2fc:	0800b365 	.word	0x0800b365
 800b300:	0800b365 	.word	0x0800b365
 800b304:	0800b365 	.word	0x0800b365
 800b308:	0800b33b 	.word	0x0800b33b
 800b30c:	0800b365 	.word	0x0800b365
 800b310:	0800b365 	.word	0x0800b365
 800b314:	0800b365 	.word	0x0800b365
 800b318:	0800b349 	.word	0x0800b349
 800b31c:	0800b365 	.word	0x0800b365
 800b320:	0800b365 	.word	0x0800b365
 800b324:	0800b365 	.word	0x0800b365
 800b328:	0800b357 	.word	0x0800b357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68b9      	ldr	r1, [r7, #8]
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fa54 	bl	800b7e0 <TIM_OC1_SetConfig>
      break;
 800b338:	e017      	b.n	800b36a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68b9      	ldr	r1, [r7, #8]
 800b340:	4618      	mov	r0, r3
 800b342:	f000 fab3 	bl	800b8ac <TIM_OC2_SetConfig>
      break;
 800b346:	e010      	b.n	800b36a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68b9      	ldr	r1, [r7, #8]
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fb18 	bl	800b984 <TIM_OC3_SetConfig>
      break;
 800b354:	e009      	b.n	800b36a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 fb7b 	bl	800ba58 <TIM_OC4_SetConfig>
      break;
 800b362:	e002      	b.n	800b36a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b364:	2301      	movs	r3, #1
 800b366:	75fb      	strb	r3, [r7, #23]
      break;
 800b368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b372:	7dfb      	ldrb	r3, [r7, #23]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3718      	adds	r7, #24
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b392:	2b01      	cmp	r3, #1
 800b394:	d101      	bne.n	800b39a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b396:	2302      	movs	r3, #2
 800b398:	e0ae      	b.n	800b4f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b0c      	cmp	r3, #12
 800b3a6:	f200 809f 	bhi.w	800b4e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b3aa:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b3e5 	.word	0x0800b3e5
 800b3b4:	0800b4e9 	.word	0x0800b4e9
 800b3b8:	0800b4e9 	.word	0x0800b4e9
 800b3bc:	0800b4e9 	.word	0x0800b4e9
 800b3c0:	0800b425 	.word	0x0800b425
 800b3c4:	0800b4e9 	.word	0x0800b4e9
 800b3c8:	0800b4e9 	.word	0x0800b4e9
 800b3cc:	0800b4e9 	.word	0x0800b4e9
 800b3d0:	0800b467 	.word	0x0800b467
 800b3d4:	0800b4e9 	.word	0x0800b4e9
 800b3d8:	0800b4e9 	.word	0x0800b4e9
 800b3dc:	0800b4e9 	.word	0x0800b4e9
 800b3e0:	0800b4a7 	.word	0x0800b4a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68b9      	ldr	r1, [r7, #8]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f9f8 	bl	800b7e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	699a      	ldr	r2, [r3, #24]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f042 0208 	orr.w	r2, r2, #8
 800b3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	699a      	ldr	r2, [r3, #24]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f022 0204 	bic.w	r2, r2, #4
 800b40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	6999      	ldr	r1, [r3, #24]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	691a      	ldr	r2, [r3, #16]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	619a      	str	r2, [r3, #24]
      break;
 800b422:	e064      	b.n	800b4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68b9      	ldr	r1, [r7, #8]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 fa3e 	bl	800b8ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	699a      	ldr	r2, [r3, #24]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6999      	ldr	r1, [r3, #24]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	021a      	lsls	r2, r3, #8
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	430a      	orrs	r2, r1
 800b462:	619a      	str	r2, [r3, #24]
      break;
 800b464:	e043      	b.n	800b4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68b9      	ldr	r1, [r7, #8]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 fa89 	bl	800b984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	69da      	ldr	r2, [r3, #28]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0208 	orr.w	r2, r2, #8
 800b480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	69da      	ldr	r2, [r3, #28]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 0204 	bic.w	r2, r2, #4
 800b490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	69d9      	ldr	r1, [r3, #28]
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	691a      	ldr	r2, [r3, #16]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	61da      	str	r2, [r3, #28]
      break;
 800b4a4:	e023      	b.n	800b4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68b9      	ldr	r1, [r7, #8]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 fad3 	bl	800ba58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	69da      	ldr	r2, [r3, #28]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69da      	ldr	r2, [r3, #28]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69d9      	ldr	r1, [r3, #28]
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	021a      	lsls	r2, r3, #8
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	61da      	str	r2, [r3, #28]
      break;
 800b4e6:	e002      	b.n	800b4ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b514:	2b01      	cmp	r3, #1
 800b516:	d101      	bne.n	800b51c <HAL_TIM_ConfigClockSource+0x1c>
 800b518:	2302      	movs	r3, #2
 800b51a:	e0b4      	b.n	800b686 <HAL_TIM_ConfigClockSource+0x186>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2202      	movs	r2, #2
 800b528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b53a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68ba      	ldr	r2, [r7, #8]
 800b54a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b554:	d03e      	beq.n	800b5d4 <HAL_TIM_ConfigClockSource+0xd4>
 800b556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b55a:	f200 8087 	bhi.w	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b55e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b562:	f000 8086 	beq.w	800b672 <HAL_TIM_ConfigClockSource+0x172>
 800b566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b56a:	d87f      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b56c:	2b70      	cmp	r3, #112	; 0x70
 800b56e:	d01a      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0xa6>
 800b570:	2b70      	cmp	r3, #112	; 0x70
 800b572:	d87b      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b574:	2b60      	cmp	r3, #96	; 0x60
 800b576:	d050      	beq.n	800b61a <HAL_TIM_ConfigClockSource+0x11a>
 800b578:	2b60      	cmp	r3, #96	; 0x60
 800b57a:	d877      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b57c:	2b50      	cmp	r3, #80	; 0x50
 800b57e:	d03c      	beq.n	800b5fa <HAL_TIM_ConfigClockSource+0xfa>
 800b580:	2b50      	cmp	r3, #80	; 0x50
 800b582:	d873      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b584:	2b40      	cmp	r3, #64	; 0x40
 800b586:	d058      	beq.n	800b63a <HAL_TIM_ConfigClockSource+0x13a>
 800b588:	2b40      	cmp	r3, #64	; 0x40
 800b58a:	d86f      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b58c:	2b30      	cmp	r3, #48	; 0x30
 800b58e:	d064      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x15a>
 800b590:	2b30      	cmp	r3, #48	; 0x30
 800b592:	d86b      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b594:	2b20      	cmp	r3, #32
 800b596:	d060      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x15a>
 800b598:	2b20      	cmp	r3, #32
 800b59a:	d867      	bhi.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d05c      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x15a>
 800b5a0:	2b10      	cmp	r3, #16
 800b5a2:	d05a      	beq.n	800b65a <HAL_TIM_ConfigClockSource+0x15a>
 800b5a4:	e062      	b.n	800b66c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6818      	ldr	r0, [r3, #0]
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	6899      	ldr	r1, [r3, #8]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	f000 fb19 	bl	800bbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b5c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	609a      	str	r2, [r3, #8]
      break;
 800b5d2:	e04f      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6818      	ldr	r0, [r3, #0]
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	6899      	ldr	r1, [r3, #8]
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f000 fb02 	bl	800bbec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	689a      	ldr	r2, [r3, #8]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b5f6:	609a      	str	r2, [r3, #8]
      break;
 800b5f8:	e03c      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6818      	ldr	r0, [r3, #0]
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	6859      	ldr	r1, [r3, #4]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	461a      	mov	r2, r3
 800b608:	f000 fa76 	bl	800baf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2150      	movs	r1, #80	; 0x50
 800b612:	4618      	mov	r0, r3
 800b614:	f000 facf 	bl	800bbb6 <TIM_ITRx_SetConfig>
      break;
 800b618:	e02c      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	6859      	ldr	r1, [r3, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	461a      	mov	r2, r3
 800b628:	f000 fa95 	bl	800bb56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2160      	movs	r1, #96	; 0x60
 800b632:	4618      	mov	r0, r3
 800b634:	f000 fabf 	bl	800bbb6 <TIM_ITRx_SetConfig>
      break;
 800b638:	e01c      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	6859      	ldr	r1, [r3, #4]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	68db      	ldr	r3, [r3, #12]
 800b646:	461a      	mov	r2, r3
 800b648:	f000 fa56 	bl	800baf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2140      	movs	r1, #64	; 0x40
 800b652:	4618      	mov	r0, r3
 800b654:	f000 faaf 	bl	800bbb6 <TIM_ITRx_SetConfig>
      break;
 800b658:	e00c      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4619      	mov	r1, r3
 800b664:	4610      	mov	r0, r2
 800b666:	f000 faa6 	bl	800bbb6 <TIM_ITRx_SetConfig>
      break;
 800b66a:	e003      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b66c:	2301      	movs	r3, #1
 800b66e:	73fb      	strb	r3, [r7, #15]
      break;
 800b670:	e000      	b.n	800b674 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b684:	7bfb      	ldrb	r3, [r7, #15]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}

0800b68e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b68e:	b480      	push	{r7}
 800b690:	b083      	sub	sp, #12
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b696:	bf00      	nop
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b083      	sub	sp, #12
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6aa:	bf00      	nop
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b083      	sub	sp, #12
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b6be:	bf00      	nop
 800b6c0:	370c      	adds	r7, #12
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b083      	sub	sp, #12
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b6d2:	bf00      	nop
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr
	...

0800b6e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a34      	ldr	r2, [pc, #208]	; (800b7c4 <TIM_Base_SetConfig+0xe4>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d00f      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6fe:	d00b      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	4a31      	ldr	r2, [pc, #196]	; (800b7c8 <TIM_Base_SetConfig+0xe8>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d007      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a30      	ldr	r2, [pc, #192]	; (800b7cc <TIM_Base_SetConfig+0xec>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d003      	beq.n	800b718 <TIM_Base_SetConfig+0x38>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a2f      	ldr	r2, [pc, #188]	; (800b7d0 <TIM_Base_SetConfig+0xf0>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d108      	bne.n	800b72a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a25      	ldr	r2, [pc, #148]	; (800b7c4 <TIM_Base_SetConfig+0xe4>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d01b      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b738:	d017      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a22      	ldr	r2, [pc, #136]	; (800b7c8 <TIM_Base_SetConfig+0xe8>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d013      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	4a21      	ldr	r2, [pc, #132]	; (800b7cc <TIM_Base_SetConfig+0xec>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00f      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a20      	ldr	r2, [pc, #128]	; (800b7d0 <TIM_Base_SetConfig+0xf0>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d00b      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	4a1f      	ldr	r2, [pc, #124]	; (800b7d4 <TIM_Base_SetConfig+0xf4>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d007      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4a1e      	ldr	r2, [pc, #120]	; (800b7d8 <TIM_Base_SetConfig+0xf8>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d003      	beq.n	800b76a <TIM_Base_SetConfig+0x8a>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a1d      	ldr	r2, [pc, #116]	; (800b7dc <TIM_Base_SetConfig+0xfc>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d108      	bne.n	800b77c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	4a08      	ldr	r2, [pc, #32]	; (800b7c4 <TIM_Base_SetConfig+0xe4>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d103      	bne.n	800b7b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	691a      	ldr	r2, [r3, #16]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	615a      	str	r2, [r3, #20]
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	40010000 	.word	0x40010000
 800b7c8:	40000400 	.word	0x40000400
 800b7cc:	40000800 	.word	0x40000800
 800b7d0:	40000c00 	.word	0x40000c00
 800b7d4:	40014000 	.word	0x40014000
 800b7d8:	40014400 	.word	0x40014400
 800b7dc:	40014800 	.word	0x40014800

0800b7e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b087      	sub	sp, #28
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	f023 0201 	bic.w	r2, r3, #1
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6a1b      	ldr	r3, [r3, #32]
 800b7fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	f023 0303 	bic.w	r3, r3, #3
 800b816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f023 0302 	bic.w	r3, r3, #2
 800b828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	697a      	ldr	r2, [r7, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a1c      	ldr	r2, [pc, #112]	; (800b8a8 <TIM_OC1_SetConfig+0xc8>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d10c      	bne.n	800b856 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 0308 	bic.w	r3, r3, #8
 800b842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f023 0304 	bic.w	r3, r3, #4
 800b854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a13      	ldr	r2, [pc, #76]	; (800b8a8 <TIM_OC1_SetConfig+0xc8>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d111      	bne.n	800b882 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b86c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	4313      	orrs	r3, r2
 800b880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	693a      	ldr	r2, [r7, #16]
 800b886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	697a      	ldr	r2, [r7, #20]
 800b89a:	621a      	str	r2, [r3, #32]
}
 800b89c:	bf00      	nop
 800b89e:	371c      	adds	r7, #28
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	40010000 	.word	0x40010000

0800b8ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a1b      	ldr	r3, [r3, #32]
 800b8ba:	f023 0210 	bic.w	r2, r3, #16
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	699b      	ldr	r3, [r3, #24]
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	021b      	lsls	r3, r3, #8
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f023 0320 	bic.w	r3, r3, #32
 800b8f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	011b      	lsls	r3, r3, #4
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	4313      	orrs	r3, r2
 800b902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4a1e      	ldr	r2, [pc, #120]	; (800b980 <TIM_OC2_SetConfig+0xd4>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d10d      	bne.n	800b928 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	011b      	lsls	r3, r3, #4
 800b91a:	697a      	ldr	r2, [r7, #20]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a15      	ldr	r2, [pc, #84]	; (800b980 <TIM_OC2_SetConfig+0xd4>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d113      	bne.n	800b958 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b93e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	693a      	ldr	r2, [r7, #16]
 800b954:	4313      	orrs	r3, r2
 800b956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685a      	ldr	r2, [r3, #4]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	621a      	str	r2, [r3, #32]
}
 800b972:	bf00      	nop
 800b974:	371c      	adds	r7, #28
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	40010000 	.word	0x40010000

0800b984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a1b      	ldr	r3, [r3, #32]
 800b992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a1b      	ldr	r3, [r3, #32]
 800b99e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	69db      	ldr	r3, [r3, #28]
 800b9aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0303 	bic.w	r3, r3, #3
 800b9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	021b      	lsls	r3, r3, #8
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a1d      	ldr	r2, [pc, #116]	; (800ba54 <TIM_OC3_SetConfig+0xd0>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d10d      	bne.n	800b9fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b9e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	697a      	ldr	r2, [r7, #20]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b9fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a14      	ldr	r2, [pc, #80]	; (800ba54 <TIM_OC3_SetConfig+0xd0>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d113      	bne.n	800ba2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	011b      	lsls	r3, r3, #4
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	699b      	ldr	r3, [r3, #24]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	621a      	str	r2, [r3, #32]
}
 800ba48:	bf00      	nop
 800ba4a:	371c      	adds	r7, #28
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	40010000 	.word	0x40010000

0800ba58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69db      	ldr	r3, [r3, #28]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	021b      	lsls	r3, r3, #8
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800baa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	031b      	lsls	r3, r3, #12
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	4313      	orrs	r3, r2
 800baae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a10      	ldr	r2, [pc, #64]	; (800baf4 <TIM_OC4_SetConfig+0x9c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d109      	bne.n	800bacc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800babe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	019b      	lsls	r3, r3, #6
 800bac6:	697a      	ldr	r2, [r7, #20]
 800bac8:	4313      	orrs	r3, r2
 800baca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	697a      	ldr	r2, [r7, #20]
 800bad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	685a      	ldr	r2, [r3, #4]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	621a      	str	r2, [r3, #32]
}
 800bae6:	bf00      	nop
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	40010000 	.word	0x40010000

0800baf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6a1b      	ldr	r3, [r3, #32]
 800bb0e:	f023 0201 	bic.w	r2, r3, #1
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	699b      	ldr	r3, [r3, #24]
 800bb1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	011b      	lsls	r3, r3, #4
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f023 030a 	bic.w	r3, r3, #10
 800bb34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	621a      	str	r2, [r3, #32]
}
 800bb4a:	bf00      	nop
 800bb4c:	371c      	adds	r7, #28
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b087      	sub	sp, #28
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	f023 0210 	bic.w	r2, r3, #16
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6a1b      	ldr	r3, [r3, #32]
 800bb78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	031b      	lsls	r3, r3, #12
 800bb86:	697a      	ldr	r2, [r7, #20]
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	011b      	lsls	r3, r3, #4
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	621a      	str	r2, [r3, #32]
}
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	f043 0307 	orr.w	r3, r3, #7
 800bbd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	609a      	str	r2, [r3, #8]
}
 800bbe0:	bf00      	nop
 800bbe2:	3714      	adds	r7, #20
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	021a      	lsls	r2, r3, #8
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	697a      	ldr	r2, [r7, #20]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	697a      	ldr	r2, [r7, #20]
 800bc1e:	609a      	str	r2, [r3, #8]
}
 800bc20:	bf00      	nop
 800bc22:	371c      	adds	r7, #28
 800bc24:	46bd      	mov	sp, r7
 800bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b087      	sub	sp, #28
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f003 031f 	and.w	r3, r3, #31
 800bc3e:	2201      	movs	r2, #1
 800bc40:	fa02 f303 	lsl.w	r3, r2, r3
 800bc44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	6a1a      	ldr	r2, [r3, #32]
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	43db      	mvns	r3, r3
 800bc4e:	401a      	ands	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6a1a      	ldr	r2, [r3, #32]
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	f003 031f 	and.w	r3, r3, #31
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	fa01 f303 	lsl.w	r3, r1, r3
 800bc64:	431a      	orrs	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	621a      	str	r2, [r3, #32]
}
 800bc6a:	bf00      	nop
 800bc6c:	371c      	adds	r7, #28
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
	...

0800bc78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d101      	bne.n	800bc90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc8c:	2302      	movs	r3, #2
 800bc8e:	e050      	b.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	689b      	ldr	r3, [r3, #8]
 800bcae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a1c      	ldr	r2, [pc, #112]	; (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d018      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcdc:	d013      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a18      	ldr	r2, [pc, #96]	; (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00e      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a16      	ldr	r2, [pc, #88]	; (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d009      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a15      	ldr	r2, [pc, #84]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d004      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a13      	ldr	r2, [pc, #76]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d10c      	bne.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40010000 	.word	0x40010000
 800bd44:	40000400 	.word	0x40000400
 800bd48:	40000800 	.word	0x40000800
 800bd4c:	40000c00 	.word	0x40000c00
 800bd50:	40014000 	.word	0x40014000

0800bd54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd5c:	bf00      	nop
 800bd5e:	370c      	adds	r7, #12
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e047      	b.n	800be1e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d106      	bne.n	800bda8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7fa f8b4 	bl	8005f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2224      	movs	r2, #36	; 0x24
 800bdac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bdbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f931 	bl	800c028 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bdd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	695a      	ldr	r2, [r3, #20]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800bde4:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	695a      	ldr	r2, [r3, #20]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f042 0208 	orr.w	r2, r2, #8
 800bdf4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68da      	ldr	r2, [r3, #12]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2220      	movs	r2, #32
 800be10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2220      	movs	r2, #32
 800be18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b08a      	sub	sp, #40	; 0x28
 800be2a:	af02      	add	r7, sp, #8
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	603b      	str	r3, [r7, #0]
 800be32:	4613      	mov	r3, r2
 800be34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b20      	cmp	r3, #32
 800be44:	d17c      	bne.n	800bf40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <HAL_UART_Transmit+0x2c>
 800be4c:	88fb      	ldrh	r3, [r7, #6]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e075      	b.n	800bf42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d101      	bne.n	800be64 <HAL_UART_Transmit+0x3e>
 800be60:	2302      	movs	r3, #2
 800be62:	e06e      	b.n	800bf42 <HAL_UART_Transmit+0x11c>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2221      	movs	r2, #33	; 0x21
 800be76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be7a:	f7fa f9db 	bl	8006234 <HAL_GetTick>
 800be7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	88fa      	ldrh	r2, [r7, #6]
 800be84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	88fa      	ldrh	r2, [r7, #6]
 800be8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be94:	d108      	bne.n	800bea8 <HAL_UART_Transmit+0x82>
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	e003      	b.n	800beb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800beb8:	e02a      	b.n	800bf10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	2200      	movs	r2, #0
 800bec2:	2180      	movs	r1, #128	; 0x80
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f840 	bl	800bf4a <UART_WaitOnFlagUntilTimeout>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bed0:	2303      	movs	r3, #3
 800bed2:	e036      	b.n	800bf42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d10b      	bne.n	800bef2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	881b      	ldrh	r3, [r3, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	3302      	adds	r3, #2
 800beee:	61bb      	str	r3, [r7, #24]
 800bef0:	e007      	b.n	800bf02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	781a      	ldrb	r2, [r3, #0]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	3301      	adds	r3, #1
 800bf00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1cf      	bne.n	800beba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2200      	movs	r2, #0
 800bf22:	2140      	movs	r1, #64	; 0x40
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 f810 	bl	800bf4a <UART_WaitOnFlagUntilTimeout>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bf30:	2303      	movs	r3, #3
 800bf32:	e006      	b.n	800bf42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2220      	movs	r2, #32
 800bf38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e000      	b.n	800bf42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bf40:	2302      	movs	r3, #2
  }
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3720      	adds	r7, #32
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b090      	sub	sp, #64	; 0x40
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	60f8      	str	r0, [r7, #12]
 800bf52:	60b9      	str	r1, [r7, #8]
 800bf54:	603b      	str	r3, [r7, #0]
 800bf56:	4613      	mov	r3, r2
 800bf58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf5a:	e050      	b.n	800bffe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d04c      	beq.n	800bffe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d007      	beq.n	800bf7a <UART_WaitOnFlagUntilTimeout+0x30>
 800bf6a:	f7fa f963 	bl	8006234 <HAL_GetTick>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d241      	bcs.n	800bffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	330c      	adds	r3, #12
 800bf80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	330c      	adds	r3, #12
 800bf98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf9a:	637a      	str	r2, [r7, #52]	; 0x34
 800bf9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfa2:	e841 2300 	strex	r3, r2, [r1]
 800bfa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1e5      	bne.n	800bf7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3314      	adds	r3, #20
 800bfb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	613b      	str	r3, [r7, #16]
   return(result);
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f023 0301 	bic.w	r3, r3, #1
 800bfc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3314      	adds	r3, #20
 800bfcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfce:	623a      	str	r2, [r7, #32]
 800bfd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd2:	69f9      	ldr	r1, [r7, #28]
 800bfd4:	6a3a      	ldr	r2, [r7, #32]
 800bfd6:	e841 2300 	strex	r3, r2, [r1]
 800bfda:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1e5      	bne.n	800bfae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2220      	movs	r2, #32
 800bfee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e00f      	b.n	800c01e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	4013      	ands	r3, r2
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	bf0c      	ite	eq
 800c00e:	2301      	moveq	r3, #1
 800c010:	2300      	movne	r3, #0
 800c012:	b2db      	uxtb	r3, r3
 800c014:	461a      	mov	r2, r3
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d09f      	beq.n	800bf5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3740      	adds	r7, #64	; 0x40
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c02c:	b0c0      	sub	sp, #256	; 0x100
 800c02e:	af00      	add	r7, sp, #0
 800c030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c044:	68d9      	ldr	r1, [r3, #12]
 800c046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	ea40 0301 	orr.w	r3, r0, r1
 800c050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c056:	689a      	ldr	r2, [r3, #8]
 800c058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	431a      	orrs	r2, r3
 800c060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	431a      	orrs	r2, r3
 800c068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	4313      	orrs	r3, r2
 800c070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c080:	f021 010c 	bic.w	r1, r1, #12
 800c084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c08e:	430b      	orrs	r3, r1
 800c090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	695b      	ldr	r3, [r3, #20]
 800c09a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a2:	6999      	ldr	r1, [r3, #24]
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	ea40 0301 	orr.w	r3, r0, r1
 800c0ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	4b8f      	ldr	r3, [pc, #572]	; (800c2f4 <UART_SetConfig+0x2cc>)
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d005      	beq.n	800c0c8 <UART_SetConfig+0xa0>
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	4b8d      	ldr	r3, [pc, #564]	; (800c2f8 <UART_SetConfig+0x2d0>)
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d104      	bne.n	800c0d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c0c8:	f7fd fc00 	bl	80098cc <HAL_RCC_GetPCLK2Freq>
 800c0cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c0d0:	e003      	b.n	800c0da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c0d2:	f7fd fbe7 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 800c0d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0de:	69db      	ldr	r3, [r3, #28]
 800c0e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0e4:	f040 810c 	bne.w	800c300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c0e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c0f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c0f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c0fa:	4622      	mov	r2, r4
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	1891      	adds	r1, r2, r2
 800c100:	65b9      	str	r1, [r7, #88]	; 0x58
 800c102:	415b      	adcs	r3, r3
 800c104:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c10a:	4621      	mov	r1, r4
 800c10c:	eb12 0801 	adds.w	r8, r2, r1
 800c110:	4629      	mov	r1, r5
 800c112:	eb43 0901 	adc.w	r9, r3, r1
 800c116:	f04f 0200 	mov.w	r2, #0
 800c11a:	f04f 0300 	mov.w	r3, #0
 800c11e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c12a:	4690      	mov	r8, r2
 800c12c:	4699      	mov	r9, r3
 800c12e:	4623      	mov	r3, r4
 800c130:	eb18 0303 	adds.w	r3, r8, r3
 800c134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c138:	462b      	mov	r3, r5
 800c13a:	eb49 0303 	adc.w	r3, r9, r3
 800c13e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c14e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c156:	460b      	mov	r3, r1
 800c158:	18db      	adds	r3, r3, r3
 800c15a:	653b      	str	r3, [r7, #80]	; 0x50
 800c15c:	4613      	mov	r3, r2
 800c15e:	eb42 0303 	adc.w	r3, r2, r3
 800c162:	657b      	str	r3, [r7, #84]	; 0x54
 800c164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c16c:	f7f4 fb92 	bl	8000894 <__aeabi_uldivmod>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4b61      	ldr	r3, [pc, #388]	; (800c2fc <UART_SetConfig+0x2d4>)
 800c176:	fba3 2302 	umull	r2, r3, r3, r2
 800c17a:	095b      	lsrs	r3, r3, #5
 800c17c:	011c      	lsls	r4, r3, #4
 800c17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c182:	2200      	movs	r2, #0
 800c184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c18c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c190:	4642      	mov	r2, r8
 800c192:	464b      	mov	r3, r9
 800c194:	1891      	adds	r1, r2, r2
 800c196:	64b9      	str	r1, [r7, #72]	; 0x48
 800c198:	415b      	adcs	r3, r3
 800c19a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c19c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1a0:	4641      	mov	r1, r8
 800c1a2:	eb12 0a01 	adds.w	sl, r2, r1
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	eb43 0b01 	adc.w	fp, r3, r1
 800c1ac:	f04f 0200 	mov.w	r2, #0
 800c1b0:	f04f 0300 	mov.w	r3, #0
 800c1b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c1bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1c0:	4692      	mov	sl, r2
 800c1c2:	469b      	mov	fp, r3
 800c1c4:	4643      	mov	r3, r8
 800c1c6:	eb1a 0303 	adds.w	r3, sl, r3
 800c1ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1ce:	464b      	mov	r3, r9
 800c1d0:	eb4b 0303 	adc.w	r3, fp, r3
 800c1d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c1e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c1e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	18db      	adds	r3, r3, r3
 800c1f0:	643b      	str	r3, [r7, #64]	; 0x40
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	eb42 0303 	adc.w	r3, r2, r3
 800c1f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c1fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c1fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c202:	f7f4 fb47 	bl	8000894 <__aeabi_uldivmod>
 800c206:	4602      	mov	r2, r0
 800c208:	460b      	mov	r3, r1
 800c20a:	4611      	mov	r1, r2
 800c20c:	4b3b      	ldr	r3, [pc, #236]	; (800c2fc <UART_SetConfig+0x2d4>)
 800c20e:	fba3 2301 	umull	r2, r3, r3, r1
 800c212:	095b      	lsrs	r3, r3, #5
 800c214:	2264      	movs	r2, #100	; 0x64
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	1acb      	subs	r3, r1, r3
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c222:	4b36      	ldr	r3, [pc, #216]	; (800c2fc <UART_SetConfig+0x2d4>)
 800c224:	fba3 2302 	umull	r2, r3, r3, r2
 800c228:	095b      	lsrs	r3, r3, #5
 800c22a:	005b      	lsls	r3, r3, #1
 800c22c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c230:	441c      	add	r4, r3
 800c232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c236:	2200      	movs	r2, #0
 800c238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c23c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c244:	4642      	mov	r2, r8
 800c246:	464b      	mov	r3, r9
 800c248:	1891      	adds	r1, r2, r2
 800c24a:	63b9      	str	r1, [r7, #56]	; 0x38
 800c24c:	415b      	adcs	r3, r3
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c254:	4641      	mov	r1, r8
 800c256:	1851      	adds	r1, r2, r1
 800c258:	6339      	str	r1, [r7, #48]	; 0x30
 800c25a:	4649      	mov	r1, r9
 800c25c:	414b      	adcs	r3, r1
 800c25e:	637b      	str	r3, [r7, #52]	; 0x34
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	f04f 0300 	mov.w	r3, #0
 800c268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c26c:	4659      	mov	r1, fp
 800c26e:	00cb      	lsls	r3, r1, #3
 800c270:	4651      	mov	r1, sl
 800c272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c276:	4651      	mov	r1, sl
 800c278:	00ca      	lsls	r2, r1, #3
 800c27a:	4610      	mov	r0, r2
 800c27c:	4619      	mov	r1, r3
 800c27e:	4603      	mov	r3, r0
 800c280:	4642      	mov	r2, r8
 800c282:	189b      	adds	r3, r3, r2
 800c284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c288:	464b      	mov	r3, r9
 800c28a:	460a      	mov	r2, r1
 800c28c:	eb42 0303 	adc.w	r3, r2, r3
 800c290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	18db      	adds	r3, r3, r3
 800c2ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	eb42 0303 	adc.w	r3, r2, r3
 800c2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c2ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c2be:	f7f4 fae9 	bl	8000894 <__aeabi_uldivmod>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4b0d      	ldr	r3, [pc, #52]	; (800c2fc <UART_SetConfig+0x2d4>)
 800c2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2cc:	095b      	lsrs	r3, r3, #5
 800c2ce:	2164      	movs	r1, #100	; 0x64
 800c2d0:	fb01 f303 	mul.w	r3, r1, r3
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	3332      	adds	r3, #50	; 0x32
 800c2da:	4a08      	ldr	r2, [pc, #32]	; (800c2fc <UART_SetConfig+0x2d4>)
 800c2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e0:	095b      	lsrs	r3, r3, #5
 800c2e2:	f003 0207 	and.w	r2, r3, #7
 800c2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4422      	add	r2, r4
 800c2ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c2f0:	e105      	b.n	800c4fe <UART_SetConfig+0x4d6>
 800c2f2:	bf00      	nop
 800c2f4:	40011000 	.word	0x40011000
 800c2f8:	40011400 	.word	0x40011400
 800c2fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c304:	2200      	movs	r2, #0
 800c306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c30a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c30e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c312:	4642      	mov	r2, r8
 800c314:	464b      	mov	r3, r9
 800c316:	1891      	adds	r1, r2, r2
 800c318:	6239      	str	r1, [r7, #32]
 800c31a:	415b      	adcs	r3, r3
 800c31c:	627b      	str	r3, [r7, #36]	; 0x24
 800c31e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c322:	4641      	mov	r1, r8
 800c324:	1854      	adds	r4, r2, r1
 800c326:	4649      	mov	r1, r9
 800c328:	eb43 0501 	adc.w	r5, r3, r1
 800c32c:	f04f 0200 	mov.w	r2, #0
 800c330:	f04f 0300 	mov.w	r3, #0
 800c334:	00eb      	lsls	r3, r5, #3
 800c336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c33a:	00e2      	lsls	r2, r4, #3
 800c33c:	4614      	mov	r4, r2
 800c33e:	461d      	mov	r5, r3
 800c340:	4643      	mov	r3, r8
 800c342:	18e3      	adds	r3, r4, r3
 800c344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c348:	464b      	mov	r3, r9
 800c34a:	eb45 0303 	adc.w	r3, r5, r3
 800c34e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	2200      	movs	r2, #0
 800c35a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c35e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c362:	f04f 0200 	mov.w	r2, #0
 800c366:	f04f 0300 	mov.w	r3, #0
 800c36a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c36e:	4629      	mov	r1, r5
 800c370:	008b      	lsls	r3, r1, #2
 800c372:	4621      	mov	r1, r4
 800c374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c378:	4621      	mov	r1, r4
 800c37a:	008a      	lsls	r2, r1, #2
 800c37c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c380:	f7f4 fa88 	bl	8000894 <__aeabi_uldivmod>
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4b60      	ldr	r3, [pc, #384]	; (800c50c <UART_SetConfig+0x4e4>)
 800c38a:	fba3 2302 	umull	r2, r3, r3, r2
 800c38e:	095b      	lsrs	r3, r3, #5
 800c390:	011c      	lsls	r4, r3, #4
 800c392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c396:	2200      	movs	r2, #0
 800c398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c39c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c3a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c3a4:	4642      	mov	r2, r8
 800c3a6:	464b      	mov	r3, r9
 800c3a8:	1891      	adds	r1, r2, r2
 800c3aa:	61b9      	str	r1, [r7, #24]
 800c3ac:	415b      	adcs	r3, r3
 800c3ae:	61fb      	str	r3, [r7, #28]
 800c3b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3b4:	4641      	mov	r1, r8
 800c3b6:	1851      	adds	r1, r2, r1
 800c3b8:	6139      	str	r1, [r7, #16]
 800c3ba:	4649      	mov	r1, r9
 800c3bc:	414b      	adcs	r3, r1
 800c3be:	617b      	str	r3, [r7, #20]
 800c3c0:	f04f 0200 	mov.w	r2, #0
 800c3c4:	f04f 0300 	mov.w	r3, #0
 800c3c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c3cc:	4659      	mov	r1, fp
 800c3ce:	00cb      	lsls	r3, r1, #3
 800c3d0:	4651      	mov	r1, sl
 800c3d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3d6:	4651      	mov	r1, sl
 800c3d8:	00ca      	lsls	r2, r1, #3
 800c3da:	4610      	mov	r0, r2
 800c3dc:	4619      	mov	r1, r3
 800c3de:	4603      	mov	r3, r0
 800c3e0:	4642      	mov	r2, r8
 800c3e2:	189b      	adds	r3, r3, r2
 800c3e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	460a      	mov	r2, r1
 800c3ec:	eb42 0303 	adc.w	r3, r2, r3
 800c3f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3f8:	685b      	ldr	r3, [r3, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c400:	f04f 0200 	mov.w	r2, #0
 800c404:	f04f 0300 	mov.w	r3, #0
 800c408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c40c:	4649      	mov	r1, r9
 800c40e:	008b      	lsls	r3, r1, #2
 800c410:	4641      	mov	r1, r8
 800c412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c416:	4641      	mov	r1, r8
 800c418:	008a      	lsls	r2, r1, #2
 800c41a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c41e:	f7f4 fa39 	bl	8000894 <__aeabi_uldivmod>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4b39      	ldr	r3, [pc, #228]	; (800c50c <UART_SetConfig+0x4e4>)
 800c428:	fba3 1302 	umull	r1, r3, r3, r2
 800c42c:	095b      	lsrs	r3, r3, #5
 800c42e:	2164      	movs	r1, #100	; 0x64
 800c430:	fb01 f303 	mul.w	r3, r1, r3
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	011b      	lsls	r3, r3, #4
 800c438:	3332      	adds	r3, #50	; 0x32
 800c43a:	4a34      	ldr	r2, [pc, #208]	; (800c50c <UART_SetConfig+0x4e4>)
 800c43c:	fba2 2303 	umull	r2, r3, r2, r3
 800c440:	095b      	lsrs	r3, r3, #5
 800c442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c446:	441c      	add	r4, r3
 800c448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c44c:	2200      	movs	r2, #0
 800c44e:	673b      	str	r3, [r7, #112]	; 0x70
 800c450:	677a      	str	r2, [r7, #116]	; 0x74
 800c452:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c456:	4642      	mov	r2, r8
 800c458:	464b      	mov	r3, r9
 800c45a:	1891      	adds	r1, r2, r2
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	415b      	adcs	r3, r3
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c466:	4641      	mov	r1, r8
 800c468:	1851      	adds	r1, r2, r1
 800c46a:	6039      	str	r1, [r7, #0]
 800c46c:	4649      	mov	r1, r9
 800c46e:	414b      	adcs	r3, r1
 800c470:	607b      	str	r3, [r7, #4]
 800c472:	f04f 0200 	mov.w	r2, #0
 800c476:	f04f 0300 	mov.w	r3, #0
 800c47a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c47e:	4659      	mov	r1, fp
 800c480:	00cb      	lsls	r3, r1, #3
 800c482:	4651      	mov	r1, sl
 800c484:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c488:	4651      	mov	r1, sl
 800c48a:	00ca      	lsls	r2, r1, #3
 800c48c:	4610      	mov	r0, r2
 800c48e:	4619      	mov	r1, r3
 800c490:	4603      	mov	r3, r0
 800c492:	4642      	mov	r2, r8
 800c494:	189b      	adds	r3, r3, r2
 800c496:	66bb      	str	r3, [r7, #104]	; 0x68
 800c498:	464b      	mov	r3, r9
 800c49a:	460a      	mov	r2, r1
 800c49c:	eb42 0303 	adc.w	r3, r2, r3
 800c4a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	663b      	str	r3, [r7, #96]	; 0x60
 800c4ac:	667a      	str	r2, [r7, #100]	; 0x64
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	f04f 0300 	mov.w	r3, #0
 800c4b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c4ba:	4649      	mov	r1, r9
 800c4bc:	008b      	lsls	r3, r1, #2
 800c4be:	4641      	mov	r1, r8
 800c4c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4c4:	4641      	mov	r1, r8
 800c4c6:	008a      	lsls	r2, r1, #2
 800c4c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c4cc:	f7f4 f9e2 	bl	8000894 <__aeabi_uldivmod>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <UART_SetConfig+0x4e4>)
 800c4d6:	fba3 1302 	umull	r1, r3, r3, r2
 800c4da:	095b      	lsrs	r3, r3, #5
 800c4dc:	2164      	movs	r1, #100	; 0x64
 800c4de:	fb01 f303 	mul.w	r3, r1, r3
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	011b      	lsls	r3, r3, #4
 800c4e6:	3332      	adds	r3, #50	; 0x32
 800c4e8:	4a08      	ldr	r2, [pc, #32]	; (800c50c <UART_SetConfig+0x4e4>)
 800c4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ee:	095b      	lsrs	r3, r3, #5
 800c4f0:	f003 020f 	and.w	r2, r3, #15
 800c4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4422      	add	r2, r4
 800c4fc:	609a      	str	r2, [r3, #8]
}
 800c4fe:	bf00      	nop
 800c500:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c504:	46bd      	mov	sp, r7
 800c506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c50a:	bf00      	nop
 800c50c:	51eb851f 	.word	0x51eb851f

0800c510 <arm_sin_f32>:
 800c510:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800c58c <arm_sin_f32+0x7c>
 800c514:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c518:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c520:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800c524:	d42c      	bmi.n	800c580 <arm_sin_f32+0x70>
 800c526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c52a:	eddf 6a19 	vldr	s13, [pc, #100]	; 800c590 <arm_sin_f32+0x80>
 800c52e:	4a19      	ldr	r2, [pc, #100]	; (800c594 <arm_sin_f32+0x84>)
 800c530:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c534:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c538:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c53c:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c544:	bfa8      	it	ge
 800c546:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800c54a:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800c54e:	ee17 3a10 	vmov	r3, s14
 800c552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c556:	ee07 3a10 	vmov	s14, r3
 800c55a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800c55e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800c562:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c566:	edd1 6a01 	vldr	s13, [r1, #4]
 800c56a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c56e:	ed91 0a00 	vldr	s0, [r1]
 800c572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c576:	ee27 0a00 	vmul.f32	s0, s14, s0
 800c57a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c57e:	4770      	bx	lr
 800c580:	ee17 3a90 	vmov	r3, s15
 800c584:	3b01      	subs	r3, #1
 800c586:	ee07 3a90 	vmov	s15, r3
 800c58a:	e7cc      	b.n	800c526 <arm_sin_f32+0x16>
 800c58c:	3e22f983 	.word	0x3e22f983
 800c590:	44000000 	.word	0x44000000
 800c594:	0800e1c8 	.word	0x0800e1c8

0800c598 <atoi>:
 800c598:	220a      	movs	r2, #10
 800c59a:	2100      	movs	r1, #0
 800c59c:	f000 b8d6 	b.w	800c74c <strtol>

0800c5a0 <__errno>:
 800c5a0:	4b01      	ldr	r3, [pc, #4]	; (800c5a8 <__errno+0x8>)
 800c5a2:	6818      	ldr	r0, [r3, #0]
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	2000867c 	.word	0x2000867c

0800c5ac <__libc_init_array>:
 800c5ac:	b570      	push	{r4, r5, r6, lr}
 800c5ae:	4d0d      	ldr	r5, [pc, #52]	; (800c5e4 <__libc_init_array+0x38>)
 800c5b0:	4c0d      	ldr	r4, [pc, #52]	; (800c5e8 <__libc_init_array+0x3c>)
 800c5b2:	1b64      	subs	r4, r4, r5
 800c5b4:	10a4      	asrs	r4, r4, #2
 800c5b6:	2600      	movs	r6, #0
 800c5b8:	42a6      	cmp	r6, r4
 800c5ba:	d109      	bne.n	800c5d0 <__libc_init_array+0x24>
 800c5bc:	4d0b      	ldr	r5, [pc, #44]	; (800c5ec <__libc_init_array+0x40>)
 800c5be:	4c0c      	ldr	r4, [pc, #48]	; (800c5f0 <__libc_init_array+0x44>)
 800c5c0:	f000 f8ce 	bl	800c760 <_init>
 800c5c4:	1b64      	subs	r4, r4, r5
 800c5c6:	10a4      	asrs	r4, r4, #2
 800c5c8:	2600      	movs	r6, #0
 800c5ca:	42a6      	cmp	r6, r4
 800c5cc:	d105      	bne.n	800c5da <__libc_init_array+0x2e>
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5d4:	4798      	blx	r3
 800c5d6:	3601      	adds	r6, #1
 800c5d8:	e7ee      	b.n	800c5b8 <__libc_init_array+0xc>
 800c5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5de:	4798      	blx	r3
 800c5e0:	3601      	adds	r6, #1
 800c5e2:	e7f2      	b.n	800c5ca <__libc_init_array+0x1e>
 800c5e4:	0800ead8 	.word	0x0800ead8
 800c5e8:	0800ead8 	.word	0x0800ead8
 800c5ec:	0800ead8 	.word	0x0800ead8
 800c5f0:	0800eadc 	.word	0x0800eadc

0800c5f4 <memcpy>:
 800c5f4:	440a      	add	r2, r1
 800c5f6:	4291      	cmp	r1, r2
 800c5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5fc:	d100      	bne.n	800c600 <memcpy+0xc>
 800c5fe:	4770      	bx	lr
 800c600:	b510      	push	{r4, lr}
 800c602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60a:	4291      	cmp	r1, r2
 800c60c:	d1f9      	bne.n	800c602 <memcpy+0xe>
 800c60e:	bd10      	pop	{r4, pc}

0800c610 <memset>:
 800c610:	4402      	add	r2, r0
 800c612:	4603      	mov	r3, r0
 800c614:	4293      	cmp	r3, r2
 800c616:	d100      	bne.n	800c61a <memset+0xa>
 800c618:	4770      	bx	lr
 800c61a:	f803 1b01 	strb.w	r1, [r3], #1
 800c61e:	e7f9      	b.n	800c614 <memset+0x4>

0800c620 <strncmp>:
 800c620:	b510      	push	{r4, lr}
 800c622:	b17a      	cbz	r2, 800c644 <strncmp+0x24>
 800c624:	4603      	mov	r3, r0
 800c626:	3901      	subs	r1, #1
 800c628:	1884      	adds	r4, r0, r2
 800c62a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c62e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c632:	4290      	cmp	r0, r2
 800c634:	d101      	bne.n	800c63a <strncmp+0x1a>
 800c636:	42a3      	cmp	r3, r4
 800c638:	d101      	bne.n	800c63e <strncmp+0x1e>
 800c63a:	1a80      	subs	r0, r0, r2
 800c63c:	bd10      	pop	{r4, pc}
 800c63e:	2800      	cmp	r0, #0
 800c640:	d1f3      	bne.n	800c62a <strncmp+0xa>
 800c642:	e7fa      	b.n	800c63a <strncmp+0x1a>
 800c644:	4610      	mov	r0, r2
 800c646:	e7f9      	b.n	800c63c <strncmp+0x1c>

0800c648 <_strtol_l.constprop.0>:
 800c648:	2b01      	cmp	r3, #1
 800c64a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64e:	d001      	beq.n	800c654 <_strtol_l.constprop.0+0xc>
 800c650:	2b24      	cmp	r3, #36	; 0x24
 800c652:	d906      	bls.n	800c662 <_strtol_l.constprop.0+0x1a>
 800c654:	f7ff ffa4 	bl	800c5a0 <__errno>
 800c658:	2316      	movs	r3, #22
 800c65a:	6003      	str	r3, [r0, #0]
 800c65c:	2000      	movs	r0, #0
 800c65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c662:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c748 <_strtol_l.constprop.0+0x100>
 800c666:	460d      	mov	r5, r1
 800c668:	462e      	mov	r6, r5
 800c66a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c66e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c672:	f017 0708 	ands.w	r7, r7, #8
 800c676:	d1f7      	bne.n	800c668 <_strtol_l.constprop.0+0x20>
 800c678:	2c2d      	cmp	r4, #45	; 0x2d
 800c67a:	d132      	bne.n	800c6e2 <_strtol_l.constprop.0+0x9a>
 800c67c:	782c      	ldrb	r4, [r5, #0]
 800c67e:	2701      	movs	r7, #1
 800c680:	1cb5      	adds	r5, r6, #2
 800c682:	2b00      	cmp	r3, #0
 800c684:	d05b      	beq.n	800c73e <_strtol_l.constprop.0+0xf6>
 800c686:	2b10      	cmp	r3, #16
 800c688:	d109      	bne.n	800c69e <_strtol_l.constprop.0+0x56>
 800c68a:	2c30      	cmp	r4, #48	; 0x30
 800c68c:	d107      	bne.n	800c69e <_strtol_l.constprop.0+0x56>
 800c68e:	782c      	ldrb	r4, [r5, #0]
 800c690:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c694:	2c58      	cmp	r4, #88	; 0x58
 800c696:	d14d      	bne.n	800c734 <_strtol_l.constprop.0+0xec>
 800c698:	786c      	ldrb	r4, [r5, #1]
 800c69a:	2310      	movs	r3, #16
 800c69c:	3502      	adds	r5, #2
 800c69e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c6a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c6a6:	f04f 0c00 	mov.w	ip, #0
 800c6aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800c6ae:	4666      	mov	r6, ip
 800c6b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c6b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c6b8:	f1be 0f09 	cmp.w	lr, #9
 800c6bc:	d816      	bhi.n	800c6ec <_strtol_l.constprop.0+0xa4>
 800c6be:	4674      	mov	r4, lr
 800c6c0:	42a3      	cmp	r3, r4
 800c6c2:	dd24      	ble.n	800c70e <_strtol_l.constprop.0+0xc6>
 800c6c4:	f1bc 0f00 	cmp.w	ip, #0
 800c6c8:	db1e      	blt.n	800c708 <_strtol_l.constprop.0+0xc0>
 800c6ca:	45b1      	cmp	r9, r6
 800c6cc:	d31c      	bcc.n	800c708 <_strtol_l.constprop.0+0xc0>
 800c6ce:	d101      	bne.n	800c6d4 <_strtol_l.constprop.0+0x8c>
 800c6d0:	45a2      	cmp	sl, r4
 800c6d2:	db19      	blt.n	800c708 <_strtol_l.constprop.0+0xc0>
 800c6d4:	fb06 4603 	mla	r6, r6, r3, r4
 800c6d8:	f04f 0c01 	mov.w	ip, #1
 800c6dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6e0:	e7e8      	b.n	800c6b4 <_strtol_l.constprop.0+0x6c>
 800c6e2:	2c2b      	cmp	r4, #43	; 0x2b
 800c6e4:	bf04      	itt	eq
 800c6e6:	782c      	ldrbeq	r4, [r5, #0]
 800c6e8:	1cb5      	addeq	r5, r6, #2
 800c6ea:	e7ca      	b.n	800c682 <_strtol_l.constprop.0+0x3a>
 800c6ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c6f0:	f1be 0f19 	cmp.w	lr, #25
 800c6f4:	d801      	bhi.n	800c6fa <_strtol_l.constprop.0+0xb2>
 800c6f6:	3c37      	subs	r4, #55	; 0x37
 800c6f8:	e7e2      	b.n	800c6c0 <_strtol_l.constprop.0+0x78>
 800c6fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c6fe:	f1be 0f19 	cmp.w	lr, #25
 800c702:	d804      	bhi.n	800c70e <_strtol_l.constprop.0+0xc6>
 800c704:	3c57      	subs	r4, #87	; 0x57
 800c706:	e7db      	b.n	800c6c0 <_strtol_l.constprop.0+0x78>
 800c708:	f04f 3cff 	mov.w	ip, #4294967295
 800c70c:	e7e6      	b.n	800c6dc <_strtol_l.constprop.0+0x94>
 800c70e:	f1bc 0f00 	cmp.w	ip, #0
 800c712:	da05      	bge.n	800c720 <_strtol_l.constprop.0+0xd8>
 800c714:	2322      	movs	r3, #34	; 0x22
 800c716:	6003      	str	r3, [r0, #0]
 800c718:	4646      	mov	r6, r8
 800c71a:	b942      	cbnz	r2, 800c72e <_strtol_l.constprop.0+0xe6>
 800c71c:	4630      	mov	r0, r6
 800c71e:	e79e      	b.n	800c65e <_strtol_l.constprop.0+0x16>
 800c720:	b107      	cbz	r7, 800c724 <_strtol_l.constprop.0+0xdc>
 800c722:	4276      	negs	r6, r6
 800c724:	2a00      	cmp	r2, #0
 800c726:	d0f9      	beq.n	800c71c <_strtol_l.constprop.0+0xd4>
 800c728:	f1bc 0f00 	cmp.w	ip, #0
 800c72c:	d000      	beq.n	800c730 <_strtol_l.constprop.0+0xe8>
 800c72e:	1e69      	subs	r1, r5, #1
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	e7f3      	b.n	800c71c <_strtol_l.constprop.0+0xd4>
 800c734:	2430      	movs	r4, #48	; 0x30
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1b1      	bne.n	800c69e <_strtol_l.constprop.0+0x56>
 800c73a:	2308      	movs	r3, #8
 800c73c:	e7af      	b.n	800c69e <_strtol_l.constprop.0+0x56>
 800c73e:	2c30      	cmp	r4, #48	; 0x30
 800c740:	d0a5      	beq.n	800c68e <_strtol_l.constprop.0+0x46>
 800c742:	230a      	movs	r3, #10
 800c744:	e7ab      	b.n	800c69e <_strtol_l.constprop.0+0x56>
 800c746:	bf00      	nop
 800c748:	0800e9cd 	.word	0x0800e9cd

0800c74c <strtol>:
 800c74c:	4613      	mov	r3, r2
 800c74e:	460a      	mov	r2, r1
 800c750:	4601      	mov	r1, r0
 800c752:	4802      	ldr	r0, [pc, #8]	; (800c75c <strtol+0x10>)
 800c754:	6800      	ldr	r0, [r0, #0]
 800c756:	f7ff bf77 	b.w	800c648 <_strtol_l.constprop.0>
 800c75a:	bf00      	nop
 800c75c:	2000867c 	.word	0x2000867c

0800c760 <_init>:
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c762:	bf00      	nop
 800c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c766:	bc08      	pop	{r3}
 800c768:	469e      	mov	lr, r3
 800c76a:	4770      	bx	lr

0800c76c <_fini>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	bf00      	nop
 800c770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c772:	bc08      	pop	{r3}
 800c774:	469e      	mov	lr, r3
 800c776:	4770      	bx	lr
