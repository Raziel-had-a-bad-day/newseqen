
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae74  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c7c  0800b00c  0800b00c  0001b00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc88  0800cc88  00020438  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc88  0800cc88  0001cc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc90  0800cc90  00020438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc90  0800cc90  0001cc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc94  0800cc94  0001cc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  0800cc98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e8c  20000438  0800d0d0  00020438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200072c4  0800d0d0  000272c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017294  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b0  00000000  00000000  000376fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  0003b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d72  00000000  00000000  0003c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018040  00000000  00000000  0005522a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a134b  00000000  00000000  0006d26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0010e5b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055d0  00000000  00000000  0010e678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00113c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000438 	.word	0x20000438
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800aff4 	.word	0x0800aff4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000043c 	.word	0x2000043c
 80001d4:	0800aff4 	.word	0x0800aff4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2f>:
 80007b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007bc:	bf24      	itt	cs
 80007be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007c6:	d90d      	bls.n	80007e4 <__aeabi_d2f+0x30>
 80007c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007dc:	bf08      	it	eq
 80007de:	f020 0001 	biceq.w	r0, r0, #1
 80007e2:	4770      	bx	lr
 80007e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007e8:	d121      	bne.n	800082e <__aeabi_d2f+0x7a>
 80007ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ee:	bfbc      	itt	lt
 80007f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007f4:	4770      	bxlt	lr
 80007f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007fe:	f1c2 0218 	rsb	r2, r2, #24
 8000802:	f1c2 0c20 	rsb	ip, r2, #32
 8000806:	fa10 f30c 	lsls.w	r3, r0, ip
 800080a:	fa20 f002 	lsr.w	r0, r0, r2
 800080e:	bf18      	it	ne
 8000810:	f040 0001 	orrne.w	r0, r0, #1
 8000814:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000818:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800081c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000820:	ea40 000c 	orr.w	r0, r0, ip
 8000824:	fa23 f302 	lsr.w	r3, r3, r2
 8000828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800082c:	e7cc      	b.n	80007c8 <__aeabi_d2f+0x14>
 800082e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000832:	d107      	bne.n	8000844 <__aeabi_d2f+0x90>
 8000834:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000838:	bf1e      	ittt	ne
 800083a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800083e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000842:	4770      	bxne	lr
 8000844:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000848:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800084c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b974 	b.w	8000b54 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468e      	mov	lr, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d14d      	bne.n	800092e <__udivmoddi4+0xaa>
 8000892:	428a      	cmp	r2, r1
 8000894:	4694      	mov	ip, r2
 8000896:	d969      	bls.n	800096c <__udivmoddi4+0xe8>
 8000898:	fab2 f282 	clz	r2, r2
 800089c:	b152      	cbz	r2, 80008b4 <__udivmoddi4+0x30>
 800089e:	fa01 f302 	lsl.w	r3, r1, r2
 80008a2:	f1c2 0120 	rsb	r1, r2, #32
 80008a6:	fa20 f101 	lsr.w	r1, r0, r1
 80008aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ae:	ea41 0e03 	orr.w	lr, r1, r3
 80008b2:	4094      	lsls	r4, r2
 80008b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008b8:	0c21      	lsrs	r1, r4, #16
 80008ba:	fbbe f6f8 	udiv	r6, lr, r8
 80008be:	fa1f f78c 	uxth.w	r7, ip
 80008c2:	fb08 e316 	mls	r3, r8, r6, lr
 80008c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ca:	fb06 f107 	mul.w	r1, r6, r7
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d90a      	bls.n	80008e8 <__udivmoddi4+0x64>
 80008d2:	eb1c 0303 	adds.w	r3, ip, r3
 80008d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008da:	f080 811f 	bcs.w	8000b1c <__udivmoddi4+0x298>
 80008de:	4299      	cmp	r1, r3
 80008e0:	f240 811c 	bls.w	8000b1c <__udivmoddi4+0x298>
 80008e4:	3e02      	subs	r6, #2
 80008e6:	4463      	add	r3, ip
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	b2a4      	uxth	r4, r4
 80008ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f0:	fb08 3310 	mls	r3, r8, r0, r3
 80008f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f8:	fb00 f707 	mul.w	r7, r0, r7
 80008fc:	42a7      	cmp	r7, r4
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x92>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f100 33ff 	add.w	r3, r0, #4294967295
 8000908:	f080 810a 	bcs.w	8000b20 <__udivmoddi4+0x29c>
 800090c:	42a7      	cmp	r7, r4
 800090e:	f240 8107 	bls.w	8000b20 <__udivmoddi4+0x29c>
 8000912:	4464      	add	r4, ip
 8000914:	3802      	subs	r0, #2
 8000916:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091a:	1be4      	subs	r4, r4, r7
 800091c:	2600      	movs	r6, #0
 800091e:	b11d      	cbz	r5, 8000928 <__udivmoddi4+0xa4>
 8000920:	40d4      	lsrs	r4, r2
 8000922:	2300      	movs	r3, #0
 8000924:	e9c5 4300 	strd	r4, r3, [r5]
 8000928:	4631      	mov	r1, r6
 800092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092e:	428b      	cmp	r3, r1
 8000930:	d909      	bls.n	8000946 <__udivmoddi4+0xc2>
 8000932:	2d00      	cmp	r5, #0
 8000934:	f000 80ef 	beq.w	8000b16 <__udivmoddi4+0x292>
 8000938:	2600      	movs	r6, #0
 800093a:	e9c5 0100 	strd	r0, r1, [r5]
 800093e:	4630      	mov	r0, r6
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	fab3 f683 	clz	r6, r3
 800094a:	2e00      	cmp	r6, #0
 800094c:	d14a      	bne.n	80009e4 <__udivmoddi4+0x160>
 800094e:	428b      	cmp	r3, r1
 8000950:	d302      	bcc.n	8000958 <__udivmoddi4+0xd4>
 8000952:	4282      	cmp	r2, r0
 8000954:	f200 80f9 	bhi.w	8000b4a <__udivmoddi4+0x2c6>
 8000958:	1a84      	subs	r4, r0, r2
 800095a:	eb61 0303 	sbc.w	r3, r1, r3
 800095e:	2001      	movs	r0, #1
 8000960:	469e      	mov	lr, r3
 8000962:	2d00      	cmp	r5, #0
 8000964:	d0e0      	beq.n	8000928 <__udivmoddi4+0xa4>
 8000966:	e9c5 4e00 	strd	r4, lr, [r5]
 800096a:	e7dd      	b.n	8000928 <__udivmoddi4+0xa4>
 800096c:	b902      	cbnz	r2, 8000970 <__udivmoddi4+0xec>
 800096e:	deff      	udf	#255	; 0xff
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	2a00      	cmp	r2, #0
 8000976:	f040 8092 	bne.w	8000a9e <__udivmoddi4+0x21a>
 800097a:	eba1 010c 	sub.w	r1, r1, ip
 800097e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000982:	fa1f fe8c 	uxth.w	lr, ip
 8000986:	2601      	movs	r6, #1
 8000988:	0c20      	lsrs	r0, r4, #16
 800098a:	fbb1 f3f7 	udiv	r3, r1, r7
 800098e:	fb07 1113 	mls	r1, r7, r3, r1
 8000992:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000996:	fb0e f003 	mul.w	r0, lr, r3
 800099a:	4288      	cmp	r0, r1
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x12c>
 800099e:	eb1c 0101 	adds.w	r1, ip, r1
 80009a2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0x12a>
 80009a8:	4288      	cmp	r0, r1
 80009aa:	f200 80cb 	bhi.w	8000b44 <__udivmoddi4+0x2c0>
 80009ae:	4643      	mov	r3, r8
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009b8:	fb07 1110 	mls	r1, r7, r0, r1
 80009bc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009c0:	fb0e fe00 	mul.w	lr, lr, r0
 80009c4:	45a6      	cmp	lr, r4
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x156>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x154>
 80009d2:	45a6      	cmp	lr, r4
 80009d4:	f200 80bb 	bhi.w	8000b4e <__udivmoddi4+0x2ca>
 80009d8:	4608      	mov	r0, r1
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009e2:	e79c      	b.n	800091e <__udivmoddi4+0x9a>
 80009e4:	f1c6 0720 	rsb	r7, r6, #32
 80009e8:	40b3      	lsls	r3, r6
 80009ea:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ee:	ea4c 0c03 	orr.w	ip, ip, r3
 80009f2:	fa20 f407 	lsr.w	r4, r0, r7
 80009f6:	fa01 f306 	lsl.w	r3, r1, r6
 80009fa:	431c      	orrs	r4, r3
 80009fc:	40f9      	lsrs	r1, r7
 80009fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a02:	fa00 f306 	lsl.w	r3, r0, r6
 8000a06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a0a:	0c20      	lsrs	r0, r4, #16
 8000a0c:	fa1f fe8c 	uxth.w	lr, ip
 8000a10:	fb09 1118 	mls	r1, r9, r8, r1
 8000a14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a18:	fb08 f00e 	mul.w	r0, r8, lr
 8000a1c:	4288      	cmp	r0, r1
 8000a1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a22:	d90b      	bls.n	8000a3c <__udivmoddi4+0x1b8>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a2c:	f080 8088 	bcs.w	8000b40 <__udivmoddi4+0x2bc>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f240 8085 	bls.w	8000b40 <__udivmoddi4+0x2bc>
 8000a36:	f1a8 0802 	sub.w	r8, r8, #2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	1a09      	subs	r1, r1, r0
 8000a3e:	b2a4      	uxth	r4, r4
 8000a40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a44:	fb09 1110 	mls	r1, r9, r0, r1
 8000a48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a50:	458e      	cmp	lr, r1
 8000a52:	d908      	bls.n	8000a66 <__udivmoddi4+0x1e2>
 8000a54:	eb1c 0101 	adds.w	r1, ip, r1
 8000a58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a5c:	d26c      	bcs.n	8000b38 <__udivmoddi4+0x2b4>
 8000a5e:	458e      	cmp	lr, r1
 8000a60:	d96a      	bls.n	8000b38 <__udivmoddi4+0x2b4>
 8000a62:	3802      	subs	r0, #2
 8000a64:	4461      	add	r1, ip
 8000a66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a6e:	eba1 010e 	sub.w	r1, r1, lr
 8000a72:	42a1      	cmp	r1, r4
 8000a74:	46c8      	mov	r8, r9
 8000a76:	46a6      	mov	lr, r4
 8000a78:	d356      	bcc.n	8000b28 <__udivmoddi4+0x2a4>
 8000a7a:	d053      	beq.n	8000b24 <__udivmoddi4+0x2a0>
 8000a7c:	b15d      	cbz	r5, 8000a96 <__udivmoddi4+0x212>
 8000a7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a82:	eb61 010e 	sbc.w	r1, r1, lr
 8000a86:	fa01 f707 	lsl.w	r7, r1, r7
 8000a8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a8e:	40f1      	lsrs	r1, r6
 8000a90:	431f      	orrs	r7, r3
 8000a92:	e9c5 7100 	strd	r7, r1, [r5]
 8000a96:	2600      	movs	r6, #0
 8000a98:	4631      	mov	r1, r6
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9e:	f1c2 0320 	rsb	r3, r2, #32
 8000aa2:	40d8      	lsrs	r0, r3
 8000aa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aac:	4091      	lsls	r1, r2
 8000aae:	4301      	orrs	r1, r0
 8000ab0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ab4:	fa1f fe8c 	uxth.w	lr, ip
 8000ab8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000abc:	fb07 3610 	mls	r6, r7, r0, r3
 8000ac0:	0c0b      	lsrs	r3, r1, #16
 8000ac2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ac6:	fb00 f60e 	mul.w	r6, r0, lr
 8000aca:	429e      	cmp	r6, r3
 8000acc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad0:	d908      	bls.n	8000ae4 <__udivmoddi4+0x260>
 8000ad2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ada:	d22f      	bcs.n	8000b3c <__udivmoddi4+0x2b8>
 8000adc:	429e      	cmp	r6, r3
 8000ade:	d92d      	bls.n	8000b3c <__udivmoddi4+0x2b8>
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	4463      	add	r3, ip
 8000ae4:	1b9b      	subs	r3, r3, r6
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000aec:	fb07 3316 	mls	r3, r7, r6, r3
 8000af0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af4:	fb06 f30e 	mul.w	r3, r6, lr
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d908      	bls.n	8000b0e <__udivmoddi4+0x28a>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b04:	d216      	bcs.n	8000b34 <__udivmoddi4+0x2b0>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d914      	bls.n	8000b34 <__udivmoddi4+0x2b0>
 8000b0a:	3e02      	subs	r6, #2
 8000b0c:	4461      	add	r1, ip
 8000b0e:	1ac9      	subs	r1, r1, r3
 8000b10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b14:	e738      	b.n	8000988 <__udivmoddi4+0x104>
 8000b16:	462e      	mov	r6, r5
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e705      	b.n	8000928 <__udivmoddi4+0xa4>
 8000b1c:	4606      	mov	r6, r0
 8000b1e:	e6e3      	b.n	80008e8 <__udivmoddi4+0x64>
 8000b20:	4618      	mov	r0, r3
 8000b22:	e6f8      	b.n	8000916 <__udivmoddi4+0x92>
 8000b24:	454b      	cmp	r3, r9
 8000b26:	d2a9      	bcs.n	8000a7c <__udivmoddi4+0x1f8>
 8000b28:	ebb9 0802 	subs.w	r8, r9, r2
 8000b2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b30:	3801      	subs	r0, #1
 8000b32:	e7a3      	b.n	8000a7c <__udivmoddi4+0x1f8>
 8000b34:	4646      	mov	r6, r8
 8000b36:	e7ea      	b.n	8000b0e <__udivmoddi4+0x28a>
 8000b38:	4620      	mov	r0, r4
 8000b3a:	e794      	b.n	8000a66 <__udivmoddi4+0x1e2>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	e7d1      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b40:	46d0      	mov	r8, sl
 8000b42:	e77b      	b.n	8000a3c <__udivmoddi4+0x1b8>
 8000b44:	3b02      	subs	r3, #2
 8000b46:	4461      	add	r1, ip
 8000b48:	e732      	b.n	80009b0 <__udivmoddi4+0x12c>
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	e709      	b.n	8000962 <__udivmoddi4+0xde>
 8000b4e:	4464      	add	r4, ip
 8000b50:	3802      	subs	r0, #2
 8000b52:	e742      	b.n	80009da <__udivmoddi4+0x156>

08000b54 <__aeabi_idiv0>:
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	var_index=var_index&15;    //set var index ie  LFO[1].rate
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	70fb      	strb	r3, [r7, #3]
	uint8_t menu_countr=0; //  menu vars
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000b74:	4bb7      	ldr	r3, [pc, #732]	; (8000e54 <menu_vars+0x2fc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	801a      	strh	r2, [r3, #0]
 8000b7a:	e01d      	b.n	8000bb8 <menu_vars+0x60>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000b7c:	4bb5      	ldr	r3, [pc, #724]	; (8000e54 <menu_vars+0x2fc>)
 8000b7e:	881b      	ldrh	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4bb5      	ldr	r3, [pc, #724]	; (8000e58 <menu_vars+0x300>)
 8000b84:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b88:	f107 0308 	add.w	r3, r7, #8
 8000b8c:	6810      	ldr	r0, [r2, #0]
 8000b8e:	6851      	ldr	r1, [r2, #4]
 8000b90:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2208      	movs	r2, #8
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f00a f98a 	bl	800aeb4 <strncmp>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <menu_vars+0x54>
			menu_countr = i;
 8000ba6:	4bab      	ldr	r3, [pc, #684]	; (8000e54 <menu_vars+0x2fc>)
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4ba9      	ldr	r3, [pc, #676]	; (8000e54 <menu_vars+0x2fc>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	4ba7      	ldr	r3, [pc, #668]	; (8000e54 <menu_vars+0x2fc>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	4ba6      	ldr	r3, [pc, #664]	; (8000e54 <menu_vars+0x2fc>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	2b2b      	cmp	r3, #43	; 0x2b
 8000bbe:	d9dd      	bls.n	8000b7c <menu_vars+0x24>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bc0:	4aa6      	ldr	r2, [pc, #664]	; (8000e5c <menu_vars+0x304>)
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	4aa5      	ldr	r2, [pc, #660]	; (8000e60 <menu_vars+0x308>)
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	78fa      	ldrb	r2, [r7, #3]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d903      	bls.n	8000bda <menu_vars+0x82>
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	4aa2      	ldr	r2, [pc, #648]	; (8000e60 <menu_vars+0x308>)
 8000bd6:	5cd3      	ldrb	r3, [r2, r3]
 8000bd8:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
 8000bdc:	2b2b      	cmp	r3, #43	; 0x2b
 8000bde:	f200 81d8 	bhi.w	8000f92 <menu_vars+0x43a>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <menu_vars+0x90>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c99 	.word	0x08000c99
 8000bec:	08000c9f 	.word	0x08000c9f
 8000bf0:	08000cb1 	.word	0x08000cb1
 8000bf4:	08000cc5 	.word	0x08000cc5
 8000bf8:	08000cd9 	.word	0x08000cd9
 8000bfc:	08000ced 	.word	0x08000ced
 8000c00:	08000d01 	.word	0x08000d01
 8000c04:	08000d07 	.word	0x08000d07
 8000c08:	08000d19 	.word	0x08000d19
 8000c0c:	08000d2d 	.word	0x08000d2d
 8000c10:	08000d41 	.word	0x08000d41
 8000c14:	08000d55 	.word	0x08000d55
 8000c18:	08000d5b 	.word	0x08000d5b
 8000c1c:	08000d6d 	.word	0x08000d6d
 8000c20:	08000d81 	.word	0x08000d81
 8000c24:	08000d95 	.word	0x08000d95
 8000c28:	08000da9 	.word	0x08000da9
 8000c2c:	08000dbd 	.word	0x08000dbd
 8000c30:	08000dd1 	.word	0x08000dd1
 8000c34:	08000de5 	.word	0x08000de5
 8000c38:	08000df9 	.word	0x08000df9
 8000c3c:	08000e0d 	.word	0x08000e0d
 8000c40:	08000e13 	.word	0x08000e13
 8000c44:	08000e19 	.word	0x08000e19
 8000c48:	08000e1f 	.word	0x08000e1f
 8000c4c:	08000e2b 	.word	0x08000e2b
 8000c50:	08000e39 	.word	0x08000e39
 8000c54:	08000e47 	.word	0x08000e47
 8000c58:	08000e81 	.word	0x08000e81
 8000c5c:	08000e8f 	.word	0x08000e8f
 8000c60:	08000e9d 	.word	0x08000e9d
 8000c64:	08000eab 	.word	0x08000eab
 8000c68:	08000eb9 	.word	0x08000eb9
 8000c6c:	08000ec7 	.word	0x08000ec7
 8000c70:	08000ed5 	.word	0x08000ed5
 8000c74:	08000ee3 	.word	0x08000ee3
 8000c78:	08000ef7 	.word	0x08000ef7
 8000c7c:	08000f09 	.word	0x08000f09
 8000c80:	08000f1d 	.word	0x08000f1d
 8000c84:	08000f31 	.word	0x08000f31
 8000c88:	08000f45 	.word	0x08000f45
 8000c8c:	08000f57 	.word	0x08000f57
 8000c90:	08000f6b 	.word	0x08000f6b
 8000c94:	08000f7f 	.word	0x08000f7f
	case 0:     menu_vars_var1= NULL; break;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e17c      	b.n	8000f98 <menu_vars+0x440>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4a6e      	ldr	r2, [pc, #440]	; (8000e64 <menu_vars+0x30c>)
 8000caa:	4413      	add	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	e173      	b.n	8000f98 <menu_vars+0x440>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4a6a      	ldr	r2, [pc, #424]	; (8000e64 <menu_vars+0x30c>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	e169      	b.n	8000f98 <menu_vars+0x440>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	011b      	lsls	r3, r3, #4
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4a65      	ldr	r2, [pc, #404]	; (8000e64 <menu_vars+0x30c>)
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e15f      	b.n	8000f98 <menu_vars+0x440>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000cd8:	78fa      	ldrb	r2, [r7, #3]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	011b      	lsls	r3, r3, #4
 8000cde:	4413      	add	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4a60      	ldr	r2, [pc, #384]	; (8000e64 <menu_vars+0x30c>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3303      	adds	r3, #3
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	e155      	b.n	8000f98 <menu_vars+0x440>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	4a5c      	ldr	r2, [pc, #368]	; (8000e68 <menu_vars+0x310>)
 8000cf8:	4413      	add	r3, r2
 8000cfa:	3304      	adds	r3, #4
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	e14b      	b.n	8000f98 <menu_vars+0x440>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d00:	2300      	movs	r3, #0
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	e148      	b.n	8000f98 <menu_vars+0x440>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	4a56      	ldr	r2, [pc, #344]	; (8000e6c <menu_vars+0x314>)
 8000d12:	4413      	add	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	e13f      	b.n	8000f98 <menu_vars+0x440>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	4a52      	ldr	r2, [pc, #328]	; (8000e6c <menu_vars+0x314>)
 8000d24:	4413      	add	r3, r2
 8000d26:	3301      	adds	r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	e135      	b.n	8000f98 <menu_vars+0x440>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a4d      	ldr	r2, [pc, #308]	; (8000e6c <menu_vars+0x314>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	e12b      	b.n	8000f98 <menu_vars+0x440>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4a48      	ldr	r2, [pc, #288]	; (8000e6c <menu_vars+0x314>)
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3303      	adds	r3, #3
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e121      	b.n	8000f98 <menu_vars+0x440>
	case 11:     menu_vars_var1= NULL  ; break;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	e11e      	b.n	8000f98 <menu_vars+0x440>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000d5a:	78fa      	ldrb	r2, [r7, #3]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	1a9b      	subs	r3, r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4a42      	ldr	r2, [pc, #264]	; (8000e70 <menu_vars+0x318>)
 8000d66:	4413      	add	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e115      	b.n	8000f98 <menu_vars+0x440>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000d6c:	78fa      	ldrb	r2, [r7, #3]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4a3e      	ldr	r2, [pc, #248]	; (8000e70 <menu_vars+0x318>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e10b      	b.n	8000f98 <menu_vars+0x440>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000d80:	78fa      	ldrb	r2, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	1a9b      	subs	r3, r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4a39      	ldr	r2, [pc, #228]	; (8000e70 <menu_vars+0x318>)
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	e101      	b.n	8000f98 <menu_vars+0x440>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000d94:	78fa      	ldrb	r2, [r7, #3]
 8000d96:	4613      	mov	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	4a34      	ldr	r2, [pc, #208]	; (8000e70 <menu_vars+0x318>)
 8000da0:	4413      	add	r3, r2
 8000da2:	3303      	adds	r3, #3
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	e0f7      	b.n	8000f98 <menu_vars+0x440>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	4613      	mov	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4a2f      	ldr	r2, [pc, #188]	; (8000e70 <menu_vars+0x318>)
 8000db4:	4413      	add	r3, r2
 8000db6:	3304      	adds	r3, #4
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	e0ed      	b.n	8000f98 <menu_vars+0x440>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000dbc:	78fa      	ldrb	r2, [r7, #3]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	1a9b      	subs	r3, r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4a2a      	ldr	r2, [pc, #168]	; (8000e70 <menu_vars+0x318>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	3305      	adds	r3, #5
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e0e3      	b.n	8000f98 <menu_vars+0x440>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000dd0:	78fa      	ldrb	r2, [r7, #3]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <menu_vars+0x318>)
 8000ddc:	4413      	add	r3, r2
 8000dde:	3306      	adds	r3, #6
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e0d9      	b.n	8000f98 <menu_vars+0x440>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000de4:	78fa      	ldrb	r2, [r7, #3]
 8000de6:	4613      	mov	r3, r2
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	1a9b      	subs	r3, r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4a20      	ldr	r2, [pc, #128]	; (8000e70 <menu_vars+0x318>)
 8000df0:	4413      	add	r3, r2
 8000df2:	3307      	adds	r3, #7
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	e0cf      	b.n	8000f98 <menu_vars+0x440>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	3308      	adds	r3, #8
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <menu_vars+0x318>)
 8000e06:	4413      	add	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e0c5      	b.n	8000f98 <menu_vars+0x440>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e0c2      	b.n	8000f98 <menu_vars+0x440>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <menu_vars+0x31c>)
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	e0bf      	b.n	8000f98 <menu_vars+0x440>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <menu_vars+0x320>)
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	e0bc      	b.n	8000f98 <menu_vars+0x440>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e1e:	78fb      	ldrb	r3, [r7, #3]
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <menu_vars+0x31c>)
 8000e22:	4413      	add	r3, r2
 8000e24:	3302      	adds	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	e0b6      	b.n	8000f98 <menu_vars+0x440>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e2a:	78fb      	ldrb	r3, [r7, #3]
 8000e2c:	3310      	adds	r3, #16
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <menu_vars+0x31c>)
 8000e30:	4413      	add	r3, r2
 8000e32:	3303      	adds	r3, #3
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e0af      	b.n	8000f98 <menu_vars+0x440>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e38:	78fb      	ldrb	r3, [r7, #3]
 8000e3a:	3320      	adds	r3, #32
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <menu_vars+0x31c>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	3304      	adds	r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	e0a8      	b.n	8000f98 <menu_vars+0x440>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <menu_vars+0x324>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e0a2      	b.n	8000f98 <menu_vars+0x440>
 8000e52:	bf00      	nop
 8000e54:	2000088c 	.word	0x2000088c
 8000e58:	20000274 	.word	0x20000274
 8000e5c:	200069ad 	.word	0x200069ad
 8000e60:	0800ba28 	.word	0x0800ba28
 8000e64:	20003434 	.word	0x20003434
 8000e68:	200041d4 	.word	0x200041d4
 8000e6c:	20003718 	.word	0x20003718
 8000e70:	200001bc 	.word	0x200001bc
 8000e74:	200041a4 	.word	0x200041a4
 8000e78:	200041a5 	.word	0x200041a5
 8000e7c:	20000248 	.word	0x20000248
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <menu_vars+0x44c>)
 8000e86:	4413      	add	r3, r2
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e084      	b.n	8000f98 <menu_vars+0x440>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4a44      	ldr	r2, [pc, #272]	; (8000fa4 <menu_vars+0x44c>)
 8000e94:	4413      	add	r3, r2
 8000e96:	3302      	adds	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e07d      	b.n	8000f98 <menu_vars+0x440>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <menu_vars+0x44c>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	e076      	b.n	8000f98 <menu_vars+0x440>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4a3d      	ldr	r2, [pc, #244]	; (8000fa4 <menu_vars+0x44c>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	3304      	adds	r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	e06f      	b.n	8000f98 <menu_vars+0x440>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000eb8:	78fb      	ldrb	r3, [r7, #3]
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4a39      	ldr	r2, [pc, #228]	; (8000fa4 <menu_vars+0x44c>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	3307      	adds	r3, #7
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	e068      	b.n	8000f98 <menu_vars+0x440>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	4a36      	ldr	r2, [pc, #216]	; (8000fa4 <menu_vars+0x44c>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	3306      	adds	r3, #6
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	e061      	b.n	8000f98 <menu_vars+0x440>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	4a32      	ldr	r2, [pc, #200]	; (8000fa4 <menu_vars+0x44c>)
 8000eda:	4413      	add	r3, r2
 8000edc:	3305      	adds	r3, #5
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	e05a      	b.n	8000f98 <menu_vars+0x440>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;
 8000ee2:	78fa      	ldrb	r2, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4a2e      	ldr	r2, [pc, #184]	; (8000fa8 <menu_vars+0x450>)
 8000eee:	4413      	add	r3, r2
 8000ef0:	3305      	adds	r3, #5
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	e050      	b.n	8000f98 <menu_vars+0x440>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000ef6:	78fa      	ldrb	r2, [r7, #3]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <menu_vars+0x450>)
 8000f02:	4413      	add	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e047      	b.n	8000f98 <menu_vars+0x440>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4a25      	ldr	r2, [pc, #148]	; (8000fa8 <menu_vars+0x450>)
 8000f14:	4413      	add	r3, r2
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e03d      	b.n	8000f98 <menu_vars+0x440>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	4413      	add	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <menu_vars+0x450>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e033      	b.n	8000f98 <menu_vars+0x440>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f30:	78fa      	ldrb	r2, [r7, #3]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <menu_vars+0x450>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3303      	adds	r3, #3
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e029      	b.n	8000f98 <menu_vars+0x440>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f44:	78fa      	ldrb	r2, [r7, #3]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4a17      	ldr	r2, [pc, #92]	; (8000fac <menu_vars+0x454>)
 8000f50:	4413      	add	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	e020      	b.n	8000f98 <menu_vars+0x440>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f56:	78fa      	ldrb	r2, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4a12      	ldr	r2, [pc, #72]	; (8000fac <menu_vars+0x454>)
 8000f62:	4413      	add	r3, r2
 8000f64:	3301      	adds	r3, #1
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	e016      	b.n	8000f98 <menu_vars+0x440>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000f6a:	78fa      	ldrb	r2, [r7, #3]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <menu_vars+0x454>)
 8000f76:	4413      	add	r3, r2
 8000f78:	3304      	adds	r3, #4
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	e00c      	b.n	8000f98 <menu_vars+0x440>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000f7e:	78fa      	ldrb	r2, [r7, #3]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <menu_vars+0x454>)
 8000f8a:	4413      	add	r3, r2
 8000f8c:	3303      	adds	r3, #3
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e002      	b.n	8000f98 <menu_vars+0x440>
	default :		menu_vars_var1= NULL   ; break;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 8000f98:	693b      	ldr	r3, [r7, #16]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000248 	.word	0x20000248
 8000fa8:	200041d4 	.word	0x200041d4
 8000fac:	200036dc 	.word	0x200036dc

08000fb0 <menu_parser>:



void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0


	char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8000fb6:	4a6c      	ldr	r2, [pc, #432]	; (8001168 <menu_parser+0x1b8>)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fc0:	e883 0003 	stmia.w	r3, {r0, r1}
	char menu_string2[8]="hhhhhhhh";
 8000fc4:	4a69      	ldr	r2, [pc, #420]	; (800116c <menu_parser+0x1bc>)
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fcc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t string_counter=0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	75fb      	strb	r3, [r7, #23]

	uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8000fd4:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8000fd8:	82bb      	strh	r3, [r7, #20]


	if (string_search>menu_searchsize) {                    //this is ok
 8000fda:	4b65      	ldr	r3, [pc, #404]	; (8001170 <menu_parser+0x1c0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	8aba      	ldrh	r2, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f0c0 80bc 	bcc.w	800115e <menu_parser+0x1ae>
		return;    }    // check if bigger than search area
	//if (menu_counter>240)  return;
	memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <menu_parser+0x1c0>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b61      	ldr	r3, [pc, #388]	; (8001174 <menu_parser+0x1c4>)
 8000fee:	441a      	add	r2, r3
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	6810      	ldr	r0, [r2, #0]
 8000ff6:	6851      	ldr	r1, [r2, #4]
 8000ff8:	c303      	stmia	r3!, {r0, r1}
	////////////////////////////
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	75fb      	strb	r3, [r7, #23]
 8000ffe:	e093      	b.n	8001128 <menu_parser+0x178>

		memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	4a5d      	ldr	r2, [pc, #372]	; (8001178 <menu_parser+0x1c8>)
 8001004:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	6851      	ldr	r1, [r2, #4]
 800100e:	c303      	stmia	r3!, {r0, r1}
		if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2208      	movs	r2, #8
 8001018:	4618      	mov	r0, r3
 800101a:	f009 ff4b 	bl	800aeb4 <strncmp>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d17e      	bne.n	8001122 <menu_parser+0x172>
		{

			if ((menu_counter>110 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001024:	4b55      	ldr	r3, [pc, #340]	; (800117c <menu_parser+0x1cc>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	2b6e      	cmp	r3, #110	; 0x6e
 800102a:	d909      	bls.n	8001040 <menu_parser+0x90>
 800102c:	4b53      	ldr	r3, [pc, #332]	; (800117c <menu_parser+0x1cc>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	2b7f      	cmp	r3, #127	; 0x7f
 8001032:	d805      	bhi.n	8001040 <menu_parser+0x90>
 8001034:	4b51      	ldr	r3, [pc, #324]	; (800117c <menu_parser+0x1cc>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	3310      	adds	r3, #16
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b4f      	ldr	r3, [pc, #316]	; (800117c <menu_parser+0x1cc>)
 800103e:	801a      	strh	r2, [r3, #0]
			if((menu_counter>237)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <menu_parser+0x1cc>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2bed      	cmp	r3, #237	; 0xed
 8001046:	d909      	bls.n	800105c <menu_parser+0xac>
 8001048:	4b4c      	ldr	r3, [pc, #304]	; (800117c <menu_parser+0x1cc>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	2bff      	cmp	r3, #255	; 0xff
 800104e:	d805      	bhi.n	800105c <menu_parser+0xac>
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <menu_parser+0x1cc>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	3310      	adds	r3, #16
 8001056:	b29a      	uxth	r2, r3
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <menu_parser+0x1cc>)
 800105a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>365)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <menu_parser+0x1cc>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
 8001064:	d30a      	bcc.n	800107c <menu_parser+0xcc>
 8001066:	4b45      	ldr	r3, [pc, #276]	; (800117c <menu_parser+0x1cc>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800106e:	d205      	bcs.n	800107c <menu_parser+0xcc>
 8001070:	4b42      	ldr	r3, [pc, #264]	; (800117c <menu_parser+0x1cc>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	3310      	adds	r3, #16
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <menu_parser+0x1cc>)
 800107a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>493)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 800107c:	4b3f      	ldr	r3, [pc, #252]	; (800117c <menu_parser+0x1cc>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 8001084:	d30a      	bcc.n	800109c <menu_parser+0xec>
 8001086:	4b3d      	ldr	r3, [pc, #244]	; (800117c <menu_parser+0x1cc>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108e:	d205      	bcs.n	800109c <menu_parser+0xec>
 8001090:	4b3a      	ldr	r3, [pc, #232]	; (800117c <menu_parser+0x1cc>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	3310      	adds	r3, #16
 8001096:	b29a      	uxth	r2, r3
 8001098:	4b38      	ldr	r3, [pc, #224]	; (800117c <menu_parser+0x1cc>)
 800109a:	801a      	strh	r2, [r3, #0]
			if((menu_counter>621)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <menu_parser+0x1cc>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f240 226d 	movw	r2, #621	; 0x26d
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d90a      	bls.n	80010be <menu_parser+0x10e>
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <menu_parser+0x1cc>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80010b0:	d205      	bcs.n	80010be <menu_parser+0x10e>
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <menu_parser+0x1cc>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	3310      	adds	r3, #16
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <menu_parser+0x1cc>)
 80010bc:	801a      	strh	r2, [r3, #0]
			menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <menu_parser+0x1cc>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010ca:	18d1      	adds	r1, r2, r3
 80010cc:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <menu_parser+0x1d0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <menu_parser+0x1d4>)
 80010d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

			memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <menu_parser+0x1d0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	461a      	mov	r2, r3
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <menu_parser+0x1d8>)
 80010e2:	18d0      	adds	r0, r2, r3
 80010e4:	4b22      	ldr	r3, [pc, #136]	; (8001170 <menu_parser+0x1c0>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	3b02      	subs	r3, #2
 80010ea:	4a22      	ldr	r2, [pc, #136]	; (8001174 <menu_parser+0x1c4>)
 80010ec:	4413      	add	r3, r2
 80010ee:	2202      	movs	r2, #2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f009 fec9 	bl	800ae88 <memcpy>


			menu_title_count++;
 80010f6:	4b22      	ldr	r3, [pc, #136]	; (8001180 <menu_parser+0x1d0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <menu_parser+0x1d0>)
 8001100:	701a      	strb	r2, [r3, #0]
			menu_counter++;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <menu_parser+0x1cc>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	b29a      	uxth	r2, r3
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <menu_parser+0x1cc>)
 800110c:	801a      	strh	r2, [r3, #0]
			space_check=0;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <menu_parser+0x1dc>)
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
			string_search=string_search+8;     // advance search position
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <menu_parser+0x1c0>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	3308      	adds	r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <menu_parser+0x1c0>)
 800111e:	801a      	strh	r2, [r3, #0]

			return;}
 8001120:	e01e      	b.n	8001160 <menu_parser+0x1b0>
	for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	3301      	adds	r3, #1
 8001126:	75fb      	strb	r3, [r7, #23]
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b2b      	cmp	r3, #43	; 0x2b
 800112c:	f67f af68 	bls.w	8001000 <menu_parser+0x50>

	}

	if (space_check>1)  menu_counter++;   //this is ok
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <menu_parser+0x1dc>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d905      	bls.n	8001144 <menu_parser+0x194>
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <menu_parser+0x1cc>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b29a      	uxth	r2, r3
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <menu_parser+0x1cc>)
 8001142:	801a      	strh	r2, [r3, #0]
	space_check++;  // count empty spaces or fill characters
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <menu_parser+0x1dc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	3301      	adds	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <menu_parser+0x1dc>)
 800114e:	701a      	strb	r2, [r3, #0]
	string_search++;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <menu_parser+0x1c0>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <menu_parser+0x1c0>)
 800115a:	801a      	strh	r2, [r3, #0]
	return;
 800115c:	e000      	b.n	8001160 <menu_parser+0x1b0>
		return;    }    // check if bigger than search area
 800115e:	bf00      	nop


}
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	0800b384 	.word	0x0800b384
 800116c:	0800b38c 	.word	0x0800b38c
 8001170:	20004364 	.word	0x20004364
 8001174:	0800b474 	.word	0x0800b474
 8001178:	20000274 	.word	0x20000274
 800117c:	20004366 	.word	0x20004366
 8001180:	20004369 	.word	0x20004369
 8001184:	2000436c 	.word	0x2000436c
 8001188:	2000476c 	.word	0x2000476c
 800118c:	20004368 	.word	0x20004368

08001190 <patch_target_parse>:
void patch_target_parse(void){    // records ptr for target options , works ok
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
uint8_t skip=0;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
		for (n=0;n<10;n++){
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <patch_target_parse+0x250>)
 800119c:	2200      	movs	r2, #0
 800119e:	801a      	strh	r2, [r3, #0]
 80011a0:	e113      	b.n	80013ca <patch_target_parse+0x23a>

			uint16_t* output_hold;
			uint8_t input_hold=patch[n].input1;
 80011a2:	4b8f      	ldr	r3, [pc, #572]	; (80013e0 <patch_target_parse+0x250>)
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4a8e      	ldr	r2, [pc, #568]	; (80013e4 <patch_target_parse+0x254>)
 80011aa:	460b      	mov	r3, r1
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	717b      	strb	r3, [r7, #5]

			if (patch[n].input1>=menu_lookup_count) patch[n].input1=0;    // limit
 80011b8:	4b89      	ldr	r3, [pc, #548]	; (80013e0 <patch_target_parse+0x250>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	4a89      	ldr	r2, [pc, #548]	; (80013e4 <patch_target_parse+0x254>)
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b2b      	cmp	r3, #43	; 0x2b
 80011ce:	d90a      	bls.n	80011e6 <patch_target_parse+0x56>
 80011d0:	4b83      	ldr	r3, [pc, #524]	; (80013e0 <patch_target_parse+0x250>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4a83      	ldr	r2, [pc, #524]	; (80013e4 <patch_target_parse+0x254>)
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 80011e6:	797b      	ldrb	r3, [r7, #5]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d842      	bhi.n	8001276 <patch_target_parse+0xe6>
 80011f0:	a201      	add	r2, pc, #4	; (adr r2, 80011f8 <patch_target_parse+0x68>)
 80011f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f6:	bf00      	nop
 80011f8:	08001209 	.word	0x08001209
 80011fc:	08001223 	.word	0x08001223
 8001200:	0800123f 	.word	0x0800123f
 8001204:	0800125b 	.word	0x0800125b

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001208:	797b      	ldrb	r3, [r7, #5]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	461a      	mov	r2, r3
 8001210:	4613      	mov	r3, r2
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4a73      	ldr	r2, [pc, #460]	; (80013e8 <patch_target_parse+0x258>)
 800121a:	4413      	add	r3, r2
 800121c:	3306      	adds	r3, #6
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	e029      	b.n	8001276 <patch_target_parse+0xe6>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	4613      	mov	r3, r2
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	3318      	adds	r3, #24
 8001234:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <patch_target_parse+0x258>)
 8001236:	4413      	add	r3, r2
 8001238:	3302      	adds	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	e01b      	b.n	8001276 <patch_target_parse+0xe6>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	4613      	mov	r3, r2
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	3328      	adds	r3, #40	; 0x28
 8001250:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <patch_target_parse+0x258>)
 8001252:	4413      	add	r3, r2
 8001254:	3306      	adds	r3, #6
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	e00d      	b.n	8001276 <patch_target_parse+0xe6>
						case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4613      	mov	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	3328      	adds	r3, #40	; 0x28
 800126c:	4a5e      	ldr	r2, [pc, #376]	; (80013e8 <patch_target_parse+0x258>)
 800126e:	4413      	add	r3, r2
 8001270:	3306      	adds	r3, #6
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	bf00      	nop
						}

			patch[n].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 8001276:	4b5a      	ldr	r3, [pc, #360]	; (80013e0 <patch_target_parse+0x250>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4a59      	ldr	r2, [pc, #356]	; (80013e4 <patch_target_parse+0x254>)
 800127e:	460b      	mov	r3, r1
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	440b      	add	r3, r1
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	3320      	adds	r3, #32
 800128a:	68ba      	ldr	r2, [r7, #8]
 800128c:	601a      	str	r2, [r3, #0]


			if (patch[n].target) {  // test if above zero
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <patch_target_parse+0x250>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <patch_target_parse+0x254>)
 8001296:	460b      	mov	r3, r1
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	3304      	adds	r3, #4
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 808a 	beq.w	80013be <patch_target_parse+0x22e>


				uint8_t target_input=patch[n].target; // copy to avoid messed up pointer
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <patch_target_parse+0x250>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4a4c      	ldr	r2, [pc, #304]	; (80013e4 <patch_target_parse+0x254>)
 80012b2:	460b      	mov	r3, r1
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	440b      	add	r3, r1
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	3304      	adds	r3, #4
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	73fb      	strb	r3, [r7, #15]
 80012c6:	e00a      	b.n	80012de <patch_target_parse+0x14e>
					if (patch_skip_list[target_input]==1)  target_input++;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	4a48      	ldr	r2, [pc, #288]	; (80013ec <patch_target_parse+0x25c>)
 80012cc:	5cd3      	ldrb	r3, [r2, r3]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d102      	bne.n	80012d8 <patch_target_parse+0x148>
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	3301      	adds	r3, #1
 80012d6:	71fb      	strb	r3, [r7, #7]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	3301      	adds	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b2b      	cmp	r3, #43	; 0x2b
 80012e2:	d9f1      	bls.n	80012c8 <patch_target_parse+0x138>

				}  // test against list
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b2b      	cmp	r3, #43	; 0x2b
 80012e8:	d901      	bls.n	80012ee <patch_target_parse+0x15e>
 80012ea:	232b      	movs	r3, #43	; 0x2b
 80012ec:	71fb      	strb	r3, [r7, #7]
				if (target_input!=35)  {     // make target index is not selected
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b23      	cmp	r3, #35	; 0x23
 80012f2:	d058      	beq.n	80013a6 <patch_target_parse+0x216>


			patch[n].target=target_input; // write back corrected value
 80012f4:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <patch_target_parse+0x250>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <patch_target_parse+0x254>)
 80012fc:	460b      	mov	r3, r1
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4413      	add	r3, r2
 8001306:	3304      	adds	r3, #4
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[n].target_index;
 800130c:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <patch_target_parse+0x250>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4a34      	ldr	r2, [pc, #208]	; (80013e4 <patch_target_parse+0x254>)
 8001314:	460b      	mov	r3, r1
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	4413      	add	r3, r2
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	71bb      	strb	r3, [r7, #6]

			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	4a32      	ldr	r2, [pc, #200]	; (80013f0 <patch_target_parse+0x260>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	79ba      	ldrb	r2, [r7, #6]
 800132c:	429a      	cmp	r2, r3
 800132e:	d903      	bls.n	8001338 <patch_target_parse+0x1a8>
			{	target_index=menu_vars_index_limit[target_index]; }
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	4a2f      	ldr	r2, [pc, #188]	; (80013f0 <patch_target_parse+0x260>)
 8001334:	5cd3      	ldrb	r3, [r2, r3]
 8001336:	71bb      	strb	r3, [r7, #6]
			patch[n].target_index=target_index;
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <patch_target_parse+0x250>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	4619      	mov	r1, r3
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <patch_target_parse+0x254>)
 8001340:	460b      	mov	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	3305      	adds	r3, #5
 800134c:	79ba      	ldrb	r2, [r7, #6]
 800134e:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <patch_target_parse+0x264>)
 8001354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001358:	79ba      	ldrb	r2, [r7, #6]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fbfb 	bl	8000b58 <menu_vars>
 8001362:	6038      	str	r0, [r7, #0]

			if (target_out_ptr)           {patch[n].out_ptr =target_out_ptr;     // write ptr
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d029      	beq.n	80013be <patch_target_parse+0x22e>
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <patch_target_parse+0x250>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <patch_target_parse+0x254>)
 8001372:	460b      	mov	r3, r1
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	440b      	add	r3, r1
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	331c      	adds	r3, #28
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	601a      	str	r2, [r3, #0]
			patch[n].limiter=menu_vars_limiter[menu_vars_ref]; }
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <patch_target_parse+0x268>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	461a      	mov	r2, r3
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <patch_target_parse+0x250>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <patch_target_parse+0x26c>)
 8001390:	5c98      	ldrb	r0, [r3, r2]
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <patch_target_parse+0x254>)
 8001394:	460b      	mov	r3, r1
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	3324      	adds	r3, #36	; 0x24
 80013a0:	4602      	mov	r2, r0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e00b      	b.n	80013be <patch_target_parse+0x22e>
				}
				else patch[n].target=0;  // write back 0 if failed
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <patch_target_parse+0x250>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <patch_target_parse+0x254>)
 80013ae:	460b      	mov	r3, r1
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	3304      	adds	r3, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		for (n=0;n<10;n++){
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <patch_target_parse+0x250>)
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	3301      	adds	r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <patch_target_parse+0x250>)
 80013c8:	801a      	strh	r2, [r3, #0]
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <patch_target_parse+0x250>)
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	f67f aee7 	bls.w	80011a2 <patch_target_parse+0x12>


			}
		}

	}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000086a 	.word	0x2000086a
 80013e4:	200041d4 	.word	0x200041d4
 80013e8:	20003434 	.word	0x20003434
 80013ec:	0800ba80 	.word	0x0800ba80
 80013f0:	0800ba28 	.word	0x0800ba28
 80013f4:	20000274 	.word	0x20000274
 80013f8:	200069ad 	.word	0x200069ad
 80013fc:	0800ba54 	.word	0x0800ba54

08001400 <patch_target_replace>:


	}

}
void patch_target_replace(void){					// sttaight value replace  ,ok
 8001400:	b490      	push	{r4, r7}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
	uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001406:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <patch_target_replace+0x104>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	73bb      	strb	r3, [r7, #14]

	for (n=0;n<10;n++){
 8001410:	4b3d      	ldr	r3, [pc, #244]	; (8001508 <patch_target_replace+0x108>)
 8001412:	2200      	movs	r2, #0
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	e06b      	b.n	80014f0 <patch_target_replace+0xf0>



		if (patch[n].target) {         // check first for enable
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <patch_target_replace+0x108>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4a3b      	ldr	r2, [pc, #236]	; (800150c <patch_target_replace+0x10c>)
 8001420:	460b      	mov	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d058      	beq.n	80014e4 <patch_target_replace+0xe4>

			patch[n].output[loop_position]=*(patch[n].in1_ptr+(loop_position));   //write output here
 8001432:	4b35      	ldr	r3, [pc, #212]	; (8001508 <patch_target_replace+0x108>)
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4a34      	ldr	r2, [pc, #208]	; (800150c <patch_target_replace+0x10c>)
 800143a:	460b      	mov	r3, r1
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	440b      	add	r3, r1
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4413      	add	r3, r2
 8001444:	3320      	adds	r3, #32
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	4a2e      	ldr	r2, [pc, #184]	; (8001508 <patch_target_replace+0x108>)
 8001450:	8812      	ldrh	r2, [r2, #0]
 8001452:	4610      	mov	r0, r2
 8001454:	7bba      	ldrb	r2, [r7, #14]
 8001456:	881c      	ldrh	r4, [r3, #0]
 8001458:	492c      	ldr	r1, [pc, #176]	; (800150c <patch_target_replace+0x10c>)
 800145a:	4603      	mov	r3, r0
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4403      	add	r3, r0
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	440b      	add	r3, r1
 8001468:	4622      	mov	r2, r4
 800146a:	80da      	strh	r2, [r3, #6]


			uint8_t  *ptr_to_modify =patch[n].out_ptr;       // select address , not always 8 bit ,ok
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <patch_target_replace+0x108>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	4a26      	ldr	r2, [pc, #152]	; (800150c <patch_target_replace+0x10c>)
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4413      	add	r3, r2
 800147e:	331c      	adds	r3, #28
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	60bb      	str	r3, [r7, #8]
			uint16_t lfo_out_temp=  (patch[n].output [loop_position])>>8;  // 0-256,
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <patch_target_replace+0x108>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	7bba      	ldrb	r2, [r7, #14]
 800148c:	491f      	ldr	r1, [pc, #124]	; (800150c <patch_target_replace+0x10c>)
 800148e:	4603      	mov	r3, r0
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4403      	add	r3, r0
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	88db      	ldrh	r3, [r3, #6]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	80fb      	strh	r3, [r7, #6]
			uint8_t lfo_mod1=ptr_to_modify; //ok
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	717b      	strb	r3, [r7, #5]

			uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	73fb      	strb	r3, [r7, #15]

			if (var_replaced>patch[n].limiter) var_replaced=patch[n].limiter;  // limit lfo output
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <patch_target_replace+0x108>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <patch_target_replace+0x10c>)
 80014b2:	460b      	mov	r3, r1
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4413      	add	r3, r2
 80014bc:	3324      	adds	r3, #36	; 0x24
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d90b      	bls.n	80014de <patch_target_replace+0xde>
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <patch_target_replace+0x108>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <patch_target_replace+0x10c>)
 80014ce:	460b      	mov	r3, r1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	3324      	adds	r3, #36	; 0x24
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	73fb      	strb	r3, [r7, #15]

			*ptr_to_modify =var_replaced;   // replace original value,ok
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	701a      	strb	r2, [r3, #0]
	for (n=0;n<10;n++){
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <patch_target_replace+0x108>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	3301      	adds	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <patch_target_replace+0x108>)
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <patch_target_replace+0x108>)
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d98f      	bls.n	8001418 <patch_target_replace+0x18>
		}


	}

}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc90      	pop	{r4, r7}
 8001502:	4770      	bx	lr
 8001504:	20004984 	.word	0x20004984
 8001508:	2000086a 	.word	0x2000086a
 800150c:	200041d4 	.word	0x200041d4

08001510 <SPI_command>:



void SPI_command(void){
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <SPI_command+0x68>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d128      	bne.n	8001570 <SPI_command+0x60>
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <SPI_command+0x6c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d124      	bne.n	8001570 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <SPI_command+0x70>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <SPI_command+0x2a>
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <SPI_command+0x74>)
 8001534:	22f8      	movs	r2, #248	; 0xf8
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e002      	b.n	8001540 <SPI_command+0x30>
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <SPI_command+0x74>)
 800153c:	22fa      	movs	r2, #250	; 0xfa
 800153e:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <SPI_command+0x74>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <SPI_command+0x70>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	b29b      	uxth	r3, r3
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	b2db      	uxtb	r3, r3
 8001552:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <SPI_command+0x70>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	b2db      	uxtb	r3, r3
 800155c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 800155e:	4639      	mov	r1, r7
 8001560:	2303      	movs	r3, #3
 8001562:	2203      	movs	r2, #3
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <SPI_command+0x78>)
 8001566:	f007 fa70 	bl	8008a4a <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800156a:	4b03      	ldr	r3, [pc, #12]	; (8001578 <SPI_command+0x68>)
 800156c:	2201      	movs	r2, #1
 800156e:	801a      	strh	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200024d2 	.word	0x200024d2
 800157c:	200024d8 	.word	0x200024d8
 8001580:	200024d6 	.word	0x200024d6
 8001584:	200024d4 	.word	0x200024d4
 8001588:	20007108 	.word	0x20007108

0800158c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

	{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
		time_proc++;
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800159e:	801a      	strh	r2, [r3, #0]
		//if (((sample_point==511) || (sample_point==1022)) && (bank_write)  ) error_count++;

		if (sample_point==511) {bank_write=1; sample_pointD=0;  }
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d105      	bne.n	80015ba <HAL_TIM_PeriodElapsedCallback+0x2e>
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	801a      	strh	r2, [r3, #0]
 80015b4:	4b26      	ldr	r3, [pc, #152]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	801a      	strh	r2, [r3, #0]
		if (sample_point==1022) {bank_write=1; sample_pointD=512; }
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d106      	bne.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x4a>
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	801a      	strh	r2, [r3, #0]
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	801a      	strh	r2, [r3, #0]
		sample_point=sample_point & 1023;// this is 1
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015e4:	801a      	strh	r2, [r3, #0]
		play_hold=play_sample[sample_point<<1]; // this is 2
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80015f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80015f6:	801a      	strh	r2, [r3, #0]
		play_hold2=play_sample[(sample_point<<1)+1];
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	3301      	adds	r3, #1
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001604:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800160a:	801a      	strh	r2, [r3, #0]
		if(TIM3==htim->Instance)			// nothing here is consistent ?
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d110      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0xac>
	{


	TIM3->CCR1=play_hold ;  // keep readin sample storage
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b29a      	uxth	r2, r3
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001628:	639a      	str	r2, [r3, #56]	; 0x38

	sample_point++; //this needs to be here or too fast and wrong sample rate
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001636:	801a      	strh	r2, [r3, #0]

	}

	}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	20003430 	.word	0x20003430
 8001648:	20001894 	.word	0x20001894
 800164c:	200001b2 	.word	0x200001b2
 8001650:	2000189a 	.word	0x2000189a
 8001654:	20000890 	.word	0x20000890
 8001658:	20001896 	.word	0x20001896
 800165c:	20001898 	.word	0x20001898
 8001660:	40000400 	.word	0x40000400

08001664 <analoginputloopb>:



void analoginputloopb(void){  //works ,getting obsolete
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0


	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <analoginputloopb+0x14c>)
 800166c:	889b      	ldrh	r3, [r3, #4]
 800166e:	091b      	lsrs	r3, r3, #4
 8001670:	b29b      	uxth	r3, r3
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b4f      	ldr	r3, [pc, #316]	; (80017b4 <analoginputloopb+0x150>)
 8001676:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 8001678:	4b4d      	ldr	r3, [pc, #308]	; (80017b0 <analoginputloopb+0x14c>)
 800167a:	889b      	ldrh	r3, [r3, #4]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <analoginputloopb+0x154>)
 8001686:	701a      	strb	r2, [r3, #0]


		cursor_menu[1]=0;
 8001688:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <analoginputloopb+0x14c>)
 800168a:	2200      	movs	r2, #0
 800168c:	805a      	strh	r2, [r3, #2]

		cursor_menu[2]=enc2_dir;
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <analoginputloopb+0x158>)
 8001690:	881a      	ldrh	r2, [r3, #0]
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <analoginputloopb+0x14c>)
 8001694:	809a      	strh	r2, [r3, #4]


	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8001696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	085b      	lsrs	r3, r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <analoginputloopb+0x15c>)
 80016a2:	801a      	strh	r2, [r3, #0]
	enc2_store[enc2_store_count]=(TIM4->CNT)&255;  // read counter tim4, noisy
 80016a4:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <analoginputloopb+0x160>)
 80016a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016a8:	4b47      	ldr	r3, [pc, #284]	; (80017c8 <analoginputloopb+0x164>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	b2c9      	uxtb	r1, r1
 80016b0:	4b46      	ldr	r3, [pc, #280]	; (80017cc <analoginputloopb+0x168>)
 80016b2:	5499      	strb	r1, [r3, r2]
	uint16_t enc2_store2=0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	80fb      	strh	r3, [r7, #6]
	uint16_t enc2_store3=0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	80bb      	strh	r3, [r7, #4]
	if (enc2_store_count==3) enc2_store_count=0; else enc2_store_count++;
 80016bc:	4b42      	ldr	r3, [pc, #264]	; (80017c8 <analoginputloopb+0x164>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d103      	bne.n	80016cc <analoginputloopb+0x68>
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <analoginputloopb+0x164>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	e005      	b.n	80016d8 <analoginputloopb+0x74>
 80016cc:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <analoginputloopb+0x164>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b3c      	ldr	r3, [pc, #240]	; (80017c8 <analoginputloopb+0x164>)
 80016d6:	701a      	strb	r2, [r3, #0]

	enc2_store2=enc2_store[0]+enc2_store[1]+enc2_store[2]+enc2_store[3];     // average filter hopefully
 80016d8:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <analoginputloopb+0x168>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <analoginputloopb+0x168>)
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <analoginputloopb+0x168>)
 80016ea:	789b      	ldrb	r3, [r3, #2]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b36      	ldr	r3, [pc, #216]	; (80017cc <analoginputloopb+0x168>)
 80016f4:	78db      	ldrb	r3, [r3, #3]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	80fb      	strh	r3, [r7, #6]
	enc2_store3=enc2_store2>>3;
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	80bb      	strh	r3, [r7, #4]
	enc2_temp=enc2_store3;
 8001702:	4a33      	ldr	r2, [pc, #204]	; (80017d0 <analoginputloopb+0x16c>)
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	8013      	strh	r3, [r2, #0]

	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <analoginputloopb+0x15c>)
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <analoginputloopb+0x170>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d908      	bls.n	8001726 <analoginputloopb+0xc2>
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <analoginputloopb+0x174>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	b21a      	sxth	r2, r3
 8001722:	4b2d      	ldr	r3, [pc, #180]	; (80017d8 <analoginputloopb+0x174>)
 8001724:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <analoginputloopb+0x15c>)
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <analoginputloopb+0x170>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d208      	bcs.n	8001744 <analoginputloopb+0xe0>
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <analoginputloopb+0x174>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	b29b      	uxth	r3, r3
 800173a:	3301      	adds	r3, #1
 800173c:	b29b      	uxth	r3, r3
 800173e:	b21a      	sxth	r2, r3
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <analoginputloopb+0x174>)
 8001742:	801a      	strh	r2, [r3, #0]


  if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere
 8001744:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <analoginputloopb+0x16c>)
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d303      	bcc.n	8001756 <analoginputloopb+0xf2>
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <analoginputloopb+0x16c>)
 8001750:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001754:	801a      	strh	r2, [r3, #0]
	if (enc_dir>255) enc_dir=255;
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <analoginputloopb+0x174>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	2bff      	cmp	r3, #255	; 0xff
 800175e:	dd02      	ble.n	8001766 <analoginputloopb+0x102>
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <analoginputloopb+0x174>)
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <analoginputloopb+0x174>)
 8001768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176c:	2b00      	cmp	r3, #0
 800176e:	da02      	bge.n	8001776 <analoginputloopb+0x112>
 8001770:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <analoginputloopb+0x174>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]

			enc_tempB=enc_temp;
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <analoginputloopb+0x15c>)
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <analoginputloopb+0x170>)
 800177c:	801a      	strh	r2, [r3, #0]

			enc2_dir=enc2_temp; //temp to try source data
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <analoginputloopb+0x16c>)
 8001780:	881a      	ldrh	r2, [r3, #0]
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <analoginputloopb+0x158>)
 8001784:	801a      	strh	r2, [r3, #0]


					enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <analoginputloopb+0x16c>)
 8001788:	881a      	ldrh	r2, [r3, #0]
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <analoginputloopb+0x178>)
 800178c:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <analoginputloopb+0x17c>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <analoginputloopb+0x180>)
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <analoginputloopb+0x17c>)
 800179a:	8812      	ldrh	r2, [r2, #0]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	b2d9      	uxtb	r1, r3
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <analoginputloopb+0x184>)
 80017a2:	5499      	strb	r1, [r3, r2]


}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	200024dc 	.word	0x200024dc
 80017b4:	20000862 	.word	0x20000862
 80017b8:	20000863 	.word	0x20000863
 80017bc:	200024ca 	.word	0x200024ca
 80017c0:	200024c2 	.word	0x200024c2
 80017c4:	40000800 	.word	0x40000800
 80017c8:	20004981 	.word	0x20004981
 80017cc:	2000497c 	.word	0x2000497c
 80017d0:	200024c6 	.word	0x200024c6
 80017d4:	200024c4 	.word	0x200024c4
 80017d8:	200024cc 	.word	0x200024cc
 80017dc:	200024c8 	.word	0x200024c8
 80017e0:	20000866 	.word	0x20000866
 80017e4:	20000658 	.word	0x20000658
 80017e8:	20000458 	.word	0x20000458

080017ec <display_init>:
void display_init(void){
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <display_init+0x90>)
 80017f4:	1d3c      	adds	r4, r7, #4
 80017f6:	461d      	mov	r5, r3
 80017f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001804:	4b1e      	ldr	r3, [pc, #120]	; (8001880 <display_init+0x94>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d132      	bne.n	8001872 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <display_init+0x98>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	3b06      	subs	r3, #6
 8001814:	b29a      	uxth	r2, r3
 8001816:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <display_init+0x9c>)
 8001818:	801a      	strh	r2, [r3, #0]
 800181a:	f000 fbb9 	bl	8001f90 <displayBuffer2>
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <display_init+0x9c>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <display_init+0xa0>)
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	b29a      	uxth	r2, r3
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <display_init+0xa4>)
 800182c:	801a      	strh	r2, [r3, #0]
 800182e:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <display_init+0x98>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d80b      	bhi.n	8001850 <display_init+0x64>
 8001838:	2003      	movs	r0, #3
 800183a:	f003 fd37 	bl	80052ac <HAL_Delay>
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <display_init+0x98>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	3328      	adds	r3, #40	; 0x28
 8001846:	443b      	add	r3, r7
 8001848:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <display_init+0xa4>)
 800184e:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <display_init+0x98>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <display_init+0x98>)
 800185a:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <display_init+0x94>)
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	f7ff fe55 	bl	8001510 <SPI_command>
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <display_init+0x94>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <display_init+0xa8>)
 800186e:	2200      	movs	r2, #0
 8001870:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	bf00      	nop
 800187c:	0800b394 	.word	0x0800b394
 8001880:	200024d8 	.word	0x200024d8
 8001884:	200024d9 	.word	0x200024d9
 8001888:	200024da 	.word	0x200024da
 800188c:	20000000 	.word	0x20000000
 8001890:	200024d6 	.word	0x200024d6
 8001894:	200024d2 	.word	0x200024d2

08001898 <gfx_send>:


void gfx_send(void){         // send spi to lcd from gfx ram
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 800189e:	2300      	movs	r3, #0
 80018a0:	71fb      	strb	r3, [r7, #7]
			uint8_t spi_store3=gfx_ram[gfx_send_counter];
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <gfx_send+0x9c>)
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b23      	ldr	r3, [pc, #140]	; (8001938 <gfx_send+0xa0>)
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	71bb      	strb	r3, [r7, #6]
	if (gfx_send_counter2>1) {spi_store2=250;
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <gfx_send+0xa4>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d902      	bls.n	80018bc <gfx_send+0x24>
 80018b6:	23fa      	movs	r3, #250	; 0xfa
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e001      	b.n	80018c0 <gfx_send+0x28>

			}

			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80018bc:	23f8      	movs	r3, #248	; 0xf8
 80018be:	71fb      	strb	r3, [r7, #7]


					spi_store[0]=spi_store2;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	703b      	strb	r3, [r7, #0]
					spi_store[1]=((spi_store3>>4)<<4);
 80018c4:	79bb      	ldrb	r3, [r7, #6]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	707b      	strb	r3, [r7, #1]
					spi_store[2]=((spi_store3&15)<<4);
 80018d0:	79bb      	ldrb	r3, [r7, #6]
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	70bb      	strb	r3, [r7, #2]


						HAL_SPI_Transmit(&hspi2,spi_store,3,3);  // ok
 80018d8:	4639      	mov	r1, r7
 80018da:	2303      	movs	r3, #3
 80018dc:	2203      	movs	r2, #3
 80018de:	4818      	ldr	r0, [pc, #96]	; (8001940 <gfx_send+0xa8>)
 80018e0:	f007 f8b3 	bl	8008a4a <HAL_SPI_Transmit>
					if (gfx_send_counter2==17 ) { gfx_send_counter2=0;    } else gfx_send_counter2++; // check elsewhere if changing gfx_send_counter
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <gfx_send+0xa4>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b11      	cmp	r3, #17
 80018ea:	d103      	bne.n	80018f4 <gfx_send+0x5c>
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <gfx_send+0xa4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	e005      	b.n	8001900 <gfx_send+0x68>
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <gfx_send+0xa4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <gfx_send+0xa4>)
 80018fe:	701a      	strb	r2, [r3, #0]
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <gfx_send+0x9c>)
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	f240 427f 	movw	r2, #1151	; 0x47f
 8001908:	4293      	cmp	r3, r2
 800190a:	d109      	bne.n	8001920 <gfx_send+0x88>
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <gfx_send+0x9c>)
 800190e:	2200      	movs	r2, #0
 8001910:	801a      	strh	r2, [r3, #0]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <gfx_send+0xac>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <gfx_send+0xa4>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]

		}
 800191e:	e005      	b.n	800192c <gfx_send+0x94>
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <gfx_send+0x9c>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <gfx_send+0x9c>)
 800192a:	801a      	strh	r2, [r3, #0]
		}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20003006 	.word	0x20003006
 8001938:	20002b84 	.word	0x20002b84
 800193c:	20003008 	.word	0x20003008
 8001940:	20007108 	.word	0x20007108
 8001944:	20003016 	.word	0x20003016

08001948 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <gfx_clear+0x6c>)
 800194e:	2200      	movs	r2, #0
 8001950:	801a      	strh	r2, [r3, #0]
 8001952:	e01c      	b.n	800198e <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <gfx_clear+0x70>)
 8001956:	2202      	movs	r2, #2
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	e00e      	b.n	800197a <gfx_clear+0x32>
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <gfx_clear+0x6c>)
 800195e:	881b      	ldrh	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <gfx_clear+0x70>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <gfx_clear+0x74>)
 800196a:	2100      	movs	r1, #0
 800196c:	54d1      	strb	r1, [r2, r3]
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <gfx_clear+0x70>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <gfx_clear+0x70>)
 8001978:	801a      	strh	r2, [r3, #0]
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <gfx_clear+0x70>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	2b11      	cmp	r3, #17
 8001980:	d9ec      	bls.n	800195c <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <gfx_clear+0x6c>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	3312      	adds	r3, #18
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <gfx_clear+0x6c>)
 800198c:	801a      	strh	r2, [r3, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <gfx_clear+0x6c>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8001996:	d3dd      	bcc.n	8001954 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <gfx_clear+0x78>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <gfx_clear+0x7c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <gfx_clear+0x80>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]

}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	2000086a 	.word	0x2000086a
 80019b8:	2000088c 	.word	0x2000088c
 80019bc:	20002b84 	.word	0x20002b84
 80019c0:	2000300a 	.word	0x2000300a
 80019c4:	20003006 	.word	0x20003006
 80019c8:	20003016 	.word	0x20003016

080019cc <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80019d6:	2300      	movs	r3, #0
 80019d8:	80fb      	strh	r3, [r7, #6]
 80019da:	e006      	b.n	80019ea <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <display_clear+0x38>)
 80019e0:	212f      	movs	r1, #47	; 0x2f
 80019e2:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<default_menu3_size;disp_counter++){
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	3301      	adds	r3, #1
 80019e8:	80fb      	strh	r3, [r7, #6]
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <display_clear+0x3c>)
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d3f3      	bcc.n	80019dc <display_clear+0x10>
	}


}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20006bb4 	.word	0x20006bb4
 8001a08:	2000497a 	.word	0x2000497a

08001a0c <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

	gfx_clear_flag=0;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <display_generate+0x48>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	for (i=0;i<18;i++) {
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <display_generate+0x4c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
 8001a1c:	e009      	b.n	8001a32 <display_generate+0x26>
	display_process();
 8001a1e:	f000 f863 	bl	8001ae8 <display_process>
		  displayBuffer2();} // 5 cycles max for the lot or  0.2ms
 8001a22:	f000 fab5 	bl	8001f90 <displayBuffer2>
	for (i=0;i<18;i++) {
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <display_generate+0x4c>)
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <display_generate+0x4c>)
 8001a30:	801a      	strh	r2, [r3, #0]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <display_generate+0x4c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	2b11      	cmp	r3, #17
 8001a38:	d9f1      	bls.n	8001a1e <display_generate+0x12>
	 if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <display_generate+0x48>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <display_generate+0x3c>
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <display_generate+0x50>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
	 disp_end=0;   ///reset till next full page
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <display_generate+0x54>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20004986 	.word	0x20004986
 8001a58:	2000088c 	.word	0x2000088c
 8001a5c:	2000300a 	.word	0x2000300a
 8001a60:	20003016 	.word	0x20003016

08001a64 <display_fill>:

void display_fill(void)  {     // full update of gfx memory, ok
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <display_fill+0x6c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
uint16_t fill_counter= 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	80fb      	strh	r3, [r7, #6]
uint16_t init_b1=init_b;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <display_fill+0x70>)
 8001a76:	881b      	ldrh	r3, [r3, #0]
 8001a78:	80bb      	strh	r3, [r7, #4]
uint16_t init_bs=init_b&896;   // get msb
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <display_fill+0x70>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001a82:	807b      	strh	r3, [r7, #2]
fill_counter=fill_counter+init_bs; // add msb from init b
 8001a84:	88fa      	ldrh	r2, [r7, #6]
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	4413      	add	r3, r2
 8001a8a:	80fb      	strh	r3, [r7, #6]

while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001a8c:	e00a      	b.n	8001aa4 <display_fill+0x40>
{
	init_b=fill_counter; // upcount
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <display_fill+0x70>)
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	8013      	strh	r3, [r2, #0]

	disp_stepper=1;   // first character
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <display_fill+0x74>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
	displayBuffer2();	//read default menu
 8001a9a:	f000 fa79 	bl	8001f90 <displayBuffer2>
	fill_counter++;
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	80fb      	strh	r3, [r7, #6]
while ((fill_counter&896)==init_bs)   // skip when over a page something  127+
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	f403 7260 	and.w	r2, r3, #896	; 0x380
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d0ee      	beq.n	8001a8e <display_fill+0x2a>
}
init_b=init_b1; // write back original value
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <display_fill+0x70>)
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	8013      	strh	r3, [r2, #0]
gfx_send_swap=0;  // disable line skip
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <display_fill+0x78>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <display_fill+0x7c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <display_fill+0x80>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]


	}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20003017 	.word	0x20003017
 8001ad4:	200024da 	.word	0x200024da
 8001ad8:	200001b6 	.word	0x200001b6
 8001adc:	2000300a 	.word	0x2000300a
 8001ae0:	20003006 	.word	0x20003006
 8001ae4:	20003016 	.word	0x20003016

08001ae8 <display_process>:



void display_process(void){							// keep data processing here
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
uint16_t feedback_loc=(init_b&896)+107;
 8001aee:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <display_process+0x208>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	336b      	adds	r3, #107	; 0x6b
 8001afa:	81bb      	strh	r3, [r7, #12]

	if ((enc2_tempC==enc2_dir) && (!enc2_add))  {
 8001afc:	4b7d      	ldr	r3, [pc, #500]	; (8001cf4 <display_process+0x20c>)
 8001afe:	f993 3000 	ldrsb.w	r3, [r3]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b7c      	ldr	r3, [pc, #496]	; (8001cf8 <display_process+0x210>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d112      	bne.n	8001b32 <display_process+0x4a>
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <display_process+0x214>)
 8001b0e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10d      	bne.n	8001b32 <display_process+0x4a>
		if ((disp_stepper==5)&&(!target_display))  {enc2_add=2; 	disp_stepper=17;}   	 // wait till enc2_dir  hasn't changed ,jump and then change feedback
 8001b16:	4b7a      	ldr	r3, [pc, #488]	; (8001d00 <display_process+0x218>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d109      	bne.n	8001b32 <display_process+0x4a>
 8001b1e:	4b79      	ldr	r3, [pc, #484]	; (8001d04 <display_process+0x21c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d105      	bne.n	8001b32 <display_process+0x4a>
 8001b26:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <display_process+0x214>)
 8001b28:	2202      	movs	r2, #2
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	4b74      	ldr	r3, [pc, #464]	; (8001d00 <display_process+0x218>)
 8001b2e:	2211      	movs	r2, #17
 8001b30:	701a      	strb	r2, [r3, #0]
			}

	if (disp_stepper>1)	init_b=feedback_loc+16+(disp_stepper);  // write lcd3
 8001b32:	4b73      	ldr	r3, [pc, #460]	; (8001d00 <display_process+0x218>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d909      	bls.n	8001b4e <display_process+0x66>
 8001b3a:	4b71      	ldr	r3, [pc, #452]	; (8001d00 <display_process+0x218>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	89bb      	ldrh	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3310      	adds	r3, #16
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <display_process+0x208>)
 8001b4c:	801a      	strh	r2, [r3, #0]
	if (disp_stepper>4)	init_b=feedback_loc+(disp_stepper);  // write feedback line
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <display_process+0x218>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d907      	bls.n	8001b66 <display_process+0x7e>
 8001b56:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <display_process+0x218>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	89bb      	ldrh	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <display_process+0x208>)
 8001b64:	801a      	strh	r2, [r3, #0]

	if ((lcd_temp!=enc_dir)  && (enc2_tempC==enc2_dir) )   {*menu_vars_var=enc_dir;   // enc2_dir =same enc_dir=changed
 8001b66:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <display_process+0x220>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <display_process+0x224>)
 8001b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d014      	beq.n	8001ba0 <display_process+0xb8>
 8001b76:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <display_process+0x20c>)
 8001b78:	f993 3000 	ldrsb.w	r3, [r3]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <display_process+0x210>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d10c      	bne.n	8001ba0 <display_process+0xb8>
 8001b86:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <display_process+0x224>)
 8001b88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b8c:	4b60      	ldr	r3, [pc, #384]	; (8001d10 <display_process+0x228>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	701a      	strb	r2, [r3, #0]
	lcd_temp=enc_dir;  }
 8001b94:	4b5d      	ldr	r3, [pc, #372]	; (8001d0c <display_process+0x224>)
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b5a      	ldr	r3, [pc, #360]	; (8001d08 <display_process+0x220>)
 8001b9e:	701a      	strb	r2, [r3, #0]



	if ((disp_stepper==0) && (enc2_tempC!=enc2_dir) && (!enc2_add))  {      // wait till loop end , ok
 8001ba0:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <display_process+0x218>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 8082 	bne.w	8001cae <display_process+0x1c6>
 8001baa:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <display_process+0x20c>)
 8001bac:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <display_process+0x210>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d079      	beq.n	8001cae <display_process+0x1c6>
 8001bba:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <display_process+0x214>)
 8001bbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d174      	bne.n	8001cae <display_process+0x1c6>

	if  (enc2_tempC<enc2_dir)	 enc2_add=1;   									// use this to set up or down count for variables , might change
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <display_process+0x20c>)
 8001bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b4a      	ldr	r3, [pc, #296]	; (8001cf8 <display_process+0x210>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	da02      	bge.n	8001bda <display_process+0xf2>
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <display_process+0x214>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC>enc2_dir)	 enc2_add=-1;    // slow but 1 step at a time
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <display_process+0x20c>)
 8001bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b45      	ldr	r3, [pc, #276]	; (8001cf8 <display_process+0x210>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dd02      	ble.n	8001bf0 <display_process+0x108>
 8001bea:	4b44      	ldr	r3, [pc, #272]	; (8001cfc <display_process+0x214>)
 8001bec:	22ff      	movs	r2, #255	; 0xff
 8001bee:	701a      	strb	r2, [r3, #0]
		if  (enc2_tempC<enc2_dir)	 enc2_add=+(enc2_dir-enc2_tempC);   	//  fast but skips
 8001bf0:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <display_process+0x20c>)
 8001bf2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <display_process+0x210>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	da0b      	bge.n	8001c18 <display_process+0x130>
 8001c00:	4b3d      	ldr	r3, [pc, #244]	; (8001cf8 <display_process+0x210>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <display_process+0x20c>)
 8001c08:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <display_process+0x214>)
 8001c16:	701a      	strb	r2, [r3, #0]

		if  (enc2_tempC>enc2_dir)	 enc2_add=-(enc2_tempC-enc2_dir);
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <display_process+0x20c>)
 8001c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b35      	ldr	r3, [pc, #212]	; (8001cf8 <display_process+0x210>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	dd0b      	ble.n	8001c40 <display_process+0x158>
 8001c28:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <display_process+0x210>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <display_process+0x20c>)
 8001c30:	f993 3000 	ldrsb.w	r3, [r3]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	b25a      	sxtb	r2, r3
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <display_process+0x214>)
 8001c3e:	701a      	strb	r2, [r3, #0]


		enc2_tempC=enc2_dir;	   // loop back until change
 8001c40:	4b2d      	ldr	r3, [pc, #180]	; (8001cf8 <display_process+0x210>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b25a      	sxtb	r2, r3
 8001c46:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <display_process+0x20c>)
 8001c48:	701a      	strb	r2, [r3, #0]
		if ((enc_out1>=0)  &&  (enc_out1<=menu_title_count))    {enc_out1=enc_out1+enc2_add;}   // count up or down within limits
 8001c4a:	4b32      	ldr	r3, [pc, #200]	; (8001d14 <display_process+0x22c>)
 8001c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db14      	blt.n	8001c7e <display_process+0x196>
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <display_process+0x22c>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	; (8001d18 <display_process+0x230>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dc0c      	bgt.n	8001c7e <display_process+0x196>
 8001c64:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <display_process+0x214>)
 8001c66:	f993 3000 	ldrsb.w	r3, [r3]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b29      	ldr	r3, [pc, #164]	; (8001d14 <display_process+0x22c>)
 8001c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <display_process+0x22c>)
 8001c7c:	801a      	strh	r2, [r3, #0]
		if (enc_out1<0)  {  enc_out1=menu_title_count; }
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <display_process+0x22c>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da04      	bge.n	8001c92 <display_process+0x1aa>
 8001c88:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <display_process+0x230>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <display_process+0x22c>)
 8001c90:	801a      	strh	r2, [r3, #0]
		if (enc_out1>menu_title_count) enc_out1=0;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <display_process+0x22c>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <display_process+0x230>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dd02      	ble.n	8001ca8 <display_process+0x1c0>
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <display_process+0x22c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
		enc2_add=2;
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <display_process+0x214>)
 8001caa:	2202      	movs	r2, #2
 8001cac:	701a      	strb	r2, [r3, #0]

	}


	if ((disp_stepper==0) && (enc2_add==2))			// skip if no input for enc2 , also maybe wait till enc2 stopped moving
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <display_process+0x218>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d170      	bne.n	8001d98 <display_process+0x2b0>
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <display_process+0x214>)
 8001cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d16b      	bne.n	8001d98 <display_process+0x2b0>
	{



	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;   // look up up menu_titles_final
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <display_process+0x22c>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <display_process+0x234>)
 8001cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	72fb      	strb	r3, [r7, #11]
	if (crap_hold9==5) target_display=1;   // check if LFO.target is on cursor , may use for other things
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d103      	bne.n	8001ce0 <display_process+0x1f8>
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <display_process+0x21c>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	e022      	b.n	8001d26 <display_process+0x23e>
	else if (crap_hold9==36) target_display=2;   else target_display=0;
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
 8001ce2:	2b24      	cmp	r3, #36	; 0x24
 8001ce4:	d11c      	bne.n	8001d20 <display_process+0x238>
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <display_process+0x21c>)
 8001ce8:	2202      	movs	r2, #2
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	e01b      	b.n	8001d26 <display_process+0x23e>
 8001cee:	bf00      	nop
 8001cf0:	200024da 	.word	0x200024da
 8001cf4:	200001b4 	.word	0x200001b4
 8001cf8:	200024ca 	.word	0x200024ca
 8001cfc:	200001b5 	.word	0x200001b5
 8001d00:	200001b6 	.word	0x200001b6
 8001d04:	20004983 	.word	0x20004983
 8001d08:	20004982 	.word	0x20004982
 8001d0c:	200024cc 	.word	0x200024cc
 8001d10:	2000496c 	.word	0x2000496c
 8001d14:	20000268 	.word	0x20000268
 8001d18:	20004369 	.word	0x20004369
 8001d1c:	2000436c 	.word	0x2000436c
 8001d20:	4b87      	ldr	r3, [pc, #540]	; (8001f40 <display_process+0x458>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]

	// fetch values for last line or cursor

	 memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8001d26:	89bb      	ldrh	r3, [r7, #12]
 8001d28:	3308      	adds	r3, #8
 8001d2a:	4a86      	ldr	r2, [pc, #536]	; (8001f44 <display_process+0x45c>)
 8001d2c:	1898      	adds	r0, r3, r2
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4a85      	ldr	r2, [pc, #532]	; (8001f48 <display_process+0x460>)
 8001d34:	4413      	add	r3, r2
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f009 f8a4 	bl	800ae88 <memcpy>
	 memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4a80      	ldr	r2, [pc, #512]	; (8001f48 <display_process+0x460>)
 8001d46:	4413      	add	r3, r2
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <display_process+0x464>)
 8001d4c:	6810      	ldr	r0, [r2, #0]
 8001d4e:	6851      	ldr	r1, [r2, #4]
 8001d50:	c303      	stmia	r3!, {r0, r1}

	 char temp_char[]="  ";
 8001d52:	4a7f      	ldr	r2, [pc, #508]	; (8001f50 <display_process+0x468>)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	8019      	strh	r1, [r3, #0]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	0c12      	lsrs	r2, r2, #16
 8001d60:	701a      	strb	r2, [r3, #0]
	 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <display_process+0x46c>)
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <display_process+0x470>)
 8001d6e:	4413      	add	r3, r2
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	80bb      	strh	r3, [r7, #4]
	 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f009 f857 	bl	800ae2c <atoi>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <display_process+0x474>)
 8001d84:	701a      	strb	r2, [r3, #0]


	 menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8001d86:	4b75      	ldr	r3, [pc, #468]	; (8001f5c <display_process+0x474>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	486f      	ldr	r0, [pc, #444]	; (8001f4c <display_process+0x464>)
 8001d8e:	f7fe fee3 	bl	8000b58 <menu_vars>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4a72      	ldr	r2, [pc, #456]	; (8001f60 <display_process+0x478>)
 8001d96:	6013      	str	r3, [r2, #0]

	    // grab value on ptr address , also write first char , ok

	}

	if ((disp_stepper==0) || (disp_stepper==1))   // repeat first character
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <display_process+0x47c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <display_process+0x2c0>
 8001da0:	4b70      	ldr	r3, [pc, #448]	; (8001f64 <display_process+0x47c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d14d      	bne.n	8001e44 <display_process+0x35c>
	{


		uint16_t init_holder=init_b;
 8001da8:	4b6f      	ldr	r3, [pc, #444]	; (8001f68 <display_process+0x480>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	813b      	strh	r3, [r7, #8]

		init_b= menu_title_lut[enc_out1];    // this only grabs menu_title_count (&255)      , problem maybe here
 8001dae:	4b69      	ldr	r3, [pc, #420]	; (8001f54 <display_process+0x46c>)
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <display_process+0x484>)
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	4b6a      	ldr	r3, [pc, #424]	; (8001f68 <display_process+0x480>)
 8001dc0:	801a      	strh	r2, [r3, #0]
		//	if (init_b>(feedback_loc+3) ) init_b=init_b+16;// skip feedback line
		if ((init_b&896)!=(init_holder&896)) {display_fill(); gfx_clear_flag=1; } // detect x over , not perfect
 8001dc2:	4b69      	ldr	r3, [pc, #420]	; (8001f68 <display_process+0x480>)
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	893b      	ldrh	r3, [r7, #8]
 8001dc8:	4053      	eors	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <display_process+0x2f6>
 8001dd4:	f7ff fe46 	bl	8001a64 <display_fill>
 8001dd8:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <display_process+0x488>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]

		lcd_out3=*menu_vars_var;
 8001dde:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <display_process+0x478>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <display_process+0x48c>)
 8001de8:	801a      	strh	r2, [r3, #0]
		div_limit=lcd_out3;
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <display_process+0x48c>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b61      	ldr	r3, [pc, #388]	; (8001f78 <display_process+0x490>)
 8001df2:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>10)							div_limit= lcd_out3>>2;
 8001df4:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <display_process+0x48c>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b0a      	cmp	r3, #10
 8001dfa:	d906      	bls.n	8001e0a <display_process+0x322>
 8001dfc:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <display_process+0x48c>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	089b      	lsrs	r3, r3, #2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b5c      	ldr	r3, [pc, #368]	; (8001f78 <display_process+0x490>)
 8001e08:	701a      	strb	r2, [r3, #0]
		if (lcd_out3>40)							div_limit= lcd_out3>>5;
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <display_process+0x48c>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	2b28      	cmp	r3, #40	; 0x28
 8001e10:	d906      	bls.n	8001e20 <display_process+0x338>
 8001e12:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <display_process+0x48c>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <display_process+0x490>)
 8001e1e:	701a      	strb	r2, [r3, #0]

		default_menu3[init_b]=div_limit+48; lcd_temp=lcd_out3; enc_dir=lcd_temp;       } // force enc_dir
 8001e20:	4b55      	ldr	r3, [pc, #340]	; (8001f78 <display_process+0x490>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <display_process+0x480>)
 8001e26:	8812      	ldrh	r2, [r2, #0]
 8001e28:	3330      	adds	r3, #48	; 0x30
 8001e2a:	b2d9      	uxtb	r1, r3
 8001e2c:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <display_process+0x45c>)
 8001e2e:	5499      	strb	r1, [r3, r2]
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <display_process+0x48c>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <display_process+0x494>)
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <display_process+0x494>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b21a      	sxth	r2, r3
 8001e40:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <display_process+0x498>)
 8001e42:	801a      	strh	r2, [r3, #0]

	if (disp_stepper>4) {default_menu3[feedback_loc+5]=menu_index_list[enc_out1<<1];   	default_menu3[feedback_loc+6]=menu_index_list[(enc_out1<<1)+1];}   // index display
 8001e44:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <display_process+0x47c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d914      	bls.n	8001e76 <display_process+0x38e>
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <display_process+0x46c>)
 8001e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e52:	005a      	lsls	r2, r3, #1
 8001e54:	89bb      	ldrh	r3, [r7, #12]
 8001e56:	3305      	adds	r3, #5
 8001e58:	493f      	ldr	r1, [pc, #252]	; (8001f58 <display_process+0x470>)
 8001e5a:	5c89      	ldrb	r1, [r1, r2]
 8001e5c:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <display_process+0x45c>)
 8001e5e:	54d1      	strb	r1, [r2, r3]
 8001e60:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <display_process+0x46c>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	89bb      	ldrh	r3, [r7, #12]
 8001e6c:	3306      	adds	r3, #6
 8001e6e:	493a      	ldr	r1, [pc, #232]	; (8001f58 <display_process+0x470>)
 8001e70:	5c89      	ldrb	r1, [r1, r2]
 8001e72:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <display_process+0x45c>)
 8001e74:	54d1      	strb	r1, [r2, r3]

	if ((target_display) &&   (disp_stepper>4))      // write LFO.target display , might use it for other things too
 8001e76:	4b32      	ldr	r3, [pc, #200]	; (8001f40 <display_process+0x458>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d02e      	beq.n	8001edc <display_process+0x3f4>
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <display_process+0x47c>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d92a      	bls.n	8001edc <display_process+0x3f4>
	{
		uint8_t target_tmp1=*menu_vars_var ;
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <display_process+0x478>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	73fb      	strb	r3, [r7, #15]
		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b2b      	cmp	r3, #43	; 0x2b
 8001e92:	d901      	bls.n	8001e98 <display_process+0x3b0>
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <display_process+0x458>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10c      	bne.n	8001eba <display_process+0x3d2>
 8001ea0:	89bb      	ldrh	r3, [r7, #12]
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	4a27      	ldr	r2, [pc, #156]	; (8001f44 <display_process+0x45c>)
 8001ea6:	1898      	adds	r0, r3, r2
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <display_process+0x460>)
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2208      	movs	r2, #8
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f008 ffe7 	bl	800ae88 <memcpy>
		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8001eba:	4b21      	ldr	r3, [pc, #132]	; (8001f40 <display_process+0x458>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d10c      	bne.n	8001edc <display_process+0x3f4>
 8001ec2:	89bb      	ldrh	r3, [r7, #12]
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	4a1f      	ldr	r2, [pc, #124]	; (8001f44 <display_process+0x45c>)
 8001ec8:	1898      	adds	r0, r3, r2
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <display_process+0x49c>)
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f008 ffd6 	bl	800ae88 <memcpy>
		 		 	}

	if (disp_stepper==1)  gfx_send_cursor=(init_b>>4)&7 ;   //send cursor line
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <display_process+0x47c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d109      	bne.n	8001ef8 <display_process+0x410>
 8001ee4:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <display_process+0x480>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <display_process+0x4a0>)
 8001ef6:	701a      	strb	r2, [r3, #0]
	if (disp_stepper==2)  {
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <display_process+0x47c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d11a      	bne.n	8001f36 <display_process+0x44e>

		default_menu3[feedback_loc+18]=potSource[380]+48;
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <display_process+0x4a4>)
 8001f02:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
 8001f06:	89bb      	ldrh	r3, [r7, #12]
 8001f08:	3312      	adds	r3, #18
 8001f0a:	3230      	adds	r2, #48	; 0x30
 8001f0c:	b2d1      	uxtb	r1, r2
 8001f0e:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <display_process+0x45c>)
 8001f10:	54d1      	strb	r1, [r2, r3]
		default_menu3[feedback_loc+19]=potSource[381]+48; default_menu3[feedback_loc+20]=potSource[382]+48; }  // write this straight after start ,ok
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <display_process+0x4a4>)
 8001f14:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
 8001f18:	89bb      	ldrh	r3, [r7, #12]
 8001f1a:	3313      	adds	r3, #19
 8001f1c:	3230      	adds	r2, #48	; 0x30
 8001f1e:	b2d1      	uxtb	r1, r2
 8001f20:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <display_process+0x45c>)
 8001f22:	54d1      	strb	r1, [r2, r3]
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <display_process+0x4a4>)
 8001f26:	f893 217e 	ldrb.w	r2, [r3, #382]	; 0x17e
 8001f2a:	89bb      	ldrh	r3, [r7, #12]
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	3230      	adds	r2, #48	; 0x30
 8001f30:	b2d1      	uxtb	r1, r2
 8001f32:	4a04      	ldr	r2, [pc, #16]	; (8001f44 <display_process+0x45c>)
 8001f34:	54d1      	strb	r1, [r2, r3]


}   // end o void
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20004983 	.word	0x20004983
 8001f44:	20006bb4 	.word	0x20006bb4
 8001f48:	20000274 	.word	0x20000274
 8001f4c:	20004970 	.word	0x20004970
 8001f50:	0800b3b8 	.word	0x0800b3b8
 8001f54:	20000268 	.word	0x20000268
 8001f58:	2000476c 	.word	0x2000476c
 8001f5c:	20004978 	.word	0x20004978
 8001f60:	2000496c 	.word	0x2000496c
 8001f64:	200001b6 	.word	0x200001b6
 8001f68:	200024da 	.word	0x200024da
 8001f6c:	2000436c 	.word	0x2000436c
 8001f70:	20004986 	.word	0x20004986
 8001f74:	20003014 	.word	0x20003014
 8001f78:	200069ae 	.word	0x200069ae
 8001f7c:	20004982 	.word	0x20004982
 8001f80:	200024cc 	.word	0x200024cc
 8001f84:	20000324 	.word	0x20000324
 8001f88:	20003009 	.word	0x20003009
 8001f8c:	20000658 	.word	0x20000658

08001f90 <displayBuffer2>:


void displayBuffer2 (void){       // use only writing characters  ,nothing more  , init_b for selecting location
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
														//when scrolling maybe use this only until  settled
														// start 2*8 bit then squeeze in 20*6 bit characters

	store_c= (default_menu3[init_b]-47)&127 ;    // grab char from mem
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <displayBuffer2+0xfc>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	; (8002090 <displayBuffer2+0x100>)
 8001f9e:	5c9b      	ldrb	r3, [r3, r2]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b2f      	subs	r3, #47	; 0x2f
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <displayBuffer2+0x104>)
 8001fae:	801a      	strh	r2, [r3, #0]
	uint8_t init_bx=init_b&127;
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <displayBuffer2+0xfc>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fba:	71bb      	strb	r3, [r7, #6]

	uint8_t d_count;
uint8_t init_x=(init_bx & 15)+2 ;    // +2 important  2-17 hor char pos
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	717b      	strb	r3, [r7, #5]
uint8_t init_x2=(init_bx>>4)<<3 ;  // 0,8,16-64  vertical pos  gfx
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	713b      	strb	r3, [r7, #4]
uint16_t init_y=((init_x2)*18)+init_x;   //   works ok  8  bit  0-1152
 8001fd2:	793b      	ldrb	r3, [r7, #4]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	00d2      	lsls	r2, r2, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	797b      	ldrb	r3, [r7, #5]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	807b      	strh	r3, [r7, #2]
uint16_t store_x;

store_x=(store_c*8);  // i line characters , might shrink it and use extr for other  visuals , old code but keep for now
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <displayBuffer2+0x104>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	803b      	strh	r3, [r7, #0]


		if ( (disp_stepper==0))     // blinker for cursor character only  , might just flip the whole last line from prev tables then its x4 faster
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <displayBuffer2+0x108>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11a      	bne.n	800202e <displayBuffer2+0x9e>
			for (d_count=0;d_count<8;d_count++){
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	e013      	b.n	8002026 <displayBuffer2+0x96>

				gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere , blank is correct
 8001ffe:	79fa      	ldrb	r2, [r7, #7]
 8002000:	883b      	ldrh	r3, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <displayBuffer2+0x10c>)
 8002006:	5cd1      	ldrb	r1, [r2, r3]
 8002008:	8878      	ldrh	r0, [r7, #2]
 800200a:	79fa      	ldrb	r2, [r7, #7]
 800200c:	4613      	mov	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4403      	add	r3, r0
 8002016:	f081 027f 	eor.w	r2, r1, #127	; 0x7f
 800201a:	b2d1      	uxtb	r1, r2
 800201c:	4a20      	ldr	r2, [pc, #128]	; (80020a0 <displayBuffer2+0x110>)
 800201e:	54d1      	strb	r1, [r2, r3]
			for (d_count=0;d_count<8;d_count++){
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	3301      	adds	r3, #1
 8002024:	71fb      	strb	r3, [r7, #7]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b07      	cmp	r3, #7
 800202a:	d9e8      	bls.n	8001ffe <displayBuffer2+0x6e>
 800202c:	e016      	b.n	800205c <displayBuffer2+0xcc>
			}

		else for (d_count=0;d_count<8;d_count++){
 800202e:	2300      	movs	r3, #0
 8002030:	71fb      	strb	r3, [r7, #7]
 8002032:	e010      	b.n	8002056 <displayBuffer2+0xc6>
			gfx_ram[init_y+(d_count*18) ]= gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere , seems affected by later stufff
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	883b      	ldrh	r3, [r7, #0]
 8002038:	18d1      	adds	r1, r2, r3
 800203a:	8878      	ldrh	r0, [r7, #2]
 800203c:	79fa      	ldrb	r2, [r7, #7]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4403      	add	r3, r0
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <displayBuffer2+0x10c>)
 800204a:	5c51      	ldrb	r1, [r2, r1]
 800204c:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <displayBuffer2+0x110>)
 800204e:	54d1      	strb	r1, [r2, r3]
		else for (d_count=0;d_count<8;d_count++){
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	3301      	adds	r3, #1
 8002054:	71fb      	strb	r3, [r7, #7]
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b07      	cmp	r3, #7
 800205a:	d9eb      	bls.n	8002034 <displayBuffer2+0xa4>
		}

if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <displayBuffer2+0x108>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b11      	cmp	r3, #17
 8002062:	d106      	bne.n	8002072 <displayBuffer2+0xe2>
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <displayBuffer2+0x108>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <displayBuffer2+0x114>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]


}    // displayBuffer2
 8002070:	e005      	b.n	800207e <displayBuffer2+0xee>
if (disp_stepper==17) {disp_stepper=0;enc2_add=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <displayBuffer2+0x108>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	3301      	adds	r3, #1
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <displayBuffer2+0x108>)
 800207c:	701a      	strb	r2, [r3, #0]
}    // displayBuffer2
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200024da 	.word	0x200024da
 8002090:	20006bb4 	.word	0x20006bb4
 8002094:	20000868 	.word	0x20000868
 8002098:	200001b6 	.word	0x200001b6
 800209c:	0800bf60 	.word	0x0800bf60
 80020a0:	20002b84 	.word	0x20002b84
 80020a4:	200001b5 	.word	0x200001b5

080020a8 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <note_reset+0x78>)
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	71da      	strb	r2, [r3, #7]
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <note_reset+0x78>)
 80020b4:	22ff      	movs	r2, #255	; 0xff
 80020b6:	755a      	strb	r2, [r3, #21]
 80020b8:	4b19      	ldr	r3, [pc, #100]	; (8002120 <note_reset+0x78>)
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80020c0:	4b17      	ldr	r3, [pc, #92]	; (8002120 <note_reset+0x78>)
 80020c2:	22ff      	movs	r2, #255	; 0xff
 80020c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <note_reset+0x78>)
 80020ca:	22ff      	movs	r2, #255	; 0xff
 80020cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <note_reset+0x78>)
 80020d2:	22ff      	movs	r2, #255	; 0xff
 80020d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <note_reset+0x78>)
 80020da:	22ff      	movs	r2, #255	; 0xff
 80020dc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=127;note[1].detune=127;note[2].detune=127;note[3].detune=127;note[4].detune=127;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <note_reset+0x78>)
 80020e2:	227f      	movs	r2, #127	; 0x7f
 80020e4:	721a      	strb	r2, [r3, #8]
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <note_reset+0x78>)
 80020e8:	227f      	movs	r2, #127	; 0x7f
 80020ea:	759a      	strb	r2, [r3, #22]
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <note_reset+0x78>)
 80020ee:	227f      	movs	r2, #127	; 0x7f
 80020f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <note_reset+0x78>)
 80020f6:	227f      	movs	r2, #127	; 0x7f
 80020f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <note_reset+0x78>)
 80020fe:	227f      	movs	r2, #127	; 0x7f
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=127;note[6].detune=127;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <note_reset+0x78>)
 8002106:	227f      	movs	r2, #127	; 0x7f
 8002108:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <note_reset+0x78>)
 800210e:	227f      	movs	r2, #127	; 0x7f
 8002110:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	200001bc 	.word	0x200001bc
 8002124:	00000000 	.word	0x00000000

08002128 <sampling>:


return  output;

}
void sampling(void){						// 330 atm or 8.5ms
 8002128:	b5b0      	push	{r4, r5, r7, lr}
 800212a:	b0a8      	sub	sp, #160	; 0xa0
 800212c:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 800212e:	4b9e      	ldr	r3, [pc, #632]	; (80023a8 <sampling+0x280>)
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]

uint8_t mask_i;


bank_write=0;
 8002134:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <sampling+0x284>)
 8002136:	2200      	movs	r2, #0
 8002138:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 800213a:	2210      	movs	r2, #16
 800213c:	499c      	ldr	r1, [pc, #624]	; (80023b0 <sampling+0x288>)
 800213e:	489d      	ldr	r0, [pc, #628]	; (80023b4 <sampling+0x28c>)
 8002140:	f008 fea2 	bl	800ae88 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 8002144:	4b9c      	ldr	r3, [pc, #624]	; (80023b8 <sampling+0x290>)
 8002146:	2210      	movs	r2, #16
 8002148:	499c      	ldr	r1, [pc, #624]	; (80023bc <sampling+0x294>)
 800214a:	4618      	mov	r0, r3
 800214c:	f008 fe9c 	bl	800ae88 <memcpy>
sample_pointB=sample_pointD;
 8002150:	4b9b      	ldr	r3, [pc, #620]	; (80023c0 <sampling+0x298>)
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	4b9b      	ldr	r3, [pc, #620]	; (80023c4 <sampling+0x29c>)
 8002156:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002158:	2300      	movs	r3, #0
 800215a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800215e:	4b9a      	ldr	r3, [pc, #616]	; (80023c8 <sampling+0x2a0>)
 8002160:	785b      	ldrb	r3, [r3, #1]
 8002162:	461a      	mov	r2, r3
 8002164:	4b99      	ldr	r3, [pc, #612]	; (80023cc <sampling+0x2a4>)
 8002166:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800216a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 800216e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002172:	2b00      	cmp	r3, #0
 8002174:	da00      	bge.n	8002178 <sampling+0x50>
 8002176:	331f      	adds	r3, #31
 8002178:	115b      	asrs	r3, r3, #5
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002180:	fb93 f3f2 	sdiv	r3, r3, r2
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <sampling+0x2a8>)
 800218e:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 8002192:	4b8f      	ldr	r3, [pc, #572]	; (80023d0 <sampling+0x2a8>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80023d4 <sampling+0x2ac>
 800219c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021a0:	4b8b      	ldr	r3, [pc, #556]	; (80023d0 <sampling+0x2a8>)
 80021a2:	edc3 7a00 	vstr	s15, [r3]

uint8_t looper_dat[8]={1,3,7,15};
 80021a6:	4a8c      	ldr	r2, [pc, #560]	; (80023d8 <sampling+0x2b0>)
 80021a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021b0:	6018      	str	r0, [r3, #0]
 80021b2:	3304      	adds	r3, #4
 80021b4:	7019      	strb	r1, [r3, #0]
 80021b6:	f107 0369 	add.w	r3, r7, #105	; 0x69
 80021ba:	2200      	movs	r2, #0
 80021bc:	801a      	strh	r2, [r3, #0]
 80021be:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 80021c0:	4b86      	ldr	r3, [pc, #536]	; (80023dc <sampling+0x2b4>)
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d036      	beq.n	800223a <sampling+0x112>

		float lfo_tempo_calc=((62831*4)/(tempo_mod)); // deafualt 1 note
 80021cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80021d0:	4a83      	ldr	r2, [pc, #524]	; (80023e0 <sampling+0x2b8>)
 80021d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021de:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88


						for (i=0;i<256;i++){								// 128 is 1 note
 80021e2:	4b80      	ldr	r3, [pc, #512]	; (80023e4 <sampling+0x2bc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	801a      	strh	r2, [r3, #0]
 80021e8:	e023      	b.n	8002232 <sampling+0x10a>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/64;
 80021ea:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <sampling+0x2bc>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	eddf 6a79 	vldr	s13, [pc, #484]	; 80023e8 <sampling+0x2c0>
 8002204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220c:	ee17 3a90 	vmov	r3, s15
 8002210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002214:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <sampling+0x2bc>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800221e:	b299      	uxth	r1, r3
 8002220:	4b72      	ldr	r3, [pc, #456]	; (80023ec <sampling+0x2c4>)
 8002222:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8002226:	4b6f      	ldr	r3, [pc, #444]	; (80023e4 <sampling+0x2bc>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b6d      	ldr	r3, [pc, #436]	; (80023e4 <sampling+0x2bc>)
 8002230:	801a      	strh	r2, [r3, #0]
 8002232:	4b6c      	ldr	r3, [pc, #432]	; (80023e4 <sampling+0x2bc>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2bff      	cmp	r3, #255	; 0xff
 8002238:	d9d7      	bls.n	80021ea <sampling+0xc2>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 800223a:	4a68      	ldr	r2, [pc, #416]	; (80023dc <sampling+0x2b4>)
 800223c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8002240:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8002242:	f107 0320 	add.w	r3, r7, #32
 8002246:	2244      	movs	r2, #68	; 0x44
 8002248:	2100      	movs	r1, #0
 800224a:	4618      	mov	r0, r3
 800224c:	f008 fe2a 	bl	800aea4 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <sampling+0x2bc>)
 8002252:	2200      	movs	r2, #0
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	e00d      	b.n	8002274 <sampling+0x14c>
 8002258:	4b62      	ldr	r3, [pc, #392]	; (80023e4 <sampling+0x2bc>)
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	33a0      	adds	r3, #160	; 0xa0
 8002260:	443b      	add	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	f843 2c80 	str.w	r2, [r3, #-128]
 8002268:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <sampling+0x2bc>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <sampling+0x2bc>)
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <sampling+0x2bc>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d9ed      	bls.n	8002258 <sampling+0x130>
	//potSource[150]=(freq_point[0])*100; //0-2

potSource[380]=(lcd_out3/100);  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 800227c:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <sampling+0x2c8>)
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <sampling+0x2cc>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <sampling+0x2d0>)
 800228e:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
potSource[381]=((lcd_out3 %100)/10);		 // 0-160 to 0-10
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <sampling+0x2c8>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <sampling+0x2cc>)
 8002298:	fba2 1203 	umull	r1, r2, r2, r3
 800229c:	0952      	lsrs	r2, r2, #5
 800229e:	2164      	movs	r1, #100	; 0x64
 80022a0:	fb01 f202 	mul.w	r2, r1, r2
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	4a54      	ldr	r2, [pc, #336]	; (80023fc <sampling+0x2d4>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	08db      	lsrs	r3, r3, #3
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <sampling+0x2d0>)
 80022b6:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
potSource[382]=(lcd_out3%10);
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <sampling+0x2c8>)
 80022bc:	881a      	ldrh	r2, [r3, #0]
 80022be:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <sampling+0x2d4>)
 80022c0:	fba3 1302 	umull	r1, r3, r3, r2
 80022c4:	08d9      	lsrs	r1, r3, #3
 80022c6:	460b      	mov	r3, r1
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b48      	ldr	r3, [pc, #288]	; (80023f8 <sampling+0x2d0>)
 80022d6:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e



note_holdA=0;
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <sampling+0x2d8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80022e0:	2300      	movs	r3, #0
 80022e2:	83bb      	strh	r3, [r7, #28]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <sampling+0x2dc>)
 80022e6:	f107 0408 	add.w	r4, r7, #8
 80022ea:	461d      	mov	r5, r3
 80022ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	7023      	strb	r3, [r4, #0]
//adc_values[2]= 15; //force for now
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////
if	 (ADSR[0].attack_trigger==0) {		adsr_att=(161-ADSR[0].attack ) *0.02 ; // for now all of them from this only , speed , 0-16  // rarely read
 80022f4:	4b44      	ldr	r3, [pc, #272]	; (8002408 <sampling+0x2e0>)
 80022f6:	791b      	ldrb	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d146      	bne.n	800238a <sampling+0x262>
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <sampling+0x2e0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f9eb 	bl	80006e0 <__aeabi_i2d>
 800230a:	a323      	add	r3, pc, #140	; (adr r3, 8002398 <sampling+0x270>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fd ff6a 	bl	80001e8 <__aeabi_dmul>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	f7fe fa4a 	bl	80007b4 <__aeabi_d2f>
 8002320:	4603      	mov	r3, r0
 8002322:	4a3a      	ldr	r2, [pc, #232]	; (800240c <sampling+0x2e4>)
 8002324:	6013      	str	r3, [r2, #0]
ADSR[0].sustain_data=((161-ADSR[0].decay)*0.01);  // length and level this is ok is running 1/16 ish				ADSR[0].attack_data=ADSR[0].attack_data-ADSR[0].sustain_data;
 8002326:	4b38      	ldr	r3, [pc, #224]	; (8002408 <sampling+0x2e0>)
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	f1c3 03a1 	rsb	r3, r3, #161	; 0xa1
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f9d6 	bl	80006e0 <__aeabi_i2d>
 8002334:	a31a      	add	r3, pc, #104	; (adr r3, 80023a0 <sampling+0x278>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fd ff55 	bl	80001e8 <__aeabi_dmul>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fa35 	bl	80007b4 <__aeabi_d2f>
 800234a:	4603      	mov	r3, r0
 800234c:	4a2e      	ldr	r2, [pc, #184]	; (8002408 <sampling+0x2e0>)
 800234e:	6113      	str	r3, [r2, #16]
adsr_att=adsr_att*adsr_att;
 8002350:	4b2e      	ldr	r3, [pc, #184]	; (800240c <sampling+0x2e4>)
 8002352:	ed93 7a00 	vldr	s14, [r3]
 8002356:	4b2d      	ldr	r3, [pc, #180]	; (800240c <sampling+0x2e4>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <sampling+0x2e4>)
 8002362:	edc3 7a00 	vstr	s15, [r3]
ADSR[0].sustain_data=ADSR[0].sustain_data*ADSR[0].sustain_data;
 8002366:	4b28      	ldr	r3, [pc, #160]	; (8002408 <sampling+0x2e0>)
 8002368:	ed93 7a04 	vldr	s14, [r3, #16]
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <sampling+0x2e0>)
 800236e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002376:	4b24      	ldr	r3, [pc, #144]	; (8002408 <sampling+0x2e0>)
 8002378:	edc3 7a04 	vstr	s15, [r3, #16]

ADSR[0].attack_trigger=1;
 800237c:	4b22      	ldr	r3, [pc, #136]	; (8002408 <sampling+0x2e0>)
 800237e:	2201      	movs	r2, #1
 8002380:	711a      	strb	r2, [r3, #4]
ADSR[0].attack_data=0;
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <sampling+0x2e0>)
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
}

//float ADSR[0].buffer_temp;    // adsr

for (i=0;i<256;i++) {
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <sampling+0x2bc>)
 800238c:	2200      	movs	r2, #0
 800238e:	801a      	strh	r2, [r3, #0]
 8002390:	e0fe      	b.n	8002590 <sampling+0x468>
 8002392:	bf00      	nop
 8002394:	f3af 8000 	nop.w
 8002398:	47ae147b 	.word	0x47ae147b
 800239c:	3f947ae1 	.word	0x3f947ae1
 80023a0:	47ae147b 	.word	0x47ae147b
 80023a4:	3f847ae1 	.word	0x3f847ae1
 80023a8:	20003430 	.word	0x20003430
 80023ac:	200001b2 	.word	0x200001b2
 80023b0:	200041a6 	.word	0x200041a6
 80023b4:	2000698c 	.word	0x2000698c
 80023b8:	2000699c 	.word	0x2000699c
 80023bc:	200041b7 	.word	0x200041b7
 80023c0:	2000189a 	.word	0x2000189a
 80023c4:	2000088a 	.word	0x2000088a
 80023c8:	200041a4 	.word	0x200041a4
 80023cc:	20002780 	.word	0x20002780
 80023d0:	2000300c 	.word	0x2000300c
 80023d4:	42a00000 	.word	0x42a00000
 80023d8:	0800b3bc 	.word	0x0800b3bc
 80023dc:	20002b80 	.word	0x20002b80
 80023e0:	0003d5bc 	.word	0x0003d5bc
 80023e4:	2000088c 	.word	0x2000088c
 80023e8:	42800000 	.word	0x42800000
 80023ec:	20002980 	.word	0x20002980
 80023f0:	20003014 	.word	0x20003014
 80023f4:	51eb851f 	.word	0x51eb851f
 80023f8:	20000658 	.word	0x20000658
 80023fc:	cccccccd 	.word	0xcccccccd
 8002400:	200024a6 	.word	0x200024a6
 8002404:	0800b3c4 	.word	0x0800b3c4
 8002408:	20003718 	.word	0x20003718
 800240c:	20003010 	.word	0x20003010

	if     (ADSR[0].attack_data<1000)    																		{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=ADSR[0].attack_data; } //0-1000
 8002410:	4b8b      	ldr	r3, [pc, #556]	; (8002640 <sampling+0x518>)
 8002412:	edd3 7a02 	vldr	s15, [r3, #8]
 8002416:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8002644 <sampling+0x51c>
 800241a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	d50e      	bpl.n	8002442 <sampling+0x31a>
 8002424:	4b86      	ldr	r3, [pc, #536]	; (8002640 <sampling+0x518>)
 8002426:	ed93 7a02 	vldr	s14, [r3, #8]
 800242a:	4b87      	ldr	r3, [pc, #540]	; (8002648 <sampling+0x520>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002434:	4b82      	ldr	r3, [pc, #520]	; (8002640 <sampling+0x518>)
 8002436:	edc3 7a02 	vstr	s15, [r3, #8]
 800243a:	4b81      	ldr	r3, [pc, #516]	; (8002640 <sampling+0x518>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4a80      	ldr	r2, [pc, #512]	; (8002640 <sampling+0x518>)
 8002440:	6193      	str	r3, [r2, #24]
	 if  ((ADSR[0].attack_data<1500)  && (ADSR[0].attack_data>999))  					{ADSR[0].attack_data=ADSR[0].attack_data+adsr_att;					ADSR[0].buffer_temp=1500-(ADSR[0].attack_data-500);  }  // 1000-500
 8002442:	4b7f      	ldr	r3, [pc, #508]	; (8002640 <sampling+0x518>)
 8002444:	edd3 7a02 	vldr	s15, [r3, #8]
 8002448:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800264c <sampling+0x524>
 800244c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	d522      	bpl.n	800249c <sampling+0x374>
 8002456:	4b7a      	ldr	r3, [pc, #488]	; (8002640 <sampling+0x518>)
 8002458:	edd3 7a02 	vldr	s15, [r3, #8]
 800245c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002650 <sampling+0x528>
 8002460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dd18      	ble.n	800249c <sampling+0x374>
 800246a:	4b75      	ldr	r3, [pc, #468]	; (8002640 <sampling+0x518>)
 800246c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <sampling+0x520>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	4b71      	ldr	r3, [pc, #452]	; (8002640 <sampling+0x518>)
 800247c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <sampling+0x518>)
 8002482:	edd3 7a02 	vldr	s15, [r3, #8]
 8002486:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002654 <sampling+0x52c>
 800248a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800248e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800264c <sampling+0x524>
 8002492:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002496:	4b6a      	ldr	r3, [pc, #424]	; (8002640 <sampling+0x518>)
 8002498:	edc3 7a06 	vstr	s15, [r3, #24]
	 if ((ADSR[0].attack_data>1499)   && 		(ADSR[0].attack_data<2000)) 			{		ADSR[0].buffer_temp=500; 	ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data;}
 800249c:	4b68      	ldr	r3, [pc, #416]	; (8002640 <sampling+0x518>)
 800249e:	edd3 7a02 	vldr	s15, [r3, #8]
 80024a2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002658 <sampling+0x530>
 80024a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	dd17      	ble.n	80024e0 <sampling+0x3b8>
 80024b0:	4b63      	ldr	r3, [pc, #396]	; (8002640 <sampling+0x518>)
 80024b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80024b6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800265c <sampling+0x534>
 80024ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	d50d      	bpl.n	80024e0 <sampling+0x3b8>
 80024c4:	4b5e      	ldr	r3, [pc, #376]	; (8002640 <sampling+0x518>)
 80024c6:	4a66      	ldr	r2, [pc, #408]	; (8002660 <sampling+0x538>)
 80024c8:	619a      	str	r2, [r3, #24]
 80024ca:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <sampling+0x518>)
 80024cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80024d0:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <sampling+0x518>)
 80024d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80024d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024da:	4b59      	ldr	r3, [pc, #356]	; (8002640 <sampling+0x518>)
 80024dc:	edc3 7a02 	vstr	s15, [r3, #8]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
 80024e0:	4b57      	ldr	r3, [pc, #348]	; (8002640 <sampling+0x518>)
 80024e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80024e6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002664 <sampling+0x53c>
 80024ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	dd1e      	ble.n	8002532 <sampling+0x40a>
 80024f4:	4b52      	ldr	r3, [pc, #328]	; (8002640 <sampling+0x518>)
 80024f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80024fa:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002668 <sampling+0x540>
 80024fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	d514      	bpl.n	8002532 <sampling+0x40a>
 8002508:	4b4d      	ldr	r3, [pc, #308]	; (8002640 <sampling+0x518>)
 800250a:	ed93 7a02 	vldr	s14, [r3, #8]
 800250e:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <sampling+0x518>)
 8002510:	edd3 7a04 	vldr	s15, [r3, #16]
 8002514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002518:	4b49      	ldr	r3, [pc, #292]	; (8002640 <sampling+0x518>)
 800251a:	edc3 7a02 	vstr	s15, [r3, #8]
 800251e:	4b48      	ldr	r3, [pc, #288]	; (8002640 <sampling+0x518>)
 8002520:	edd3 7a02 	vldr	s15, [r3, #8]
 8002524:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002668 <sampling+0x540>
 8002528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <sampling+0x518>)
 800252e:	edc3 7a06 	vstr	s15, [r3, #24]
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END
 8002532:	4b43      	ldr	r3, [pc, #268]	; (8002640 <sampling+0x518>)
 8002534:	edd3 7a02 	vldr	s15, [r3, #8]
 8002538:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800266c <sampling+0x544>
 800253c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	dd06      	ble.n	8002554 <sampling+0x42c>
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <sampling+0x518>)
 8002548:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	4b3c      	ldr	r3, [pc, #240]	; (8002640 <sampling+0x518>)
 8002550:	4a47      	ldr	r2, [pc, #284]	; (8002670 <sampling+0x548>)
 8002552:	609a      	str	r2, [r3, #8]

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <sampling+0x518>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe f8d3 	bl	8000704 <__aeabi_f2d>
 800255e:	a336      	add	r3, pc, #216	; (adr r3, 8002638 <sampling+0x510>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f7fd fe40 	bl	80001e8 <__aeabi_dmul>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4941      	ldr	r1, [pc, #260]	; (8002674 <sampling+0x54c>)
 800256e:	8809      	ldrh	r1, [r1, #0]
 8002570:	460c      	mov	r4, r1
 8002572:	4610      	mov	r0, r2
 8002574:	4619      	mov	r1, r3
 8002576:	f7fe f91d 	bl	80007b4 <__aeabi_d2f>
 800257a:	4602      	mov	r2, r0
 800257c:	493e      	ldr	r1, [pc, #248]	; (8002678 <sampling+0x550>)
 800257e:	00a3      	lsls	r3, r4, #2
 8002580:	440b      	add	r3, r1
 8002582:	601a      	str	r2, [r3, #0]
for (i=0;i<256;i++) {
 8002584:	4b3b      	ldr	r3, [pc, #236]	; (8002674 <sampling+0x54c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <sampling+0x54c>)
 800258e:	801a      	strh	r2, [r3, #0]
 8002590:	4b38      	ldr	r3, [pc, #224]	; (8002674 <sampling+0x54c>)
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	2bff      	cmp	r3, #255	; 0xff
 8002596:	f67f af3b 	bls.w	8002410 <sampling+0x2e8>
}

uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <sampling+0x554>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	08db      	lsrs	r3, r3, #3
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	2201      	movs	r2, #1
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <sampling+0x54c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e1b0      	b.n	800291c <sampling+0x7f4>

	i_total=i+sample_pointB;
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <sampling+0x54c>)
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <sampling+0x558>)
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	sampling_position=i>>6;   //   0-8 steps
 80025c8:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <sampling+0x54c>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <sampling+0x55c>)
 80025d4:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80025d6:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <sampling+0x55c>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	3307      	adds	r3, #7
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <sampling+0x560>)
 80025e6:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80025e8:	4b28      	ldr	r3, [pc, #160]	; (800268c <sampling+0x564>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4a26      	ldr	r2, [pc, #152]	; (800268c <sampling+0x564>)
 80025f2:	4413      	add	r3, r2
 80025f4:	789b      	ldrb	r3, [r3, #2]
 80025f6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <sampling+0x54c>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4a23      	ldr	r2, [pc, #140]	; (8002690 <sampling+0x568>)
 8002602:	5cd2      	ldrb	r2, [r2, r3]
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <sampling+0x54c>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	0912      	lsrs	r2, r2, #4
 800260c:	b2d1      	uxtb	r1, r2
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <sampling+0x56c>)
 8002610:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <sampling+0x570>)
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800261a:	429a      	cmp	r2, r3
 800261c:	d840      	bhi.n	80026a0 <sampling+0x578>
 800261e:	4b1f      	ldr	r3, [pc, #124]	; (800269c <sampling+0x574>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	b29a      	uxth	r2, r3
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <sampling+0x574>)
 800262e:	801a      	strh	r2, [r3, #0]
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <sampling+0x570>)
 8002632:	2200      	movs	r2, #0
 8002634:	801a      	strh	r2, [r3, #0]
 8002636:	e039      	b.n	80026ac <sampling+0x584>
 8002638:	d2f1a9fc 	.word	0xd2f1a9fc
 800263c:	3f50624d 	.word	0x3f50624d
 8002640:	20003718 	.word	0x20003718
 8002644:	447a0000 	.word	0x447a0000
 8002648:	20003010 	.word	0x20003010
 800264c:	44bb8000 	.word	0x44bb8000
 8002650:	4479c000 	.word	0x4479c000
 8002654:	43fa0000 	.word	0x43fa0000
 8002658:	44bb6000 	.word	0x44bb6000
 800265c:	44fa0000 	.word	0x44fa0000
 8002660:	43fa0000 	.word	0x43fa0000
 8002664:	44f9e000 	.word	0x44f9e000
 8002668:	451c4000 	.word	0x451c4000
 800266c:	453b8000 	.word	0x453b8000
 8002670:	457a0000 	.word	0x457a0000
 8002674:	2000088c 	.word	0x2000088c
 8002678:	200020a4 	.word	0x200020a4
 800267c:	200001a8 	.word	0x200001a8
 8002680:	2000088a 	.word	0x2000088a
 8002684:	20004984 	.word	0x20004984
 8002688:	20004985 	.word	0x20004985
 800268c:	200041a4 	.word	0x200041a4
 8002690:	20000658 	.word	0x20000658
 8002694:	20000458 	.word	0x20000458
 8002698:	200024ce 	.word	0x200024ce
 800269c:	200024a4 	.word	0x200024a4
 80026a0:	4ba3      	ldr	r3, [pc, #652]	; (8002930 <sampling+0x808>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4ba1      	ldr	r3, [pc, #644]	; (8002930 <sampling+0x808>)
 80026aa:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 80026b2:	4ba0      	ldr	r3, [pc, #640]	; (8002934 <sampling+0x80c>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	091b      	lsrs	r3, r3, #4
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b9f      	ldr	r3, [pc, #636]	; (8002938 <sampling+0x810>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d009      	beq.n	80026d8 <sampling+0x5b0>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 80026c4:	4b9b      	ldr	r3, [pc, #620]	; (8002934 <sampling+0x80c>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b9a      	ldr	r3, [pc, #616]	; (8002938 <sampling+0x810>)
 80026d0:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
// record note triggers or seq_changes position ,NEEDS TO BE OFF FOR NOTE 0
}


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80026d8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 810f 	beq.w	8002900 <sampling+0x7d8>
	{

		note_reset();
 80026e2:	f7ff fce1 	bl	80020a8 <note_reset>
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works

	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80026e6:	4b94      	ldr	r3, [pc, #592]	; (8002938 <sampling+0x810>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	713b      	strb	r3, [r7, #4]
		loop_temp1[1]=adc_values[1]>>2;
 80026f2:	4b92      	ldr	r3, [pc, #584]	; (800293c <sampling+0x814>)
 80026f4:	885b      	ldrh	r3, [r3, #2]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	717b      	strb	r3, [r7, #5]
		loop_temp1[2]=adc_values[2]>>2;
 80026fe:	4b8f      	ldr	r3, [pc, #572]	; (800293c <sampling+0x814>)
 8002700:	889b      	ldrh	r3, [r3, #4]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	b29b      	uxth	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	71bb      	strb	r3, [r7, #6]
		loop_temp1[3]=adc_values[0]>>2;
 800270a:	4b8c      	ldr	r3, [pc, #560]	; (800293c <sampling+0x814>)
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	b29b      	uxth	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	71fb      	strb	r3, [r7, #7]

		//loop_temp1=(seq.pos&seq_dat); // loop position and length



		seq.loop[1]=(note[1].timeshift+loop_temp1[0]+loop_temp1[1])&31;
 8002716:	4b8a      	ldr	r3, [pc, #552]	; (8002940 <sampling+0x818>)
 8002718:	7d1a      	ldrb	r2, [r3, #20]
 800271a:	793b      	ldrb	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	b2da      	uxtb	r2, r3
 8002720:	797b      	ldrb	r3, [r7, #5]
 8002722:	4413      	add	r3, r2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f003 031f 	and.w	r3, r3, #31
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b82      	ldr	r3, [pc, #520]	; (8002938 <sampling+0x810>)
 800272e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0]+loop_temp1[2])&31; // this is really handy with sync to notes
 8002732:	4b83      	ldr	r3, [pc, #524]	; (8002940 <sampling+0x818>)
 8002734:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002738:	793b      	ldrb	r3, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	b2da      	uxtb	r2, r3
 800273e:	79bb      	ldrb	r3, [r7, #6]
 8002740:	4413      	add	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b7b      	ldr	r3, [pc, #492]	; (8002938 <sampling+0x810>)
 800274c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0]+loop_temp1[3])&31;
 8002750:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <sampling+0x818>)
 8002752:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8002756:	793b      	ldrb	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	b2da      	uxtb	r2, r3
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	4413      	add	r3, r2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b73      	ldr	r3, [pc, #460]	; (8002938 <sampling+0x810>)
 800276a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;
 800276e:	4b74      	ldr	r3, [pc, #464]	; (8002940 <sampling+0x818>)
 8002770:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8002774:	793b      	ldrb	r3, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 031f 	and.w	r3, r3, #31
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <sampling+0x810>)
 8002782:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);    // maybe join 1 and 2
 8002786:	4b6c      	ldr	r3, [pc, #432]	; (8002938 <sampling+0x810>)
 8002788:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800278c:	461a      	mov	r2, r3
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <sampling+0x81c>)
 8002790:	5c9a      	ldrb	r2, [r3, r2]
 8002792:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <sampling+0x818>)
 8002794:	7cdb      	ldrb	r3, [r3, #19]
 8002796:	4413      	add	r3, r2
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b69      	ldr	r3, [pc, #420]	; (8002940 <sampling+0x818>)
 800279c:	741a      	strb	r2, [r3, #16]
			note[0].pitch=note[1].pitch+(note[0].transpose); // just double
 800279e:	4b68      	ldr	r3, [pc, #416]	; (8002940 <sampling+0x818>)
 80027a0:	7c1a      	ldrb	r2, [r3, #16]
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <sampling+0x818>)
 80027a4:	795b      	ldrb	r3, [r3, #5]
 80027a6:	4413      	add	r3, r2
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b65      	ldr	r3, [pc, #404]	; (8002940 <sampling+0x818>)
 80027ac:	709a      	strb	r2, [r3, #2]

			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 80027ae:	4b62      	ldr	r3, [pc, #392]	; (8002938 <sampling+0x810>)
 80027b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b63      	ldr	r3, [pc, #396]	; (8002944 <sampling+0x81c>)
 80027b8:	5c9a      	ldrb	r2, [r3, r2]
 80027ba:	4b61      	ldr	r3, [pc, #388]	; (8002940 <sampling+0x818>)
 80027bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c0:	4413      	add	r3, r2
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b5e      	ldr	r3, [pc, #376]	; (8002940 <sampling+0x818>)
 80027c6:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80027c8:	4b5b      	ldr	r3, [pc, #364]	; (8002938 <sampling+0x810>)
 80027ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b5c      	ldr	r3, [pc, #368]	; (8002944 <sampling+0x81c>)
 80027d2:	5c9a      	ldrb	r2, [r3, r2]
 80027d4:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <sampling+0x818>)
 80027d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80027da:	4413      	add	r3, r2
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b58      	ldr	r3, [pc, #352]	; (8002940 <sampling+0x818>)
 80027e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
//	if (note[3].pitch) 		{note[3].pitch=note[3].pitch+(note[3].transpose>>4);	adsr_retrigger[3]=1; note_toggler[i>>5]=1<<(i&31   )   ; } // stay at zero for off

	note[5].pitch=(notes_joined[seq.loop[5]])+(note[5].transpose);  //
 80027e4:	4b54      	ldr	r3, [pc, #336]	; (8002938 <sampling+0x810>)
 80027e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b55      	ldr	r3, [pc, #340]	; (8002944 <sampling+0x81c>)
 80027ee:	5c9a      	ldrb	r2, [r3, r2]
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <sampling+0x818>)
 80027f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80027f6:	4413      	add	r3, r2
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	4b51      	ldr	r3, [pc, #324]	; (8002940 <sampling+0x818>)
 80027fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		patch_target_replace();
 8002800:	f7fe fdfe 	bl	8001400 <patch_target_replace>
		uint8_t detune_temp=0;
 8002804:	2300      	movs	r3, #0
 8002806:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		detune_temp=(note[5].pitch+(note[5].detune))&31    ;
 800280a:	4b4d      	ldr	r3, [pc, #308]	; (8002940 <sampling+0x818>)
 800280c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8002810:	4b4b      	ldr	r3, [pc, #300]	; (8002940 <sampling+0x818>)
 8002812:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002816:	4413      	add	r3, r2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		if(detune_temp>27) detune_temp=27;
 8002822:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002826:	2b1b      	cmp	r3, #27
 8002828:	d902      	bls.n	8002830 <sampling+0x708>
 800282a:	231b      	movs	r3, #27
 800282c:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		   //this is for sine skip mask

	note[5].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
 8002830:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8002834:	4a44      	ldr	r2, [pc, #272]	; (8002948 <sampling+0x820>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	461a      	mov	r2, r3
 800283a:	4b44      	ldr	r3, [pc, #272]	; (800294c <sampling+0x824>)
 800283c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002840:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <sampling+0x818>)
 8002842:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	note[5].tuned= (note[5].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <sampling+0x818>)
 8002848:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800284c:	461a      	mov	r2, r3
 800284e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	129b      	asrs	r3, r3, #10
 8002858:	b29a      	uxth	r2, r3
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <sampling+0x818>)
 800285c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		mask_result =0;
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <sampling+0x828>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]

		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002866:	2300      	movs	r3, #0
 8002868:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800286c:	e044      	b.n	80028f8 <sampling+0x7d0>

	if (note[mask_i].pitch) {
 800286e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002872:	4933      	ldr	r1, [pc, #204]	; (8002940 <sampling+0x818>)
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	440b      	add	r3, r1
 800287e:	3302      	adds	r3, #2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d033      	beq.n	80028ee <sampling+0x7c6>

	//	note[mask_i].pitch=(note[mask_i].pitch ;

		detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
 8002886:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800288a:	492d      	ldr	r1, [pc, #180]	; (8002940 <sampling+0x818>)
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	3302      	adds	r3, #2
 8002898:	7819      	ldrb	r1, [r3, #0]
 800289a:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 800289e:	4828      	ldr	r0, [pc, #160]	; (8002940 <sampling+0x818>)
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4403      	add	r3, r0
 80028aa:	3308      	adds	r3, #8
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	440b      	add	r3, r1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		if(detune_temp>27) detune_temp=27;
 80028ba:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80028be:	2b1b      	cmp	r3, #27
 80028c0:	d902      	bls.n	80028c8 <sampling+0x7a0>
 80028c2:	231b      	movs	r3, #27
 80028c4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];
 80028c8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80028cc:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <sampling+0x820>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	4619      	mov	r1, r3
 80028d2:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80028d6:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <sampling+0x82c>)
 80028d8:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 80028dc:	4918      	ldr	r1, [pc, #96]	; (8002940 <sampling+0x818>)
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	4602      	mov	r2, r0
 80028ec:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80028ee:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80028f2:	3301      	adds	r3, #1
 80028f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80028f8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d9b6      	bls.n	800286e <sampling+0x746>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <sampling+0x830>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <sampling+0x7e8>
	{

		LFO_source(); // calculate lfo maybe 8 times for now
 800290c:	f000 fdf0 	bl	80034f0 <LFO_source>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <sampling+0x830>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <sampling+0x830>)
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <sampling+0x830>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	f4ff ae49 	bcc.w	80025ba <sampling+0x492>
// filter loop
int32_t  sample_temp2;
uint8_t sine_zero;
int32_t  sample_temp1;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <sampling+0x830>)
 800292a:	2200      	movs	r2, #0
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	e1d2      	b.n	8002cd6 <sampling+0xbae>
 8002930:	200024ce 	.word	0x200024ce
 8002934:	200024a4 	.word	0x200024a4
 8002938:	200041a4 	.word	0x200041a4
 800293c:	200001a8 	.word	0x200001a8
 8002940:	200001bc 	.word	0x200001bc
 8002944:	2000698c 	.word	0x2000698c
 8002948:	0800b3f4 	.word	0x0800b3f4
 800294c:	20000144 	.word	0x20000144
 8002950:	2000189c 	.word	0x2000189c
 8002954:	0800b410 	.word	0x0800b410
 8002958:	2000088c 	.word	0x2000088c
	i_total=i+sample_pointB;
 800295c:	4bac      	ldr	r3, [pc, #688]	; (8002c10 <sampling+0xae8>)
 800295e:	881a      	ldrh	r2, [r3, #0]
 8002960:	4bac      	ldr	r3, [pc, #688]	; (8002c14 <sampling+0xaec>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	4413      	add	r3, r2
 8002966:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	sampling_position=(i>>6);
 800296a:	4ba9      	ldr	r3, [pc, #676]	; (8002c10 <sampling+0xae8>)
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	099b      	lsrs	r3, r3, #6
 8002970:	b29b      	uxth	r3, r3
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4ba8      	ldr	r3, [pc, #672]	; (8002c18 <sampling+0xaf0>)
 8002976:	701a      	strb	r2, [r3, #0]

	if ((i&63)==0)	{  patch_target_replace();    // update values , not too bad
 8002978:	4ba5      	ldr	r3, [pc, #660]	; (8002c10 <sampling+0xae8>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 8095 	bne.w	8002ab0 <sampling+0x988>
 8002986:	f7fe fd3b 	bl	8001400 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.01)    ;   // need this for useful filter
 800298a:	4ba4      	ldr	r3, [pc, #656]	; (8002c1c <sampling+0xaf4>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fea6 	bl	80006e0 <__aeabi_i2d>
 8002994:	a39a      	add	r3, pc, #616	; (adr r3, 8002c00 <sampling+0xad8>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd fc25 	bl	80001e8 <__aeabi_dmul>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fd ff05 	bl	80007b4 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	ee00 3a10 	vmov	s0, r3
 80029b0:	f008 f9f8 	bl	800ada4 <arm_sin_f32>
 80029b4:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 80029b8:	4b97      	ldr	r3, [pc, #604]	; (8002c18 <sampling+0xaf0>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029c0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	4a95      	ldr	r2, [pc, #596]	; (8002c20 <sampling+0xaf8>)
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 80029d2:	4b92      	ldr	r3, [pc, #584]	; (8002c1c <sampling+0xaf4>)
 80029d4:	7a1b      	ldrb	r3, [r3, #8]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fd fe82 	bl	80006e0 <__aeabi_i2d>
 80029dc:	a38a      	add	r3, pc, #552	; (adr r3, 8002c08 <sampling+0xae0>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fc01 	bl	80001e8 <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7fd fee1 	bl	80007b4 <__aeabi_d2f>
 80029f2:	4603      	mov	r3, r0
 80029f4:	ee00 3a10 	vmov	s0, r3
 80029f8:	f008 f9d4 	bl	800ada4 <arm_sin_f32>
 80029fc:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002a00:	4b85      	ldr	r3, [pc, #532]	; (8002c18 <sampling+0xaf0>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a08:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a10:	4a83      	ldr	r2, [pc, #524]	; (8002c20 <sampling+0xaf8>)
 8002a12:	3309      	adds	r3, #9
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	edc3 7a00 	vstr	s15, [r3]
freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002a1c:	4b7f      	ldr	r3, [pc, #508]	; (8002c1c <sampling+0xaf4>)
 8002a1e:	7c1b      	ldrb	r3, [r3, #16]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fe5d 	bl	80006e0 <__aeabi_i2d>
 8002a26:	a378      	add	r3, pc, #480	; (adr r3, 8002c08 <sampling+0xae0>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fbdc 	bl	80001e8 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fd febc 	bl	80007b4 <__aeabi_d2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	ee00 3a10 	vmov	s0, r3
 8002a42:	f008 f9af 	bl	800ada4 <arm_sin_f32>
 8002a46:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002a4a:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <sampling+0xaf0>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a52:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5a:	4a71      	ldr	r2, [pc, #452]	; (8002c20 <sampling+0xaf8>)
 8002a5c:	3312      	adds	r3, #18
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	edc3 7a00 	vstr	s15, [r3]
 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002a66:	4b6d      	ldr	r3, [pc, #436]	; (8002c1c <sampling+0xaf4>)
 8002a68:	7e1b      	ldrb	r3, [r3, #24]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fe38 	bl	80006e0 <__aeabi_i2d>
 8002a70:	a365      	add	r3, pc, #404	; (adr r3, 8002c08 <sampling+0xae0>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fbb7 	bl	80001e8 <__aeabi_dmul>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f7fd fe97 	bl	80007b4 <__aeabi_d2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	ee00 3a10 	vmov	s0, r3
 8002a8c:	f008 f98a 	bl	800ada4 <arm_sin_f32>
 8002a90:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002a94:	4b60      	ldr	r3, [pc, #384]	; (8002c18 <sampling+0xaf0>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a9c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa4:	4a5e      	ldr	r2, [pc, #376]	; (8002c20 <sampling+0xaf8>)
 8002aa6:	331b      	adds	r3, #27
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	edc3 7a00 	vstr	s15, [r3]

	}

// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note[0].tuned; //careful with signed bit shift,better compare
 8002ab0:	4b5c      	ldr	r3, [pc, #368]	; (8002c24 <sampling+0xafc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a5c      	ldr	r2, [pc, #368]	; (8002c28 <sampling+0xb00>)
 8002ab6:	8992      	ldrh	r2, [r2, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a5a      	ldr	r2, [pc, #360]	; (8002c24 <sampling+0xafc>)
 8002abc:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-1048576+sample_accus[0] ; // faster >  than &  ,strange
 8002abe:	4b59      	ldr	r3, [pc, #356]	; (8002c24 <sampling+0xafc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ac6:	db05      	blt.n	8002ad4 <sampling+0x9ac>
 8002ac8:	4b56      	ldr	r3, [pc, #344]	; (8002c24 <sampling+0xafc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <sampling+0xafc>)
 8002ad2:	6013      	str	r3, [r2, #0]

	sample_accus[1] = sample_accus[1] + note[1].tuned;  // normal adder full volume
 8002ad4:	4b53      	ldr	r3, [pc, #332]	; (8002c24 <sampling+0xafc>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <sampling+0xb00>)
 8002ada:	8b52      	ldrh	r2, [r2, #26]
 8002adc:	4413      	add	r3, r2
 8002ade:	4a51      	ldr	r2, [pc, #324]	; (8002c24 <sampling+0xafc>)
 8002ae0:	6053      	str	r3, [r2, #4]

			if (sample_accus[1]>524287) sample_accus[1] =-1048576+sample_accus[1] ; // faster >  than &  ,strange
 8002ae2:	4b50      	ldr	r3, [pc, #320]	; (8002c24 <sampling+0xafc>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aea:	db05      	blt.n	8002af8 <sampling+0x9d0>
 8002aec:	4b4d      	ldr	r3, [pc, #308]	; (8002c24 <sampling+0xafc>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002af4:	4a4b      	ldr	r2, [pc, #300]	; (8002c24 <sampling+0xafc>)
 8002af6:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note[2].tuned;
 8002af8:	4b4a      	ldr	r3, [pc, #296]	; (8002c24 <sampling+0xafc>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <sampling+0xb00>)
 8002afe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002b00:	4413      	add	r3, r2
 8002b02:	4a48      	ldr	r2, [pc, #288]	; (8002c24 <sampling+0xafc>)
 8002b04:	6093      	str	r3, [r2, #8]

					if (sample_accus[2]>524287) sample_accus[2] =-1048576+sample_accus[2] ; // faster >  than &  ,strange
 8002b06:	4b47      	ldr	r3, [pc, #284]	; (8002c24 <sampling+0xafc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b0e:	db05      	blt.n	8002b1c <sampling+0x9f4>
 8002b10:	4b44      	ldr	r3, [pc, #272]	; (8002c24 <sampling+0xafc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002b18:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <sampling+0xafc>)
 8002b1a:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note[3].tuned; // bouncing somewhere
 8002b1c:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <sampling+0xafc>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a41      	ldr	r2, [pc, #260]	; (8002c28 <sampling+0xb00>)
 8002b22:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8002b24:	4413      	add	r3, r2
 8002b26:	4a3f      	ldr	r2, [pc, #252]	; (8002c24 <sampling+0xafc>)
 8002b28:	60d3      	str	r3, [r2, #12]

							if (sample_accus[3]>524287) sample_accus[3] =-1048576+sample_accus[3] ; // faster >  than &  ,strange
 8002b2a:	4b3e      	ldr	r3, [pc, #248]	; (8002c24 <sampling+0xafc>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b32:	db05      	blt.n	8002b40 <sampling+0xa18>
 8002b34:	4b3b      	ldr	r3, [pc, #236]	; (8002c24 <sampling+0xafc>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002b3c:	4a39      	ldr	r2, [pc, #228]	; (8002c24 <sampling+0xafc>)
 8002b3e:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note[4].tuned;
 8002b40:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <sampling+0xafc>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4a38      	ldr	r2, [pc, #224]	; (8002c28 <sampling+0xb00>)
 8002b46:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4a35      	ldr	r2, [pc, #212]	; (8002c24 <sampling+0xafc>)
 8002b4e:	6113      	str	r3, [r2, #16]

									if (sample_accus[4]>524287) sample_accus[4] =-1048576+sample_accus[4] ; // faster >  than &  ,strange
 8002b50:	4b34      	ldr	r3, [pc, #208]	; (8002c24 <sampling+0xafc>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b58:	db05      	blt.n	8002b66 <sampling+0xa3e>
 8002b5a:	4b32      	ldr	r3, [pc, #200]	; (8002c24 <sampling+0xafc>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002b62:	4a30      	ldr	r2, [pc, #192]	; (8002c24 <sampling+0xafc>)
 8002b64:	6113      	str	r3, [r2, #16]

									sample_Accu[5] =sample_Accu[0] =sample_Accu[1] =sample_Accu[2]=sample_Accu[3] =0; //all zeroed 20 bits
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <sampling+0xb04>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <sampling+0xb04>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <sampling+0xb04>)
 8002b72:	6093      	str	r3, [r2, #8]
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <sampling+0xb04>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <sampling+0xb04>)
 8002b7a:	6053      	str	r3, [r2, #4]
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <sampling+0xb04>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <sampling+0xb04>)
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <sampling+0xb04>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <sampling+0xb04>)
 8002b8a:	6153      	str	r3, [r2, #20]


									sample_temp1=(sample_accus[0]*note[0].velocity);   // multiply then shift is a little faster
 8002b8c:	4b25      	ldr	r3, [pc, #148]	; (8002c24 <sampling+0xafc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a25      	ldr	r2, [pc, #148]	; (8002c28 <sampling+0xb00>)
 8002b92:	79d2      	ldrb	r2, [r2, #7]
 8002b94:	fb02 f303 	mul.w	r3, r2, r3
 8002b98:	677b      	str	r3, [r7, #116]	; 0x74
									sample_temp2=(sample_accus[1]*note[1].velocity);// needs cut a bit  ,default 20bit
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <sampling+0xafc>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <sampling+0xb00>)
 8002ba0:	7d52      	ldrb	r2, [r2, #21]
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	673b      	str	r3, [r7, #112]	; 0x70
								    sample_Accu[0]=(sample_temp1+sample_temp1)>>9;
 8002ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	125b      	asrs	r3, r3, #9
 8002bae:	4a1f      	ldr	r2, [pc, #124]	; (8002c2c <sampling+0xb04>)
 8002bb0:	6013      	str	r3, [r2, #0]

									sample_temp1=sample_accus[2]*note[2].velocity; // needs cut a bit  ,default 20bit
 8002bb2:	4b1c      	ldr	r3, [pc, #112]	; (8002c24 <sampling+0xafc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <sampling+0xb00>)
 8002bb8:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8002bbc:	fb02 f303 	mul.w	r3, r2, r3
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74
									sample_Accu[1]=sample_temp1>>8; // 20+8
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	121b      	asrs	r3, r3, #8
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <sampling+0xb04>)
 8002bc8:	6053      	str	r3, [r2, #4]


									sample_temp1=sample_accus[3]*note[3].velocity;      // needs some gain fine tune !
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <sampling+0xafc>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <sampling+0xb00>)
 8002bd0:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	677b      	str	r3, [r7, #116]	; 0x74
									sample_Accu[2] =sample_temp1>>8;    // 64 default 20+8
 8002bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bdc:	121b      	asrs	r3, r3, #8
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <sampling+0xb04>)
 8002be0:	6093      	str	r3, [r2, #8]


									sample_temp1=sine_out*	note[5].velocity;  // sine out is 16bit, add 4 then 16+8
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <sampling+0xb00>)
 8002be4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002be8:	461a      	mov	r2, r3
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <sampling+0xb08>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	677b      	str	r3, [r7, #116]	; 0x74
									sample_Accu[3] =sample_temp1>>4;
 8002bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bf6:	111b      	asrs	r3, r3, #4
 8002bf8:	4a0c      	ldr	r2, [pc, #48]	; (8002c2c <sampling+0xb04>)
 8002bfa:	60d3      	str	r3, [r2, #12]
 8002bfc:	e01a      	b.n	8002c34 <sampling+0xb0c>
 8002bfe:	bf00      	nop
 8002c00:	47ae147b 	.word	0x47ae147b
 8002c04:	3f847ae1 	.word	0x3f847ae1
 8002c08:	bc6a7efa 	.word	0xbc6a7efa
 8002c0c:	3f789374 	.word	0x3f789374
 8002c10:	2000088c 	.word	0x2000088c
 8002c14:	2000088a 	.word	0x2000088a
 8002c18:	20004984 	.word	0x20004984
 8002c1c:	20000248 	.word	0x20000248
 8002c20:	2000255c 	.word	0x2000255c
 8002c24:	200024a8 	.word	0x200024a8
 8002c28:	200001bc 	.word	0x200001bc
 8002c2c:	2000086c 	.word	0x2000086c
 8002c30:	2000085c 	.word	0x2000085c


	if (sine_counterB==0) 	sine_temp2=note[5].tuned;
 8002c34:	4ba2      	ldr	r3, [pc, #648]	; (8002ec0 <sampling+0xd98>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <sampling+0xb1e>
 8002c3c:	4ba1      	ldr	r3, [pc, #644]	; (8002ec4 <sampling+0xd9c>)
 8002c3e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002c42:	4ba1      	ldr	r3, [pc, #644]	; (8002ec8 <sampling+0xda0>)
 8002c44:	801a      	strh	r2, [r3, #0]

		sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder needs to wait
 8002c46:	4b9e      	ldr	r3, [pc, #632]	; (8002ec0 <sampling+0xd98>)
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	4b9f      	ldr	r3, [pc, #636]	; (8002ec8 <sampling+0xda0>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	4b9b      	ldr	r3, [pc, #620]	; (8002ec0 <sampling+0xd98>)
 8002c54:	801a      	strh	r2, [r3, #0]
		if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002c56:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <sampling+0xd98>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	09db      	lsrs	r3, r3, #7
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <sampling+0xb42>
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002c68:	e002      	b.n	8002c70 <sampling+0xb48>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002c70:	4b93      	ldr	r3, [pc, #588]	; (8002ec0 <sampling+0xd98>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b95      	ldr	r3, [pc, #596]	; (8002ecc <sampling+0xda4>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	015b      	lsls	r3, r3, #5
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dd02      	ble.n	8002c86 <sampling+0xb5e>
 8002c80:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <sampling+0xd98>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	801a      	strh	r2, [r3, #0]
	sine_count(); // calc sine   distortion out when hcagning note
 8002c86:	f000 fbd3 	bl	8003430 <sine_count>
	play_holder0[i]=sample_Accu[0];  // write to bank
 8002c8a:	4b91      	ldr	r3, [pc, #580]	; (8002ed0 <sampling+0xda8>)
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4b90      	ldr	r3, [pc, #576]	; (8002ed4 <sampling+0xdac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a90      	ldr	r2, [pc, #576]	; (8002ed8 <sampling+0xdb0>)
 8002c96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_Accu[1];
 8002c9a:	4b8d      	ldr	r3, [pc, #564]	; (8002ed0 <sampling+0xda8>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <sampling+0xdac>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a8d      	ldr	r2, [pc, #564]	; (8002edc <sampling+0xdb4>)
 8002ca6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_Accu[2];
 8002caa:	4b89      	ldr	r3, [pc, #548]	; (8002ed0 <sampling+0xda8>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <sampling+0xdac>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	4a8a      	ldr	r2, [pc, #552]	; (8002ee0 <sampling+0xdb8>)
 8002cb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_Accu[3];
 8002cba:	4b85      	ldr	r3, [pc, #532]	; (8002ed0 <sampling+0xda8>)
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <sampling+0xdac>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a87      	ldr	r2, [pc, #540]	; (8002ee4 <sampling+0xdbc>)
 8002cc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002cca:	4b81      	ldr	r3, [pc, #516]	; (8002ed0 <sampling+0xda8>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	; (8002ed0 <sampling+0xda8>)
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	4b7e      	ldr	r3, [pc, #504]	; (8002ed0 <sampling+0xda8>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cde:	f4ff ae3d 	bcc.w	800295c <sampling+0x834>
int32_t filter_Accu;
int32_t filter_Accu2;

//uint16_t* click=&input_holder[0];

uint16_t crap_hold=2000;
 8002ce2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ce6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80

				uint16_t crap_hold1=2000;
 8002cea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				uint16_t crap_hold2=2000;
 8002cf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cf6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002cfa:	4b75      	ldr	r3, [pc, #468]	; (8002ed0 <sampling+0xda8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	e030      	b.n	8002d64 <sampling+0xc3c>
			{
				crap_hold=((input_holder[i]*7)+crap_hold2)>>3;
 8002d02:	4b73      	ldr	r3, [pc, #460]	; (8002ed0 <sampling+0xda8>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <sampling+0xdc0>)
 8002d0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	1a9a      	subs	r2, r3, r2
 8002d16:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002d1a:	4413      	add	r3, r2
 8002d1c:	10db      	asrs	r3, r3, #3
 8002d1e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
					crap_hold1=((crap_hold*7)+crap_hold1)>>3;
 8002d22:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	1a9a      	subs	r2, r3, r2
 8002d2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002d30:	4413      	add	r3, r2
 8002d32:	10db      	asrs	r3, r3, #3
 8002d34:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					input_holder[i] =((crap_hold1*7)+crap_hold2)>>3;
 8002d38:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	1a9a      	subs	r2, r3, r2
 8002d42:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002d46:	4413      	add	r3, r2
 8002d48:	10d9      	asrs	r1, r3, #3
 8002d4a:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <sampling+0xda8>)
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	b289      	uxth	r1, r1
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <sampling+0xdc0>)
 8002d54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<512;i++) // 15-20 tmr cycles (174)
 8002d58:	4b5d      	ldr	r3, [pc, #372]	; (8002ed0 <sampling+0xda8>)
 8002d5a:	881b      	ldrh	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	4b5b      	ldr	r3, [pc, #364]	; (8002ed0 <sampling+0xda8>)
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <sampling+0xda8>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6c:	d3c9      	bcc.n	8002d02 <sampling+0xbda>
}
*/



for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8002d6e:	4b58      	ldr	r3, [pc, #352]	; (8002ed0 <sampling+0xda8>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	e32b      	b.n	80033ce <sampling+0x12a6>
	i_total=i+sample_pointB;
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <sampling+0xda8>)
 8002d78:	881a      	ldrh	r2, [r3, #0]
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <sampling+0xdc4>)
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

sampling_position=(i>>6);
 8002d84:	4b52      	ldr	r3, [pc, #328]	; (8002ed0 <sampling+0xda8>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b58      	ldr	r3, [pc, #352]	; (8002ef0 <sampling+0xdc8>)
 8002d90:	701a      	strb	r2, [r3, #0]
// filter 1
if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8002d92:	4b4f      	ldr	r3, [pc, #316]	; (8002ed0 <sampling+0xda8>)
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	33a0      	adds	r3, #160	; 0xa0
 8002d9e:	443b      	add	r3, r7
 8002da0:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8002da4:	4a4a      	ldr	r2, [pc, #296]	; (8002ed0 <sampling+0xda8>)
 8002da6:	8812      	ldrh	r2, [r2, #0]
 8002da8:	f002 021f 	and.w	r2, r2, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f202 	lsl.w	r2, r1, r2
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10f      	bne.n	8002dd6 <sampling+0xcae>
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <sampling+0xdcc>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	711a      	strb	r2, [r3, #4]
 8002dbc:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <sampling+0xdd0>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <sampling+0xdd0>)
 8002dc6:	801a      	strh	r2, [r3, #0]
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <sampling+0xdd0>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <sampling+0xdd0>)
 8002dd4:	801a      	strh	r2, [r3, #0]


sample_Accu[0]=play_holder0[i];  // sine input
 8002dd6:	4b3e      	ldr	r3, [pc, #248]	; (8002ed0 <sampling+0xda8>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b3e      	ldr	r3, [pc, #248]	; (8002ed8 <sampling+0xdb0>)
 8002dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de2:	4a3c      	ldr	r2, [pc, #240]	; (8002ed4 <sampling+0xdac>)
 8002de4:	6013      	str	r3, [r2, #0]
sample_Accu[1]=play_holder1[i] ; // saw
 8002de6:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <sampling+0xda8>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <sampling+0xdb4>)
 8002dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df2:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <sampling+0xdac>)
 8002df4:	6053      	str	r3, [r2, #4]
sample_Accu[2]=play_holder2[i];  // sine input
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <sampling+0xda8>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <sampling+0xdb8>)
 8002dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e02:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <sampling+0xdac>)
 8002e04:	6093      	str	r3, [r2, #8]
sample_Accu[3]=play_holder3[i] ;
 8002e06:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <sampling+0xda8>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	4b35      	ldr	r3, [pc, #212]	; (8002ee4 <sampling+0xdbc>)
 8002e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <sampling+0xdac>)
 8002e14:	60d3      	str	r3, [r2, #12]

// this section is about 100 tmr cycles
if ((i&63)==0){
 8002e16:	4b2e      	ldr	r3, [pc, #184]	; (8002ed0 <sampling+0xda8>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 8128 	bne.w	8003074 <sampling+0xf4c>
freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8002e24:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <sampling+0xdc8>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4a34      	ldr	r2, [pc, #208]	; (8002efc <sampling+0xdd4>)
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <sampling+0xdd8>)
 8002e32:	6013      	str	r3, [r2, #0]

freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8002e34:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <sampling+0xdc8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	4a30      	ldr	r2, [pc, #192]	; (8002efc <sampling+0xdd4>)
 8002e3a:	3309      	adds	r3, #9
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a2f      	ldr	r2, [pc, #188]	; (8002f00 <sampling+0xdd8>)
 8002e44:	6093      	str	r3, [r2, #8]
freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <sampling+0xdc8>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4a2c      	ldr	r2, [pc, #176]	; (8002efc <sampling+0xdd4>)
 8002e4c:	3312      	adds	r3, #18
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2a      	ldr	r2, [pc, #168]	; (8002f00 <sampling+0xdd8>)
 8002e56:	6113      	str	r3, [r2, #16]
freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8002e58:	4b25      	ldr	r3, [pc, #148]	; (8002ef0 <sampling+0xdc8>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <sampling+0xdd4>)
 8002e5e:	331b      	adds	r3, #27
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a26      	ldr	r2, [pc, #152]	; (8002f00 <sampling+0xdd8>)
 8002e68:	6193      	str	r3, [r2, #24]


if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002e6a:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <sampling+0xdd8>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	dd04      	ble.n	8002e88 <sampling+0xd60>
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <sampling+0xdd8>)
 8002e80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	e00b      	b.n	8002ea0 <sampling+0xd78>
 8002e88:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <sampling+0xdd8>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e96:	d503      	bpl.n	8002ea0 <sampling+0xd78>
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <sampling+0xdd8>)
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <sampling+0xdd8>)
 8002ea2:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb2:	dd27      	ble.n	8002f04 <sampling+0xddc>
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <sampling+0xdd8>)
 8002eb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002eba:	611a      	str	r2, [r3, #16]
 8002ebc:	e02e      	b.n	8002f1c <sampling+0xdf4>
 8002ebe:	bf00      	nop
 8002ec0:	2000085a 	.word	0x2000085a
 8002ec4:	200001bc 	.word	0x200001bc
 8002ec8:	20000860 	.word	0x20000860
 8002ecc:	20000142 	.word	0x20000142
 8002ed0:	2000088c 	.word	0x2000088c
 8002ed4:	2000086c 	.word	0x2000086c
 8002ed8:	20006188 	.word	0x20006188
 8002edc:	20004988 	.word	0x20004988
 8002ee0:	20005188 	.word	0x20005188
 8002ee4:	20005988 	.word	0x20005988
 8002ee8:	20003018 	.word	0x20003018
 8002eec:	2000088a 	.word	0x2000088a
 8002ef0:	20004984 	.word	0x20004984
 8002ef4:	20003718 	.word	0x20003718
 8002ef8:	200025ec 	.word	0x200025ec
 8002efc:	2000255c 	.word	0x2000255c
 8002f00:	2000253c 	.word	0x2000253c
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <sampling+0xe48>)
 8002f06:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f12:	d503      	bpl.n	8002f1c <sampling+0xdf4>
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <sampling+0xe48>)
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <sampling+0xe48>)
 8002f1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f2e:	dd04      	ble.n	8002f3a <sampling+0xe12>
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <sampling+0xe48>)
 8002f32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e00b      	b.n	8002f52 <sampling+0xe2a>
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <sampling+0xe48>)
 8002f3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	d503      	bpl.n	8002f52 <sampling+0xe2a>
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <sampling+0xe48>)
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <sampling+0xe48>)
 8002f54:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	dd06      	ble.n	8002f74 <sampling+0xe4c>
 8002f66:	4b02      	ldr	r3, [pc, #8]	; (8002f70 <sampling+0xe48>)
 8002f68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f6c:	619a      	str	r2, [r3, #24]
 8002f6e:	e00d      	b.n	8002f8c <sampling+0xe64>
 8002f70:	2000253c 	.word	0x2000253c
 8002f74:	4bc4      	ldr	r3, [pc, #784]	; (8003288 <sampling+0x1160>)
 8002f76:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	d503      	bpl.n	8002f8c <sampling+0xe64>
 8002f84:	4bc0      	ldr	r3, [pc, #768]	; (8003288 <sampling+0x1160>)
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]

freq_point[1]=1-freq_point[0];
 8002f8c:	4bbe      	ldr	r3, [pc, #760]	; (8003288 <sampling+0x1160>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f9a:	4bbb      	ldr	r3, [pc, #748]	; (8003288 <sampling+0x1160>)
 8002f9c:	edc3 7a01 	vstr	s15, [r3, #4]
freq_point[3]=1-freq_point[2];
 8002fa0:	4bb9      	ldr	r3, [pc, #740]	; (8003288 <sampling+0x1160>)
 8002fa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fae:	4bb6      	ldr	r3, [pc, #728]	; (8003288 <sampling+0x1160>)
 8002fb0:	edc3 7a03 	vstr	s15, [r3, #12]
freq_point[5]=1-freq_point[4];
 8002fb4:	4bb4      	ldr	r3, [pc, #720]	; (8003288 <sampling+0x1160>)
 8002fb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc2:	4bb1      	ldr	r3, [pc, #708]	; (8003288 <sampling+0x1160>)
 8002fc4:	edc3 7a05 	vstr	s15, [r3, #20]
freq_point[7]=1-freq_point[6];
 8002fc8:	4baf      	ldr	r3, [pc, #700]	; (8003288 <sampling+0x1160>)
 8002fca:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd6:	4bac      	ldr	r3, [pc, #688]	; (8003288 <sampling+0x1160>)
 8002fd8:	edc3 7a07 	vstr	s15, [r3, #28]

filter_res[0]=freq_point[0]*0.2;
 8002fdc:	4baa      	ldr	r3, [pc, #680]	; (8003288 <sampling+0x1160>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fb8f 	bl	8000704 <__aeabi_f2d>
 8002fe6:	a3a6      	add	r3, pc, #664	; (adr r3, 8003280 <sampling+0x1158>)
 8002fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fec:	f7fd f8fc 	bl	80001e8 <__aeabi_dmul>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f7fd fbdc 	bl	80007b4 <__aeabi_d2f>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	4aa3      	ldr	r2, [pc, #652]	; (800328c <sampling+0x1164>)
 8003000:	6013      	str	r3, [r2, #0]
filter_res[1]=freq_point[1]*0.2;
 8003002:	4ba1      	ldr	r3, [pc, #644]	; (8003288 <sampling+0x1160>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fb7c 	bl	8000704 <__aeabi_f2d>
 800300c:	a39c      	add	r3, pc, #624	; (adr r3, 8003280 <sampling+0x1158>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd f8e9 	bl	80001e8 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fbc9 	bl	80007b4 <__aeabi_d2f>
 8003022:	4603      	mov	r3, r0
 8003024:	4a99      	ldr	r2, [pc, #612]	; (800328c <sampling+0x1164>)
 8003026:	6053      	str	r3, [r2, #4]
filter_res[2]=freq_point[2]*0.2;
 8003028:	4b97      	ldr	r3, [pc, #604]	; (8003288 <sampling+0x1160>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fb69 	bl	8000704 <__aeabi_f2d>
 8003032:	a393      	add	r3, pc, #588	; (adr r3, 8003280 <sampling+0x1158>)
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f7fd f8d6 	bl	80001e8 <__aeabi_dmul>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fbb6 	bl	80007b4 <__aeabi_d2f>
 8003048:	4603      	mov	r3, r0
 800304a:	4a90      	ldr	r2, [pc, #576]	; (800328c <sampling+0x1164>)
 800304c:	6093      	str	r3, [r2, #8]
filter_res[3]=freq_point[3]*0.2;
 800304e:	4b8e      	ldr	r3, [pc, #568]	; (8003288 <sampling+0x1160>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fb56 	bl	8000704 <__aeabi_f2d>
 8003058:	a389      	add	r3, pc, #548	; (adr r3, 8003280 <sampling+0x1158>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd f8c3 	bl	80001e8 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	f7fd fba3 	bl	80007b4 <__aeabi_d2f>
 800306e:	4603      	mov	r3, r0
 8003070:	4a86      	ldr	r2, [pc, #536]	; (800328c <sampling+0x1164>)
 8003072:	60d3      	str	r3, [r2, #12]
		//freq_point[0]=0.50;

   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003074:	4b86      	ldr	r3, [pc, #536]	; (8003290 <sampling+0x1168>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <sampling+0x116c>)
 8003082:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003086:	4b83      	ldr	r3, [pc, #524]	; (8003294 <sampling+0x116c>)
 8003088:	ed93 7a01 	vldr	s14, [r3, #4]
 800308c:	4b81      	ldr	r3, [pc, #516]	; (8003294 <sampling+0x116c>)
 800308e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003092:	4b7e      	ldr	r3, [pc, #504]	; (800328c <sampling+0x1164>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a0:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <sampling+0x116c>)
 80030a2:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 80030a6:	4b7b      	ldr	r3, [pc, #492]	; (8003294 <sampling+0x116c>)
 80030a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80030ac:	4b76      	ldr	r3, [pc, #472]	; (8003288 <sampling+0x1160>)
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b6:	4b77      	ldr	r3, [pc, #476]	; (8003294 <sampling+0x116c>)
 80030b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80030bc:	4b72      	ldr	r3, [pc, #456]	; (8003288 <sampling+0x1160>)
 80030be:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ca:	4b72      	ldr	r3, [pc, #456]	; (8003294 <sampling+0x116c>)
 80030cc:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80030d0:	4b70      	ldr	r3, [pc, #448]	; (8003294 <sampling+0x116c>)
 80030d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80030d6:	4b6c      	ldr	r3, [pc, #432]	; (8003288 <sampling+0x1160>)
 80030d8:	edd3 7a00 	vldr	s15, [r3]
 80030dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030e0:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <sampling+0x116c>)
 80030e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80030e6:	4b68      	ldr	r3, [pc, #416]	; (8003288 <sampling+0x1160>)
 80030e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f4:	4b67      	ldr	r3, [pc, #412]	; (8003294 <sampling+0x116c>)
 80030f6:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <sampling+0x116c>)
 80030fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003104:	ee17 2a90 	vmov	r2, s15
 8003108:	4b61      	ldr	r3, [pc, #388]	; (8003290 <sampling+0x1168>)
 800310a:	601a      	str	r2, [r3, #0]

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 800310c:	4b60      	ldr	r3, [pc, #384]	; (8003290 <sampling+0x1168>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	ee07 3a90 	vmov	s15, r3
 8003114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003118:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <sampling+0x116c>)
 800311a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800311e:	4b5d      	ldr	r3, [pc, #372]	; (8003294 <sampling+0x116c>)
 8003120:	ed93 7a04 	vldr	s14, [r3, #16]
 8003124:	4b5b      	ldr	r3, [pc, #364]	; (8003294 <sampling+0x116c>)
 8003126:	edd3 6a06 	vldr	s13, [r3, #24]
 800312a:	4b58      	ldr	r3, [pc, #352]	; (800328c <sampling+0x1164>)
 800312c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003138:	4b56      	ldr	r3, [pc, #344]	; (8003294 <sampling+0x116c>)
 800313a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800313e:	4b55      	ldr	r3, [pc, #340]	; (8003294 <sampling+0x116c>)
 8003140:	ed93 7a04 	vldr	s14, [r3, #16]
 8003144:	4b50      	ldr	r3, [pc, #320]	; (8003288 <sampling+0x1160>)
 8003146:	edd3 7a02 	vldr	s15, [r3, #8]
 800314a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314e:	4b51      	ldr	r3, [pc, #324]	; (8003294 <sampling+0x116c>)
 8003150:	edd3 6a05 	vldr	s13, [r3, #20]
 8003154:	4b4c      	ldr	r3, [pc, #304]	; (8003288 <sampling+0x1160>)
 8003156:	edd3 7a03 	vldr	s15, [r3, #12]
 800315a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	4b4c      	ldr	r3, [pc, #304]	; (8003294 <sampling+0x116c>)
 8003164:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003168:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <sampling+0x116c>)
 800316a:	ed93 7a05 	vldr	s14, [r3, #20]
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <sampling+0x1160>)
 8003170:	edd3 7a02 	vldr	s15, [r3, #8]
 8003174:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <sampling+0x116c>)
 800317a:	edd3 6a06 	vldr	s13, [r3, #24]
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <sampling+0x1160>)
 8003180:	edd3 7a03 	vldr	s15, [r3, #12]
 8003184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318c:	4b41      	ldr	r3, [pc, #260]	; (8003294 <sampling+0x116c>)
 800318e:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 8003192:	4b40      	ldr	r3, [pc, #256]	; (8003294 <sampling+0x116c>)
 8003194:	edd3 7a06 	vldr	s15, [r3, #24]
 8003198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800319c:	ee17 2a90 	vmov	r2, s15
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <sampling+0x1168>)
 80031a2:	605a      	str	r2, [r3, #4]

		filter_accus[7]=sample_Accu[2];
 80031a4:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <sampling+0x1168>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	ee07 3a90 	vmov	s15, r3
 80031ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b0:	4b38      	ldr	r3, [pc, #224]	; (8003294 <sampling+0x116c>)
 80031b2:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80031b6:	4b37      	ldr	r3, [pc, #220]	; (8003294 <sampling+0x116c>)
 80031b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <sampling+0x116c>)
 80031be:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80031c2:	4b32      	ldr	r3, [pc, #200]	; (800328c <sampling+0x1164>)
 80031c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80031c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <sampling+0x116c>)
 80031d2:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80031d6:	4b2f      	ldr	r3, [pc, #188]	; (8003294 <sampling+0x116c>)
 80031d8:	ed93 7a07 	vldr	s14, [r3, #28]
 80031dc:	4b2a      	ldr	r3, [pc, #168]	; (8003288 <sampling+0x1160>)
 80031de:	edd3 7a04 	vldr	s15, [r3, #16]
 80031e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e6:	4b2b      	ldr	r3, [pc, #172]	; (8003294 <sampling+0x116c>)
 80031e8:	edd3 6a08 	vldr	s13, [r3, #32]
 80031ec:	4b26      	ldr	r3, [pc, #152]	; (8003288 <sampling+0x1160>)
 80031ee:	edd3 7a05 	vldr	s15, [r3, #20]
 80031f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <sampling+0x116c>)
 80031fc:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <sampling+0x116c>)
 8003202:	ed93 7a08 	vldr	s14, [r3, #32]
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <sampling+0x1160>)
 8003208:	edd3 7a04 	vldr	s15, [r3, #16]
 800320c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <sampling+0x116c>)
 8003212:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003216:	4b1c      	ldr	r3, [pc, #112]	; (8003288 <sampling+0x1160>)
 8003218:	edd3 7a05 	vldr	s15, [r3, #20]
 800321c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <sampling+0x116c>)
 8003226:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <sampling+0x116c>)
 800322c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003234:	ee17 2a90 	vmov	r2, s15
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <sampling+0x1168>)
 800323a:	609a      	str	r2, [r3, #8]

				filter_accus[10]=sample_Accu[3];
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <sampling+0x1168>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	ee07 3a90 	vmov	s15, r3
 8003244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <sampling+0x116c>)
 800324a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <sampling+0x116c>)
 8003250:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <sampling+0x116c>)
 8003256:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <sampling+0x1164>)
 800325c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <sampling+0x116c>)
 800326a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <sampling+0x116c>)
 8003270:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <sampling+0x1160>)
 8003276:	edd3 7a06 	vldr	s15, [r3, #24]
 800327a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800327e:	e00b      	b.n	8003298 <sampling+0x1170>
 8003280:	9999999a 	.word	0x9999999a
 8003284:	3fc99999 	.word	0x3fc99999
 8003288:	2000253c 	.word	0x2000253c
 800328c:	200024ec 	.word	0x200024ec
 8003290:	2000086c 	.word	0x2000086c
 8003294:	20002500 	.word	0x20002500
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <sampling+0x12d8>)
 800329a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800329e:	4b59      	ldr	r3, [pc, #356]	; (8003404 <sampling+0x12dc>)
 80032a0:	edd3 7a07 	vldr	s15, [r3, #28]
 80032a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	4b54      	ldr	r3, [pc, #336]	; (8003400 <sampling+0x12d8>)
 80032ae:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80032b2:	4b53      	ldr	r3, [pc, #332]	; (8003400 <sampling+0x12d8>)
 80032b4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80032b8:	4b52      	ldr	r3, [pc, #328]	; (8003404 <sampling+0x12dc>)
 80032ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80032be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c2:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <sampling+0x12d8>)
 80032c4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80032c8:	4b4e      	ldr	r3, [pc, #312]	; (8003404 <sampling+0x12dc>)
 80032ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80032ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <sampling+0x12d8>)
 80032d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 80032dc:	4b48      	ldr	r3, [pc, #288]	; (8003400 <sampling+0x12d8>)
 80032de:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80032e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032e6:	ee17 2a90 	vmov	r2, s15
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <sampling+0x12e0>)
 80032ec:	60da      	str	r2, [r3, #12]
	//	sample_Accu[0] =filter_accus[5]; // out
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];


filter_Accu=filter_Accu2=0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
filter_Accu=(sample_Accu[0]+sample_Accu[1])>>11;
 80032fc:	4b42      	ldr	r3, [pc, #264]	; (8003408 <sampling+0x12e0>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <sampling+0x12e0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4413      	add	r3, r2
 8003306:	12db      	asrs	r3, r3, #11
 8003308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>11; //filter + drum out
 800330c:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <sampling+0x12e0>)
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <sampling+0x12e0>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4413      	add	r3, r2
 8003316:	12db      	asrs	r3, r3, #11
 8003318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

 if (one_shot!=199)   one_shot++;  //play one attack then stop
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <sampling+0x12e4>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2bc7      	cmp	r3, #199	; 0xc7
 8003322:	d005      	beq.n	8003330 <sampling+0x1208>
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <sampling+0x12e4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b37      	ldr	r3, [pc, #220]	; (800340c <sampling+0x12e4>)
 800332e:	701a      	strb	r2, [r3, #0]

 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 8003330:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	db0a      	blt.n	8003350 <sampling+0x1228>
 800333a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800333e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003342:	4b33      	ldr	r3, [pc, #204]	; (8003410 <sampling+0x12e8>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	b2da      	uxtb	r2, r3
 800334a:	4b31      	ldr	r3, [pc, #196]	; (8003410 <sampling+0x12e8>)
 800334c:	701a      	strb	r2, [r3, #0]
 800334e:	e007      	b.n	8003360 <sampling+0x1238>
 8003350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003354:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003358:	dc02      	bgt.n	8003360 <sampling+0x1238>
 800335a:	4b2e      	ldr	r3, [pc, #184]	; (8003414 <sampling+0x12ec>)
 800335c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003360:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003368:	db0a      	blt.n	8003380 <sampling+0x1258>
 800336a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800336e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003372:	4b27      	ldr	r3, [pc, #156]	; (8003410 <sampling+0x12e8>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b25      	ldr	r3, [pc, #148]	; (8003410 <sampling+0x12e8>)
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e007      	b.n	8003390 <sampling+0x1268>
 8003380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003384:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003388:	dc02      	bgt.n	8003390 <sampling+0x1268>
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <sampling+0x12ec>)
 800338c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90



 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003390:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003394:	b29a      	uxth	r2, r3
 8003396:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80033a0:	b291      	uxth	r1, r2
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <sampling+0x12f0>)
 80033a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 80033a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	3301      	adds	r3, #1
 80033b6:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 80033ba:	b291      	uxth	r1, r2
 80033bc:	4a16      	ldr	r2, [pc, #88]	; (8003418 <sampling+0x12f0>)
 80033be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <sampling+0x12f4>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	3301      	adds	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <sampling+0x12f4>)
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <sampling+0x12f4>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d6:	f4ff acce 	bcc.w	8002d76 <sampling+0xc4e>
} // end of filer


//time_final=time_proc;   // in samples

if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <sampling+0x12f8>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <sampling+0x12c6>
 80033e2:	4b10      	ldr	r3, [pc, #64]	; (8003424 <sampling+0x12fc>)
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <sampling+0x12fc>)
 80033ec:	801a      	strh	r2, [r3, #0]
time_final[0]=time_proc;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <sampling+0x1300>)
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <sampling+0x1304>)
 80033f4:	801a      	strh	r2, [r3, #0]


//bank_write=0;   /// total 320 sample time (39khz)
}
 80033f6:	bf00      	nop
 80033f8:	37a0      	adds	r7, #160	; 0xa0
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bdb0      	pop	{r4, r5, r7, pc}
 80033fe:	bf00      	nop
 8003400:	20002500 	.word	0x20002500
 8003404:	2000253c 	.word	0x2000253c
 8003408:	2000086c 	.word	0x2000086c
 800340c:	200024c0 	.word	0x200024c0
 8003410:	20006988 	.word	0x20006988
 8003414:	fffffc01 	.word	0xfffffc01
 8003418:	20000890 	.word	0x20000890
 800341c:	2000088c 	.word	0x2000088c
 8003420:	200001b2 	.word	0x200001b2
 8003424:	20003432 	.word	0x20003432
 8003428:	20003430 	.word	0x20003430
 800342c:	2000342c 	.word	0x2000342c

08003430 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
	int32_t sine_tempA;
	int32_t sine_tempB;
	int8_t sine_frac;


	sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8003436:	4b28      	ldr	r3, [pc, #160]	; (80034d8 <sine_count+0xa8>)
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	b29a      	uxth	r2, r3
 800343e:	4b27      	ldr	r3, [pc, #156]	; (80034dc <sine_count+0xac>)
 8003440:	801a      	strh	r2, [r3, #0]
		if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8003442:	4b26      	ldr	r3, [pc, #152]	; (80034dc <sine_count+0xac>)
 8003444:	881a      	ldrh	r2, [r3, #0]
 8003446:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <sine_count+0xb0>)
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d903      	bls.n	8003456 <sine_count+0x26>
 800344e:	4b24      	ldr	r3, [pc, #144]	; (80034e0 <sine_count+0xb0>)
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	4b22      	ldr	r3, [pc, #136]	; (80034dc <sine_count+0xac>)
 8003454:	801a      	strh	r2, [r3, #0]
		sine_out = sine_block[sine_counter];  // 0- 40000
 8003456:	4b21      	ldr	r3, [pc, #132]	; (80034dc <sine_count+0xac>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4b21      	ldr	r3, [pc, #132]	; (80034e4 <sine_count+0xb4>)
 800345e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003462:	461a      	mov	r2, r3
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <sine_count+0xb8>)
 8003466:	601a      	str	r2, [r3, #0]
		sine_tempA=sine_out; // grab first value , needs to be always plus
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <sine_count+0xb8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	607b      	str	r3, [r7, #4]
		sine_tempA=sine_tempA-20000; //convert to signed
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8003474:	3b20      	subs	r3, #32
 8003476:	607b      	str	r3, [r7, #4]

		sine_counter++;
 8003478:	4b18      	ldr	r3, [pc, #96]	; (80034dc <sine_count+0xac>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	3301      	adds	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	4b16      	ldr	r3, [pc, #88]	; (80034dc <sine_count+0xac>)
 8003482:	801a      	strh	r2, [r3, #0]
		if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <sine_count+0xac>)
 8003486:	881a      	ldrh	r2, [r3, #0]
 8003488:	4b15      	ldr	r3, [pc, #84]	; (80034e0 <sine_count+0xb0>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <sine_count+0x66>
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <sine_count+0xac>)
 8003492:	2200      	movs	r2, #0
 8003494:	801a      	strh	r2, [r3, #0]
				sine_tempB=sine_block[sine_counter]-20000;  // convert to signed and +256 to -256
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <sine_count+0xac>)
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <sine_count+0xb4>)
 800349e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80034a2:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80034a6:	3b20      	subs	r3, #32
 80034a8:	603b      	str	r3, [r7, #0]
				sine_tempB=	((sine_tempB-sine_tempA)>>5)*(sine_counterB & 31);   // calculate fraction then add
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	115b      	asrs	r3, r3, #5
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <sine_count+0xa8>)
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	f002 021f 	and.w	r2, r2, #31
 80034ba:	fb02 f303 	mul.w	r3, r2, r3
 80034be:	603b      	str	r3, [r7, #0]
				sine_out=(sine_tempA+sine_tempB);   // add back to start value -20k-20k  or about 16bit
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <sine_count+0xb8>)
 80034c8:	6013      	str	r3, [r2, #0]


	}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	2000085a 	.word	0x2000085a
 80034dc:	20000858 	.word	0x20000858
 80034e0:	20000142 	.word	0x20000142
 80034e4:	0800baac 	.word	0x0800baac
 80034e8:	2000085c 	.word	0x2000085c
 80034ec:	00000000 	.word	0x00000000

080034f0 <LFO_source>:


void LFO_source(void){     // lfo
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b08b      	sub	sp, #44	; 0x2c
 80034f4:	af00      	add	r7, sp, #0


float	freq_temp=0;
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
float 	freq2_temp=0;
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
uint32_t 	freq_saw=0;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
uint8_t lfo_c ;
float offset=0;
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
	uint32_t freq3_temp;
	uint32_t freq4_temp;
	int16_t  output_hold;
	int32_t freq_tri;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 800350c:	2300      	movs	r3, #0
 800350e:	77fb      	strb	r3, [r7, #31]
 8003510:	e140      	b.n	8003794 <LFO_source+0x2a4>



	lfo_accu_temp=	lfo_accu[lfo_c][sampling_position_b];  // hold
 8003512:	7ffa      	ldrb	r2, [r7, #31]
 8003514:	4ba6      	ldr	r3, [pc, #664]	; (80037b0 <LFO_source+0x2c0>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	49a6      	ldr	r1, [pc, #664]	; (80037b4 <LFO_source+0x2c4>)
 800351c:	4613      	mov	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4403      	add	r3, r0
 8003526:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]

	freq3_temp=lfo_tempo_lut[LFO[lfo_c].rate] ;  // rate. this needs a little log
 800352c:	7ffa      	ldrb	r2, [r7, #31]
 800352e:	49a2      	ldr	r1, [pc, #648]	; (80037b8 <LFO_source+0x2c8>)
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	461a      	mov	r2, r3
 800353e:	4b9f      	ldr	r3, [pc, #636]	; (80037bc <LFO_source+0x2cc>)
 8003540:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003544:	60bb      	str	r3, [r7, #8]
		//freq4_temp=freq3_temp*freq3_temp;  // multiply  , dont more then 8000 really


			freq3_temp=lfo_accu_temp+ freq3_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4413      	add	r3, r2
 800354c:	60bb      	str	r3, [r7, #8]


///  counts from -16k to +16 k   @ + 0.03125      to   +400    *10    or 13 ms *8 (10 hz ? fastest  )
		if (freq3_temp>62831) lfo_accu_temp=0; else lfo_accu_temp=freq3_temp; // write back value  counts -16000 to +16000
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f24f 526f 	movw	r2, #62831	; 0xf56f
 8003554:	4293      	cmp	r3, r2
 8003556:	d902      	bls.n	800355e <LFO_source+0x6e>
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e001      	b.n	8003562 <LFO_source+0x72>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61bb      	str	r3, [r7, #24]
		if(!seq.pos)  lfo_accu_temp=0;   // tempo sync, mediocre
 8003562:	4b97      	ldr	r3, [pc, #604]	; (80037c0 <LFO_source+0x2d0>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <LFO_source+0x7e>
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
		lfo_accu[lfo_c][sampling_position]=lfo_accu_temp;
 800356e:	7ffa      	ldrb	r2, [r7, #31]
 8003570:	4b94      	ldr	r3, [pc, #592]	; (80037c4 <LFO_source+0x2d4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	498f      	ldr	r1, [pc, #572]	; (80037b4 <LFO_source+0x2c4>)
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	005b      	lsls	r3, r3, #1
 8003580:	4403      	add	r3, r0
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		freq_temp=lfo_accu_temp;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003592:	edc7 7a04 	vstr	s15, [r7, #16]
		freq2_temp=(freq_temp*0.0001);  //0-360
 8003596:	6938      	ldr	r0, [r7, #16]
 8003598:	f7fd f8b4 	bl	8000704 <__aeabi_f2d>
 800359c:	a382      	add	r3, pc, #520	; (adr r3, 80037a8 <LFO_source+0x2b8>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fc fe21 	bl	80001e8 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	f7fd f901 	bl	80007b4 <__aeabi_d2f>
 80035b2:	4603      	mov	r3, r0
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24

		freq_temp =arm_sin_f32(freq2_temp); // seems ok   , cmsis is ok  RADIANS !!!!!
 80035b6:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80035ba:	f007 fbf3 	bl	800ada4 <arm_sin_f32>
 80035be:	ed87 0a04 	vstr	s0, [r7, #16]
		freq2_temp=freq_temp*LFO[lfo_c].depth*204;
 80035c2:	7ffa      	ldrb	r2, [r7, #31]
 80035c4:	497c      	ldr	r1, [pc, #496]	; (80037b8 <LFO_source+0x2c8>)
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	3301      	adds	r3, #1
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80035e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e4:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80037c8 <LFO_source+0x2d8>
 80035e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (!LFO[lfo_c].offset)    LFO[lfo_c].offset=0;   // se
 80035f0:	7ffa      	ldrb	r2, [r7, #31]
 80035f2:	4971      	ldr	r1, [pc, #452]	; (80037b8 <LFO_source+0x2c8>)
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3303      	adds	r3, #3
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d109      	bne.n	800361a <LFO_source+0x12a>
 8003606:	7ffa      	ldrb	r2, [r7, #31]
 8003608:	496b      	ldr	r1, [pc, #428]	; (80037b8 <LFO_source+0x2c8>)
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	3303      	adds	r3, #3
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 800361a:	7ffa      	ldrb	r2, [r7, #31]
 800361c:	4966      	ldr	r1, [pc, #408]	; (80037b8 <LFO_source+0x2c8>)
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3303      	adds	r3, #3
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	021b      	lsls	r3, r3, #8
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003636:	edc7 7a03 	vstr	s15, [r7, #12]
			freq2_temp=(freq2_temp+offset);
 800363a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800363e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003646:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		if (freq2_temp>32767)  freq2_temp=32767;
 800364a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800364e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80037cc <LFO_source+0x2dc>
 8003652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	dd01      	ble.n	8003660 <LFO_source+0x170>
 800365c:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <LFO_source+0x2e0>)
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
		if (freq2_temp<-32767) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000
 8003660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003664:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80037d4 <LFO_source+0x2e4>
 8003668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	d501      	bpl.n	8003676 <LFO_source+0x186>
 8003672:	4b59      	ldr	r3, [pc, #356]	; (80037d8 <LFO_source+0x2e8>)
 8003674:	627b      	str	r3, [r7, #36]	; 0x24

						output_hold=freq2_temp;
 8003676:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800367a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800367e:	ee17 3a90 	vmov	r3, s15
 8003682:	80fb      	strh	r3, [r7, #6]
						if(lfo_accu_temp<32768)   freq_tri=lfo_accu_temp; else freq_tri=65535-lfo_accu_temp;    // 0-32767
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368a:	d202      	bcs.n	8003692 <LFO_source+0x1a2>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e004      	b.n	800369c <LFO_source+0x1ac>
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003698:	33ff      	adds	r3, #255	; 0xff
 800369a:	617b      	str	r3, [r7, #20]
					freq_saw=((lfo_accu_temp*LFO[lfo_c].depth)>>8)+offset;
 800369c:	7ffa      	ldrb	r2, [r7, #31]
 800369e:	4946      	ldr	r1, [pc, #280]	; (80037b8 <LFO_source+0x2c8>)
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3301      	adds	r3, #1
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80036c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036cc:	ee17 3a90 	vmov	r3, s15
 80036d0:	623b      	str	r3, [r7, #32]
					if (freq_saw>65535)  freq_saw=65535;   // clip
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d302      	bcc.n	80036e0 <LFO_source+0x1f0>
 80036da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036de:	623b      	str	r3, [r7, #32]

					LFO[lfo_c].out[sampling_position]=output_hold+32767;
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	7ffa      	ldrb	r2, [r7, #31]
 80036e4:	4937      	ldr	r1, [pc, #220]	; (80037c4 <LFO_source+0x2d4>)
 80036e6:	7809      	ldrb	r1, [r1, #0]
 80036e8:	460c      	mov	r4, r1
 80036ea:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80036ee:	337f      	adds	r3, #127	; 0x7f
 80036f0:	b298      	uxth	r0, r3
 80036f2:	4931      	ldr	r1, [pc, #196]	; (80037b8 <LFO_source+0x2c8>)
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	4413      	add	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4423      	add	r3, r4
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	440b      	add	r3, r1
 8003702:	4602      	mov	r2, r0
 8003704:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;
 8003706:	7ffa      	ldrb	r2, [r7, #31]
 8003708:	4b2e      	ldr	r3, [pc, #184]	; (80037c4 <LFO_source+0x2d4>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	461c      	mov	r4, r3
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	b298      	uxth	r0, r3
 8003712:	4929      	ldr	r1, [pc, #164]	; (80037b8 <LFO_source+0x2c8>)
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	4413      	add	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4423      	add	r3, r4
 800371e:	330c      	adds	r3, #12
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	440b      	add	r3, r1
 8003724:	4602      	mov	r2, r0
 8003726:	805a      	strh	r2, [r3, #2]

				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset;
 8003728:	7ffa      	ldrb	r2, [r7, #31]
 800372a:	4923      	ldr	r1, [pc, #140]	; (80037b8 <LFO_source+0x2c8>)
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3301      	adds	r3, #1
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	461a      	mov	r2, r3
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	11db      	asrs	r3, r3, #7
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800374c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003758:	ee17 3a90 	vmov	r3, s15
 800375c:	617b      	str	r3, [r7, #20]
				   if (freq_tri>65535)  freq_tri=65535;   // clip
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003764:	db02      	blt.n	800376c <LFO_source+0x27c>
 8003766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800376a:	617b      	str	r3, [r7, #20]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 800376c:	7ffa      	ldrb	r2, [r7, #31]
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <LFO_source+0x2d4>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	461c      	mov	r4, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	b298      	uxth	r0, r3
 8003778:	490f      	ldr	r1, [pc, #60]	; (80037b8 <LFO_source+0x2c8>)
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4413      	add	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4423      	add	r3, r4
 8003784:	3314      	adds	r3, #20
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	440b      	add	r3, r1
 800378a:	4602      	mov	r2, r0
 800378c:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 800378e:	7ffb      	ldrb	r3, [r7, #31]
 8003790:	3301      	adds	r3, #1
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	7ffb      	ldrb	r3, [r7, #31]
 8003796:	2b09      	cmp	r3, #9
 8003798:	f67f aebb 	bls.w	8003512 <LFO_source+0x22>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	372c      	adds	r7, #44	; 0x2c
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	eb1c432d 	.word	0xeb1c432d
 80037ac:	3f1a36e2 	.word	0x3f1a36e2
 80037b0:	20004985 	.word	0x20004985
 80037b4:	200025f0 	.word	0x200025f0
 80037b8:	20003434 	.word	0x20003434
 80037bc:	20002980 	.word	0x20002980
 80037c0:	200041a4 	.word	0x200041a4
 80037c4:	20004984 	.word	0x20004984
 80037c8:	434c0000 	.word	0x434c0000
 80037cc:	46fffe00 	.word	0x46fffe00
 80037d0:	46fffe00 	.word	0x46fffe00
 80037d4:	c6fffe00 	.word	0xc6fffe00
 80037d8:	c6fffe00 	.word	0xc6fffe00

080037dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	b0a4      	sub	sp, #144	; 0x90
 80037e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037e2:	f001 fcf1 	bl	80051c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037e6:	f000 fdcb 	bl	8004380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ea:	f001 f901 	bl	80049f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80037ee:	f001 f8df 	bl	80049b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80037f2:	f000 fe2f 	bl	8004454 <MX_ADC1_Init>
  MX_SPI2_Init();
 80037f6:	f000 ff27 	bl	8004648 <MX_SPI2_Init>
  MX_TIM3_Init();
 80037fa:	f000 ffaf 	bl	800475c <MX_TIM3_Init>
  MX_TIM4_Init();
 80037fe:	f001 f82f 	bl	8004860 <MX_TIM4_Init>
  MX_I2C2_Init();
 8003802:	f000 febd 	bl	8004580 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003806:	f000 ff55 	bl	80046b4 <MX_TIM2_Init>
  MX_SPI1_Init();
 800380a:	f000 fee7 	bl	80045dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800380e:	f001 f87b 	bl	8004908 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003812:	f001 f8a3 	bl	800495c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8003816:	4ba5      	ldr	r3, [pc, #660]	; (8003aac <main+0x2d0>)
 8003818:	677b      	str	r3, [r7, #116]	; 0x74



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2); // write to register hspi2
 800381a:	48a5      	ldr	r0, [pc, #660]	; (8003ab0 <main+0x2d4>)
 800381c:	f005 f88c 	bl	8008938 <HAL_SPI_Init>
  HAL_SPI_Init(&hspi1); // write to register hspi2
 8003820:	48a4      	ldr	r0, [pc, #656]	; (8003ab4 <main+0x2d8>)
 8003822:	f005 f889 	bl	8008938 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8003826:	48a4      	ldr	r0, [pc, #656]	; (8003ab8 <main+0x2dc>)
 8003828:	f005 fed8 	bl	80095dc <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 800382c:	4ba3      	ldr	r3, [pc, #652]	; (8003abc <main+0x2e0>)
 800382e:	2200      	movs	r2, #0
 8003830:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8003832:	48a3      	ldr	r0, [pc, #652]	; (8003ac0 <main+0x2e4>)
 8003834:	f005 fe78 	bl	8009528 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8003838:	48a2      	ldr	r0, [pc, #648]	; (8003ac4 <main+0x2e8>)
 800383a:	f005 fe75 	bl	8009528 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 800383e:	2100      	movs	r1, #0
 8003840:	489d      	ldr	r0, [pc, #628]	; (8003ab8 <main+0x2dc>)
 8003842:	f005 ff87 	bl	8009754 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003846:	2104      	movs	r1, #4
 8003848:	489b      	ldr	r0, [pc, #620]	; (8003ab8 <main+0x2dc>)
 800384a:	f005 ff83 	bl	8009754 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 800384e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003852:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8003858:	489b      	ldr	r0, [pc, #620]	; (8003ac8 <main+0x2ec>)
 800385a:	f001 fd8f 	bl	800537c <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 800385e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003862:	499a      	ldr	r1, [pc, #616]	; (8003acc <main+0x2f0>)
 8003864:	4898      	ldr	r0, [pc, #608]	; (8003ac8 <main+0x2ec>)
 8003866:	f001 fec9 	bl	80055fc <HAL_ADC_Start_DMA>
//HAL_DMA_Init(&hdma_spi2_tx);

HAL_I2C_MspInit(&hi2c2);
 800386a:	4899      	ldr	r0, [pc, #612]	; (8003ad0 <main+0x2f4>)
 800386c:	f001 f9fa 	bl	8004c64 <HAL_I2C_MspInit>
uint8_t send_spi1[5]={0x90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,};
 8003870:	4a98      	ldr	r2, [pc, #608]	; (8003ad4 <main+0x2f8>)
 8003872:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800387a:	6018      	str	r0, [r3, #0]
 800387c:	3304      	adds	r3, #4
 800387e:	7019      	strb	r1, [r3, #0]
HAL_SPI_Receive(&hspi1, return_spi1, 2, 1000);   // manuf return sif correct , 0xEF,0x17 which is correct, then repeats when more request

*/


HAL_Delay(5);
 8003880:	2005      	movs	r0, #5
 8003882:	f001 fd13 	bl	80052ac <HAL_Delay>


send_spi1[0]=0x06; //enable write  , only lasts for single operation
 8003886:	2306      	movs	r3, #6
 8003888:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800388c:	2200      	movs	r2, #0
 800388e:	2110      	movs	r1, #16
 8003890:	4891      	ldr	r0, [pc, #580]	; (8003ad8 <main+0x2fc>)
 8003892:	f003 fc1f 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003896:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800389a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389e:	2201      	movs	r2, #1
 80038a0:	4884      	ldr	r0, [pc, #528]	; (8003ab4 <main+0x2d8>)
 80038a2:	f005 f8d2 	bl	8008a4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80038a6:	2201      	movs	r2, #1
 80038a8:	2110      	movs	r1, #16
 80038aa:	488b      	ldr	r0, [pc, #556]	; (8003ad8 <main+0x2fc>)
 80038ac:	f003 fc12 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80038b0:	2005      	movs	r0, #5
 80038b2:	f001 fcfb 	bl	80052ac <HAL_Delay>
send_spi1[0]=0x20; //sector erase
 80038b6:	2320      	movs	r3, #32
 80038b8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 80038c2:	2300      	movs	r3, #0
 80038c4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 80038ce:	2200      	movs	r2, #0
 80038d0:	2110      	movs	r1, #16
 80038d2:	4881      	ldr	r0, [pc, #516]	; (8003ad8 <main+0x2fc>)
 80038d4:	f003 fbfe 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 4, 1000);   //erase sector ,works
 80038d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80038dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038e0:	2204      	movs	r2, #4
 80038e2:	4874      	ldr	r0, [pc, #464]	; (8003ab4 <main+0x2d8>)
 80038e4:	f005 f8b1 	bl	8008a4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80038e8:	2201      	movs	r2, #1
 80038ea:	2110      	movs	r1, #16
 80038ec:	487a      	ldr	r0, [pc, #488]	; (8003ad8 <main+0x2fc>)
 80038ee:	f003 fbf1 	bl	80070d4 <HAL_GPIO_WritePin>


send_spi1[0]=0x05; //read status register  if writing
 80038f2:	2305      	movs	r3, #5
 80038f4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
status_reg[1]=1; // set busy on
 80038fe:	4b77      	ldr	r3, [pc, #476]	; (8003adc <main+0x300>)
 8003900:	2201      	movs	r2, #1
 8003902:	705a      	strb	r2, [r3, #1]

while (status_reg[1]&1){								// check if write busy
 8003904:	e012      	b.n	800392c <main+0x150>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003906:	2200      	movs	r2, #0
 8003908:	2110      	movs	r1, #16
 800390a:	4873      	ldr	r0, [pc, #460]	; (8003ad8 <main+0x2fc>)
 800390c:	f003 fbe2 	bl	80070d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, send_spi1, status_reg,2, 200);
 8003910:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003914:	23c8      	movs	r3, #200	; 0xc8
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2302      	movs	r3, #2
 800391a:	4a70      	ldr	r2, [pc, #448]	; (8003adc <main+0x300>)
 800391c:	4865      	ldr	r0, [pc, #404]	; (8003ab4 <main+0x2d8>)
 800391e:	f005 fae1 	bl	8008ee4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003922:	2201      	movs	r2, #1
 8003924:	2110      	movs	r1, #16
 8003926:	486c      	ldr	r0, [pc, #432]	; (8003ad8 <main+0x2fc>)
 8003928:	f003 fbd4 	bl	80070d4 <HAL_GPIO_WritePin>
while (status_reg[1]&1){								// check if write busy
 800392c:	4b6b      	ldr	r3, [pc, #428]	; (8003adc <main+0x300>)
 800392e:	785b      	ldrb	r3, [r3, #1]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e6      	bne.n	8003906 <main+0x12a>
}

send_spi1[0]=0x06; //enable write again
 8003938:	2306      	movs	r3, #6
 800393a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 800393e:	2200      	movs	r2, #0
 8003940:	2110      	movs	r1, #16
 8003942:	4865      	ldr	r0, [pc, #404]	; (8003ad8 <main+0x2fc>)
 8003944:	f003 fbc6 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003948:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800394c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003950:	2201      	movs	r2, #1
 8003952:	4858      	ldr	r0, [pc, #352]	; (8003ab4 <main+0x2d8>)
 8003954:	f005 f879 	bl	8008a4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003958:	2201      	movs	r2, #1
 800395a:	2110      	movs	r1, #16
 800395c:	485e      	ldr	r0, [pc, #376]	; (8003ad8 <main+0x2fc>)
 800395e:	f003 fbb9 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8003962:	2005      	movs	r0, #5
 8003964:	f001 fca2 	bl	80052ac <HAL_Delay>




//uint8_t temp_spi1[]={0x02,0,0,1,"H","E","L","L","O"," ","W","O","R","L","D",250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
uint8_t temp_spi1[]={0x02,0,0,1,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page progrram ,24bit(address)  +1-255 byte data  (page)
 8003968:	4b5d      	ldr	r3, [pc, #372]	; (8003ae0 <main+0x304>)
 800396a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800396e:	461d      	mov	r5, r3
 8003970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003974:	682b      	ldr	r3, [r5, #0]
 8003976:	8023      	strh	r3, [r4, #0]
memcpy  (send_spi1,temp_spi1, 14);   // copy new array over old
 8003978:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800397c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003980:	220e      	movs	r2, #14
 8003982:	4618      	mov	r0, r3
 8003984:	f007 fa80 	bl	800ae88 <memcpy>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8003988:	2200      	movs	r2, #0
 800398a:	2110      	movs	r1, #16
 800398c:	4852      	ldr	r0, [pc, #328]	; (8003ad8 <main+0x2fc>)
 800398e:	f003 fba1 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 14, 1000);  //address,page program
 8003992:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800399a:	220e      	movs	r2, #14
 800399c:	4845      	ldr	r0, [pc, #276]	; (8003ab4 <main+0x2d8>)
 800399e:	f005 f854 	bl	8008a4a <HAL_SPI_Transmit>

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80039a2:	2201      	movs	r2, #1
 80039a4:	2110      	movs	r1, #16
 80039a6:	484c      	ldr	r0, [pc, #304]	; (8003ad8 <main+0x2fc>)
 80039a8:	f003 fb94 	bl	80070d4 <HAL_GPIO_WritePin>




HAL_Delay(25);
 80039ac:	2019      	movs	r0, #25
 80039ae:	f001 fc7d 	bl	80052ac <HAL_Delay>
send_spi1[0]=0x04; //disable write
 80039b2:	2304      	movs	r3, #4
 80039b4:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2110      	movs	r1, #16
 80039bc:	4846      	ldr	r0, [pc, #280]	; (8003ad8 <main+0x2fc>)
 80039be:	f003 fb89 	bl	80070d4 <HAL_GPIO_WritePin>
HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 80039c2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80039c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039ca:	2201      	movs	r2, #1
 80039cc:	4839      	ldr	r0, [pc, #228]	; (8003ab4 <main+0x2d8>)
 80039ce:	f005 f83c 	bl	8008a4a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80039d2:	2201      	movs	r2, #1
 80039d4:	2110      	movs	r1, #16
 80039d6:	4840      	ldr	r0, [pc, #256]	; (8003ad8 <main+0x2fc>)
 80039d8:	f003 fb7c 	bl	80070d4 <HAL_GPIO_WritePin>

HAL_Delay(5);
 80039dc:	2005      	movs	r0, #5
 80039de:	f001 fc65 	bl	80052ac <HAL_Delay>
memcpy  (send_spi1,return_spi1, 14);   // clear out
 80039e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039e6:	220e      	movs	r2, #14
 80039e8:	493e      	ldr	r1, [pc, #248]	; (8003ae4 <main+0x308>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f007 fa4c 	bl	800ae88 <memcpy>
send_spi1[0]=0x03; //read page 1
 80039f0:	2303      	movs	r3, #3
 80039f2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
send_spi1[1]=0; //24bit address msb
 80039f6:	2300      	movs	r3, #0
 80039f8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
send_spi1[2]=0; //24bit address
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
send_spi1[3]=1; //24bit address lsb
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	4832      	ldr	r0, [pc, #200]	; (8003ad8 <main+0x2fc>)
 8003a0e:	f003 fb61 	bl	80070d4 <HAL_GPIO_WritePin>

HAL_SPI_Transmit (&hspi1, send_spi1, 4, 100);
 8003a12:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003a16:	2364      	movs	r3, #100	; 0x64
 8003a18:	2204      	movs	r2, #4
 8003a1a:	4826      	ldr	r0, [pc, #152]	; (8003ab4 <main+0x2d8>)
 8003a1c:	f005 f815 	bl	8008a4a <HAL_SPI_Transmit>
HAL_SPI_Receive (&hspi1, return_spi1, 10, 100);   // works fine
 8003a20:	2364      	movs	r3, #100	; 0x64
 8003a22:	220a      	movs	r2, #10
 8003a24:	492f      	ldr	r1, [pc, #188]	; (8003ae4 <main+0x308>)
 8003a26:	4823      	ldr	r0, [pc, #140]	; (8003ab4 <main+0x2d8>)
 8003a28:	f005 f94b 	bl	8008cc2 <HAL_SPI_Receive>

//HAL_SPI_TransmitReceive(&hspi1, send_spi1, return_spi1,14, 100);  // better in case skip , 4 bytes is null then data , slow
//HAL_Delay(5);

//HAL_SPI_Receive(&hspi1, return_spi1, 12, 1000);  // reverse msb ?
HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	2110      	movs	r1, #16
 8003a30:	4829      	ldr	r0, [pc, #164]	; (8003ad8 <main+0x2fc>)
 8003a32:	f003 fb4f 	bl	80070d4 <HAL_GPIO_WritePin>



HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
 8003a36:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a3e:	2201      	movs	r2, #1
 8003a40:	481c      	ldr	r0, [pc, #112]	; (8003ab4 <main+0x2d8>)
 8003a42:	f005 f802 	bl	8008a4a <HAL_SPI_Transmit>


uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	f107 0310 	add.w	r3, r7, #16
 8003a4e:	223c      	movs	r2, #60	; 0x3c
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f007 fa26 	bl	800aea4 <memset>
uint16_t mem_count2=0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8003a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a62:	9302      	str	r3, [sp, #8]
 8003a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <main+0x30c>)
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2302      	movs	r3, #2
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	21a0      	movs	r1, #160	; 0xa0
 8003a74:	4816      	ldr	r0, [pc, #88]	; (8003ad0 <main+0x2f4>)
 8003a76:	f003 fd85 	bl	8007584 <HAL_I2C_Mem_Read>





	uint16_t mem_counter=0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8003a80:	4a1a      	ldr	r2, [pc, #104]	; (8003aec <main+0x310>)
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <main+0x30c>)
 8003a84:	4614      	mov	r4, r2
 8003a86:	461d      	mov	r5, r3
 8003a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a94:	c407      	stmia	r4!, {r0, r1, r2}
 8003a96:	8023      	strh	r3, [r4, #0]
    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <main+0x314>)
 8003a9a:	22a0      	movs	r2, #160	; 0xa0
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4815      	ldr	r0, [pc, #84]	; (8003af4 <main+0x318>)
 8003aa0:	f007 f9f2 	bl	800ae88 <memcpy>

    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003aaa:	e07f      	b.n	8003bac <main+0x3d0>
 8003aac:	0800d2f0 	.word	0x0800d2f0
 8003ab0:	20007108 	.word	0x20007108
 8003ab4:	200070b0 	.word	0x200070b0
 8003ab8:	200071a8 	.word	0x200071a8
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	20007160 	.word	0x20007160
 8003ac4:	200071f0 	.word	0x200071f0
 8003ac8:	20006fb4 	.word	0x20006fb4
 8003acc:	200018a0 	.word	0x200018a0
 8003ad0:	2000705c 	.word	0x2000705c
 8003ad4:	0800b3d8 	.word	0x0800b3d8
 8003ad8:	40020000 	.word	0x40020000
 8003adc:	200001b8 	.word	0x200001b8
 8003ae0:	0800b3e0 	.word	0x0800b3e0
 8003ae4:	2000341c 	.word	0x2000341c
 8003ae8:	20000658 	.word	0x20000658
 8003aec:	200041a4 	.word	0x200041a4
 8003af0:	200006f4 	.word	0x200006f4
 8003af4:	200001bc 	.word	0x200001bc

		memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8003af8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4a97      	ldr	r2, [pc, #604]	; (8003d64 <main+0x588>)
 8003b06:	1898      	adds	r0, r3, r2
 8003b08:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	332e      	adds	r3, #46	; 0x2e
 8003b16:	4a94      	ldr	r2, [pc, #592]	; (8003d68 <main+0x58c>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f007 f9b3 	bl	800ae88 <memcpy>

		memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8003b22:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003b26:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	4a8f      	ldr	r2, [pc, #572]	; (8003d6c <main+0x590>)
 8003b30:	1898      	adds	r0, r3, r2
 8003b32:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	336a      	adds	r3, #106	; 0x6a
 8003b3e:	4a8a      	ldr	r2, [pc, #552]	; (8003d68 <main+0x58c>)
 8003b40:	4413      	add	r3, r2
 8003b42:	2205      	movs	r2, #5
 8003b44:	4619      	mov	r1, r3
 8003b46:	f007 f99f 	bl	800ae88 <memcpy>
		memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8003b4a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4a86      	ldr	r2, [pc, #536]	; (8003d70 <main+0x594>)
 8003b58:	1898      	adds	r0, r3, r2
 8003b5a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003b6a:	4a7f      	ldr	r2, [pc, #508]	; (8003d68 <main+0x58c>)
 8003b6c:	4413      	add	r3, r2
 8003b6e:	2206      	movs	r2, #6
 8003b70:	4619      	mov	r1, r3
 8003b72:	f007 f989 	bl	800ae88 <memcpy>
		memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8003b76:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	4a7c      	ldr	r2, [pc, #496]	; (8003d74 <main+0x598>)
 8003b84:	1898      	adds	r0, r3, r2
 8003b86:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003b96:	4a74      	ldr	r2, [pc, #464]	; (8003d68 <main+0x58c>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	2206      	movs	r2, #6
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f007 f973 	bl	800ae88 <memcpy>
    for(mem_counter=0;mem_counter<10;mem_counter++){
 8003ba2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003bac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003bb0:	2b09      	cmp	r3, #9
 8003bb2:	d9a1      	bls.n	8003af8 <main+0x31c>

    }


	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003bb4:	4b70      	ldr	r3, [pc, #448]	; (8003d78 <main+0x59c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	e057      	b.n	8003c6c <main+0x490>

	for 	(n=0;n<18;n++){					// this is ok
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <main+0x5a0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	e049      	b.n	8003c58 <main+0x47c>
		if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8003bc4:	4b6d      	ldr	r3, [pc, #436]	; (8003d7c <main+0x5a0>)
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d114      	bne.n	8003bf6 <main+0x41a>
 8003bcc:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <main+0x59c>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	4b67      	ldr	r3, [pc, #412]	; (8003d78 <main+0x59c>)
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	460b      	mov	r3, r1
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	4619      	mov	r1, r3
 8003be8:	4b64      	ldr	r3, [pc, #400]	; (8003d7c <main+0x5a0>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	440b      	add	r3, r1
 8003bee:	3a80      	subs	r2, #128	; 0x80
 8003bf0:	b2d1      	uxtb	r1, r2
 8003bf2:	4a63      	ldr	r2, [pc, #396]	; (8003d80 <main+0x5a4>)
 8003bf4:	54d1      	strb	r1, [r2, r3]
		if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8003bf6:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <main+0x5a0>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d114      	bne.n	8003c28 <main+0x44c>
 8003bfe:	4b5e      	ldr	r3, [pc, #376]	; (8003d78 <main+0x59c>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3310      	adds	r3, #16
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <main+0x59c>)
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	460b      	mov	r3, r1
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4b58      	ldr	r3, [pc, #352]	; (8003d7c <main+0x5a0>)
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	440b      	add	r3, r1
 8003c20:	00d2      	lsls	r2, r2, #3
 8003c22:	b2d1      	uxtb	r1, r2
 8003c24:	4a56      	ldr	r2, [pc, #344]	; (8003d80 <main+0x5a4>)
 8003c26:	54d1      	strb	r1, [r2, r3]
		if (n>1)  gfx_ram[(i*18)+n] = 255;
 8003c28:	4b54      	ldr	r3, [pc, #336]	; (8003d7c <main+0x5a0>)
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d90d      	bls.n	8003c4c <main+0x470>
 8003c30:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <main+0x59c>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <main+0x5a0>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	4413      	add	r3, r2
 8003c46:	4a4e      	ldr	r2, [pc, #312]	; (8003d80 <main+0x5a4>)
 8003c48:	21ff      	movs	r1, #255	; 0xff
 8003c4a:	54d1      	strb	r1, [r2, r3]
	for 	(n=0;n<18;n++){					// this is ok
 8003c4c:	4b4b      	ldr	r3, [pc, #300]	; (8003d7c <main+0x5a0>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	3301      	adds	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <main+0x5a0>)
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <main+0x5a0>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	2b11      	cmp	r3, #17
 8003c5e:	d9b1      	bls.n	8003bc4 <main+0x3e8>
	for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8003c60:	4b45      	ldr	r3, [pc, #276]	; (8003d78 <main+0x59c>)
 8003c62:	881b      	ldrh	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <main+0x59c>)
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	4b42      	ldr	r3, [pc, #264]	; (8003d78 <main+0x59c>)
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	2b3f      	cmp	r3, #63	; 0x3f
 8003c72:	d9a3      	bls.n	8003bbc <main+0x3e0>

	}

	}
seq.pos=0;
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <main+0x5a8>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]


uint32_t  tempo_hold=1;  // calculate tempo look up
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	66fb      	str	r3, [r7, #108]	; 0x6c


  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <main+0x59c>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	e016      	b.n	8003cb4 <main+0x4d8>
  		tempo_hold=i;
 8003c86:	4b3c      	ldr	r3, [pc, #240]	; (8003d78 <main+0x59c>)
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8003c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4a3d      	ldr	r2, [pc, #244]	; (8003d88 <main+0x5ac>)
 8003c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c96:	66fb      	str	r3, [r7, #108]	; 0x6c

  	tempo_lut[i]=tempo_hold;
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <main+0x59c>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	b299      	uxth	r1, r3
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <main+0x5b0>)
 8003ca4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8003ca8:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <main+0x59c>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	3301      	adds	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <main+0x59c>)
 8003cb2:	801a      	strh	r2, [r3, #0]
 8003cb4:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <main+0x59c>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	2bff      	cmp	r3, #255	; 0xff
 8003cba:	d9e4      	bls.n	8003c86 <main+0x4aa>
  	}

//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

	noteTiming=24;
 8003cbc:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <main+0x5b4>)
 8003cbe:	2218      	movs	r2, #24
 8003cc0:	701a      	strb	r2, [r3, #0]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003cc2:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <main+0x59c>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
 8003cc8:	e00b      	b.n	8003ce2 <main+0x506>
		spell[i]=67;
 8003cca:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <main+0x59c>)
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <main+0x5b8>)
 8003cd2:	2143      	movs	r1, #67	; 0x43
 8003cd4:	5499      	strb	r1, [r3, r2]
	for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8003cd6:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <main+0x59c>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <main+0x59c>)
 8003ce0:	801a      	strh	r2, [r3, #0]
 8003ce2:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <main+0x59c>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003cea:	d3ee      	bcc.n	8003cca <main+0x4ee>

	}

	gfx_clear();
 8003cec:	f7fd fe2c 	bl	8001948 <gfx_clear>
uint16_t pars_counter;

for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003cf6:	e006      	b.n	8003d06 <main+0x52a>

		menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8003cf8:	f7fd f95a 	bl	8000fb0 <menu_parser>
for (pars_counter=0;pars_counter<600;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8003cfc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d00:	3301      	adds	r3, #1
 8003d02:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003d06:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d0a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003d0e:	d3f3      	bcc.n	8003cf8 <main+0x51c>

	}

for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003d16:	e00c      	b.n	8003d32 <main+0x556>
 8003d18:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <main+0x5bc>)
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	5499      	strb	r1, [r3, r2]
 8003d28:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003d32:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3a:	d3ed      	bcc.n	8003d18 <main+0x53c>





default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8003d3c:	4816      	ldr	r0, [pc, #88]	; (8003d98 <main+0x5bc>)
 8003d3e:	f7fc fa4b 	bl	80001d8 <strlen>
 8003d42:	4603      	mov	r3, r0
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	4b15      	ldr	r3, [pc, #84]	; (8003d9c <main+0x5c0>)
 8003d48:	801a      	strh	r2, [r3, #0]
	menu_title_count--;  //count back one
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <main+0x5c4>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <main+0x5c4>)
 8003d54:	701a      	strb	r2, [r3, #0]
	display_clear ();
 8003d56:	f7fd fe39 	bl	80019cc <display_clear>
	for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003d60:	e02f      	b.n	8003dc2 <main+0x5e6>
 8003d62:	bf00      	nop
 8003d64:	20003434 	.word	0x20003434
 8003d68:	20000658 	.word	0x20000658
 8003d6c:	20003718 	.word	0x20003718
 8003d70:	200041d4 	.word	0x200041d4
 8003d74:	200036dc 	.word	0x200036dc
 8003d78:	2000088c 	.word	0x2000088c
 8003d7c:	2000086a 	.word	0x2000086a
 8003d80:	20002b84 	.word	0x20002b84
 8003d84:	200041a4 	.word	0x200041a4
 8003d88:	0023fcd0 	.word	0x0023fcd0
 8003d8c:	20002780 	.word	0x20002780
 8003d90:	20000454 	.word	0x20000454
 8003d94:	20000000 	.word	0x20000000
 8003d98:	20006bb4 	.word	0x20006bb4
 8003d9c:	2000497a 	.word	0x2000497a
 8003da0:	20004369 	.word	0x20004369
 8003da4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003da8:	4a72      	ldr	r2, [pc, #456]	; (8003f74 <main+0x798>)
 8003daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db2:	4a71      	ldr	r2, [pc, #452]	; (8003f78 <main+0x79c>)
 8003db4:	2130      	movs	r1, #48	; 0x30
 8003db6:	54d1      	strb	r1, [r2, r3]
 8003db8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	; (8003f7c <main+0x7a0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d3e9      	bcc.n	8003da4 <main+0x5c8>

menuSelect=0;
 8003dd0:	4b6b      	ldr	r3, [pc, #428]	; (8003f80 <main+0x7a4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8003dd6:	4b6b      	ldr	r3, [pc, #428]	; (8003f84 <main+0x7a8>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	701a      	strb	r2, [r3, #0]
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <main+0x7ac>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4b68      	ldr	r3, [pc, #416]	; (8003f88 <main+0x7ac>)
 8003de6:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8003de8:	4b68      	ldr	r3, [pc, #416]	; (8003f8c <main+0x7b0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <main+0x7b0>)
 8003df0:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing

	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8003df2:	4b66      	ldr	r3, [pc, #408]	; (8003f8c <main+0x7b0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d101      	bne.n	8003e02 <main+0x626>
 8003dfe:	f7fd fc31 	bl	8001664 <analoginputloopb>


if (loop_counter2==4024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <main+0x7b0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f640 72b8 	movw	r2, #4024	; 0xfb8
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f040 8195 	bne.w	800413a <main+0x95e>
	  if (mem_count>512) mem_count=0; else mem_count++; // write to first this was moved for no logical reason ?
 8003e10:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <main+0x7b4>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d903      	bls.n	8003e22 <main+0x646>
 8003e1a:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <main+0x7b4>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	e005      	b.n	8003e2e <main+0x652>
 8003e22:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <main+0x7b4>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <main+0x7b4>)
 8003e2c:	801a      	strh	r2, [r3, #0]
	  patch_target_parse(); //
 8003e2e:	f7fd f9af 	bl	8001190 <patch_target_parse>
	// read values from stored
	  memcpy(serial_source,&seq,36); // copy bits
 8003e32:	2224      	movs	r2, #36	; 0x24
 8003e34:	4957      	ldr	r1, [pc, #348]	; (8003f94 <main+0x7b8>)
 8003e36:	4858      	ldr	r0, [pc, #352]	; (8003f98 <main+0x7bc>)
 8003e38:	f007 f826 	bl	800ae88 <memcpy>
	  uint16_t mem_count2=0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8003e42:	4b56      	ldr	r3, [pc, #344]	; (8003f9c <main+0x7c0>)
 8003e44:	4956      	ldr	r1, [pc, #344]	; (8003fa0 <main+0x7c4>)
 8003e46:	2240      	movs	r2, #64	; 0x40
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f007 f81d 	bl	800ae88 <memcpy>
	  for(mem_counter=0;mem_counter<10;mem_counter++){
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003e54:	e032      	b.n	8003ebc <main+0x6e0>
		  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8003e56:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d814      	bhi.n	8003e88 <main+0x6ac>
 8003e5e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	3360      	adds	r3, #96	; 0x60
 8003e6a:	4a4b      	ldr	r2, [pc, #300]	; (8003f98 <main+0x7bc>)
 8003e6c:	1898      	adds	r0, r3, r2
 8003e6e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003e72:	1d9a      	adds	r2, r3, #6
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4a49      	ldr	r2, [pc, #292]	; (8003fa4 <main+0x7c8>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	2207      	movs	r2, #7
 8003e82:	4619      	mov	r1, r3
 8003e84:	f007 f800 	bl	800ae88 <memcpy>
					memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8003e88:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <main+0x7bc>)
 8003e98:	1898      	adds	r0, r3, r2
 8003e9a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4a40      	ldr	r2, [pc, #256]	; (8003fa8 <main+0x7cc>)
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2206      	movs	r2, #6
 8003eac:	4619      	mov	r1, r3
 8003eae:	f006 ffeb 	bl	800ae88 <memcpy>
	  for(mem_counter=0;mem_counter<10;mem_counter++){
 8003eb2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8003ebc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8003ec0:	2b09      	cmp	r3, #9
 8003ec2:	d9c8      	bls.n	8003e56 <main+0x67a>
			  }

while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8003ec4:	e005      	b.n	8003ed2 <main+0x6f6>
	serial_up++;
 8003ec6:	4b39      	ldr	r3, [pc, #228]	; (8003fac <main+0x7d0>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	4b37      	ldr	r3, [pc, #220]	; (8003fac <main+0x7d0>)
 8003ed0:	701a      	strb	r2, [r3, #0]
while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <main+0x7d0>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <main+0x7d4>)
 8003eda:	5c9a      	ldrb	r2, [r3, r2]
 8003edc:	4b33      	ldr	r3, [pc, #204]	; (8003fac <main+0x7d0>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <main+0x7bc>)
 8003ee4:	5c5b      	ldrb	r3, [r3, r1]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d103      	bne.n	8003ef2 <main+0x716>
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <main+0x7d0>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef0:	d9e9      	bls.n	8003ec6 <main+0x6ea>
}



	  serial_send[6]=0;
 8003ef2:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <main+0x7d8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	719a      	strb	r2, [r3, #6]
	  serial_send[7]=seq.pos;  // chase
 8003ef8:	4b26      	ldr	r3, [pc, #152]	; (8003f94 <main+0x7b8>)
 8003efa:	781a      	ldrb	r2, [r3, #0]
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <main+0x7d8>)
 8003efe:	71da      	strb	r2, [r3, #7]
	  serial_send[2]=serial_up;
 8003f00:	4b2a      	ldr	r3, [pc, #168]	; (8003fac <main+0x7d0>)
 8003f02:	781a      	ldrb	r2, [r3, #0]
 8003f04:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <main+0x7d8>)
 8003f06:	709a      	strb	r2, [r3, #2]
	 	  serial_send[3]=serial_source[serial_up];
 8003f08:	4b28      	ldr	r3, [pc, #160]	; (8003fac <main+0x7d0>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <main+0x7bc>)
 8003f10:	5c9a      	ldrb	r2, [r3, r2]
 8003f12:	4b28      	ldr	r3, [pc, #160]	; (8003fb4 <main+0x7d8>)
 8003f14:	70da      	strb	r2, [r3, #3]
	 	 serial_source_temp[serial_up]=serial_source[serial_up];
 8003f16:	4b25      	ldr	r3, [pc, #148]	; (8003fac <main+0x7d0>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <main+0x7d0>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <main+0x7bc>)
 8003f24:	5c59      	ldrb	r1, [r3, r1]
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <main+0x7d4>)
 8003f28:	5499      	strb	r1, [r3, r2]
	 	if (serial_up>161) serial_up=0; else serial_up++;
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <main+0x7d0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2ba1      	cmp	r3, #161	; 0xa1
 8003f30:	d903      	bls.n	8003f3a <main+0x75e>
 8003f32:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <main+0x7d0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
 8003f38:	e005      	b.n	8003f46 <main+0x76a>
 8003f3a:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <main+0x7d0>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4b1a      	ldr	r3, [pc, #104]	; (8003fac <main+0x7d0>)
 8003f44:	701a      	strb	r2, [r3, #0]

	 	HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8003f46:	2364      	movs	r3, #100	; 0x64
 8003f48:	2208      	movs	r2, #8
 8003f4a:	491a      	ldr	r1, [pc, #104]	; (8003fb4 <main+0x7d8>)
 8003f4c:	481a      	ldr	r0, [pc, #104]	; (8003fb8 <main+0x7dc>)
 8003f4e:	f006 fbb4 	bl	800a6ba <HAL_UART_Transmit>

	memcpy(potSource,&seq,46); // about 35
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <main+0x7e0>)
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <main+0x7b8>)
 8003f56:	4614      	mov	r4, r2
 8003f58:	461d      	mov	r5, r3
 8003f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f62:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f66:	c407      	stmia	r4!, {r0, r1, r2}
 8003f68:	8023      	strh	r3, [r4, #0]

	for(i=0;i<10;i++){
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <main+0x7e4>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	801a      	strh	r2, [r3, #0]
 8003f70:	e0a2      	b.n	80040b8 <main+0x8dc>
 8003f72:	bf00      	nop
 8003f74:	2000436c 	.word	0x2000436c
 8003f78:	20006bb4 	.word	0x20006bb4
 8003f7c:	20004369 	.word	0x20004369
 8003f80:	20000862 	.word	0x20000862
 8003f84:	20000864 	.word	0x20000864
 8003f88:	20000888 	.word	0x20000888
 8003f8c:	200024e4 	.word	0x200024e4
 8003f90:	200024e2 	.word	0x200024e2
 8003f94:	200041a4 	.word	0x200041a4
 8003f98:	200069b0 	.word	0x200069b0
 8003f9c:	20006a10 	.word	0x20006a10
 8003fa0:	20000754 	.word	0x20000754
 8003fa4:	200001bc 	.word	0x200001bc
 8003fa8:	200036dc 	.word	0x200036dc
 8003fac:	20006bb0 	.word	0x20006bb0
 8003fb0:	20006ab0 	.word	0x20006ab0
 8003fb4:	2000026c 	.word	0x2000026c
 8003fb8:	20007238 	.word	0x20007238
 8003fbc:	20000658 	.word	0x20000658
 8003fc0:	2000088c 	.word	0x2000088c
		    memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <main+0x97c>)
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	1a9b      	subs	r3, r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	339c      	adds	r3, #156	; 0x9c
 8003fd4:	4a61      	ldr	r2, [pc, #388]	; (800415c <main+0x980>)
 8003fd6:	1898      	adds	r0, r3, r2
 8003fd8:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <main+0x97c>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4a5e      	ldr	r2, [pc, #376]	; (8004160 <main+0x984>)
 8003fe8:	4413      	add	r3, r2
 8003fea:	220e      	movs	r2, #14
 8003fec:	4619      	mov	r1, r3
 8003fee:	f006 ff4b 	bl	800ae88 <memcpy>

		memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8003ff2:	4b59      	ldr	r3, [pc, #356]	; (8004158 <main+0x97c>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	332e      	adds	r3, #46	; 0x2e
 8004002:	4a56      	ldr	r2, [pc, #344]	; (800415c <main+0x980>)
 8004004:	1898      	adds	r0, r3, r2
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <main+0x97c>)
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4a53      	ldr	r2, [pc, #332]	; (8004164 <main+0x988>)
 8004016:	4413      	add	r3, r2
 8004018:	2206      	movs	r2, #6
 800401a:	4619      	mov	r1, r3
 800401c:	f006 ff34 	bl	800ae88 <memcpy>
		memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8004020:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <main+0x97c>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	336a      	adds	r3, #106	; 0x6a
 800402e:	4a4b      	ldr	r2, [pc, #300]	; (800415c <main+0x980>)
 8004030:	1898      	adds	r0, r3, r2
 8004032:	4b49      	ldr	r3, [pc, #292]	; (8004158 <main+0x97c>)
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	461a      	mov	r2, r3
 8004038:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	4a49      	ldr	r2, [pc, #292]	; (8004168 <main+0x98c>)
 8004042:	4413      	add	r3, r2
 8004044:	2205      	movs	r2, #5
 8004046:	4619      	mov	r1, r3
 8004048:	f006 ff1e 	bl	800ae88 <memcpy>
		memcpy(potSource+316+(i*6),&patch[i],6 );
 800404c:	4b42      	ldr	r3, [pc, #264]	; (8004158 <main+0x97c>)
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4613      	mov	r3, r2
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	4413      	add	r3, r2
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800405e:	4a3f      	ldr	r2, [pc, #252]	; (800415c <main+0x980>)
 8004060:	1898      	adds	r0, r3, r2
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <main+0x97c>)
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4a3e      	ldr	r2, [pc, #248]	; (800416c <main+0x990>)
 8004072:	4413      	add	r3, r2
 8004074:	2206      	movs	r2, #6
 8004076:	4619      	mov	r1, r3
 8004078:	f006 ff06 	bl	800ae88 <memcpy>
		memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <main+0x97c>)
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800408e:	4a33      	ldr	r2, [pc, #204]	; (800415c <main+0x980>)
 8004090:	1898      	adds	r0, r3, r2
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <main+0x97c>)
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	4a33      	ldr	r2, [pc, #204]	; (8004170 <main+0x994>)
 80040a2:	4413      	add	r3, r2
 80040a4:	2206      	movs	r2, #6
 80040a6:	4619      	mov	r1, r3
 80040a8:	f006 feee 	bl	800ae88 <memcpy>
	for(i=0;i<10;i++){
 80040ac:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <main+0x97c>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <main+0x97c>)
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	4b27      	ldr	r3, [pc, #156]	; (8004158 <main+0x97c>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	2b09      	cmp	r3, #9
 80040be:	d981      	bls.n	8003fc4 <main+0x7e8>

	}	// copy vars into potSource

	//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

	mem_count2=0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

			// for patch write start at 2048 for now



				 mem_buf=potSource[mem_count];
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <main+0x998>)
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <main+0x980>)
 80040ce:	5c9a      	ldrb	r2, [r3, r2]
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <main+0x99c>)
 80040d2:	701a      	strb	r2, [r3, #0]
			//	 if (mem_buf>159) mem_buf=159;
				 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <main+0x998>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	b29b      	uxth	r3, r3
 80040e0:	019b      	lsls	r3, r3, #6
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	4b23      	ldr	r3, [pc, #140]	; (8004174 <main+0x998>)
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
				 //mem_count2=mem_count2+2048;   // Relocate mem for patch

				 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,&mem_verify, 1,100);
 80040f4:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80040f8:	2364      	movs	r3, #100	; 0x64
 80040fa:	9302      	str	r3, [sp, #8]
 80040fc:	2301      	movs	r3, #1
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <main+0x9a0>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2302      	movs	r3, #2
 8004106:	21a0      	movs	r1, #160	; 0xa0
 8004108:	481d      	ldr	r0, [pc, #116]	; (8004180 <main+0x9a4>)
 800410a:	f003 fa3b 	bl	8007584 <HAL_I2C_Mem_Read>
				 if (mem_verify!=mem_buf) HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <main+0x9a0>)
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	4b19      	ldr	r3, [pc, #100]	; (8004178 <main+0x99c>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d00c      	beq.n	8004134 <main+0x958>
 800411a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800411e:	2364      	movs	r3, #100	; 0x64
 8004120:	9302      	str	r3, [sp, #8]
 8004122:	2301      	movs	r3, #1
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <main+0x99c>)
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	2302      	movs	r3, #2
 800412c:	21a0      	movs	r1, #160	; 0xa0
 800412e:	4814      	ldr	r0, [pc, #80]	; (8004180 <main+0x9a4>)
 8004130:	f003 f92e 	bl	8007390 <HAL_I2C_Mem_Write>



//if (mem_buf!=mem_verify)	 mem_errors++;  // check writes

loop_counter2=0; //reset
 8004134:	4b13      	ldr	r3, [pc, #76]	; (8004184 <main+0x9a8>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	  display_generate();      // run this after gfx draw page finish
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <main+0x9ac>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <main+0x96a>
 8004142:	f7fd fc63 	bl	8001a0c <display_generate>




	  if (init<6)				// after 6 its done for good   // no freeze here
 8004146:	4b11      	ldr	r3, [pc, #68]	; (800418c <main+0x9b0>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d82c      	bhi.n	80041a8 <main+0x9cc>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 800414e:	4b02      	ldr	r3, [pc, #8]	; (8004158 <main+0x97c>)
 8004150:	2200      	movs	r2, #0
 8004152:	801a      	strh	r2, [r3, #0]
 8004154:	e024      	b.n	80041a0 <main+0x9c4>
 8004156:	bf00      	nop
 8004158:	2000088c 	.word	0x2000088c
 800415c:	20000658 	.word	0x20000658
 8004160:	200001bc 	.word	0x200001bc
 8004164:	20003434 	.word	0x20003434
 8004168:	20003718 	.word	0x20003718
 800416c:	200041d4 	.word	0x200041d4
 8004170:	200036dc 	.word	0x200036dc
 8004174:	200024e2 	.word	0x200024e2
 8004178:	200024e8 	.word	0x200024e8
 800417c:	20004987 	.word	0x20004987
 8004180:	2000705c 	.word	0x2000705c
 8004184:	200024e4 	.word	0x200024e4
 8004188:	20003016 	.word	0x20003016
 800418c:	200024d9 	.word	0x200024d9
 8004190:	f7fd fb2c 	bl	80017ec <display_init>
 8004194:	4b6a      	ldr	r3, [pc, #424]	; (8004340 <main+0xb64>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	4b68      	ldr	r3, [pc, #416]	; (8004340 <main+0xb64>)
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	4b67      	ldr	r3, [pc, #412]	; (8004340 <main+0xb64>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	2b05      	cmp	r3, #5
 80041a6:	d9f3      	bls.n	8004190 <main+0x9b4>
}

	  if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 80041a8:	4b66      	ldr	r3, [pc, #408]	; (8004344 <main+0xb68>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d92a      	bls.n	8004206 <main+0xa2a>


		  if (gfx_send_swap==2) gfx_send_lines++;		// this is ok for now
 80041b0:	4b65      	ldr	r3, [pc, #404]	; (8004348 <main+0xb6c>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d105      	bne.n	80041c4 <main+0x9e8>
 80041b8:	4b64      	ldr	r3, [pc, #400]	; (800434c <main+0xb70>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	3301      	adds	r3, #1
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	4b62      	ldr	r3, [pc, #392]	; (800434c <main+0xb70>)
 80041c2:	701a      	strb	r2, [r3, #0]
		  if (gfx_send_swap==1)  { gfx_send_counter=gfx_send_cursor*144; gfx_send_swap=2; } // jump to cursor pixel line
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <main+0xb6c>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10c      	bne.n	80041e6 <main+0xa0a>
 80041cc:	4b60      	ldr	r3, [pc, #384]	; (8004350 <main+0xb74>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	00d2      	lsls	r2, r2, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	b29a      	uxth	r2, r3
 80041dc:	4b5d      	ldr	r3, [pc, #372]	; (8004354 <main+0xb78>)
 80041de:	801a      	strh	r2, [r3, #0]
 80041e0:	4b59      	ldr	r3, [pc, #356]	; (8004348 <main+0xb6c>)
 80041e2:	2202      	movs	r2, #2
 80041e4:	701a      	strb	r2, [r3, #0]
	      if (gfx_send_lines==144)   { gfx_send_lines=0; gfx_send_counter=1008; gfx_send_swap=0;}  // skip to last char line
 80041e6:	4b59      	ldr	r3, [pc, #356]	; (800434c <main+0xb70>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b90      	cmp	r3, #144	; 0x90
 80041ec:	d109      	bne.n	8004202 <main+0xa26>
 80041ee:	4b57      	ldr	r3, [pc, #348]	; (800434c <main+0xb70>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	4b57      	ldr	r3, [pc, #348]	; (8004354 <main+0xb78>)
 80041f6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	4b52      	ldr	r3, [pc, #328]	; (8004348 <main+0xb6c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
				gfx_send();    // don't loop this without using dma  , just makes things really slow
 8004202:	f7fd fb49 	bl	8001898 <gfx_send>

	}


	  if (loop_counter == 255)	{ // grab adc readings + 3ms , 32 step  // no freeze
 8004206:	4b54      	ldr	r3, [pc, #336]	; (8004358 <main+0xb7c>)
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2bff      	cmp	r3, #255	; 0xff
 800420c:	d13d      	bne.n	800428a <main+0xaae>



		  //HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

		  HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 800420e:	4853      	ldr	r0, [pc, #332]	; (800435c <main+0xb80>)
 8004210:	f001 fe02 	bl	8005e18 <HAL_ADCEx_InjectedStart>
		  uint16_t adc_temp1[4]={0,0,0,0};
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]

		  HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 800421c:	2101      	movs	r1, #1
 800421e:	484f      	ldr	r0, [pc, #316]	; (800435c <main+0xb80>)
 8004220:	f001 f960 	bl	80054e4 <HAL_ADC_PollForConversion>

		  adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8004224:	2101      	movs	r1, #1
 8004226:	484d      	ldr	r0, [pc, #308]	; (800435c <main+0xb80>)
 8004228:	f001 ff0c 	bl	8006044 <HAL_ADCEx_InjectedGetValue>
 800422c:	4603      	mov	r3, r0
 800422e:	b29b      	uxth	r3, r3
 8004230:	80bb      	strh	r3, [r7, #4]
		  adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8004232:	2102      	movs	r1, #2
 8004234:	4849      	ldr	r0, [pc, #292]	; (800435c <main+0xb80>)
 8004236:	f001 ff05 	bl	8006044 <HAL_ADCEx_InjectedGetValue>
 800423a:	4603      	mov	r3, r0
 800423c:	b29b      	uxth	r3, r3
 800423e:	80fb      	strh	r3, [r7, #6]
		  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8004240:	2103      	movs	r1, #3
 8004242:	4846      	ldr	r0, [pc, #280]	; (800435c <main+0xb80>)
 8004244:	f001 fefe 	bl	8006044 <HAL_ADCEx_InjectedGetValue>
 8004248:	4603      	mov	r3, r0
 800424a:	b29b      	uxth	r3, r3
 800424c:	813b      	strh	r3, [r7, #8]

		  //  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
		  adc_values[0]=	31- ( adc_temp1[0]>>7);
 800424e:	88bb      	ldrh	r3, [r7, #4]
 8004250:	09db      	lsrs	r3, r3, #7
 8004252:	b29b      	uxth	r3, r3
 8004254:	f1c3 031f 	rsb	r3, r3, #31
 8004258:	b29a      	uxth	r2, r3
 800425a:	4b41      	ldr	r3, [pc, #260]	; (8004360 <main+0xb84>)
 800425c:	801a      	strh	r2, [r3, #0]
		  adc_values[1]=	 31-( adc_temp1[1]>>7);
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	09db      	lsrs	r3, r3, #7
 8004262:	b29b      	uxth	r3, r3
 8004264:	f1c3 031f 	rsb	r3, r3, #31
 8004268:	b29a      	uxth	r2, r3
 800426a:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <main+0xb84>)
 800426c:	805a      	strh	r2, [r3, #2]
		  adc_values[2]=	 31-( adc_temp1[2]>>7);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	09db      	lsrs	r3, r3, #7
 8004272:	b29b      	uxth	r3, r3
 8004274:	f1c3 031f 	rsb	r3, r3, #31
 8004278:	b29a      	uxth	r2, r3
 800427a:	4b39      	ldr	r3, [pc, #228]	; (8004360 <main+0xb84>)
 800427c:	809a      	strh	r2, [r3, #4]
		  //  adc_values[2]=	  adc_temp1[2]>>7;
		  HAL_ADCEx_InjectedStop(&hadc1) ;
 800427e:	4837      	ldr	r0, [pc, #220]	; (800435c <main+0xb80>)
 8004280:	f001 fe94 	bl	8005fac <HAL_ADCEx_InjectedStop>


		  //HAL_ADC_Start_DMA(&hadc1, adc_source, 512);


	  	loop_counter=0;
 8004284:	4b34      	ldr	r3, [pc, #208]	; (8004358 <main+0xb7c>)
 8004286:	2200      	movs	r2, #0
 8004288:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <main+0xb88>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b07      	cmp	r3, #7
 8004290:	d106      	bne.n	80042a0 <main+0xac4>
 8004292:	4b35      	ldr	r3, [pc, #212]	; (8004368 <main+0xb8c>)
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <main+0xac4>
 800429a:	4b33      	ldr	r3, [pc, #204]	; (8004368 <main+0xb8c>)
 800429c:	2201      	movs	r2, #1
 800429e:	801a      	strh	r2, [r3, #0]


	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 80042a0:	4b30      	ldr	r3, [pc, #192]	; (8004364 <main+0xb88>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042b0:	482e      	ldr	r0, [pc, #184]	; (800436c <main+0xb90>)
 80042b2:	f002 ff0f 	bl	80070d4 <HAL_GPIO_WritePin>


	//  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok

	  	//	adc_flag=0;
	  		if (adc_flag) {
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <main+0xb94>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d03a      	beq.n	8004334 <main+0xb58>
	  		HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go
 80042be:	4827      	ldr	r0, [pc, #156]	; (800435c <main+0xb80>)
 80042c0:	f001 fa8c 	bl	80057dc <HAL_ADC_Stop_DMA>
	  		HAL_ADC_Start_DMA(&hadc1, adc_source, 1024); //dma start ,needs this and adc start ,set sampling time
 80042c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042c8:	492a      	ldr	r1, [pc, #168]	; (8004374 <main+0xb98>)
 80042ca:	4824      	ldr	r0, [pc, #144]	; (800435c <main+0xb80>)
 80042cc:	f001 f996 	bl	80055fc <HAL_ADC_Start_DMA>

	  			uint16_t* click=&adc_source[0];
 80042d0:	4b28      	ldr	r3, [pc, #160]	; (8004374 <main+0xb98>)
 80042d2:	67bb      	str	r3, [r7, #120]	; 0x78

	  			for (i=0;i<512;i++)
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <main+0xb64>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e023      	b.n	8004324 <main+0xb48>
	  			{

	  				uint16_t crap_hold=*click;
 80042dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	  			uint16_t crap_hold1=*(++click);
 80042e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e6:	3302      	adds	r3, #2
 80042e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042ec:	881b      	ldrh	r3, [r3, #0]
 80042ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  		click++;
 80042f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042f4:	3302      	adds	r3, #2
 80042f6:	67bb      	str	r3, [r7, #120]	; 0x78

	  	//			uint16_t crap_hold=adc_source[i*2];

	  				 // 				uint16_t crap_hold1=adc_source[(i*2)+1];

	  				input_holder[i] = (crap_hold+crap_hold1 )>>1;
 80042f8:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80042fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004300:	4413      	add	r3, r2
 8004302:	1059      	asrs	r1, r3, #1
 8004304:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <main+0xb64>)
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	b289      	uxth	r1, r1
 800430c:	4b1a      	ldr	r3, [pc, #104]	; (8004378 <main+0xb9c>)
 800430e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  				adc_flag=0;
 8004312:	4b17      	ldr	r3, [pc, #92]	; (8004370 <main+0xb94>)
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
	  			for (i=0;i<512;i++)
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <main+0xb64>)
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <main+0xb64>)
 8004322:	801a      	strh	r2, [r3, #0]
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <main+0xb64>)
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d3d6      	bcc.n	80042dc <main+0xb00>
	  			}
	  		}

	while  (bank_write)                         {							// wait for adc , priority
 800432e:	e001      	b.n	8004334 <main+0xb58>



		  //HAL_Delay(4);
	  		//sample_point=sample_point&768 ;
	  		sampling();
 8004330:	f7fd fefa 	bl	8002128 <sampling>
	while  (bank_write)                         {							// wait for adc , priority
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <main+0xba0>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f9      	bne.n	8004330 <main+0xb54>
	  loop_counter++ ;
 800433c:	e54e      	b.n	8003ddc <main+0x600>
 800433e:	bf00      	nop
 8004340:	2000088c 	.word	0x2000088c
 8004344:	200024d9 	.word	0x200024d9
 8004348:	2000300a 	.word	0x2000300a
 800434c:	2000300b 	.word	0x2000300b
 8004350:	20003009 	.word	0x20003009
 8004354:	20003006 	.word	0x20003006
 8004358:	20000888 	.word	0x20000888
 800435c:	20006fb4 	.word	0x20006fb4
 8004360:	200001a8 	.word	0x200001a8
 8004364:	200041a4 	.word	0x200041a4
 8004368:	200024d0 	.word	0x200024d0
 800436c:	40020800 	.word	0x40020800
 8004370:	20003418 	.word	0x20003418
 8004374:	200018a0 	.word	0x200018a0
 8004378:	20003018 	.word	0x20003018
 800437c:	200001b2 	.word	0x200001b2

08004380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b094      	sub	sp, #80	; 0x50
 8004384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004386:	f107 0320 	add.w	r3, r7, #32
 800438a:	2230      	movs	r2, #48	; 0x30
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f006 fd88 	bl	800aea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043a4:	2300      	movs	r3, #0
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	4b28      	ldr	r3, [pc, #160]	; (800444c <SystemClock_Config+0xcc>)
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <SystemClock_Config+0xcc>)
 80043ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b2:	6413      	str	r3, [r2, #64]	; 0x40
 80043b4:	4b25      	ldr	r3, [pc, #148]	; (800444c <SystemClock_Config+0xcc>)
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80043c0:	2300      	movs	r3, #0
 80043c2:	607b      	str	r3, [r7, #4]
 80043c4:	4b22      	ldr	r3, [pc, #136]	; (8004450 <SystemClock_Config+0xd0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a21      	ldr	r2, [pc, #132]	; (8004450 <SystemClock_Config+0xd0>)
 80043ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <SystemClock_Config+0xd0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80043dc:	2302      	movs	r3, #2
 80043de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80043e0:	2301      	movs	r3, #1
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80043e4:	2310      	movs	r3, #16
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80043e8:	2302      	movs	r3, #2
 80043ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80043ec:	2300      	movs	r3, #0
 80043ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80043f0:	2308      	movs	r3, #8
 80043f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80043f4:	2364      	movs	r3, #100	; 0x64
 80043f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80043f8:	2302      	movs	r3, #2
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80043fc:	2304      	movs	r3, #4
 80043fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004400:	f107 0320 	add.w	r3, r7, #32
 8004404:	4618      	mov	r0, r3
 8004406:	f003 fe3f 	bl	8008088 <HAL_RCC_OscConfig>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004410:	f000 fb66 	bl	8004ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004414:	230f      	movs	r3, #15
 8004416:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004418:	2302      	movs	r3, #2
 800441a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800442a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800442c:	f107 030c 	add.w	r3, r7, #12
 8004430:	2103      	movs	r1, #3
 8004432:	4618      	mov	r0, r3
 8004434:	f004 f8a0 	bl	8008578 <HAL_RCC_ClockConfig>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800443e:	f000 fb4f 	bl	8004ae0 <Error_Handler>
  }
}
 8004442:	bf00      	nop
 8004444:	3750      	adds	r7, #80	; 0x50
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	40007000 	.word	0x40007000

08004454 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800445a:	f107 0320 	add.w	r3, r7, #32
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004468:	463b      	mov	r3, r7
 800446a:	2220      	movs	r2, #32
 800446c:	2100      	movs	r1, #0
 800446e:	4618      	mov	r0, r3
 8004470:	f006 fd18 	bl	800aea4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004474:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <MX_ADC1_Init+0x11c>)
 8004476:	4a3f      	ldr	r2, [pc, #252]	; (8004574 <MX_ADC1_Init+0x120>)
 8004478:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <MX_ADC1_Init+0x11c>)
 800447c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004480:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <MX_ADC1_Init+0x11c>)
 8004484:	2200      	movs	r2, #0
 8004486:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <MX_ADC1_Init+0x11c>)
 800448a:	2201      	movs	r2, #1
 800448c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800448e:	4b38      	ldr	r3, [pc, #224]	; (8004570 <MX_ADC1_Init+0x11c>)
 8004490:	2201      	movs	r2, #1
 8004492:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004494:	4b36      	ldr	r3, [pc, #216]	; (8004570 <MX_ADC1_Init+0x11c>)
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800449c:	4b34      	ldr	r3, [pc, #208]	; (8004570 <MX_ADC1_Init+0x11c>)
 800449e:	2200      	movs	r2, #0
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044a4:	4a34      	ldr	r2, [pc, #208]	; (8004578 <MX_ADC1_Init+0x124>)
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80044ae:	4b30      	ldr	r3, [pc, #192]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044b0:	2201      	movs	r2, #1
 80044b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80044b4:	4b2e      	ldr	r3, [pc, #184]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80044bc:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044be:	2200      	movs	r2, #0
 80044c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80044c2:	482b      	ldr	r0, [pc, #172]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044c4:	f000 ff16 	bl	80052f4 <HAL_ADC_Init>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 80044ce:	f000 fb07 	bl	8004ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80044d2:	2309      	movs	r3, #9
 80044d4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80044da:	2306      	movs	r3, #6
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044de:	f107 0320 	add.w	r3, r7, #32
 80044e2:	4619      	mov	r1, r3
 80044e4:	4822      	ldr	r0, [pc, #136]	; (8004570 <MX_ADC1_Init+0x11c>)
 80044e6:	f001 f9e7 	bl	80058b8 <HAL_ADC_ConfigChannel>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80044f0:	f000 faf6 	bl	8004ae0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80044f8:	2301      	movs	r3, #1
 80044fa:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80044fc:	2303      	movs	r3, #3
 80044fe:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004500:	2303      	movs	r3, #3
 8004502:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004508:	4b1c      	ldr	r3, [pc, #112]	; (800457c <MX_ADC1_Init+0x128>)
 800450a:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800450c:	2300      	movs	r3, #0
 800450e:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004510:	2300      	movs	r3, #0
 8004512:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004518:	463b      	mov	r3, r7
 800451a:	4619      	mov	r1, r3
 800451c:	4814      	ldr	r0, [pc, #80]	; (8004570 <MX_ADC1_Init+0x11c>)
 800451e:	f001 fdc9 	bl	80060b4 <HAL_ADCEx_InjectedConfigChannel>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8004528:	f000 fada 	bl	8004ae0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800452c:	2302      	movs	r3, #2
 800452e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8004530:	2302      	movs	r3, #2
 8004532:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004534:	463b      	mov	r3, r7
 8004536:	4619      	mov	r1, r3
 8004538:	480d      	ldr	r0, [pc, #52]	; (8004570 <MX_ADC1_Init+0x11c>)
 800453a:	f001 fdbb 	bl	80060b4 <HAL_ADCEx_InjectedConfigChannel>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8004544:	f000 facc 	bl	8004ae0 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8004548:	2308      	movs	r3, #8
 800454a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800454c:	2303      	movs	r3, #3
 800454e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004554:	463b      	mov	r3, r7
 8004556:	4619      	mov	r1, r3
 8004558:	4805      	ldr	r0, [pc, #20]	; (8004570 <MX_ADC1_Init+0x11c>)
 800455a:	f001 fdab 	bl	80060b4 <HAL_ADCEx_InjectedConfigChannel>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8004564:	f000 fabc 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004568:	bf00      	nop
 800456a:	3730      	adds	r7, #48	; 0x30
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20006fb4 	.word	0x20006fb4
 8004574:	40012000 	.word	0x40012000
 8004578:	0f000001 	.word	0x0f000001
 800457c:	000f0001 	.word	0x000f0001

08004580 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <MX_I2C2_Init+0x50>)
 8004586:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <MX_I2C2_Init+0x54>)
 8004588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800458a:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <MX_I2C2_Init+0x50>)
 800458c:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <MX_I2C2_Init+0x58>)
 800458e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004590:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <MX_I2C2_Init+0x50>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004596:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <MX_I2C2_Init+0x50>)
 8004598:	2200      	movs	r2, #0
 800459a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <MX_I2C2_Init+0x50>)
 800459e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045a4:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <MX_I2C2_Init+0x50>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <MX_I2C2_Init+0x50>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <MX_I2C2_Init+0x50>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045b6:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <MX_I2C2_Init+0x50>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80045bc:	4804      	ldr	r0, [pc, #16]	; (80045d0 <MX_I2C2_Init+0x50>)
 80045be:	f002 fda3 	bl	8007108 <HAL_I2C_Init>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80045c8:	f000 fa8a 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80045cc:	bf00      	nop
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000705c 	.word	0x2000705c
 80045d4:	40005800 	.word	0x40005800
 80045d8:	000186a0 	.word	0x000186a0

080045dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80045e0:	4b17      	ldr	r3, [pc, #92]	; (8004640 <MX_SPI1_Init+0x64>)
 80045e2:	4a18      	ldr	r2, [pc, #96]	; (8004644 <MX_SPI1_Init+0x68>)
 80045e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80045e6:	4b16      	ldr	r3, [pc, #88]	; (8004640 <MX_SPI1_Init+0x64>)
 80045e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <MX_SPI1_Init+0x64>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <MX_SPI1_Init+0x64>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045fa:	4b11      	ldr	r3, [pc, #68]	; (8004640 <MX_SPI1_Init+0x64>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004600:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <MX_SPI1_Init+0x64>)
 8004602:	2200      	movs	r2, #0
 8004604:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004606:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <MX_SPI1_Init+0x64>)
 8004608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800460c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <MX_SPI1_Init+0x64>)
 8004610:	2208      	movs	r2, #8
 8004612:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004614:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <MX_SPI1_Init+0x64>)
 8004616:	2200      	movs	r2, #0
 8004618:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800461a:	4b09      	ldr	r3, [pc, #36]	; (8004640 <MX_SPI1_Init+0x64>)
 800461c:	2200      	movs	r2, #0
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <MX_SPI1_Init+0x64>)
 8004622:	2200      	movs	r2, #0
 8004624:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004626:	4b06      	ldr	r3, [pc, #24]	; (8004640 <MX_SPI1_Init+0x64>)
 8004628:	220a      	movs	r2, #10
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800462c:	4804      	ldr	r0, [pc, #16]	; (8004640 <MX_SPI1_Init+0x64>)
 800462e:	f004 f983 	bl	8008938 <HAL_SPI_Init>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004638:	f000 fa52 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800463c:	bf00      	nop
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200070b0 	.word	0x200070b0
 8004644:	40013000 	.word	0x40013000

08004648 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800464c:	4b17      	ldr	r3, [pc, #92]	; (80046ac <MX_SPI2_Init+0x64>)
 800464e:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <MX_SPI2_Init+0x68>)
 8004650:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004652:	4b16      	ldr	r3, [pc, #88]	; (80046ac <MX_SPI2_Init+0x64>)
 8004654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004658:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <MX_SPI2_Init+0x64>)
 800465c:	2200      	movs	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004660:	4b12      	ldr	r3, [pc, #72]	; (80046ac <MX_SPI2_Init+0x64>)
 8004662:	2200      	movs	r2, #0
 8004664:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <MX_SPI2_Init+0x64>)
 8004668:	2200      	movs	r2, #0
 800466a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <MX_SPI2_Init+0x64>)
 800466e:	2200      	movs	r2, #0
 8004670:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004672:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <MX_SPI2_Init+0x64>)
 8004674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004678:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800467a:	4b0c      	ldr	r3, [pc, #48]	; (80046ac <MX_SPI2_Init+0x64>)
 800467c:	2230      	movs	r2, #48	; 0x30
 800467e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <MX_SPI2_Init+0x64>)
 8004682:	2200      	movs	r2, #0
 8004684:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004686:	4b09      	ldr	r3, [pc, #36]	; (80046ac <MX_SPI2_Init+0x64>)
 8004688:	2200      	movs	r2, #0
 800468a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <MX_SPI2_Init+0x64>)
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <MX_SPI2_Init+0x64>)
 8004694:	220a      	movs	r2, #10
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004698:	4804      	ldr	r0, [pc, #16]	; (80046ac <MX_SPI2_Init+0x64>)
 800469a:	f004 f94d 	bl	8008938 <HAL_SPI_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80046a4:	f000 fa1c 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80046a8:	bf00      	nop
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20007108 	.word	0x20007108
 80046b0:	40003800 	.word	0x40003800

080046b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08c      	sub	sp, #48	; 0x30
 80046b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80046ba:	f107 030c 	add.w	r3, r7, #12
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f006 fbee 	bl	800aea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80046d0:	4b21      	ldr	r3, [pc, #132]	; (8004758 <MX_TIM2_Init+0xa4>)
 80046d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80046d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80046d8:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <MX_TIM2_Init+0xa4>)
 80046da:	2200      	movs	r2, #0
 80046dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <MX_TIM2_Init+0xa4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <MX_TIM2_Init+0xa4>)
 80046e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80046ec:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <MX_TIM2_Init+0xa4>)
 80046ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <MX_TIM2_Init+0xa4>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80046fe:	2302      	movs	r3, #2
 8004700:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004702:	2301      	movs	r3, #1
 8004704:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800470a:	2302      	movs	r3, #2
 800470c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800470e:	2302      	movs	r3, #2
 8004710:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004712:	2301      	movs	r3, #1
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004716:	2300      	movs	r3, #0
 8004718:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 800471a:	2302      	movs	r3, #2
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800471e:	f107 030c 	add.w	r3, r7, #12
 8004722:	4619      	mov	r1, r3
 8004724:	480c      	ldr	r0, [pc, #48]	; (8004758 <MX_TIM2_Init+0xa4>)
 8004726:	f005 f8c5 	bl	80098b4 <HAL_TIM_Encoder_Init>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004730:	f000 f9d6 	bl	8004ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004734:	2300      	movs	r3, #0
 8004736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800473c:	1d3b      	adds	r3, r7, #4
 800473e:	4619      	mov	r1, r3
 8004740:	4805      	ldr	r0, [pc, #20]	; (8004758 <MX_TIM2_Init+0xa4>)
 8004742:	f005 fee3 	bl	800a50c <HAL_TIMEx_MasterConfigSynchronization>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800474c:	f000 f9c8 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004750:	bf00      	nop
 8004752:	3730      	adds	r7, #48	; 0x30
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20007160 	.word	0x20007160

0800475c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08e      	sub	sp, #56	; 0x38
 8004760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	605a      	str	r2, [r3, #4]
 800476c:	609a      	str	r2, [r3, #8]
 800476e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004770:	f107 0320 	add.w	r3, r7, #32
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	611a      	str	r2, [r3, #16]
 8004788:	615a      	str	r2, [r3, #20]
 800478a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <MX_TIM3_Init+0xfc>)
 800478e:	4a33      	ldr	r2, [pc, #204]	; (800485c <MX_TIM3_Init+0x100>)
 8004790:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004792:	4b31      	ldr	r3, [pc, #196]	; (8004858 <MX_TIM3_Init+0xfc>)
 8004794:	2200      	movs	r2, #0
 8004796:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004798:	4b2f      	ldr	r3, [pc, #188]	; (8004858 <MX_TIM3_Init+0xfc>)
 800479a:	2200      	movs	r2, #0
 800479c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2544;
 800479e:	4b2e      	ldr	r3, [pc, #184]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047a0:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 80047a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047ae:	2280      	movs	r2, #128	; 0x80
 80047b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80047b2:	4829      	ldr	r0, [pc, #164]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047b4:	f004 fe68 	bl	8009488 <HAL_TIM_Base_Init>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80047be:	f000 f98f 	bl	8004ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047cc:	4619      	mov	r1, r3
 80047ce:	4822      	ldr	r0, [pc, #136]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047d0:	f005 fae0 	bl	8009d94 <HAL_TIM_ConfigClockSource>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80047da:	f000 f981 	bl	8004ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047de:	481e      	ldr	r0, [pc, #120]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047e0:	f004 ff5e 	bl	80096a0 <HAL_TIM_PWM_Init>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80047ea:	f000 f979 	bl	8004ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ee:	2300      	movs	r3, #0
 80047f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047f6:	f107 0320 	add.w	r3, r7, #32
 80047fa:	4619      	mov	r1, r3
 80047fc:	4816      	ldr	r0, [pc, #88]	; (8004858 <MX_TIM3_Init+0xfc>)
 80047fe:	f005 fe85 	bl	800a50c <HAL_TIMEx_MasterConfigSynchronization>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004808:	f000 f96a 	bl	8004ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800480c:	2360      	movs	r3, #96	; 0x60
 800480e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800481c:	1d3b      	adds	r3, r7, #4
 800481e:	2200      	movs	r2, #0
 8004820:	4619      	mov	r1, r3
 8004822:	480d      	ldr	r0, [pc, #52]	; (8004858 <MX_TIM3_Init+0xfc>)
 8004824:	f005 f9f4 	bl	8009c10 <HAL_TIM_PWM_ConfigChannel>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800482e:	f000 f957 	bl	8004ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	2204      	movs	r2, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4807      	ldr	r0, [pc, #28]	; (8004858 <MX_TIM3_Init+0xfc>)
 800483a:	f005 f9e9 	bl	8009c10 <HAL_TIM_PWM_ConfigChannel>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004844:	f000 f94c 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004848:	4803      	ldr	r0, [pc, #12]	; (8004858 <MX_TIM3_Init+0xfc>)
 800484a:	f000 fb87 	bl	8004f5c <HAL_TIM_MspPostInit>

}
 800484e:	bf00      	nop
 8004850:	3738      	adds	r7, #56	; 0x38
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	200071a8 	.word	0x200071a8
 800485c:	40000400 	.word	0x40000400

08004860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08c      	sub	sp, #48	; 0x30
 8004864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004866:	f107 030c 	add.w	r3, r7, #12
 800486a:	2224      	movs	r2, #36	; 0x24
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f006 fb18 	bl	800aea4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004874:	1d3b      	adds	r3, r7, #4
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800487c:	4b20      	ldr	r3, [pc, #128]	; (8004900 <MX_TIM4_Init+0xa0>)
 800487e:	4a21      	ldr	r2, [pc, #132]	; (8004904 <MX_TIM4_Init+0xa4>)
 8004880:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <MX_TIM4_Init+0xa0>)
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004888:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <MX_TIM4_Init+0xa0>)
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <MX_TIM4_Init+0xa0>)
 8004890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004894:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <MX_TIM4_Init+0xa0>)
 8004898:	2200      	movs	r2, #0
 800489a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <MX_TIM4_Init+0xa0>)
 800489e:	2200      	movs	r2, #0
 80048a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80048a2:	2301      	movs	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80048a6:	2302      	movs	r3, #2
 80048a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80048aa:	2301      	movs	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80048b2:	2302      	movs	r3, #2
 80048b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80048b6:	2302      	movs	r3, #2
 80048b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80048ba:	2301      	movs	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80048be:	2300      	movs	r3, #0
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80048c2:	2302      	movs	r3, #2
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	4619      	mov	r1, r3
 80048cc:	480c      	ldr	r0, [pc, #48]	; (8004900 <MX_TIM4_Init+0xa0>)
 80048ce:	f004 fff1 	bl	80098b4 <HAL_TIM_Encoder_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80048d8:	f000 f902 	bl	8004ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048dc:	2300      	movs	r3, #0
 80048de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	4619      	mov	r1, r3
 80048e8:	4805      	ldr	r0, [pc, #20]	; (8004900 <MX_TIM4_Init+0xa0>)
 80048ea:	f005 fe0f 	bl	800a50c <HAL_TIMEx_MasterConfigSynchronization>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80048f4:	f000 f8f4 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80048f8:	bf00      	nop
 80048fa:	3730      	adds	r7, #48	; 0x30
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	200071f0 	.word	0x200071f0
 8004904:	40000800 	.word	0x40000800

08004908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800490e:	4a12      	ldr	r2, [pc, #72]	; (8004958 <MX_USART1_UART_Init+0x50>)
 8004910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800491a:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800491c:	2200      	movs	r2, #0
 800491e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004922:	2200      	movs	r2, #0
 8004924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004926:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004928:	2200      	movs	r2, #0
 800492a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800492e:	2208      	movs	r2, #8
 8004930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004934:	2200      	movs	r2, #0
 8004936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 800493a:	2200      	movs	r2, #0
 800493c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <MX_USART1_UART_Init+0x4c>)
 8004940:	f005 fe66 	bl	800a610 <HAL_HalfDuplex_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800494a:	f000 f8c9 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20007238 	.word	0x20007238
 8004958:	40011000 	.word	0x40011000

0800495c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <MX_USART6_UART_Init+0x50>)
 8004964:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800496c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004980:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004982:	220c      	movs	r2, #12
 8004984:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004988:	2200      	movs	r2, #0
 800498a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 800498e:	2200      	movs	r2, #0
 8004990:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8004992:	4805      	ldr	r0, [pc, #20]	; (80049a8 <MX_USART6_UART_Init+0x4c>)
 8004994:	f005 fe3c 	bl	800a610 <HAL_HalfDuplex_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800499e:	f000 f89f 	bl	8004ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80049a2:	bf00      	nop
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000727c 	.word	0x2000727c
 80049ac:	40011400 	.word	0x40011400

080049b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <MX_DMA_Init+0x3c>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	4a0b      	ldr	r2, [pc, #44]	; (80049ec <MX_DMA_Init+0x3c>)
 80049c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c4:	6313      	str	r3, [r2, #48]	; 0x30
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <MX_DMA_Init+0x3c>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2100      	movs	r1, #0
 80049d6:	203c      	movs	r0, #60	; 0x3c
 80049d8:	f001 fde1 	bl	800659e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80049dc:	203c      	movs	r0, #60	; 0x3c
 80049de:	f001 fdfa 	bl	80065d6 <HAL_NVIC_EnableIRQ>

}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800

080049f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f6:	f107 030c 	add.w	r3, r7, #12
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	609a      	str	r2, [r3, #8]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	4a29      	ldr	r2, [pc, #164]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6313      	str	r3, [r2, #48]	; 0x30
 8004a16:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a22      	ldr	r2, [pc, #136]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a2c:	f043 0302 	orr.w	r3, r3, #2
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a4e:	4b19      	ldr	r3, [pc, #100]	; (8004ab4 <MX_GPIO_Init+0xc4>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a60:	4815      	ldr	r0, [pc, #84]	; (8004ab8 <MX_GPIO_Init+0xc8>)
 8004a62:	f002 fb37 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8004a66:	2201      	movs	r2, #1
 8004a68:	2110      	movs	r1, #16
 8004a6a:	4814      	ldr	r0, [pc, #80]	; (8004abc <MX_GPIO_Init+0xcc>)
 8004a6c:	f002 fb32 	bl	80070d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a76:	2301      	movs	r3, #1
 8004a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004a82:	f107 030c 	add.w	r3, r7, #12
 8004a86:	4619      	mov	r1, r3
 8004a88:	480b      	ldr	r0, [pc, #44]	; (8004ab8 <MX_GPIO_Init+0xc8>)
 8004a8a:	f002 f99f 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 8004a8e:	2310      	movs	r3, #16
 8004a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a92:	2301      	movs	r3, #1
 8004a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	4805      	ldr	r0, [pc, #20]	; (8004abc <MX_GPIO_Init+0xcc>)
 8004aa6:	f002 f991 	bl	8006dcc <HAL_GPIO_Init>

}
 8004aaa:	bf00      	nop
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	40020800 	.word	0x40020800
 8004abc:	40020000 	.word	0x40020000

08004ac0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
adc_flag=1;
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <HAL_ADC_ConvCpltCallback+0x1c>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]


}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20003418 	.word	0x20003418

08004ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ae4:	b672      	cpsid	i
}
 8004ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ae8:	e7fe      	b.n	8004ae8 <Error_Handler+0x8>
	...

08004aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <HAL_MspInit+0x4c>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4a0f      	ldr	r2, [pc, #60]	; (8004b38 <HAL_MspInit+0x4c>)
 8004afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b00:	6453      	str	r3, [r2, #68]	; 0x44
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <HAL_MspInit+0x4c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0a:	607b      	str	r3, [r7, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_MspInit+0x4c>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <HAL_MspInit+0x4c>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_MspInit+0x4c>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800

08004b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	; 0x28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b44:	f107 0314 	add.w	r3, r7, #20
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a3c      	ldr	r2, [pc, #240]	; (8004c4c <HAL_ADC_MspInit+0x110>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d171      	bne.n	8004c42 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	4a3a      	ldr	r2, [pc, #232]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6e:	4b38      	ldr	r3, [pc, #224]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4b34      	ldr	r3, [pc, #208]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	4a33      	ldr	r2, [pc, #204]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b84:	f043 0301 	orr.w	r3, r3, #1
 8004b88:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8a:	4b31      	ldr	r3, [pc, #196]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60bb      	str	r3, [r7, #8]
 8004b9a:	4b2d      	ldr	r3, [pc, #180]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004ba0:	f043 0302 	orr.w	r3, r3, #2
 8004ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba6:	4b2a      	ldr	r3, [pc, #168]	; (8004c50 <HAL_ADC_MspInit+0x114>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8004bb2:	2305      	movs	r3, #5
 8004bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bbe:	f107 0314 	add.w	r3, r7, #20
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4823      	ldr	r0, [pc, #140]	; (8004c54 <HAL_ADC_MspInit+0x118>)
 8004bc6:	f002 f901 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bd6:	f107 0314 	add.w	r3, r7, #20
 8004bda:	4619      	mov	r1, r3
 8004bdc:	481e      	ldr	r0, [pc, #120]	; (8004c58 <HAL_ADC_MspInit+0x11c>)
 8004bde:	f002 f8f5 	bl	8006dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_ADC_MspInit+0x124>)
 8004be6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004be8:	4b1c      	ldr	r3, [pc, #112]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bee:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bf4:	4b19      	ldr	r3, [pc, #100]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004bfa:	4b18      	ldr	r3, [pc, #96]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c02:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c20:	4b0e      	ldr	r3, [pc, #56]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c26:	480d      	ldr	r0, [pc, #52]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c28:	f001 fcf0 	bl	800660c <HAL_DMA_Init>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004c32:	f7ff ff55 	bl	8004ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c3c:	4a07      	ldr	r2, [pc, #28]	; (8004c5c <HAL_ADC_MspInit+0x120>)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c42:	bf00      	nop
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40012000 	.word	0x40012000
 8004c50:	40023800 	.word	0x40023800
 8004c54:	40020000 	.word	0x40020000
 8004c58:	40020400 	.word	0x40020400
 8004c5c:	20006ffc 	.word	0x20006ffc
 8004c60:	40026470 	.word	0x40026470

08004c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <HAL_I2C_MspInit+0xa8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d13d      	bne.n	8004d02 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_I2C_MspInit+0xac>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a20      	ldr	r2, [pc, #128]	; (8004d10 <HAL_I2C_MspInit+0xac>)
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <HAL_I2C_MspInit+0xac>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ca8:	2312      	movs	r3, #18
 8004caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004cb4:	2309      	movs	r3, #9
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4815      	ldr	r0, [pc, #84]	; (8004d14 <HAL_I2C_MspInit+0xb0>)
 8004cc0:	f002 f884 	bl	8006dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cca:	2312      	movs	r3, #18
 8004ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	480c      	ldr	r0, [pc, #48]	; (8004d14 <HAL_I2C_MspInit+0xb0>)
 8004ce2:	f002 f873 	bl	8006dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <HAL_I2C_MspInit+0xac>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <HAL_I2C_MspInit+0xac>)
 8004cf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_I2C_MspInit+0xac>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004d02:	bf00      	nop
 8004d04:	3728      	adds	r7, #40	; 0x28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40005800 	.word	0x40005800
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40020400 	.word	0x40020400

08004d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08c      	sub	sp, #48	; 0x30
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a32      	ldr	r2, [pc, #200]	; (8004e00 <HAL_SPI_MspInit+0xe8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d12c      	bne.n	8004d94 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	4a30      	ldr	r2, [pc, #192]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004d44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d48:	6453      	str	r3, [r2, #68]	; 0x44
 8004d4a:	4b2e      	ldr	r3, [pc, #184]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	6313      	str	r3, [r2, #48]	; 0x30
 8004d66:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8004d72:	23e0      	movs	r3, #224	; 0xe0
 8004d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d76:	2302      	movs	r3, #2
 8004d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d82:	2305      	movs	r3, #5
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d86:	f107 031c 	add.w	r3, r7, #28
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	481e      	ldr	r0, [pc, #120]	; (8004e08 <HAL_SPI_MspInit+0xf0>)
 8004d8e:	f002 f81d 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004d92:	e031      	b.n	8004df8 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <HAL_SPI_MspInit+0xf4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d12c      	bne.n	8004df8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	4b18      	ldr	r3, [pc, #96]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a17      	ldr	r2, [pc, #92]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004dc4:	f043 0302 	orr.w	r3, r3, #2
 8004dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dca:	4b0e      	ldr	r3, [pc, #56]	; (8004e04 <HAL_SPI_MspInit+0xec>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8004dd6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de4:	2303      	movs	r3, #3
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004de8:	2305      	movs	r3, #5
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dec:	f107 031c 	add.w	r3, r7, #28
 8004df0:	4619      	mov	r1, r3
 8004df2:	4807      	ldr	r0, [pc, #28]	; (8004e10 <HAL_SPI_MspInit+0xf8>)
 8004df4:	f001 ffea 	bl	8006dcc <HAL_GPIO_Init>
}
 8004df8:	bf00      	nop
 8004dfa:	3730      	adds	r7, #48	; 0x30
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40013000 	.word	0x40013000
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40020000 	.word	0x40020000
 8004e0c:	40003800 	.word	0x40003800
 8004e10:	40020400 	.word	0x40020400

08004e14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 031c 	add.w	r3, r7, #28
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d12d      	bne.n	8004e92 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
 8004e3a:	4b30      	ldr	r3, [pc, #192]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b2d      	ldr	r3, [pc, #180]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	4b29      	ldr	r3, [pc, #164]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4a28      	ldr	r2, [pc, #160]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6313      	str	r3, [r2, #48]	; 0x30
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8004e6e:	f248 0302 	movw	r3, #32770	; 0x8002
 8004e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e74:	2302      	movs	r3, #2
 8004e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e80:	2301      	movs	r3, #1
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e84:	f107 031c 	add.w	r3, r7, #28
 8004e88:	4619      	mov	r1, r3
 8004e8a:	481d      	ldr	r0, [pc, #116]	; (8004f00 <HAL_TIM_Encoder_MspInit+0xec>)
 8004e8c:	f001 ff9e 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004e90:	e030      	b.n	8004ef4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a1b      	ldr	r2, [pc, #108]	; (8004f04 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d12b      	bne.n	8004ef4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	4b16      	ldr	r3, [pc, #88]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ea6:	f043 0304 	orr.w	r3, r3, #4
 8004eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	4a0e      	ldr	r2, [pc, #56]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004ec2:	f043 0302 	orr.w	r3, r3, #2
 8004ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <HAL_TIM_Encoder_MspInit+0xe8>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ed4:	23c0      	movs	r3, #192	; 0xc0
 8004ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004edc:	2301      	movs	r3, #1
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ee8:	f107 031c 	add.w	r3, r7, #28
 8004eec:	4619      	mov	r1, r3
 8004eee:	4806      	ldr	r0, [pc, #24]	; (8004f08 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004ef0:	f001 ff6c 	bl	8006dcc <HAL_GPIO_Init>
}
 8004ef4:	bf00      	nop
 8004ef6:	3730      	adds	r7, #48	; 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40020000 	.word	0x40020000
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40020400 	.word	0x40020400

08004f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a0e      	ldr	r2, [pc, #56]	; (8004f54 <HAL_TIM_Base_MspInit+0x48>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d115      	bne.n	8004f4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <HAL_TIM_Base_MspInit+0x4c>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <HAL_TIM_Base_MspInit+0x4c>)
 8004f28:	f043 0302 	orr.w	r3, r3, #2
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <HAL_TIM_Base_MspInit+0x4c>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	201d      	movs	r0, #29
 8004f40:	f001 fb2d 	bl	800659e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f44:	201d      	movs	r0, #29
 8004f46:	f001 fb46 	bl	80065d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40023800 	.word	0x40023800

08004f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f64:	f107 030c 	add.w	r3, r7, #12
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	605a      	str	r2, [r3, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <HAL_TIM_MspPostInit+0x68>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d11d      	bne.n	8004fba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <HAL_TIM_MspPostInit+0x6c>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	4a10      	ldr	r2, [pc, #64]	; (8004fc8 <HAL_TIM_MspPostInit+0x6c>)
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <HAL_TIM_MspPostInit+0x6c>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004f9a:	2330      	movs	r3, #48	; 0x30
 8004f9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004faa:	2302      	movs	r3, #2
 8004fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fae:	f107 030c 	add.w	r3, r7, #12
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <HAL_TIM_MspPostInit+0x70>)
 8004fb6:	f001 ff09 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004fba:	bf00      	nop
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020400 	.word	0x40020400

08004fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	; 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd8:	f107 031c 	add.w	r3, r7, #28
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a33      	ldr	r2, [pc, #204]	; (80050bc <HAL_UART_MspInit+0xec>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d12d      	bne.n	800504e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	4a31      	ldr	r2, [pc, #196]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8004ffc:	f043 0310 	orr.w	r3, r3, #16
 8005000:	6453      	str	r3, [r2, #68]	; 0x44
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800502a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800502e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005030:	2302      	movs	r3, #2
 8005032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800503c:	2307      	movs	r3, #7
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005040:	f107 031c 	add.w	r3, r7, #28
 8005044:	4619      	mov	r1, r3
 8005046:	481f      	ldr	r0, [pc, #124]	; (80050c4 <HAL_UART_MspInit+0xf4>)
 8005048:	f001 fec0 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800504c:	e031      	b.n	80050b2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <HAL_UART_MspInit+0xf8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d12c      	bne.n	80050b2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8005062:	f043 0320 	orr.w	r3, r3, #32
 8005066:	6453      	str	r3, [r2, #68]	; 0x44
 8005068:	4b15      	ldr	r3, [pc, #84]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 800506a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 800507e:	f043 0301 	orr.w	r3, r3, #1
 8005082:	6313      	str	r3, [r2, #48]	; 0x30
 8005084:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_UART_MspInit+0xf0>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005096:	2302      	movs	r3, #2
 8005098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800509a:	2301      	movs	r3, #1
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509e:	2300      	movs	r3, #0
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80050a2:	2308      	movs	r3, #8
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a6:	f107 031c 	add.w	r3, r7, #28
 80050aa:	4619      	mov	r1, r3
 80050ac:	4805      	ldr	r0, [pc, #20]	; (80050c4 <HAL_UART_MspInit+0xf4>)
 80050ae:	f001 fe8d 	bl	8006dcc <HAL_GPIO_Init>
}
 80050b2:	bf00      	nop
 80050b4:	3730      	adds	r7, #48	; 0x30
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40011000 	.word	0x40011000
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40020000 	.word	0x40020000
 80050c8:	40011400 	.word	0x40011400

080050cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050d0:	e7fe      	b.n	80050d0 <NMI_Handler+0x4>

080050d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050d6:	e7fe      	b.n	80050d6 <HardFault_Handler+0x4>

080050d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050dc:	e7fe      	b.n	80050dc <MemManage_Handler+0x4>

080050de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050de:	b480      	push	{r7}
 80050e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050e2:	e7fe      	b.n	80050e2 <BusFault_Handler+0x4>

080050e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050e8:	e7fe      	b.n	80050e8 <UsageFault_Handler+0x4>

080050ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800510a:	bf00      	nop
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005118:	f000 f8a8 	bl	800526c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800511c:	bf00      	nop
 800511e:	bd80      	pop	{r7, pc}

08005120 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <TIM3_IRQHandler+0x10>)
 8005126:	f004 fc6b 	bl	8009a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200071a8 	.word	0x200071a8

08005134 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <DMA2_Stream4_IRQHandler+0x10>)
 800513a:	f001 fbdd 	bl	80068f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20006ffc 	.word	0x20006ffc

08005148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800514c:	4b08      	ldr	r3, [pc, #32]	; (8005170 <SystemInit+0x28>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	4a07      	ldr	r2, [pc, #28]	; (8005170 <SystemInit+0x28>)
 8005154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <SystemInit+0x28>)
 800515e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005162:	609a      	str	r2, [r3, #8]
#endif
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800517a:	e003      	b.n	8005184 <LoopCopyDataInit>

0800517c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800517e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005182:	3104      	adds	r1, #4

08005184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005184:	480b      	ldr	r0, [pc, #44]	; (80051b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005186:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800518a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800518c:	d3f6      	bcc.n	800517c <CopyDataInit>
  ldr  r2, =_sbss
 800518e:	4a0b      	ldr	r2, [pc, #44]	; (80051bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005190:	e002      	b.n	8005198 <LoopFillZerobss>

08005192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005194:	f842 3b04 	str.w	r3, [r2], #4

08005198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800519a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800519c:	d3f9      	bcc.n	8005192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800519e:	f7ff ffd3 	bl	8005148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051a2:	f005 fe4d 	bl	800ae40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051a6:	f7fe fb19 	bl	80037dc <main>
  bx  lr    
 80051aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80051ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80051b0:	0800cc98 	.word	0x0800cc98
  ldr  r0, =_sdata
 80051b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80051b8:	20000438 	.word	0x20000438
  ldr  r2, =_sbss
 80051bc:	20000438 	.word	0x20000438
  ldr  r3, = _ebss
 80051c0:	200072c4 	.word	0x200072c4

080051c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051c4:	e7fe      	b.n	80051c4 <ADC_IRQHandler>
	...

080051c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_Init+0x40>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <HAL_Init+0x40>)
 80051d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051d8:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_Init+0x40>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_Init+0x40>)
 80051de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051e4:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_Init+0x40>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a07      	ldr	r2, [pc, #28]	; (8005208 <HAL_Init+0x40>)
 80051ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051f0:	2003      	movs	r0, #3
 80051f2:	f001 f9c9 	bl	8006588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f000 f808 	bl	800520c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051fc:	f7ff fc76 	bl	8004aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40023c00 	.word	0x40023c00

0800520c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <HAL_InitTick+0x54>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <HAL_InitTick+0x58>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005222:	fbb3 f3f1 	udiv	r3, r3, r1
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	4618      	mov	r0, r3
 800522c:	f001 f9e1 	bl	80065f2 <HAL_SYSTICK_Config>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e00e      	b.n	8005258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b0f      	cmp	r3, #15
 800523e:	d80a      	bhi.n	8005256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005240:	2200      	movs	r2, #0
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	f04f 30ff 	mov.w	r0, #4294967295
 8005248:	f001 f9a9 	bl	800659e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800524c:	4a06      	ldr	r2, [pc, #24]	; (8005268 <HAL_InitTick+0x5c>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	e000      	b.n	8005258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200003c8 	.word	0x200003c8
 8005264:	200003d0 	.word	0x200003d0
 8005268:	200003cc 	.word	0x200003cc

0800526c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_IncTick+0x20>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_IncTick+0x24>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4413      	add	r3, r2
 800527c:	4a04      	ldr	r2, [pc, #16]	; (8005290 <HAL_IncTick+0x24>)
 800527e:	6013      	str	r3, [r2, #0]
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	200003d0 	.word	0x200003d0
 8005290:	200072c0 	.word	0x200072c0

08005294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return uwTick;
 8005298:	4b03      	ldr	r3, [pc, #12]	; (80052a8 <HAL_GetTick+0x14>)
 800529a:	681b      	ldr	r3, [r3, #0]
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	200072c0 	.word	0x200072c0

080052ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052b4:	f7ff ffee 	bl	8005294 <HAL_GetTick>
 80052b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c4:	d005      	beq.n	80052d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_Delay+0x44>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80052d2:	bf00      	nop
 80052d4:	f7ff ffde 	bl	8005294 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d8f7      	bhi.n	80052d4 <HAL_Delay+0x28>
  {
  }
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200003d0 	.word	0x200003d0

080052f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e033      	b.n	8005372 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fc12 	bl	8004b3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d118      	bne.n	8005364 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800533a:	f023 0302 	bic.w	r3, r3, #2
 800533e:	f043 0202 	orr.w	r2, r3, #2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fbe8 	bl	8005b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f023 0303 	bic.w	r3, r3, #3
 800535a:	f043 0201 	orr.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
 8005362:	e001      	b.n	8005368 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_ADC_Start+0x1a>
 8005392:	2302      	movs	r3, #2
 8005394:	e097      	b.n	80054c6 <HAL_ADC_Start+0x14a>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d018      	beq.n	80053de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f042 0201 	orr.w	r2, r2, #1
 80053ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80053bc:	4b45      	ldr	r3, [pc, #276]	; (80054d4 <HAL_ADC_Start+0x158>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a45      	ldr	r2, [pc, #276]	; (80054d8 <HAL_ADC_Start+0x15c>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	0c9a      	lsrs	r2, r3, #18
 80053c8:	4613      	mov	r3, r2
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4413      	add	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80053d0:	e002      	b.n	80053d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f9      	bne.n	80053d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d15f      	bne.n	80054ac <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053f4:	f023 0301 	bic.w	r3, r3, #1
 80053f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005416:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542a:	d106      	bne.n	800543a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	f023 0206 	bic.w	r2, r3, #6
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	645a      	str	r2, [r3, #68]	; 0x44
 8005438:	e002      	b.n	8005440 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005448:	4b24      	ldr	r3, [pc, #144]	; (80054dc <HAL_ADC_Start+0x160>)
 800544a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005454:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d129      	bne.n	80054c4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	e020      	b.n	80054c4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a16      	ldr	r2, [pc, #88]	; (80054e0 <HAL_ADC_Start+0x164>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d11b      	bne.n	80054c4 <HAL_ADC_Start+0x148>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d114      	bne.n	80054c4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	e00b      	b.n	80054c4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	f043 0210 	orr.w	r2, r3, #16
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	f043 0201 	orr.w	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	200003c8 	.word	0x200003c8
 80054d8:	431bde83 	.word	0x431bde83
 80054dc:	40012300 	.word	0x40012300
 80054e0:	40012000 	.word	0x40012000

080054e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005500:	d113      	bne.n	800552a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800550c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005510:	d10b      	bne.n	800552a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0220 	orr.w	r2, r3, #32
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e063      	b.n	80055f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800552a:	f7ff feb3 	bl	8005294 <HAL_GetTick>
 800552e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005530:	e021      	b.n	8005576 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005538:	d01d      	beq.n	8005576 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_ADC_PollForConversion+0x6c>
 8005540:	f7ff fea8 	bl	8005294 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d212      	bcs.n	8005576 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d00b      	beq.n	8005576 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f043 0204 	orr.w	r2, r3, #4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e03d      	b.n	80055f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b02      	cmp	r3, #2
 8005582:	d1d6      	bne.n	8005532 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0212 	mvn.w	r2, #18
 800558c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d123      	bne.n	80055f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d11f      	bne.n	80055f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d006      	beq.n	80055cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d111      	bne.n	80055f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	f043 0201 	orr.w	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_ADC_Start_DMA+0x1e>
 8005616:	2302      	movs	r3, #2
 8005618:	e0ce      	b.n	80057b8 <HAL_ADC_Start_DMA+0x1bc>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b01      	cmp	r3, #1
 800562e:	d018      	beq.n	8005662 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f042 0201 	orr.w	r2, r2, #1
 800563e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005640:	4b5f      	ldr	r3, [pc, #380]	; (80057c0 <HAL_ADC_Start_DMA+0x1c4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a5f      	ldr	r2, [pc, #380]	; (80057c4 <HAL_ADC_Start_DMA+0x1c8>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0c9a      	lsrs	r2, r3, #18
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005654:	e002      	b.n	800565c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3b01      	subs	r3, #1
 800565a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f9      	bne.n	8005656 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005670:	d107      	bne.n	8005682 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005680:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b01      	cmp	r3, #1
 800568e:	f040 8086 	bne.w	800579e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d007      	beq.n	80056c4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80056bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d106      	bne.n	80056e0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d6:	f023 0206 	bic.w	r2, r3, #6
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
 80056de:	e002      	b.n	80056e6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056ee:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <HAL_ADC_Start_DMA+0x1cc>)
 80056f0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f6:	4a35      	ldr	r2, [pc, #212]	; (80057cc <HAL_ADC_Start_DMA+0x1d0>)
 80056f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	4a34      	ldr	r2, [pc, #208]	; (80057d0 <HAL_ADC_Start_DMA+0x1d4>)
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	4a33      	ldr	r2, [pc, #204]	; (80057d4 <HAL_ADC_Start_DMA+0x1d8>)
 8005708:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005712:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005722:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005732:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	334c      	adds	r3, #76	; 0x4c
 800573e:	4619      	mov	r1, r3
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f001 f810 	bl	8006768 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10f      	bne.n	8005774 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d129      	bne.n	80057b6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005770:	609a      	str	r2, [r3, #8]
 8005772:	e020      	b.n	80057b6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <HAL_ADC_Start_DMA+0x1dc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d11b      	bne.n	80057b6 <HAL_ADC_Start_DMA+0x1ba>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d114      	bne.n	80057b6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	e00b      	b.n	80057b6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0210 	orr.w	r2, r3, #16
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f043 0201 	orr.w	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200003c8 	.word	0x200003c8
 80057c4:	431bde83 	.word	0x431bde83
 80057c8:	40012300 	.word	0x40012300
 80057cc:	08005d15 	.word	0x08005d15
 80057d0:	08005dcf 	.word	0x08005dcf
 80057d4:	08005deb 	.word	0x08005deb
 80057d8:	40012000 	.word	0x40012000

080057dc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_ADC_Stop_DMA+0x1a>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e048      	b.n	8005888 <HAL_ADC_Stop_DMA+0xac>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 0201 	bic.w	r2, r2, #1
 800580c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d130      	bne.n	800587e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800582a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d10f      	bne.n	800585a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	4618      	mov	r0, r3
 8005840:	f000 ffea 	bl	8006818 <HAL_DMA_Abort>
 8005844:	4603      	mov	r3, r0
 8005846:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8005868:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	f043 0201 	orr.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x1c>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e113      	b.n	8005afc <HAL_ADC_ConfigChannel+0x244>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	d925      	bls.n	8005930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	3b1e      	subs	r3, #30
 80058fa:	2207      	movs	r2, #7
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43da      	mvns	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	400a      	ands	r2, r1
 8005908:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68d9      	ldr	r1, [r3, #12]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	4618      	mov	r0, r3
 800591c:	4603      	mov	r3, r0
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4403      	add	r3, r0
 8005922:	3b1e      	subs	r3, #30
 8005924:	409a      	lsls	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	e022      	b.n	8005976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6919      	ldr	r1, [r3, #16]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	461a      	mov	r2, r3
 800593e:	4613      	mov	r3, r2
 8005940:	005b      	lsls	r3, r3, #1
 8005942:	4413      	add	r3, r2
 8005944:	2207      	movs	r2, #7
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	400a      	ands	r2, r1
 8005952:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6919      	ldr	r1, [r3, #16]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	4618      	mov	r0, r3
 8005966:	4603      	mov	r3, r0
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4403      	add	r3, r0
 800596c:	409a      	lsls	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b06      	cmp	r3, #6
 800597c:	d824      	bhi.n	80059c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	3b05      	subs	r3, #5
 8005990:	221f      	movs	r2, #31
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43da      	mvns	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	400a      	ands	r2, r1
 800599e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	4618      	mov	r0, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	3b05      	subs	r3, #5
 80059ba:	fa00 f203 	lsl.w	r2, r0, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	635a      	str	r2, [r3, #52]	; 0x34
 80059c6:	e04c      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	d824      	bhi.n	8005a1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	3b23      	subs	r3, #35	; 0x23
 80059e2:	221f      	movs	r2, #31
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43da      	mvns	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	400a      	ands	r2, r1
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4618      	mov	r0, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	3b23      	subs	r3, #35	; 0x23
 8005a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	631a      	str	r2, [r3, #48]	; 0x30
 8005a18:	e023      	b.n	8005a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	3b41      	subs	r3, #65	; 0x41
 8005a2c:	221f      	movs	r2, #31
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	400a      	ands	r2, r1
 8005a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4618      	mov	r0, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	3b41      	subs	r3, #65	; 0x41
 8005a56:	fa00 f203 	lsl.w	r2, r0, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <HAL_ADC_ConfigChannel+0x250>)
 8005a64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <HAL_ADC_ConfigChannel+0x254>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d10f      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x1d8>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2b12      	cmp	r3, #18
 8005a76:	d10b      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1d      	ldr	r2, [pc, #116]	; (8005b0c <HAL_ADC_ConfigChannel+0x254>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d12b      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x23a>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <HAL_ADC_ConfigChannel+0x258>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <HAL_ADC_ConfigChannel+0x1f4>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b11      	cmp	r3, #17
 8005aaa:	d122      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <HAL_ADC_ConfigChannel+0x258>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <HAL_ADC_ConfigChannel+0x25c>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <HAL_ADC_ConfigChannel+0x260>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	0c9a      	lsrs	r2, r3, #18
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	005b      	lsls	r3, r3, #1
 8005ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005ae4:	e002      	b.n	8005aec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1f9      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr
 8005b08:	40012300 	.word	0x40012300
 8005b0c:	40012000 	.word	0x40012000
 8005b10:	10000012 	.word	0x10000012
 8005b14:	200003c8 	.word	0x200003c8
 8005b18:	431bde83 	.word	0x431bde83

08005b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b24:	4b79      	ldr	r3, [pc, #484]	; (8005d0c <ADC_Init+0x1f0>)
 8005b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	021a      	lsls	r2, r3, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	430a      	orrs	r2, r1
 8005b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6859      	ldr	r1, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6899      	ldr	r1, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	4a58      	ldr	r2, [pc, #352]	; (8005d10 <ADC_Init+0x1f4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6899      	ldr	r1, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6899      	ldr	r1, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	609a      	str	r2, [r3, #8]
 8005bf8:	e00f      	b.n	8005c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0202 	bic.w	r2, r2, #2
 8005c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6899      	ldr	r1, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	7e1b      	ldrb	r3, [r3, #24]
 8005c34:	005a      	lsls	r2, r3, #1
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01b      	beq.n	8005c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	3b01      	subs	r3, #1
 8005c74:	035a      	lsls	r2, r3, #13
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e007      	b.n	8005c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	051a      	lsls	r2, r3, #20
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cd2:	025a      	lsls	r2, r3, #9
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	029a      	lsls	r2, r3, #10
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40012300 	.word	0x40012300
 8005d10:	0f000001 	.word	0x0f000001

08005d14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d13c      	bne.n	8005da8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d12b      	bne.n	8005da0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d127      	bne.n	8005da0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d119      	bne.n	8005da0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0220 	bic.w	r2, r2, #32
 8005d7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f043 0201 	orr.w	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7fe fe8d 	bl	8004ac0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005da6:	e00e      	b.n	8005dc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f7ff fd75 	bl	80058a4 <HAL_ADC_ErrorCallback>
}
 8005dba:	e004      	b.n	8005dc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f7ff fd57 	bl	8005890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2240      	movs	r2, #64	; 0x40
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f043 0204 	orr.w	r2, r3, #4
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fd4a 	bl	80058a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e10:	bf00      	nop
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_ADCEx_InjectedStart+0x22>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0aa      	b.n	8005f90 <HAL_ADCEx_InjectedStart+0x178>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d018      	beq.n	8005e82 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689a      	ldr	r2, [r3, #8]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005e60:	4b4e      	ldr	r3, [pc, #312]	; (8005f9c <HAL_ADCEx_InjectedStart+0x184>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a4e      	ldr	r2, [pc, #312]	; (8005fa0 <HAL_ADCEx_InjectedStart+0x188>)
 8005e66:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6a:	0c9a      	lsrs	r2, r3, #18
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e74:	e002      	b.n	8005e7c <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f9      	bne.n	8005e76 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d172      	bne.n	8005f76 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f06f 0204 	mvn.w	r2, #4
 8005ec6:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ec8:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <HAL_ADCEx_InjectedStart+0x18c>)
 8005eca:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d124      	bne.n	8005f22 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	bf0c      	ite	eq
 8005efc:	2301      	moveq	r3, #1
 8005efe:	2300      	movne	r3, #0
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d041      	beq.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d03e      	beq.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	e035      	b.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a15      	ldr	r2, [pc, #84]	; (8005fa8 <HAL_ADCEx_InjectedStart+0x190>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d11a      	bne.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d014      	beq.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	e00b      	b.n	8005f8e <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f043 0210 	orr.w	r2, r3, #16
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	200003c8 	.word	0x200003c8
 8005fa0:	431bde83 	.word	0x431bde83
 8005fa4:	40012300 	.word	0x40012300
 8005fa8:	40012000 	.word	0x40012000

08005fac <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_ADCEx_InjectedStop+0x1a>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e037      	b.n	8006036 <HAL_ADCEx_InjectedStop+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d120      	bne.n	800601c <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d119      	bne.n	800601c <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d112      	bne.n	800602c <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	f043 0201 	orr.w	r2, r3, #1
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800601a:	e007      	b.n	800602c <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f043 0220 	orr.w	r2, r3, #32
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0204 	mvn.w	r2, #4
 800605a:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	3b01      	subs	r3, #1
 8006060:	2b03      	cmp	r3, #3
 8006062:	d81f      	bhi.n	80060a4 <HAL_ADCEx_InjectedGetValue+0x60>
 8006064:	a201      	add	r2, pc, #4	; (adr r2, 800606c <HAL_ADCEx_InjectedGetValue+0x28>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	0800609b 	.word	0x0800609b
 8006070:	08006091 	.word	0x08006091
 8006074:	08006087 	.word	0x08006087
 8006078:	0800607d 	.word	0x0800607d
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006082:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8006084:	e00f      	b.n	80060a6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608c:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800608e:	e00a      	b.n	80060a6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	60fb      	str	r3, [r7, #12]
    }
    break;
 8006098:	e005      	b.n	80060a6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	60fb      	str	r3, [r7, #12]
    }
    break;
 80060a2:	e000      	b.n	80060a6 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 80060a4:	bf00      	nop
  }
  return tmp;
 80060a6:	68fb      	ldr	r3, [r7, #12]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_ADCEx_InjectedConfigChannel+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e17e      	b.n	80063ca <HAL_ADCEx_InjectedConfigChannel+0x316>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b09      	cmp	r3, #9
 80060da:	d925      	bls.n	8006128 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68d9      	ldr	r1, [r3, #12]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	4613      	mov	r3, r2
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	4413      	add	r3, r2
 80060f0:	3b1e      	subs	r3, #30
 80060f2:	2207      	movs	r2, #7
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43da      	mvns	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	400a      	ands	r2, r1
 8006100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68d9      	ldr	r1, [r3, #12]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	4618      	mov	r0, r3
 8006114:	4603      	mov	r3, r0
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4403      	add	r3, r0
 800611a:	3b1e      	subs	r3, #30
 800611c:	409a      	lsls	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	e022      	b.n	800616e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6919      	ldr	r1, [r3, #16]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	4613      	mov	r3, r2
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	4413      	add	r3, r2
 800613c:	2207      	movs	r2, #7
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	43da      	mvns	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	400a      	ands	r2, r1
 800614a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6919      	ldr	r1, [r3, #16]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	4618      	mov	r0, r3
 800615e:	4603      	mov	r3, r0
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	4403      	add	r3, r0
 8006164:	409a      	lsls	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	3b01      	subs	r3, #1
 800618a:	051a      	lsls	r2, r3, #20
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	3303      	adds	r3, #3
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	461a      	mov	r2, r3
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	221f      	movs	r2, #31
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	43da      	mvns	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	400a      	ands	r2, r1
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	4618      	mov	r0, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	3303      	adds	r3, #3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	461a      	mov	r2, r3
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	fa00 f203 	lsl.w	r2, r0, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4a75      	ldr	r2, [pc, #468]	; (80063d8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6899      	ldr	r1, [r3, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	699a      	ldr	r2, [r3, #24]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689a      	ldr	r2, [r3, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	430a      	orrs	r2, r1
 8006248:	609a      	str	r2, [r3, #8]
 800624a:	e00f      	b.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800625a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800626a:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	7d5b      	ldrb	r3, [r3, #21]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d008      	beq.n	8006286 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006282:	605a      	str	r2, [r3, #4]
 8006284:	e007      	b.n	8006296 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006294:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	7d1b      	ldrb	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e007      	b.n	80062c0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062be:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d02e      	beq.n	8006326 <HAL_ADCEx_InjectedConfigChannel+0x272>
 80062c8:	2b03      	cmp	r3, #3
 80062ca:	d840      	bhi.n	800634e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d002      	beq.n	80062d6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d014      	beq.n	80062fe <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80062d4:	e03b      	b.n	800634e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80062e4:	f023 030f 	bic.w	r3, r3, #15
 80062e8:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6959      	ldr	r1, [r3, #20]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	615a      	str	r2, [r3, #20]
      break;
 80062fc:	e03b      	b.n	8006376 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6812      	ldr	r2, [r2, #0]
 8006308:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800630c:	f023 030f 	bic.w	r3, r3, #15
 8006310:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6999      	ldr	r1, [r3, #24]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	619a      	str	r2, [r3, #24]
      break;
 8006324:	e027      	b.n	8006376 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006334:	f023 030f 	bic.w	r3, r3, #15
 8006338:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	69d9      	ldr	r1, [r3, #28]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	61da      	str	r2, [r3, #28]
      break;
 800634c:	e013      	b.n	8006376 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800635c:	f023 030f 	bic.w	r3, r3, #15
 8006360:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a19      	ldr	r1, [r3, #32]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	621a      	str	r2, [r3, #32]
      break;
 8006374:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006376:	4b19      	ldr	r3, [pc, #100]	; (80063dc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006378:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d109      	bne.n	8006398 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2b12      	cmp	r3, #18
 800638a:	d105      	bne.n	8006398 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a10      	ldr	r2, [pc, #64]	; (80063e0 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10e      	bne.n	80063c0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b11      	cmp	r3, #17
 80063b2:	d105      	bne.n	80063c0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	000f0001 	.word	0x000f0001
 80063dc:	40012300 	.word	0x40012300
 80063e0:	40012000 	.word	0x40012000
 80063e4:	10000012 	.word	0x10000012

080063e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063f8:	4b0c      	ldr	r3, [pc, #48]	; (800642c <__NVIC_SetPriorityGrouping+0x44>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006404:	4013      	ands	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800641a:	4a04      	ldr	r2, [pc, #16]	; (800642c <__NVIC_SetPriorityGrouping+0x44>)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	60d3      	str	r3, [r2, #12]
}
 8006420:	bf00      	nop
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000ed00 	.word	0xe000ed00

08006430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006434:	4b04      	ldr	r3, [pc, #16]	; (8006448 <__NVIC_GetPriorityGrouping+0x18>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	0a1b      	lsrs	r3, r3, #8
 800643a:	f003 0307 	and.w	r3, r3, #7
}
 800643e:	4618      	mov	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	e000ed00 	.word	0xe000ed00

0800644c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645a:	2b00      	cmp	r3, #0
 800645c:	db0b      	blt.n	8006476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	f003 021f 	and.w	r2, r3, #31
 8006464:	4907      	ldr	r1, [pc, #28]	; (8006484 <__NVIC_EnableIRQ+0x38>)
 8006466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	2001      	movs	r0, #1
 800646e:	fa00 f202 	lsl.w	r2, r0, r2
 8006472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	e000e100 	.word	0xe000e100

08006488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	6039      	str	r1, [r7, #0]
 8006492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006498:	2b00      	cmp	r3, #0
 800649a:	db0a      	blt.n	80064b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	490c      	ldr	r1, [pc, #48]	; (80064d4 <__NVIC_SetPriority+0x4c>)
 80064a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064a6:	0112      	lsls	r2, r2, #4
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	440b      	add	r3, r1
 80064ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80064b0:	e00a      	b.n	80064c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	b2da      	uxtb	r2, r3
 80064b6:	4908      	ldr	r1, [pc, #32]	; (80064d8 <__NVIC_SetPriority+0x50>)
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	3b04      	subs	r3, #4
 80064c0:	0112      	lsls	r2, r2, #4
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	440b      	add	r3, r1
 80064c6:	761a      	strb	r2, [r3, #24]
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr
 80064d4:	e000e100 	.word	0xe000e100
 80064d8:	e000ed00 	.word	0xe000ed00

080064dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064dc:	b480      	push	{r7}
 80064de:	b089      	sub	sp, #36	; 0x24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0307 	and.w	r3, r3, #7
 80064ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f1c3 0307 	rsb	r3, r3, #7
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	bf28      	it	cs
 80064fa:	2304      	movcs	r3, #4
 80064fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	3304      	adds	r3, #4
 8006502:	2b06      	cmp	r3, #6
 8006504:	d902      	bls.n	800650c <NVIC_EncodePriority+0x30>
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3b03      	subs	r3, #3
 800650a:	e000      	b.n	800650e <NVIC_EncodePriority+0x32>
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006510:	f04f 32ff 	mov.w	r2, #4294967295
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	43da      	mvns	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	401a      	ands	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006524:	f04f 31ff 	mov.w	r1, #4294967295
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	fa01 f303 	lsl.w	r3, r1, r3
 800652e:	43d9      	mvns	r1, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006534:	4313      	orrs	r3, r2
         );
}
 8006536:	4618      	mov	r0, r3
 8006538:	3724      	adds	r7, #36	; 0x24
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3b01      	subs	r3, #1
 8006550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006554:	d301      	bcc.n	800655a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006556:	2301      	movs	r3, #1
 8006558:	e00f      	b.n	800657a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800655a:	4a0a      	ldr	r2, [pc, #40]	; (8006584 <SysTick_Config+0x40>)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	3b01      	subs	r3, #1
 8006560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006562:	210f      	movs	r1, #15
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	f7ff ff8e 	bl	8006488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800656c:	4b05      	ldr	r3, [pc, #20]	; (8006584 <SysTick_Config+0x40>)
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006572:	4b04      	ldr	r3, [pc, #16]	; (8006584 <SysTick_Config+0x40>)
 8006574:	2207      	movs	r2, #7
 8006576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	e000e010 	.word	0xe000e010

08006588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff ff29 	bl	80063e8 <__NVIC_SetPriorityGrouping>
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	4603      	mov	r3, r0
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
 80065aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065b0:	f7ff ff3e 	bl	8006430 <__NVIC_GetPriorityGrouping>
 80065b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	6978      	ldr	r0, [r7, #20]
 80065bc:	f7ff ff8e 	bl	80064dc <NVIC_EncodePriority>
 80065c0:	4602      	mov	r2, r0
 80065c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff ff5d 	bl	8006488 <__NVIC_SetPriority>
}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	4603      	mov	r3, r0
 80065de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff ff31 	bl	800644c <__NVIC_EnableIRQ>
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ffa2 	bl	8006544 <SysTick_Config>
 8006600:	4603      	mov	r3, r0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006618:	f7fe fe3c 	bl	8005294 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e099      	b.n	800675c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006648:	e00f      	b.n	800666a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800664a:	f7fe fe23 	bl	8005294 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b05      	cmp	r3, #5
 8006656:	d908      	bls.n	800666a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2203      	movs	r2, #3
 8006662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e078      	b.n	800675c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e8      	bne.n	800664a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4b38      	ldr	r3, [pc, #224]	; (8006764 <HAL_DMA_Init+0x158>)
 8006684:	4013      	ands	r3, r2
 8006686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d107      	bne.n	80066d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	4313      	orrs	r3, r2
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0307 	bic.w	r3, r3, #7
 80066ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d117      	bne.n	800672e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fadf 	bl	8006cd4 <DMA_CheckFifoParam>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800672a:	2301      	movs	r3, #1
 800672c:	e016      	b.n	800675c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa96 	bl	8006c68 <DMA_CalcBaseAndBitshift>
 800673c:	4603      	mov	r3, r0
 800673e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006744:	223f      	movs	r2, #63	; 0x3f
 8006746:	409a      	lsls	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	f010803f 	.word	0xf010803f

08006768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_DMA_Start_IT+0x26>
 800678a:	2302      	movs	r3, #2
 800678c:	e040      	b.n	8006810 <HAL_DMA_Start_IT+0xa8>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d12f      	bne.n	8006802 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fa28 	bl	8006c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c0:	223f      	movs	r2, #63	; 0x3f
 80067c2:	409a      	lsls	r2, r3
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f042 0216 	orr.w	r2, r2, #22
 80067d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0208 	orr.w	r2, r2, #8
 80067ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e005      	b.n	800680e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800680a:	2302      	movs	r3, #2
 800680c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800680e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006824:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006826:	f7fe fd35 	bl	8005294 <HAL_GetTick>
 800682a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b02      	cmp	r3, #2
 8006836:	d008      	beq.n	800684a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2280      	movs	r2, #128	; 0x80
 800683c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e052      	b.n	80068f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0216 	bic.w	r2, r2, #22
 8006858:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006868:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d103      	bne.n	800687a <HAL_DMA_Abort+0x62>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0208 	bic.w	r2, r2, #8
 8006888:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689a:	e013      	b.n	80068c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800689c:	f7fe fcfa 	bl	8005294 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	d90c      	bls.n	80068c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2220      	movs	r2, #32
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2203      	movs	r2, #3
 80068b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e015      	b.n	80068f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e4      	bne.n	800689c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d6:	223f      	movs	r2, #63	; 0x3f
 80068d8:	409a      	lsls	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006904:	4b8e      	ldr	r3, [pc, #568]	; (8006b40 <HAL_DMA_IRQHandler+0x248>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a8e      	ldr	r2, [pc, #568]	; (8006b44 <HAL_DMA_IRQHandler+0x24c>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	0a9b      	lsrs	r3, r3, #10
 8006910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	2208      	movs	r2, #8
 8006924:	409a      	lsls	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01a      	beq.n	8006964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d013      	beq.n	8006964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0204 	bic.w	r2, r2, #4
 800694a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	2208      	movs	r2, #8
 8006952:	409a      	lsls	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f043 0201 	orr.w	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	2201      	movs	r2, #1
 800696a:	409a      	lsls	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d012      	beq.n	800699a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	2201      	movs	r2, #1
 8006988:	409a      	lsls	r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	f043 0202 	orr.w	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699e:	2204      	movs	r2, #4
 80069a0:	409a      	lsls	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069bc:	2204      	movs	r2, #4
 80069be:	409a      	lsls	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f043 0204 	orr.w	r2, r3, #4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d4:	2210      	movs	r2, #16
 80069d6:	409a      	lsls	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d043      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d03c      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	2210      	movs	r2, #16
 80069f4:	409a      	lsls	r2, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d018      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d108      	bne.n	8006a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d024      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	e01f      	b.n	8006a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
 8006a38:	e016      	b.n	8006a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0208 	bic.w	r2, r2, #8
 8006a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 808f 	beq.w	8006b98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8087 	beq.w	8006b98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8e:	2220      	movs	r2, #32
 8006a90:	409a      	lsls	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d136      	bne.n	8006b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0216 	bic.w	r2, r2, #22
 8006ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <HAL_DMA_IRQHandler+0x1da>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0208 	bic.w	r2, r2, #8
 8006ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	223f      	movs	r2, #63	; 0x3f
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d07e      	beq.n	8006c04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
        }
        return;
 8006b0e:	e079      	b.n	8006c04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01d      	beq.n	8006b5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10d      	bne.n	8006b48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d031      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
 8006b3c:	e02c      	b.n	8006b98 <HAL_DMA_IRQHandler+0x2a0>
 8006b3e:	bf00      	nop
 8006b40:	200003c8 	.word	0x200003c8
 8006b44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d023      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	4798      	blx	r3
 8006b58:	e01e      	b.n	8006b98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10f      	bne.n	8006b88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 0210 	bic.w	r2, r2, #16
 8006b76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d032      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d022      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2205      	movs	r2, #5
 8006bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 0201 	bic.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d307      	bcc.n	8006be0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1f2      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x2cc>
 8006bde:	e000      	b.n	8006be2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006be0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
 8006c02:	e000      	b.n	8006c06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c04:	bf00      	nop
    }
  }
}
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d108      	bne.n	8006c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c4a:	e007      	b.n	8006c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	3b10      	subs	r3, #16
 8006c78:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <DMA_CalcBaseAndBitshift+0x64>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c82:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d909      	bls.n	8006caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ca8:	e007      	b.n	8006cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	aaaaaaab 	.word	0xaaaaaaab
 8006cd0:	0800c378 	.word	0x0800c378

08006cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d11f      	bne.n	8006d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d856      	bhi.n	8006da2 <DMA_CheckFifoParam+0xce>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <DMA_CheckFifoParam+0x28>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d1f 	.word	0x08006d1f
 8006d04:	08006d0d 	.word	0x08006d0d
 8006d08:	08006da3 	.word	0x08006da3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d046      	beq.n	8006da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d1c:	e043      	b.n	8006da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d26:	d140      	bne.n	8006daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d2c:	e03d      	b.n	8006daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d36:	d121      	bne.n	8006d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d837      	bhi.n	8006dae <DMA_CheckFifoParam+0xda>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <DMA_CheckFifoParam+0x70>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d5b 	.word	0x08006d5b
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006d6d 	.word	0x08006d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      break;
 8006d58:	e030      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d025      	beq.n	8006db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d6a:	e022      	b.n	8006db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d74:	d11f      	bne.n	8006db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d7a:	e01c      	b.n	8006db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d903      	bls.n	8006d8a <DMA_CheckFifoParam+0xb6>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d003      	beq.n	8006d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d88:	e018      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8e:	e015      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00e      	beq.n	8006dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e00b      	b.n	8006dba <DMA_CheckFifoParam+0xe6>
      break;
 8006da2:	bf00      	nop
 8006da4:	e00a      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006da6:	bf00      	nop
 8006da8:	e008      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006daa:	bf00      	nop
 8006dac:	e006      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006dae:	bf00      	nop
 8006db0:	e004      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006db2:	bf00      	nop
 8006db4:	e002      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006dba:	bf00      	nop
    }
  } 
  
  return status; 
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b089      	sub	sp, #36	; 0x24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e159      	b.n	800709c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006de8:	2201      	movs	r2, #1
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	f040 8148 	bne.w	8007096 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f003 0303 	and.w	r3, r3, #3
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d005      	beq.n	8006e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d130      	bne.n	8006e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	2203      	movs	r2, #3
 8006e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2e:	43db      	mvns	r3, r3
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	4013      	ands	r3, r2
 8006e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e54:	2201      	movs	r2, #1
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	4013      	ands	r3, r2
 8006e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	091b      	lsrs	r3, r3, #4
 8006e6a:	f003 0201 	and.w	r2, r3, #1
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 0303 	and.w	r3, r3, #3
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d017      	beq.n	8006ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	005b      	lsls	r3, r3, #1
 8006e96:	2203      	movs	r2, #3
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d123      	bne.n	8006f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	08da      	lsrs	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3208      	adds	r2, #8
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	220f      	movs	r2, #15
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	08da      	lsrs	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3208      	adds	r2, #8
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 0203 	and.w	r2, r3, #3
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80a2 	beq.w	8007096 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	4b57      	ldr	r3, [pc, #348]	; (80070b4 <HAL_GPIO_Init+0x2e8>)
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	4a56      	ldr	r2, [pc, #344]	; (80070b4 <HAL_GPIO_Init+0x2e8>)
 8006f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f60:	6453      	str	r3, [r2, #68]	; 0x44
 8006f62:	4b54      	ldr	r3, [pc, #336]	; (80070b4 <HAL_GPIO_Init+0x2e8>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f6e:	4a52      	ldr	r2, [pc, #328]	; (80070b8 <HAL_GPIO_Init+0x2ec>)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	3302      	adds	r3, #2
 8006f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	220f      	movs	r2, #15
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a49      	ldr	r2, [pc, #292]	; (80070bc <HAL_GPIO_Init+0x2f0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d019      	beq.n	8006fce <HAL_GPIO_Init+0x202>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a48      	ldr	r2, [pc, #288]	; (80070c0 <HAL_GPIO_Init+0x2f4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <HAL_GPIO_Init+0x1fe>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a47      	ldr	r2, [pc, #284]	; (80070c4 <HAL_GPIO_Init+0x2f8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00d      	beq.n	8006fc6 <HAL_GPIO_Init+0x1fa>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a46      	ldr	r2, [pc, #280]	; (80070c8 <HAL_GPIO_Init+0x2fc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d007      	beq.n	8006fc2 <HAL_GPIO_Init+0x1f6>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a45      	ldr	r2, [pc, #276]	; (80070cc <HAL_GPIO_Init+0x300>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d101      	bne.n	8006fbe <HAL_GPIO_Init+0x1f2>
 8006fba:	2304      	movs	r3, #4
 8006fbc:	e008      	b.n	8006fd0 <HAL_GPIO_Init+0x204>
 8006fbe:	2307      	movs	r3, #7
 8006fc0:	e006      	b.n	8006fd0 <HAL_GPIO_Init+0x204>
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e004      	b.n	8006fd0 <HAL_GPIO_Init+0x204>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e002      	b.n	8006fd0 <HAL_GPIO_Init+0x204>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <HAL_GPIO_Init+0x204>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	f002 0203 	and.w	r2, r2, #3
 8006fd6:	0092      	lsls	r2, r2, #2
 8006fd8:	4093      	lsls	r3, r2
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fe0:	4935      	ldr	r1, [pc, #212]	; (80070b8 <HAL_GPIO_Init+0x2ec>)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	089b      	lsrs	r3, r3, #2
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006fee:	4b38      	ldr	r3, [pc, #224]	; (80070d0 <HAL_GPIO_Init+0x304>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007012:	4a2f      	ldr	r2, [pc, #188]	; (80070d0 <HAL_GPIO_Init+0x304>)
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <HAL_GPIO_Init+0x304>)
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	43db      	mvns	r3, r3
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	4013      	ands	r3, r2
 8007026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d003      	beq.n	800703c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800703c:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <HAL_GPIO_Init+0x304>)
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007042:	4b23      	ldr	r3, [pc, #140]	; (80070d0 <HAL_GPIO_Init+0x304>)
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	43db      	mvns	r3, r3
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	4013      	ands	r3, r2
 8007050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4313      	orrs	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007066:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <HAL_GPIO_Init+0x304>)
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800706c:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <HAL_GPIO_Init+0x304>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	43db      	mvns	r3, r3
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	4013      	ands	r3, r2
 800707a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4313      	orrs	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007090:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <HAL_GPIO_Init+0x304>)
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	3301      	adds	r3, #1
 800709a:	61fb      	str	r3, [r7, #28]
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	2b0f      	cmp	r3, #15
 80070a0:	f67f aea2 	bls.w	8006de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	3724      	adds	r7, #36	; 0x24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40013800 	.word	0x40013800
 80070bc:	40020000 	.word	0x40020000
 80070c0:	40020400 	.word	0x40020400
 80070c4:	40020800 	.word	0x40020800
 80070c8:	40020c00 	.word	0x40020c00
 80070cc:	40021000 	.word	0x40021000
 80070d0:	40013c00 	.word	0x40013c00

080070d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	807b      	strh	r3, [r7, #2]
 80070e0:	4613      	mov	r3, r2
 80070e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070e4:	787b      	ldrb	r3, [r7, #1]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80070f0:	e003      	b.n	80070fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80070f2:	887b      	ldrh	r3, [r7, #2]
 80070f4:	041a      	lsls	r2, r3, #16
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	619a      	str	r2, [r3, #24]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
	...

08007108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e12b      	b.n	8007372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fd fd98 	bl	8004c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2224      	movs	r2, #36	; 0x24
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0201 	bic.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800715a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800716a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800716c:	f001 fbbc 	bl	80088e8 <HAL_RCC_GetPCLK1Freq>
 8007170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	4a81      	ldr	r2, [pc, #516]	; (800737c <HAL_I2C_Init+0x274>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d807      	bhi.n	800718c <HAL_I2C_Init+0x84>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4a80      	ldr	r2, [pc, #512]	; (8007380 <HAL_I2C_Init+0x278>)
 8007180:	4293      	cmp	r3, r2
 8007182:	bf94      	ite	ls
 8007184:	2301      	movls	r3, #1
 8007186:	2300      	movhi	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e006      	b.n	800719a <HAL_I2C_Init+0x92>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4a7d      	ldr	r2, [pc, #500]	; (8007384 <HAL_I2C_Init+0x27c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	bf94      	ite	ls
 8007194:	2301      	movls	r3, #1
 8007196:	2300      	movhi	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d001      	beq.n	80071a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e0e7      	b.n	8007372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4a78      	ldr	r2, [pc, #480]	; (8007388 <HAL_I2C_Init+0x280>)
 80071a6:	fba2 2303 	umull	r2, r3, r2, r3
 80071aa:	0c9b      	lsrs	r3, r3, #18
 80071ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a1b      	ldr	r3, [r3, #32]
 80071c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	4a6a      	ldr	r2, [pc, #424]	; (800737c <HAL_I2C_Init+0x274>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d802      	bhi.n	80071dc <HAL_I2C_Init+0xd4>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	3301      	adds	r3, #1
 80071da:	e009      	b.n	80071f0 <HAL_I2C_Init+0xe8>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	4a69      	ldr	r2, [pc, #420]	; (800738c <HAL_I2C_Init+0x284>)
 80071e8:	fba2 2303 	umull	r2, r3, r2, r3
 80071ec:	099b      	lsrs	r3, r3, #6
 80071ee:	3301      	adds	r3, #1
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6812      	ldr	r2, [r2, #0]
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	495c      	ldr	r1, [pc, #368]	; (800737c <HAL_I2C_Init+0x274>)
 800720c:	428b      	cmp	r3, r1
 800720e:	d819      	bhi.n	8007244 <HAL_I2C_Init+0x13c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	1e59      	subs	r1, r3, #1
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	fbb1 f3f3 	udiv	r3, r1, r3
 800721e:	1c59      	adds	r1, r3, #1
 8007220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007224:	400b      	ands	r3, r1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <HAL_I2C_Init+0x138>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	1e59      	subs	r1, r3, #1
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	005b      	lsls	r3, r3, #1
 8007234:	fbb1 f3f3 	udiv	r3, r1, r3
 8007238:	3301      	adds	r3, #1
 800723a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800723e:	e051      	b.n	80072e4 <HAL_I2C_Init+0x1dc>
 8007240:	2304      	movs	r3, #4
 8007242:	e04f      	b.n	80072e4 <HAL_I2C_Init+0x1dc>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d111      	bne.n	8007270 <HAL_I2C_Init+0x168>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	1e58      	subs	r0, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6859      	ldr	r1, [r3, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	440b      	add	r3, r1
 800725a:	fbb0 f3f3 	udiv	r3, r0, r3
 800725e:	3301      	adds	r3, #1
 8007260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007264:	2b00      	cmp	r3, #0
 8007266:	bf0c      	ite	eq
 8007268:	2301      	moveq	r3, #1
 800726a:	2300      	movne	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e012      	b.n	8007296 <HAL_I2C_Init+0x18e>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	1e58      	subs	r0, r3, #1
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6859      	ldr	r1, [r3, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	0099      	lsls	r1, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	fbb0 f3f3 	udiv	r3, r0, r3
 8007286:	3301      	adds	r3, #1
 8007288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800728c:	2b00      	cmp	r3, #0
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_I2C_Init+0x196>
 800729a:	2301      	movs	r3, #1
 800729c:	e022      	b.n	80072e4 <HAL_I2C_Init+0x1dc>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10e      	bne.n	80072c4 <HAL_I2C_Init+0x1bc>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1e58      	subs	r0, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6859      	ldr	r1, [r3, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	440b      	add	r3, r1
 80072b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80072b8:	3301      	adds	r3, #1
 80072ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072c2:	e00f      	b.n	80072e4 <HAL_I2C_Init+0x1dc>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1e58      	subs	r0, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6859      	ldr	r1, [r3, #4]
 80072cc:	460b      	mov	r3, r1
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	0099      	lsls	r1, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80072da:	3301      	adds	r3, #1
 80072dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072e4:	6879      	ldr	r1, [r7, #4]
 80072e6:	6809      	ldr	r1, [r1, #0]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69da      	ldr	r2, [r3, #28]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	431a      	orrs	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6911      	ldr	r1, [r2, #16]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	68d2      	ldr	r2, [r2, #12]
 800731e:	4311      	orrs	r1, r2
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	6812      	ldr	r2, [r2, #0]
 8007324:	430b      	orrs	r3, r1
 8007326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	000186a0 	.word	0x000186a0
 8007380:	001e847f 	.word	0x001e847f
 8007384:	003d08ff 	.word	0x003d08ff
 8007388:	431bde83 	.word	0x431bde83
 800738c:	10624dd3 	.word	0x10624dd3

08007390 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	4608      	mov	r0, r1
 800739a:	4611      	mov	r1, r2
 800739c:	461a      	mov	r2, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	817b      	strh	r3, [r7, #10]
 80073a2:	460b      	mov	r3, r1
 80073a4:	813b      	strh	r3, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073aa:	f7fd ff73 	bl	8005294 <HAL_GetTick>
 80073ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	f040 80d9 	bne.w	8007570 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	2319      	movs	r3, #25
 80073c4:	2201      	movs	r2, #1
 80073c6:	496d      	ldr	r1, [pc, #436]	; (800757c <HAL_I2C_Mem_Write+0x1ec>)
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fc7f 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
 80073d6:	e0cc      	b.n	8007572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_I2C_Mem_Write+0x56>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0c5      	b.n	8007572 <HAL_I2C_Mem_Write+0x1e2>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d007      	beq.n	800740c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800741a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2221      	movs	r2, #33	; 0x21
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2240      	movs	r2, #64	; 0x40
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a3a      	ldr	r2, [r7, #32]
 8007436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800743c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a4d      	ldr	r2, [pc, #308]	; (8007580 <HAL_I2C_Mem_Write+0x1f0>)
 800744c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800744e:	88f8      	ldrh	r0, [r7, #6]
 8007450:	893a      	ldrh	r2, [r7, #8]
 8007452:	8979      	ldrh	r1, [r7, #10]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745a:	9300      	str	r3, [sp, #0]
 800745c:	4603      	mov	r3, r0
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fab6 	bl	80079d0 <I2C_RequestMemoryWrite>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d052      	beq.n	8007510 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e081      	b.n	8007572 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fd00 	bl	8007e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	2b04      	cmp	r3, #4
 8007484:	d107      	bne.n	8007496 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e06b      	b.n	8007572 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	781a      	ldrb	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	3b01      	subs	r3, #1
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b04      	cmp	r3, #4
 80074d6:	d11b      	bne.n	8007510 <HAL_I2C_Mem_Write+0x180>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d017      	beq.n	8007510 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fa:	3b01      	subs	r3, #1
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1aa      	bne.n	800746e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 fcec 	bl	8007efa <I2C_WaitOnBTFFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	2b04      	cmp	r3, #4
 800752e:	d107      	bne.n	8007540 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800753e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e016      	b.n	8007572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	e000      	b.n	8007572 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007570:	2302      	movs	r3, #2
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	00100002 	.word	0x00100002
 8007580:	ffff0000 	.word	0xffff0000

08007584 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08c      	sub	sp, #48	; 0x30
 8007588:	af02      	add	r7, sp, #8
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	4608      	mov	r0, r1
 800758e:	4611      	mov	r1, r2
 8007590:	461a      	mov	r2, r3
 8007592:	4603      	mov	r3, r0
 8007594:	817b      	strh	r3, [r7, #10]
 8007596:	460b      	mov	r3, r1
 8007598:	813b      	strh	r3, [r7, #8]
 800759a:	4613      	mov	r3, r2
 800759c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800759e:	f7fd fe79 	bl	8005294 <HAL_GetTick>
 80075a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	f040 8208 	bne.w	80079c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	9300      	str	r3, [sp, #0]
 80075b6:	2319      	movs	r3, #25
 80075b8:	2201      	movs	r2, #1
 80075ba:	497b      	ldr	r1, [pc, #492]	; (80077a8 <HAL_I2C_Mem_Read+0x224>)
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fb85 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e1fb      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_I2C_Mem_Read+0x56>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e1f4      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d007      	beq.n	8007600 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800760e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2222      	movs	r2, #34	; 0x22
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2240      	movs	r2, #64	; 0x40
 800761c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007630:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4a5b      	ldr	r2, [pc, #364]	; (80077ac <HAL_I2C_Mem_Read+0x228>)
 8007640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007642:	88f8      	ldrh	r0, [r7, #6]
 8007644:	893a      	ldrh	r2, [r7, #8]
 8007646:	8979      	ldrh	r1, [r7, #10]
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	9301      	str	r3, [sp, #4]
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4603      	mov	r3, r0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fa52 	bl	8007afc <I2C_RequestMemoryRead>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e1b0      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d113      	bne.n	8007692 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800766a:	2300      	movs	r3, #0
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	623b      	str	r3, [r7, #32]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	623b      	str	r3, [r7, #32]
 800767e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e184      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007696:	2b01      	cmp	r3, #1
 8007698:	d11b      	bne.n	80076d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076aa:	2300      	movs	r3, #0
 80076ac:	61fb      	str	r3, [r7, #28]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	61fb      	str	r3, [r7, #28]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	61fb      	str	r3, [r7, #28]
 80076be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e164      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d11b      	bne.n	8007712 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076fa:	2300      	movs	r3, #0
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	61bb      	str	r3, [r7, #24]
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	e144      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	617b      	str	r3, [r7, #20]
 8007726:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007728:	e138      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800772e:	2b03      	cmp	r3, #3
 8007730:	f200 80f1 	bhi.w	8007916 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007738:	2b01      	cmp	r3, #1
 800773a:	d123      	bne.n	8007784 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800773c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 fc1b 	bl	8007f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e139      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691a      	ldr	r2, [r3, #16]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776c:	3b01      	subs	r3, #1
 800776e:	b29a      	uxth	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007782:	e10b      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007788:	2b02      	cmp	r3, #2
 800778a:	d14e      	bne.n	800782a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	2200      	movs	r2, #0
 8007794:	4906      	ldr	r1, [pc, #24]	; (80077b0 <HAL_I2C_Mem_Read+0x22c>)
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fa98 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e10e      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
 80077a6:	bf00      	nop
 80077a8:	00100002 	.word	0x00100002
 80077ac:	ffff0000 	.word	0xffff0000
 80077b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691a      	ldr	r2, [r3, #16]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	b2d2      	uxtb	r2, r2
 80077d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29b      	uxth	r3, r3
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007828:	e0b8      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800782a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007830:	2200      	movs	r2, #0
 8007832:	4966      	ldr	r1, [pc, #408]	; (80079cc <HAL_I2C_Mem_Read+0x448>)
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fa49 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e0bf      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	2200      	movs	r2, #0
 800788e:	494f      	ldr	r1, [pc, #316]	; (80079cc <HAL_I2C_Mem_Read+0x448>)
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fa1b 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e091      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	3b01      	subs	r3, #1
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078fe:	3b01      	subs	r3, #1
 8007900:	b29a      	uxth	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007914:	e042      	b.n	800799c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 fb2e 	bl	8007f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e04c      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691a      	ldr	r2, [r3, #16]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	b2d2      	uxtb	r2, r2
 8007936:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	f003 0304 	and.w	r3, r3, #4
 8007966:	2b04      	cmp	r3, #4
 8007968:	d118      	bne.n	800799c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f47f aec2 	bne.w	800772a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e000      	b.n	80079c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80079c2:	2302      	movs	r3, #2
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3728      	adds	r7, #40	; 0x28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	00010004 	.word	0x00010004

080079d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	461a      	mov	r2, r3
 80079de:	4603      	mov	r3, r0
 80079e0:	817b      	strh	r3, [r7, #10]
 80079e2:	460b      	mov	r3, r1
 80079e4:	813b      	strh	r3, [r7, #8]
 80079e6:	4613      	mov	r3, r2
 80079e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f000 f960 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a20:	d103      	bne.n	8007a2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e05f      	b.n	8007aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a2e:	897b      	ldrh	r3, [r7, #10]
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	461a      	mov	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	6a3a      	ldr	r2, [r7, #32]
 8007a42:	492d      	ldr	r1, [pc, #180]	; (8007af8 <I2C_RequestMemoryWrite+0x128>)
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f998 	bl	8007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e04c      	b.n	8007aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6c:	6a39      	ldr	r1, [r7, #32]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fa02 	bl	8007e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00d      	beq.n	8007a96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d107      	bne.n	8007a92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e02b      	b.n	8007aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d105      	bne.n	8007aa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a9c:	893b      	ldrh	r3, [r7, #8]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	611a      	str	r2, [r3, #16]
 8007aa6:	e021      	b.n	8007aec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007aa8:	893b      	ldrh	r3, [r7, #8]
 8007aaa:	0a1b      	lsrs	r3, r3, #8
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	b2da      	uxtb	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ab8:	6a39      	ldr	r1, [r7, #32]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f9dc 	bl	8007e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00d      	beq.n	8007ae2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d107      	bne.n	8007ade <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e005      	b.n	8007aee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3718      	adds	r7, #24
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	00010002 	.word	0x00010002

08007afc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af02      	add	r7, sp, #8
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	817b      	strh	r3, [r7, #10]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	813b      	strh	r3, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f8c2 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5c:	d103      	bne.n	8007b66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e0aa      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b6a:	897b      	ldrh	r3, [r7, #10]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	4952      	ldr	r1, [pc, #328]	; (8007cc8 <I2C_RequestMemoryRead+0x1cc>)
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f8fa 	bl	8007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e097      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b90:	2300      	movs	r3, #0
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	6a39      	ldr	r1, [r7, #32]
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 f964 	bl	8007e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00d      	beq.n	8007bd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d107      	bne.n	8007bce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e076      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d105      	bne.n	8007be4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bd8:	893b      	ldrh	r3, [r7, #8]
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	611a      	str	r2, [r3, #16]
 8007be2:	e021      	b.n	8007c28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007be4:	893b      	ldrh	r3, [r7, #8]
 8007be6:	0a1b      	lsrs	r3, r3, #8
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf4:	6a39      	ldr	r1, [r7, #32]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f93e 	bl	8007e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00d      	beq.n	8007c1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	d107      	bne.n	8007c1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e050      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c1e:	893b      	ldrh	r3, [r7, #8]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2a:	6a39      	ldr	r1, [r7, #32]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f923 	bl	8007e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00d      	beq.n	8007c54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d107      	bne.n	8007c50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e035      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 f82b 	bl	8007ccc <I2C_WaitOnFlagUntilTimeout>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00d      	beq.n	8007c98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c8a:	d103      	bne.n	8007c94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e013      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007c98:	897b      	ldrh	r3, [r7, #10]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f043 0301 	orr.w	r3, r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	6a3a      	ldr	r2, [r7, #32]
 8007cac:	4906      	ldr	r1, [pc, #24]	; (8007cc8 <I2C_RequestMemoryRead+0x1cc>)
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 f863 	bl	8007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	00010002 	.word	0x00010002

08007ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	603b      	str	r3, [r7, #0]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cdc:	e025      	b.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce4:	d021      	beq.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce6:	f7fd fad5 	bl	8005294 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	683a      	ldr	r2, [r7, #0]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d302      	bcc.n	8007cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d116      	bne.n	8007d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2220      	movs	r2, #32
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f043 0220 	orr.w	r2, r3, #32
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e023      	b.n	8007d72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d10d      	bne.n	8007d50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	43da      	mvns	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	bf0c      	ite	eq
 8007d46:	2301      	moveq	r3, #1
 8007d48:	2300      	movne	r3, #0
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	e00c      	b.n	8007d6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	43da      	mvns	r2, r3
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	bf0c      	ite	eq
 8007d62:	2301      	moveq	r3, #1
 8007d64:	2300      	movne	r3, #0
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	461a      	mov	r2, r3
 8007d6a:	79fb      	ldrb	r3, [r7, #7]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d0b6      	beq.n	8007cde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d88:	e051      	b.n	8007e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d98:	d123      	bne.n	8007de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007da8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007db2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f043 0204 	orr.w	r2, r3, #4
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e046      	b.n	8007e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d021      	beq.n	8007e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dea:	f7fd fa53 	bl	8005294 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d302      	bcc.n	8007e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d116      	bne.n	8007e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f043 0220 	orr.w	r2, r3, #32
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e020      	b.n	8007e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d10c      	bne.n	8007e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	43da      	mvns	r2, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4013      	ands	r3, r2
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bf14      	ite	ne
 8007e4a:	2301      	movne	r3, #1
 8007e4c:	2300      	moveq	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	e00b      	b.n	8007e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	43da      	mvns	r2, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bf14      	ite	ne
 8007e64:	2301      	movne	r3, #1
 8007e66:	2300      	moveq	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d18d      	bne.n	8007d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e84:	e02d      	b.n	8007ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f8ce 	bl	8008028 <I2C_IsAcknowledgeFailed>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e02d      	b.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d021      	beq.n	8007ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9e:	f7fd f9f9 	bl	8005294 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d302      	bcc.n	8007eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d116      	bne.n	8007ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f043 0220 	orr.w	r2, r3, #32
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e007      	b.n	8007ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b80      	cmp	r3, #128	; 0x80
 8007eee:	d1ca      	bne.n	8007e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f06:	e02d      	b.n	8007f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f000 f88d 	bl	8008028 <I2C_IsAcknowledgeFailed>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e02d      	b.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1e:	d021      	beq.n	8007f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f20:	f7fd f9b8 	bl	8005294 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d116      	bne.n	8007f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	f043 0220 	orr.w	r2, r3, #32
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e007      	b.n	8007f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	f003 0304 	and.w	r3, r3, #4
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d1ca      	bne.n	8007f08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f88:	e042      	b.n	8008010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f003 0310 	and.w	r3, r3, #16
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d119      	bne.n	8007fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0210 	mvn.w	r2, #16
 8007fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2220      	movs	r2, #32
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e029      	b.n	8008020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fcc:	f7fd f962 	bl	8005294 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d302      	bcc.n	8007fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d116      	bne.n	8008010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	f043 0220 	orr.w	r2, r3, #32
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e007      	b.n	8008020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d1b5      	bne.n	8007f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800803a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803e:	d11b      	bne.n	8008078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008064:	f043 0204 	orr.w	r2, r3, #4
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e000      	b.n	800807a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
	...

08008088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e267      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d075      	beq.n	8008192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080a6:	4b88      	ldr	r3, [pc, #544]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 030c 	and.w	r3, r3, #12
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d00c      	beq.n	80080cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080b2:	4b85      	ldr	r3, [pc, #532]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d112      	bne.n	80080e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080be:	4b82      	ldr	r3, [pc, #520]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ca:	d10b      	bne.n	80080e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080cc:	4b7e      	ldr	r3, [pc, #504]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05b      	beq.n	8008190 <HAL_RCC_OscConfig+0x108>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d157      	bne.n	8008190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e242      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ec:	d106      	bne.n	80080fc <HAL_RCC_OscConfig+0x74>
 80080ee:	4b76      	ldr	r3, [pc, #472]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a75      	ldr	r2, [pc, #468]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80080f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	e01d      	b.n	8008138 <HAL_RCC_OscConfig+0xb0>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008104:	d10c      	bne.n	8008120 <HAL_RCC_OscConfig+0x98>
 8008106:	4b70      	ldr	r3, [pc, #448]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a6f      	ldr	r2, [pc, #444]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800810c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	4b6d      	ldr	r3, [pc, #436]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a6c      	ldr	r2, [pc, #432]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	e00b      	b.n	8008138 <HAL_RCC_OscConfig+0xb0>
 8008120:	4b69      	ldr	r3, [pc, #420]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a68      	ldr	r2, [pc, #416]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	4b66      	ldr	r3, [pc, #408]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a65      	ldr	r2, [pc, #404]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d013      	beq.n	8008168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008140:	f7fd f8a8 	bl	8005294 <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008146:	e008      	b.n	800815a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008148:	f7fd f8a4 	bl	8005294 <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b64      	cmp	r3, #100	; 0x64
 8008154:	d901      	bls.n	800815a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e207      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800815a:	4b5b      	ldr	r3, [pc, #364]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d0f0      	beq.n	8008148 <HAL_RCC_OscConfig+0xc0>
 8008166:	e014      	b.n	8008192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008168:	f7fd f894 	bl	8005294 <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008170:	f7fd f890 	bl	8005294 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b64      	cmp	r3, #100	; 0x64
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e1f3      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008182:	4b51      	ldr	r3, [pc, #324]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1f0      	bne.n	8008170 <HAL_RCC_OscConfig+0xe8>
 800818e:	e000      	b.n	8008192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0302 	and.w	r3, r3, #2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d063      	beq.n	8008266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800819e:	4b4a      	ldr	r3, [pc, #296]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 030c 	and.w	r3, r3, #12
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00b      	beq.n	80081c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081aa:	4b47      	ldr	r3, [pc, #284]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80081b2:	2b08      	cmp	r3, #8
 80081b4:	d11c      	bne.n	80081f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80081b6:	4b44      	ldr	r3, [pc, #272]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d116      	bne.n	80081f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081c2:	4b41      	ldr	r3, [pc, #260]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_RCC_OscConfig+0x152>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d001      	beq.n	80081da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e1c7      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081da:	4b3b      	ldr	r3, [pc, #236]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	4937      	ldr	r1, [pc, #220]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ee:	e03a      	b.n	8008266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d020      	beq.n	800823a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081f8:	4b34      	ldr	r3, [pc, #208]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 80081fa:	2201      	movs	r2, #1
 80081fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fe:	f7fd f849 	bl	8005294 <HAL_GetTick>
 8008202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008204:	e008      	b.n	8008218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008206:	f7fd f845 	bl	8005294 <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	d901      	bls.n	8008218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e1a8      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008218:	4b2b      	ldr	r3, [pc, #172]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d0f0      	beq.n	8008206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008224:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	00db      	lsls	r3, r3, #3
 8008232:	4925      	ldr	r1, [pc, #148]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]
 8008238:	e015      	b.n	8008266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800823a:	4b24      	ldr	r3, [pc, #144]	; (80082cc <HAL_RCC_OscConfig+0x244>)
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008240:	f7fd f828 	bl	8005294 <HAL_GetTick>
 8008244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008246:	e008      	b.n	800825a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008248:	f7fd f824 	bl	8005294 <HAL_GetTick>
 800824c:	4602      	mov	r2, r0
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	2b02      	cmp	r3, #2
 8008254:	d901      	bls.n	800825a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008256:	2303      	movs	r3, #3
 8008258:	e187      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800825a:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b00      	cmp	r3, #0
 8008264:	d1f0      	bne.n	8008248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b00      	cmp	r3, #0
 8008270:	d036      	beq.n	80082e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d016      	beq.n	80082a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800827a:	4b15      	ldr	r3, [pc, #84]	; (80082d0 <HAL_RCC_OscConfig+0x248>)
 800827c:	2201      	movs	r2, #1
 800827e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008280:	f7fd f808 	bl	8005294 <HAL_GetTick>
 8008284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008288:	f7fd f804 	bl	8005294 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e167      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <HAL_RCC_OscConfig+0x240>)
 800829c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f0      	beq.n	8008288 <HAL_RCC_OscConfig+0x200>
 80082a6:	e01b      	b.n	80082e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <HAL_RCC_OscConfig+0x248>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082ae:	f7fc fff1 	bl	8005294 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b4:	e00e      	b.n	80082d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80082b6:	f7fc ffed 	bl	8005294 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d907      	bls.n	80082d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e150      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
 80082c8:	40023800 	.word	0x40023800
 80082cc:	42470000 	.word	0x42470000
 80082d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082d4:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80082d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1ea      	bne.n	80082b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 8097 	beq.w	800841c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ee:	2300      	movs	r3, #0
 80082f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082f2:	4b81      	ldr	r3, [pc, #516]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10f      	bne.n	800831e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082fe:	2300      	movs	r3, #0
 8008300:	60bb      	str	r3, [r7, #8]
 8008302:	4b7d      	ldr	r3, [pc, #500]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008306:	4a7c      	ldr	r2, [pc, #496]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830c:	6413      	str	r3, [r2, #64]	; 0x40
 800830e:	4b7a      	ldr	r3, [pc, #488]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008316:	60bb      	str	r3, [r7, #8]
 8008318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800831a:	2301      	movs	r3, #1
 800831c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831e:	4b77      	ldr	r3, [pc, #476]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	2b00      	cmp	r3, #0
 8008328:	d118      	bne.n	800835c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800832a:	4b74      	ldr	r3, [pc, #464]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a73      	ldr	r2, [pc, #460]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 8008330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008336:	f7fc ffad 	bl	8005294 <HAL_GetTick>
 800833a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800833c:	e008      	b.n	8008350 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800833e:	f7fc ffa9 	bl	8005294 <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d901      	bls.n	8008350 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800834c:	2303      	movs	r3, #3
 800834e:	e10c      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008350:	4b6a      	ldr	r3, [pc, #424]	; (80084fc <HAL_RCC_OscConfig+0x474>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0f0      	beq.n	800833e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d106      	bne.n	8008372 <HAL_RCC_OscConfig+0x2ea>
 8008364:	4b64      	ldr	r3, [pc, #400]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008368:	4a63      	ldr	r2, [pc, #396]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800836a:	f043 0301 	orr.w	r3, r3, #1
 800836e:	6713      	str	r3, [r2, #112]	; 0x70
 8008370:	e01c      	b.n	80083ac <HAL_RCC_OscConfig+0x324>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	2b05      	cmp	r3, #5
 8008378:	d10c      	bne.n	8008394 <HAL_RCC_OscConfig+0x30c>
 800837a:	4b5f      	ldr	r3, [pc, #380]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	4a5e      	ldr	r2, [pc, #376]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008380:	f043 0304 	orr.w	r3, r3, #4
 8008384:	6713      	str	r3, [r2, #112]	; 0x70
 8008386:	4b5c      	ldr	r3, [pc, #368]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838a:	4a5b      	ldr	r2, [pc, #364]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	6713      	str	r3, [r2, #112]	; 0x70
 8008392:	e00b      	b.n	80083ac <HAL_RCC_OscConfig+0x324>
 8008394:	4b58      	ldr	r3, [pc, #352]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	4a57      	ldr	r2, [pc, #348]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800839a:	f023 0301 	bic.w	r3, r3, #1
 800839e:	6713      	str	r3, [r2, #112]	; 0x70
 80083a0:	4b55      	ldr	r3, [pc, #340]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80083a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a4:	4a54      	ldr	r2, [pc, #336]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80083a6:	f023 0304 	bic.w	r3, r3, #4
 80083aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d015      	beq.n	80083e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b4:	f7fc ff6e 	bl	8005294 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083ba:	e00a      	b.n	80083d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083bc:	f7fc ff6a 	bl	8005294 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e0cb      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083d2:	4b49      	ldr	r3, [pc, #292]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80083d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0ee      	beq.n	80083bc <HAL_RCC_OscConfig+0x334>
 80083de:	e014      	b.n	800840a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083e0:	f7fc ff58 	bl	8005294 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083e6:	e00a      	b.n	80083fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083e8:	f7fc ff54 	bl	8005294 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e0b5      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083fe:	4b3e      	ldr	r3, [pc, #248]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1ee      	bne.n	80083e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d105      	bne.n	800841c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008410:	4b39      	ldr	r3, [pc, #228]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	4a38      	ldr	r2, [pc, #224]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800841a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	699b      	ldr	r3, [r3, #24]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80a1 	beq.w	8008568 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008426:	4b34      	ldr	r3, [pc, #208]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	f003 030c 	and.w	r3, r3, #12
 800842e:	2b08      	cmp	r3, #8
 8008430:	d05c      	beq.n	80084ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d141      	bne.n	80084be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800843a:	4b31      	ldr	r3, [pc, #196]	; (8008500 <HAL_RCC_OscConfig+0x478>)
 800843c:	2200      	movs	r2, #0
 800843e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008440:	f7fc ff28 	bl	8005294 <HAL_GetTick>
 8008444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008448:	f7fc ff24 	bl	8005294 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e087      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845a:	4b27      	ldr	r3, [pc, #156]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69da      	ldr	r2, [r3, #28]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	019b      	lsls	r3, r3, #6
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	085b      	lsrs	r3, r3, #1
 800847e:	3b01      	subs	r3, #1
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	061b      	lsls	r3, r3, #24
 800848a:	491b      	ldr	r1, [pc, #108]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 800848c:	4313      	orrs	r3, r2
 800848e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008490:	4b1b      	ldr	r3, [pc, #108]	; (8008500 <HAL_RCC_OscConfig+0x478>)
 8008492:	2201      	movs	r2, #1
 8008494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008496:	f7fc fefd 	bl	8005294 <HAL_GetTick>
 800849a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800849c:	e008      	b.n	80084b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800849e:	f7fc fef9 	bl	8005294 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d901      	bls.n	80084b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e05c      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d0f0      	beq.n	800849e <HAL_RCC_OscConfig+0x416>
 80084bc:	e054      	b.n	8008568 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_RCC_OscConfig+0x478>)
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084c4:	f7fc fee6 	bl	8005294 <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084cc:	f7fc fee2 	bl	8005294 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e045      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <HAL_RCC_OscConfig+0x470>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f0      	bne.n	80084cc <HAL_RCC_OscConfig+0x444>
 80084ea:	e03d      	b.n	8008568 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d107      	bne.n	8008504 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e038      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
 80084f8:	40023800 	.word	0x40023800
 80084fc:	40007000 	.word	0x40007000
 8008500:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008504:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <HAL_RCC_OscConfig+0x4ec>)
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d028      	beq.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800851c:	429a      	cmp	r2, r3
 800851e:	d121      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800852a:	429a      	cmp	r2, r3
 800852c:	d11a      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008534:	4013      	ands	r3, r2
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800853a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800853c:	4293      	cmp	r3, r2
 800853e:	d111      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854a:	085b      	lsrs	r3, r3, #1
 800854c:	3b01      	subs	r3, #1
 800854e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008550:	429a      	cmp	r2, r3
 8008552:	d107      	bne.n	8008564 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008560:	429a      	cmp	r2, r3
 8008562:	d001      	beq.n	8008568 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800

08008578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e0cc      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800858c:	4b68      	ldr	r3, [pc, #416]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d90c      	bls.n	80085b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859a:	4b65      	ldr	r3, [pc, #404]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a2:	4b63      	ldr	r3, [pc, #396]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e0b8      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d020      	beq.n	8008602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085cc:	4b59      	ldr	r3, [pc, #356]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4a58      	ldr	r2, [pc, #352]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80085d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085e4:	4b53      	ldr	r3, [pc, #332]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a52      	ldr	r2, [pc, #328]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80085ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085f0:	4b50      	ldr	r3, [pc, #320]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	494d      	ldr	r1, [pc, #308]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d044      	beq.n	8008698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b01      	cmp	r3, #1
 8008614:	d107      	bne.n	8008626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008616:	4b47      	ldr	r3, [pc, #284]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d119      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e07f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d003      	beq.n	8008636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008632:	2b03      	cmp	r3, #3
 8008634:	d107      	bne.n	8008646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008636:	4b3f      	ldr	r3, [pc, #252]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d109      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e06f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008646:	4b3b      	ldr	r3, [pc, #236]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e067      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008656:	4b37      	ldr	r3, [pc, #220]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f023 0203 	bic.w	r2, r3, #3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	4934      	ldr	r1, [pc, #208]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008664:	4313      	orrs	r3, r2
 8008666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008668:	f7fc fe14 	bl	8005294 <HAL_GetTick>
 800866c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800866e:	e00a      	b.n	8008686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008670:	f7fc fe10 	bl	8005294 <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	f241 3288 	movw	r2, #5000	; 0x1388
 800867e:	4293      	cmp	r3, r2
 8008680:	d901      	bls.n	8008686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e04f      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008686:	4b2b      	ldr	r3, [pc, #172]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 020c 	and.w	r2, r3, #12
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	429a      	cmp	r2, r3
 8008696:	d1eb      	bne.n	8008670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008698:	4b25      	ldr	r3, [pc, #148]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d20c      	bcs.n	80086c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086a6:	4b22      	ldr	r3, [pc, #136]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	b2d2      	uxtb	r2, r2
 80086ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	4b20      	ldr	r3, [pc, #128]	; (8008730 <HAL_RCC_ClockConfig+0x1b8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e032      	b.n	8008726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0304 	and.w	r3, r3, #4
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d008      	beq.n	80086de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086cc:	4b19      	ldr	r3, [pc, #100]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4916      	ldr	r1, [pc, #88]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086ea:	4b12      	ldr	r3, [pc, #72]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	00db      	lsls	r3, r3, #3
 80086f8:	490e      	ldr	r1, [pc, #56]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086fe:	f000 f821 	bl	8008744 <HAL_RCC_GetSysClockFreq>
 8008702:	4602      	mov	r2, r0
 8008704:	4b0b      	ldr	r3, [pc, #44]	; (8008734 <HAL_RCC_ClockConfig+0x1bc>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	091b      	lsrs	r3, r3, #4
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	490a      	ldr	r1, [pc, #40]	; (8008738 <HAL_RCC_ClockConfig+0x1c0>)
 8008710:	5ccb      	ldrb	r3, [r1, r3]
 8008712:	fa22 f303 	lsr.w	r3, r2, r3
 8008716:	4a09      	ldr	r2, [pc, #36]	; (800873c <HAL_RCC_ClockConfig+0x1c4>)
 8008718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <HAL_RCC_ClockConfig+0x1c8>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7fc fd74 	bl	800520c <HAL_InitTick>

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	40023c00 	.word	0x40023c00
 8008734:	40023800 	.word	0x40023800
 8008738:	0800c360 	.word	0x0800c360
 800873c:	200003c8 	.word	0x200003c8
 8008740:	200003cc 	.word	0x200003cc

08008744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008748:	b090      	sub	sp, #64	; 0x40
 800874a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800874c:	2300      	movs	r3, #0
 800874e:	637b      	str	r3, [r7, #52]	; 0x34
 8008750:	2300      	movs	r3, #0
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008754:	2300      	movs	r3, #0
 8008756:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800875c:	4b59      	ldr	r3, [pc, #356]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	f003 030c 	and.w	r3, r3, #12
 8008764:	2b08      	cmp	r3, #8
 8008766:	d00d      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0x40>
 8008768:	2b08      	cmp	r3, #8
 800876a:	f200 80a1 	bhi.w	80088b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_RCC_GetSysClockFreq+0x34>
 8008772:	2b04      	cmp	r3, #4
 8008774:	d003      	beq.n	800877e <HAL_RCC_GetSysClockFreq+0x3a>
 8008776:	e09b      	b.n	80088b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008778:	4b53      	ldr	r3, [pc, #332]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800877a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800877c:	e09b      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800877e:	4b53      	ldr	r3, [pc, #332]	; (80088cc <HAL_RCC_GetSysClockFreq+0x188>)
 8008780:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008782:	e098      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008784:	4b4f      	ldr	r3, [pc, #316]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800878e:	4b4d      	ldr	r3, [pc, #308]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d028      	beq.n	80087ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800879a:	4b4a      	ldr	r3, [pc, #296]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	099b      	lsrs	r3, r3, #6
 80087a0:	2200      	movs	r2, #0
 80087a2:	623b      	str	r3, [r7, #32]
 80087a4:	627a      	str	r2, [r7, #36]	; 0x24
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80087ac:	2100      	movs	r1, #0
 80087ae:	4b47      	ldr	r3, [pc, #284]	; (80088cc <HAL_RCC_GetSysClockFreq+0x188>)
 80087b0:	fb03 f201 	mul.w	r2, r3, r1
 80087b4:	2300      	movs	r3, #0
 80087b6:	fb00 f303 	mul.w	r3, r0, r3
 80087ba:	4413      	add	r3, r2
 80087bc:	4a43      	ldr	r2, [pc, #268]	; (80088cc <HAL_RCC_GetSysClockFreq+0x188>)
 80087be:	fba0 1202 	umull	r1, r2, r0, r2
 80087c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c4:	460a      	mov	r2, r1
 80087c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80087c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087ca:	4413      	add	r3, r2
 80087cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d0:	2200      	movs	r2, #0
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	61fa      	str	r2, [r7, #28]
 80087d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087de:	f7f8 f839 	bl	8000854 <__aeabi_uldivmod>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4613      	mov	r3, r2
 80087e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087ea:	e053      	b.n	8008894 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087ec:	4b35      	ldr	r3, [pc, #212]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	099b      	lsrs	r3, r3, #6
 80087f2:	2200      	movs	r2, #0
 80087f4:	613b      	str	r3, [r7, #16]
 80087f6:	617a      	str	r2, [r7, #20]
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80087fe:	f04f 0b00 	mov.w	fp, #0
 8008802:	4652      	mov	r2, sl
 8008804:	465b      	mov	r3, fp
 8008806:	f04f 0000 	mov.w	r0, #0
 800880a:	f04f 0100 	mov.w	r1, #0
 800880e:	0159      	lsls	r1, r3, #5
 8008810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008814:	0150      	lsls	r0, r2, #5
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	ebb2 080a 	subs.w	r8, r2, sl
 800881e:	eb63 090b 	sbc.w	r9, r3, fp
 8008822:	f04f 0200 	mov.w	r2, #0
 8008826:	f04f 0300 	mov.w	r3, #0
 800882a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800882e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008832:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008836:	ebb2 0408 	subs.w	r4, r2, r8
 800883a:	eb63 0509 	sbc.w	r5, r3, r9
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	00eb      	lsls	r3, r5, #3
 8008848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800884c:	00e2      	lsls	r2, r4, #3
 800884e:	4614      	mov	r4, r2
 8008850:	461d      	mov	r5, r3
 8008852:	eb14 030a 	adds.w	r3, r4, sl
 8008856:	603b      	str	r3, [r7, #0]
 8008858:	eb45 030b 	adc.w	r3, r5, fp
 800885c:	607b      	str	r3, [r7, #4]
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	f04f 0300 	mov.w	r3, #0
 8008866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800886a:	4629      	mov	r1, r5
 800886c:	028b      	lsls	r3, r1, #10
 800886e:	4621      	mov	r1, r4
 8008870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008874:	4621      	mov	r1, r4
 8008876:	028a      	lsls	r2, r1, #10
 8008878:	4610      	mov	r0, r2
 800887a:	4619      	mov	r1, r3
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	2200      	movs	r2, #0
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	60fa      	str	r2, [r7, #12]
 8008884:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008888:	f7f7 ffe4 	bl	8000854 <__aeabi_uldivmod>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4613      	mov	r3, r2
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008894:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	0c1b      	lsrs	r3, r3, #16
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	3301      	adds	r3, #1
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80088a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088ae:	e002      	b.n	80088b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088b0:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80088b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80088b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3740      	adds	r7, #64	; 0x40
 80088bc:	46bd      	mov	sp, r7
 80088be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088c2:	bf00      	nop
 80088c4:	40023800 	.word	0x40023800
 80088c8:	00f42400 	.word	0x00f42400
 80088cc:	017d7840 	.word	0x017d7840

080088d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088d4:	4b03      	ldr	r3, [pc, #12]	; (80088e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80088d6:	681b      	ldr	r3, [r3, #0]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	200003c8 	.word	0x200003c8

080088e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80088ec:	f7ff fff0 	bl	80088d0 <HAL_RCC_GetHCLKFreq>
 80088f0:	4602      	mov	r2, r0
 80088f2:	4b05      	ldr	r3, [pc, #20]	; (8008908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	0a9b      	lsrs	r3, r3, #10
 80088f8:	f003 0307 	and.w	r3, r3, #7
 80088fc:	4903      	ldr	r1, [pc, #12]	; (800890c <HAL_RCC_GetPCLK1Freq+0x24>)
 80088fe:	5ccb      	ldrb	r3, [r1, r3]
 8008900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008904:	4618      	mov	r0, r3
 8008906:	bd80      	pop	{r7, pc}
 8008908:	40023800 	.word	0x40023800
 800890c:	0800c370 	.word	0x0800c370

08008910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008914:	f7ff ffdc 	bl	80088d0 <HAL_RCC_GetHCLKFreq>
 8008918:	4602      	mov	r2, r0
 800891a:	4b05      	ldr	r3, [pc, #20]	; (8008930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	0b5b      	lsrs	r3, r3, #13
 8008920:	f003 0307 	and.w	r3, r3, #7
 8008924:	4903      	ldr	r1, [pc, #12]	; (8008934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008926:	5ccb      	ldrb	r3, [r1, r3]
 8008928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800892c:	4618      	mov	r0, r3
 800892e:	bd80      	pop	{r7, pc}
 8008930:	40023800 	.word	0x40023800
 8008934:	0800c370 	.word	0x0800c370

08008938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e07b      	b.n	8008a42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b00      	cmp	r3, #0
 8008950:	d108      	bne.n	8008964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800895a:	d009      	beq.n	8008970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	61da      	str	r2, [r3, #28]
 8008962:	e005      	b.n	8008970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fc f9c4 	bl	8004d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2202      	movs	r2, #2
 8008994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089b8:	431a      	orrs	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c2:	431a      	orrs	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	431a      	orrs	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f4:	ea42 0103 	orr.w	r1, r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	0c1b      	lsrs	r3, r3, #16
 8008a0e:	f003 0104 	and.w	r1, r3, #4
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	f003 0210 	and.w	r2, r3, #16
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69da      	ldr	r2, [r3, #28]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b088      	sub	sp, #32
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	603b      	str	r3, [r7, #0]
 8008a56:	4613      	mov	r3, r2
 8008a58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d101      	bne.n	8008a6c <HAL_SPI_Transmit+0x22>
 8008a68:	2302      	movs	r3, #2
 8008a6a:	e126      	b.n	8008cba <HAL_SPI_Transmit+0x270>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a74:	f7fc fc0e 	bl	8005294 <HAL_GetTick>
 8008a78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a7a:	88fb      	ldrh	r3, [r7, #6]
 8008a7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d002      	beq.n	8008a90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a8e:	e10b      	b.n	8008ca8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d002      	beq.n	8008a9c <HAL_SPI_Transmit+0x52>
 8008a96:	88fb      	ldrh	r3, [r7, #6]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aa0:	e102      	b.n	8008ca8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	88fa      	ldrh	r2, [r7, #6]
 8008aba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	88fa      	ldrh	r2, [r7, #6]
 8008ac0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ae8:	d10f      	bne.n	8008b0a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b40      	cmp	r3, #64	; 0x40
 8008b16:	d007      	beq.n	8008b28 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b30:	d14b      	bne.n	8008bca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_SPI_Transmit+0xf6>
 8008b3a:	8afb      	ldrh	r3, [r7, #22]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d13e      	bne.n	8008bbe <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b44:	881a      	ldrh	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b50:	1c9a      	adds	r2, r3, #2
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b64:	e02b      	b.n	8008bbe <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f003 0302 	and.w	r3, r3, #2
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d112      	bne.n	8008b9a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b84:	1c9a      	adds	r2, r3, #2
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	3b01      	subs	r3, #1
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b98:	e011      	b.n	8008bbe <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b9a:	f7fc fb7b 	bl	8005294 <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d803      	bhi.n	8008bb2 <HAL_SPI_Transmit+0x168>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb0:	d102      	bne.n	8008bb8 <HAL_SPI_Transmit+0x16e>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d102      	bne.n	8008bbe <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008bbc:	e074      	b.n	8008ca8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1ce      	bne.n	8008b66 <HAL_SPI_Transmit+0x11c>
 8008bc8:	e04c      	b.n	8008c64 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_SPI_Transmit+0x18e>
 8008bd2:	8afb      	ldrh	r3, [r7, #22]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d140      	bne.n	8008c5a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	330c      	adds	r3, #12
 8008be2:	7812      	ldrb	r2, [r2, #0]
 8008be4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008bfe:	e02c      	b.n	8008c5a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f003 0302 	and.w	r3, r3, #2
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d113      	bne.n	8008c36 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	330c      	adds	r3, #12
 8008c18:	7812      	ldrb	r2, [r2, #0]
 8008c1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	86da      	strh	r2, [r3, #54]	; 0x36
 8008c34:	e011      	b.n	8008c5a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c36:	f7fc fb2d 	bl	8005294 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	683a      	ldr	r2, [r7, #0]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d803      	bhi.n	8008c4e <HAL_SPI_Transmit+0x204>
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d102      	bne.n	8008c54 <HAL_SPI_Transmit+0x20a>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d102      	bne.n	8008c5a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c58:	e026      	b.n	8008ca8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1cd      	bne.n	8008c00 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f000 fbcb 	bl	8009404 <SPI_EndRxTxTransaction>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2220      	movs	r2, #32
 8008c78:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	613b      	str	r3, [r7, #16]
 8008c96:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e000      	b.n	8008ca8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008ca6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3720      	adds	r7, #32
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b088      	sub	sp, #32
 8008cc6:	af02      	add	r7, sp, #8
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	603b      	str	r3, [r7, #0]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cde:	d112      	bne.n	8008d06 <HAL_SPI_Receive+0x44>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10e      	bne.n	8008d06 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2204      	movs	r2, #4
 8008cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008cf0:	88fa      	ldrh	r2, [r7, #6]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	68b9      	ldr	r1, [r7, #8]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 f8f1 	bl	8008ee4 <HAL_SPI_TransmitReceive>
 8008d02:	4603      	mov	r3, r0
 8008d04:	e0ea      	b.n	8008edc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	d101      	bne.n	8008d14 <HAL_SPI_Receive+0x52>
 8008d10:	2302      	movs	r3, #2
 8008d12:	e0e3      	b.n	8008edc <HAL_SPI_Receive+0x21a>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d1c:	f7fc faba 	bl	8005294 <HAL_GetTick>
 8008d20:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d002      	beq.n	8008d34 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008d2e:	2302      	movs	r3, #2
 8008d30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d32:	e0ca      	b.n	8008eca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_SPI_Receive+0x7e>
 8008d3a:	88fb      	ldrh	r3, [r7, #6]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008d44:	e0c1      	b.n	8008eca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2204      	movs	r2, #4
 8008d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	88fa      	ldrh	r2, [r7, #6]
 8008d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	88fa      	ldrh	r2, [r7, #6]
 8008d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d8c:	d10f      	bne.n	8008dae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008dac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db8:	2b40      	cmp	r3, #64	; 0x40
 8008dba:	d007      	beq.n	8008dcc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d162      	bne.n	8008e9a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008dd4:	e02e      	b.n	8008e34 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d115      	bne.n	8008e10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f103 020c 	add.w	r2, r3, #12
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfa:	1c5a      	adds	r2, r3, #1
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e0e:	e011      	b.n	8008e34 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e10:	f7fc fa40 	bl	8005294 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d803      	bhi.n	8008e28 <HAL_SPI_Receive+0x166>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d102      	bne.n	8008e2e <HAL_SPI_Receive+0x16c>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e32:	e04a      	b.n	8008eca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1cb      	bne.n	8008dd6 <HAL_SPI_Receive+0x114>
 8008e3e:	e031      	b.n	8008ea4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d113      	bne.n	8008e76 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	b292      	uxth	r2, r2
 8008e5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	1c9a      	adds	r2, r3, #2
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e74:	e011      	b.n	8008e9a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e76:	f7fc fa0d 	bl	8005294 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d803      	bhi.n	8008e8e <HAL_SPI_Receive+0x1cc>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d102      	bne.n	8008e94 <HAL_SPI_Receive+0x1d2>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008e98:	e017      	b.n	8008eca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1cd      	bne.n	8008e40 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fa45 	bl	8009338 <SPI_EndRxTransaction>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
 8008ec6:	e000      	b.n	8008eca <HAL_SPI_Receive+0x208>
  }

error :
 8008ec8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b08c      	sub	sp, #48	; 0x30
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_SPI_TransmitReceive+0x26>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e18a      	b.n	8009220 <HAL_SPI_TransmitReceive+0x33c>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f12:	f7fc f9bf 	bl	8005294 <HAL_GetTick>
 8008f16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008f28:	887b      	ldrh	r3, [r7, #2]
 8008f2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d00f      	beq.n	8008f54 <HAL_SPI_TransmitReceive+0x70>
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f3a:	d107      	bne.n	8008f4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <HAL_SPI_TransmitReceive+0x68>
 8008f44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d003      	beq.n	8008f54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f52:	e15b      	b.n	800920c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <HAL_SPI_TransmitReceive+0x82>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_TransmitReceive+0x82>
 8008f60:	887b      	ldrh	r3, [r7, #2]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d103      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008f6c:	e14e      	b.n	800920c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d003      	beq.n	8008f82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2205      	movs	r2, #5
 8008f7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	887a      	ldrh	r2, [r7, #2]
 8008f92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	887a      	ldrh	r2, [r7, #2]
 8008f98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	887a      	ldrh	r2, [r7, #2]
 8008fa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	887a      	ldrh	r2, [r7, #2]
 8008faa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc2:	2b40      	cmp	r3, #64	; 0x40
 8008fc4:	d007      	beq.n	8008fd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fde:	d178      	bne.n	80090d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <HAL_SPI_TransmitReceive+0x10a>
 8008fe8:	8b7b      	ldrh	r3, [r7, #26]
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d166      	bne.n	80090bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	881a      	ldrh	r2, [r3, #0]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	1c9a      	adds	r2, r3, #2
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009012:	e053      	b.n	80090bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f003 0302 	and.w	r3, r3, #2
 800901e:	2b02      	cmp	r3, #2
 8009020:	d11b      	bne.n	800905a <HAL_SPI_TransmitReceive+0x176>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d016      	beq.n	800905a <HAL_SPI_TransmitReceive+0x176>
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	2b01      	cmp	r3, #1
 8009030:	d113      	bne.n	800905a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009036:	881a      	ldrh	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009042:	1c9a      	adds	r2, r3, #2
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800904c:	b29b      	uxth	r3, r3
 800904e:	3b01      	subs	r3, #1
 8009050:	b29a      	uxth	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	689b      	ldr	r3, [r3, #8]
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b01      	cmp	r3, #1
 8009066:	d119      	bne.n	800909c <HAL_SPI_TransmitReceive+0x1b8>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d014      	beq.n	800909c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907c:	b292      	uxth	r2, r2
 800907e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	1c9a      	adds	r2, r3, #2
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009098:	2301      	movs	r3, #1
 800909a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800909c:	f7fc f8fa 	bl	8005294 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d807      	bhi.n	80090bc <HAL_SPI_TransmitReceive+0x1d8>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	d003      	beq.n	80090bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80090ba:	e0a7      	b.n	800920c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1a6      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x130>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1a1      	bne.n	8009014 <HAL_SPI_TransmitReceive+0x130>
 80090d0:	e07c      	b.n	80091cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d002      	beq.n	80090e0 <HAL_SPI_TransmitReceive+0x1fc>
 80090da:	8b7b      	ldrh	r3, [r7, #26]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d16b      	bne.n	80091b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	330c      	adds	r3, #12
 80090ea:	7812      	ldrb	r2, [r2, #0]
 80090ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f2:	1c5a      	adds	r2, r3, #1
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	3b01      	subs	r3, #1
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009106:	e057      	b.n	80091b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b02      	cmp	r3, #2
 8009114:	d11c      	bne.n	8009150 <HAL_SPI_TransmitReceive+0x26c>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d017      	beq.n	8009150 <HAL_SPI_TransmitReceive+0x26c>
 8009120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009122:	2b01      	cmp	r3, #1
 8009124:	d114      	bne.n	8009150 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	330c      	adds	r3, #12
 8009130:	7812      	ldrb	r2, [r2, #0]
 8009132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009142:	b29b      	uxth	r3, r3
 8009144:	3b01      	subs	r3, #1
 8009146:	b29a      	uxth	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b01      	cmp	r3, #1
 800915c:	d119      	bne.n	8009192 <HAL_SPI_TransmitReceive+0x2ae>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009162:	b29b      	uxth	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d014      	beq.n	8009192 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009172:	b2d2      	uxtb	r2, r2
 8009174:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800918e:	2301      	movs	r3, #1
 8009190:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009192:	f7fc f87f 	bl	8005294 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800919e:	429a      	cmp	r2, r3
 80091a0:	d803      	bhi.n	80091aa <HAL_SPI_TransmitReceive+0x2c6>
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a8:	d102      	bne.n	80091b0 <HAL_SPI_TransmitReceive+0x2cc>
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d103      	bne.n	80091b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091b6:	e029      	b.n	800920c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1a2      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x224>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d19d      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 f917 	bl	8009404 <SPI_EndRxTxTransaction>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d006      	beq.n	80091ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2220      	movs	r2, #32
 80091e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80091e8:	e010      	b.n	800920c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10b      	bne.n	800920a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	e000      	b.n	800920c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800920a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800921c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009220:	4618      	mov	r0, r3
 8009222:	3730      	adds	r7, #48	; 0x30
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009238:	f7fc f82c 	bl	8005294 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4413      	add	r3, r2
 8009246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009248:	f7fc f824 	bl	8005294 <HAL_GetTick>
 800924c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800924e:	4b39      	ldr	r3, [pc, #228]	; (8009334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	015b      	lsls	r3, r3, #5
 8009254:	0d1b      	lsrs	r3, r3, #20
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800925e:	e054      	b.n	800930a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009266:	d050      	beq.n	800930a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009268:	f7fc f814 	bl	8005294 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d902      	bls.n	800927e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d13d      	bne.n	80092fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800928c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009296:	d111      	bne.n	80092bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a0:	d004      	beq.n	80092ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092aa:	d107      	bne.n	80092bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c4:	d10f      	bne.n	80092e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e017      	b.n	800932a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	3b01      	subs	r3, #1
 8009308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4013      	ands	r3, r2
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	bf0c      	ite	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	2300      	movne	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	461a      	mov	r2, r3
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	429a      	cmp	r2, r3
 8009326:	d19b      	bne.n	8009260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200003c8 	.word	0x200003c8

08009338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af02      	add	r7, sp, #8
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800934c:	d111      	bne.n	8009372 <SPI_EndRxTransaction+0x3a>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009356:	d004      	beq.n	8009362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009360:	d107      	bne.n	8009372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009370:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800937a:	d12a      	bne.n	80093d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009384:	d012      	beq.n	80093ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2200      	movs	r2, #0
 800938e:	2180      	movs	r1, #128	; 0x80
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f7ff ff49 	bl	8009228 <SPI_WaitFlagStateUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d02d      	beq.n	80093f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a0:	f043 0220 	orr.w	r2, r3, #32
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e026      	b.n	80093fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	2101      	movs	r1, #1
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff ff36 	bl	8009228 <SPI_WaitFlagStateUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d01a      	beq.n	80093f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	f043 0220 	orr.w	r2, r3, #32
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e013      	b.n	80093fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2200      	movs	r2, #0
 80093da:	2101      	movs	r1, #1
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff ff23 	bl	8009228 <SPI_WaitFlagStateUntilTimeout>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d007      	beq.n	80093f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ec:	f043 0220 	orr.w	r2, r3, #32
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e000      	b.n	80093fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af02      	add	r7, sp, #8
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <SPI_EndRxTxTransaction+0x7c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a1b      	ldr	r2, [pc, #108]	; (8009484 <SPI_EndRxTxTransaction+0x80>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	0d5b      	lsrs	r3, r3, #21
 800941c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009420:	fb02 f303 	mul.w	r3, r2, r3
 8009424:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800942e:	d112      	bne.n	8009456 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	9300      	str	r3, [sp, #0]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2200      	movs	r2, #0
 8009438:	2180      	movs	r1, #128	; 0x80
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f7ff fef4 	bl	8009228 <SPI_WaitFlagStateUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d016      	beq.n	8009474 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	f043 0220 	orr.w	r2, r3, #32
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e00f      	b.n	8009476 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00a      	beq.n	8009472 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	3b01      	subs	r3, #1
 8009460:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946c:	2b80      	cmp	r3, #128	; 0x80
 800946e:	d0f2      	beq.n	8009456 <SPI_EndRxTxTransaction+0x52>
 8009470:	e000      	b.n	8009474 <SPI_EndRxTxTransaction+0x70>
        break;
 8009472:	bf00      	nop
  }

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200003c8 	.word	0x200003c8
 8009484:	165e9f81 	.word	0x165e9f81

08009488 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e041      	b.n	800951e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7fb fd2c 	bl	8004f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2202      	movs	r2, #2
 80094b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3304      	adds	r3, #4
 80094c4:	4619      	mov	r1, r3
 80094c6:	4610      	mov	r0, r2
 80094c8:	f000 fd54 	bl	8009f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009536:	b2db      	uxtb	r3, r3
 8009538:	2b01      	cmp	r3, #1
 800953a:	d001      	beq.n	8009540 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e03c      	b.n	80095ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2202      	movs	r2, #2
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1e      	ldr	r2, [pc, #120]	; (80095c8 <HAL_TIM_Base_Start+0xa0>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d018      	beq.n	8009584 <HAL_TIM_Base_Start+0x5c>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955a:	d013      	beq.n	8009584 <HAL_TIM_Base_Start+0x5c>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <HAL_TIM_Base_Start+0xa4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00e      	beq.n	8009584 <HAL_TIM_Base_Start+0x5c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a19      	ldr	r2, [pc, #100]	; (80095d0 <HAL_TIM_Base_Start+0xa8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d009      	beq.n	8009584 <HAL_TIM_Base_Start+0x5c>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a17      	ldr	r2, [pc, #92]	; (80095d4 <HAL_TIM_Base_Start+0xac>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <HAL_TIM_Base_Start+0x5c>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a16      	ldr	r2, [pc, #88]	; (80095d8 <HAL_TIM_Base_Start+0xb0>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d111      	bne.n	80095a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f003 0307 	and.w	r3, r3, #7
 800958e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b06      	cmp	r3, #6
 8009594:	d010      	beq.n	80095b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0201 	orr.w	r2, r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095a6:	e007      	b.n	80095b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f042 0201 	orr.w	r2, r2, #1
 80095b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3714      	adds	r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40000400 	.word	0x40000400
 80095d0:	40000800 	.word	0x40000800
 80095d4:	40000c00 	.word	0x40000c00
 80095d8:	40014000 	.word	0x40014000

080095dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d001      	beq.n	80095f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e044      	b.n	800967e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0201 	orr.w	r2, r2, #1
 800960a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1e      	ldr	r2, [pc, #120]	; (800968c <HAL_TIM_Base_Start_IT+0xb0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d018      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x6c>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961e:	d013      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x6c>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1a      	ldr	r2, [pc, #104]	; (8009690 <HAL_TIM_Base_Start_IT+0xb4>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00e      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x6c>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a19      	ldr	r2, [pc, #100]	; (8009694 <HAL_TIM_Base_Start_IT+0xb8>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d009      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x6c>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a17      	ldr	r2, [pc, #92]	; (8009698 <HAL_TIM_Base_Start_IT+0xbc>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d004      	beq.n	8009648 <HAL_TIM_Base_Start_IT+0x6c>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a16      	ldr	r2, [pc, #88]	; (800969c <HAL_TIM_Base_Start_IT+0xc0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d111      	bne.n	800966c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b06      	cmp	r3, #6
 8009658:	d010      	beq.n	800967c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0201 	orr.w	r2, r2, #1
 8009668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800966a:	e007      	b.n	800967c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0201 	orr.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	40010000 	.word	0x40010000
 8009690:	40000400 	.word	0x40000400
 8009694:	40000800 	.word	0x40000800
 8009698:	40000c00 	.word	0x40000c00
 800969c:	40014000 	.word	0x40014000

080096a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e041      	b.n	8009736 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f839 	bl	800973e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	3304      	adds	r3, #4
 80096dc:	4619      	mov	r1, r3
 80096de:	4610      	mov	r0, r2
 80096e0:	f000 fc48 	bl	8009f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
	...

08009754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <HAL_TIM_PWM_Start+0x24>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b01      	cmp	r3, #1
 800976e:	bf14      	ite	ne
 8009770:	2301      	movne	r3, #1
 8009772:	2300      	moveq	r3, #0
 8009774:	b2db      	uxtb	r3, r3
 8009776:	e022      	b.n	80097be <HAL_TIM_PWM_Start+0x6a>
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b04      	cmp	r3, #4
 800977c:	d109      	bne.n	8009792 <HAL_TIM_PWM_Start+0x3e>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b01      	cmp	r3, #1
 8009788:	bf14      	ite	ne
 800978a:	2301      	movne	r3, #1
 800978c:	2300      	moveq	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	e015      	b.n	80097be <HAL_TIM_PWM_Start+0x6a>
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	2b08      	cmp	r3, #8
 8009796:	d109      	bne.n	80097ac <HAL_TIM_PWM_Start+0x58>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	bf14      	ite	ne
 80097a4:	2301      	movne	r3, #1
 80097a6:	2300      	moveq	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	e008      	b.n	80097be <HAL_TIM_PWM_Start+0x6a>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	bf14      	ite	ne
 80097b8:	2301      	movne	r3, #1
 80097ba:	2300      	moveq	r3, #0
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e068      	b.n	8009898 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <HAL_TIM_PWM_Start+0x82>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097d4:	e013      	b.n	80097fe <HAL_TIM_PWM_Start+0xaa>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b04      	cmp	r3, #4
 80097da:	d104      	bne.n	80097e6 <HAL_TIM_PWM_Start+0x92>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e4:	e00b      	b.n	80097fe <HAL_TIM_PWM_Start+0xaa>
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b08      	cmp	r3, #8
 80097ea:	d104      	bne.n	80097f6 <HAL_TIM_PWM_Start+0xa2>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f4:	e003      	b.n	80097fe <HAL_TIM_PWM_Start+0xaa>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2202      	movs	r2, #2
 80097fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2201      	movs	r2, #1
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fe5a 	bl	800a4c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a23      	ldr	r2, [pc, #140]	; (80098a0 <HAL_TIM_PWM_Start+0x14c>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d107      	bne.n	8009826 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a1d      	ldr	r2, [pc, #116]	; (80098a0 <HAL_TIM_PWM_Start+0x14c>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d018      	beq.n	8009862 <HAL_TIM_PWM_Start+0x10e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009838:	d013      	beq.n	8009862 <HAL_TIM_PWM_Start+0x10e>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <HAL_TIM_PWM_Start+0x150>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00e      	beq.n	8009862 <HAL_TIM_PWM_Start+0x10e>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <HAL_TIM_PWM_Start+0x154>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d009      	beq.n	8009862 <HAL_TIM_PWM_Start+0x10e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a16      	ldr	r2, [pc, #88]	; (80098ac <HAL_TIM_PWM_Start+0x158>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d004      	beq.n	8009862 <HAL_TIM_PWM_Start+0x10e>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a14      	ldr	r2, [pc, #80]	; (80098b0 <HAL_TIM_PWM_Start+0x15c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d111      	bne.n	8009886 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b06      	cmp	r3, #6
 8009872:	d010      	beq.n	8009896 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009884:	e007      	b.n	8009896 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f042 0201 	orr.w	r2, r2, #1
 8009894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40010000 	.word	0x40010000
 80098a4:	40000400 	.word	0x40000400
 80098a8:	40000800 	.word	0x40000800
 80098ac:	40000c00 	.word	0x40000c00
 80098b0:	40014000 	.word	0x40014000

080098b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e097      	b.n	80099f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7fb fa99 	bl	8004e14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098f8:	f023 0307 	bic.w	r3, r3, #7
 80098fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3304      	adds	r3, #4
 8009906:	4619      	mov	r1, r3
 8009908:	4610      	mov	r0, r2
 800990a:	f000 fb33 	bl	8009f74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	6a1b      	ldr	r3, [r3, #32]
 8009924:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009936:	f023 0303 	bic.w	r3, r3, #3
 800993a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	699b      	ldr	r3, [r3, #24]
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	4313      	orrs	r3, r2
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	4313      	orrs	r3, r2
 800994c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009954:	f023 030c 	bic.w	r3, r3, #12
 8009958:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	68da      	ldr	r2, [r3, #12]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	4313      	orrs	r3, r2
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	011a      	lsls	r2, r3, #4
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	031b      	lsls	r3, r3, #12
 8009984:	4313      	orrs	r3, r2
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800999a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	685a      	ldr	r2, [r3, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	011b      	lsls	r3, r3, #4
 80099a6:	4313      	orrs	r3, r2
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3718      	adds	r7, #24
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d122      	bne.n	8009a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	f003 0302 	and.w	r3, r3, #2
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d11b      	bne.n	8009a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f06f 0202 	mvn.w	r2, #2
 8009a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f003 0303 	and.w	r3, r3, #3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa77 	bl	8009f36 <HAL_TIM_IC_CaptureCallback>
 8009a48:	e005      	b.n	8009a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa69 	bl	8009f22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fa7a 	bl	8009f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691b      	ldr	r3, [r3, #16]
 8009a62:	f003 0304 	and.w	r3, r3, #4
 8009a66:	2b04      	cmp	r3, #4
 8009a68:	d122      	bne.n	8009ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f003 0304 	and.w	r3, r3, #4
 8009a74:	2b04      	cmp	r3, #4
 8009a76:	d11b      	bne.n	8009ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f06f 0204 	mvn.w	r2, #4
 8009a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2202      	movs	r2, #2
 8009a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa4d 	bl	8009f36 <HAL_TIM_IC_CaptureCallback>
 8009a9c:	e005      	b.n	8009aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fa3f 	bl	8009f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fa50 	bl	8009f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0308 	and.w	r3, r3, #8
 8009aba:	2b08      	cmp	r3, #8
 8009abc:	d122      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d11b      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f06f 0208 	mvn.w	r2, #8
 8009ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2204      	movs	r2, #4
 8009ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa23 	bl	8009f36 <HAL_TIM_IC_CaptureCallback>
 8009af0:	e005      	b.n	8009afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fa15 	bl	8009f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fa26 	bl	8009f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0310 	and.w	r3, r3, #16
 8009b0e:	2b10      	cmp	r3, #16
 8009b10:	d122      	bne.n	8009b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f003 0310 	and.w	r3, r3, #16
 8009b1c:	2b10      	cmp	r3, #16
 8009b1e:	d11b      	bne.n	8009b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0210 	mvn.w	r2, #16
 8009b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2208      	movs	r2, #8
 8009b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f9f9 	bl	8009f36 <HAL_TIM_IC_CaptureCallback>
 8009b44:	e005      	b.n	8009b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f9eb 	bl	8009f22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 f9fc 	bl	8009f4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d10e      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f003 0301 	and.w	r3, r3, #1
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d107      	bne.n	8009b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f06f 0201 	mvn.w	r2, #1
 8009b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7f7 fd04 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8e:	2b80      	cmp	r3, #128	; 0x80
 8009b90:	d10e      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d107      	bne.n	8009bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fd26 	bl	800a5fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	d10e      	bne.n	8009bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc8:	2b40      	cmp	r3, #64	; 0x40
 8009bca:	d107      	bne.n	8009bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f9c1 	bl	8009f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	f003 0320 	and.w	r3, r3, #32
 8009be6:	2b20      	cmp	r3, #32
 8009be8:	d10e      	bne.n	8009c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f003 0320 	and.w	r3, r3, #32
 8009bf4:	2b20      	cmp	r3, #32
 8009bf6:	d107      	bne.n	8009c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f06f 0220 	mvn.w	r2, #32
 8009c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fcf0 	bl	800a5e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c08:	bf00      	nop
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e0ae      	b.n	8009d8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b0c      	cmp	r3, #12
 8009c3a:	f200 809f 	bhi.w	8009d7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c79 	.word	0x08009c79
 8009c48:	08009d7d 	.word	0x08009d7d
 8009c4c:	08009d7d 	.word	0x08009d7d
 8009c50:	08009d7d 	.word	0x08009d7d
 8009c54:	08009cb9 	.word	0x08009cb9
 8009c58:	08009d7d 	.word	0x08009d7d
 8009c5c:	08009d7d 	.word	0x08009d7d
 8009c60:	08009d7d 	.word	0x08009d7d
 8009c64:	08009cfb 	.word	0x08009cfb
 8009c68:	08009d7d 	.word	0x08009d7d
 8009c6c:	08009d7d 	.word	0x08009d7d
 8009c70:	08009d7d 	.word	0x08009d7d
 8009c74:	08009d3b 	.word	0x08009d3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68b9      	ldr	r1, [r7, #8]
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 f9f8 	bl	800a074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699a      	ldr	r2, [r3, #24]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f042 0208 	orr.w	r2, r2, #8
 8009c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699a      	ldr	r2, [r3, #24]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0204 	bic.w	r2, r2, #4
 8009ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6999      	ldr	r1, [r3, #24]
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	691a      	ldr	r2, [r3, #16]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	619a      	str	r2, [r3, #24]
      break;
 8009cb6:	e064      	b.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68b9      	ldr	r1, [r7, #8]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 fa3e 	bl	800a140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699a      	ldr	r2, [r3, #24]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699a      	ldr	r2, [r3, #24]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6999      	ldr	r1, [r3, #24]
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	691b      	ldr	r3, [r3, #16]
 8009cee:	021a      	lsls	r2, r3, #8
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	619a      	str	r2, [r3, #24]
      break;
 8009cf8:	e043      	b.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 fa89 	bl	800a218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0208 	orr.w	r2, r2, #8
 8009d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	69da      	ldr	r2, [r3, #28]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0204 	bic.w	r2, r2, #4
 8009d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	69d9      	ldr	r1, [r3, #28]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	691a      	ldr	r2, [r3, #16]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	61da      	str	r2, [r3, #28]
      break;
 8009d38:	e023      	b.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	4618      	mov	r0, r3
 8009d42:	f000 fad3 	bl	800a2ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	69da      	ldr	r2, [r3, #28]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	69d9      	ldr	r1, [r3, #28]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	021a      	lsls	r2, r3, #8
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	61da      	str	r2, [r3, #28]
      break;
 8009d7a:	e002      	b.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_TIM_ConfigClockSource+0x1c>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e0b4      	b.n	8009f1a <HAL_TIM_ConfigClockSource+0x186>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009de8:	d03e      	beq.n	8009e68 <HAL_TIM_ConfigClockSource+0xd4>
 8009dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009dee:	f200 8087 	bhi.w	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009df6:	f000 8086 	beq.w	8009f06 <HAL_TIM_ConfigClockSource+0x172>
 8009dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dfe:	d87f      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e00:	2b70      	cmp	r3, #112	; 0x70
 8009e02:	d01a      	beq.n	8009e3a <HAL_TIM_ConfigClockSource+0xa6>
 8009e04:	2b70      	cmp	r3, #112	; 0x70
 8009e06:	d87b      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e08:	2b60      	cmp	r3, #96	; 0x60
 8009e0a:	d050      	beq.n	8009eae <HAL_TIM_ConfigClockSource+0x11a>
 8009e0c:	2b60      	cmp	r3, #96	; 0x60
 8009e0e:	d877      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e10:	2b50      	cmp	r3, #80	; 0x50
 8009e12:	d03c      	beq.n	8009e8e <HAL_TIM_ConfigClockSource+0xfa>
 8009e14:	2b50      	cmp	r3, #80	; 0x50
 8009e16:	d873      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	d058      	beq.n	8009ece <HAL_TIM_ConfigClockSource+0x13a>
 8009e1c:	2b40      	cmp	r3, #64	; 0x40
 8009e1e:	d86f      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e20:	2b30      	cmp	r3, #48	; 0x30
 8009e22:	d064      	beq.n	8009eee <HAL_TIM_ConfigClockSource+0x15a>
 8009e24:	2b30      	cmp	r3, #48	; 0x30
 8009e26:	d86b      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d060      	beq.n	8009eee <HAL_TIM_ConfigClockSource+0x15a>
 8009e2c:	2b20      	cmp	r3, #32
 8009e2e:	d867      	bhi.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d05c      	beq.n	8009eee <HAL_TIM_ConfigClockSource+0x15a>
 8009e34:	2b10      	cmp	r3, #16
 8009e36:	d05a      	beq.n	8009eee <HAL_TIM_ConfigClockSource+0x15a>
 8009e38:	e062      	b.n	8009f00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6818      	ldr	r0, [r3, #0]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6899      	ldr	r1, [r3, #8]
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f000 fb19 	bl	800a480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009e5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	609a      	str	r2, [r3, #8]
      break;
 8009e66:	e04f      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	6899      	ldr	r1, [r3, #8]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f000 fb02 	bl	800a480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e8a:	609a      	str	r2, [r3, #8]
      break;
 8009e8c:	e03c      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	6859      	ldr	r1, [r3, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f000 fa76 	bl	800a38c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2150      	movs	r1, #80	; 0x50
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 facf 	bl	800a44a <TIM_ITRx_SetConfig>
      break;
 8009eac:	e02c      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	6859      	ldr	r1, [r3, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	f000 fa95 	bl	800a3ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2160      	movs	r1, #96	; 0x60
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fabf 	bl	800a44a <TIM_ITRx_SetConfig>
      break;
 8009ecc:	e01c      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6859      	ldr	r1, [r3, #4]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f000 fa56 	bl	800a38c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2140      	movs	r1, #64	; 0x40
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 faaf 	bl	800a44a <TIM_ITRx_SetConfig>
      break;
 8009eec:	e00c      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f000 faa6 	bl	800a44a <TIM_ITRx_SetConfig>
      break;
 8009efe:	e003      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	73fb      	strb	r3, [r7, #15]
      break;
 8009f04:	e000      	b.n	8009f08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009f06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b083      	sub	sp, #12
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f2a:	bf00      	nop
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f3e:	bf00      	nop
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f52:	bf00      	nop
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f66:	bf00      	nop
 8009f68:	370c      	adds	r7, #12
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
	...

08009f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a34      	ldr	r2, [pc, #208]	; (800a058 <TIM_Base_SetConfig+0xe4>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d00f      	beq.n	8009fac <TIM_Base_SetConfig+0x38>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f92:	d00b      	beq.n	8009fac <TIM_Base_SetConfig+0x38>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a31      	ldr	r2, [pc, #196]	; (800a05c <TIM_Base_SetConfig+0xe8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d007      	beq.n	8009fac <TIM_Base_SetConfig+0x38>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a30      	ldr	r2, [pc, #192]	; (800a060 <TIM_Base_SetConfig+0xec>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d003      	beq.n	8009fac <TIM_Base_SetConfig+0x38>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a2f      	ldr	r2, [pc, #188]	; (800a064 <TIM_Base_SetConfig+0xf0>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d108      	bne.n	8009fbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a25      	ldr	r2, [pc, #148]	; (800a058 <TIM_Base_SetConfig+0xe4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d01b      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fcc:	d017      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a22      	ldr	r2, [pc, #136]	; (800a05c <TIM_Base_SetConfig+0xe8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d013      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a21      	ldr	r2, [pc, #132]	; (800a060 <TIM_Base_SetConfig+0xec>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00f      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a20      	ldr	r2, [pc, #128]	; (800a064 <TIM_Base_SetConfig+0xf0>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00b      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1f      	ldr	r2, [pc, #124]	; (800a068 <TIM_Base_SetConfig+0xf4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d007      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a1e      	ldr	r2, [pc, #120]	; (800a06c <TIM_Base_SetConfig+0xf8>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_Base_SetConfig+0x8a>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a1d      	ldr	r2, [pc, #116]	; (800a070 <TIM_Base_SetConfig+0xfc>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d108      	bne.n	800a010 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a08      	ldr	r2, [pc, #32]	; (800a058 <TIM_Base_SetConfig+0xe4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d103      	bne.n	800a044 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	691a      	ldr	r2, [r3, #16]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	615a      	str	r2, [r3, #20]
}
 800a04a:	bf00      	nop
 800a04c:	3714      	adds	r7, #20
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	40010000 	.word	0x40010000
 800a05c:	40000400 	.word	0x40000400
 800a060:	40000800 	.word	0x40000800
 800a064:	40000c00 	.word	0x40000c00
 800a068:	40014000 	.word	0x40014000
 800a06c:	40014400 	.word	0x40014400
 800a070:	40014800 	.word	0x40014800

0800a074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	f023 0201 	bic.w	r2, r3, #1
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	f023 0302 	bic.w	r3, r3, #2
 800a0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4a1c      	ldr	r2, [pc, #112]	; (800a13c <TIM_OC1_SetConfig+0xc8>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10c      	bne.n	800a0ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f023 0308 	bic.w	r3, r3, #8
 800a0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f023 0304 	bic.w	r3, r3, #4
 800a0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4a13      	ldr	r2, [pc, #76]	; (800a13c <TIM_OC1_SetConfig+0xc8>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d111      	bne.n	800a116 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	4313      	orrs	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	621a      	str	r2, [r3, #32]
}
 800a130:	bf00      	nop
 800a132:	371c      	adds	r7, #28
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	40010000 	.word	0x40010000

0800a140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	f023 0210 	bic.w	r2, r3, #16
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f023 0320 	bic.w	r3, r3, #32
 800a18a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a1e      	ldr	r2, [pc, #120]	; (800a214 <TIM_OC2_SetConfig+0xd4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d10d      	bne.n	800a1bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	011b      	lsls	r3, r3, #4
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a15      	ldr	r2, [pc, #84]	; (800a214 <TIM_OC2_SetConfig+0xd4>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d113      	bne.n	800a1ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	697a      	ldr	r2, [r7, #20]
 800a204:	621a      	str	r2, [r3, #32]
}
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
 800a212:	bf00      	nop
 800a214:	40010000 	.word	0x40010000

0800a218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a218:	b480      	push	{r7}
 800a21a:	b087      	sub	sp, #28
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a1b      	ldr	r3, [r3, #32]
 800a232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 0303 	bic.w	r3, r3, #3
 800a24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	4313      	orrs	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	021b      	lsls	r3, r3, #8
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <TIM_OC3_SetConfig+0xd0>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d10d      	bne.n	800a292 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a27c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	021b      	lsls	r3, r3, #8
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	4313      	orrs	r3, r2
 800a288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <TIM_OC3_SetConfig+0xd0>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d113      	bne.n	800a2c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	011b      	lsls	r3, r3, #4
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	011b      	lsls	r3, r3, #4
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	621a      	str	r2, [r3, #32]
}
 800a2dc:	bf00      	nop
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	40010000 	.word	0x40010000

0800a2ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6a1b      	ldr	r3, [r3, #32]
 800a306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	021b      	lsls	r3, r3, #8
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	031b      	lsls	r3, r3, #12
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	4313      	orrs	r3, r2
 800a342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a10      	ldr	r2, [pc, #64]	; (800a388 <TIM_OC4_SetConfig+0x9c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d109      	bne.n	800a360 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a352:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	019b      	lsls	r3, r3, #6
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685a      	ldr	r2, [r3, #4]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	621a      	str	r2, [r3, #32]
}
 800a37a:	bf00      	nop
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	40010000 	.word	0x40010000

0800a38c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6a1b      	ldr	r3, [r3, #32]
 800a3a2:	f023 0201 	bic.w	r2, r3, #1
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	011b      	lsls	r3, r3, #4
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f023 030a 	bic.w	r3, r3, #10
 800a3c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	621a      	str	r2, [r3, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	371c      	adds	r7, #28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b087      	sub	sp, #28
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	60f8      	str	r0, [r7, #12]
 800a3f2:	60b9      	str	r1, [r7, #8]
 800a3f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	f023 0210 	bic.w	r2, r3, #16
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	699b      	ldr	r3, [r3, #24]
 800a406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	031b      	lsls	r3, r3, #12
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	011b      	lsls	r3, r3, #4
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	4313      	orrs	r3, r2
 800a430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	697a      	ldr	r2, [r7, #20]
 800a436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	4313      	orrs	r3, r2
 800a468:	f043 0307 	orr.w	r3, r3, #7
 800a46c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	609a      	str	r2, [r3, #8]
}
 800a474:	bf00      	nop
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
 800a48c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a49a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	021a      	lsls	r2, r3, #8
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	609a      	str	r2, [r3, #8]
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	f003 031f 	and.w	r3, r3, #31
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a1a      	ldr	r2, [r3, #32]
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	401a      	ands	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6a1a      	ldr	r2, [r3, #32]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f003 031f 	and.w	r3, r3, #31
 800a4f2:	6879      	ldr	r1, [r7, #4]
 800a4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	621a      	str	r2, [r3, #32]
}
 800a4fe:	bf00      	nop
 800a500:	371c      	adds	r7, #28
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
	...

0800a50c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d101      	bne.n	800a524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a520:	2302      	movs	r3, #2
 800a522:	e050      	b.n	800a5c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2202      	movs	r2, #2
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a54a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4313      	orrs	r3, r2
 800a554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a1c      	ldr	r2, [pc, #112]	; (800a5d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d018      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a570:	d013      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a18      	ldr	r2, [pc, #96]	; (800a5d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00e      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a16      	ldr	r2, [pc, #88]	; (800a5dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d009      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a15      	ldr	r2, [pc, #84]	; (800a5e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d004      	beq.n	800a59a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a13      	ldr	r2, [pc, #76]	; (800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d10c      	bne.n	800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	40010000 	.word	0x40010000
 800a5d8:	40000400 	.word	0x40000400
 800a5dc:	40000800 	.word	0x40000800
 800a5e0:	40000c00 	.word	0x40000c00
 800a5e4:	40014000 	.word	0x40014000

0800a5e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5f0:	bf00      	nop
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a61e:	2301      	movs	r3, #1
 800a620:	e047      	b.n	800a6b2 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7fa fcca 	bl	8004fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2224      	movs	r2, #36	; 0x24
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a652:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f931 	bl	800a8bc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691a      	ldr	r2, [r3, #16]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a668:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	695a      	ldr	r2, [r3, #20]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a678:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	695a      	ldr	r2, [r3, #20]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0208 	orr.w	r2, r2, #8
 800a688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b08a      	sub	sp, #40	; 0x28
 800a6be:	af02      	add	r7, sp, #8
 800a6c0:	60f8      	str	r0, [r7, #12]
 800a6c2:	60b9      	str	r1, [r7, #8]
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	d17c      	bne.n	800a7d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <HAL_UART_Transmit+0x2c>
 800a6e0:	88fb      	ldrh	r3, [r7, #6]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e075      	b.n	800a7d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d101      	bne.n	800a6f8 <HAL_UART_Transmit+0x3e>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e06e      	b.n	800a7d6 <HAL_UART_Transmit+0x11c>
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2221      	movs	r2, #33	; 0x21
 800a70a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a70e:	f7fa fdc1 	bl	8005294 <HAL_GetTick>
 800a712:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	88fa      	ldrh	r2, [r7, #6]
 800a71e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a728:	d108      	bne.n	800a73c <HAL_UART_Transmit+0x82>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d104      	bne.n	800a73c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a732:	2300      	movs	r3, #0
 800a734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	61bb      	str	r3, [r7, #24]
 800a73a:	e003      	b.n	800a744 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a740:	2300      	movs	r3, #0
 800a742:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a74c:	e02a      	b.n	800a7a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	2200      	movs	r2, #0
 800a756:	2180      	movs	r1, #128	; 0x80
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 f840 	bl	800a7de <UART_WaitOnFlagUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d001      	beq.n	800a768 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e036      	b.n	800a7d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10b      	bne.n	800a786 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a77c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	3302      	adds	r3, #2
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	e007      	b.n	800a796 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	781a      	ldrb	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	3301      	adds	r3, #1
 800a794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	3b01      	subs	r3, #1
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d1cf      	bne.n	800a74e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2140      	movs	r1, #64	; 0x40
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 f810 	bl	800a7de <UART_WaitOnFlagUntilTimeout>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e006      	b.n	800a7d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	e000      	b.n	800a7d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a7d4:	2302      	movs	r3, #2
  }
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3720      	adds	r7, #32
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b090      	sub	sp, #64	; 0x40
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	60f8      	str	r0, [r7, #12]
 800a7e6:	60b9      	str	r1, [r7, #8]
 800a7e8:	603b      	str	r3, [r7, #0]
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ee:	e050      	b.n	800a892 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f6:	d04c      	beq.n	800a892 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a7f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d007      	beq.n	800a80e <UART_WaitOnFlagUntilTimeout+0x30>
 800a7fe:	f7fa fd49 	bl	8005294 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d241      	bcs.n	800a892 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a824:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	330c      	adds	r3, #12
 800a82c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a82e:	637a      	str	r2, [r7, #52]	; 0x34
 800a830:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e5      	bne.n	800a80e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	3314      	adds	r3, #20
 800a848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	e853 3f00 	ldrex	r3, [r3]
 800a850:	613b      	str	r3, [r7, #16]
   return(result);
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f023 0301 	bic.w	r3, r3, #1
 800a858:	63bb      	str	r3, [r7, #56]	; 0x38
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3314      	adds	r3, #20
 800a860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a862:	623a      	str	r2, [r7, #32]
 800a864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a866:	69f9      	ldr	r1, [r7, #28]
 800a868:	6a3a      	ldr	r2, [r7, #32]
 800a86a:	e841 2300 	strex	r3, r2, [r1]
 800a86e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1e5      	bne.n	800a842 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2220      	movs	r2, #32
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2220      	movs	r2, #32
 800a882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e00f      	b.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	4013      	ands	r3, r2
 800a89c:	68ba      	ldr	r2, [r7, #8]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	bf0c      	ite	eq
 800a8a2:	2301      	moveq	r3, #1
 800a8a4:	2300      	movne	r3, #0
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	79fb      	ldrb	r3, [r7, #7]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d09f      	beq.n	800a7f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3740      	adds	r7, #64	; 0x40
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8c0:	b0c0      	sub	sp, #256	; 0x100
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d8:	68d9      	ldr	r1, [r3, #12]
 800a8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	ea40 0301 	orr.w	r3, r0, r1
 800a8e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	4313      	orrs	r3, r2
 800a904:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a914:	f021 010c 	bic.w	r1, r1, #12
 800a918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a922:	430b      	orrs	r3, r1
 800a924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a936:	6999      	ldr	r1, [r3, #24]
 800a938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	ea40 0301 	orr.w	r3, r0, r1
 800a942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	4b8f      	ldr	r3, [pc, #572]	; (800ab88 <UART_SetConfig+0x2cc>)
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d005      	beq.n	800a95c <UART_SetConfig+0xa0>
 800a950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	4b8d      	ldr	r3, [pc, #564]	; (800ab8c <UART_SetConfig+0x2d0>)
 800a958:	429a      	cmp	r2, r3
 800a95a:	d104      	bne.n	800a966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a95c:	f7fd ffd8 	bl	8008910 <HAL_RCC_GetPCLK2Freq>
 800a960:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a964:	e003      	b.n	800a96e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a966:	f7fd ffbf 	bl	80088e8 <HAL_RCC_GetPCLK1Freq>
 800a96a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a96e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a972:	69db      	ldr	r3, [r3, #28]
 800a974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a978:	f040 810c 	bne.w	800ab94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a97c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a980:	2200      	movs	r2, #0
 800a982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a986:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a98a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a98e:	4622      	mov	r2, r4
 800a990:	462b      	mov	r3, r5
 800a992:	1891      	adds	r1, r2, r2
 800a994:	65b9      	str	r1, [r7, #88]	; 0x58
 800a996:	415b      	adcs	r3, r3
 800a998:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a99a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a99e:	4621      	mov	r1, r4
 800a9a0:	eb12 0801 	adds.w	r8, r2, r1
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	eb43 0901 	adc.w	r9, r3, r1
 800a9aa:	f04f 0200 	mov.w	r2, #0
 800a9ae:	f04f 0300 	mov.w	r3, #0
 800a9b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9be:	4690      	mov	r8, r2
 800a9c0:	4699      	mov	r9, r3
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	eb18 0303 	adds.w	r3, r8, r3
 800a9c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9cc:	462b      	mov	r3, r5
 800a9ce:	eb49 0303 	adc.w	r3, r9, r3
 800a9d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	18db      	adds	r3, r3, r3
 800a9ee:	653b      	str	r3, [r7, #80]	; 0x50
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	eb42 0303 	adc.w	r3, r2, r3
 800a9f6:	657b      	str	r3, [r7, #84]	; 0x54
 800a9f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a9fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa00:	f7f5 ff28 	bl	8000854 <__aeabi_uldivmod>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4b61      	ldr	r3, [pc, #388]	; (800ab90 <UART_SetConfig+0x2d4>)
 800aa0a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa0e:	095b      	lsrs	r3, r3, #5
 800aa10:	011c      	lsls	r4, r3, #4
 800aa12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa16:	2200      	movs	r2, #0
 800aa18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa24:	4642      	mov	r2, r8
 800aa26:	464b      	mov	r3, r9
 800aa28:	1891      	adds	r1, r2, r2
 800aa2a:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa2c:	415b      	adcs	r3, r3
 800aa2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa34:	4641      	mov	r1, r8
 800aa36:	eb12 0a01 	adds.w	sl, r2, r1
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	eb43 0b01 	adc.w	fp, r3, r1
 800aa40:	f04f 0200 	mov.w	r2, #0
 800aa44:	f04f 0300 	mov.w	r3, #0
 800aa48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa54:	4692      	mov	sl, r2
 800aa56:	469b      	mov	fp, r3
 800aa58:	4643      	mov	r3, r8
 800aa5a:	eb1a 0303 	adds.w	r3, sl, r3
 800aa5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa62:	464b      	mov	r3, r9
 800aa64:	eb4b 0303 	adc.w	r3, fp, r3
 800aa68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa80:	460b      	mov	r3, r1
 800aa82:	18db      	adds	r3, r3, r3
 800aa84:	643b      	str	r3, [r7, #64]	; 0x40
 800aa86:	4613      	mov	r3, r2
 800aa88:	eb42 0303 	adc.w	r3, r2, r3
 800aa8c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aa96:	f7f5 fedd 	bl	8000854 <__aeabi_uldivmod>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	4b3b      	ldr	r3, [pc, #236]	; (800ab90 <UART_SetConfig+0x2d4>)
 800aaa2:	fba3 2301 	umull	r2, r3, r3, r1
 800aaa6:	095b      	lsrs	r3, r3, #5
 800aaa8:	2264      	movs	r2, #100	; 0x64
 800aaaa:	fb02 f303 	mul.w	r3, r2, r3
 800aaae:	1acb      	subs	r3, r1, r3
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aab6:	4b36      	ldr	r3, [pc, #216]	; (800ab90 <UART_SetConfig+0x2d4>)
 800aab8:	fba3 2302 	umull	r2, r3, r3, r2
 800aabc:	095b      	lsrs	r3, r3, #5
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aac4:	441c      	add	r4, r3
 800aac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aaca:	2200      	movs	r2, #0
 800aacc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aad0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aad8:	4642      	mov	r2, r8
 800aada:	464b      	mov	r3, r9
 800aadc:	1891      	adds	r1, r2, r2
 800aade:	63b9      	str	r1, [r7, #56]	; 0x38
 800aae0:	415b      	adcs	r3, r3
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aae8:	4641      	mov	r1, r8
 800aaea:	1851      	adds	r1, r2, r1
 800aaec:	6339      	str	r1, [r7, #48]	; 0x30
 800aaee:	4649      	mov	r1, r9
 800aaf0:	414b      	adcs	r3, r1
 800aaf2:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf4:	f04f 0200 	mov.w	r2, #0
 800aaf8:	f04f 0300 	mov.w	r3, #0
 800aafc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab00:	4659      	mov	r1, fp
 800ab02:	00cb      	lsls	r3, r1, #3
 800ab04:	4651      	mov	r1, sl
 800ab06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab0a:	4651      	mov	r1, sl
 800ab0c:	00ca      	lsls	r2, r1, #3
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4619      	mov	r1, r3
 800ab12:	4603      	mov	r3, r0
 800ab14:	4642      	mov	r2, r8
 800ab16:	189b      	adds	r3, r3, r2
 800ab18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	460a      	mov	r2, r1
 800ab20:	eb42 0303 	adc.w	r3, r2, r3
 800ab24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab3c:	460b      	mov	r3, r1
 800ab3e:	18db      	adds	r3, r3, r3
 800ab40:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab42:	4613      	mov	r3, r2
 800ab44:	eb42 0303 	adc.w	r3, r2, r3
 800ab48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab52:	f7f5 fe7f 	bl	8000854 <__aeabi_uldivmod>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	4b0d      	ldr	r3, [pc, #52]	; (800ab90 <UART_SetConfig+0x2d4>)
 800ab5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab60:	095b      	lsrs	r3, r3, #5
 800ab62:	2164      	movs	r1, #100	; 0x64
 800ab64:	fb01 f303 	mul.w	r3, r1, r3
 800ab68:	1ad3      	subs	r3, r2, r3
 800ab6a:	00db      	lsls	r3, r3, #3
 800ab6c:	3332      	adds	r3, #50	; 0x32
 800ab6e:	4a08      	ldr	r2, [pc, #32]	; (800ab90 <UART_SetConfig+0x2d4>)
 800ab70:	fba2 2303 	umull	r2, r3, r2, r3
 800ab74:	095b      	lsrs	r3, r3, #5
 800ab76:	f003 0207 	and.w	r2, r3, #7
 800ab7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4422      	add	r2, r4
 800ab82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab84:	e105      	b.n	800ad92 <UART_SetConfig+0x4d6>
 800ab86:	bf00      	nop
 800ab88:	40011000 	.word	0x40011000
 800ab8c:	40011400 	.word	0x40011400
 800ab90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ab9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aba6:	4642      	mov	r2, r8
 800aba8:	464b      	mov	r3, r9
 800abaa:	1891      	adds	r1, r2, r2
 800abac:	6239      	str	r1, [r7, #32]
 800abae:	415b      	adcs	r3, r3
 800abb0:	627b      	str	r3, [r7, #36]	; 0x24
 800abb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abb6:	4641      	mov	r1, r8
 800abb8:	1854      	adds	r4, r2, r1
 800abba:	4649      	mov	r1, r9
 800abbc:	eb43 0501 	adc.w	r5, r3, r1
 800abc0:	f04f 0200 	mov.w	r2, #0
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	00eb      	lsls	r3, r5, #3
 800abca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abce:	00e2      	lsls	r2, r4, #3
 800abd0:	4614      	mov	r4, r2
 800abd2:	461d      	mov	r5, r3
 800abd4:	4643      	mov	r3, r8
 800abd6:	18e3      	adds	r3, r4, r3
 800abd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abdc:	464b      	mov	r3, r9
 800abde:	eb45 0303 	adc.w	r3, r5, r3
 800abe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abf6:	f04f 0200 	mov.w	r2, #0
 800abfa:	f04f 0300 	mov.w	r3, #0
 800abfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac02:	4629      	mov	r1, r5
 800ac04:	008b      	lsls	r3, r1, #2
 800ac06:	4621      	mov	r1, r4
 800ac08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	008a      	lsls	r2, r1, #2
 800ac10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac14:	f7f5 fe1e 	bl	8000854 <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4b60      	ldr	r3, [pc, #384]	; (800ada0 <UART_SetConfig+0x4e4>)
 800ac1e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac22:	095b      	lsrs	r3, r3, #5
 800ac24:	011c      	lsls	r4, r3, #4
 800ac26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac38:	4642      	mov	r2, r8
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	1891      	adds	r1, r2, r2
 800ac3e:	61b9      	str	r1, [r7, #24]
 800ac40:	415b      	adcs	r3, r3
 800ac42:	61fb      	str	r3, [r7, #28]
 800ac44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac48:	4641      	mov	r1, r8
 800ac4a:	1851      	adds	r1, r2, r1
 800ac4c:	6139      	str	r1, [r7, #16]
 800ac4e:	4649      	mov	r1, r9
 800ac50:	414b      	adcs	r3, r1
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac60:	4659      	mov	r1, fp
 800ac62:	00cb      	lsls	r3, r1, #3
 800ac64:	4651      	mov	r1, sl
 800ac66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac6a:	4651      	mov	r1, sl
 800ac6c:	00ca      	lsls	r2, r1, #3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	4619      	mov	r1, r3
 800ac72:	4603      	mov	r3, r0
 800ac74:	4642      	mov	r2, r8
 800ac76:	189b      	adds	r3, r3, r2
 800ac78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac7c:	464b      	mov	r3, r9
 800ac7e:	460a      	mov	r2, r1
 800ac80:	eb42 0303 	adc.w	r3, r2, r3
 800ac84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac92:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac94:	f04f 0200 	mov.w	r2, #0
 800ac98:	f04f 0300 	mov.w	r3, #0
 800ac9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800aca0:	4649      	mov	r1, r9
 800aca2:	008b      	lsls	r3, r1, #2
 800aca4:	4641      	mov	r1, r8
 800aca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acaa:	4641      	mov	r1, r8
 800acac:	008a      	lsls	r2, r1, #2
 800acae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800acb2:	f7f5 fdcf 	bl	8000854 <__aeabi_uldivmod>
 800acb6:	4602      	mov	r2, r0
 800acb8:	460b      	mov	r3, r1
 800acba:	4b39      	ldr	r3, [pc, #228]	; (800ada0 <UART_SetConfig+0x4e4>)
 800acbc:	fba3 1302 	umull	r1, r3, r3, r2
 800acc0:	095b      	lsrs	r3, r3, #5
 800acc2:	2164      	movs	r1, #100	; 0x64
 800acc4:	fb01 f303 	mul.w	r3, r1, r3
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	011b      	lsls	r3, r3, #4
 800accc:	3332      	adds	r3, #50	; 0x32
 800acce:	4a34      	ldr	r2, [pc, #208]	; (800ada0 <UART_SetConfig+0x4e4>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acda:	441c      	add	r4, r3
 800acdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ace0:	2200      	movs	r2, #0
 800ace2:	673b      	str	r3, [r7, #112]	; 0x70
 800ace4:	677a      	str	r2, [r7, #116]	; 0x74
 800ace6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800acea:	4642      	mov	r2, r8
 800acec:	464b      	mov	r3, r9
 800acee:	1891      	adds	r1, r2, r2
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	415b      	adcs	r3, r3
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acfa:	4641      	mov	r1, r8
 800acfc:	1851      	adds	r1, r2, r1
 800acfe:	6039      	str	r1, [r7, #0]
 800ad00:	4649      	mov	r1, r9
 800ad02:	414b      	adcs	r3, r1
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	f04f 0200 	mov.w	r2, #0
 800ad0a:	f04f 0300 	mov.w	r3, #0
 800ad0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad12:	4659      	mov	r1, fp
 800ad14:	00cb      	lsls	r3, r1, #3
 800ad16:	4651      	mov	r1, sl
 800ad18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad1c:	4651      	mov	r1, sl
 800ad1e:	00ca      	lsls	r2, r1, #3
 800ad20:	4610      	mov	r0, r2
 800ad22:	4619      	mov	r1, r3
 800ad24:	4603      	mov	r3, r0
 800ad26:	4642      	mov	r2, r8
 800ad28:	189b      	adds	r3, r3, r2
 800ad2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad2c:	464b      	mov	r3, r9
 800ad2e:	460a      	mov	r2, r1
 800ad30:	eb42 0303 	adc.w	r3, r2, r3
 800ad34:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	663b      	str	r3, [r7, #96]	; 0x60
 800ad40:	667a      	str	r2, [r7, #100]	; 0x64
 800ad42:	f04f 0200 	mov.w	r2, #0
 800ad46:	f04f 0300 	mov.w	r3, #0
 800ad4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad4e:	4649      	mov	r1, r9
 800ad50:	008b      	lsls	r3, r1, #2
 800ad52:	4641      	mov	r1, r8
 800ad54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad58:	4641      	mov	r1, r8
 800ad5a:	008a      	lsls	r2, r1, #2
 800ad5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad60:	f7f5 fd78 	bl	8000854 <__aeabi_uldivmod>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <UART_SetConfig+0x4e4>)
 800ad6a:	fba3 1302 	umull	r1, r3, r3, r2
 800ad6e:	095b      	lsrs	r3, r3, #5
 800ad70:	2164      	movs	r1, #100	; 0x64
 800ad72:	fb01 f303 	mul.w	r3, r1, r3
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	3332      	adds	r3, #50	; 0x32
 800ad7c:	4a08      	ldr	r2, [pc, #32]	; (800ada0 <UART_SetConfig+0x4e4>)
 800ad7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad82:	095b      	lsrs	r3, r3, #5
 800ad84:	f003 020f 	and.w	r2, r3, #15
 800ad88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4422      	add	r2, r4
 800ad90:	609a      	str	r2, [r3, #8]
}
 800ad92:	bf00      	nop
 800ad94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad9e:	bf00      	nop
 800ada0:	51eb851f 	.word	0x51eb851f

0800ada4 <arm_sin_f32>:
 800ada4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ae20 <arm_sin_f32+0x7c>
 800ada8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800adac:	ee20 7a07 	vmul.f32	s14, s0, s14
 800adb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800adb8:	d42c      	bmi.n	800ae14 <arm_sin_f32+0x70>
 800adba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800adbe:	eddf 6a19 	vldr	s13, [pc, #100]	; 800ae24 <arm_sin_f32+0x80>
 800adc2:	4a19      	ldr	r2, [pc, #100]	; (800ae28 <arm_sin_f32+0x84>)
 800adc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800adcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800add0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800add4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add8:	bfa8      	it	ge
 800adda:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800adde:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ade2:	ee17 3a10 	vmov	r3, s14
 800ade6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adea:	ee07 3a10 	vmov	s14, r3
 800adee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800adf2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800adf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adfa:	edd1 6a01 	vldr	s13, [r1, #4]
 800adfe:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ae02:	ed91 0a00 	vldr	s0, [r1]
 800ae06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ae0a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ae0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae12:	4770      	bx	lr
 800ae14:	ee17 3a90 	vmov	r3, s15
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	e7cc      	b.n	800adba <arm_sin_f32+0x16>
 800ae20:	3e22f983 	.word	0x3e22f983
 800ae24:	44000000 	.word	0x44000000
 800ae28:	0800c380 	.word	0x0800c380

0800ae2c <atoi>:
 800ae2c:	220a      	movs	r2, #10
 800ae2e:	2100      	movs	r1, #0
 800ae30:	f000 b8d6 	b.w	800afe0 <strtol>

0800ae34 <__errno>:
 800ae34:	4b01      	ldr	r3, [pc, #4]	; (800ae3c <__errno+0x8>)
 800ae36:	6818      	ldr	r0, [r3, #0]
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	200003d4 	.word	0x200003d4

0800ae40 <__libc_init_array>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	4d0d      	ldr	r5, [pc, #52]	; (800ae78 <__libc_init_array+0x38>)
 800ae44:	4c0d      	ldr	r4, [pc, #52]	; (800ae7c <__libc_init_array+0x3c>)
 800ae46:	1b64      	subs	r4, r4, r5
 800ae48:	10a4      	asrs	r4, r4, #2
 800ae4a:	2600      	movs	r6, #0
 800ae4c:	42a6      	cmp	r6, r4
 800ae4e:	d109      	bne.n	800ae64 <__libc_init_array+0x24>
 800ae50:	4d0b      	ldr	r5, [pc, #44]	; (800ae80 <__libc_init_array+0x40>)
 800ae52:	4c0c      	ldr	r4, [pc, #48]	; (800ae84 <__libc_init_array+0x44>)
 800ae54:	f000 f8ce 	bl	800aff4 <_init>
 800ae58:	1b64      	subs	r4, r4, r5
 800ae5a:	10a4      	asrs	r4, r4, #2
 800ae5c:	2600      	movs	r6, #0
 800ae5e:	42a6      	cmp	r6, r4
 800ae60:	d105      	bne.n	800ae6e <__libc_init_array+0x2e>
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae68:	4798      	blx	r3
 800ae6a:	3601      	adds	r6, #1
 800ae6c:	e7ee      	b.n	800ae4c <__libc_init_array+0xc>
 800ae6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae72:	4798      	blx	r3
 800ae74:	3601      	adds	r6, #1
 800ae76:	e7f2      	b.n	800ae5e <__libc_init_array+0x1e>
 800ae78:	0800cc90 	.word	0x0800cc90
 800ae7c:	0800cc90 	.word	0x0800cc90
 800ae80:	0800cc90 	.word	0x0800cc90
 800ae84:	0800cc94 	.word	0x0800cc94

0800ae88 <memcpy>:
 800ae88:	440a      	add	r2, r1
 800ae8a:	4291      	cmp	r1, r2
 800ae8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae90:	d100      	bne.n	800ae94 <memcpy+0xc>
 800ae92:	4770      	bx	lr
 800ae94:	b510      	push	{r4, lr}
 800ae96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae9e:	4291      	cmp	r1, r2
 800aea0:	d1f9      	bne.n	800ae96 <memcpy+0xe>
 800aea2:	bd10      	pop	{r4, pc}

0800aea4 <memset>:
 800aea4:	4402      	add	r2, r0
 800aea6:	4603      	mov	r3, r0
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d100      	bne.n	800aeae <memset+0xa>
 800aeac:	4770      	bx	lr
 800aeae:	f803 1b01 	strb.w	r1, [r3], #1
 800aeb2:	e7f9      	b.n	800aea8 <memset+0x4>

0800aeb4 <strncmp>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	b17a      	cbz	r2, 800aed8 <strncmp+0x24>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	3901      	subs	r1, #1
 800aebc:	1884      	adds	r4, r0, r2
 800aebe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aec2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aec6:	4290      	cmp	r0, r2
 800aec8:	d101      	bne.n	800aece <strncmp+0x1a>
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	d101      	bne.n	800aed2 <strncmp+0x1e>
 800aece:	1a80      	subs	r0, r0, r2
 800aed0:	bd10      	pop	{r4, pc}
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d1f3      	bne.n	800aebe <strncmp+0xa>
 800aed6:	e7fa      	b.n	800aece <strncmp+0x1a>
 800aed8:	4610      	mov	r0, r2
 800aeda:	e7f9      	b.n	800aed0 <strncmp+0x1c>

0800aedc <_strtol_l.constprop.0>:
 800aedc:	2b01      	cmp	r3, #1
 800aede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	d001      	beq.n	800aee8 <_strtol_l.constprop.0+0xc>
 800aee4:	2b24      	cmp	r3, #36	; 0x24
 800aee6:	d906      	bls.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800aee8:	f7ff ffa4 	bl	800ae34 <__errno>
 800aeec:	2316      	movs	r3, #22
 800aeee:	6003      	str	r3, [r0, #0]
 800aef0:	2000      	movs	r0, #0
 800aef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800afdc <_strtol_l.constprop.0+0x100>
 800aefa:	460d      	mov	r5, r1
 800aefc:	462e      	mov	r6, r5
 800aefe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af02:	f814 700c 	ldrb.w	r7, [r4, ip]
 800af06:	f017 0708 	ands.w	r7, r7, #8
 800af0a:	d1f7      	bne.n	800aefc <_strtol_l.constprop.0+0x20>
 800af0c:	2c2d      	cmp	r4, #45	; 0x2d
 800af0e:	d132      	bne.n	800af76 <_strtol_l.constprop.0+0x9a>
 800af10:	782c      	ldrb	r4, [r5, #0]
 800af12:	2701      	movs	r7, #1
 800af14:	1cb5      	adds	r5, r6, #2
 800af16:	2b00      	cmp	r3, #0
 800af18:	d05b      	beq.n	800afd2 <_strtol_l.constprop.0+0xf6>
 800af1a:	2b10      	cmp	r3, #16
 800af1c:	d109      	bne.n	800af32 <_strtol_l.constprop.0+0x56>
 800af1e:	2c30      	cmp	r4, #48	; 0x30
 800af20:	d107      	bne.n	800af32 <_strtol_l.constprop.0+0x56>
 800af22:	782c      	ldrb	r4, [r5, #0]
 800af24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af28:	2c58      	cmp	r4, #88	; 0x58
 800af2a:	d14d      	bne.n	800afc8 <_strtol_l.constprop.0+0xec>
 800af2c:	786c      	ldrb	r4, [r5, #1]
 800af2e:	2310      	movs	r3, #16
 800af30:	3502      	adds	r5, #2
 800af32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af36:	f108 38ff 	add.w	r8, r8, #4294967295
 800af3a:	f04f 0c00 	mov.w	ip, #0
 800af3e:	fbb8 f9f3 	udiv	r9, r8, r3
 800af42:	4666      	mov	r6, ip
 800af44:	fb03 8a19 	mls	sl, r3, r9, r8
 800af48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800af4c:	f1be 0f09 	cmp.w	lr, #9
 800af50:	d816      	bhi.n	800af80 <_strtol_l.constprop.0+0xa4>
 800af52:	4674      	mov	r4, lr
 800af54:	42a3      	cmp	r3, r4
 800af56:	dd24      	ble.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af58:	f1bc 0f00 	cmp.w	ip, #0
 800af5c:	db1e      	blt.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af5e:	45b1      	cmp	r9, r6
 800af60:	d31c      	bcc.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af62:	d101      	bne.n	800af68 <_strtol_l.constprop.0+0x8c>
 800af64:	45a2      	cmp	sl, r4
 800af66:	db19      	blt.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af68:	fb06 4603 	mla	r6, r6, r3, r4
 800af6c:	f04f 0c01 	mov.w	ip, #1
 800af70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af74:	e7e8      	b.n	800af48 <_strtol_l.constprop.0+0x6c>
 800af76:	2c2b      	cmp	r4, #43	; 0x2b
 800af78:	bf04      	itt	eq
 800af7a:	782c      	ldrbeq	r4, [r5, #0]
 800af7c:	1cb5      	addeq	r5, r6, #2
 800af7e:	e7ca      	b.n	800af16 <_strtol_l.constprop.0+0x3a>
 800af80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800af84:	f1be 0f19 	cmp.w	lr, #25
 800af88:	d801      	bhi.n	800af8e <_strtol_l.constprop.0+0xb2>
 800af8a:	3c37      	subs	r4, #55	; 0x37
 800af8c:	e7e2      	b.n	800af54 <_strtol_l.constprop.0+0x78>
 800af8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800af92:	f1be 0f19 	cmp.w	lr, #25
 800af96:	d804      	bhi.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af98:	3c57      	subs	r4, #87	; 0x57
 800af9a:	e7db      	b.n	800af54 <_strtol_l.constprop.0+0x78>
 800af9c:	f04f 3cff 	mov.w	ip, #4294967295
 800afa0:	e7e6      	b.n	800af70 <_strtol_l.constprop.0+0x94>
 800afa2:	f1bc 0f00 	cmp.w	ip, #0
 800afa6:	da05      	bge.n	800afb4 <_strtol_l.constprop.0+0xd8>
 800afa8:	2322      	movs	r3, #34	; 0x22
 800afaa:	6003      	str	r3, [r0, #0]
 800afac:	4646      	mov	r6, r8
 800afae:	b942      	cbnz	r2, 800afc2 <_strtol_l.constprop.0+0xe6>
 800afb0:	4630      	mov	r0, r6
 800afb2:	e79e      	b.n	800aef2 <_strtol_l.constprop.0+0x16>
 800afb4:	b107      	cbz	r7, 800afb8 <_strtol_l.constprop.0+0xdc>
 800afb6:	4276      	negs	r6, r6
 800afb8:	2a00      	cmp	r2, #0
 800afba:	d0f9      	beq.n	800afb0 <_strtol_l.constprop.0+0xd4>
 800afbc:	f1bc 0f00 	cmp.w	ip, #0
 800afc0:	d000      	beq.n	800afc4 <_strtol_l.constprop.0+0xe8>
 800afc2:	1e69      	subs	r1, r5, #1
 800afc4:	6011      	str	r1, [r2, #0]
 800afc6:	e7f3      	b.n	800afb0 <_strtol_l.constprop.0+0xd4>
 800afc8:	2430      	movs	r4, #48	; 0x30
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1b1      	bne.n	800af32 <_strtol_l.constprop.0+0x56>
 800afce:	2308      	movs	r3, #8
 800afd0:	e7af      	b.n	800af32 <_strtol_l.constprop.0+0x56>
 800afd2:	2c30      	cmp	r4, #48	; 0x30
 800afd4:	d0a5      	beq.n	800af22 <_strtol_l.constprop.0+0x46>
 800afd6:	230a      	movs	r3, #10
 800afd8:	e7ab      	b.n	800af32 <_strtol_l.constprop.0+0x56>
 800afda:	bf00      	nop
 800afdc:	0800cb85 	.word	0x0800cb85

0800afe0 <strtol>:
 800afe0:	4613      	mov	r3, r2
 800afe2:	460a      	mov	r2, r1
 800afe4:	4601      	mov	r1, r0
 800afe6:	4802      	ldr	r0, [pc, #8]	; (800aff0 <strtol+0x10>)
 800afe8:	6800      	ldr	r0, [r0, #0]
 800afea:	f7ff bf77 	b.w	800aedc <_strtol_l.constprop.0>
 800afee:	bf00      	nop
 800aff0:	200003d4 	.word	0x200003d4

0800aff4 <_init>:
 800aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff6:	bf00      	nop
 800aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affa:	bc08      	pop	{r3}
 800affc:	469e      	mov	lr, r3
 800affe:	4770      	bx	lr

0800b000 <_fini>:
 800b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b002:	bf00      	nop
 800b004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b006:	bc08      	pop	{r3}
 800b008:	469e      	mov	lr, r3
 800b00a:	4770      	bx	lr
