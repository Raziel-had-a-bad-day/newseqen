
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  08007660  08007660  00017660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008638  08008638  000205cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008640  08008640  000205cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005cc  20000000  08008648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  200005cc  08008c14  000205cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001964  08008c14  00021964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e8d  00000000  00000000  000205fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224a  00000000  00000000  00032489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000346d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00035710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753e  00000000  00000000  00036660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011dbf  00000000  00000000  0004db9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095247  00000000  00000000  0005f95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000f4ba4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046bc  00000000  00000000  000f4c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  000f9320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005cc 	.word	0x200005cc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007648 	.word	0x08007648

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005d0 	.word	0x200005d0
 80001d4:	08007648 	.word	0x08007648

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2f>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008bc:	bf24      	itt	cs
 80008be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008c6:	d90d      	bls.n	80008e4 <__aeabi_d2f+0x30>
 80008c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008dc:	bf08      	it	eq
 80008de:	f020 0001 	biceq.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e8:	d121      	bne.n	800092e <__aeabi_d2f+0x7a>
 80008ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ee:	bfbc      	itt	lt
 80008f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	4770      	bxlt	lr
 80008f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008fe:	f1c2 0218 	rsb	r2, r2, #24
 8000902:	f1c2 0c20 	rsb	ip, r2, #32
 8000906:	fa10 f30c 	lsls.w	r3, r0, ip
 800090a:	fa20 f002 	lsr.w	r0, r0, r2
 800090e:	bf18      	it	ne
 8000910:	f040 0001 	orrne.w	r0, r0, #1
 8000914:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000918:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800091c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000920:	ea40 000c 	orr.w	r0, r0, ip
 8000924:	fa23 f302 	lsr.w	r3, r3, r2
 8000928:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800092c:	e7cc      	b.n	80008c8 <__aeabi_d2f+0x14>
 800092e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000932:	d107      	bne.n	8000944 <__aeabi_d2f+0x90>
 8000934:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000938:	bf1e      	ittt	ne
 800093a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800093e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000942:	4770      	bxne	lr
 8000944:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__aeabi_uldivmod>:
 8000954:	b953      	cbnz	r3, 800096c <__aeabi_uldivmod+0x18>
 8000956:	b94a      	cbnz	r2, 800096c <__aeabi_uldivmod+0x18>
 8000958:	2900      	cmp	r1, #0
 800095a:	bf08      	it	eq
 800095c:	2800      	cmpeq	r0, #0
 800095e:	bf1c      	itt	ne
 8000960:	f04f 31ff 	movne.w	r1, #4294967295
 8000964:	f04f 30ff 	movne.w	r0, #4294967295
 8000968:	f000 b974 	b.w	8000c54 <__aeabi_idiv0>
 800096c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000970:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000974:	f000 f806 	bl	8000984 <__udivmoddi4>
 8000978:	f8dd e004 	ldr.w	lr, [sp, #4]
 800097c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000980:	b004      	add	sp, #16
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9d08      	ldr	r5, [sp, #32]
 800098a:	4604      	mov	r4, r0
 800098c:	468e      	mov	lr, r1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14d      	bne.n	8000a2e <__udivmoddi4+0xaa>
 8000992:	428a      	cmp	r2, r1
 8000994:	4694      	mov	ip, r2
 8000996:	d969      	bls.n	8000a6c <__udivmoddi4+0xe8>
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	b152      	cbz	r2, 80009b4 <__udivmoddi4+0x30>
 800099e:	fa01 f302 	lsl.w	r3, r1, r2
 80009a2:	f1c2 0120 	rsb	r1, r2, #32
 80009a6:	fa20 f101 	lsr.w	r1, r0, r1
 80009aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ae:	ea41 0e03 	orr.w	lr, r1, r3
 80009b2:	4094      	lsls	r4, r2
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	0c21      	lsrs	r1, r4, #16
 80009ba:	fbbe f6f8 	udiv	r6, lr, r8
 80009be:	fa1f f78c 	uxth.w	r7, ip
 80009c2:	fb08 e316 	mls	r3, r8, r6, lr
 80009c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ca:	fb06 f107 	mul.w	r1, r6, r7
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d90a      	bls.n	80009e8 <__udivmoddi4+0x64>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009da:	f080 811f 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009de:	4299      	cmp	r1, r3
 80009e0:	f240 811c 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e4:	3e02      	subs	r6, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1a5b      	subs	r3, r3, r1
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3310 	mls	r3, r8, r0, r3
 80009f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f8:	fb00 f707 	mul.w	r7, r0, r7
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x92>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a08:	f080 810a 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	f240 8107 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b11d      	cbz	r5, 8000a28 <__udivmoddi4+0xa4>
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	2300      	movs	r3, #0
 8000a24:	e9c5 4300 	strd	r4, r3, [r5]
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	f000 80ef 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f683 	clz	r6, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	469e      	mov	lr, r3
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0e0      	beq.n	8000a28 <__udivmoddi4+0xa4>
 8000a66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a6a:	e7dd      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8092 	bne.w	8000b9e <__udivmoddi4+0x21a>
 8000a7a:	eba1 010c 	sub.w	r1, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2601      	movs	r6, #1
 8000a88:	0c20      	lsrs	r0, r4, #16
 8000a8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab8:	fb07 1110 	mls	r1, r7, r0, r1
 8000abc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4608      	mov	r0, r1
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79c      	b.n	8000a1e <__udivmoddi4+0x9a>
 8000ae4:	f1c6 0720 	rsb	r7, r6, #32
 8000ae8:	40b3      	lsls	r3, r6
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa01 f306 	lsl.w	r3, r1, r6
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40f9      	lsrs	r1, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f306 	lsl.w	r3, r0, r6
 8000b06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 1118 	mls	r1, r9, r8, r1
 8000b14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4461      	add	r1, ip
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b44:	fb09 1110 	mls	r1, r9, r0, r1
 8000b48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	458e      	cmp	lr, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	458e      	cmp	lr, r1
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba1 010e 	sub.w	r1, r1, lr
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb61 010e 	sbc.w	r1, r1, lr
 8000b86:	fa01 f707 	lsl.w	r7, r1, r7
 8000b8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b8e:	40f1      	lsrs	r1, r6
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c5 7100 	strd	r7, r1, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4301      	orrs	r1, r0
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	429e      	cmp	r6, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	b289      	uxth	r1, r1
 8000be8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bec:	fb07 3316 	mls	r3, r7, r6, r3
 8000bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3e02      	subs	r6, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e705      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e3      	b.n	80009e8 <__udivmoddi4+0x64>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6f8      	b.n	8000a16 <__udivmoddi4+0x92>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4646      	mov	r6, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4461      	add	r1, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0a8      	sub	sp, #160	; 0xa0
 8000c5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f002 fb8f 	bl	8003380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 fa9d 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 fd15 	bl	8001694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6a:	f000 fcf3 	bl	8001654 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6e:	f000 fb01 	bl	8001274 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000c72:	f000 fb9b 	bl	80013ac <MX_SPI2_Init>
  MX_TIM3_Init();
 8000c76:	f000 fc23 	bl	80014c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c7a:	f000 fc97 	bl	80015ac <MX_TIM4_Init>
  MX_I2C2_Init();
 8000c7e:	f000 fb67 	bl	8001350 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000c82:	f000 fbc9 	bl	8001418 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8000c86:	4b92      	ldr	r3, [pc, #584]	; (8000ed0 <main+0x278>)
 8000c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2);
 8000c8c:	4891      	ldr	r0, [pc, #580]	; (8000ed4 <main+0x27c>)
 8000c8e:	f005 fab3 	bl	80061f8 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8000c92:	4891      	ldr	r0, [pc, #580]	; (8000ed8 <main+0x280>)
 8000c94:	f005 fd43 	bl	800671e <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8000c98:	4b90      	ldr	r3, [pc, #576]	; (8000edc <main+0x284>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8000c9e:	4890      	ldr	r0, [pc, #576]	; (8000ee0 <main+0x288>)
 8000ca0:	f005 fd19 	bl	80066d6 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8000ca4:	488f      	ldr	r0, [pc, #572]	; (8000ee4 <main+0x28c>)
 8000ca6:	f005 fd16 	bl	80066d6 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000caa:	2108      	movs	r1, #8
 8000cac:	488a      	ldr	r0, [pc, #552]	; (8000ed8 <main+0x280>)
 8000cae:	f005 fd8f 	bl	80067d0 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8000cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8000cbc:	488a      	ldr	r0, [pc, #552]	; (8000ee8 <main+0x290>)
 8000cbe:	f002 fc39 	bl	8003534 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 3); //dma start ,needs this and adc start
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4989      	ldr	r1, [pc, #548]	; (8000eec <main+0x294>)
 8000cc6:	4888      	ldr	r0, [pc, #544]	; (8000ee8 <main+0x290>)
 8000cc8:	f002 fcda 	bl	8003680 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8000ccc:	4888      	ldr	r0, [pc, #544]	; (8000ef0 <main+0x298>)
 8000cce:	f002 f959 	bl	8002f84 <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	4b85      	ldr	r3, [pc, #532]	; (8000ef4 <main+0x29c>)
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	21a0      	movs	r1, #160	; 0xa0
 8000ce6:	4882      	ldr	r0, [pc, #520]	; (8000ef0 <main+0x298>)
 8000ce8:	f004 f8ca 	bl	8004e80 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	21a0      	movs	r1, #160	; 0xa0
 8000d02:	487b      	ldr	r0, [pc, #492]	; (8000ef0 <main+0x298>)
 8000d04:	f004 f8bc 	bl	8004e80 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2340      	movs	r3, #64	; 0x40
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	463b      	mov	r3, r7
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2302      	movs	r3, #2
 8000d18:	22c0      	movs	r2, #192	; 0xc0
 8000d1a:	21a0      	movs	r1, #160	; 0xa0
 8000d1c:	4874      	ldr	r0, [pc, #464]	; (8000ef0 <main+0x298>)
 8000d1e:	f004 f8af 	bl	8004e80 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8000d22:	4b75      	ldr	r3, [pc, #468]	; (8000ef8 <main+0x2a0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
 8000d28:	e024      	b.n	8000d74 <main+0x11c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8000d2a:	4b73      	ldr	r3, [pc, #460]	; (8000ef8 <main+0x2a0>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	f103 0208 	add.w	r2, r3, #8
 8000d36:	4b70      	ldr	r3, [pc, #448]	; (8000ef8 <main+0x2a0>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d44:	441a      	add	r2, r3
 8000d46:	4b6c      	ldr	r3, [pc, #432]	; (8000ef8 <main+0x2a0>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d4e:	496a      	ldr	r1, [pc, #424]	; (8000ef8 <main+0x2a0>)
 8000d50:	8809      	ldrh	r1, [r1, #0]
 8000d52:	0989      	lsrs	r1, r1, #6
 8000d54:	b289      	uxth	r1, r1
 8000d56:	4608      	mov	r0, r1
 8000d58:	4968      	ldr	r1, [pc, #416]	; (8000efc <main+0x2a4>)
 8000d5a:	5c89      	ldrb	r1, [r1, r2]
 8000d5c:	4a68      	ldr	r2, [pc, #416]	; (8000f00 <main+0x2a8>)
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	4403      	add	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8000d68:	4b63      	ldr	r3, [pc, #396]	; (8000ef8 <main+0x2a0>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <main+0x2a0>)
 8000d72:	801a      	strh	r2, [r3, #0]
 8000d74:	4b60      	ldr	r3, [pc, #384]	; (8000ef8 <main+0x2a0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7c:	d3d5      	bcc.n	8000d2a <main+0xd2>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8000d7e:	4b5e      	ldr	r3, [pc, #376]	; (8000ef8 <main+0x2a0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	e011      	b.n	8000daa <main+0x152>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8000d86:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <main+0x2a0>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b5a      	ldr	r3, [pc, #360]	; (8000ef8 <main+0x2a0>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	3340      	adds	r3, #64	; 0x40
 8000d92:	3290      	adds	r2, #144	; 0x90
 8000d94:	443a      	add	r2, r7
 8000d96:	f812 1c4c 	ldrb.w	r1, [r2, #-76]
 8000d9a:	4a56      	ldr	r2, [pc, #344]	; (8000ef4 <main+0x29c>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000d9e:	4b56      	ldr	r3, [pc, #344]	; (8000ef8 <main+0x2a0>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <main+0x2a0>)
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <main+0x2a0>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	2b3f      	cmp	r3, #63	; 0x3f
 8000db0:	d9e9      	bls.n	8000d86 <main+0x12e>
}

for(i=0;i<64;i++){
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <main+0x2a0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	801a      	strh	r2, [r3, #0]
 8000db8:	e011      	b.n	8000dde <main+0x186>
	potSource[i+128]=potSource3[i];
 8000dba:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <main+0x2a0>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <main+0x2a0>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3380      	adds	r3, #128	; 0x80
 8000dc6:	3290      	adds	r2, #144	; 0x90
 8000dc8:	443a      	add	r2, r7
 8000dca:	f812 1c90 	ldrb.w	r1, [r2, #-144]
 8000dce:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <main+0x29c>)
 8000dd0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <main+0x2a0>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <main+0x2a0>)
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <main+0x2a0>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b3f      	cmp	r3, #63	; 0x3f
 8000de4:	d9e9      	bls.n	8000dba <main+0x162>
}

for(i=0;i<180;i++){
 8000de6:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <main+0x2a0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	e010      	b.n	8000e10 <main+0x1b8>
	potValues[i]=potSource[i]>>4;
 8000dee:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <main+0x2a0>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b3f      	ldr	r3, [pc, #252]	; (8000ef4 <main+0x29c>)
 8000df6:	5c9b      	ldrb	r3, [r3, r2]
 8000df8:	4a3f      	ldr	r2, [pc, #252]	; (8000ef8 <main+0x2a0>)
 8000dfa:	8812      	ldrh	r2, [r2, #0]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	b2d9      	uxtb	r1, r3
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <main+0x2ac>)
 8000e02:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <main+0x2a0>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ef8 <main+0x2a0>)
 8000e0e:	801a      	strh	r2, [r3, #0]
 8000e10:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <main+0x2a0>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	2bb3      	cmp	r3, #179	; 0xb3
 8000e16:	d9ea      	bls.n	8000dee <main+0x196>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8000e18:	4b37      	ldr	r3, [pc, #220]	; (8000ef8 <main+0x2a0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e040      	b.n	8000ea2 <main+0x24a>

tempo_hold=(i+180)*0.0166666666;
 8000e20:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <main+0x2a0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	33b4      	adds	r3, #180	; 0xb4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc52 	bl	80006d0 <__aeabi_i2d>
 8000e2c:	a324      	add	r3, pc, #144	; (adr r3, 8000ec0 <main+0x268>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff f9d1 	bl	80001d8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fd39 	bl	80008b4 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

tempo_hold=	1/tempo_hold;
 8000e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e4c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e54:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
tempo_hold=	tempo_hold*2187.6;	
 8000e58:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000e5c:	f7ff fc4a 	bl	80006f4 <__aeabi_f2d>
 8000e60:	a319      	add	r3, pc, #100	; (adr r3, 8000ec8 <main+0x270>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff f9b7 	bl	80001d8 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fd1f 	bl	80008b4 <__aeabi_d2f>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

tempo_lut[i]=tempo_hold;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <main+0x2a0>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8a:	ee17 3a90 	vmov	r3, s15
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <main+0x2b0>)
 8000e92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <main+0x2a0>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <main+0x2a0>)
 8000ea0:	801a      	strh	r2, [r3, #0]
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <main+0x2a0>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	2ba0      	cmp	r3, #160	; 0xa0
 8000ea8:	d9ba      	bls.n	8000e20 <main+0x1c8>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <main+0x2b4>)
 8000eac:	f240 223b 	movw	r2, #571	; 0x23b
 8000eb0:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <main+0x2b8>)
 8000eb4:	2218      	movs	r2, #24
 8000eb6:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <main+0x2a0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	e035      	b.n	8000f2c <main+0x2d4>
 8000ec0:	0febdd13 	.word	0x0febdd13
 8000ec4:	3f911111 	.word	0x3f911111
 8000ec8:	33333333 	.word	0x33333333
 8000ecc:	40a11733 	.word	0x40a11733
 8000ed0:	0800d2f0 	.word	0x0800d2f0
 8000ed4:	200006e4 	.word	0x200006e4
 8000ed8:	2000077c 	.word	0x2000077c
 8000edc:	40000400 	.word	0x40000400
 8000ee0:	2000073c 	.word	0x2000073c
 8000ee4:	200007bc 	.word	0x200007bc
 8000ee8:	200005e8 	.word	0x200005e8
 8000eec:	200012a4 	.word	0x200012a4
 8000ef0:	20000690 	.word	0x20000690
 8000ef4:	200008fc 	.word	0x200008fc
 8000ef8:	20000a58 	.word	0x20000a58
 8000efc:	200001b0 	.word	0x200001b0
 8000f00:	20001508 	.word	0x20001508
 8000f04:	200007fc 	.word	0x200007fc
 8000f08:	200013c4 	.word	0x200013c4
 8000f0c:	20000a04 	.word	0x20000a04
 8000f10:	200009fc 	.word	0x200009fc
	spell[i]=67;
 8000f14:	4b8a      	ldr	r3, [pc, #552]	; (8001140 <main+0x4e8>)
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b8a      	ldr	r3, [pc, #552]	; (8001144 <main+0x4ec>)
 8000f1c:	2143      	movs	r1, #67	; 0x43
 8000f1e:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000f20:	4b87      	ldr	r3, [pc, #540]	; (8001140 <main+0x4e8>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4b85      	ldr	r3, [pc, #532]	; (8001140 <main+0x4e8>)
 8000f2a:	801a      	strh	r2, [r3, #0]
 8000f2c:	4b84      	ldr	r3, [pc, #528]	; (8001140 <main+0x4e8>)
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000f34:	d3ee      	bcc.n	8000f14 <main+0x2bc>

}

display_fill();
 8000f36:	f000 ff67 	bl	8001e08 <display_fill>



menuSelect=0;
 8000f3a:	4b83      	ldr	r3, [pc, #524]	; (8001148 <main+0x4f0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8000f40:	4b82      	ldr	r3, [pc, #520]	; (800114c <main+0x4f4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8000f46:	4b82      	ldr	r3, [pc, #520]	; (8001150 <main+0x4f8>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b80      	ldr	r3, [pc, #512]	; (8001150 <main+0x4f8>)
 8000f50:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 8000f52:	4b80      	ldr	r3, [pc, #512]	; (8001154 <main+0x4fc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a7e      	ldr	r2, [pc, #504]	; (8001154 <main+0x4fc>)
 8000f5a:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8000f5c:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <main+0x4fc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	2b06      	cmp	r3, #6
 8000f66:	d101      	bne.n	8000f6c <main+0x314>
 8000f68:	f000 fc58 	bl	800181c <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8000f6c:	4b79      	ldr	r3, [pc, #484]	; (8001154 <main+0x4fc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f242 3288 	movw	r2, #9096	; 0x2388
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d137      	bne.n	8000fe8 <main+0x390>

	mem_buf=potSource[mem_count];
 8000f78:	4b77      	ldr	r3, [pc, #476]	; (8001158 <main+0x500>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b77      	ldr	r3, [pc, #476]	; (800115c <main+0x504>)
 8000f80:	5c9a      	ldrb	r2, [r3, r2]
 8000f82:	4b77      	ldr	r3, [pc, #476]	; (8001160 <main+0x508>)
 8000f84:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);
 8000f86:	4b74      	ldr	r3, [pc, #464]	; (8001158 <main+0x500>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	099b      	lsrs	r3, r3, #6
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	3301      	adds	r3, #1
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	019b      	lsls	r3, r3, #6
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <main+0x500>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fac:	9302      	str	r3, [sp, #8]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <main+0x508>)
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	21a0      	movs	r1, #160	; 0xa0
 8000fba:	486a      	ldr	r0, [pc, #424]	; (8001164 <main+0x50c>)
 8000fbc:	f003 fe66 	bl	8004c8c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f002 fa4f 	bl	8003464 <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 8000fc6:	4b64      	ldr	r3, [pc, #400]	; (8001158 <main+0x500>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d103      	bne.n	8000fd6 <main+0x37e>
 8000fce:	4b62      	ldr	r3, [pc, #392]	; (8001158 <main+0x500>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e005      	b.n	8000fe2 <main+0x38a>
 8000fd6:	4b60      	ldr	r3, [pc, #384]	; (8001158 <main+0x500>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <main+0x500>)
 8000fe0:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <main+0x4fc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 8000fe8:	4b5f      	ldr	r3, [pc, #380]	; (8001168 <main+0x510>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d12e      	bne.n	800104e <main+0x3f6>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 8000ff0:	4b5e      	ldr	r3, [pc, #376]	; (800116c <main+0x514>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <main+0x3ae>
 8000ff8:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <main+0x518>)
 8000ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b5c      	ldr	r3, [pc, #368]	; (8001174 <main+0x51c>)
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e004      	b.n	8001010 <main+0x3b8>
 8001006:	4b5b      	ldr	r3, [pc, #364]	; (8001174 <main+0x51c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b21a      	sxth	r2, r3
 800100c:	4b58      	ldr	r3, [pc, #352]	; (8001170 <main+0x518>)
 800100e:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 8001010:	4b56      	ldr	r3, [pc, #344]	; (800116c <main+0x514>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	461a      	mov	r2, r3
 8001020:	4b52      	ldr	r3, [pc, #328]	; (800116c <main+0x514>)
 8001022:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<5;i++) {   displayBuffer();}
 8001024:	4b46      	ldr	r3, [pc, #280]	; (8001140 <main+0x4e8>)
 8001026:	2200      	movs	r2, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	e007      	b.n	800103c <main+0x3e4>
 800102c:	f000 ff20 	bl	8001e70 <displayBuffer>
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <main+0x4e8>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	3301      	adds	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <main+0x4e8>)
 800103a:	801a      	strh	r2, [r3, #0]
 800103c:	4b40      	ldr	r3, [pc, #256]	; (8001140 <main+0x4e8>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2b04      	cmp	r3, #4
 8001042:	d9f3      	bls.n	800102c <main+0x3d4>
		  enc2_dir=enc2_tempc;
 8001044:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <main+0x51c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b49      	ldr	r3, [pc, #292]	; (8001170 <main+0x518>)
 800104c:	801a      	strh	r2, [r3, #0]
	//  if (gfx_skip==18) displayBuffer(); // doesn't need to be fast, fixes character


	  //  analoginputloopb(); // no delay, maybe some
	//  for (i=0;i<7;i++) {display_init();}
	  if (init<6)
 800104e:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <main+0x520>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d810      	bhi.n	8001078 <main+0x420>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <main+0x4e8>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
 800105c:	e007      	b.n	800106e <main+0x416>
 800105e:	f000 fce1 	bl	8001a24 <display_init>
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <main+0x4e8>)
 8001064:	881b      	ldrh	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <main+0x4e8>)
 800106c:	801a      	strh	r2, [r3, #0]
 800106e:	4b34      	ldr	r3, [pc, #208]	; (8001140 <main+0x4e8>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	2b05      	cmp	r3, #5
 8001074:	d9f3      	bls.n	800105e <main+0x406>
 8001076:	e001      	b.n	800107c <main+0x424>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps, maybe syncronise
 8001078:	f000 fddc 	bl	8001c34 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter & 255)	{ // grab adc readings + 3ms , 32 step
 800107c:	4b34      	ldr	r3, [pc, #208]	; (8001150 <main+0x4f8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d022      	beq.n	80010ca <main+0x472>
	  	for (i=0;i<3;i++) {
 8001084:	4b2e      	ldr	r3, [pc, #184]	; (8001140 <main+0x4e8>)
 8001086:	2200      	movs	r2, #0
 8001088:	801a      	strh	r2, [r3, #0]
 800108a:	e017      	b.n	80010bc <main+0x464>

	  	adc_values[2-i]= (adc_source[i]>>7) &31;
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <main+0x4e8>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <main+0x524>)
 8001094:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001098:	09db      	lsrs	r3, r3, #7
 800109a:	b29b      	uxth	r3, r3
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b28      	ldr	r3, [pc, #160]	; (8001140 <main+0x4e8>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	f1c3 0302 	rsb	r3, r3, #2
 80010a6:	f002 021f 	and.w	r2, r2, #31
 80010aa:	b2d1      	uxtb	r1, r2
 80010ac:	4a34      	ldr	r2, [pc, #208]	; (8001180 <main+0x528>)
 80010ae:	54d1      	strb	r1, [r2, r3]
	  	for (i=0;i<3;i++) {
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <main+0x4e8>)
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <main+0x4e8>)
 80010ba:	801a      	strh	r2, [r3, #0]
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <main+0x4e8>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d9e3      	bls.n	800108c <main+0x434>
	  }
	  	loop_counter=0;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <main+0x4f8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <main+0x52c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b07      	cmp	r3, #7
 80010d0:	d106      	bne.n	80010e0 <main+0x488>
 80010d2:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <main+0x530>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d102      	bne.n	80010e0 <main+0x488>
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <main+0x530>)
 80010dc:	2201      	movs	r2, #1
 80010de:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <main+0x52c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f0:	4826      	ldr	r0, [pc, #152]	; (800118c <main+0x534>)
 80010f2:	f003 fc6d 	bl	80049d0 <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <main+0x538>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d302      	bcc.n	8001108 <main+0x4b0>
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <main+0x53c>)
 8001104:	2200      	movs	r2, #0
 8001106:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <main+0x538>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001112:	d803      	bhi.n	800111c <main+0x4c4>
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <main+0x53c>)
 8001116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111a:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 800111c:	4b1e      	ldr	r3, [pc, #120]	; (8001198 <main+0x540>)
 800111e:	881a      	ldrh	r2, [r3, #0]
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <main+0x53c>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d002      	beq.n	800112e <main+0x4d6>
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <main+0x544>)
 800112a:	2201      	movs	r2, #1
 800112c:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <main+0x544>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f43f af07 	beq.w	8000f46 <main+0x2ee>

	  	sampling();
 8001138:	f000 ff9e 	bl	8002078 <sampling>
	  loop_counter++ ;
 800113c:	e703      	b.n	8000f46 <main+0x2ee>
 800113e:	bf00      	nop
 8001140:	20000a58 	.word	0x20000a58
 8001144:	20000000 	.word	0x20000000
 8001148:	200009fd 	.word	0x200009fd
 800114c:	20000a02 	.word	0x20000a02
 8001150:	20000a54 	.word	0x20000a54
 8001154:	20001328 	.word	0x20001328
 8001158:	20001327 	.word	0x20001327
 800115c:	200008fc 	.word	0x200008fc
 8001160:	2000132c 	.word	0x2000132c
 8001164:	20000690 	.word	0x20000690
 8001168:	2000195a 	.word	0x2000195a
 800116c:	2000195b 	.word	0x2000195b
 8001170:	20001312 	.word	0x20001312
 8001174:	2000195c 	.word	0x2000195c
 8001178:	20001321 	.word	0x20001321
 800117c:	200012a4 	.word	0x200012a4
 8001180:	200001a8 	.word	0x200001a8
 8001184:	20000a30 	.word	0x20000a30
 8001188:	20001318 	.word	0x20001318
 800118c:	40020800 	.word	0x40020800
 8001190:	2000125e 	.word	0x2000125e
 8001194:	20001262 	.word	0x20001262
 8001198:	20000a56 	.word	0x20000a56
 800119c:	200001ae 	.word	0x200001ae

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	; 0x50
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	; 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 fa42 	bl	8007638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <SystemClock_Config+0xcc>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <SystemClock_Config+0xcc>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <SystemClock_Config+0xcc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <SystemClock_Config+0xd0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <SystemClock_Config+0xd0>)
 80011ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <SystemClock_Config+0xd0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2310      	movs	r3, #16
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001210:	2308      	movs	r3, #8
 8001212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001218:	2302      	movs	r3, #2
 800121a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f004 fbad 	bl	8005984 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001230:	f001 fe02 	bl	8002e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2302      	movs	r3, #2
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2103      	movs	r1, #3
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fe04 	bl	8005e60 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800125e:	f001 fdeb 	bl	8002e38 <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	; 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800127a:	463b      	mov	r3, r7
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_ADC1_Init+0xd0>)
 8001288:	4a2f      	ldr	r2, [pc, #188]	; (8001348 <MX_ADC1_Init+0xd4>)
 800128a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <MX_ADC1_Init+0xd0>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_ADC1_Init+0xd0>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_ADC1_Init+0xd0>)
 800129a:	2201      	movs	r2, #1
 800129c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <MX_ADC1_Init+0xd8>)
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012c0:	2203      	movs	r2, #3
 80012c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d2:	481c      	ldr	r0, [pc, #112]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012d4:	f002 f8ea 	bl	80034ac <HAL_ADC_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012de:	f001 fdab 	bl	8002e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e2:	2303      	movs	r3, #3
 80012e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012ea:	2307      	movs	r3, #7
 80012ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	4814      	ldr	r0, [pc, #80]	; (8001344 <MX_ADC1_Init+0xd0>)
 80012f4:	f002 fab6 	bl	8003864 <HAL_ADC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012fe:	f001 fd9b 	bl	8002e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001302:	2304      	movs	r3, #4
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001306:	2302      	movs	r3, #2
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_ADC1_Init+0xd0>)
 8001310:	f002 faa8 	bl	8003864 <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800131a:	f001 fd8d 	bl	8002e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800131e:	2305      	movs	r3, #5
 8001320:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001322:	2303      	movs	r3, #3
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_ADC1_Init+0xd0>)
 800132c:	f002 fa9a 	bl	8003864 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001336:	f001 fd7f 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200005e8 	.word	0x200005e8
 8001348:	40012000 	.word	0x40012000
 800134c:	0f000001 	.word	0x0f000001

08001350 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <MX_I2C2_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_I2C2_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_I2C2_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_I2C2_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_I2C2_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_I2C2_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <MX_I2C2_Init+0x50>)
 800138e:	f003 fb39 	bl	8004a04 <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001398:	f001 fd4e 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000690 	.word	0x20000690
 80013a4:	40005800 	.word	0x40005800
 80013a8:	00061a80 	.word	0x00061a80

080013ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI2_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI2_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI2_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI2_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI2_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e0:	2230      	movs	r2, #48	; 0x30
 80013e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI2_Init+0x64>)
 80013f8:	220a      	movs	r2, #10
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI2_Init+0x64>)
 80013fe:	f004 fefb 	bl	80061f8 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001408:	f001 fd16 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200006e4 	.word	0x200006e4
 8001414:	40003800 	.word	0x40003800

08001418 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	2224      	movs	r2, #36	; 0x24
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f006 f906 	bl	8007638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <MX_TIM2_Init+0xa4>)
 8001436:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_TIM2_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <MX_TIM2_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM2_Init+0xa4>)
 800144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM2_Init+0xa4>)
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM2_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800145e:	2301      	movs	r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001462:	2302      	movs	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001476:	2301      	movs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM2_Init+0xa4>)
 800148a:	f005 f9d3 	bl	8006834 <HAL_TIM_Encoder_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001494:	f001 fcd0 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM2_Init+0xa4>)
 80014a6:	f005 ffdd 	bl	8007464 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80014b0:	f001 fcc2 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	2000073c 	.word	0x2000073c

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0320 	add.w	r3, r7, #32
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	615a      	str	r2, [r3, #20]
 80014ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <MX_TIM3_Init+0xe4>)
 80014f2:	4a2d      	ldr	r2, [pc, #180]	; (80015a8 <MX_TIM3_Init+0xe8>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f6:	4b2b      	ldr	r3, [pc, #172]	; (80015a4 <MX_TIM3_Init+0xe4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <MX_TIM3_Init+0xe4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2857;
 8001502:	4b28      	ldr	r3, [pc, #160]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001504:	f640 3229 	movw	r2, #2857	; 0xb29
 8001508:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <MX_TIM3_Init+0xe4>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001510:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001512:	2280      	movs	r2, #128	; 0x80
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001516:	4823      	ldr	r0, [pc, #140]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001518:	f005 f8b2 	bl	8006680 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001522:	f001 fc89 	bl	8002e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001530:	4619      	mov	r1, r3
 8001532:	481c      	ldr	r0, [pc, #112]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001534:	f005 fbde 	bl	8006cf4 <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800153e:	f001 fc7b 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001544:	f005 f90f 	bl	8006766 <HAL_TIM_PWM_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800154e:	f001 fc73 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	4619      	mov	r1, r3
 8001560:	4810      	ldr	r0, [pc, #64]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001562:	f005 ff7f 	bl	8007464 <HAL_TIMEx_MasterConfigSynchronization>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800156c:	f001 fc64 	bl	8002e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001570:	2370      	movs	r3, #112	; 0x70
 8001572:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2208      	movs	r2, #8
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001588:	f005 faee 	bl	8006b68 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001592:	f001 fc51 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM3_Init+0xe4>)
 8001598:	f001 fe3a 	bl	8003210 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000077c 	.word	0x2000077c
 80015a8:	40000400 	.word	0x40000400

080015ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2224      	movs	r2, #36	; 0x24
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f006 f83c 	bl	8007638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c8:	4b20      	ldr	r3, [pc, #128]	; (800164c <MX_TIM4_Init+0xa0>)
 80015ca:	4a21      	ldr	r2, [pc, #132]	; (8001650 <MX_TIM4_Init+0xa4>)
 80015cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <MX_TIM4_Init+0xa0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <MX_TIM4_Init+0xa0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <MX_TIM4_Init+0xa0>)
 80015dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_TIM4_Init+0xa0>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_TIM4_Init+0xa0>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80015f2:	2302      	movs	r3, #2
 80015f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015f6:	2301      	movs	r3, #1
 80015f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80015fe:	2303      	movs	r3, #3
 8001600:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001602:	2302      	movs	r3, #2
 8001604:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 3;
 800160e:	2303      	movs	r3, #3
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001612:	f107 030c 	add.w	r3, r7, #12
 8001616:	4619      	mov	r1, r3
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <MX_TIM4_Init+0xa0>)
 800161a:	f005 f90b 	bl	8006834 <HAL_TIM_Encoder_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001624:	f001 fc08 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_TIM4_Init+0xa0>)
 8001636:	f005 ff15 	bl	8007464 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001640:	f001 fbfa 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200007bc 	.word	0x200007bc
 8001650:	40000800 	.word	0x40000800

08001654 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_DMA_Init+0x3c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <MX_DMA_Init+0x3c>)
 8001664:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_DMA_Init+0x3c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2038      	movs	r0, #56	; 0x38
 800167c:	f002 fc7d 	bl	8003f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001680:	2038      	movs	r0, #56	; 0x38
 8001682:	f002 fc96 	bl	8003fb2 <HAL_NVIC_EnableIRQ>

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023800 	.word	0x40023800

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a11      	ldr	r2, [pc, #68]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_GPIO_Init+0x9c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	480b      	ldr	r0, [pc, #44]	; (8001734 <MX_GPIO_Init+0xa0>)
 8001706:	f003 f963 	bl	80049d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800170a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4619      	mov	r1, r3
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_GPIO_Init+0xa0>)
 8001724:	f002 ffd0 	bl	80046c8 <HAL_GPIO_Init>

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40020800 	.word	0x40020800

08001738 <SPI_command>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void SPI_command(void){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <SPI_command+0x68>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d128      	bne.n	8001798 <SPI_command+0x60>
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <SPI_command+0x6c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d124      	bne.n	8001798 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <SPI_command+0x70>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	0a1b      	lsrs	r3, r3, #8
 8001754:	b29b      	uxth	r3, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <SPI_command+0x2a>
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <SPI_command+0x74>)
 800175c:	22f8      	movs	r2, #248	; 0xf8
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e002      	b.n	8001768 <SPI_command+0x30>
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <SPI_command+0x74>)
 8001764:	22fa      	movs	r2, #250	; 0xfa
 8001766:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <SPI_command+0x74>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <SPI_command+0x70>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	b29b      	uxth	r3, r3
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	b2db      	uxtb	r3, r3
 800177a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SPI_command+0x70>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	b2db      	uxtb	r3, r3
 8001784:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 8001786:	4639      	mov	r1, r7
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	2203      	movs	r2, #3
 800178c:	4808      	ldr	r0, [pc, #32]	; (80017b0 <SPI_command+0x78>)
 800178e:	f004 fd97 	bl	80062c0 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 8001792:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <SPI_command+0x68>)
 8001794:	2201      	movs	r2, #1
 8001796:	801a      	strh	r2, [r3, #0]
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000131a 	.word	0x2000131a
 80017a4:	20001320 	.word	0x20001320
 80017a8:	2000131e 	.word	0x2000131e
 80017ac:	2000131c 	.word	0x2000131c
 80017b0:	200006e4 	.word	0x200006e4

080017b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017ca:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80017d6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017dc:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10b      	bne.n	8001800 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80017f0:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80017fe:	801a      	strh	r2, [r3, #0]

}

}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	2000125e 	.word	0x2000125e
 8001810:	20000a5c 	.word	0x20000a5c
 8001814:	20001260 	.word	0x20001260
 8001818:	40000400 	.word	0x40000400

0800181c <analoginputloopb>:
		HAL_ADC_Stop(&hadc1);
for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit

}

void analoginputloopb(void){  //works fine still
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001822:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <analoginputloopb+0x1c8>)
 8001824:	789b      	ldrb	r3, [r3, #2]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <analoginputloopb+0x1cc>)
 800182c:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 800182e:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <analoginputloopb+0x1c8>)
 8001830:	789b      	ldrb	r3, [r3, #2]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	b2da      	uxtb	r2, r3
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <analoginputloopb+0x1d0>)
 800183a:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 800183c:	4b6a      	ldr	r3, [pc, #424]	; (80019e8 <analoginputloopb+0x1cc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <analoginputloopb+0x1d0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4619      	mov	r1, r3
 8001848:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <analoginputloopb+0x1d4>)
 800184a:	0103      	lsls	r3, r0, #4
 800184c:	440b      	add	r3, r1
 800184e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001852:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 8001854:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <analoginputloopb+0x1c8>)
 8001856:	2200      	movs	r2, #0
 8001858:	705a      	strb	r2, [r3, #1]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 800185a:	4b66      	ldr	r3, [pc, #408]	; (80019f4 <analoginputloopb+0x1d8>)
 800185c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b60      	ldr	r3, [pc, #384]	; (80019e4 <analoginputloopb+0x1c8>)
 8001864:	709a      	strb	r2, [r3, #2]
		
		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	2b7f      	cmp	r3, #127	; 0x7f
 800186a:	d904      	bls.n	8001876 <analoginputloopb+0x5a>
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	3b80      	subs	r3, #128	; 0x80
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <analoginputloopb+0x1dc>)
 8001874:	801a      	strh	r2, [r3, #0]
				enc_dir=potSource[counterVarB];
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <analoginputloopb+0x1dc>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <analoginputloopb+0x1e0>)
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	b21a      	sxth	r2, r3
 8001882:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <analoginputloopb+0x1e4>)
 8001884:	801a      	strh	r2, [r3, #0]

	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 8001886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <analoginputloopb+0x1e8>)
 8001892:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 8001894:	4b5c      	ldr	r3, [pc, #368]	; (8001a08 <analoginputloopb+0x1ec>)
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b5b      	ldr	r3, [pc, #364]	; (8001a0c <analoginputloopb+0x1f0>)
 800189e:	801a      	strh	r2, [r3, #0]
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80018a0:	4b58      	ldr	r3, [pc, #352]	; (8001a04 <analoginputloopb+0x1e8>)
 80018a2:	881a      	ldrh	r2, [r3, #0]
 80018a4:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <analoginputloopb+0x1f4>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d911      	bls.n	80018d0 <analoginputloopb+0xb4>
 80018ac:	4b54      	ldr	r3, [pc, #336]	; (8001a00 <analoginputloopb+0x1e4>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <analoginputloopb+0x1d8>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	111b      	asrs	r3, r3, #4
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <analoginputloopb+0x1f8>)
 80018c2:	5c5b      	ldrb	r3, [r3, r1]
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <analoginputloopb+0x1e4>)
 80018ce:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <analoginputloopb+0x1e8>)
 80018d2:	881a      	ldrh	r2, [r3, #0]
 80018d4:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <analoginputloopb+0x1f4>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d211      	bcs.n	8001900 <analoginputloopb+0xe4>
 80018dc:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <analoginputloopb+0x1d8>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	111b      	asrs	r3, r3, #4
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <analoginputloopb+0x1f8>)
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b44      	ldr	r3, [pc, #272]	; (8001a00 <analoginputloopb+0x1e4>)
 80018f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <analoginputloopb+0x1e4>)
 80018fe:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;




	if (enc_dir>160) enc_dir=160;
 8001900:	4b3f      	ldr	r3, [pc, #252]	; (8001a00 <analoginputloopb+0x1e4>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	2ba0      	cmp	r3, #160	; 0xa0
 8001908:	dd02      	ble.n	8001910 <analoginputloopb+0xf4>
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <analoginputloopb+0x1e4>)
 800190c:	22a0      	movs	r2, #160	; 0xa0
 800190e:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <analoginputloopb+0x1e4>)
 8001912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da02      	bge.n	8001920 <analoginputloopb+0x104>
 800191a:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <analoginputloopb+0x1e4>)
 800191c:	2200      	movs	r2, #0
 800191e:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;
 8001920:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <analoginputloopb+0x1e4>)
 8001922:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <analoginputloopb+0x1dc>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <analoginputloopb+0x1e0>)
 8001930:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <analoginputloopb+0x1e4>)
 8001934:	2200      	movs	r2, #0
 8001936:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8001938:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <analoginputloopb+0x1e8>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	4b34      	ldr	r3, [pc, #208]	; (8001a10 <analoginputloopb+0x1f4>)
 800193e:	801a      	strh	r2, [r3, #0]




			if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <analoginputloopb+0x1f0>)
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <analoginputloopb+0x1fc>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d908      	bls.n	800195e <analoginputloopb+0x142>
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <analoginputloopb+0x1d8>)
 800194e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001952:	b29b      	uxth	r3, r3
 8001954:	3301      	adds	r3, #1
 8001956:	b29b      	uxth	r3, r3
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <analoginputloopb+0x1d8>)
 800195c:	801a      	strh	r2, [r3, #0]
			if (enc2_temp<enc2_tempB)	 enc2_dir--;
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <analoginputloopb+0x1f0>)
 8001960:	881a      	ldrh	r2, [r3, #0]
 8001962:	4b2d      	ldr	r3, [pc, #180]	; (8001a18 <analoginputloopb+0x1fc>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d208      	bcs.n	800197c <analoginputloopb+0x160>
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <analoginputloopb+0x1d8>)
 800196c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	b21a      	sxth	r2, r3
 8001978:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <analoginputloopb+0x1d8>)
 800197a:	801a      	strh	r2, [r3, #0]

			if (enc2_dir>127) menu_page[1]=127; else menu_page[1]=0;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <analoginputloopb+0x1d8>)
 800197e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001982:	2b7f      	cmp	r3, #127	; 0x7f
 8001984:	dd03      	ble.n	800198e <analoginputloopb+0x172>
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <analoginputloopb+0x200>)
 8001988:	227f      	movs	r2, #127	; 0x7f
 800198a:	705a      	strb	r2, [r3, #1]
 800198c:	e002      	b.n	8001994 <analoginputloopb+0x178>
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <analoginputloopb+0x200>)
 8001990:	2200      	movs	r2, #0
 8001992:	705a      	strb	r2, [r3, #1]
			if (enc2_dir>255) {menu_page[1]=0;display_fill();}
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <analoginputloopb+0x1d8>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	dd04      	ble.n	80019a8 <analoginputloopb+0x18c>
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <analoginputloopb+0x200>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	705a      	strb	r2, [r3, #1]
 80019a4:	f000 fa30 	bl	8001e08 <display_fill>

					if (enc2_dir<0) {menu_page[1]=127;display_fill();}
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <analoginputloopb+0x1d8>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da04      	bge.n	80019bc <analoginputloopb+0x1a0>
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <analoginputloopb+0x200>)
 80019b4:	227f      	movs	r2, #127	; 0x7f
 80019b6:	705a      	strb	r2, [r3, #1]
 80019b8:	f000 fa26 	bl	8001e08 <display_fill>
					//enc2_dir=enc2_lut[enc2_dir]; // jump to stored position
							//enc2_dir=0;
					enc2_tempB=enc2_temp;
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <analoginputloopb+0x1f0>)
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <analoginputloopb+0x1fc>)
 80019c2:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <analoginputloopb+0x1dc>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <analoginputloopb+0x1e0>)
 80019cc:	5c9b      	ldrb	r3, [r3, r2]
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <analoginputloopb+0x1dc>)
 80019d0:	8812      	ldrh	r2, [r2, #0]
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	b2d9      	uxtb	r1, r3
 80019d6:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <analoginputloopb+0x204>)
 80019d8:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20001324 	.word	0x20001324
 80019e8:	200009fd 	.word	0x200009fd
 80019ec:	200009fe 	.word	0x200009fe
 80019f0:	08007720 	.word	0x08007720
 80019f4:	20001312 	.word	0x20001312
 80019f8:	20000a00 	.word	0x20000a00
 80019fc:	200008fc 	.word	0x200008fc
 8001a00:	20001314 	.word	0x20001314
 8001a04:	2000130a 	.word	0x2000130a
 8001a08:	40000800 	.word	0x40000800
 8001a0c:	2000130e 	.word	0x2000130e
 8001a10:	2000130c 	.word	0x2000130c
 8001a14:	200005b4 	.word	0x200005b4
 8001a18:	20001310 	.word	0x20001310
 8001a1c:	20001330 	.word	0x20001330
 8001a20:	200007fc 	.word	0x200007fc

08001a24 <display_init>:
void display_init(void){
 8001a24:	b5b0      	push	{r4, r5, r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <display_init+0x1e8>)
 8001a2c:	1d3c      	adds	r4, r7, #4
 8001a2e:	461d      	mov	r5, r3
 8001a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001a3c:	4b74      	ldr	r3, [pc, #464]	; (8001c10 <display_init+0x1ec>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 80de 	bne.w	8001c02 <display_init+0x1de>

if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
 8001a46:	4b73      	ldr	r3, [pc, #460]	; (8001c14 <display_init+0x1f0>)
 8001a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4c:	2b3f      	cmp	r3, #63	; 0x3f
 8001a4e:	dd09      	ble.n	8001a64 <display_init+0x40>
 8001a50:	4b71      	ldr	r3, [pc, #452]	; (8001c18 <display_init+0x1f4>)
 8001a52:	789b      	ldrb	r3, [r3, #2]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <display_init+0x40>
 8001a58:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <display_init+0x1f8>)
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	4b6e      	ldr	r3, [pc, #440]	; (8001c18 <display_init+0x1f4>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	709a      	strb	r2, [r3, #2]
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
 8001a64:	4b6d      	ldr	r3, [pc, #436]	; (8001c1c <display_init+0x1f8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b4c      	cmp	r3, #76	; 0x4c
 8001a6a:	d106      	bne.n	8001a7a <display_init+0x56>
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <display_init+0x1f4>)
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <display_init+0x56>
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <display_init+0x1f4>)
 8001a76:	2202      	movs	r2, #2
 8001a78:	709a      	strb	r2, [r3, #2]
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
 8001a7a:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <display_init+0x1f0>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	2b3e      	cmp	r3, #62	; 0x3e
 8001a82:	dc09      	bgt.n	8001a98 <display_init+0x74>
 8001a84:	4b64      	ldr	r3, [pc, #400]	; (8001c18 <display_init+0x1f4>)
 8001a86:	789b      	ldrb	r3, [r3, #2]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d105      	bne.n	8001a98 <display_init+0x74>
 8001a8c:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <display_init+0x1f8>)
 8001a8e:	2204      	movs	r2, #4
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <display_init+0x1f4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	709a      	strb	r2, [r3, #2]

switch(init){     //Remember every line advances +char on display
 8001a98:	4b60      	ldr	r3, [pc, #384]	; (8001c1c <display_init+0x1f8>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	3b4d      	subs	r3, #77	; 0x4d
 8001a9e:	2b07      	cmp	r3, #7
 8001aa0:	d879      	bhi.n	8001b96 <display_init+0x172>
 8001aa2:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <display_init+0x84>)
 8001aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa8:	08001ac9 	.word	0x08001ac9
 8001aac:	08001af9 	.word	0x08001af9
 8001ab0:	08001b01 	.word	0x08001b01
 8001ab4:	08001b1d 	.word	0x08001b1d
 8001ab8:	08001b31 	.word	0x08001b31
 8001abc:	08001b3f 	.word	0x08001b3f
 8001ac0:	08001b55 	.word	0x08001b55
 8001ac4:	08001b69 	.word	0x08001b69

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8001ac8:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <display_init+0x1fc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b52      	ldr	r3, [pc, #328]	; (8001c24 <display_init+0x200>)
 8001ada:	801a      	strh	r2, [r3, #0]
 8001adc:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <display_init+0x1fc>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	b2da      	uxtb	r2, r3
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <display_init+0x1f8>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <display_init+0x1f8>)
 8001af4:	701a      	strb	r2, [r3, #0]
 8001af6:	e05f      	b.n	8001bb8 <display_init+0x194>

case 78: spi_hold=10;break; //write one set then jump
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <display_init+0x200>)
 8001afa:	220a      	movs	r2, #10
 8001afc:	801a      	strh	r2, [r3, #0]
 8001afe:	e05b      	b.n	8001bb8 <display_init+0x194>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <display_init+0x1fc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a47      	ldr	r2, [pc, #284]	; (8001c28 <display_init+0x204>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b44      	ldr	r3, [pc, #272]	; (8001c24 <display_init+0x200>)
 8001b12:	801a      	strh	r2, [r3, #0]
 8001b14:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <display_init+0x1f8>)
 8001b16:	2251      	movs	r2, #81	; 0x51
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e04d      	b.n	8001bb8 <display_init+0x194>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <display_init+0x1fc>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b24:	4a40      	ldr	r2, [pc, #256]	; (8001c28 <display_init+0x204>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <display_init+0x200>)
 8001b2c:	801a      	strh	r2, [r3, #0]
 8001b2e:	e043      	b.n	8001bb8 <display_init+0x194>
case 81: spi_hold=10;init=81;break;
 8001b30:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <display_init+0x200>)
 8001b32:	220a      	movs	r2, #10
 8001b34:	801a      	strh	r2, [r3, #0]
 8001b36:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <display_init+0x1f8>)
 8001b38:	2251      	movs	r2, #81	; 0x51
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	e03c      	b.n	8001bb8 <display_init+0x194>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001b3e:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <display_init+0x1fc>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <display_init+0x200>)
 8001b50:	801a      	strh	r2, [r3, #0]
 8001b52:	e031      	b.n	8001bb8 <display_init+0x194>
case 83: spi_hold=spell[init_b&62];break;
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <display_init+0x1fc>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b5c:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <display_init+0x204>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <display_init+0x200>)
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	e027      	b.n	8001bb8 <display_init+0x194>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <display_init+0x1fc>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001b70:	3301      	adds	r3, #1
 8001b72:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <display_init+0x204>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <display_init+0x200>)
 8001b7a:	801a      	strh	r2, [r3, #0]
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <display_init+0x208>)
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <display_init+0x1fc>)
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	f000 f971 	bl	8001e70 <displayBuffer>
 8001b8e:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <display_init+0x1f8>)
 8001b90:	224c      	movs	r2, #76	; 0x4c
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e010      	b.n	8001bb8 <display_init+0x194>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001b96:	4b21      	ldr	r3, [pc, #132]	; (8001c1c <display_init+0x1f8>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	3b06      	subs	r3, #6
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <display_init+0x1fc>)
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	f000 f965 	bl	8001e70 <displayBuffer>
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <display_init+0x1fc>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b1e      	ldr	r3, [pc, #120]	; (8001c28 <display_init+0x204>)
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <display_init+0x200>)
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <display_init+0x1f8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d80f      	bhi.n	8001be0 <display_init+0x1bc>
 8001bc0:	201e      	movs	r0, #30
 8001bc2:	f001 fc4f 	bl	8003464 <HAL_Delay>
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <display_init+0x1f8>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	3328      	adds	r3, #40	; 0x28
 8001bce:	443b      	add	r3, r7
 8001bd0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <display_init+0x200>)
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <display_init+0x208>)
 8001bda:	789a      	ldrb	r2, [r3, #2]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <display_init+0x1fc>)
 8001bde:	701a      	strb	r2, [r3, #0]

init++;
 8001be0:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <display_init+0x1f8>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <display_init+0x1f8>)
 8001bea:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <display_init+0x1ec>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
 8001bf2:	f7ff fda1 	bl	8001738 <SPI_command>
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <display_init+0x1ec>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <display_init+0x20c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	801a      	strh	r2, [r3, #0]

		 }

*/

}
 8001c02:	bf00      	nop
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	08007660 	.word	0x08007660
 8001c10:	20001320 	.word	0x20001320
 8001c14:	20001312 	.word	0x20001312
 8001c18:	20001330 	.word	0x20001330
 8001c1c:	20001321 	.word	0x20001321
 8001c20:	20001322 	.word	0x20001322
 8001c24:	2000131e 	.word	0x2000131e
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	20001324 	.word	0x20001324
 8001c30:	2000131a 	.word	0x2000131a

08001c34 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scaning
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001c3a:	4b6c      	ldr	r3, [pc, #432]	; (8001dec <display_update+0x1b8>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	2b11      	cmp	r3, #17
 8001c42:	d870      	bhi.n	8001d26 <display_update+0xf2>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <display_update+0x18>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c95 	.word	0x08001c95
 8001c50:	08001cd5 	.word	0x08001cd5
 8001c54:	08001cf3 	.word	0x08001cf3
 8001c58:	08001d27 	.word	0x08001d27
 8001c5c:	08001d27 	.word	0x08001d27
 8001c60:	08001d27 	.word	0x08001d27
 8001c64:	08001d27 	.word	0x08001d27
 8001c68:	08001d27 	.word	0x08001d27
 8001c6c:	08001d27 	.word	0x08001d27
 8001c70:	08001d27 	.word	0x08001d27
 8001c74:	08001d27 	.word	0x08001d27
 8001c78:	08001d27 	.word	0x08001d27
 8001c7c:	08001d27 	.word	0x08001d27
 8001c80:	08001d27 	.word	0x08001d27
 8001c84:	08001d27 	.word	0x08001d27
 8001c88:	08001d27 	.word	0x08001d27
 8001c8c:	08001d27 	.word	0x08001d27
 8001c90:	08001d07 	.word	0x08001d07


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 8001c94:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <display_update+0x1bc>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <display_update+0x1c0>)
 8001ca6:	801a      	strh	r2, [r3, #0]
 8001ca8:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <display_update+0x1bc>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <display_update+0x1bc>)
 8001cb2:	811a      	strh	r2, [r3, #8]
 8001cb4:	4b4e      	ldr	r3, [pc, #312]	; (8001df0 <display_update+0x1bc>)
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <display_update+0x1bc>)
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <display_update+0x1b8>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <display_update+0x1b8>)
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e038      	b.n	8001d46 <display_update+0x112>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 8001cd4:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <display_update+0x1bc>)
 8001cd6:	891b      	ldrh	r3, [r3, #8]
 8001cd8:	3330      	adds	r3, #48	; 0x30
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <display_update+0x1c0>)
 8001ce2:	801a      	strh	r2, [r3, #0]
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <display_update+0x1b8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <display_update+0x1b8>)
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e029      	b.n	8001d46 <display_update+0x112>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 8001cf2:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <display_update+0x1bc>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	80da      	strh	r2, [r3, #6]
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <display_update+0x1b8>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <display_update+0x1b8>)
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e01f      	b.n	8001d46 <display_update+0x112>
case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <display_update+0x1bc>)
 8001d08:	889b      	ldrh	r3, [r3, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <display_update+0x1bc>)
 8001d16:	809a      	strh	r2, [r3, #4]
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <display_update+0x1bc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	80da      	strh	r2, [r3, #6]
 8001d1e:	4b33      	ldr	r3, [pc, #204]	; (8001dec <display_update+0x1b8>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e00f      	b.n	8001d46 <display_update+0x112>
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <display_update+0x1bc>)
 8001d28:	88db      	ldrh	r3, [r3, #6]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <display_update+0x1bc>)
 8001d36:	80da      	strh	r2, [r3, #6]
 8001d38:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <display_update+0x1b8>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <display_update+0x1b8>)
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 8001d46:	4b29      	ldr	r3, [pc, #164]	; (8001dec <display_update+0x1b8>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d007      	beq.n	8001d5e <display_update+0x12a>
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <display_update+0x1b8>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d003      	beq.n	8001d5e <display_update+0x12a>
 8001d56:	4b25      	ldr	r3, [pc, #148]	; (8001dec <display_update+0x1b8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d104      	bne.n	8001d68 <display_update+0x134>
 8001d5e:	4b25      	ldr	r3, [pc, #148]	; (8001df4 <display_update+0x1c0>)
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <display_update+0x1c0>)
 8001d64:	801a      	strh	r2, [r3, #0]
 8001d66:	e00d      	b.n	8001d84 <display_update+0x150>
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <display_update+0x1bc>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <display_update+0x1bc>)
 8001d70:	88db      	ldrh	r3, [r3, #6]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a20      	ldr	r2, [pc, #128]	; (8001df8 <display_update+0x1c4>)
 8001d76:	0103      	lsls	r3, r0, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b1c      	ldr	r3, [pc, #112]	; (8001df4 <display_update+0x1c0>)
 8001d82:	801a      	strh	r2, [r3, #0]



		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <display_update+0x1c0>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <display_update+0x164>
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <display_update+0x1c8>)
 8001d92:	22f8      	movs	r2, #248	; 0xf8
 8001d94:	701a      	strb	r2, [r3, #0]
 8001d96:	e002      	b.n	8001d9e <display_update+0x16a>
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <display_update+0x1c8>)
 8001d9a:	22fa      	movs	r2, #250	; 0xfa
 8001d9c:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <display_update+0x1c8>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <display_update+0x1c0>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <display_update+0x1c0>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 8001dbc:	4639      	mov	r1, r7
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	480f      	ldr	r0, [pc, #60]	; (8001e00 <display_update+0x1cc>)
 8001dc4:	f004 fa7c 	bl	80062c0 <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <display_update+0x1bc>)
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <display_update+0x1b8>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <display_update+0x1bc>)
 8001dd8:	88db      	ldrh	r3, [r3, #6]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <display_update+0x1d0>)
 8001de2:	701a      	strb	r2, [r3, #0]


}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200005b0 	.word	0x200005b0
 8001df0:	2000194c 	.word	0x2000194c
 8001df4:	2000131e 	.word	0x2000131e
 8001df8:	20001508 	.word	0x20001508
 8001dfc:	2000131c 	.word	0x2000131c
 8001e00:	200006e4 	.word	0x200006e4
 8001e04:	2000195a 	.word	0x2000195a

08001e08 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <display_fill+0x58>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
for (n=0;n<512;n++)	{ //fills up gfx ram or not
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <display_fill+0x5c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	e013      	b.n	8001e42 <display_fill+0x3a>

enc2_dir=(n>>2)+menu_page[1];
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <display_fill+0x5c>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <display_fill+0x60>)
 8001e24:	785b      	ldrb	r3, [r3, #1]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <display_fill+0x64>)
 8001e30:	801a      	strh	r2, [r3, #0]

displayBuffer();
 8001e32:	f000 f81d 	bl	8001e70 <displayBuffer>
for (n=0;n<512;n++)	{ //fills up gfx ram or not
 8001e36:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <display_fill+0x5c>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <display_fill+0x5c>)
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <display_fill+0x5c>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4a:	d3e6      	bcc.n	8001e1a <display_fill+0x12>
}
enc2_dir=menu_page[1]*2;  // end clean
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <display_fill+0x60>)
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b21a      	sxth	r2, r3
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <display_fill+0x64>)
 8001e5a:	801a      	strh	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	2000195b 	.word	0x2000195b
 8001e64:	20000a36 	.word	0x20000a36
 8001e68:	20001330 	.word	0x20001330
 8001e6c:	20001312 	.word	0x20001312

08001e70 <displayBuffer>:

	// if(store_c>239) {lcd_feedback(); }

}
*/
void displayBuffer (void){        //  only cursor , maybe cycle a set of position inc blink before moving cursor
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0

//uint8_t count_lut[44]={48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,103,104,105,106,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89};
//uint16_t lcd_menuB;  // select upper or lower


	switch(disp_stepper){   // various cursor positions that always updated
 8001e76:	4b74      	ldr	r3, [pc, #464]	; (8002048 <displayBuffer+0x1d8>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d81d      	bhi.n	8001eba <displayBuffer+0x4a>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <displayBuffer+0x14>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001e95 	.word	0x08001e95
 8001e88:	08001ea3 	.word	0x08001ea3
 8001e8c:	08001eab 	.word	0x08001eab
 8001e90:	08001eb3 	.word	0x08001eb3
	//case 1:init_b=enc2_lut[enc2_dir] ;break;
	case 0:init_b=enc2_dir;break; // cursor position
 8001e94:	4b6d      	ldr	r3, [pc, #436]	; (800204c <displayBuffer+0x1dc>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <displayBuffer+0x1e0>)
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e00c      	b.n	8001ebc <displayBuffer+0x4c>
	case 1:init_b=115 ;break; // bottom info line
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <displayBuffer+0x1e0>)
 8001ea4:	2273      	movs	r2, #115	; 0x73
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e008      	b.n	8001ebc <displayBuffer+0x4c>
	case 2:init_b=116 ;break;
 8001eaa:	4b69      	ldr	r3, [pc, #420]	; (8002050 <displayBuffer+0x1e0>)
 8001eac:	2274      	movs	r2, #116	; 0x74
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	e004      	b.n	8001ebc <displayBuffer+0x4c>
	case 3:init_b=117 ;break;
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <displayBuffer+0x1e0>)
 8001eb4:	2275      	movs	r2, #117	; 0x75
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	e000      	b.n	8001ebc <displayBuffer+0x4c>


	default :break;
 8001eba:	bf00      	nop
	}
	uint8_t d_count;
uint8_t init_x=((init_b>>4)<<3);
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <displayBuffer+0x1e0>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	71bb      	strb	r3, [r7, #6]
uint8_t init_y=init_b&15;
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <displayBuffer+0x1e0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	717b      	strb	r3, [r7, #5]
uint16_t store_x;



store_c= disp_lut [init_b>>4]  [init_y] ;  //gets potvalues pointer from menus ,works
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <displayBuffer+0x1e0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	797b      	ldrb	r3, [r7, #5]
 8001ede:	495d      	ldr	r1, [pc, #372]	; (8002054 <displayBuffer+0x1e4>)
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001ee8:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <displayBuffer+0x1e8>)
 8001eea:	801a      	strh	r2, [r3, #0]
if (disp_stepper==0) lcd_out3=potSource[store_c-128];
 8001eec:	4b56      	ldr	r3, [pc, #344]	; (8002048 <displayBuffer+0x1d8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <displayBuffer+0x94>
 8001ef4:	4b58      	ldr	r3, [pc, #352]	; (8002058 <displayBuffer+0x1e8>)
 8001ef6:	881b      	ldrh	r3, [r3, #0]
 8001ef8:	3b80      	subs	r3, #128	; 0x80
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <displayBuffer+0x1ec>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	4b57      	ldr	r3, [pc, #348]	; (8002060 <displayBuffer+0x1f0>)
 8001f02:	801a      	strh	r2, [r3, #0]
//if (init_b==enc2_dir) lcd_out3=potSource[store_c-128];   // feedback line output change to whatever
//if (init_b==enc2_dir) lcd_out3=potValues[store_c-128];   // feedback line output change to whatever

//if (store_c<64) store_c=64; // just in case , causes issues with char

	 if (store_c==64) store_c=47;
 8001f04:	4b54      	ldr	r3, [pc, #336]	; (8002058 <displayBuffer+0x1e8>)
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2b40      	cmp	r3, #64	; 0x40
 8001f0a:	d102      	bne.n	8001f12 <displayBuffer+0xa2>
 8001f0c:	4b52      	ldr	r3, [pc, #328]	; (8002058 <displayBuffer+0x1e8>)
 8001f0e:	222f      	movs	r2, #47	; 0x2f
 8001f10:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {store_c= potValues[store_c&127]+48;}		// sets data or stored
 8001f12:	4b51      	ldr	r3, [pc, #324]	; (8002058 <displayBuffer+0x1e8>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	2b7f      	cmp	r3, #127	; 0x7f
 8001f18:	d90e      	bls.n	8001f38 <displayBuffer+0xc8>
 8001f1a:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <displayBuffer+0x1e8>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	2bfe      	cmp	r3, #254	; 0xfe
 8001f20:	d80a      	bhi.n	8001f38 <displayBuffer+0xc8>
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <displayBuffer+0x1e8>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2a:	4a4e      	ldr	r2, [pc, #312]	; (8002064 <displayBuffer+0x1f4>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3330      	adds	r3, #48	; 0x30
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <displayBuffer+0x1e8>)
 8001f36:	801a      	strh	r2, [r3, #0]
	if (store_c>254){store_c= potValues[store_c-128]+48;}
 8001f38:	4b47      	ldr	r3, [pc, #284]	; (8002058 <displayBuffer+0x1e8>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2bfe      	cmp	r3, #254	; 0xfe
 8001f3e:	d909      	bls.n	8001f54 <displayBuffer+0xe4>
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <displayBuffer+0x1e8>)
 8001f42:	881b      	ldrh	r3, [r3, #0]
 8001f44:	3b80      	subs	r3, #128	; 0x80
 8001f46:	4a47      	ldr	r2, [pc, #284]	; (8002064 <displayBuffer+0x1f4>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3330      	adds	r3, #48	; 0x30
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b41      	ldr	r3, [pc, #260]	; (8002058 <displayBuffer+0x1e8>)
 8001f52:	801a      	strh	r2, [r3, #0]

store_c=store_c-47; store_c = store_c &127;	spell[init_b] = store_c ;  // spell no longer ?, store_c changes
 8001f54:	4b40      	ldr	r3, [pc, #256]	; (8002058 <displayBuffer+0x1e8>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	3b2f      	subs	r3, #47	; 0x2f
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <displayBuffer+0x1e8>)
 8001f5e:	801a      	strh	r2, [r3, #0]
 8001f60:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <displayBuffer+0x1e8>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	4b3b      	ldr	r3, [pc, #236]	; (8002058 <displayBuffer+0x1e8>)
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <displayBuffer+0x1e8>)
 8001f70:	8819      	ldrh	r1, [r3, #0]
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <displayBuffer+0x1e0>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	b2c9      	uxtb	r1, r1
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <displayBuffer+0x1f8>)
 8001f7c:	5499      	strb	r1, [r3, r2]
//if ((seq_pos&1) && (store_c) && (init_b==enc2_dir)) store_c=0; // blinker ok for now ,slow might need other separate code for this
//if (seq_pos&1)  {if (store_c) {  store_c=0;} else store_c=48;}
 // if   (disp_stepper==1)      {  store_c=1;}
//lcd_out3=potSource[store_c-128]; // just feedback
store_x=(store_c*8);
 8001f7e:	4b36      	ldr	r3, [pc, #216]	; (8002058 <displayBuffer+0x1e8>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	807b      	strh	r3, [r7, #2]


if (( !loop_counter3) && (disp_stepper==0))
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <displayBuffer+0x1fc>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d123      	bne.n	8001fd6 <displayBuffer+0x166>
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <displayBuffer+0x1d8>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11f      	bne.n	8001fd6 <displayBuffer+0x166>
	for (d_count=0;d_count<7;d_count++){
 8001f96:	2300      	movs	r3, #0
 8001f98:	71fb      	strb	r3, [r7, #7]
 8001f9a:	e018      	b.n	8001fce <displayBuffer+0x15e>
						gfx_ram[d_count+(init_x&63)] [init_y&15] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere
 8001f9c:	79fa      	ldrb	r2, [r7, #7]
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a33      	ldr	r2, [pc, #204]	; (8002070 <displayBuffer+0x200>)
 8001fa4:	5cd1      	ldrb	r1, [r2, r3]
 8001fa6:	79fa      	ldrb	r2, [r7, #7]
 8001fa8:	79bb      	ldrb	r3, [r7, #6]
 8001faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fae:	441a      	add	r2, r3
 8001fb0:	797b      	ldrb	r3, [r7, #5]
 8001fb2:	f003 030f 	and.w	r3, r3, #15
 8001fb6:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 8001fba:	b2c8      	uxtb	r0, r1
 8001fbc:	492d      	ldr	r1, [pc, #180]	; (8002074 <displayBuffer+0x204>)
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	440a      	add	r2, r1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d9e3      	bls.n	8001f9c <displayBuffer+0x12c>
if (( !loop_counter3) && (disp_stepper==0))
 8001fd4:	e01b      	b.n	800200e <displayBuffer+0x19e>
	}
else for (d_count=0;d_count<7;d_count++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	e015      	b.n	8002008 <displayBuffer+0x198>
	gfx_ram[d_count+(init_x&63)] [init_y&15] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere
 8001fdc:	79fa      	ldrb	r2, [r7, #7]
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	18d1      	adds	r1, r2, r3
 8001fe2:	79fa      	ldrb	r2, [r7, #7]
 8001fe4:	79bb      	ldrb	r3, [r7, #6]
 8001fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fea:	441a      	add	r2, r3
 8001fec:	797b      	ldrb	r3, [r7, #5]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	481f      	ldr	r0, [pc, #124]	; (8002070 <displayBuffer+0x200>)
 8001ff4:	5c40      	ldrb	r0, [r0, r1]
 8001ff6:	491f      	ldr	r1, [pc, #124]	; (8002074 <displayBuffer+0x204>)
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	440a      	add	r2, r1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4602      	mov	r2, r0
 8002000:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	3301      	adds	r3, #1
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	2b06      	cmp	r3, #6
 800200c:	d9e6      	bls.n	8001fdc <displayBuffer+0x16c>
}


gfx_ram[7+init_x] [init_y] = 0; // last line is blank between rows
 800200e:	79bb      	ldrb	r3, [r7, #6]
 8002010:	1dda      	adds	r2, r3, #7
 8002012:	797b      	ldrb	r3, [r7, #5]
 8002014:	4917      	ldr	r1, [pc, #92]	; (8002074 <displayBuffer+0x204>)
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	440a      	add	r2, r1
 800201a:	4413      	add	r3, r2
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
if (disp_stepper==3) disp_stepper=0; else disp_stepper++;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <displayBuffer+0x1d8>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d103      	bne.n	8002030 <displayBuffer+0x1c0>
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <displayBuffer+0x1d8>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]

//	if (init_b==119) init_b=0; else init_b++;   // character position  dont need

	// if(store_c>239) {lcd_feedback(); }

}
 800202e:	e005      	b.n	800203c <displayBuffer+0x1cc>
if (disp_stepper==3) disp_stepper=0; else disp_stepper++;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <displayBuffer+0x1d8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <displayBuffer+0x1d8>)
 800203a:	701a      	strb	r2, [r3, #0]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	200005bd 	.word	0x200005bd
 800204c:	20001312 	.word	0x20001312
 8002050:	20001322 	.word	0x20001322
 8002054:	08007720 	.word	0x08007720
 8002058:	20000a34 	.word	0x20000a34
 800205c:	200008fc 	.word	0x200008fc
 8002060:	20001958 	.word	0x20001958
 8002064:	200007fc 	.word	0x200007fc
 8002068:	20000000 	.word	0x20000000
 800206c:	2000195b 	.word	0x2000195b
 8002070:	200001b0 	.word	0x200001b0
 8002074:	20001508 	.word	0x20001508

08002078 <sampling>:
spell[148+n]=spell[108+n];
}
}


void sampling(void){						// 18 ms of data
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b092      	sub	sp, #72	; 0x48
 800207c:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 800207e:	4bb2      	ldr	r3, [pc, #712]	; (8002348 <sampling+0x2d0>)
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	4bb2      	ldr	r3, [pc, #712]	; (800234c <sampling+0x2d4>)
 8002084:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002086:	2300      	movs	r3, #0
 8002088:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm
 800208c:	4bb0      	ldr	r3, [pc, #704]	; (8002350 <sampling+0x2d8>)
 800208e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002092:	461a      	mov	r2, r3
 8002094:	4baf      	ldr	r3, [pc, #700]	; (8002354 <sampling+0x2dc>)
 8002096:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800209a:	86fb      	strh	r3, [r7, #54]	; 0x36

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80 
 800209c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da00      	bge.n	80020a4 <sampling+0x2c>
 80020a2:	331f      	adds	r3, #31
 80020a4:	115b      	asrs	r3, r3, #5
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
tempo_sync=tempo_sync/80;
 80020bc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80020c0:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8002358 <sampling+0x2e0>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30


for (l=0;l<10;l++){
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80020d2:	e09d      	b.n	8002210 <sampling+0x198>
	
	
	freq_temp=potSource[130+l];
 80020d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020d8:	3382      	adds	r3, #130	; 0x82
 80020da:	4a9d      	ldr	r2, [pc, #628]	; (8002350 <sampling+0x2d8>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	freq2_temp=freq_temp*tempo_sync; //correction to one note per cycle 
 80020ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80020ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f6:	edc7 7a08 	vstr	s15, [r7, #32]
	//freq2_temp=freq_temp;
	freq_temp=lfo_accu[l]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar 
 80020fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80020fe:	4a97      	ldr	r2, [pc, #604]	; (800235c <sampling+0x2e4>)
 8002100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002114:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	// temp0*16isr*8notes=(1/tempo)*128		@80 rate is 1 bar/8note?  @ tempo*128 count ie@300 temp : 38400tempo countis at freq_temp=8192 freq_temp+1=4.6

if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
 8002118:	4b91      	ldr	r3, [pc, #580]	; (8002360 <sampling+0x2e8>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	2b31      	cmp	r3, #49	; 0x31
 800211e:	d808      	bhi.n	8002132 <sampling+0xba>
 8002120:	4b90      	ldr	r3, [pc, #576]	; (8002364 <sampling+0x2ec>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d102      	bne.n	8002132 <sampling+0xba>
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
if (freq_temp>16384) lfo_accu[l]=freq_temp-16384; else lfo_accu[l]=freq_temp; // write back value
 8002132:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002136:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8002368 <sampling+0x2f0>
 800213a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	dd10      	ble.n	8002166 <sampling+0xee>
 8002144:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002148:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002368 <sampling+0x2f0>
 800214c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002158:	ee17 2a90 	vmov	r2, s15
 800215c:	b291      	uxth	r1, r2
 800215e:	4a7f      	ldr	r2, [pc, #508]	; (800235c <sampling+0x2e4>)
 8002160:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002164:	e00b      	b.n	800217e <sampling+0x106>
 8002166:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800216a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800216e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002172:	ee17 2a90 	vmov	r2, s15
 8002176:	b291      	uxth	r1, r2
 8002178:	4a78      	ldr	r2, [pc, #480]	; (800235c <sampling+0x2e4>)
 800217a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
freq_temp=lfo_accu[l]; // 0-255 limit + above zero
 800217e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002182:	4a76      	ldr	r2, [pc, #472]	; (800235c <sampling+0x2e4>)
 8002184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002190:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002196:	f7fe faad 	bl	80006f4 <__aeabi_f2d>
 800219a:	a367      	add	r3, pc, #412	; (adr r3, 8002338 <sampling+0x2c0>)
 800219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a0:	f7fe f81a 	bl	80001d8 <__aeabi_dmul>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fb82 	bl	80008b4 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	63fb      	str	r3, [r7, #60]	; 0x3c
freq2_temp =arm_sin_f32(freq_temp); // seems to be working
 80021b4:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80021b8:	f005 f9d6 	bl	8007568 <arm_sin_f32>
 80021bc:	ed87 0a08 	vstr	s0, [r7, #32]
freq_temp=freq2_temp*potSource[140+l]*51;
 80021c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021c4:	338c      	adds	r3, #140	; 0x8c
 80021c6:	4a62      	ldr	r2, [pc, #392]	; (8002350 <sampling+0x2d8>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	ed9f 7a64 	vldr	s14, [pc, #400]	; 800236c <sampling+0x2f4>
 80021de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
lfo_out[l]=freq_temp+8195; // all ok
 80021e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021ea:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002370 <sampling+0x2f8>
 80021ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80021f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fa:	ee17 2a90 	vmov	r2, s15
 80021fe:	b211      	sxth	r1, r2
 8002200:	4a5c      	ldr	r2, [pc, #368]	; (8002374 <sampling+0x2fc>)
 8002202:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (l=0;l<10;l++){
 8002206:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800220a:	3301      	adds	r3, #1
 800220c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002210:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002214:	2b09      	cmp	r3, #9
 8002216:	f67f af5d 	bls.w	80020d4 <sampling+0x5c>

} // lfo gen : 0=f1 , 1=tempo,2=pitch


	freq_point[0]=lfo_out[0]*0.00006435; //sine seem to overload at fully open but only with filter engaged 
 800221a:	4b56      	ldr	r3, [pc, #344]	; (8002374 <sampling+0x2fc>)
 800221c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fa55 	bl	80006d0 <__aeabi_i2d>
 8002226:	a346      	add	r3, pc, #280	; (adr r3, 8002340 <sampling+0x2c8>)
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fd ffd4 	bl	80001d8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fb3c 	bl	80008b4 <__aeabi_d2f>
 800223c:	4603      	mov	r3, r0
 800223e:	4a4e      	ldr	r2, [pc, #312]	; (8002378 <sampling+0x300>)
 8002240:	6013      	str	r3, [r2, #0]
freq_point[2]=lfo_out[3]*0.00006435;;
 8002242:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <sampling+0x2fc>)
 8002244:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fa41 	bl	80006d0 <__aeabi_i2d>
 800224e:	a33c      	add	r3, pc, #240	; (adr r3, 8002340 <sampling+0x2c8>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fd ffc0 	bl	80001d8 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fb28 	bl	80008b4 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4a44      	ldr	r2, [pc, #272]	; (8002378 <sampling+0x300>)
 8002268:	6093      	str	r3, [r2, #8]



//lcd_out3=potSource[130]; // 3 digit read out , works ok
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;
 800226a:	4b44      	ldr	r3, [pc, #272]	; (800237c <sampling+0x304>)
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	4a44      	ldr	r2, [pc, #272]	; (8002380 <sampling+0x308>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	095b      	lsrs	r3, r3, #5
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <sampling+0x2d8>)
 8002280:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 8002284:	4b3d      	ldr	r3, [pc, #244]	; (800237c <sampling+0x304>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	4a3d      	ldr	r2, [pc, #244]	; (8002380 <sampling+0x308>)
 800228a:	fba2 1203 	umull	r1, r2, r2, r3
 800228e:	0952      	lsrs	r2, r2, #5
 8002290:	2164      	movs	r1, #100	; 0x64
 8002292:	fb01 f202 	mul.w	r2, r1, r2
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	4a3a      	ldr	r2, [pc, #232]	; (8002384 <sampling+0x30c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <sampling+0x2d8>)
 80022ac:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <sampling+0x304>)
 80022b2:	881a      	ldrh	r2, [r3, #0]
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <sampling+0x30c>)
 80022b6:	fba3 1302 	umull	r1, r3, r3, r2
 80022ba:	08d9      	lsrs	r1, r3, #3
 80022bc:	460b      	mov	r3, r1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <sampling+0x2d8>)
 80022d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <sampling+0x310>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
int32_t filter_Accu;

//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
//sample_Accu2=0;
//printf ("crap");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <sampling+0x314>)
 80022e2:	463c      	mov	r4, r7
 80022e4:	461d      	mov	r5, r3
 80022e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ea:	682b      	ldr	r3, [r5, #0]
 80022ec:	7023      	strb	r3, [r4, #0]
if(adc_values[2]&16)	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 80022ee:	4b28      	ldr	r3, [pc, #160]	; (8002390 <sampling+0x318>)
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00e      	beq.n	8002318 <sampling+0x2a0>
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <sampling+0x318>)
 80022fc:	789b      	ldrb	r3, [r3, #2]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3348      	adds	r3, #72	; 0x48
 8002304:	443b      	add	r3, r7
 8002306:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800230a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800230e:	b2db      	uxtb	r3, r3
 8002310:	757b      	strb	r3, [r7, #21]
 8002312:	237f      	movs	r3, #127	; 0x7f
 8002314:	75bb      	strb	r3, [r7, #22]
 8002316:	e00a      	b.n	800232e <sampling+0x2b6>
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <sampling+0x318>)
 800231a:	789b      	ldrb	r3, [r3, #2]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	3348      	adds	r3, #72	; 0x48
 8002322:	443b      	add	r3, r7
 8002324:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002328:	75bb      	strb	r3, [r7, #22]
 800232a:	237f      	movs	r3, #127	; 0x7f
 800232c:	757b      	strb	r3, [r7, #21]
// doing lfo calc here as it is slow only for now


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <sampling+0x31c>)
 8002330:	2200      	movs	r2, #0
 8002332:	801a      	strh	r2, [r3, #0]
 8002334:	e3fc      	b.n	8002b30 <sampling+0xab8>
 8002336:	bf00      	nop
 8002338:	7bb1a72c 	.word	0x7bb1a72c
 800233c:	3f3921fa 	.word	0x3f3921fa
 8002340:	94fd52a7 	.word	0x94fd52a7
 8002344:	3f10de74 	.word	0x3f10de74
 8002348:	20001262 	.word	0x20001262
 800234c:	20000a56 	.word	0x20000a56
 8002350:	200008fc 	.word	0x200008fc
 8002354:	200013c4 	.word	0x200013c4
 8002358:	42a00000 	.word	0x42a00000
 800235c:	2000139c 	.word	0x2000139c
 8002360:	20001316 	.word	0x20001316
 8002364:	200012c2 	.word	0x200012c2
 8002368:	46800000 	.word	0x46800000
 800236c:	424c0000 	.word	0x424c0000
 8002370:	46000c00 	.word	0x46000c00
 8002374:	200013b0 	.word	0x200013b0
 8002378:	2000138c 	.word	0x2000138c
 800237c:	20001958 	.word	0x20001958
 8002380:	51eb851f 	.word	0x51eb851f
 8002384:	cccccccd 	.word	0xcccccccd
 8002388:	200012cf 	.word	0x200012cf
 800238c:	08007684 	.word	0x08007684
 8002390:	200001a8 	.word	0x200001a8
 8002394:	20000a58 	.word	0x20000a58

	i_total=i+sample_pointB;
 8002398:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <sampling+0x568>)
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <sampling+0x56c>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	85bb      	strh	r3, [r7, #44]	; 0x2c

	note_plain=potValues[seq_pos & 7 ];
 80023a4:	4b90      	ldr	r3, [pc, #576]	; (80025e8 <sampling+0x570>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4a8f      	ldr	r2, [pc, #572]	; (80025ec <sampling+0x574>)
 80023ae:	5cd3      	ldrb	r3, [r2, r3]
 80023b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
potValues[i&255]=potSource[i&255]>>4; //just to update values 
 80023b4:	4b8a      	ldr	r3, [pc, #552]	; (80025e0 <sampling+0x568>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	4a8d      	ldr	r2, [pc, #564]	; (80025f0 <sampling+0x578>)
 80023bc:	5cd2      	ldrb	r2, [r2, r3]
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <sampling+0x568>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	0912      	lsrs	r2, r2, #4
 80023c6:	b2d1      	uxtb	r1, r2
 80023c8:	4a88      	ldr	r2, [pc, #544]	; (80025ec <sampling+0x574>)
 80023ca:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+1) & 4095;tempo_count=0;adsr();  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80023cc:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <sampling+0x57c>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d80e      	bhi.n	80023f4 <sampling+0x37c>
 80023d6:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <sampling+0x580>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	3301      	adds	r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <sampling+0x580>)
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <sampling+0x57c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	f000 fbb7 	bl	8002b60 <adsr>
 80023f2:	e005      	b.n	8002400 <sampling+0x388>
 80023f4:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <sampling+0x57c>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <sampling+0x57c>)
 80023fe:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400 
	tempo_start=0;
 8002400:	2300      	movs	r3, #0
 8002402:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	if ((next_isr>>4) != seq_pos) { 					// next note step 140ms
 8002406:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <sampling+0x580>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	b29a      	uxth	r2, r3
 800240e:	4b76      	ldr	r3, [pc, #472]	; (80025e8 <sampling+0x570>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	429a      	cmp	r2, r3
 8002416:	d009      	beq.n	800242c <sampling+0x3b4>
		seq_pos=next_isr>>4; // seq pos =256 max , isr = 1/16 of a note
 8002418:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <sampling+0x580>)
 800241a:	881b      	ldrh	r3, [r3, #0]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	b29b      	uxth	r3, r3
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4b71      	ldr	r3, [pc, #452]	; (80025e8 <sampling+0x570>)
 8002424:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002426:	2301      	movs	r3, #1
 8002428:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

}


	if(tempo_start  )    // this helps alot to slow down,only on note change 16xisr maybe clear everythign before hand  and sample and hold and zero means no change
 800242c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 8124 	beq.w	800267e <sampling+0x606>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=adc_values[0]>>1; //assigned pots to start of loopers 0-16,works
 8002436:	4b71      	ldr	r3, [pc, #452]	; (80025fc <sampling+0x584>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b6b      	ldr	r3, [pc, #428]	; (80025ec <sampling+0x574>)
 8002440:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=adc_values[1]>>1;
 8002444:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <sampling+0x584>)
 8002446:	785b      	ldrb	r3, [r3, #1]
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b67      	ldr	r3, [pc, #412]	; (80025ec <sampling+0x574>)
 800244e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 8002452:	4b66      	ldr	r3, [pc, #408]	; (80025ec <sampling+0x574>)
 8002454:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002458:	4b63      	ldr	r3, [pc, #396]	; (80025e8 <sampling+0x570>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4413      	add	r3, r2
 8002464:	b2db      	uxtb	r3, r3
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b2da      	uxtb	r2, r3
 800246c:	4b64      	ldr	r3, [pc, #400]	; (8002600 <sampling+0x588>)
 800246e:	709a      	strb	r2, [r3, #2]
		
		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 8002470:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <sampling+0x574>)
 8002472:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002476:	4b5c      	ldr	r3, [pc, #368]	; (80025e8 <sampling+0x570>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <sampling+0x588>)
 8002486:	70da      	strb	r2, [r3, #3]
		
			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8002488:	4b58      	ldr	r3, [pc, #352]	; (80025ec <sampling+0x574>)
 800248a:	f893 2020 	ldrb.w	r2, [r3, #32]
 800248e:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <sampling+0x570>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4413      	add	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b57      	ldr	r3, [pc, #348]	; (8002600 <sampling+0x588>)
 80024a4:	711a      	strb	r2, [r3, #4]
			
		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 80024a6:	4b56      	ldr	r3, [pc, #344]	; (8002600 <sampling+0x588>)
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	3350      	adds	r3, #80	; 0x50
 80024ac:	4a4f      	ldr	r2, [pc, #316]	; (80025ec <sampling+0x574>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <sampling+0x574>)
 80024b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	4413      	add	r3, r2
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b51      	ldr	r3, [pc, #324]	; (8002604 <sampling+0x58c>)
 80024c0:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80024c2:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <sampling+0x588>)
 80024c4:	78db      	ldrb	r3, [r3, #3]
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b48      	ldr	r3, [pc, #288]	; (80025ec <sampling+0x574>)
 80024ca:	5c9b      	ldrb	r3, [r3, r2]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	4b4d      	ldr	r3, [pc, #308]	; (8002604 <sampling+0x58c>)
 80024d0:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) note_channel[3]=note_channel[3]+potValues[73]; // stay at zero for off
 80024d2:	4b4c      	ldr	r3, [pc, #304]	; (8002604 <sampling+0x58c>)
 80024d4:	88db      	ldrh	r3, [r3, #6]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <sampling+0x476>
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <sampling+0x58c>)
 80024dc:	88da      	ldrh	r2, [r3, #6]
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <sampling+0x574>)
 80024e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <sampling+0x58c>)
 80024ec:	80da      	strh	r2, [r3, #6]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);
	
	if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // nothing
 80024ee:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <sampling+0x570>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <sampling+0x492>
 80024fa:	4b43      	ldr	r3, [pc, #268]	; (8002608 <sampling+0x590>)
 80024fc:	799b      	ldrb	r3, [r3, #6]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d103      	bne.n	800250a <sampling+0x492>
 8002502:	4b42      	ldr	r3, [pc, #264]	; (800260c <sampling+0x594>)
 8002504:	2201      	movs	r2, #1
 8002506:	819a      	strh	r2, [r3, #12]
 8002508:	e002      	b.n	8002510 <sampling+0x498>
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <sampling+0x594>)
 800250c:	2200      	movs	r2, #0
 800250e:	819a      	strh	r2, [r3, #12]


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <sampling+0x570>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	3350      	adds	r3, #80	; 0x50
 800251a:	4a34      	ldr	r2, [pc, #208]	; (80025ec <sampling+0x574>)
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	b29a      	uxth	r2, r3
 8002520:	4b38      	ldr	r3, [pc, #224]	; (8002604 <sampling+0x58c>)
 8002522:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also
 8002524:	4b37      	ldr	r3, [pc, #220]	; (8002604 <sampling+0x58c>)
 8002526:	895b      	ldrh	r3, [r3, #10]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <sampling+0x4cc>
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <sampling+0x590>)
 800252e:	795b      	ldrb	r3, [r3, #5]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d107      	bne.n	8002544 <sampling+0x4cc>
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <sampling+0x58c>)
 8002536:	895b      	ldrh	r3, [r3, #10]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <sampling+0x598>)
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	4b35      	ldr	r3, [pc, #212]	; (8002614 <sampling+0x59c>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]

	
	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  // 
 8002544:	4b2e      	ldr	r3, [pc, #184]	; (8002600 <sampling+0x588>)
 8002546:	789b      	ldrb	r3, [r3, #2]
 8002548:	3350      	adds	r3, #80	; 0x50
 800254a:	4a28      	ldr	r2, [pc, #160]	; (80025ec <sampling+0x574>)
 800254c:	5cd2      	ldrb	r2, [r2, r3]
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <sampling+0x574>)
 8002550:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002554:	4413      	add	r3, r2
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <sampling+0x598>)
 800255a:	701a      	strb	r2, [r3, #0]
	
	note_holdB=(note_holdB-4)+(lfo_out[2]>>11);
 800255c:	4b2e      	ldr	r3, [pc, #184]	; (8002618 <sampling+0x5a0>)
 800255e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002562:	12db      	asrs	r3, r3, #11
 8002564:	b21b      	sxth	r3, r3
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <sampling+0x598>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4413      	add	r3, r2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3b04      	subs	r3, #4
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <sampling+0x598>)
 8002576:	701a      	strb	r2, [r3, #0]
	note_holdB=MajorNote[note_holdB];
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <sampling+0x598>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b27      	ldr	r3, [pc, #156]	; (800261c <sampling+0x5a4>)
 8002580:	5c9a      	ldrb	r2, [r3, r2]
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <sampling+0x598>)
 8002584:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <sampling+0x598>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <sampling+0x5a8>)
 800258e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <sampling+0x5ac>)
 8002594:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <sampling+0x5ac>)
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	129b      	asrs	r3, r3, #10
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <sampling+0x5ac>)
 80025aa:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <sampling+0x5b0>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]


		sample_Accu[0]=0; // reset to 0 mani sample hold
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <sampling+0x5b4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
		sample_Accu[1]=0; // reset to 0 mani sample hold
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <sampling+0x5b4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	605a      	str	r2, [r3, #4]
		sample_Accu[2]=0; // reset to 0 mani sample hold
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <sampling+0x5b4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
		sample_Accu[3]=0; // reset to 0 mani sample hold
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <sampling+0x5b4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	60da      	str	r2, [r3, #12]
		sample_Accu[4]=0; // reset to 0 mani sample hold
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <sampling+0x5b4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	611a      	str	r2, [r3, #16]
		sample_Accu[5]=0; // reset to 0 mani sample hold
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <sampling+0x5b4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	615a      	str	r2, [r3, #20]
	for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80025dc:	e04b      	b.n	8002676 <sampling+0x5fe>
 80025de:	bf00      	nop
 80025e0:	20000a58 	.word	0x20000a58
 80025e4:	20000a56 	.word	0x20000a56
 80025e8:	20000a30 	.word	0x20000a30
 80025ec:	200007fc 	.word	0x200007fc
 80025f0:	200008fc 	.word	0x200008fc
 80025f4:	20001316 	.word	0x20001316
 80025f8:	200012c2 	.word	0x200012c2
 80025fc:	200001a8 	.word	0x200001a8
 8002600:	20001334 	.word	0x20001334
 8002604:	20001264 	.word	0x20001264
 8002608:	200012c4 	.word	0x200012c4
 800260c:	200012ac 	.word	0x200012ac
 8002610:	200012d0 	.word	0x200012d0
 8002614:	20001308 	.word	0x20001308
 8002618:	200013b0 	.word	0x200013b0
 800261c:	080076a0 	.word	0x080076a0
 8002620:	20000144 	.word	0x20000144
 8002624:	20000a32 	.word	0x20000a32
 8002628:	200012a2 	.word	0x200012a2
 800262c:	20000a38 	.word	0x20000a38

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);}
 8002630:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002634:	4a6d      	ldr	r2, [pc, #436]	; (80027ec <sampling+0x774>)
 8002636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <sampling+0x5f4>
 800263e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002642:	4a6a      	ldr	r2, [pc, #424]	; (80027ec <sampling+0x774>)
 8002644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002648:	461a      	mov	r2, r3
 800264a:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <sampling+0x778>)
 800264c:	5c9b      	ldrb	r3, [r3, r2]
 800264e:	461a      	mov	r2, r3
 8002650:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <sampling+0x77c>)
 8002652:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002656:	461a      	mov	r2, r3
 8002658:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <sampling+0x780>)
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <sampling+0x780>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002664:	b291      	uxth	r1, r2
 8002666:	4a65      	ldr	r2, [pc, #404]	; (80027fc <sampling+0x784>)
 8002668:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 800266c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002670:	3301      	adds	r3, #1
 8002672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800267a:	2b04      	cmp	r3, #4
 800267c:	d9d8      	bls.n	8002630 <sampling+0x5b8>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

	// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
		sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 800267e:	4b60      	ldr	r3, [pc, #384]	; (8002800 <sampling+0x788>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a5e      	ldr	r2, [pc, #376]	; (80027fc <sampling+0x784>)
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <sampling+0x788>)
 800268a:	6013      	str	r3, [r2, #0]

		if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 800268c:	4b5c      	ldr	r3, [pc, #368]	; (8002800 <sampling+0x788>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002694:	db04      	blt.n	80026a0 <sampling+0x628>
 8002696:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <sampling+0x788>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	425b      	negs	r3, r3
 800269c:	4a58      	ldr	r2, [pc, #352]	; (8002800 <sampling+0x788>)
 800269e:	6013      	str	r3, [r2, #0]



		sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <sampling+0x788>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <sampling+0x784>)
 80026a6:	8852      	ldrh	r2, [r2, #2]
 80026a8:	4413      	add	r3, r2
 80026aa:	4a55      	ldr	r2, [pc, #340]	; (8002800 <sampling+0x788>)
 80026ac:	6053      	str	r3, [r2, #4]
			//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
				if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <sampling+0x788>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026b6:	db04      	blt.n	80026c2 <sampling+0x64a>
 80026b8:	4b51      	ldr	r3, [pc, #324]	; (8002800 <sampling+0x788>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	425b      	negs	r3, r3
 80026be:	4a50      	ldr	r2, [pc, #320]	; (8002800 <sampling+0x788>)
 80026c0:	6053      	str	r3, [r2, #4]

				sample_accus[2] = sample_accus[2] + note_tuned[2];
 80026c2:	4b4f      	ldr	r3, [pc, #316]	; (8002800 <sampling+0x788>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a4d      	ldr	r2, [pc, #308]	; (80027fc <sampling+0x784>)
 80026c8:	8892      	ldrh	r2, [r2, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	4a4c      	ldr	r2, [pc, #304]	; (8002800 <sampling+0x788>)
 80026ce:	6093      	str	r3, [r2, #8]
				//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
						if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <sampling+0x788>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026d8:	db04      	blt.n	80026e4 <sampling+0x66c>
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <sampling+0x788>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	425b      	negs	r3, r3
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <sampling+0x788>)
 80026e2:	6093      	str	r3, [r2, #8]

						sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 80026e4:	4b46      	ldr	r3, [pc, #280]	; (8002800 <sampling+0x788>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4a44      	ldr	r2, [pc, #272]	; (80027fc <sampling+0x784>)
 80026ea:	88d2      	ldrh	r2, [r2, #6]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a44      	ldr	r2, [pc, #272]	; (8002800 <sampling+0x788>)
 80026f0:	60d3      	str	r3, [r2, #12]
						//sample_accus[3] = sample_accus[3] +4000;
						//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
								if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <sampling+0x788>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026fa:	db04      	blt.n	8002706 <sampling+0x68e>
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <sampling+0x788>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	425b      	negs	r3, r3
 8002702:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <sampling+0x788>)
 8002704:	60d3      	str	r3, [r2, #12]

								sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <sampling+0x788>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	4a3c      	ldr	r2, [pc, #240]	; (80027fc <sampling+0x784>)
 800270c:	8912      	ldrh	r2, [r2, #8]
 800270e:	4413      	add	r3, r2
 8002710:	4a3b      	ldr	r2, [pc, #236]	; (8002800 <sampling+0x788>)
 8002712:	6113      	str	r3, [r2, #16]
									//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
										if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002714:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <sampling+0x788>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800271c:	db04      	blt.n	8002728 <sampling+0x6b0>
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <sampling+0x788>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	425b      	negs	r3, r3
 8002724:	4a36      	ldr	r2, [pc, #216]	; (8002800 <sampling+0x788>)
 8002726:	6113      	str	r3, [r2, #16]

										sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <sampling+0x78c>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <sampling+0x78c>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <sampling+0x78c>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
										//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
										sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <sampling+0x788>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	11db      	asrs	r3, r3, #7
 8002740:	4a30      	ldr	r2, [pc, #192]	; (8002804 <sampling+0x78c>)
 8002742:	6013      	str	r3, [r2, #0]
							
								sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <sampling+0x78c>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <sampling+0x790>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4413      	add	r3, r2
 800274e:	7d7a      	ldrb	r2, [r7, #21]
 8002750:	fb02 f303 	mul.w	r3, r2, r3
 8002754:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <sampling+0x78c>)
 8002756:	6013      	str	r3, [r2, #0]
								
										//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
										sample_Accu[3]=sample_accus[3];
 8002758:	4b29      	ldr	r3, [pc, #164]	; (8002800 <sampling+0x788>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <sampling+0x78c>)
 800275e:	60d3      	str	r3, [r2, #12]
										sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <sampling+0x78c>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	7dba      	ldrb	r2, [r7, #22]
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4a26      	ldr	r2, [pc, #152]	; (8002804 <sampling+0x78c>)
 800276c:	6093      	str	r3, [r2, #8]
										//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

		//	sample_Accu=sample_Accu-(1<<21);


	if (sine_counterB==0) 	sine_temp2=sine_adder;
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <sampling+0x794>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <sampling+0x706>
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <sampling+0x798>)
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	4b26      	ldr	r3, [pc, #152]	; (8002814 <sampling+0x79c>)
 800277c:	801a      	strh	r2, [r3, #0]

		sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 800277e:	4b23      	ldr	r3, [pc, #140]	; (800280c <sampling+0x794>)
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <sampling+0x79c>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <sampling+0x794>)
 800278c:	801a      	strh	r2, [r3, #0]
		if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 800278e:	4b1f      	ldr	r3, [pc, #124]	; (800280c <sampling+0x794>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	09db      	lsrs	r3, r3, #7
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <sampling+0x728>
 800279a:	2300      	movs	r3, #0
 800279c:	853b      	strh	r3, [r7, #40]	; 0x28
 800279e:	e001      	b.n	80027a4 <sampling+0x72c>
 80027a0:	2301      	movs	r3, #1
 80027a2:	853b      	strh	r3, [r7, #40]	; 0x28

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <sampling+0x794>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <sampling+0x7a0>)
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	015b      	lsls	r3, r3, #5
 80027b0:	429a      	cmp	r2, r3
 80027b2:	dd02      	ble.n	80027ba <sampling+0x742>
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <sampling+0x794>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	801a      	strh	r2, [r3, #0]
	sine_count(); // calc sine
 80027ba:	f000 fad1 	bl	8002d60 <sine_count>

// filter 1


int32_t feedback_out=filter_out[3];
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <sampling+0x7a4>)
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits

sample_Accu[1]=sample_Accu[0];
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <sampling+0x78c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <sampling+0x78c>)
 80027ca:	6053      	str	r3, [r2, #4]


		if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <sampling+0x7a8>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027de:	dd21      	ble.n	8002824 <sampling+0x7ac>
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <sampling+0x7a8>)
 80027e2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e028      	b.n	800283c <sampling+0x7c4>
 80027ea:	bf00      	nop
 80027ec:	20001264 	.word	0x20001264
 80027f0:	080076a0 	.word	0x080076a0
 80027f4:	080076bc 	.word	0x080076bc
 80027f8:	20000a2c 	.word	0x20000a2c
 80027fc:	20000a14 	.word	0x20000a14
 8002800:	200012f0 	.word	0x200012f0
 8002804:	20000a38 	.word	0x20000a38
 8002808:	20000a0c 	.word	0x20000a0c
 800280c:	20000a08 	.word	0x20000a08
 8002810:	20000a32 	.word	0x20000a32
 8002814:	20000a10 	.word	0x20000a10
 8002818:	20000142 	.word	0x20000142
 800281c:	200012d4 	.word	0x200012d4
 8002820:	2000138c 	.word	0x2000138c
 8002824:	4bb0      	ldr	r3, [pc, #704]	; (8002ae8 <sampling+0xa70>)
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800282e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002832:	d503      	bpl.n	800283c <sampling+0x7c4>
 8002834:	4bac      	ldr	r3, [pc, #688]	; (8002ae8 <sampling+0xa70>)
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 800283c:	4baa      	ldr	r3, [pc, #680]	; (8002ae8 <sampling+0xa70>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284a:	4ba7      	ldr	r3, [pc, #668]	; (8002ae8 <sampling+0xa70>)
 800284c:	edc3 7a01 	vstr	s15, [r3, #4]
		//filter_accus[1]=sample_Accu[1];
		filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5);
 8002850:	4ba6      	ldr	r3, [pc, #664]	; (8002aec <sampling+0xa74>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd ff3b 	bl	80006d0 <__aeabi_i2d>
 800285a:	4604      	mov	r4, r0
 800285c:	460d      	mov	r5, r1
 800285e:	4ba4      	ldr	r3, [pc, #656]	; (8002af0 <sampling+0xa78>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd ff46 	bl	80006f4 <__aeabi_f2d>
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	4ba1      	ldr	r3, [pc, #644]	; (8002af4 <sampling+0xa7c>)
 800286e:	f7fd fcb3 	bl	80001d8 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fd fddd 	bl	8000438 <__adddf3>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f815 	bl	80008b4 <__aeabi_d2f>
 800288a:	4603      	mov	r3, r0
 800288c:	4a9a      	ldr	r2, [pc, #616]	; (8002af8 <sampling+0xa80>)
 800288e:	6053      	str	r3, [r2, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);
 8002890:	4b99      	ldr	r3, [pc, #612]	; (8002af8 <sampling+0xa80>)
 8002892:	ed93 7a01 	vldr	s14, [r3, #4]
 8002896:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <sampling+0xa70>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a0:	4b95      	ldr	r3, [pc, #596]	; (8002af8 <sampling+0xa80>)
 80028a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80028a6:	4b90      	ldr	r3, [pc, #576]	; (8002ae8 <sampling+0xa70>)
 80028a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b4:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <sampling+0xa80>)
 80028b6:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 80028ba:	4b8f      	ldr	r3, [pc, #572]	; (8002af8 <sampling+0xa80>)
 80028bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80028c0:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <sampling+0xa70>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <sampling+0xa80>)
 80028cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80028d0:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <sampling+0xa70>)
 80028d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80028d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028de:	4b86      	ldr	r3, [pc, #536]	; (8002af8 <sampling+0xa80>)
 80028e0:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <sampling+0xa80>)
 80028e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80028ea:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <sampling+0xa70>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f4:	4b80      	ldr	r3, [pc, #512]	; (8002af8 <sampling+0xa80>)
 80028f6:	edd3 6a04 	vldr	s13, [r3, #16]
 80028fa:	4b7b      	ldr	r3, [pc, #492]	; (8002ae8 <sampling+0xa70>)
 80028fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <sampling+0xa80>)
 800290a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 800290e:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <sampling+0xa80>)
 8002910:	ed93 7a04 	vldr	s14, [r3, #16]
 8002914:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <sampling+0xa70>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <sampling+0xa80>)
 8002920:	edd3 6a05 	vldr	s13, [r3, #20]
 8002924:	4b70      	ldr	r3, [pc, #448]	; (8002ae8 <sampling+0xa70>)
 8002926:	edd3 7a01 	vldr	s15, [r3, #4]
 800292a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	4b71      	ldr	r3, [pc, #452]	; (8002af8 <sampling+0xa80>)
 8002934:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <sampling+0xa80>)
 800293a:	ed93 7a05 	vldr	s14, [r3, #20]
 800293e:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <sampling+0xa80>)
 8002940:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002948:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800294c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <sampling+0xa78>)
 8002952:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002956:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <sampling+0xa80>)
 8002958:	edd3 7a05 	vldr	s15, [r3, #20]
 800295c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002960:	ee17 2a90 	vmov	r2, s15
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <sampling+0xa74>)
 8002966:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002968:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <sampling+0xa80>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	4a62      	ldr	r2, [pc, #392]	; (8002af8 <sampling+0xa80>)
 800296e:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=(sample_Accu[2]>>5); // this one is louder than sine
 8002970:	4b5e      	ldr	r3, [pc, #376]	; (8002aec <sampling+0xa74>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	115b      	asrs	r3, r3, #5
 8002976:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <sampling+0xa74>)
 8002978:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 800297a:	4b5b      	ldr	r3, [pc, #364]	; (8002ae8 <sampling+0xa70>)
 800297c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298c:	dd03      	ble.n	8002996 <sampling+0x91e>
 800298e:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <sampling+0xa70>)
 8002990:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002994:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8002996:	4b54      	ldr	r3, [pc, #336]	; (8002ae8 <sampling+0xa70>)
 8002998:	edd3 7a02 	vldr	s15, [r3, #8]
 800299c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <sampling+0xa70>)
 80029a6:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 80029aa:	4b50      	ldr	r3, [pc, #320]	; (8002aec <sampling+0xa74>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <sampling+0xa80>)
 80029b8:	edc3 7a06 	vstr	s15, [r3, #24]
					filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 80029bc:	4b4e      	ldr	r3, [pc, #312]	; (8002af8 <sampling+0xa80>)
 80029be:	ed93 7a06 	vldr	s14, [r3, #24]
 80029c2:	4b4e      	ldr	r3, [pc, #312]	; (8002afc <sampling+0xa84>)
 80029c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80029c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029cc:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <sampling+0xa80>)
 80029ce:	edc3 7a06 	vstr	s15, [r3, #24]
				
				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <sampling+0xa80>)
 80029d4:	ed93 7a06 	vldr	s14, [r3, #24]
 80029d8:	4b43      	ldr	r3, [pc, #268]	; (8002ae8 <sampling+0xa70>)
 80029da:	edd3 7a02 	vldr	s15, [r3, #8]
 80029de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e2:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <sampling+0xa80>)
 80029e4:	edd3 6a07 	vldr	s13, [r3, #28]
 80029e8:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <sampling+0xa70>)
 80029ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f6:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <sampling+0xa80>)
 80029f8:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 80029fc:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <sampling+0xa80>)
 80029fe:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <sampling+0xa70>)
 8002a04:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <sampling+0xa80>)
 8002a0e:	edd3 6a08 	vldr	s13, [r3, #32]
 8002a12:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <sampling+0xa70>)
 8002a14:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <sampling+0xa80>)
 8002a22:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <sampling+0xa80>)
 8002a28:	ed93 7a08 	vldr	s14, [r3, #32]
 8002a2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <sampling+0xa70>)
 8002a2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <sampling+0xa80>)
 8002a38:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <sampling+0xa70>)
 8002a3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <sampling+0xa80>)
 8002a4c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <sampling+0xa80>)
 8002a52:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <sampling+0xa70>)
 8002a58:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <sampling+0xa80>)
 8002a62:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <sampling+0xa70>)
 8002a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <sampling+0xa80>)
 8002a76:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <sampling+0xa80>)
 8002a7c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <sampling+0xa80>)
 8002a82:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <sampling+0xa78>)
 8002a94:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8002a98:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <sampling+0xa80>)
 8002a9a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa2:	ee17 2a90 	vmov	r2, s15
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <sampling+0xa74>)
 8002aa8:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <sampling+0xa80>)
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <sampling+0xa80>)
 8002ab0:	6313      	str	r3, [r2, #48]	; 0x30
				

filter_Accu=0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <sampling+0xa74>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <sampling+0xa74>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	4413      	add	r3, r2
 8002ac0:	121b      	asrs	r3, r3, #8
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38


 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <sampling+0xa88>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2bc7      	cmp	r3, #199	; 0xc7
 8002aca:	d005      	beq.n	8002ad8 <sampling+0xa60>
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <sampling+0xa88>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <sampling+0xa88>)
 8002ad6:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ade:	db11      	blt.n	8002b04 <sampling+0xa8c>
 8002ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae6:	e013      	b.n	8002b10 <sampling+0xa98>
 8002ae8:	2000138c 	.word	0x2000138c
 8002aec:	20000a38 	.word	0x20000a38
 8002af0:	20001378 	.word	0x20001378
 8002af4:	3fe00000 	.word	0x3fe00000
 8002af8:	2000133c 	.word	0x2000133c
 8002afc:	20001920 	.word	0x20001920
 8002b00:	20001308 	.word	0x20001308
 8002b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b0a:	dc01      	bgt.n	8002b10 <sampling+0xa98>
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <sampling+0xad4>)
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 8002b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b12:	119b      	asrs	r3, r3, #6
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b18:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8002b1c:	b291      	uxth	r1, r2
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <sampling+0xad8>)
 8002b20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <sampling+0xadc>)
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <sampling+0xadc>)
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <sampling+0xadc>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b38:	f4ff ac2e 	bcc.w	8002398 <sampling+0x320>
	//play_sample[i_total]=(sample_Accu[4])+1023;

}
 //make sure it's finished
bank_write=0;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <sampling+0xae0>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3748      	adds	r7, #72	; 0x48
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bdb0      	pop	{r4, r5, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	ffff0001 	.word	0xffff0001
 8002b50:	20000a5c 	.word	0x20000a5c
 8002b54:	20000a58 	.word	0x20000a58
 8002b58:	200001ae 	.word	0x200001ae
 8002b5c:	00000000 	.word	0x00000000

08002b60 <adsr>:
}

potSource[28]=lfo_output[0]>>6;

}
void adsr(void){
 8002b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
	float note_attack;  //attack length 50/50 , just a default shape that is maybe interpolated , store values for both and position, time in isr 
	float note_sustain; //sustaing lenght and height 80/20 / 0-160 0-1-sustain-0  160 is 160 steps(10 notes) 80+80  0+(1/(attack/2))*(attack/2) 1-(1/(attack/2))*(attack/2)+sustain level 1/160*sustain at (1/sustain)*time
	//uint16_t adsr_countup[11];  //holds isr count on notes , 
	//float adsr_level[11]; //float for vol envelope  ,ps 20 21
	uint8_t ad;//counter    0-160-160-160 maybe change 1/10 dunno 
	float as_attack=potSource[20]*0.1; // for now
 8002b68:	4b79      	ldr	r3, [pc, #484]	; (8002d50 <adsr+0x1f0>)
 8002b6a:	7d1b      	ldrb	r3, [r3, #20]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fdaf 	bl	80006d0 <__aeabi_i2d>
 8002b72:	a371      	add	r3, pc, #452	; (adr r3, 8002d38 <adsr+0x1d8>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd fb2e 	bl	80001d8 <__aeabi_dmul>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7fd fe96 	bl	80008b4 <__aeabi_d2f>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60fb      	str	r3, [r7, #12]
	float as_sustain=potSource[21];
 8002b8c:	4b70      	ldr	r3, [pc, #448]	; (8002d50 <adsr+0x1f0>)
 8002b8e:	7d5b      	ldrb	r3, [r3, #21]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b98:	edc7 7a02 	vstr	s15, [r7, #8]
	uint16_t as_temp; 
	
	
	
for (ad=0;ad<10;ad++){							// envelope generator ,needs to be faster 
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	74fb      	strb	r3, [r7, #19]
 8002ba0:	e0bd      	b.n	8002d1e <adsr+0x1be>
	as_temp =adsr_countup[ad]; //grab counter
 8002ba2:	7cfb      	ldrb	r3, [r7, #19]
 8002ba4:	4a6b      	ldr	r2, [pc, #428]	; (8002d54 <adsr+0x1f4>)
 8002ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002baa:	823b      	strh	r3, [r7, #16]
	
	if (note_channel[ad]) {as_temp=1;note_channel[ad]=0; } // reset on note & 1 isr length ,retrigger also clear not for later
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <adsr+0x1f8>)
 8002bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d006      	beq.n	8002bc6 <adsr+0x66>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	823b      	strh	r3, [r7, #16]
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	4a66      	ldr	r2, [pc, #408]	; (8002d58 <adsr+0x1f8>)
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (as_temp) {
 8002bc6:	8a3b      	ldrh	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a5 	beq.w	8002d18 <adsr+0x1b8>
	if (as_temp<(as_attack))    note_attack=(1/as_attack)*as_temp; //count up attack ok 
 8002bce:	8a3b      	ldrh	r3, [r7, #16]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	dd0e      	ble.n	8002c04 <adsr+0xa4>
 8002be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bf2:	8a3b      	ldrh	r3, [r7, #16]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c00:	edc7 7a05 	vstr	s15, [r7, #20]
	if (as_temp>=(as_attack))    note_attack=1-((1/as_attack)*(as_temp-as_attack)); //count down attack
 8002c04:	8a3b      	ldrh	r3, [r7, #16]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d816      	bhi.n	8002c4a <adsr+0xea>
 8002c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c20:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c28:	8a3b      	ldrh	r3, [r7, #16]
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c46:	edc7 7a05 	vstr	s15, [r7, #20]
	if(note_attack<0) note_attack=0; // stop at 0
 8002c4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	d502      	bpl.n	8002c5e <adsr+0xfe>
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
	note_sustain=as_sustain*0.00625;
 8002c5e:	68b8      	ldr	r0, [r7, #8]
 8002c60:	f7fd fd48 	bl	80006f4 <__aeabi_f2d>
 8002c64:	a336      	add	r3, pc, #216	; (adr r3, 8002d40 <adsr+0x1e0>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fab5 	bl	80001d8 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4610      	mov	r0, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	f7fd fe1d 	bl	80008b4 <__aeabi_d2f>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	607b      	str	r3, [r7, #4]
	if ((as_temp>=(as_attack)) && (note_sustain>note_attack)) note_attack=note_sustain; // change over to sustain level
 8002c7e:	8a3b      	ldrh	r3, [r7, #16]
 8002c80:	ee07 3a90 	vmov	s15, r3
 8002c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c88:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d80a      	bhi.n	8002cac <adsr+0x14c>
 8002c96:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca6:	dd01      	ble.n	8002cac <adsr+0x14c>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	617b      	str	r3, [r7, #20]
	
	if (as_temp>=(as_attack+(as_sustain*0.2))) {note_attack= 0;  as_temp=0; }else as_temp++; // no roll off for now just straight to 0 , shortened , also stops 
 8002cac:	8a3b      	ldrh	r3, [r7, #16]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fd0e 	bl	80006d0 <__aeabi_i2d>
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	460d      	mov	r5, r1
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7fd fd1b 	bl	80006f4 <__aeabi_f2d>
 8002cbe:	4680      	mov	r8, r0
 8002cc0:	4689      	mov	r9, r1
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	f7fd fd16 	bl	80006f4 <__aeabi_f2d>
 8002cc8:	a31f      	add	r3, pc, #124	; (adr r3, 8002d48 <adsr+0x1e8>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fa83 	bl	80001d8 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	4649      	mov	r1, r9
 8002cda:	f7fd fbad 	bl	8000438 <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7fd fdd1 	bl	800088c <__aeabi_dcmpge>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <adsr+0x19c>
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	823b      	strh	r3, [r7, #16]
 8002cfa:	e002      	b.n	8002d02 <adsr+0x1a2>
 8002cfc:	8a3b      	ldrh	r3, [r7, #16]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	823b      	strh	r3, [r7, #16]
	
	adsr_level[ad]=note_attack;
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <adsr+0x1fc>)
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	601a      	str	r2, [r3, #0]
	
	adsr_countup[ad]=as_temp; //write back new value
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	4910      	ldr	r1, [pc, #64]	; (8002d54 <adsr+0x1f4>)
 8002d12:	8a3a      	ldrh	r2, [r7, #16]
 8002d14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
for (ad=0;ad<10;ad++){							// envelope generator ,needs to be faster 
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	74fb      	strb	r3, [r7, #19]
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	f67f af3e 	bls.w	8002ba2 <adsr+0x42>
	} 

}	
}
 8002d26:	bf00      	nop
 8002d28:	bf00      	nop
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d32:	bf00      	nop
 8002d34:	f3af 8000 	nop.w
 8002d38:	9999999a 	.word	0x9999999a
 8002d3c:	3fb99999 	.word	0x3fb99999
 8002d40:	9999999a 	.word	0x9999999a
 8002d44:	3f799999 	.word	0x3f799999
 8002d48:	9999999a 	.word	0x9999999a
 8002d4c:	3fc99999 	.word	0x3fc99999
 8002d50:	200008fc 	.word	0x200008fc
 8002d54:	20001908 	.word	0x20001908
 8002d58:	20001264 	.word	0x20001264
 8002d5c:	20001920 	.word	0x20001920

08002d60 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8002d66:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <sine_count+0xc4>)
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <sine_count+0xc8>)
 8002d70:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <sine_count+0xc4>)
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <sine_count+0xc8>)
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <sine_count+0xcc>)
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d903      	bls.n	8002d92 <sine_count+0x32>
 8002d8a:	4b28      	ldr	r3, [pc, #160]	; (8002e2c <sine_count+0xcc>)
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <sine_count+0xc8>)
 8002d90:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <sine_count+0xc8>)
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <sine_count+0xd0>)
 8002d9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <sine_count+0xd4>)
 8002da2:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <sine_count+0xd4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002db0:	3b20      	subs	r3, #32
 8002db2:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <sine_count+0xc8>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <sine_count+0xc8>)
 8002dbe:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <sine_count+0xc8>)
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <sine_count+0xcc>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <sine_count+0x72>
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <sine_count+0xc8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <sine_count+0xc8>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <sine_count+0xd0>)
 8002dda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <sine_count+0xd4>)
 8002de2:	601a      	str	r2, [r3, #0]
		
		sine_tempB=sine_out; // grab first value
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <sine_count+0xd4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8002df0:	3b20      	subs	r3, #32
 8002df2:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	115b      	asrs	r3, r3, #5
 8002e00:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 8002e02:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <sine_count+0xd4>)
 8002e16:	6013      	str	r3, [r2, #0]


			//sine_out=sine_tempA;


}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	20000a08 	.word	0x20000a08
 8002e28:	20000a06 	.word	0x20000a06
 8002e2c:	20000142 	.word	0x20000142
 8002e30:	08007960 	.word	0x08007960
 8002e34:	20000a0c 	.word	0x20000a0c

08002e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
}
 8002e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <Error_Handler+0x8>
	...

08002e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <HAL_MspInit+0x4c>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4a0f      	ldr	r2, [pc, #60]	; (8002e90 <HAL_MspInit+0x4c>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_MspInit+0x4c>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_MspInit+0x4c>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <HAL_MspInit+0x4c>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_MspInit+0x4c>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	; 0x28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2f      	ldr	r2, [pc, #188]	; (8002f70 <HAL_ADC_MspInit+0xdc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d157      	bne.n	8002f66 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	4b2e      	ldr	r3, [pc, #184]	; (8002f74 <HAL_ADC_MspInit+0xe0>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4a2d      	ldr	r2, [pc, #180]	; (8002f74 <HAL_ADC_MspInit+0xe0>)
 8002ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	; (8002f74 <HAL_ADC_MspInit+0xe0>)
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <HAL_ADC_MspInit+0xe0>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a26      	ldr	r2, [pc, #152]	; (8002f74 <HAL_ADC_MspInit+0xe0>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_ADC_MspInit+0xe0>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 8002eee:	2338      	movs	r3, #56	; 0x38
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efa:	f107 0314 	add.w	r3, r7, #20
 8002efe:	4619      	mov	r1, r3
 8002f00:	481d      	ldr	r0, [pc, #116]	; (8002f78 <HAL_ADC_MspInit+0xe4>)
 8002f02:	f001 fbe1 	bl	80046c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f08:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_ADC_MspInit+0xec>)
 8002f0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f18:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f3e:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f44:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f4a:	480c      	ldr	r0, [pc, #48]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f4c:	f001 f84c 	bl	8003fe8 <HAL_DMA_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002f56:	f7ff ff6f 	bl	8002e38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <HAL_ADC_MspInit+0xe8>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	; 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40012000 	.word	0x40012000
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	20000630 	.word	0x20000630
 8002f80:	40026410 	.word	0x40026410

08002f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <HAL_I2C_MspInit+0xa8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d13d      	bne.n	8003022 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_I2C_MspInit+0xac>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a20      	ldr	r2, [pc, #128]	; (8003030 <HAL_I2C_MspInit+0xac>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_I2C_MspInit+0xac>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002fd4:	2309      	movs	r3, #9
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4815      	ldr	r0, [pc, #84]	; (8003034 <HAL_I2C_MspInit+0xb0>)
 8002fe0:	f001 fb72 	bl	80046c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fea:	2312      	movs	r3, #18
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	480c      	ldr	r0, [pc, #48]	; (8003034 <HAL_I2C_MspInit+0xb0>)
 8003002:	f001 fb61 	bl	80046c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_I2C_MspInit+0xac>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_I2C_MspInit+0xac>)
 8003010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003014:	6413      	str	r3, [r2, #64]	; 0x40
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_I2C_MspInit+0xac>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003022:	bf00      	nop
 8003024:	3728      	adds	r7, #40	; 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40005800 	.word	0x40005800
 8003030:	40023800 	.word	0x40023800
 8003034:	40020400 	.word	0x40020400

08003038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_SPI_MspInit+0x84>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d12c      	bne.n	80030b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	4b18      	ldr	r3, [pc, #96]	; (80030c0 <HAL_SPI_MspInit+0x88>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_SPI_MspInit+0x88>)
 8003064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003068:	6413      	str	r3, [r2, #64]	; 0x40
 800306a:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_SPI_MspInit+0x88>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <HAL_SPI_MspInit+0x88>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <HAL_SPI_MspInit+0x88>)
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_SPI_MspInit+0x88>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8003092:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800309c:	2302      	movs	r3, #2
 800309e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a0:	2303      	movs	r3, #3
 80030a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80030a4:	2305      	movs	r3, #5
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	4619      	mov	r1, r3
 80030ae:	4805      	ldr	r0, [pc, #20]	; (80030c4 <HAL_SPI_MspInit+0x8c>)
 80030b0:	f001 fb0a 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	; 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40003800 	.word	0x40003800
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020400 	.word	0x40020400

080030c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d0:	f107 031c 	add.w	r3, r7, #28
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	60da      	str	r2, [r3, #12]
 80030de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d12d      	bne.n	8003146 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a2f      	ldr	r2, [pc, #188]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	4b29      	ldr	r3, [pc, #164]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a28      	ldr	r2, [pc, #160]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003122:	f248 0302 	movw	r3, #32770	; 0x8002
 8003126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800312c:	2301      	movs	r3, #1
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	2300      	movs	r3, #0
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003134:	2301      	movs	r3, #1
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003138:	f107 031c 	add.w	r3, r7, #28
 800313c:	4619      	mov	r1, r3
 800313e:	481d      	ldr	r0, [pc, #116]	; (80031b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003140:	f001 fac2 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003144:	e030      	b.n	80031a8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d12b      	bne.n	80031a8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	4b16      	ldr	r3, [pc, #88]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800316c:	2300      	movs	r3, #0
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4a0e      	ldr	r2, [pc, #56]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	6313      	str	r3, [r2, #48]	; 0x30
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 800317e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003188:	23c0      	movs	r3, #192	; 0xc0
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318c:	2302      	movs	r3, #2
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003190:	2301      	movs	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003194:	2300      	movs	r3, #0
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003198:	2302      	movs	r3, #2
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	4806      	ldr	r0, [pc, #24]	; (80031bc <HAL_TIM_Encoder_MspInit+0xf4>)
 80031a4:	f001 fa90 	bl	80046c8 <HAL_GPIO_Init>
}
 80031a8:	bf00      	nop
 80031aa:	3730      	adds	r7, #48	; 0x30
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40020400 	.word	0x40020400

080031c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <HAL_TIM_Base_MspInit+0x48>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d115      	bne.n	80031fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_TIM_Base_MspInit+0x4c>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_TIM_Base_MspInit+0x4c>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_TIM_Base_MspInit+0x4c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2100      	movs	r1, #0
 80031f2:	201d      	movs	r0, #29
 80031f4:	f000 fec1 	bl	8003f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031f8:	201d      	movs	r0, #29
 80031fa:	f000 feda 	bl	8003fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40000400 	.word	0x40000400
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_TIM_MspPostInit+0x68>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d11d      	bne.n	800326e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_TIM_MspPostInit+0x6c>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_TIM_MspPostInit+0x6c>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b0e      	ldr	r3, [pc, #56]	; (800327c <HAL_TIM_MspPostInit+0x6c>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800324e:	2301      	movs	r3, #1
 8003250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800325e:	2302      	movs	r3, #2
 8003260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	4619      	mov	r1, r3
 8003268:	4805      	ldr	r0, [pc, #20]	; (8003280 <HAL_TIM_MspPostInit+0x70>)
 800326a:	f001 fa2d 	bl	80046c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800326e:	bf00      	nop
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40000400 	.word	0x40000400
 800327c:	40023800 	.word	0x40023800
 8003280:	40020400 	.word	0x40020400

08003284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <NMI_Handler+0x4>

0800328a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <MemManage_Handler+0x4>

08003296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <BusFault_Handler+0x4>

0800329c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <UsageFault_Handler+0x4>

080032a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d0:	f000 f8a8 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <TIM3_IRQHandler+0x10>)
 80032de:	f003 fb3b 	bl	8006958 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000077c 	.word	0x2000077c

080032ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <DMA2_Stream0_IRQHandler+0x10>)
 80032f2:	f000 ff7f 	bl	80041f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000630 	.word	0x20000630

08003300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <SystemInit+0x28>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <SystemInit+0x28>)
 800330c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <SystemInit+0x28>)
 8003316:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800331a:	609a      	str	r2, [r3, #8]
#endif
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800332c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003332:	e003      	b.n	800333c <LoopCopyDataInit>

08003334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800333a:	3104      	adds	r1, #4

0800333c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800333c:	480b      	ldr	r0, [pc, #44]	; (800336c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003344:	d3f6      	bcc.n	8003334 <CopyDataInit>
  ldr  r2, =_sbss
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003348:	e002      	b.n	8003350 <LoopFillZerobss>

0800334a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800334a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800334c:	f842 3b04 	str.w	r3, [r2], #4

08003350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003354:	d3f9      	bcc.n	800334a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003356:	f7ff ffd3 	bl	8003300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800335a:	f004 f949 	bl	80075f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800335e:	f7fd fc7b 	bl	8000c58 <main>
  bx  lr    
 8003362:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003364:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003368:	08008648 	.word	0x08008648
  ldr  r0, =_sdata
 800336c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003370:	200005cc 	.word	0x200005cc
  ldr  r2, =_sbss
 8003374:	200005cc 	.word	0x200005cc
  ldr  r3, = _ebss
 8003378:	20001964 	.word	0x20001964

0800337c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800337c:	e7fe      	b.n	800337c <ADC_IRQHandler>
	...

08003380 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_Init+0x40>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_Init+0x40>)
 800338a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_Init+0x40>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0a      	ldr	r2, [pc, #40]	; (80033c0 <HAL_Init+0x40>)
 8003396:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800339a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <HAL_Init+0x40>)
 80033a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a8:	2003      	movs	r0, #3
 80033aa:	f000 fddb 	bl	8003f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f000 f808 	bl	80033c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b4:	f7ff fd46 	bl	8002e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00

080033c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_InitTick+0x54>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_InitTick+0x58>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	4619      	mov	r1, r3
 80033d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033da:	fbb3 f3f1 	udiv	r3, r3, r1
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fdf3 	bl	8003fce <HAL_SYSTICK_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e00e      	b.n	8003410 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d80a      	bhi.n	800340e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f8:	2200      	movs	r2, #0
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	f000 fdbb 	bl	8003f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003404:	4a06      	ldr	r2, [pc, #24]	; (8003420 <HAL_InitTick+0x5c>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	e000      	b.n	8003410 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200005c0 	.word	0x200005c0
 800341c:	200005c8 	.word	0x200005c8
 8003420:	200005c4 	.word	0x200005c4

08003424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_IncTick+0x20>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_IncTick+0x24>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4413      	add	r3, r2
 8003434:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_IncTick+0x24>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200005c8 	.word	0x200005c8
 8003448:	20001960 	.word	0x20001960

0800344c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return uwTick;
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <HAL_GetTick+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20001960 	.word	0x20001960

08003464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff ffee 	bl	800344c <HAL_GetTick>
 8003470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d005      	beq.n	800348a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_Delay+0x44>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800348a:	bf00      	nop
 800348c:	f7ff ffde 	bl	800344c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d8f7      	bhi.n	800348c <HAL_Delay+0x28>
  {
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200005c8 	.word	0x200005c8

080034ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e033      	b.n	800352a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff fce2 	bl	8002e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 0310 	and.w	r3, r3, #16
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d118      	bne.n	800351c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034f2:	f023 0302 	bic.w	r3, r3, #2
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fae2 	bl	8003ac8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
 800351a:	e001      	b.n	8003520 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_ADC_Start+0x1a>
 800354a:	2302      	movs	r3, #2
 800354c:	e08a      	b.n	8003664 <HAL_ADC_Start+0x130>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d018      	beq.n	8003596 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003574:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <HAL_ADC_Start+0x13c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a3e      	ldr	r2, [pc, #248]	; (8003674 <HAL_ADC_Start+0x140>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	0c9a      	lsrs	r2, r3, #18
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003588:	e002      	b.n	8003590 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3b01      	subs	r3, #1
 800358e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f9      	bne.n	800358a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d15e      	bne.n	8003662 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035ac:	f023 0301 	bic.w	r3, r3, #1
 80035b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e2:	d106      	bne.n	80035f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f023 0206 	bic.w	r2, r3, #6
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
 80035f0:	e002      	b.n	80035f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_ADC_Start+0x144>)
 8003602:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800360c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d11c      	bne.n	8003662 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	e013      	b.n	8003662 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_ADC_Start+0x148>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10e      	bne.n	8003662 <HAL_ADC_Start+0x12e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003660:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	200005c0 	.word	0x200005c0
 8003674:	431bde83 	.word	0x431bde83
 8003678:	40012300 	.word	0x40012300
 800367c:	40012000 	.word	0x40012000

08003680 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_ADC_Start_DMA+0x1e>
 800369a:	2302      	movs	r3, #2
 800369c:	e0b1      	b.n	8003802 <HAL_ADC_Start_DMA+0x182>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d018      	beq.n	80036e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036c4:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_ADC_Start_DMA+0x18c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a51      	ldr	r2, [pc, #324]	; (8003810 <HAL_ADC_Start_DMA+0x190>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0c9a      	lsrs	r2, r3, #18
 80036d0:	4613      	mov	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4413      	add	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036d8:	e002      	b.n	80036e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3b01      	subs	r3, #1
 80036de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f9      	bne.n	80036da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 8085 	bne.w	8003800 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003720:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d106      	bne.n	8003744 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f023 0206 	bic.w	r2, r3, #6
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
 8003742:	e002      	b.n	800374a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003752:	4b30      	ldr	r3, [pc, #192]	; (8003814 <HAL_ADC_Start_DMA+0x194>)
 8003754:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <HAL_ADC_Start_DMA+0x198>)
 800375c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	4a2e      	ldr	r2, [pc, #184]	; (800381c <HAL_ADC_Start_DMA+0x19c>)
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	4a2d      	ldr	r2, [pc, #180]	; (8003820 <HAL_ADC_Start_DMA+0x1a0>)
 800376c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003776:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003786:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003796:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	334c      	adds	r3, #76	; 0x4c
 80037a2:	4619      	mov	r1, r3
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f000 fccc 	bl	8004144 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10f      	bne.n	80037d8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11c      	bne.n	8003800 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	e013      	b.n	8003800 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a11      	ldr	r2, [pc, #68]	; (8003824 <HAL_ADC_Start_DMA+0x1a4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10e      	bne.n	8003800 <HAL_ADC_Start_DMA+0x180>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d107      	bne.n	8003800 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037fe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	200005c0 	.word	0x200005c0
 8003810:	431bde83 	.word	0x431bde83
 8003814:	40012300 	.word	0x40012300
 8003818:	08003cc1 	.word	0x08003cc1
 800381c:	08003d7b 	.word	0x08003d7b
 8003820:	08003d97 	.word	0x08003d97
 8003824:	40012000 	.word	0x40012000

08003828 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x1c>
 800387c:	2302      	movs	r3, #2
 800387e:	e113      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x244>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b09      	cmp	r3, #9
 800388e:	d925      	bls.n	80038dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68d9      	ldr	r1, [r3, #12]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	3b1e      	subs	r3, #30
 80038a6:	2207      	movs	r2, #7
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43da      	mvns	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	400a      	ands	r2, r1
 80038b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68d9      	ldr	r1, [r3, #12]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	4603      	mov	r3, r0
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4403      	add	r3, r0
 80038ce:	3b1e      	subs	r3, #30
 80038d0:	409a      	lsls	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	e022      	b.n	8003922 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6919      	ldr	r1, [r3, #16]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	2207      	movs	r2, #7
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43da      	mvns	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	400a      	ands	r2, r1
 80038fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6919      	ldr	r1, [r3, #16]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	4603      	mov	r3, r0
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4403      	add	r3, r0
 8003918:	409a      	lsls	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b06      	cmp	r3, #6
 8003928:	d824      	bhi.n	8003974 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	3b05      	subs	r3, #5
 800393c:	221f      	movs	r2, #31
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	400a      	ands	r2, r1
 800394a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4618      	mov	r0, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3b05      	subs	r3, #5
 8003966:	fa00 f203 	lsl.w	r2, r0, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	635a      	str	r2, [r3, #52]	; 0x34
 8003972:	e04c      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d824      	bhi.n	80039c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	3b23      	subs	r3, #35	; 0x23
 800398e:	221f      	movs	r2, #31
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43da      	mvns	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	400a      	ands	r2, r1
 800399c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4618      	mov	r0, r3
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	3b23      	subs	r3, #35	; 0x23
 80039b8:	fa00 f203 	lsl.w	r2, r0, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
 80039c4:	e023      	b.n	8003a0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	3b41      	subs	r3, #65	; 0x41
 80039d8:	221f      	movs	r2, #31
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	400a      	ands	r2, r1
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	3b41      	subs	r3, #65	; 0x41
 8003a02:	fa00 f203 	lsl.w	r2, r0, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <HAL_ADC_ConfigChannel+0x250>)
 8003a10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a28      	ldr	r2, [pc, #160]	; (8003ab8 <HAL_ADC_ConfigChannel+0x254>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d10f      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1d8>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b12      	cmp	r3, #18
 8003a22:	d10b      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_ADC_ConfigChannel+0x254>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d12b      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x23a>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_ADC_ConfigChannel+0x258>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <HAL_ADC_ConfigChannel+0x1f4>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b11      	cmp	r3, #17
 8003a56:	d122      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a11      	ldr	r2, [pc, #68]	; (8003abc <HAL_ADC_ConfigChannel+0x258>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d111      	bne.n	8003a9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <HAL_ADC_ConfigChannel+0x260>)
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	0c9a      	lsrs	r2, r3, #18
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a90:	e002      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f9      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40012300 	.word	0x40012300
 8003ab8:	40012000 	.word	0x40012000
 8003abc:	10000012 	.word	0x10000012
 8003ac0:	200005c0 	.word	0x200005c0
 8003ac4:	431bde83 	.word	0x431bde83

08003ac8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad0:	4b79      	ldr	r3, [pc, #484]	; (8003cb8 <ADC_Init+0x1f0>)
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <ADC_Init+0x1f4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d022      	beq.n	8003ba6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6899      	ldr	r1, [r3, #8]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6899      	ldr	r1, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	e00f      	b.n	8003bc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0202 	bic.w	r2, r2, #2
 8003bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7e1b      	ldrb	r3, [r3, #24]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01b      	beq.n	8003c2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	035a      	lsls	r2, r3, #13
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e007      	b.n	8003c3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	051a      	lsls	r2, r3, #20
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c7e:	025a      	lsls	r2, r3, #9
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6899      	ldr	r1, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	029a      	lsls	r2, r3, #10
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012300 	.word	0x40012300
 8003cbc:	0f000001 	.word	0x0f000001

08003cc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d13c      	bne.n	8003d54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d12b      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d127      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d119      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0220 	bic.w	r2, r2, #32
 8003d26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d105      	bne.n	8003d4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7ff fd6b 	bl	8003828 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d52:	e00e      	b.n	8003d72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fd75 	bl	8003850 <HAL_ADC_ErrorCallback>
}
 8003d66:	e004      	b.n	8003d72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7ff fd57 	bl	800383c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	; 0x40
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dae:	f043 0204 	orr.w	r2, r3, #4
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fd4a 	bl	8003850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de0:	4013      	ands	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <__NVIC_SetPriorityGrouping+0x44>)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	60d3      	str	r3, [r2, #12]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e10:	4b04      	ldr	r3, [pc, #16]	; (8003e24 <__NVIC_GetPriorityGrouping+0x18>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f003 0307 	and.w	r3, r3, #7
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	db0b      	blt.n	8003e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	4907      	ldr	r1, [pc, #28]	; (8003e60 <__NVIC_EnableIRQ+0x38>)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2001      	movs	r0, #1
 8003e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000e100 	.word	0xe000e100

08003e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	6039      	str	r1, [r7, #0]
 8003e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	db0a      	blt.n	8003e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	490c      	ldr	r1, [pc, #48]	; (8003eb0 <__NVIC_SetPriority+0x4c>)
 8003e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	440b      	add	r3, r1
 8003e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e8c:	e00a      	b.n	8003ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	4908      	ldr	r1, [pc, #32]	; (8003eb4 <__NVIC_SetPriority+0x50>)
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	0112      	lsls	r2, r2, #4
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	761a      	strb	r2, [r3, #24]
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	e000e100 	.word	0xe000e100
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f1c3 0307 	rsb	r3, r3, #7
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	bf28      	it	cs
 8003ed6:	2304      	movcs	r3, #4
 8003ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3304      	adds	r3, #4
 8003ede:	2b06      	cmp	r3, #6
 8003ee0:	d902      	bls.n	8003ee8 <NVIC_EncodePriority+0x30>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	3b03      	subs	r3, #3
 8003ee6:	e000      	b.n	8003eea <NVIC_EncodePriority+0x32>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	401a      	ands	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f00:	f04f 31ff 	mov.w	r1, #4294967295
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0a:	43d9      	mvns	r1, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f10:	4313      	orrs	r3, r2
         );
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3724      	adds	r7, #36	; 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f30:	d301      	bcc.n	8003f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f32:	2301      	movs	r3, #1
 8003f34:	e00f      	b.n	8003f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f36:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <SysTick_Config+0x40>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f3e:	210f      	movs	r1, #15
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	f7ff ff8e 	bl	8003e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <SysTick_Config+0x40>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f4e:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <SysTick_Config+0x40>)
 8003f50:	2207      	movs	r2, #7
 8003f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000e010 	.word	0xe000e010

08003f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ff29 	bl	8003dc4 <__NVIC_SetPriorityGrouping>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	4603      	mov	r3, r0
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f8c:	f7ff ff3e 	bl	8003e0c <__NVIC_GetPriorityGrouping>
 8003f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	f7ff ff8e 	bl	8003eb8 <NVIC_EncodePriority>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff ff5d 	bl	8003e64 <__NVIC_SetPriority>
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff ff31 	bl	8003e28 <__NVIC_EnableIRQ>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ffa2 	bl	8003f20 <SysTick_Config>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ff4:	f7ff fa2a 	bl	800344c <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e099      	b.n	8004138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004024:	e00f      	b.n	8004046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004026:	f7ff fa11 	bl	800344c <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b05      	cmp	r3, #5
 8004032:	d908      	bls.n	8004046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2203      	movs	r2, #3
 800403e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e078      	b.n	8004138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e8      	bne.n	8004026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4b38      	ldr	r3, [pc, #224]	; (8004140 <HAL_DMA_Init+0x158>)
 8004060:	4013      	ands	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b04      	cmp	r3, #4
 800409e:	d107      	bne.n	80040b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	4313      	orrs	r3, r2
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d117      	bne.n	800410a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fa6f 	bl	80045d0 <DMA_CheckFifoParam>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2240      	movs	r2, #64	; 0x40
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004106:	2301      	movs	r3, #1
 8004108:	e016      	b.n	8004138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa26 	bl	8004564 <DMA_CalcBaseAndBitshift>
 8004118:	4603      	mov	r3, r0
 800411a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	409a      	lsls	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	f010803f 	.word	0xf010803f

08004144 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_DMA_Start_IT+0x26>
 8004166:	2302      	movs	r3, #2
 8004168:	e040      	b.n	80041ec <HAL_DMA_Start_IT+0xa8>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d12f      	bne.n	80041de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2202      	movs	r2, #2
 8004182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f9b8 	bl	8004508 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	223f      	movs	r2, #63	; 0x3f
 800419e:	409a      	lsls	r2, r3
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0216 	orr.w	r2, r2, #22
 80041b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e005      	b.n	80041ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041e6:	2302      	movs	r3, #2
 80041e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004200:	4b8e      	ldr	r3, [pc, #568]	; (800443c <HAL_DMA_IRQHandler+0x248>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a8e      	ldr	r2, [pc, #568]	; (8004440 <HAL_DMA_IRQHandler+0x24c>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	0a9b      	lsrs	r3, r3, #10
 800420c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	2208      	movs	r2, #8
 8004220:	409a      	lsls	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4013      	ands	r3, r2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d01a      	beq.n	8004260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0204 	bic.w	r2, r2, #4
 8004246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	2208      	movs	r2, #8
 800424e:	409a      	lsls	r2, r3
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004264:	2201      	movs	r2, #1
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d012      	beq.n	8004296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	2201      	movs	r2, #1
 8004284:	409a      	lsls	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f043 0202 	orr.w	r2, r3, #2
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2204      	movs	r2, #4
 800429c:	409a      	lsls	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d012      	beq.n	80042cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	2204      	movs	r2, #4
 80042ba:	409a      	lsls	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	f043 0204 	orr.w	r2, r3, #4
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	2210      	movs	r2, #16
 80042d2:	409a      	lsls	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d043      	beq.n	8004364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d03c      	beq.n	8004364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	2210      	movs	r2, #16
 80042f0:	409a      	lsls	r2, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d018      	beq.n	8004336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d024      	beq.n	8004364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
 8004322:	e01f      	b.n	8004364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	4798      	blx	r3
 8004334:	e016      	b.n	8004364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d107      	bne.n	8004354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0208 	bic.w	r2, r2, #8
 8004352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004368:	2220      	movs	r2, #32
 800436a:	409a      	lsls	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4013      	ands	r3, r2
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 808f 	beq.w	8004494 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8087 	beq.w	8004494 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	2220      	movs	r2, #32
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b05      	cmp	r3, #5
 800439c:	d136      	bne.n	800440c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0216 	bic.w	r2, r2, #22
 80043ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695a      	ldr	r2, [r3, #20]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <HAL_DMA_IRQHandler+0x1da>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d007      	beq.n	80043de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f022 0208 	bic.w	r2, r2, #8
 80043dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	223f      	movs	r2, #63	; 0x3f
 80043e4:	409a      	lsls	r2, r3
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d07e      	beq.n	8004500 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
        }
        return;
 800440a:	e079      	b.n	8004500 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01d      	beq.n	8004456 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10d      	bne.n	8004444 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	2b00      	cmp	r3, #0
 800442e:	d031      	beq.n	8004494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e02c      	b.n	8004494 <HAL_DMA_IRQHandler+0x2a0>
 800443a:	bf00      	nop
 800443c:	200005c0 	.word	0x200005c0
 8004440:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d023      	beq.n	8004494 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
 8004454:	e01e      	b.n	8004494 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10f      	bne.n	8004484 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0210 	bic.w	r2, r2, #16
 8004472:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	2b00      	cmp	r3, #0
 800449a:	d032      	beq.n	8004502 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d022      	beq.n	80044ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2205      	movs	r2, #5
 80044ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0201 	bic.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d307      	bcc.n	80044dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f2      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x2cc>
 80044da:	e000      	b.n	80044de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044dc:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
 80044fe:	e000      	b.n	8004502 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004500:	bf00      	nop
    }
  }
}
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004524:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d108      	bne.n	8004548 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004546:	e007      	b.n	8004558 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	3b10      	subs	r3, #16
 8004574:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800457e:	4a13      	ldr	r2, [pc, #76]	; (80045cc <DMA_CalcBaseAndBitshift+0x68>)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d909      	bls.n	80045a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800459a:	f023 0303 	bic.w	r3, r3, #3
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	659a      	str	r2, [r3, #88]	; 0x58
 80045a4:	e007      	b.n	80045b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	aaaaaaab 	.word	0xaaaaaaab
 80045cc:	08007e2c 	.word	0x08007e2c

080045d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11f      	bne.n	800462a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d856      	bhi.n	800469e <DMA_CheckFifoParam+0xce>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <DMA_CheckFifoParam+0x28>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004609 	.word	0x08004609
 80045fc:	0800461b 	.word	0x0800461b
 8004600:	08004609 	.word	0x08004609
 8004604:	0800469f 	.word	0x0800469f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d046      	beq.n	80046a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004618:	e043      	b.n	80046a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004622:	d140      	bne.n	80046a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004628:	e03d      	b.n	80046a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004632:	d121      	bne.n	8004678 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d837      	bhi.n	80046aa <DMA_CheckFifoParam+0xda>
 800463a:	a201      	add	r2, pc, #4	; (adr r2, 8004640 <DMA_CheckFifoParam+0x70>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004651 	.word	0x08004651
 8004644:	08004657 	.word	0x08004657
 8004648:	08004651 	.word	0x08004651
 800464c:	08004669 	.word	0x08004669
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e030      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d025      	beq.n	80046ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004666:	e022      	b.n	80046ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004670:	d11f      	bne.n	80046b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004676:	e01c      	b.n	80046b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d903      	bls.n	8004686 <DMA_CheckFifoParam+0xb6>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d003      	beq.n	800468c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004684:	e018      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      break;
 800468a:	e015      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e00b      	b.n	80046b6 <DMA_CheckFifoParam+0xe6>
      break;
 800469e:	bf00      	nop
 80046a0:	e00a      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      break;
 80046a2:	bf00      	nop
 80046a4:	e008      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      break;
 80046a6:	bf00      	nop
 80046a8:	e006      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      break;
 80046aa:	bf00      	nop
 80046ac:	e004      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      break;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
    }
  } 
  
  return status; 
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop

080046c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b089      	sub	sp, #36	; 0x24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e159      	b.n	8004998 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046e4:	2201      	movs	r2, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	f040 8148 	bne.w	8004992 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d00b      	beq.n	8004722 <HAL_GPIO_Init+0x5a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d007      	beq.n	8004722 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004716:	2b11      	cmp	r3, #17
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b12      	cmp	r3, #18
 8004720:	d130      	bne.n	8004784 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004758:	2201      	movs	r2, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 0201 	and.w	r2, r3, #1
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	2203      	movs	r2, #3
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0xfc>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b12      	cmp	r3, #18
 80047c2:	d123      	bne.n	800480c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0203 	and.w	r2, r3, #3
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a2 	beq.w	8004992 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <HAL_GPIO_Init+0x2e8>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	4a56      	ldr	r2, [pc, #344]	; (80049b0 <HAL_GPIO_Init+0x2e8>)
 8004858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800485c:	6453      	str	r3, [r2, #68]	; 0x44
 800485e:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <HAL_GPIO_Init+0x2e8>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800486a:	4a52      	ldr	r2, [pc, #328]	; (80049b4 <HAL_GPIO_Init+0x2ec>)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	220f      	movs	r2, #15
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a49      	ldr	r2, [pc, #292]	; (80049b8 <HAL_GPIO_Init+0x2f0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d019      	beq.n	80048ca <HAL_GPIO_Init+0x202>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a48      	ldr	r2, [pc, #288]	; (80049bc <HAL_GPIO_Init+0x2f4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <HAL_GPIO_Init+0x1fe>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a47      	ldr	r2, [pc, #284]	; (80049c0 <HAL_GPIO_Init+0x2f8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00d      	beq.n	80048c2 <HAL_GPIO_Init+0x1fa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a46      	ldr	r2, [pc, #280]	; (80049c4 <HAL_GPIO_Init+0x2fc>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d007      	beq.n	80048be <HAL_GPIO_Init+0x1f6>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a45      	ldr	r2, [pc, #276]	; (80049c8 <HAL_GPIO_Init+0x300>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <HAL_GPIO_Init+0x1f2>
 80048b6:	2304      	movs	r3, #4
 80048b8:	e008      	b.n	80048cc <HAL_GPIO_Init+0x204>
 80048ba:	2307      	movs	r3, #7
 80048bc:	e006      	b.n	80048cc <HAL_GPIO_Init+0x204>
 80048be:	2303      	movs	r3, #3
 80048c0:	e004      	b.n	80048cc <HAL_GPIO_Init+0x204>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e002      	b.n	80048cc <HAL_GPIO_Init+0x204>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <HAL_GPIO_Init+0x204>
 80048ca:	2300      	movs	r3, #0
 80048cc:	69fa      	ldr	r2, [r7, #28]
 80048ce:	f002 0203 	and.w	r2, r2, #3
 80048d2:	0092      	lsls	r2, r2, #2
 80048d4:	4093      	lsls	r3, r2
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048dc:	4935      	ldr	r1, [pc, #212]	; (80049b4 <HAL_GPIO_Init+0x2ec>)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	089b      	lsrs	r3, r3, #2
 80048e2:	3302      	adds	r3, #2
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_GPIO_Init+0x304>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490e:	4a2f      	ldr	r2, [pc, #188]	; (80049cc <HAL_GPIO_Init+0x304>)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004914:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_GPIO_Init+0x304>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	43db      	mvns	r3, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4013      	ands	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004938:	4a24      	ldr	r2, [pc, #144]	; (80049cc <HAL_GPIO_Init+0x304>)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_GPIO_Init+0x304>)
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004962:	4a1a      	ldr	r2, [pc, #104]	; (80049cc <HAL_GPIO_Init+0x304>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <HAL_GPIO_Init+0x304>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800498c:	4a0f      	ldr	r2, [pc, #60]	; (80049cc <HAL_GPIO_Init+0x304>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b0f      	cmp	r3, #15
 800499c:	f67f aea2 	bls.w	80046e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40013800 	.word	0x40013800
 80049b8:	40020000 	.word	0x40020000
 80049bc:	40020400 	.word	0x40020400
 80049c0:	40020800 	.word	0x40020800
 80049c4:	40020c00 	.word	0x40020c00
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40013c00 	.word	0x40013c00

080049d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	807b      	strh	r3, [r7, #2]
 80049dc:	4613      	mov	r3, r2
 80049de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049e0:	787b      	ldrb	r3, [r7, #1]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049ec:	e003      	b.n	80049f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049ee:	887b      	ldrh	r3, [r7, #2]
 80049f0:	041a      	lsls	r2, r3, #16
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	619a      	str	r2, [r3, #24]
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e12b      	b.n	8004c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe faaa 	bl	8002f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2224      	movs	r2, #36	; 0x24
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0201 	bic.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a68:	f001 fbb2 	bl	80061d0 <HAL_RCC_GetPCLK1Freq>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4a81      	ldr	r2, [pc, #516]	; (8004c78 <HAL_I2C_Init+0x274>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d807      	bhi.n	8004a88 <HAL_I2C_Init+0x84>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a80      	ldr	r2, [pc, #512]	; (8004c7c <HAL_I2C_Init+0x278>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	bf94      	ite	ls
 8004a80:	2301      	movls	r3, #1
 8004a82:	2300      	movhi	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e006      	b.n	8004a96 <HAL_I2C_Init+0x92>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <HAL_I2C_Init+0x27c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bf94      	ite	ls
 8004a90:	2301      	movls	r3, #1
 8004a92:	2300      	movhi	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0e7      	b.n	8004c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4a78      	ldr	r2, [pc, #480]	; (8004c84 <HAL_I2C_Init+0x280>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	0c9b      	lsrs	r3, r3, #18
 8004aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a6a      	ldr	r2, [pc, #424]	; (8004c78 <HAL_I2C_Init+0x274>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d802      	bhi.n	8004ad8 <HAL_I2C_Init+0xd4>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	e009      	b.n	8004aec <HAL_I2C_Init+0xe8>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ade:	fb02 f303 	mul.w	r3, r2, r3
 8004ae2:	4a69      	ldr	r2, [pc, #420]	; (8004c88 <HAL_I2C_Init+0x284>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	099b      	lsrs	r3, r3, #6
 8004aea:	3301      	adds	r3, #1
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	495c      	ldr	r1, [pc, #368]	; (8004c78 <HAL_I2C_Init+0x274>)
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	d819      	bhi.n	8004b40 <HAL_I2C_Init+0x13c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1e59      	subs	r1, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b1a:	1c59      	adds	r1, r3, #1
 8004b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b20:	400b      	ands	r3, r1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_I2C_Init+0x138>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1e59      	subs	r1, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b34:	3301      	adds	r3, #1
 8004b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b3a:	e051      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	e04f      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d111      	bne.n	8004b6c <HAL_I2C_Init+0x168>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1e58      	subs	r0, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	440b      	add	r3, r1
 8004b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e012      	b.n	8004b92 <HAL_I2C_Init+0x18e>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	1e58      	subs	r0, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	440b      	add	r3, r1
 8004b7a:	0099      	lsls	r1, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <HAL_I2C_Init+0x196>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e022      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_I2C_Init+0x1bc>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1e58      	subs	r0, r3, #1
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6859      	ldr	r1, [r3, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	e00f      	b.n	8004be0 <HAL_I2C_Init+0x1dc>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	0099      	lsls	r1, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	6809      	ldr	r1, [r1, #0]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6911      	ldr	r1, [r2, #16]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68d2      	ldr	r2, [r2, #12]
 8004c1a:	4311      	orrs	r1, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	000186a0 	.word	0x000186a0
 8004c7c:	001e847f 	.word	0x001e847f
 8004c80:	003d08ff 	.word	0x003d08ff
 8004c84:	431bde83 	.word	0x431bde83
 8004c88:	10624dd3 	.word	0x10624dd3

08004c8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	817b      	strh	r3, [r7, #10]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	813b      	strh	r3, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ca6:	f7fe fbd1 	bl	800344c <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	f040 80d9 	bne.w	8004e6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2319      	movs	r3, #25
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	496d      	ldr	r1, [pc, #436]	; (8004e78 <HAL_I2C_Mem_Write+0x1ec>)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fc7f 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0cc      	b.n	8004e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_I2C_Mem_Write+0x56>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0c5      	b.n	8004e6e <HAL_I2C_Mem_Write+0x1e2>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d007      	beq.n	8004d08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2221      	movs	r2, #33	; 0x21
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2240      	movs	r2, #64	; 0x40
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4a4d      	ldr	r2, [pc, #308]	; (8004e7c <HAL_I2C_Mem_Write+0x1f0>)
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d4a:	88f8      	ldrh	r0, [r7, #6]
 8004d4c:	893a      	ldrh	r2, [r7, #8]
 8004d4e:	8979      	ldrh	r1, [r7, #10]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 fab6 	bl	80052cc <I2C_RequestMemoryWrite>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d052      	beq.n	8004e0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e081      	b.n	8004e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fd00 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00d      	beq.n	8004d96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d107      	bne.n	8004d92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e06b      	b.n	8004e6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b04      	cmp	r3, #4
 8004dd2:	d11b      	bne.n	8004e0c <HAL_I2C_Mem_Write+0x180>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d017      	beq.n	8004e0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	781a      	ldrb	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1aa      	bne.n	8004d6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fcec 	bl	80057f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d107      	bne.n	8004e3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e016      	b.n	8004e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	00100002 	.word	0x00100002
 8004e7c:	ffff0000 	.word	0xffff0000

08004e80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	; 0x30
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	817b      	strh	r3, [r7, #10]
 8004e92:	460b      	mov	r3, r1
 8004e94:	813b      	strh	r3, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e9a:	f7fe fad7 	bl	800344c <HAL_GetTick>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	f040 8208 	bne.w	80052be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2319      	movs	r3, #25
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	497b      	ldr	r1, [pc, #492]	; (80050a4 <HAL_I2C_Mem_Read+0x224>)
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fb85 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e1fb      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_I2C_Mem_Read+0x56>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e1f4      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d007      	beq.n	8004efc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2222      	movs	r2, #34	; 0x22
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a5b      	ldr	r2, [pc, #364]	; (80050a8 <HAL_I2C_Mem_Read+0x228>)
 8004f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f3e:	88f8      	ldrh	r0, [r7, #6]
 8004f40:	893a      	ldrh	r2, [r7, #8]
 8004f42:	8979      	ldrh	r1, [r7, #10]
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	9301      	str	r3, [sp, #4]
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa52 	bl	80053f8 <I2C_RequestMemoryRead>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1b0      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f66:	2300      	movs	r3, #0
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e184      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d11b      	bne.n	8004fce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e164      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d11b      	bne.n	800500e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	e144      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005024:	e138      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	2b03      	cmp	r3, #3
 800502c:	f200 80f1 	bhi.w	8005212 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005034:	2b01      	cmp	r3, #1
 8005036:	d123      	bne.n	8005080 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fc1b 	bl	8005878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e139      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800507e:	e10b      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	2b02      	cmp	r3, #2
 8005086:	d14e      	bne.n	8005126 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	2200      	movs	r2, #0
 8005090:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_I2C_Mem_Read+0x22c>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 fa98 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e10e      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
 80050a2:	bf00      	nop
 80050a4:	00100002 	.word	0x00100002
 80050a8:	ffff0000 	.word	0xffff0000
 80050ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	3b01      	subs	r3, #1
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005124:	e0b8      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2200      	movs	r2, #0
 800512e:	4966      	ldr	r1, [pc, #408]	; (80052c8 <HAL_I2C_Mem_Read+0x448>)
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fa49 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0bf      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005188:	2200      	movs	r2, #0
 800518a:	494f      	ldr	r1, [pc, #316]	; (80052c8 <HAL_I2C_Mem_Read+0x448>)
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 fa1b 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e091      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005210:	e042      	b.n	8005298 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fb2e 	bl	8005878 <I2C_WaitOnRXNEFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e04c      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	f003 0304 	and.w	r3, r3, #4
 8005262:	2b04      	cmp	r3, #4
 8005264:	d118      	bne.n	8005298 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528e:	b29b      	uxth	r3, r3
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529c:	2b00      	cmp	r3, #0
 800529e:	f47f aec2 	bne.w	8005026 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e000      	b.n	80052c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052be:	2302      	movs	r3, #2
  }
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3728      	adds	r7, #40	; 0x28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	00010004 	.word	0x00010004

080052cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	4608      	mov	r0, r1
 80052d6:	4611      	mov	r1, r2
 80052d8:	461a      	mov	r2, r3
 80052da:	4603      	mov	r3, r0
 80052dc:	817b      	strh	r3, [r7, #10]
 80052de:	460b      	mov	r3, r1
 80052e0:	813b      	strh	r3, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f960 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531c:	d103      	bne.n	8005326 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e05f      	b.n	80053ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800532a:	897b      	ldrh	r3, [r7, #10]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	492d      	ldr	r1, [pc, #180]	; (80053f4 <I2C_RequestMemoryWrite+0x128>)
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f998 	bl	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e04c      	b.n	80053ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005368:	6a39      	ldr	r1, [r7, #32]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fa02 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00d      	beq.n	8005392 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b04      	cmp	r3, #4
 800537c:	d107      	bne.n	800538e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800538c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e02b      	b.n	80053ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005398:	893b      	ldrh	r3, [r7, #8]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	611a      	str	r2, [r3, #16]
 80053a2:	e021      	b.n	80053e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a4:	893b      	ldrh	r3, [r7, #8]
 80053a6:	0a1b      	lsrs	r3, r3, #8
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b4:	6a39      	ldr	r1, [r7, #32]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f000 f9dc 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d107      	bne.n	80053da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e005      	b.n	80053ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053de:	893b      	ldrh	r3, [r7, #8]
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	00010002 	.word	0x00010002

080053f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	4608      	mov	r0, r1
 8005402:	4611      	mov	r1, r2
 8005404:	461a      	mov	r2, r3
 8005406:	4603      	mov	r3, r0
 8005408:	817b      	strh	r3, [r7, #10]
 800540a:	460b      	mov	r3, r1
 800540c:	813b      	strh	r3, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005420:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	2200      	movs	r2, #0
 800543a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f8c2 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00d      	beq.n	8005466 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005458:	d103      	bne.n	8005462 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0aa      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005466:	897b      	ldrh	r3, [r7, #10]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	6a3a      	ldr	r2, [r7, #32]
 800547a:	4952      	ldr	r1, [pc, #328]	; (80055c4 <I2C_RequestMemoryRead+0x1cc>)
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f8fa 	bl	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e097      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a4:	6a39      	ldr	r1, [r7, #32]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f964 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d107      	bne.n	80054ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e076      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d105      	bne.n	80054e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054d4:	893b      	ldrh	r3, [r7, #8]
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	611a      	str	r2, [r3, #16]
 80054de:	e021      	b.n	8005524 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054e0:	893b      	ldrh	r3, [r7, #8]
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f0:	6a39      	ldr	r1, [r7, #32]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f93e 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b04      	cmp	r3, #4
 8005504:	d107      	bne.n	8005516 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e050      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800551a:	893b      	ldrh	r3, [r7, #8]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	6a39      	ldr	r1, [r7, #32]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f923 	bl	8005774 <I2C_WaitOnTXEFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	2b04      	cmp	r3, #4
 800553a:	d107      	bne.n	800554c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e035      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800555e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	2200      	movs	r2, #0
 8005568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f82b 	bl	80055c8 <I2C_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005586:	d103      	bne.n	8005590 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e013      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005594:	897b      	ldrh	r3, [r7, #10]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	6a3a      	ldr	r2, [r7, #32]
 80055a8:	4906      	ldr	r1, [pc, #24]	; (80055c4 <I2C_RequestMemoryRead+0x1cc>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f863 	bl	8005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	00010002 	.word	0x00010002

080055c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4613      	mov	r3, r2
 80055d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d8:	e025      	b.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d021      	beq.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e2:	f7fd ff33 	bl	800344c <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d116      	bne.n	8005626 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0220 	orr.w	r2, r3, #32
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e023      	b.n	800566e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	0c1b      	lsrs	r3, r3, #16
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d10d      	bne.n	800564c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	43da      	mvns	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	b29b      	uxth	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	461a      	mov	r2, r3
 800564a:	e00c      	b.n	8005666 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	429a      	cmp	r2, r3
 800566a:	d0b6      	beq.n	80055da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b084      	sub	sp, #16
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005684:	e051      	b.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005694:	d123      	bne.n	80056de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0204 	orr.w	r2, r3, #4
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e046      	b.n	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d021      	beq.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fd feb1 	bl	800344c <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e020      	b.n	800576c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10c      	bne.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e00b      	b.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	43da      	mvns	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d18d      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005780:	e02d      	b.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	f000 f8ce 	bl	8005924 <I2C_IsAcknowledgeFailed>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e02d      	b.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d021      	beq.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579a:	f7fd fe57 	bl	800344c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d302      	bcc.n	80057b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d116      	bne.n	80057de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e007      	b.n	80057ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d1ca      	bne.n	8005782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005802:	e02d      	b.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f88d 	bl	8005924 <I2C_IsAcknowledgeFailed>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e02d      	b.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581a:	d021      	beq.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fd fe16 	bl	800344c <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d116      	bne.n	8005860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f043 0220 	orr.w	r2, r3, #32
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e007      	b.n	8005870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0304 	and.w	r3, r3, #4
 800586a:	2b04      	cmp	r3, #4
 800586c:	d1ca      	bne.n	8005804 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005884:	e042      	b.n	800590c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b10      	cmp	r3, #16
 8005892:	d119      	bne.n	80058c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0210 	mvn.w	r2, #16
 800589c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e029      	b.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c8:	f7fd fdc0 	bl	800344c <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d116      	bne.n	800590c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f043 0220 	orr.w	r2, r3, #32
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e007      	b.n	800591c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d1b5      	bne.n	8005886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593a:	d11b      	bne.n	8005974 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005944:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f043 0204 	orr.w	r2, r3, #4
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
	...

08005984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e25e      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d075      	beq.n	8005a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059a2:	4b88      	ldr	r3, [pc, #544]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 030c 	and.w	r3, r3, #12
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d00c      	beq.n	80059c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ae:	4b85      	ldr	r3, [pc, #532]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d112      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ba:	4b82      	ldr	r3, [pc, #520]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c6:	d10b      	bne.n	80059e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c8:	4b7e      	ldr	r3, [pc, #504]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05b      	beq.n	8005a8c <HAL_RCC_OscConfig+0x108>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d157      	bne.n	8005a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e239      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e8:	d106      	bne.n	80059f8 <HAL_RCC_OscConfig+0x74>
 80059ea:	4b76      	ldr	r3, [pc, #472]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a75      	ldr	r2, [pc, #468]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	e01d      	b.n	8005a34 <HAL_RCC_OscConfig+0xb0>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x98>
 8005a02:	4b70      	ldr	r3, [pc, #448]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6f      	ldr	r2, [pc, #444]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4b6d      	ldr	r3, [pc, #436]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a6c      	ldr	r2, [pc, #432]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0xb0>
 8005a1c:	4b69      	ldr	r3, [pc, #420]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a68      	ldr	r2, [pc, #416]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	4b66      	ldr	r3, [pc, #408]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a65      	ldr	r2, [pc, #404]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d013      	beq.n	8005a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fd fd06 	bl	800344c <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a44:	f7fd fd02 	bl	800344c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e1fe      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a56:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCC_OscConfig+0xc0>
 8005a62:	e014      	b.n	8005a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a64:	f7fd fcf2 	bl	800344c <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7fd fcee 	bl	800344c <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e1ea      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7e:	4b51      	ldr	r3, [pc, #324]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0xe8>
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d063      	beq.n	8005b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d11c      	bne.n	8005aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab2:	4b44      	ldr	r3, [pc, #272]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d116      	bne.n	8005aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abe:	4b41      	ldr	r3, [pc, #260]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x152>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e1be      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad6:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4937      	ldr	r1, [pc, #220]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aea:	e03a      	b.n	8005b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d020      	beq.n	8005b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCC_OscConfig+0x244>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afa:	f7fd fca7 	bl	800344c <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b02:	f7fd fca3 	bl	800344c <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e19f      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b14:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0f0      	beq.n	8005b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b20:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4925      	ldr	r1, [pc, #148]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]
 8005b34:	e015      	b.n	8005b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b36:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCC_OscConfig+0x244>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fc86 	bl	800344c <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b44:	f7fd fc82 	bl	800344c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e17e      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d036      	beq.n	8005bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <HAL_RCC_OscConfig+0x248>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fd fc66 	bl	800344c <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fd fc62 	bl	800344c <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e15e      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b96:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_OscConfig+0x240>)
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x200>
 8005ba2:	e01b      	b.n	8005bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_RCC_OscConfig+0x248>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005baa:	f7fd fc4f 	bl	800344c <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bb0:	e00e      	b.n	8005bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb2:	f7fd fc4b 	bl	800344c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d907      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e147      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	42470000 	.word	0x42470000
 8005bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bd0:	4b88      	ldr	r3, [pc, #544]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ea      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8097 	beq.w	8005d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bea:	2300      	movs	r3, #0
 8005bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bee:	4b81      	ldr	r3, [pc, #516]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10f      	bne.n	8005c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	4b7d      	ldr	r3, [pc, #500]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	4a7c      	ldr	r2, [pc, #496]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c08:	6413      	str	r3, [r2, #64]	; 0x40
 8005c0a:	4b7a      	ldr	r3, [pc, #488]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c16:	2301      	movs	r3, #1
 8005c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1a:	4b77      	ldr	r3, [pc, #476]	; (8005df8 <HAL_RCC_OscConfig+0x474>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d118      	bne.n	8005c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c26:	4b74      	ldr	r3, [pc, #464]	; (8005df8 <HAL_RCC_OscConfig+0x474>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a73      	ldr	r2, [pc, #460]	; (8005df8 <HAL_RCC_OscConfig+0x474>)
 8005c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c32:	f7fd fc0b 	bl	800344c <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c38:	e008      	b.n	8005c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3a:	f7fd fc07 	bl	800344c <HAL_GetTick>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1ad3      	subs	r3, r2, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d901      	bls.n	8005c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e103      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4c:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <HAL_RCC_OscConfig+0x474>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d106      	bne.n	8005c6e <HAL_RCC_OscConfig+0x2ea>
 8005c60:	4b64      	ldr	r3, [pc, #400]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	4a63      	ldr	r2, [pc, #396]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6c:	e01c      	b.n	8005ca8 <HAL_RCC_OscConfig+0x324>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	2b05      	cmp	r3, #5
 8005c74:	d10c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x30c>
 8005c76:	4b5f      	ldr	r3, [pc, #380]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	4a5e      	ldr	r2, [pc, #376]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	6713      	str	r3, [r2, #112]	; 0x70
 8005c82:	4b5c      	ldr	r3, [pc, #368]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	4a5b      	ldr	r2, [pc, #364]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	e00b      	b.n	8005ca8 <HAL_RCC_OscConfig+0x324>
 8005c90:	4b58      	ldr	r3, [pc, #352]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	4a57      	ldr	r2, [pc, #348]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9c:	4b55      	ldr	r3, [pc, #340]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca0:	4a54      	ldr	r2, [pc, #336]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	f023 0304 	bic.w	r3, r3, #4
 8005ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d015      	beq.n	8005cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb0:	f7fd fbcc 	bl	800344c <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb6:	e00a      	b.n	8005cce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb8:	f7fd fbc8 	bl	800344c <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e0c2      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cce:	4b49      	ldr	r3, [pc, #292]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0ee      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x334>
 8005cda:	e014      	b.n	8005d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cdc:	f7fd fbb6 	bl	800344c <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce4:	f7fd fbb2 	bl	800344c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e0ac      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfa:	4b3e      	ldr	r3, [pc, #248]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ee      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0c:	4b39      	ldr	r3, [pc, #228]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	4a38      	ldr	r2, [pc, #224]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8098 	beq.w	8005e52 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d22:	4b34      	ldr	r3, [pc, #208]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d05c      	beq.n	8005de8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d141      	bne.n	8005dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d36:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <HAL_RCC_OscConfig+0x478>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3c:	f7fd fb86 	bl	800344c <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fd fb82 	bl	800344c <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e07e      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	491b      	ldr	r1, [pc, #108]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	; (8005dfc <HAL_RCC_OscConfig+0x478>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d92:	f7fd fb5b 	bl	800344c <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9a:	f7fd fb57 	bl	800344c <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e053      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dac:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f0      	beq.n	8005d9a <HAL_RCC_OscConfig+0x416>
 8005db8:	e04b      	b.n	8005e52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <HAL_RCC_OscConfig+0x478>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fd fb44 	bl	800344c <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc8:	f7fd fb40 	bl	800344c <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e03c      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x444>
 8005de6:	e034      	b.n	8005e52 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d107      	bne.n	8005e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e02f      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40007000 	.word	0x40007000
 8005dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_RCC_OscConfig+0x4d8>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d11c      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d115      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e28:	4013      	ands	r3, r2
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d10d      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d106      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e000      	b.n	8005e54 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3718      	adds	r7, #24
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	40023800 	.word	0x40023800

08005e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0cc      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e74:	4b68      	ldr	r3, [pc, #416]	; (8006018 <HAL_RCC_ClockConfig+0x1b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d90c      	bls.n	8005e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e82:	4b65      	ldr	r3, [pc, #404]	; (8006018 <HAL_RCC_ClockConfig+0x1b8>)
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e8a:	4b63      	ldr	r3, [pc, #396]	; (8006018 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 030f 	and.w	r3, r3, #15
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d001      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e0b8      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d020      	beq.n	8005eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005eb4:	4b59      	ldr	r3, [pc, #356]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a58      	ldr	r2, [pc, #352]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ecc:	4b53      	ldr	r3, [pc, #332]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a52      	ldr	r2, [pc, #328]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ed8:	4b50      	ldr	r3, [pc, #320]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	494d      	ldr	r1, [pc, #308]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d044      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d107      	bne.n	8005f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efe:	4b47      	ldr	r3, [pc, #284]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d119      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e07f      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d003      	beq.n	8005f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d107      	bne.n	8005f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f1e:	4b3f      	ldr	r3, [pc, #252]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d109      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e06f      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f2e:	4b3b      	ldr	r3, [pc, #236]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e067      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f3e:	4b37      	ldr	r3, [pc, #220]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 0203 	bic.w	r2, r3, #3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	4934      	ldr	r1, [pc, #208]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f50:	f7fd fa7c 	bl	800344c <HAL_GetTick>
 8005f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f56:	e00a      	b.n	8005f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f58:	f7fd fa78 	bl	800344c <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e04f      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6e:	4b2b      	ldr	r3, [pc, #172]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 020c 	and.w	r2, r3, #12
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d1eb      	bne.n	8005f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f80:	4b25      	ldr	r3, [pc, #148]	; (8006018 <HAL_RCC_ClockConfig+0x1b8>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d20c      	bcs.n	8005fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <HAL_RCC_ClockConfig+0x1b8>)
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	b2d2      	uxtb	r2, r2
 8005f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f96:	4b20      	ldr	r3, [pc, #128]	; (8006018 <HAL_RCC_ClockConfig+0x1b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e032      	b.n	800600e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d008      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fb4:	4b19      	ldr	r3, [pc, #100]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	4916      	ldr	r1, [pc, #88]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fd2:	4b12      	ldr	r3, [pc, #72]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	490e      	ldr	r1, [pc, #56]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fe6:	f000 f821 	bl	800602c <HAL_RCC_GetSysClockFreq>
 8005fea:	4602      	mov	r2, r0
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	091b      	lsrs	r3, r3, #4
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	490a      	ldr	r1, [pc, #40]	; (8006020 <HAL_RCC_ClockConfig+0x1c0>)
 8005ff8:	5ccb      	ldrb	r3, [r1, r3]
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	4a09      	ldr	r2, [pc, #36]	; (8006024 <HAL_RCC_ClockConfig+0x1c4>)
 8006000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <HAL_RCC_ClockConfig+0x1c8>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7fd f9dc 	bl	80033c4 <HAL_InitTick>

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40023c00 	.word	0x40023c00
 800601c:	40023800 	.word	0x40023800
 8006020:	08007e14 	.word	0x08007e14
 8006024:	200005c0 	.word	0x200005c0
 8006028:	200005c4 	.word	0x200005c4

0800602c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800602c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006030:	b090      	sub	sp, #64	; 0x40
 8006032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
 8006038:	2300      	movs	r3, #0
 800603a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800603c:	2300      	movs	r3, #0
 800603e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006044:	4b59      	ldr	r3, [pc, #356]	; (80061ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 030c 	and.w	r3, r3, #12
 800604c:	2b08      	cmp	r3, #8
 800604e:	d00d      	beq.n	800606c <HAL_RCC_GetSysClockFreq+0x40>
 8006050:	2b08      	cmp	r3, #8
 8006052:	f200 80a1 	bhi.w	8006198 <HAL_RCC_GetSysClockFreq+0x16c>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_RCC_GetSysClockFreq+0x34>
 800605a:	2b04      	cmp	r3, #4
 800605c:	d003      	beq.n	8006066 <HAL_RCC_GetSysClockFreq+0x3a>
 800605e:	e09b      	b.n	8006198 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006060:	4b53      	ldr	r3, [pc, #332]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006064:	e09b      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006066:	4b53      	ldr	r3, [pc, #332]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800606a:	e098      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800606c:	4b4f      	ldr	r3, [pc, #316]	; (80061ac <HAL_RCC_GetSysClockFreq+0x180>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006076:	4b4d      	ldr	r3, [pc, #308]	; (80061ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d028      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006082:	4b4a      	ldr	r3, [pc, #296]	; (80061ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	099b      	lsrs	r3, r3, #6
 8006088:	2200      	movs	r2, #0
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	627a      	str	r2, [r7, #36]	; 0x24
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006094:	2100      	movs	r1, #0
 8006096:	4b47      	ldr	r3, [pc, #284]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006098:	fb03 f201 	mul.w	r2, r3, r1
 800609c:	2300      	movs	r3, #0
 800609e:	fb00 f303 	mul.w	r3, r0, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	4a43      	ldr	r2, [pc, #268]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80060a6:	fba0 1202 	umull	r1, r2, r0, r2
 80060aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060ac:	460a      	mov	r2, r1
 80060ae:	62ba      	str	r2, [r7, #40]	; 0x28
 80060b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b2:	4413      	add	r3, r2
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b8:	2200      	movs	r2, #0
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060c6:	f7fa fc45 	bl	8000954 <__aeabi_uldivmod>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4613      	mov	r3, r2
 80060d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d2:	e053      	b.n	800617c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d4:	4b35      	ldr	r3, [pc, #212]	; (80061ac <HAL_RCC_GetSysClockFreq+0x180>)
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	099b      	lsrs	r3, r3, #6
 80060da:	2200      	movs	r2, #0
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	617a      	str	r2, [r7, #20]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060e6:	f04f 0b00 	mov.w	fp, #0
 80060ea:	4652      	mov	r2, sl
 80060ec:	465b      	mov	r3, fp
 80060ee:	f04f 0000 	mov.w	r0, #0
 80060f2:	f04f 0100 	mov.w	r1, #0
 80060f6:	0159      	lsls	r1, r3, #5
 80060f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060fc:	0150      	lsls	r0, r2, #5
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	ebb2 080a 	subs.w	r8, r2, sl
 8006106:	eb63 090b 	sbc.w	r9, r3, fp
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006116:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800611a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800611e:	ebb2 0408 	subs.w	r4, r2, r8
 8006122:	eb63 0509 	sbc.w	r5, r3, r9
 8006126:	f04f 0200 	mov.w	r2, #0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	00eb      	lsls	r3, r5, #3
 8006130:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006134:	00e2      	lsls	r2, r4, #3
 8006136:	4614      	mov	r4, r2
 8006138:	461d      	mov	r5, r3
 800613a:	eb14 030a 	adds.w	r3, r4, sl
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	eb45 030b 	adc.w	r3, r5, fp
 8006144:	607b      	str	r3, [r7, #4]
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006152:	4629      	mov	r1, r5
 8006154:	028b      	lsls	r3, r1, #10
 8006156:	4621      	mov	r1, r4
 8006158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800615c:	4621      	mov	r1, r4
 800615e:	028a      	lsls	r2, r1, #10
 8006160:	4610      	mov	r0, r2
 8006162:	4619      	mov	r1, r3
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	2200      	movs	r2, #0
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	60fa      	str	r2, [r7, #12]
 800616c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006170:	f7fa fbf0 	bl	8000954 <__aeabi_uldivmod>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4613      	mov	r3, r2
 800617a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_GetSysClockFreq+0x180>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	0c1b      	lsrs	r3, r3, #16
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	3301      	adds	r3, #1
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800618c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	fbb2 f3f3 	udiv	r3, r2, r3
 8006194:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006196:	e002      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006198:	4b05      	ldr	r3, [pc, #20]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800619c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3740      	adds	r7, #64	; 0x40
 80061a4:	46bd      	mov	sp, r7
 80061a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061aa:	bf00      	nop
 80061ac:	40023800 	.word	0x40023800
 80061b0:	00f42400 	.word	0x00f42400
 80061b4:	017d7840 	.word	0x017d7840

080061b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061bc:	4b03      	ldr	r3, [pc, #12]	; (80061cc <HAL_RCC_GetHCLKFreq+0x14>)
 80061be:	681b      	ldr	r3, [r3, #0]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	200005c0 	.word	0x200005c0

080061d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061d4:	f7ff fff0 	bl	80061b8 <HAL_RCC_GetHCLKFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	0a9b      	lsrs	r3, r3, #10
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	4903      	ldr	r1, [pc, #12]	; (80061f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061e6:	5ccb      	ldrb	r3, [r1, r3]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40023800 	.word	0x40023800
 80061f4:	08007e24 	.word	0x08007e24

080061f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e056      	b.n	80062b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fc ff07 	bl	8003038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006240:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	ea42 0103 	orr.w	r1, r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	0c1b      	lsrs	r3, r3, #16
 8006288:	f003 0104 	and.w	r1, r3, #4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	69da      	ldr	r2, [r3, #28]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	4613      	mov	r3, r2
 80062ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Transmit+0x22>
 80062de:	2302      	movs	r3, #2
 80062e0:	e11e      	b.n	8006520 <HAL_SPI_Transmit+0x260>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062ea:	f7fd f8af 	bl	800344c <HAL_GetTick>
 80062ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006300:	2302      	movs	r3, #2
 8006302:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006304:	e103      	b.n	800650e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d002      	beq.n	8006312 <HAL_SPI_Transmit+0x52>
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006316:	e0fa      	b.n	800650e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2203      	movs	r2, #3
 800631c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800635e:	d107      	bne.n	8006370 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d007      	beq.n	800638e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800638c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006396:	d14b      	bne.n	8006430 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <HAL_SPI_Transmit+0xe6>
 80063a0:	8afb      	ldrh	r3, [r7, #22]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d13e      	bne.n	8006424 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063aa:	881a      	ldrh	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063ca:	e02b      	b.n	8006424 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d112      	bne.n	8006400 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	881a      	ldrh	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80063fe:	e011      	b.n	8006424 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006400:	f7fd f824 	bl	800344c <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d803      	bhi.n	8006418 <HAL_SPI_Transmit+0x158>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d102      	bne.n	800641e <HAL_SPI_Transmit+0x15e>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d102      	bne.n	8006424 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006422:	e074      	b.n	800650e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006428:	b29b      	uxth	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1ce      	bne.n	80063cc <HAL_SPI_Transmit+0x10c>
 800642e:	e04c      	b.n	80064ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_SPI_Transmit+0x17e>
 8006438:	8afb      	ldrh	r3, [r7, #22]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d140      	bne.n	80064c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	330c      	adds	r3, #12
 8006448:	7812      	ldrb	r2, [r2, #0]
 800644a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	3b01      	subs	r3, #1
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006464:	e02c      	b.n	80064c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b02      	cmp	r3, #2
 8006472:	d113      	bne.n	800649c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	330c      	adds	r3, #12
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	86da      	strh	r2, [r3, #54]	; 0x36
 800649a:	e011      	b.n	80064c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800649c:	f7fc ffd6 	bl	800344c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d803      	bhi.n	80064b4 <HAL_SPI_Transmit+0x1f4>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d102      	bne.n	80064ba <HAL_SPI_Transmit+0x1fa>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064be:	e026      	b.n	800650e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1cd      	bne.n	8006466 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f894 	bl	80065fc <SPI_EndRxTxTransaction>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	613b      	str	r3, [r7, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	77fb      	strb	r3, [r7, #31]
 800650a:	e000      	b.n	800650e <HAL_SPI_Transmit+0x24e>
  }

error:
 800650c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800651e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4613      	mov	r3, r2
 8006536:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006538:	e04c      	b.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d048      	beq.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006542:	f7fc ff83 	bl	800344c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d902      	bls.n	8006558 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d13d      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006570:	d111      	bne.n	8006596 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	d004      	beq.n	8006586 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006584:	d107      	bne.n	8006596 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006594:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659e:	d10f      	bne.n	80065c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e00f      	b.n	80065f4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	4013      	ands	r3, r2
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	bf0c      	ite	eq
 80065e4:	2301      	moveq	r3, #1
 80065e6:	2300      	movne	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d1a3      	bne.n	800653a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <SPI_EndRxTxTransaction+0x7c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <SPI_EndRxTxTransaction+0x80>)
 800660e:	fba2 2303 	umull	r2, r3, r2, r3
 8006612:	0d5b      	lsrs	r3, r3, #21
 8006614:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006618:	fb02 f303 	mul.w	r3, r2, r3
 800661c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006626:	d112      	bne.n	800664e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2200      	movs	r2, #0
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff ff78 	bl	8006528 <SPI_WaitFlagStateUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d016      	beq.n	800666c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e00f      	b.n	800666e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	3b01      	subs	r3, #1
 8006658:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006664:	2b80      	cmp	r3, #128	; 0x80
 8006666:	d0f2      	beq.n	800664e <SPI_EndRxTxTransaction+0x52>
 8006668:	e000      	b.n	800666c <SPI_EndRxTxTransaction+0x70>
        break;
 800666a:	bf00      	nop
  }

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	200005c0 	.word	0x200005c0
 800667c:	165e9f81 	.word	0x165e9f81

08006680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e01d      	b.n	80066ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d106      	bne.n	80066ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc fd8a 	bl	80031c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f000 fc04 	bl	8006ecc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f003 0307 	and.w	r3, r3, #7
 80066f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0201 	orr.w	r2, r2, #1
 8006706:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3714      	adds	r7, #20
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800671e:	b480      	push	{r7}
 8006720:	b085      	sub	sp, #20
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0201 	orr.w	r2, r2, #1
 8006734:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b06      	cmp	r3, #6
 8006746:	d007      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e01d      	b.n	80067b4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f815 	bl	80067bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3304      	adds	r3, #4
 80067a2:	4619      	mov	r1, r3
 80067a4:	4610      	mov	r0, r2
 80067a6:	f000 fb91 	bl	8006ecc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2201      	movs	r2, #1
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fe18 	bl	8007418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a10      	ldr	r2, [pc, #64]	; (8006830 <HAL_TIM_PWM_Start+0x60>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d107      	bne.n	8006802 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b06      	cmp	r3, #6
 8006812:	d007      	beq.n	8006824 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000

08006834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e083      	b.n	8006950 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fc fc33 	bl	80030c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006878:	f023 0307 	bic.w	r3, r3, #7
 800687c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f000 fb1f 	bl	8006ecc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	4313      	orrs	r3, r2
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068d4:	f023 030c 	bic.w	r3, r3, #12
 80068d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	021b      	lsls	r3, r3, #8
 80068f0:	4313      	orrs	r3, r2
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	031b      	lsls	r3, r3, #12
 8006904:	4313      	orrs	r3, r2
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006912:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	4313      	orrs	r3, r2
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d122      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b02      	cmp	r3, #2
 800697a:	d11b      	bne.n	80069b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f06f 0202 	mvn.w	r2, #2
 8006984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa78 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 80069a0:	e005      	b.n	80069ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa6a 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa7b 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d122      	bne.n	8006a08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d11b      	bne.n	8006a08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f06f 0204 	mvn.w	r2, #4
 80069d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2202      	movs	r2, #2
 80069de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fa4e 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 80069f4:	e005      	b.n	8006a02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 fa40 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa51 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d122      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d11b      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f06f 0208 	mvn.w	r2, #8
 8006a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2204      	movs	r2, #4
 8006a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d003      	beq.n	8006a4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa24 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 8006a48:	e005      	b.n	8006a56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fa16 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa27 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b10      	cmp	r3, #16
 8006a68:	d122      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d11b      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f06f 0210 	mvn.w	r2, #16
 8006a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2208      	movs	r2, #8
 8006a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d003      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9fa 	bl	8006e90 <HAL_TIM_IC_CaptureCallback>
 8006a9c:	e005      	b.n	8006aaa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f9ec 	bl	8006e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f9fd 	bl	8006ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d10e      	bne.n	8006adc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d107      	bne.n	8006adc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f06f 0201 	mvn.w	r2, #1
 8006ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fa fe6c 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b80      	cmp	r3, #128	; 0x80
 8006ae8:	d10e      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af4:	2b80      	cmp	r3, #128	; 0x80
 8006af6:	d107      	bne.n	8006b08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fd26 	bl	8007554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b40      	cmp	r3, #64	; 0x40
 8006b14:	d10e      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d107      	bne.n	8006b34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f9c2 	bl	8006eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b20      	cmp	r3, #32
 8006b40:	d10e      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	f003 0320 	and.w	r3, r3, #32
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d107      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0220 	mvn.w	r2, #32
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fcf0 	bl	8007540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e0b4      	b.n	8006cec <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b0c      	cmp	r3, #12
 8006b96:	f200 809f 	bhi.w	8006cd8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bd5 	.word	0x08006bd5
 8006ba4:	08006cd9 	.word	0x08006cd9
 8006ba8:	08006cd9 	.word	0x08006cd9
 8006bac:	08006cd9 	.word	0x08006cd9
 8006bb0:	08006c15 	.word	0x08006c15
 8006bb4:	08006cd9 	.word	0x08006cd9
 8006bb8:	08006cd9 	.word	0x08006cd9
 8006bbc:	08006cd9 	.word	0x08006cd9
 8006bc0:	08006c57 	.word	0x08006c57
 8006bc4:	08006cd9 	.word	0x08006cd9
 8006bc8:	08006cd9 	.word	0x08006cd9
 8006bcc:	08006cd9 	.word	0x08006cd9
 8006bd0:	08006c97 	.word	0x08006c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68b9      	ldr	r1, [r7, #8]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f9f6 	bl	8006fcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0208 	orr.w	r2, r2, #8
 8006bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0204 	bic.w	r2, r2, #4
 8006bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
      break;
 8006c12:	e062      	b.n	8006cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 fa3c 	bl	8007098 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699a      	ldr	r2, [r3, #24]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6999      	ldr	r1, [r3, #24]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
      break;
 8006c54:	e041      	b.n	8006cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fa87 	bl	8007170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f042 0208 	orr.w	r2, r2, #8
 8006c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 0204 	bic.w	r2, r2, #4
 8006c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69d9      	ldr	r1, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	61da      	str	r2, [r3, #28]
      break;
 8006c94:	e021      	b.n	8006cda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68b9      	ldr	r1, [r7, #8]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f000 fad1 	bl	8007244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69da      	ldr	r2, [r3, #28]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69d9      	ldr	r1, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	021a      	lsls	r2, r3, #8
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	61da      	str	r2, [r3, #28]
      break;
 8006cd6:	e000      	b.n	8006cda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006cd8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIM_ConfigClockSource+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e0b3      	b.n	8006e74 <HAL_TIM_ConfigClockSource+0x180>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2202      	movs	r2, #2
 8006d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d44:	d03e      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0xd0>
 8006d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4a:	f200 8087 	bhi.w	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d52:	f000 8085 	beq.w	8006e60 <HAL_TIM_ConfigClockSource+0x16c>
 8006d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5a:	d87f      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d5c:	2b70      	cmp	r3, #112	; 0x70
 8006d5e:	d01a      	beq.n	8006d96 <HAL_TIM_ConfigClockSource+0xa2>
 8006d60:	2b70      	cmp	r3, #112	; 0x70
 8006d62:	d87b      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d64:	2b60      	cmp	r3, #96	; 0x60
 8006d66:	d050      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0x116>
 8006d68:	2b60      	cmp	r3, #96	; 0x60
 8006d6a:	d877      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d6c:	2b50      	cmp	r3, #80	; 0x50
 8006d6e:	d03c      	beq.n	8006dea <HAL_TIM_ConfigClockSource+0xf6>
 8006d70:	2b50      	cmp	r3, #80	; 0x50
 8006d72:	d873      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d74:	2b40      	cmp	r3, #64	; 0x40
 8006d76:	d058      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x136>
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	d86f      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	d064      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
 8006d80:	2b30      	cmp	r3, #48	; 0x30
 8006d82:	d86b      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d84:	2b20      	cmp	r3, #32
 8006d86:	d060      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
 8006d88:	2b20      	cmp	r3, #32
 8006d8a:	d867      	bhi.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d05c      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d05a      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d94:	e062      	b.n	8006e5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6899      	ldr	r1, [r3, #8]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f000 fb17 	bl	80073d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006db8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	609a      	str	r2, [r3, #8]
      break;
 8006dc2:	e04e      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	6899      	ldr	r1, [r3, #8]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f000 fb00 	bl	80073d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006de6:	609a      	str	r2, [r3, #8]
      break;
 8006de8:	e03b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6818      	ldr	r0, [r3, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	6859      	ldr	r1, [r3, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	461a      	mov	r2, r3
 8006df8:	f000 fa74 	bl	80072e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2150      	movs	r1, #80	; 0x50
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 facd 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006e08:	e02b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f000 fa93 	bl	8007342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2160      	movs	r1, #96	; 0x60
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fabd 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e01b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fa54 	bl	80072e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2140      	movs	r1, #64	; 0x40
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 faad 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e00b      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f000 faa4 	bl	80073a2 <TIM_ITRx_SetConfig>
      break;
 8006e5a:	e002      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a34      	ldr	r2, [pc, #208]	; (8006fb0 <TIM_Base_SetConfig+0xe4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d00f      	beq.n	8006f04 <TIM_Base_SetConfig+0x38>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eea:	d00b      	beq.n	8006f04 <TIM_Base_SetConfig+0x38>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a31      	ldr	r2, [pc, #196]	; (8006fb4 <TIM_Base_SetConfig+0xe8>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d007      	beq.n	8006f04 <TIM_Base_SetConfig+0x38>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a30      	ldr	r2, [pc, #192]	; (8006fb8 <TIM_Base_SetConfig+0xec>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_Base_SetConfig+0x38>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a2f      	ldr	r2, [pc, #188]	; (8006fbc <TIM_Base_SetConfig+0xf0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d108      	bne.n	8006f16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a25      	ldr	r2, [pc, #148]	; (8006fb0 <TIM_Base_SetConfig+0xe4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01b      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f24:	d017      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a22      	ldr	r2, [pc, #136]	; (8006fb4 <TIM_Base_SetConfig+0xe8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <TIM_Base_SetConfig+0xec>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00f      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a20      	ldr	r2, [pc, #128]	; (8006fbc <TIM_Base_SetConfig+0xf0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00b      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <TIM_Base_SetConfig+0xf4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d007      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1e      	ldr	r2, [pc, #120]	; (8006fc4 <TIM_Base_SetConfig+0xf8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_Base_SetConfig+0x8a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <TIM_Base_SetConfig+0xfc>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d108      	bne.n	8006f68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <TIM_Base_SetConfig+0xe4>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d103      	bne.n	8006f9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	615a      	str	r2, [r3, #20]
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40000400 	.word	0x40000400
 8006fb8:	40000800 	.word	0x40000800
 8006fbc:	40000c00 	.word	0x40000c00
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f023 0201 	bic.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f023 0302 	bic.w	r3, r3, #2
 8007014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <TIM_OC1_SetConfig+0xc8>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10c      	bne.n	8007042 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0308 	bic.w	r3, r3, #8
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f023 0304 	bic.w	r3, r3, #4
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a13      	ldr	r2, [pc, #76]	; (8007094 <TIM_OC1_SetConfig+0xc8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d111      	bne.n	800706e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	699b      	ldr	r3, [r3, #24]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	621a      	str	r2, [r3, #32]
}
 8007088:	bf00      	nop
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	40010000 	.word	0x40010000

08007098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f023 0210 	bic.w	r2, r3, #16
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f023 0320 	bic.w	r3, r3, #32
 80070e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a1e      	ldr	r2, [pc, #120]	; (800716c <TIM_OC2_SetConfig+0xd4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d10d      	bne.n	8007114 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007112:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a15      	ldr	r2, [pc, #84]	; (800716c <TIM_OC2_SetConfig+0xd4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d113      	bne.n	8007144 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800712a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	697a      	ldr	r2, [r7, #20]
 800715c:	621a      	str	r2, [r3, #32]
}
 800715e:	bf00      	nop
 8007160:	371c      	adds	r7, #28
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40010000 	.word	0x40010000

08007170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	021b      	lsls	r3, r3, #8
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <TIM_OC3_SetConfig+0xd0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d10d      	bne.n	80071ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a14      	ldr	r2, [pc, #80]	; (8007240 <TIM_OC3_SetConfig+0xd0>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d113      	bne.n	800721a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	621a      	str	r2, [r3, #32]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	40010000 	.word	0x40010000

08007244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	69db      	ldr	r3, [r3, #28]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800728e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	031b      	lsls	r3, r3, #12
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a10      	ldr	r2, [pc, #64]	; (80072e0 <TIM_OC4_SetConfig+0x9c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d109      	bne.n	80072b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	019b      	lsls	r3, r3, #6
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	621a      	str	r2, [r3, #32]
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000

080072e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800730e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	011b      	lsls	r3, r3, #4
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f023 030a 	bic.w	r3, r3, #10
 8007320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	621a      	str	r2, [r3, #32]
}
 8007336:	bf00      	nop
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	f023 0210 	bic.w	r2, r3, #16
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	031b      	lsls	r3, r3, #12
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800737e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	621a      	str	r2, [r3, #32]
}
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	f043 0307 	orr.w	r3, r3, #7
 80073c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	609a      	str	r2, [r3, #8]
}
 80073cc:	bf00      	nop
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	021a      	lsls	r2, r3, #8
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	431a      	orrs	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4313      	orrs	r3, r2
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	2201      	movs	r2, #1
 800742c:	fa02 f303 	lsl.w	r3, r2, r3
 8007430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a1a      	ldr	r2, [r3, #32]
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	43db      	mvns	r3, r3
 800743a:	401a      	ands	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1a      	ldr	r2, [r3, #32]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f003 031f 	and.w	r3, r3, #31
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	fa01 f303 	lsl.w	r3, r1, r3
 8007450:	431a      	orrs	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
}
 8007456:	bf00      	nop
 8007458:	371c      	adds	r7, #28
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007464:	b480      	push	{r7}
 8007466:	b085      	sub	sp, #20
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007478:	2302      	movs	r3, #2
 800747a:	e050      	b.n	800751e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a1c      	ldr	r2, [pc, #112]	; (800752c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d018      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074c8:	d013      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a18      	ldr	r2, [pc, #96]	; (8007530 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00e      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a16      	ldr	r2, [pc, #88]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d009      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a15      	ldr	r2, [pc, #84]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d004      	beq.n	80074f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a13      	ldr	r2, [pc, #76]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d10c      	bne.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4313      	orrs	r3, r2
 8007502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40010000 	.word	0x40010000
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40014000 	.word	0x40014000

08007540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <arm_sin_f32>:
 8007568:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80075e4 <arm_sin_f32+0x7c>
 800756c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007570:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007578:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800757c:	d42c      	bmi.n	80075d8 <arm_sin_f32+0x70>
 800757e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007582:	eddf 6a19 	vldr	s13, [pc, #100]	; 80075e8 <arm_sin_f32+0x80>
 8007586:	4a19      	ldr	r2, [pc, #100]	; (80075ec <arm_sin_f32+0x84>)
 8007588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800758c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007590:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007594:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	bfa8      	it	ge
 800759e:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 80075a2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80075a6:	ee17 3a10 	vmov	r3, s14
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a10 	vmov	s14, r3
 80075b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80075b6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80075ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075be:	edd1 6a01 	vldr	s13, [r1, #4]
 80075c2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80075c6:	ed91 0a00 	vldr	s0, [r1]
 80075ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075ce:	ee27 0a00 	vmul.f32	s0, s14, s0
 80075d2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80075d6:	4770      	bx	lr
 80075d8:	ee17 3a90 	vmov	r3, s15
 80075dc:	3b01      	subs	r3, #1
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	e7cc      	b.n	800757e <arm_sin_f32+0x16>
 80075e4:	3e22f983 	.word	0x3e22f983
 80075e8:	44000000 	.word	0x44000000
 80075ec:	08007e34 	.word	0x08007e34

080075f0 <__libc_init_array>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	4d0d      	ldr	r5, [pc, #52]	; (8007628 <__libc_init_array+0x38>)
 80075f4:	4c0d      	ldr	r4, [pc, #52]	; (800762c <__libc_init_array+0x3c>)
 80075f6:	1b64      	subs	r4, r4, r5
 80075f8:	10a4      	asrs	r4, r4, #2
 80075fa:	2600      	movs	r6, #0
 80075fc:	42a6      	cmp	r6, r4
 80075fe:	d109      	bne.n	8007614 <__libc_init_array+0x24>
 8007600:	4d0b      	ldr	r5, [pc, #44]	; (8007630 <__libc_init_array+0x40>)
 8007602:	4c0c      	ldr	r4, [pc, #48]	; (8007634 <__libc_init_array+0x44>)
 8007604:	f000 f820 	bl	8007648 <_init>
 8007608:	1b64      	subs	r4, r4, r5
 800760a:	10a4      	asrs	r4, r4, #2
 800760c:	2600      	movs	r6, #0
 800760e:	42a6      	cmp	r6, r4
 8007610:	d105      	bne.n	800761e <__libc_init_array+0x2e>
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f855 3b04 	ldr.w	r3, [r5], #4
 8007618:	4798      	blx	r3
 800761a:	3601      	adds	r6, #1
 800761c:	e7ee      	b.n	80075fc <__libc_init_array+0xc>
 800761e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007622:	4798      	blx	r3
 8007624:	3601      	adds	r6, #1
 8007626:	e7f2      	b.n	800760e <__libc_init_array+0x1e>
 8007628:	08008640 	.word	0x08008640
 800762c:	08008640 	.word	0x08008640
 8007630:	08008640 	.word	0x08008640
 8007634:	08008644 	.word	0x08008644

08007638 <memset>:
 8007638:	4402      	add	r2, r0
 800763a:	4603      	mov	r3, r0
 800763c:	4293      	cmp	r3, r2
 800763e:	d100      	bne.n	8007642 <memset+0xa>
 8007640:	4770      	bx	lr
 8007642:	f803 1b01 	strb.w	r1, [r3], #1
 8007646:	e7f9      	b.n	800763c <memset+0x4>

08007648 <_init>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr

08007654 <_fini>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	bf00      	nop
 8007658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765a:	bc08      	pop	{r3}
 800765c:	469e      	mov	lr, r3
 800765e:	4770      	bx	lr
