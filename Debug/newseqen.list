
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd38  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002370  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f240  0800f240  00028f60  2**0
                  CONTENTS
  4 .ARM          00000008  0800f240  0800f240  0001f240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f248  0800f248  00028f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f248  0800f248  0001f248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f24c  0800f24c  0001f24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008f60  20000000  0800f250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009c4c  20008f60  080181b0  00028f60  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012bac  080181b0  00032bac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028f60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018717  00000000  00000000  00028f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286d  00000000  00000000  000416a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00043f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  000453b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dbc  00000000  00000000  00046770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192ea  00000000  00000000  0005f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ce5  00000000  00000000  00078816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011a4fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b30  00000000  00000000  0011a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008f60 	.word	0x20008f60
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ceb8 	.word	0x0800ceb8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008f64 	.word	0x20008f64
 80001d4:	0800ceb8 	.word	0x0800ceb8

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bbe      	ldr	r3, [pc, #760]	; (8000ea8 <menu_vars+0x310>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bbc      	ldr	r3, [pc, #752]	; (8000ea8 <menu_vars+0x310>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bbc      	ldr	r3, [pc, #752]	; (8000eac <menu_vars+0x314>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00c f8d0 	bl	800cd78 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4bb2      	ldr	r3, [pc, #712]	; (8000ea8 <menu_vars+0x310>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bb0      	ldr	r3, [pc, #704]	; (8000ea8 <menu_vars+0x310>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4bae      	ldr	r3, [pc, #696]	; (8000ea8 <menu_vars+0x310>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4bad      	ldr	r3, [pc, #692]	; (8000ea8 <menu_vars+0x310>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b3e      	cmp	r3, #62	; 0x3e
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aad      	ldr	r2, [pc, #692]	; (8000eb0 <menu_vars+0x318>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aac      	ldr	r2, [pc, #688]	; (8000eb4 <menu_vars+0x31c>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa9      	ldr	r2, [pc, #676]	; (8000eb4 <menu_vars+0x31c>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b3d      	cmp	r3, #61	; 0x3d
 8000c16:	f200 8246 	bhi.w	80010a6 <menu_vars+0x50e>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000d19 	.word	0x08000d19
 8000c24:	08000d1f 	.word	0x08000d1f
 8000c28:	08000d31 	.word	0x08000d31
 8000c2c:	08000d45 	.word	0x08000d45
 8000c30:	08000d59 	.word	0x08000d59
 8000c34:	08000d6d 	.word	0x08000d6d
 8000c38:	08000d7f 	.word	0x08000d7f
 8000c3c:	08000d85 	.word	0x08000d85
 8000c40:	08000d97 	.word	0x08000d97
 8000c44:	08000dab 	.word	0x08000dab
 8000c48:	08000dbf 	.word	0x08000dbf
 8000c4c:	08000dd3 	.word	0x08000dd3
 8000c50:	08000dd9 	.word	0x08000dd9
 8000c54:	08000deb 	.word	0x08000deb
 8000c58:	08000dff 	.word	0x08000dff
 8000c5c:	08000e13 	.word	0x08000e13
 8000c60:	08000e27 	.word	0x08000e27
 8000c64:	08000e3b 	.word	0x08000e3b
 8000c68:	08000e4f 	.word	0x08000e4f
 8000c6c:	08000e63 	.word	0x08000e63
 8000c70:	08000e77 	.word	0x08000e77
 8000c74:	08000e8b 	.word	0x08000e8b
 8000c78:	08000e91 	.word	0x08000e91
 8000c7c:	08000e97 	.word	0x08000e97
 8000c80:	08000e9d 	.word	0x08000e9d
 8000c84:	08000ed1 	.word	0x08000ed1
 8000c88:	08000edf 	.word	0x08000edf
 8000c8c:	08000eed 	.word	0x08000eed
 8000c90:	08000ef9 	.word	0x08000ef9
 8000c94:	08000f07 	.word	0x08000f07
 8000c98:	08000f15 	.word	0x08000f15
 8000c9c:	08000f23 	.word	0x08000f23
 8000ca0:	08000f31 	.word	0x08000f31
 8000ca4:	08000f3f 	.word	0x08000f3f
 8000ca8:	08000f4d 	.word	0x08000f4d
 8000cac:	08000f5b 	.word	0x08000f5b
 8000cb0:	08000f6d 	.word	0x08000f6d
 8000cb4:	08000f7d 	.word	0x08000f7d
 8000cb8:	08000f8f 	.word	0x08000f8f
 8000cbc:	08000fa1 	.word	0x08000fa1
 8000cc0:	08000fb3 	.word	0x08000fb3
 8000cc4:	08000fc5 	.word	0x08000fc5
 8000cc8:	08000fd9 	.word	0x08000fd9
 8000ccc:	08000fed 	.word	0x08000fed
 8000cd0:	08001001 	.word	0x08001001
 8000cd4:	08001007 	.word	0x08001007
 8000cd8:	0800100d 	.word	0x0800100d
 8000cdc:	08001013 	.word	0x08001013
 8000ce0:	08001019 	.word	0x08001019
 8000ce4:	0800101f 	.word	0x0800101f
 8000ce8:	08001031 	.word	0x08001031
 8000cec:	08001045 	.word	0x08001045
 8000cf0:	08001059 	.word	0x08001059
 8000cf4:	0800106d 	.word	0x0800106d
 8000cf8:	08001077 	.word	0x08001077
 8000cfc:	0800107d 	.word	0x0800107d
 8000d00:	08001083 	.word	0x08001083
 8000d04:	08001089 	.word	0x08001089
 8000d08:	0800108f 	.word	0x0800108f
 8000d0c:	08001095 	.word	0x08001095
 8000d10:	0800109b 	.word	0x0800109b
 8000d14:	080010a1 	.word	0x080010a1
	case 0:     menu_vars_var1= NULL; break;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	e1c6      	b.n	80010ac <menu_vars+0x514>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d1e:	78fa      	ldrb	r2, [r7, #3]
 8000d20:	4613      	mov	r3, r2
 8000d22:	011b      	lsls	r3, r3, #4
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4a63      	ldr	r2, [pc, #396]	; (8000eb8 <menu_vars+0x320>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	e1bd      	b.n	80010ac <menu_vars+0x514>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d30:	78fa      	ldrb	r2, [r7, #3]
 8000d32:	4613      	mov	r3, r2
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4a5f      	ldr	r2, [pc, #380]	; (8000eb8 <menu_vars+0x320>)
 8000d3c:	4413      	add	r3, r2
 8000d3e:	3301      	adds	r3, #1
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	e1b3      	b.n	80010ac <menu_vars+0x514>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d44:	78fa      	ldrb	r2, [r7, #3]
 8000d46:	4613      	mov	r3, r2
 8000d48:	011b      	lsls	r3, r3, #4
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4a5a      	ldr	r2, [pc, #360]	; (8000eb8 <menu_vars+0x320>)
 8000d50:	4413      	add	r3, r2
 8000d52:	3304      	adds	r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	e1a9      	b.n	80010ac <menu_vars+0x514>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d58:	78fa      	ldrb	r2, [r7, #3]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	4413      	add	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4a55      	ldr	r2, [pc, #340]	; (8000eb8 <menu_vars+0x320>)
 8000d64:	4413      	add	r3, r2
 8000d66:	3303      	adds	r3, #3
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	e19f      	b.n	80010ac <menu_vars+0x514>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	222c      	movs	r2, #44	; 0x2c
 8000d70:	fb02 f303 	mul.w	r3, r2, r3
 8000d74:	4a51      	ldr	r2, [pc, #324]	; (8000ebc <menu_vars+0x324>)
 8000d76:	4413      	add	r3, r2
 8000d78:	3301      	adds	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	e196      	b.n	80010ac <menu_vars+0x514>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e193      	b.n	80010ac <menu_vars+0x514>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d84:	78fb      	ldrb	r3, [r7, #3]
 8000d86:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	4a4c      	ldr	r2, [pc, #304]	; (8000ec0 <menu_vars+0x328>)
 8000d90:	4413      	add	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	e18a      	b.n	80010ac <menu_vars+0x514>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000d9c:	fb02 f303 	mul.w	r3, r2, r3
 8000da0:	4a47      	ldr	r2, [pc, #284]	; (8000ec0 <menu_vars+0x328>)
 8000da2:	4413      	add	r3, r2
 8000da4:	3301      	adds	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	e180      	b.n	80010ac <menu_vars+0x514>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	4a42      	ldr	r2, [pc, #264]	; (8000ec0 <menu_vars+0x328>)
 8000db6:	4413      	add	r3, r2
 8000db8:	3302      	adds	r3, #2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	e176      	b.n	80010ac <menu_vars+0x514>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000dbe:	78fb      	ldrb	r3, [r7, #3]
 8000dc0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <menu_vars+0x328>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	3303      	adds	r3, #3
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	e16c      	b.n	80010ac <menu_vars+0x514>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	e169      	b.n	80010ac <menu_vars+0x514>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000dd8:	78fa      	ldrb	r2, [r7, #3]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	1a9b      	subs	r3, r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4a38      	ldr	r2, [pc, #224]	; (8000ec4 <menu_vars+0x32c>)
 8000de4:	4413      	add	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	e160      	b.n	80010ac <menu_vars+0x514>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	4613      	mov	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4a33      	ldr	r2, [pc, #204]	; (8000ec4 <menu_vars+0x32c>)
 8000df6:	4413      	add	r3, r2
 8000df8:	3301      	adds	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e156      	b.n	80010ac <menu_vars+0x514>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	4613      	mov	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4a2e      	ldr	r2, [pc, #184]	; (8000ec4 <menu_vars+0x32c>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e14c      	b.n	80010ac <menu_vars+0x514>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000e12:	78fa      	ldrb	r2, [r7, #3]
 8000e14:	4613      	mov	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	1a9b      	subs	r3, r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <menu_vars+0x32c>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	3303      	adds	r3, #3
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	e142      	b.n	80010ac <menu_vars+0x514>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4a24      	ldr	r2, [pc, #144]	; (8000ec4 <menu_vars+0x32c>)
 8000e32:	4413      	add	r3, r2
 8000e34:	3304      	adds	r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	e138      	b.n	80010ac <menu_vars+0x514>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <menu_vars+0x32c>)
 8000e46:	4413      	add	r3, r2
 8000e48:	3305      	adds	r3, #5
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	e12e      	b.n	80010ac <menu_vars+0x514>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	4613      	mov	r3, r2
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	1a9b      	subs	r3, r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4a1a      	ldr	r2, [pc, #104]	; (8000ec4 <menu_vars+0x32c>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	3306      	adds	r3, #6
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	e124      	b.n	80010ac <menu_vars+0x514>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e62:	78fa      	ldrb	r2, [r7, #3]
 8000e64:	4613      	mov	r3, r2
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <menu_vars+0x32c>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	3307      	adds	r3, #7
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	e11a      	b.n	80010ac <menu_vars+0x514>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	3308      	adds	r3, #8
 8000e82:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <menu_vars+0x32c>)
 8000e84:	4413      	add	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	e110      	b.n	80010ac <menu_vars+0x514>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e10d      	b.n	80010ac <menu_vars+0x514>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <menu_vars+0x330>)
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	e10a      	b.n	80010ac <menu_vars+0x514>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <menu_vars+0x334>)
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	e107      	b.n	80010ac <menu_vars+0x514>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e9c:	78fb      	ldrb	r3, [r7, #3]
 8000e9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <menu_vars+0x330>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e101      	b.n	80010ac <menu_vars+0x514>
 8000ea8:	2000984a 	.word	0x2000984a
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	20010c69 	.word	0x20010c69
 8000eb4:	0800e370 	.word	0x0800e370
 8000eb8:	2000ce4c 	.word	0x2000ce4c
 8000ebc:	2000dcb4 	.word	0x2000dcb4
 8000ec0:	2000d1f8 	.word	0x2000d1f8
 8000ec4:	20008e10 	.word	0x20008e10
 8000ec8:	2000dc84 	.word	0x2000dc84
 8000ecc:	2000dc85 	.word	0x2000dc85
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	4a78      	ldr	r2, [pc, #480]	; (80010b8 <menu_vars+0x520>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3303      	adds	r3, #3
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e0e6      	b.n	80010ac <menu_vars+0x514>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	3320      	adds	r3, #32
 8000ee2:	4a75      	ldr	r2, [pc, #468]	; (80010b8 <menu_vars+0x520>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e0df      	b.n	80010ac <menu_vars+0x514>
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4a72      	ldr	r2, [pc, #456]	; (80010bc <menu_vars+0x524>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	e0d9      	b.n	80010ac <menu_vars+0x514>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	4a6f      	ldr	r2, [pc, #444]	; (80010bc <menu_vars+0x524>)
 8000efe:	4413      	add	r3, r2
 8000f00:	3301      	adds	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	e0d2      	b.n	80010ac <menu_vars+0x514>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000f06:	78fb      	ldrb	r3, [r7, #3]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4a6c      	ldr	r2, [pc, #432]	; (80010bc <menu_vars+0x524>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e0cb      	b.n	80010ac <menu_vars+0x514>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4a68      	ldr	r2, [pc, #416]	; (80010bc <menu_vars+0x524>)
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3303      	adds	r3, #3
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	e0c4      	b.n	80010ac <menu_vars+0x514>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	4a65      	ldr	r2, [pc, #404]	; (80010bc <menu_vars+0x524>)
 8000f28:	4413      	add	r3, r2
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	e0bd      	b.n	80010ac <menu_vars+0x514>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4a61      	ldr	r2, [pc, #388]	; (80010bc <menu_vars+0x524>)
 8000f36:	4413      	add	r3, r2
 8000f38:	3307      	adds	r3, #7
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	e0b6      	b.n	80010ac <menu_vars+0x514>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	4a5e      	ldr	r2, [pc, #376]	; (80010bc <menu_vars+0x524>)
 8000f44:	4413      	add	r3, r2
 8000f46:	3306      	adds	r3, #6
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e0af      	b.n	80010ac <menu_vars+0x514>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	4a5a      	ldr	r2, [pc, #360]	; (80010bc <menu_vars+0x524>)
 8000f52:	4413      	add	r3, r2
 8000f54:	3305      	adds	r3, #5
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e0a8      	b.n	80010ac <menu_vars+0x514>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f5a:	78fb      	ldrb	r3, [r7, #3]
 8000f5c:	222c      	movs	r2, #44	; 0x2c
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	4a57      	ldr	r2, [pc, #348]	; (80010c0 <menu_vars+0x528>)
 8000f64:	4413      	add	r3, r2
 8000f66:	3302      	adds	r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	e09f      	b.n	80010ac <menu_vars+0x514>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	222c      	movs	r2, #44	; 0x2c
 8000f70:	fb02 f303 	mul.w	r3, r2, r3
 8000f74:	4a52      	ldr	r2, [pc, #328]	; (80010c0 <menu_vars+0x528>)
 8000f76:	4413      	add	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	e097      	b.n	80010ac <menu_vars+0x514>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	222c      	movs	r2, #44	; 0x2c
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a4e      	ldr	r2, [pc, #312]	; (80010c0 <menu_vars+0x528>)
 8000f86:	4413      	add	r3, r2
 8000f88:	3303      	adds	r3, #3
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	e08e      	b.n	80010ac <menu_vars+0x514>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	222c      	movs	r2, #44	; 0x2c
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <menu_vars+0x528>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	e085      	b.n	80010ac <menu_vars+0x514>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	222c      	movs	r2, #44	; 0x2c
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4a45      	ldr	r2, [pc, #276]	; (80010c0 <menu_vars+0x528>)
 8000faa:	4413      	add	r3, r2
 8000fac:	3305      	adds	r3, #5
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	e07c      	b.n	80010ac <menu_vars+0x514>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000fb2:	78fa      	ldrb	r2, [r7, #3]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <menu_vars+0x52c>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e073      	b.n	80010ac <menu_vars+0x514>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <menu_vars+0x52c>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e069      	b.n	80010ac <menu_vars+0x514>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fd8:	78fa      	ldrb	r2, [r7, #3]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <menu_vars+0x52c>)
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e05f      	b.n	80010ac <menu_vars+0x514>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fec:	78fa      	ldrb	r2, [r7, #3]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <menu_vars+0x52c>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3303      	adds	r3, #3
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e055      	b.n	80010ac <menu_vars+0x514>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8001000:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <menu_vars+0x530>)
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	e052      	b.n	80010ac <menu_vars+0x514>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <menu_vars+0x534>)
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	e04f      	b.n	80010ac <menu_vars+0x514>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 800100c:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <menu_vars+0x538>)
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e04c      	b.n	80010ac <menu_vars+0x514>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <menu_vars+0x53c>)
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	e049      	b.n	80010ac <menu_vars+0x514>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <menu_vars+0x540>)
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e046      	b.n	80010ac <menu_vars+0x514>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 800101e:	78fa      	ldrb	r2, [r7, #3]
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4a2c      	ldr	r2, [pc, #176]	; (80010dc <menu_vars+0x544>)
 800102a:	4413      	add	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	e03d      	b.n	80010ac <menu_vars+0x514>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <menu_vars+0x544>)
 800103c:	4413      	add	r3, r2
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e033      	b.n	80010ac <menu_vars+0x514>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4a23      	ldr	r2, [pc, #140]	; (80010dc <menu_vars+0x544>)
 8001050:	4413      	add	r3, r2
 8001052:	3302      	adds	r3, #2
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e029      	b.n	80010ac <menu_vars+0x514>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <menu_vars+0x544>)
 8001064:	4413      	add	r3, r2
 8001066:	3303      	adds	r3, #3
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	e01f      	b.n	80010ac <menu_vars+0x514>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 800106c:	78fb      	ldrb	r3, [r7, #3]
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <menu_vars+0x548>)
 8001070:	4413      	add	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e01a      	b.n	80010ac <menu_vars+0x514>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <menu_vars+0x54c>)
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	e017      	b.n	80010ac <menu_vars+0x514>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <menu_vars+0x550>)
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e014      	b.n	80010ac <menu_vars+0x514>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <menu_vars+0x554>)
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e011      	b.n	80010ac <menu_vars+0x514>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <menu_vars+0x558>)
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e00e      	b.n	80010ac <menu_vars+0x514>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <menu_vars+0x55c>)
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	e00b      	b.n	80010ac <menu_vars+0x514>
	case 59: 	menu_vars_var1=&sampler.sample_select  ;break;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <menu_vars+0x560>)
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	e008      	b.n	80010ac <menu_vars+0x514>
	case 60: 	menu_vars_var1=&sampler.sample_save  ;break;
 800109a:	4b18      	ldr	r3, [pc, #96]	; (80010fc <menu_vars+0x564>)
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	e005      	b.n	80010ac <menu_vars+0x514>
	case 61: 	menu_vars_var1=&sampler.sample_save_enable  ;break;
 80010a0:	4b17      	ldr	r3, [pc, #92]	; (8001100 <menu_vars+0x568>)
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	e002      	b.n	80010ac <menu_vars+0x514>



	default :		menu_vars_var1= NULL   ; break;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 80010ac:	693b      	ldr	r3, [r7, #16]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000dc84 	.word	0x2000dc84
 80010bc:	20008e9c 	.word	0x20008e9c
 80010c0:	2000dcb4 	.word	0x2000dcb4
 80010c4:	2000d0f4 	.word	0x2000d0f4
 80010c8:	20008ebc 	.word	0x20008ebc
 80010cc:	20008ebd 	.word	0x20008ebd
 80010d0:	20008ebe 	.word	0x20008ebe
 80010d4:	20008ebf 	.word	0x20008ebf
 80010d8:	20008ec5 	.word	0x20008ec5
 80010dc:	2000d130 	.word	0x2000d130
 80010e0:	20012084 	.word	0x20012084
 80010e4:	20008ec0 	.word	0x20008ec0
 80010e8:	20008ec1 	.word	0x20008ec1
 80010ec:	20008ec2 	.word	0x20008ec2
 80010f0:	20008ec3 	.word	0x20008ec3
 80010f4:	20008ec4 	.word	0x20008ec4
 80010f8:	20008ec6 	.word	0x20008ec6
 80010fc:	20008ec7 	.word	0x20008ec7
 8001100:	20008ecc 	.word	0x20008ecc

08001104 <menu_parser>:





void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 800110a:	4a6b      	ldr	r2, [pc, #428]	; (80012b8 <menu_parser+0x1b4>)
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001114:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 8001118:	4a68      	ldr	r2, [pc, #416]	; (80012bc <menu_parser+0x1b8>)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001120:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001124:	2300      	movs	r3, #0
 8001126:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001128:	f640 432b 	movw	r3, #3115	; 0xc2b
 800112c:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800112e:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <menu_parser+0x1bc>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	8aba      	ldrh	r2, [r7, #20]
 8001134:	429a      	cmp	r2, r3
 8001136:	f0c0 80bb 	bcc.w	80012b0 <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 800113a:	4b61      	ldr	r3, [pc, #388]	; (80012c0 <menu_parser+0x1bc>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b60      	ldr	r3, [pc, #384]	; (80012c4 <menu_parser+0x1c0>)
 8001142:	441a      	add	r2, r3
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	6851      	ldr	r1, [r2, #4]
 800114c:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e092      	b.n	800127a <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	4a5c      	ldr	r2, [pc, #368]	; (80012c8 <menu_parser+0x1c4>)
 8001158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	6810      	ldr	r0, [r2, #0]
 8001160:	6851      	ldr	r1, [r2, #4]
 8001162:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2208      	movs	r2, #8
 800116c:	4618      	mov	r0, r3
 800116e:	f00b fe03 	bl	800cd78 <strncmp>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d17d      	bne.n	8001274 <menu_parser+0x170>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001178:	4b54      	ldr	r3, [pc, #336]	; (80012cc <menu_parser+0x1c8>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	2b6f      	cmp	r3, #111	; 0x6f
 800117e:	d909      	bls.n	8001194 <menu_parser+0x90>
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <menu_parser+0x1c8>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	2b7f      	cmp	r3, #127	; 0x7f
 8001186:	d805      	bhi.n	8001194 <menu_parser+0x90>
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <menu_parser+0x1c8>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	3310      	adds	r3, #16
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b4e      	ldr	r3, [pc, #312]	; (80012cc <menu_parser+0x1c8>)
 8001192:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001194:	4b4d      	ldr	r3, [pc, #308]	; (80012cc <menu_parser+0x1c8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	2bef      	cmp	r3, #239	; 0xef
 800119a:	d909      	bls.n	80011b0 <menu_parser+0xac>
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <menu_parser+0x1c8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2bff      	cmp	r3, #255	; 0xff
 80011a2:	d805      	bhi.n	80011b0 <menu_parser+0xac>
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <menu_parser+0x1c8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3310      	adds	r3, #16
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <menu_parser+0x1c8>)
 80011ae:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80011b0:	4b46      	ldr	r3, [pc, #280]	; (80012cc <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80011b8:	d30a      	bcc.n	80011d0 <menu_parser+0xcc>
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <menu_parser+0x1c8>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011c2:	d205      	bcs.n	80011d0 <menu_parser+0xcc>
 80011c4:	4b41      	ldr	r3, [pc, #260]	; (80012cc <menu_parser+0x1c8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3310      	adds	r3, #16
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <menu_parser+0x1c8>)
 80011ce:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011d0:	4b3e      	ldr	r3, [pc, #248]	; (80012cc <menu_parser+0x1c8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011d8:	d30a      	bcc.n	80011f0 <menu_parser+0xec>
 80011da:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <menu_parser+0x1c8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e2:	d205      	bcs.n	80011f0 <menu_parser+0xec>
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <menu_parser+0x1c8>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3310      	adds	r3, #16
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b37      	ldr	r3, [pc, #220]	; (80012cc <menu_parser+0x1c8>)
 80011ee:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011f0:	4b36      	ldr	r3, [pc, #216]	; (80012cc <menu_parser+0x1c8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80011f8:	d30a      	bcc.n	8001210 <menu_parser+0x10c>
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <menu_parser+0x1c8>)
 80011fc:	881b      	ldrh	r3, [r3, #0]
 80011fe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001202:	d205      	bcs.n	8001210 <menu_parser+0x10c>
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <menu_parser+0x1c8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3310      	adds	r3, #16
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <menu_parser+0x1c8>)
 800120e:	801a      	strh	r2, [r3, #0]

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <menu_parser+0x1c8>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800121c:	18d1      	adds	r1, r2, r3
 800121e:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <menu_parser+0x1cc>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <menu_parser+0x1d0>)
 8001226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <menu_parser+0x1cc>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	461a      	mov	r2, r3
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <menu_parser+0x1d4>)
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <menu_parser+0x1bc>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	3b02      	subs	r3, #2
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <menu_parser+0x1c0>)
 800123e:	4413      	add	r3, r2
 8001240:	2202      	movs	r2, #2
 8001242:	4619      	mov	r1, r3
 8001244:	f00b fd82 	bl	800cd4c <memcpy>
        			    menu_title_count++;
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <menu_parser+0x1cc>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <menu_parser+0x1cc>)
 8001252:	801a      	strh	r2, [r3, #0]
			    menu_counter++;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <menu_parser+0x1c8>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <menu_parser+0x1c8>)
 800125e:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <menu_parser+0x1d8>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <menu_parser+0x1bc>)
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	3308      	adds	r3, #8
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <menu_parser+0x1bc>)
 8001270:	801a      	strh	r2, [r3, #0]
    			    return;}
 8001272:	e01e      	b.n	80012b2 <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	3301      	adds	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	2b3e      	cmp	r3, #62	; 0x3e
 800127e:	f67f af69 	bls.w	8001154 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <menu_parser+0x1d8>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d905      	bls.n	8001296 <menu_parser+0x192>
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <menu_parser+0x1c8>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <menu_parser+0x1c8>)
 8001294:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <menu_parser+0x1d8>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <menu_parser+0x1d8>)
 80012a0:	701a      	strb	r2, [r3, #0]
	    string_search++;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <menu_parser+0x1bc>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <menu_parser+0x1bc>)
 80012ac:	801a      	strh	r2, [r3, #0]
	    return;
 80012ae:	e000      	b.n	80012b2 <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 80012b0:	bf00      	nop

    }
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800d3bc 	.word	0x0800d3bc
 80012bc:	0800d3c4 	.word	0x0800d3c4
 80012c0:	2000e024 	.word	0x2000e024
 80012c4:	0800d73c 	.word	0x0800d73c
 80012c8:	20000000 	.word	0x20000000
 80012cc:	2000e026 	.word	0x2000e026
 80012d0:	2000e02a 	.word	0x2000e02a
 80012d4:	2000e02c 	.word	0x2000e02c
 80012d8:	2000e82c 	.word	0x2000e82c
 80012dc:	2000e028 	.word	0x2000e028

080012e0 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	75fb      	strb	r3, [r7, #23]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 80012ea:	2300      	movs	r3, #0
 80012ec:	75bb      	strb	r3, [r7, #22]
 80012ee:	e1a7      	b.n	8001640 <patch_target_parse+0x360>

			uint16_t* output_hold;
			uint16_t* output_hold2;


			uint8_t input_hold=patch[counter].input1;
 80012f0:	7dbb      	ldrb	r3, [r7, #22]
 80012f2:	4a97      	ldr	r2, [pc, #604]	; (8001550 <patch_target_parse+0x270>)
 80012f4:	212c      	movs	r1, #44	; 0x2c
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	727b      	strb	r3, [r7, #9]
			uint8_t input_hold2=patch[counter].input2;
 8001300:	7dbb      	ldrb	r3, [r7, #22]
 8001302:	4a93      	ldr	r2, [pc, #588]	; (8001550 <patch_target_parse+0x270>)
 8001304:	212c      	movs	r1, #44	; 0x2c
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	4413      	add	r3, r2
 800130c:	3303      	adds	r3, #3
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	723b      	strb	r3, [r7, #8]
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 8001312:	7dbb      	ldrb	r3, [r7, #22]
 8001314:	4a8e      	ldr	r2, [pc, #568]	; (8001550 <patch_target_parse+0x270>)
 8001316:	212c      	movs	r1, #44	; 0x2c
 8001318:	fb01 f303 	mul.w	r3, r1, r3
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b3e      	cmp	r3, #62	; 0x3e
 8001322:	d907      	bls.n	8001334 <patch_target_parse+0x54>
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	4a8a      	ldr	r2, [pc, #552]	; (8001550 <patch_target_parse+0x270>)
 8001328:	212c      	movs	r1, #44	; 0x2c
 800132a:	fb01 f303 	mul.w	r3, r1, r3
 800132e:	4413      	add	r3, r2
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001334:	7a7b      	ldrb	r3, [r7, #9]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d840      	bhi.n	80013c0 <patch_target_parse+0xe0>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <patch_target_parse+0x64>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001355 	.word	0x08001355
 8001348:	0800136f 	.word	0x0800136f
 800134c:	0800138b 	.word	0x0800138b
 8001350:	080013a7 	.word	0x080013a7

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001354:	7a7b      	ldrb	r3, [r7, #9]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4613      	mov	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4a7b      	ldr	r2, [pc, #492]	; (8001554 <patch_target_parse+0x274>)
 8001366:	4413      	add	r3, r2
 8001368:	3306      	adds	r3, #6
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e028      	b.n	80013c0 <patch_target_parse+0xe0>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 800136e:	7a7b      	ldrb	r3, [r7, #9]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	4613      	mov	r3, r2
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	3318      	adds	r3, #24
 8001380:	4a74      	ldr	r2, [pc, #464]	; (8001554 <patch_target_parse+0x274>)
 8001382:	4413      	add	r3, r2
 8001384:	3302      	adds	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	e01a      	b.n	80013c0 <patch_target_parse+0xe0>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800138a:	7a7b      	ldrb	r3, [r7, #9]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	b2db      	uxtb	r3, r3
 8001390:	461a      	mov	r2, r3
 8001392:	4613      	mov	r3, r2
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	3328      	adds	r3, #40	; 0x28
 800139c:	4a6d      	ldr	r2, [pc, #436]	; (8001554 <patch_target_parse+0x274>)
 800139e:	4413      	add	r3, r2
 80013a0:	3306      	adds	r3, #6
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	e00c      	b.n	80013c0 <patch_target_parse+0xe0>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 80013a6:	7a7b      	ldrb	r3, [r7, #9]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	461a      	mov	r2, r3
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4a68      	ldr	r2, [pc, #416]	; (8001558 <patch_target_parse+0x278>)
 80013b8:	4413      	add	r3, r2
 80013ba:	3304      	adds	r3, #4
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	bf00      	nop
			}
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	4a63      	ldr	r2, [pc, #396]	; (8001550 <patch_target_parse+0x270>)
 80013c4:	212c      	movs	r1, #44	; 0x2c
 80013c6:	fb01 f303 	mul.w	r3, r1, r3
 80013ca:	4413      	add	r3, r2
 80013cc:	3303      	adds	r3, #3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b3e      	cmp	r3, #62	; 0x3e
 80013d2:	d908      	bls.n	80013e6 <patch_target_parse+0x106>
 80013d4:	7dbb      	ldrb	r3, [r7, #22]
 80013d6:	4a5e      	ldr	r2, [pc, #376]	; (8001550 <patch_target_parse+0x270>)
 80013d8:	212c      	movs	r1, #44	; 0x2c
 80013da:	fb01 f303 	mul.w	r3, r1, r3
 80013de:	4413      	add	r3, r2
 80013e0:	3303      	adds	r3, #3
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]

			switch(input_hold2&3){     // lfo now , can add adsr later
 80013e6:	7a3b      	ldrb	r3, [r7, #8]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d841      	bhi.n	8001474 <patch_target_parse+0x194>
 80013f0:	a201      	add	r2, pc, #4	; (adr r2, 80013f8 <patch_target_parse+0x118>)
 80013f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f6:	bf00      	nop
 80013f8:	08001409 	.word	0x08001409
 80013fc:	08001423 	.word	0x08001423
 8001400:	0800143f 	.word	0x0800143f
 8001404:	0800145b 	.word	0x0800145b

			case 0:   output_hold2=&LFO[input_hold2>>2].out[0];break;
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	461a      	mov	r2, r3
 8001410:	4613      	mov	r3, r2
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <patch_target_parse+0x274>)
 800141a:	4413      	add	r3, r2
 800141c:	3306      	adds	r3, #6
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e028      	b.n	8001474 <patch_target_parse+0x194>
			case 1:   output_hold2=&LFO[input_hold2>>2].out_saw[0];break;
 8001422:	7a3b      	ldrb	r3, [r7, #8]
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4613      	mov	r3, r2
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	3318      	adds	r3, #24
 8001434:	4a47      	ldr	r2, [pc, #284]	; (8001554 <patch_target_parse+0x274>)
 8001436:	4413      	add	r3, r2
 8001438:	3302      	adds	r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e01a      	b.n	8001474 <patch_target_parse+0x194>
			case 2:   output_hold2=&LFO[input_hold2>>2].out_tri[0];break;
 800143e:	7a3b      	ldrb	r3, [r7, #8]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	3328      	adds	r3, #40	; 0x28
 8001450:	4a40      	ldr	r2, [pc, #256]	; (8001554 <patch_target_parse+0x274>)
 8001452:	4413      	add	r3, r2
 8001454:	3306      	adds	r3, #6
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e00c      	b.n	8001474 <patch_target_parse+0x194>
			//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
 800145a:	7a3b      	ldrb	r3, [r7, #8]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	b2db      	uxtb	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <patch_target_parse+0x278>)
 800146c:	4413      	add	r3, r2
 800146e:	3304      	adds	r3, #4
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	bf00      	nop
			}

			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 8001474:	7dbb      	ldrb	r3, [r7, #22]
 8001476:	4a36      	ldr	r2, [pc, #216]	; (8001550 <patch_target_parse+0x270>)
 8001478:	212c      	movs	r1, #44	; 0x2c
 800147a:	fb01 f303 	mul.w	r3, r1, r3
 800147e:	4413      	add	r3, r2
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b29      	cmp	r3, #41	; 0x29
 8001484:	d101      	bne.n	800148a <patch_target_parse+0x1aa>
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <patch_target_parse+0x27c>)
 8001488:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	4a30      	ldr	r2, [pc, #192]	; (8001550 <patch_target_parse+0x270>)
 800148e:	212c      	movs	r1, #44	; 0x2c
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b2a      	cmp	r3, #42	; 0x2a
 800149a:	d101      	bne.n	80014a0 <patch_target_parse+0x1c0>
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <patch_target_parse+0x280>)
 800149e:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 80014a0:	7dbb      	ldrb	r3, [r7, #22]
 80014a2:	4a2b      	ldr	r2, [pc, #172]	; (8001550 <patch_target_parse+0x270>)
 80014a4:	212c      	movs	r1, #44	; 0x2c
 80014a6:	fb01 f303 	mul.w	r3, r1, r3
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b2b      	cmp	r3, #43	; 0x2b
 80014b0:	d101      	bne.n	80014b6 <patch_target_parse+0x1d6>
 80014b2:	4b2c      	ldr	r3, [pc, #176]	; (8001564 <patch_target_parse+0x284>)
 80014b4:	613b      	str	r3, [r7, #16]
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 80014b6:	7dbb      	ldrb	r3, [r7, #22]
 80014b8:	4a25      	ldr	r2, [pc, #148]	; (8001550 <patch_target_parse+0x270>)
 80014ba:	212c      	movs	r1, #44	; 0x2c
 80014bc:	fb01 f303 	mul.w	r3, r1, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	3303      	adds	r3, #3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b29      	cmp	r3, #41	; 0x29
 80014c8:	d101      	bne.n	80014ce <patch_target_parse+0x1ee>
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <patch_target_parse+0x27c>)
 80014cc:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 80014ce:	7dbb      	ldrb	r3, [r7, #22]
 80014d0:	4a1f      	ldr	r2, [pc, #124]	; (8001550 <patch_target_parse+0x270>)
 80014d2:	212c      	movs	r1, #44	; 0x2c
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	3303      	adds	r3, #3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b2a      	cmp	r3, #42	; 0x2a
 80014e0:	d101      	bne.n	80014e6 <patch_target_parse+0x206>
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <patch_target_parse+0x280>)
 80014e4:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==43) output_hold2=&adc_values[0];
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <patch_target_parse+0x270>)
 80014ea:	212c      	movs	r1, #44	; 0x2c
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	3303      	adds	r3, #3
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b2b      	cmp	r3, #43	; 0x2b
 80014f8:	d101      	bne.n	80014fe <patch_target_parse+0x21e>
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <patch_target_parse+0x284>)
 80014fc:	60fb      	str	r3, [r7, #12]



			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <patch_target_parse+0x270>)
 8001502:	212c      	movs	r1, #44	; 0x2c
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	3320      	adds	r3, #32
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	601a      	str	r2, [r3, #0]
			patch[counter].in2_ptr=output_hold2;
 8001510:	7dbb      	ldrb	r3, [r7, #22]
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <patch_target_parse+0x270>)
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	3324      	adds	r3, #36	; 0x24
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]


			if (patch[counter].target) {  // test if above zero
 8001522:	7dbb      	ldrb	r3, [r7, #22]
 8001524:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <patch_target_parse+0x270>)
 8001526:	212c      	movs	r1, #44	; 0x2c
 8001528:	fb01 f303 	mul.w	r3, r1, r3
 800152c:	4413      	add	r3, r2
 800152e:	3301      	adds	r3, #1
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8081 	beq.w	800163a <patch_target_parse+0x35a>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001538:	7dbb      	ldrb	r3, [r7, #22]
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <patch_target_parse+0x270>)
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	3301      	adds	r3, #1
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800154a:	7afb      	ldrb	r3, [r7, #11]
 800154c:	75fb      	strb	r3, [r7, #23]
 800154e:	e016      	b.n	800157e <patch_target_parse+0x29e>
 8001550:	2000dcb4 	.word	0x2000dcb4
 8001554:	2000ce4c 	.word	0x2000ce4c
 8001558:	2000d130 	.word	0x2000d130
 800155c:	20008e02 	.word	0x20008e02
 8001560:	20008e04 	.word	0x20008e04
 8001564:	20008e00 	.word	0x20008e00
					if (patch_skip_list[target_input]==1)  target_input++;
 8001568:	7afb      	ldrb	r3, [r7, #11]
 800156a:	4a3a      	ldr	r2, [pc, #232]	; (8001654 <patch_target_parse+0x374>)
 800156c:	5cd3      	ldrb	r3, [r2, r3]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d102      	bne.n	8001578 <patch_target_parse+0x298>
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	3301      	adds	r3, #1
 8001576:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	3301      	adds	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	2b3e      	cmp	r3, #62	; 0x3e
 8001582:	d9f1      	bls.n	8001568 <patch_target_parse+0x288>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001584:	7afb      	ldrb	r3, [r7, #11]
 8001586:	2b3e      	cmp	r3, #62	; 0x3e
 8001588:	d901      	bls.n	800158e <patch_target_parse+0x2ae>
 800158a:	233e      	movs	r3, #62	; 0x3e
 800158c:	72fb      	strb	r3, [r7, #11]
				if (target_input!=35)  {     // make target index is not selected
 800158e:	7afb      	ldrb	r3, [r7, #11]
 8001590:	2b23      	cmp	r3, #35	; 0x23
 8001592:	d049      	beq.n	8001628 <patch_target_parse+0x348>
			patch[counter].target=target_input; // write back corrected value
 8001594:	7dbb      	ldrb	r3, [r7, #22]
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <patch_target_parse+0x378>)
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	3301      	adds	r3, #1
 80015a2:	7afa      	ldrb	r2, [r7, #11]
 80015a4:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80015a6:	7dbb      	ldrb	r3, [r7, #22]
 80015a8:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <patch_target_parse+0x378>)
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	3302      	adds	r3, #2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	72bb      	strb	r3, [r7, #10]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80015b8:	7abb      	ldrb	r3, [r7, #10]
 80015ba:	4a28      	ldr	r2, [pc, #160]	; (800165c <patch_target_parse+0x37c>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	7aba      	ldrb	r2, [r7, #10]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d903      	bls.n	80015cc <patch_target_parse+0x2ec>
			{	target_index=menu_vars_index_limit[target_index]; }
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	4a25      	ldr	r2, [pc, #148]	; (800165c <patch_target_parse+0x37c>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	72bb      	strb	r3, [r7, #10]
			patch[counter].target_index=target_index;
 80015cc:	7dbb      	ldrb	r3, [r7, #22]
 80015ce:	4a22      	ldr	r2, [pc, #136]	; (8001658 <patch_target_parse+0x378>)
 80015d0:	212c      	movs	r1, #44	; 0x2c
 80015d2:	fb01 f303 	mul.w	r3, r1, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	3302      	adds	r3, #2
 80015da:	7aba      	ldrb	r2, [r7, #10]
 80015dc:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80015de:	7afb      	ldrb	r3, [r7, #11]
 80015e0:	4a1f      	ldr	r2, [pc, #124]	; (8001660 <patch_target_parse+0x380>)
 80015e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e6:	7aba      	ldrb	r2, [r7, #10]
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fad4 	bl	8000b98 <menu_vars>
 80015f0:	6078      	str	r0, [r7, #4]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <patch_target_parse+0x35a>
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <patch_target_parse+0x378>)
 80015fc:	212c      	movs	r1, #44	; 0x2c
 80015fe:	fb01 f303 	mul.w	r3, r1, r3
 8001602:	4413      	add	r3, r2
 8001604:	331c      	adds	r3, #28
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	601a      	str	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <patch_target_parse+0x384>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	7dbb      	ldrb	r3, [r7, #22]
 8001612:	4a15      	ldr	r2, [pc, #84]	; (8001668 <patch_target_parse+0x388>)
 8001614:	5c50      	ldrb	r0, [r2, r1]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <patch_target_parse+0x378>)
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	3328      	adds	r3, #40	; 0x28
 8001622:	4602      	mov	r2, r0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e008      	b.n	800163a <patch_target_parse+0x35a>
				}
				else patch[counter].target=0;  // write back 0 if failed
 8001628:	7dbb      	ldrb	r3, [r7, #22]
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <patch_target_parse+0x378>)
 800162c:	212c      	movs	r1, #44	; 0x2c
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	4413      	add	r3, r2
 8001634:	3301      	adds	r3, #1
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 800163a:	7dbb      	ldrb	r3, [r7, #22]
 800163c:	3301      	adds	r3, #1
 800163e:	75bb      	strb	r3, [r7, #22]
 8001640:	7dbb      	ldrb	r3, [r7, #22]
 8001642:	2b13      	cmp	r3, #19
 8001644:	f67f ae54 	bls.w	80012f0 <patch_target_parse+0x10>
			}
		}
	}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	0800e3f0 	.word	0x0800e3f0
 8001658:	2000dcb4 	.word	0x2000dcb4
 800165c:	0800e370 	.word	0x0800e370
 8001660:	20000000 	.word	0x20000000
 8001664:	20010c69 	.word	0x20010c69
 8001668:	0800e3b0 	.word	0x0800e3b0

0800166c <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 800166c:	b490      	push	{r4, r7}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <patch_target_replace+0x158>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	753b      	strb	r3, [r7, #20]
	    uint8_t counter;
	   uint8_t input_loop_position;
	   int32_t output_hold;
	   int32_t output_hold2;
	   uint8_t input_mix=0;
 800167c:	2300      	movs	r3, #0
 800167e:	74fb      	strb	r3, [r7, #19]

	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 8001680:	2300      	movs	r3, #0
 8001682:	75fb      	strb	r3, [r7, #23]
 8001684:	e094      	b.n	80017b0 <patch_target_replace+0x144>



		    if (patch[counter].target) {         // check first for enable
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	4a4f      	ldr	r2, [pc, #316]	; (80017c8 <patch_target_replace+0x15c>)
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3301      	adds	r3, #1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8087 	beq.w	80017aa <patch_target_replace+0x13e>

			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	4a4a      	ldr	r2, [pc, #296]	; (80017c8 <patch_target_replace+0x15c>)
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b28      	cmp	r3, #40	; 0x28
 80016ac:	d809      	bhi.n	80016c2 <patch_target_replace+0x56>
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	4a45      	ldr	r2, [pc, #276]	; (80017c8 <patch_target_replace+0x15c>)
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3303      	adds	r3, #3
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b28      	cmp	r3, #40	; 0x28
 80016c0:	d902      	bls.n	80016c8 <patch_target_replace+0x5c>
 80016c2:	2300      	movs	r3, #0
 80016c4:	75bb      	strb	r3, [r7, #22]
 80016c6:	e001      	b.n	80016cc <patch_target_replace+0x60>
 80016c8:	7d3b      	ldrb	r3, [r7, #20]
 80016ca:	75bb      	strb	r3, [r7, #22]


				input_mix=patch[counter].in_mix;
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	4a3e      	ldr	r2, [pc, #248]	; (80017c8 <patch_target_replace+0x15c>)
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3304      	adds	r3, #4
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	74fb      	strb	r3, [r7, #19]
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <patch_target_replace+0x15c>)
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3320      	adds	r3, #32
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	7dbb      	ldrb	r3, [r7, #22]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <patch_target_replace+0x15c>)
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3324      	adds	r3, #36	; 0x24
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	7dbb      	ldrb	r3, [r7, #22]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	60bb      	str	r3, [r7, #8]

				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	f1c3 0210 	rsb	r2, r3, #16
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	60fb      	str	r3, [r7, #12]
				output_hold2	=output_hold2*input_mix;
 8001720:	7cfa      	ldrb	r2, [r7, #19]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	60bb      	str	r3, [r7, #8]



				patch[counter].output[loop_position]	=((output_hold+output_hold2)>>4);
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	1119      	asrs	r1, r3, #4
 8001732:	7dfa      	ldrb	r2, [r7, #23]
 8001734:	7d3b      	ldrb	r3, [r7, #20]
 8001736:	b28c      	uxth	r4, r1
 8001738:	4923      	ldr	r1, [pc, #140]	; (80017c8 <patch_target_replace+0x15c>)
 800173a:	2016      	movs	r0, #22
 800173c:	fb00 f202 	mul.w	r2, r0, r2
 8001740:	4413      	add	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	4622      	mov	r2, r4
 8001748:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <patch_target_replace+0x15c>)
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	331c      	adds	r3, #28
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	607b      	str	r3, [r7, #4]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 800175c:	7dfa      	ldrb	r2, [r7, #23]
 800175e:	7d3b      	ldrb	r3, [r7, #20]
 8001760:	4919      	ldr	r1, [pc, #100]	; (80017c8 <patch_target_replace+0x15c>)
 8001762:	2016      	movs	r0, #22
 8001764:	fb00 f202 	mul.w	r2, r0, r2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	440b      	add	r3, r1
 800176e:	88db      	ldrh	r3, [r3, #6]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	807b      	strh	r3, [r7, #2]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	707b      	strb	r3, [r7, #1]

			    uint8_t  var_replaced =  lfo_out_temp &255 ;   // grab lfo out *    data to be modfied
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	757b      	strb	r3, [r7, #21]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <patch_target_replace+0x15c>)
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3328      	adds	r3, #40	; 0x28
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	7d7a      	ldrb	r2, [r7, #21]
 800178e:	429a      	cmp	r2, r3
 8001790:	d908      	bls.n	80017a4 <patch_target_replace+0x138>
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <patch_target_replace+0x15c>)
 8001796:	212c      	movs	r1, #44	; 0x2c
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	3328      	adds	r3, #40	; 0x28
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	757b      	strb	r3, [r7, #21]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7d7a      	ldrb	r2, [r7, #21]
 80017a8:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	3301      	adds	r3, #1
 80017ae:	75fb      	strb	r3, [r7, #23]
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	2b13      	cmp	r3, #19
 80017b4:	f67f af67 	bls.w	8001686 <patch_target_replace+0x1a>
		    }
	    }
    }
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc90      	pop	{r4, r7}
 80017c2:	4770      	bx	lr
 80017c4:	2000ec40 	.word	0x2000ec40
 80017c8:	2000dcb4 	.word	0x2000dcb4

080017cc <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a2e      	ldr	r2, [pc, #184]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d118      	bne.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 80017de:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80017e6:	4413      	add	r3, r2
 80017e8:	2236      	movs	r2, #54	; 0x36
 80017ea:	4619      	mov	r1, r3
 80017ec:	482c      	ldr	r0, [pc, #176]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80017ee:	f009 f889 	bl	800a904 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80017fa:	d206      	bcs.n	800180a <HAL_TIM_PeriodElapsedCallback+0x3e>
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	3336      	adds	r3, #54	; 0x36
 8001802:	b29a      	uxth	r2, r3
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	e002      	b.n	8001810 <HAL_TIM_PeriodElapsedCallback+0x44>
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a23      	ldr	r2, [pc, #140]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d137      	bne.n	800188a <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001824:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001830:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001836:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	b29b      	uxth	r3, r3
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	3301      	adds	r3, #1
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001844:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001848:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800184a:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 800184c:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001856:	4293      	cmp	r3, r2
 8001858:	d906      	bls.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x9c>
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800185c:	2202      	movs	r2, #2
 800185e:	801a      	strh	r2, [r3, #0]
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001862:	2200      	movs	r2, #0
 8001864:	801a      	strh	r2, [r3, #0]
 8001866:	e006      	b.n	8001876 <HAL_TIM_PeriodElapsedCallback+0xaa>
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	b29a      	uxth	r2, r3
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001874:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 8001876:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001888:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40014400 	.word	0x40014400
 8001898:	20011e74 	.word	0x20011e74
 800189c:	20010e74 	.word	0x20010e74
 80018a0:	20012888 	.word	0x20012888
 80018a4:	40000400 	.word	0x40000400
 80018a8:	2000ce48 	.word	0x2000ce48
 80018ac:	2000a850 	.word	0x2000a850
 80018b0:	2000984c 	.word	0x2000984c
 80018b4:	2000a852 	.word	0x2000a852
 80018b8:	2000a854 	.word	0x2000a854
 80018bc:	20008e0a 	.word	0x20008e0a

080018c0 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <analoginputloopb+0xd0>)
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <analoginputloopb+0xd4>)
 80018d0:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <analoginputloopb+0xd0>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 80018d8:	4b2f      	ldr	r3, [pc, #188]	; (8001998 <analoginputloopb+0xd8>)
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <analoginputloopb+0xd0>)
 80018de:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80018e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80018ea:	337f      	adds	r3, #127	; 0x7f
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b2a      	ldr	r3, [pc, #168]	; (800199c <analoginputloopb+0xdc>)
 80018f2:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <analoginputloopb+0xe0>)
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80018fc:	337f      	adds	r3, #127	; 0x7f
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <analoginputloopb+0xe4>)
 8001904:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <analoginputloopb+0xdc>)
 8001908:	881a      	ldrh	r2, [r3, #0]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <analoginputloopb+0xe8>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d908      	bls.n	8001924 <analoginputloopb+0x64>
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <analoginputloopb+0xec>)
 8001914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b22      	ldr	r3, [pc, #136]	; (80019ac <analoginputloopb+0xec>)
 8001922:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001924:	4b1d      	ldr	r3, [pc, #116]	; (800199c <analoginputloopb+0xdc>)
 8001926:	881a      	ldrh	r2, [r3, #0]
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <analoginputloopb+0xe8>)
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d208      	bcs.n	8001942 <analoginputloopb+0x82>
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <analoginputloopb+0xec>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	b29b      	uxth	r3, r3
 8001938:	3301      	adds	r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	b21a      	sxth	r2, r3
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <analoginputloopb+0xec>)
 8001940:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <analoginputloopb+0xe4>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	43db      	mvns	r3, r3
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <analoginputloopb+0xd8>)
 800194c:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <analoginputloopb+0xec>)
 8001950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001954:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001958:	4293      	cmp	r3, r2
 800195a:	dd02      	ble.n	8001962 <analoginputloopb+0xa2>
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <analoginputloopb+0xec>)
 800195e:	2200      	movs	r2, #0
 8001960:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <analoginputloopb+0xec>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	2b00      	cmp	r3, #0
 800196a:	da03      	bge.n	8001974 <analoginputloopb+0xb4>
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <analoginputloopb+0xec>)
 800196e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001972:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <analoginputloopb+0xdc>)
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <analoginputloopb+0xe8>)
 800197a:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <analoginputloopb+0xe4>)
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <analoginputloopb+0xf0>)
 8001982:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2000c098 	.word	0x2000c098
 8001994:	20009842 	.word	0x20009842
 8001998:	2000c082 	.word	0x2000c082
 800199c:	2000c07a 	.word	0x2000c07a
 80019a0:	40000800 	.word	0x40000800
 80019a4:	2000c07e 	.word	0x2000c07e
 80019a8:	2000c07c 	.word	0x2000c07c
 80019ac:	2000c084 	.word	0x2000c084
 80019b0:	2000c080 	.word	0x2000c080

080019b4 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <note_reset+0x78>)
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	71da      	strb	r2, [r3, #7]
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <note_reset+0x78>)
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	755a      	strb	r2, [r3, #21]
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <note_reset+0x78>)
 80019c6:	22ff      	movs	r2, #255	; 0xff
 80019c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <note_reset+0x78>)
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <note_reset+0x78>)
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <note_reset+0x78>)
 80019de:	22ff      	movs	r2, #255	; 0xff
 80019e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <note_reset+0x78>)
 80019e6:	22ff      	movs	r2, #255	; 0xff
 80019e8:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <note_reset+0x78>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	721a      	strb	r2, [r3, #8]
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <note_reset+0x78>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	759a      	strb	r2, [r3, #22]
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <note_reset+0x78>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <note_reset+0x78>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <note_reset+0x78>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	note[5].detune=0;note[6].detune=0;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <note_reset+0x78>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <note_reset+0x78>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c


}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20008e10 	.word	0x20008e10

08001a30 <main_initial>:

void main_initial(void){
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	b0dd      	sub	sp, #372	; 0x174
 8001a34:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001a36:	4ba7      	ldr	r3, [pc, #668]	; (8001cd4 <main_initial+0x2a4>)
 8001a38:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158



	HAL_DMA_Init(&hdma_spi2_tx);
 8001a3c:	48a6      	ldr	r0, [pc, #664]	; (8001cd8 <main_initial+0x2a8>)
 8001a3e:	f006 fa4b 	bl	8007ed8 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 8001a42:	48a6      	ldr	r0, [pc, #664]	; (8001cdc <main_initial+0x2ac>)
 8001a44:	f006 fa48 	bl	8007ed8 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001a48:	48a5      	ldr	r0, [pc, #660]	; (8001ce0 <main_initial+0x2b0>)
 8001a4a:	f006 fa45 	bl	8007ed8 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001a4e:	48a5      	ldr	r0, [pc, #660]	; (8001ce4 <main_initial+0x2b4>)
 8001a50:	f008 fbf0 	bl	800a234 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001a54:	48a4      	ldr	r0, [pc, #656]	; (8001ce8 <main_initial+0x2b8>)
 8001a56:	f008 fbed 	bl	800a234 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001a5a:	48a4      	ldr	r0, [pc, #656]	; (8001cec <main_initial+0x2bc>)
 8001a5c:	f009 fc3c 	bl	800b2d8 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001a60:	4ba3      	ldr	r3, [pc, #652]	; (8001cf0 <main_initial+0x2c0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001a66:	48a3      	ldr	r0, [pc, #652]	; (8001cf4 <main_initial+0x2c4>)
 8001a68:	f009 fbdc 	bl	800b224 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001a6c:	48a2      	ldr	r0, [pc, #648]	; (8001cf8 <main_initial+0x2c8>)
 8001a6e:	f009 fbd9 	bl	800b224 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001a72:	2100      	movs	r1, #0
 8001a74:	489d      	ldr	r0, [pc, #628]	; (8001cec <main_initial+0x2bc>)
 8001a76:	f009 fd73 	bl	800b560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	489b      	ldr	r0, [pc, #620]	; (8001cec <main_initial+0x2bc>)
 8001a7e:	f009 fd6f 	bl	800b560 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a86:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001a8a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001a8c:	489b      	ldr	r0, [pc, #620]	; (8001cfc <main_initial+0x2cc>)
 8001a8e:	f005 f8e5 	bl	8006c5c <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001a92:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001a96:	499a      	ldr	r1, [pc, #616]	; (8001d00 <main_initial+0x2d0>)
 8001a98:	4898      	ldr	r0, [pc, #608]	; (8001cfc <main_initial+0x2cc>)
 8001a9a:	f005 fa1f 	bl	8006edc <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 8001a9e:	4899      	ldr	r0, [pc, #612]	; (8001d04 <main_initial+0x2d4>)
 8001aa0:	f004 fc6c 	bl	800637c <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001aa4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001aa8:	f5a3 768e 	sub.w	r6, r3, #284	; 0x11c
 8001aac:	4b96      	ldr	r3, [pc, #600]	; (8001d08 <main_initial+0x2d8>)
 8001aae:	4634      	mov	r4, r6
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	8022      	strh	r2, [r4, #0]
 8001abc:	3402      	adds	r4, #2
 8001abe:	0c1b      	lsrs	r3, r3, #16
 8001ac0:	7023      	strb	r3, [r4, #0]
 8001ac2:	f106 0313 	add.w	r3, r6, #19
 8001ac6:	22f1      	movs	r2, #241	; 0xf1
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f00b f94c 	bl	800cd68 <memset>


	HAL_Delay(5);
 8001ad0:	2005      	movs	r0, #5
 8001ad2:	f005 f85b 	bl	8006b8c <HAL_Delay>



		//uint16_t sample_size=sizeof(RAM);

		uint16_t sample_size=32678;
 8001ad6:	f647 73a6 	movw	r3, #32678	; 0x7fa6
 8001ada:	f8a7 3156 	strh.w	r3, [r7, #342]	; 0x156



		uint8_t* ram_ptr=&RAM[0];
 8001ade:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <main_initial+0x2dc>)
 8001ae0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 8001ae4:	f8b7 3156 	ldrh.w	r3, [r7, #342]	; 0x156
 8001ae8:	461a      	mov	r2, r3
 8001aea:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001aee:	2002      	movs	r0, #2
 8001af0:	f002 ff66 	bl	80049c0 <sample_save>
				send_spi1[0]=sampler_ram_clear_test(2);  // test written ok
 8001af4:	2002      	movs	r0, #2
 8001af6:	f002 ff0b 	bl	8004910 <sampler_ram_clear_test>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b06:	701a      	strb	r2, [r3, #0]



	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b0c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	3304      	adds	r3, #4
 8001b16:	223c      	movs	r2, #60	; 0x3c
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00b f924 	bl	800cd68 <memset>
	uint16_t mem_count2=0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	uint16_t mem_counter=0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <main_initial+0x2e0>)
 8001b2e:	2203      	movs	r2, #3
 8001b30:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 8001b32:	4b77      	ldr	r3, [pc, #476]	; (8001d10 <main_initial+0x2e0>)
 8001b34:	22ff      	movs	r2, #255	; 0xff
 8001b36:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 8001b38:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <main_initial+0x2e0>)
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 8001b3e:	4b74      	ldr	r3, [pc, #464]	; (8001d10 <main_initial+0x2e0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2110      	movs	r1, #16
 8001b48:	4872      	ldr	r0, [pc, #456]	; (8001d14 <main_initial+0x2e4>)
 8001b4a:	f006 ff29 	bl	80089a0 <HAL_GPIO_WritePin>
 8001b4e:	f240 4304 	movw	r3, #1028	; 0x404
 8001b52:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <main_initial+0x2e0>)
 8001b54:	496e      	ldr	r1, [pc, #440]	; (8001d10 <main_initial+0x2e0>)
 8001b56:	4864      	ldr	r0, [pc, #400]	; (8001ce8 <main_initial+0x2b8>)
 8001b58:	f008 ff8a 	bl	800aa70 <HAL_SPI_TransmitReceive_DMA>
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2110      	movs	r1, #16
 8001b60:	486c      	ldr	r0, [pc, #432]	; (8001d14 <main_initial+0x2e4>)
 8001b62:	f006 ff1d 	bl	80089a0 <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	4b69      	ldr	r3, [pc, #420]	; (8001d18 <main_initial+0x2e8>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2302      	movs	r3, #2
 8001b78:	2240      	movs	r2, #64	; 0x40
 8001b7a:	21a0      	movs	r1, #160	; 0xa0
 8001b7c:	4861      	ldr	r0, [pc, #388]	; (8001d04 <main_initial+0x2d4>)
 8001b7e:	f007 f97f 	bl	8008e80 <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001b82:	4a66      	ldr	r2, [pc, #408]	; (8001d1c <main_initial+0x2ec>)
 8001b84:	4b64      	ldr	r3, [pc, #400]	; (8001d18 <main_initial+0x2e8>)
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b92:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b96:	c407      	stmia	r4!, {r0, r1, r2}
 8001b98:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001b9a:	4b61      	ldr	r3, [pc, #388]	; (8001d20 <main_initial+0x2f0>)
 8001b9c:	22a0      	movs	r2, #160	; 0xa0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4860      	ldr	r0, [pc, #384]	; (8001d24 <main_initial+0x2f4>)
 8001ba2:	f00b f8d3 	bl	800cd4c <memcpy>
	    memcpy(&sampler,potSource+476,11 );
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <main_initial+0x2f8>)
 8001ba8:	220b      	movs	r2, #11
 8001baa:	4619      	mov	r1, r3
 8001bac:	485f      	ldr	r0, [pc, #380]	; (8001d2c <main_initial+0x2fc>)
 8001bae:	f00b f8cd 	bl	800cd4c <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001bb8:	e07f      	b.n	8001cba <main_initial+0x28a>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001bba:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4a5a      	ldr	r2, [pc, #360]	; (8001d30 <main_initial+0x300>)
 8001bc8:	1898      	adds	r0, r3, r2
 8001bca:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	332e      	adds	r3, #46	; 0x2e
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	; (8001d18 <main_initial+0x2e8>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	2206      	movs	r2, #6
 8001bde:	4619      	mov	r1, r3
 8001be0:	f00b f8b4 	bl	800cd4c <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001be4:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001be8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a50      	ldr	r2, [pc, #320]	; (8001d34 <main_initial+0x304>)
 8001bf2:	1898      	adds	r0, r3, r2
 8001bf4:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	336a      	adds	r3, #106	; 0x6a
 8001c00:	4a45      	ldr	r2, [pc, #276]	; (8001d18 <main_initial+0x2e8>)
 8001c02:	4413      	add	r3, r2
 8001c04:	2205      	movs	r2, #5
 8001c06:	4619      	mov	r1, r3
 8001c08:	f00b f8a0 	bl	800cd4c <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001c0c:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001c10:	222c      	movs	r2, #44	; 0x2c
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	4a48      	ldr	r2, [pc, #288]	; (8001d38 <main_initial+0x308>)
 8001c18:	1898      	adds	r0, r3, r2
 8001c1a:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <main_initial+0x2e8>)
 8001c2c:	4413      	add	r3, r2
 8001c2e:	2206      	movs	r2, #6
 8001c30:	4619      	mov	r1, r3
 8001c32:	f00b f88b 	bl	800cd4c <memcpy>

			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001c36:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4a3e      	ldr	r2, [pc, #248]	; (8001d3c <main_initial+0x30c>)
 8001c44:	1898      	adds	r0, r3, r2
 8001c46:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c56:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <main_initial+0x2e8>)
 8001c58:	4413      	add	r3, r2
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f00b f875 	bl	800cd4c <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001c62:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <main_initial+0x310>)
 8001c70:	4413      	add	r3, r2
 8001c72:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001c7c:	4926      	ldr	r1, [pc, #152]	; (8001d18 <main_initial+0x2e8>)
 8001c7e:	440a      	add	r2, r1
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	601a      	str	r2, [r3, #0]
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 8001c84:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001c88:	330a      	adds	r3, #10
 8001c8a:	222c      	movs	r2, #44	; 0x2c
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	4a29      	ldr	r2, [pc, #164]	; (8001d38 <main_initial+0x308>)
 8001c92:	1898      	adds	r0, r3, r2
 8001c94:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <main_initial+0x2e8>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	2206      	movs	r2, #6
 8001caa:	4619      	mov	r1, r3
 8001cac:	f00b f84e 	bl	800cd4c <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001cb0:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001cba:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	f67f af7b 	bls.w	8001bba <main_initial+0x18a>


	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001cc4:	4b1f      	ldr	r3, [pc, #124]	; (8001d44 <main_initial+0x314>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	e093      	b.n	8001df4 <main_initial+0x3c4>

		for 	(n=0;n<18;n++){					// this is ok
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <main_initial+0x318>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	801a      	strh	r2, [r3, #0]
 8001cd2:	e085      	b.n	8001de0 <main_initial+0x3b0>
 8001cd4:	0800d2f0 	.word	0x0800d2f0
 8001cd8:	200129a0 	.word	0x200129a0
 8001cdc:	200128e0 	.word	0x200128e0
 8001ce0:	20012940 	.word	0x20012940
 8001ce4:	20012888 	.word	0x20012888
 8001ce8:	20012830 	.word	0x20012830
 8001cec:	20012a48 	.word	0x20012a48
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	20012a00 	.word	0x20012a00
 8001cf8:	20012a90 	.word	0x20012a90
 8001cfc:	20012734 	.word	0x20012734
 8001d00:	2000a85c 	.word	0x2000a85c
 8001d04:	200127dc 	.word	0x200127dc
 8001d08:	0800d3cc 	.word	0x0800d3cc
 8001d0c:	200001ac 	.word	0x200001ac
 8001d10:	20012318 	.word	0x20012318
 8001d14:	40020000 	.word	0x40020000
 8001d18:	200095e0 	.word	0x200095e0
 8001d1c:	2000dc84 	.word	0x2000dc84
 8001d20:	2000967c 	.word	0x2000967c
 8001d24:	20008e10 	.word	0x20008e10
 8001d28:	200097bc 	.word	0x200097bc
 8001d2c:	20008ebc 	.word	0x20008ebc
 8001d30:	2000ce4c 	.word	0x2000ce4c
 8001d34:	2000d1f8 	.word	0x2000d1f8
 8001d38:	2000dcb4 	.word	0x2000dcb4
 8001d3c:	2000d0f4 	.word	0x2000d0f4
 8001d40:	2000d130 	.word	0x2000d130
 8001d44:	2000984a 	.word	0x2000984a
 8001d48:	20009844 	.word	0x20009844
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001d4c:	4b8a      	ldr	r3, [pc, #552]	; (8001f78 <main_initial+0x548>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d114      	bne.n	8001d7e <main_initial+0x34e>
 8001d54:	4b89      	ldr	r3, [pc, #548]	; (8001f7c <main_initial+0x54c>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b86      	ldr	r3, [pc, #536]	; (8001f7c <main_initial+0x54c>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	460b      	mov	r3, r1
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <main_initial+0x548>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	440b      	add	r3, r1
 8001d76:	3a80      	subs	r2, #128	; 0x80
 8001d78:	b2d1      	uxtb	r1, r2
 8001d7a:	4a81      	ldr	r2, [pc, #516]	; (8001f80 <main_initial+0x550>)
 8001d7c:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001d7e:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <main_initial+0x548>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d114      	bne.n	8001db0 <main_initial+0x380>
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <main_initial+0x54c>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3310      	adds	r3, #16
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b7a      	ldr	r3, [pc, #488]	; (8001f7c <main_initial+0x54c>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	460b      	mov	r3, r1
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	440b      	add	r3, r1
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4619      	mov	r1, r3
 8001da2:	4b75      	ldr	r3, [pc, #468]	; (8001f78 <main_initial+0x548>)
 8001da4:	881b      	ldrh	r3, [r3, #0]
 8001da6:	440b      	add	r3, r1
 8001da8:	00d2      	lsls	r2, r2, #3
 8001daa:	b2d1      	uxtb	r1, r2
 8001dac:	4a74      	ldr	r2, [pc, #464]	; (8001f80 <main_initial+0x550>)
 8001dae:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001db0:	4b71      	ldr	r3, [pc, #452]	; (8001f78 <main_initial+0x548>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d90d      	bls.n	8001dd4 <main_initial+0x3a4>
 8001db8:	4b70      	ldr	r3, [pc, #448]	; (8001f7c <main_initial+0x54c>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b6b      	ldr	r3, [pc, #428]	; (8001f78 <main_initial+0x548>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	4a6c      	ldr	r2, [pc, #432]	; (8001f80 <main_initial+0x550>)
 8001dd0:	21ff      	movs	r1, #255	; 0xff
 8001dd2:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <main_initial+0x548>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b66      	ldr	r3, [pc, #408]	; (8001f78 <main_initial+0x548>)
 8001dde:	801a      	strh	r2, [r3, #0]
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <main_initial+0x548>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	2b11      	cmp	r3, #17
 8001de6:	d9b1      	bls.n	8001d4c <main_initial+0x31c>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001de8:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <main_initial+0x54c>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <main_initial+0x54c>)
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <main_initial+0x54c>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dfa:	f67f af67 	bls.w	8001ccc <main_initial+0x29c>

		}

		}
	seq.pos=0;
 8001dfe:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <main_initial+0x554>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001e04:	2301      	movs	r3, #1
 8001e06:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <main_initial+0x54c>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	e01a      	b.n	8001e48 <main_initial+0x418>
	  		tempo_hold=i;
 8001e12:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <main_initial+0x54c>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001e1a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4a59      	ldr	r2, [pc, #356]	; (8001f88 <main_initial+0x558>)
 8001e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e26:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

	  	tempo_lut[i]=tempo_hold;
 8001e2a:	4b54      	ldr	r3, [pc, #336]	; (8001f7c <main_initial+0x54c>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001e34:	b299      	uxth	r1, r3
 8001e36:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <main_initial+0x55c>)
 8001e38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001e3c:	4b4f      	ldr	r3, [pc, #316]	; (8001f7c <main_initial+0x54c>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b4d      	ldr	r3, [pc, #308]	; (8001f7c <main_initial+0x54c>)
 8001e46:	801a      	strh	r2, [r3, #0]
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <main_initial+0x54c>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d9e0      	bls.n	8001e12 <main_initial+0x3e2>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <main_initial+0x560>)
 8001e52:	2218      	movs	r2, #24
 8001e54:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001e56:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <main_initial+0x54c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	e00b      	b.n	8001e76 <main_initial+0x446>
			spell[i]=67;
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <main_initial+0x54c>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <main_initial+0x564>)
 8001e66:	2143      	movs	r1, #67	; 0x43
 8001e68:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001e6a:	4b44      	ldr	r3, [pc, #272]	; (8001f7c <main_initial+0x54c>)
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <main_initial+0x54c>)
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <main_initial+0x54c>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e7e:	d3ee      	bcc.n	8001e5e <main_initial+0x42e>

		}

		gfx_clear();
 8001e80:	f002 f9aa 	bl	80041d8 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001e8a:	e006      	b.n	8001e9a <main_initial+0x46a>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001e8c:	f7ff f93a 	bl	8001104 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001e90:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001e94:	3301      	adds	r3, #1
 8001e96:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001e9a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001e9e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001ea2:	d3f3      	bcc.n	8001e8c <main_initial+0x45c>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001ea4:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <main_initial+0x54c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	801a      	strh	r2, [r3, #0]
 8001eaa:	e005      	b.n	8001eb8 <main_initial+0x488>
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <main_initial+0x54c>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <main_initial+0x54c>)
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <main_initial+0x54c>)
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ec0:	d3f4      	bcc.n	8001eac <main_initial+0x47c>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <main_initial+0x54c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	e005      	b.n	8001ed6 <main_initial+0x4a6>
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <main_initial+0x54c>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b2a      	ldr	r3, [pc, #168]	; (8001f7c <main_initial+0x54c>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <main_initial+0x54c>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ede:	d3f4      	bcc.n	8001eca <main_initial+0x49a>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001ee6:	e00c      	b.n	8001f02 <main_initial+0x4d2>
 8001ee8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <main_initial+0x568>)
 8001ef4:	2140      	movs	r1, #64	; 0x40
 8001ef6:	5499      	strb	r1, [r3, r2]
 8001ef8:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001efc:	3301      	adds	r3, #1
 8001efe:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f02:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0a:	d3ed      	bcc.n	8001ee8 <main_initial+0x4b8>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001f0c:	4822      	ldr	r0, [pc, #136]	; (8001f98 <main_initial+0x568>)
 8001f0e:	f7fe f963 	bl	80001d8 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <main_initial+0x56c>)
 8001f18:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <main_initial+0x570>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <main_initial+0x570>)
 8001f24:	801a      	strh	r2, [r3, #0]
			display_clear ();
 8001f26:	f002 f999 	bl	800425c <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f30:	e00e      	b.n	8001f50 <main_initial+0x520>
 8001f32:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f36:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <main_initial+0x574>)
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f40:	4a15      	ldr	r2, [pc, #84]	; (8001f98 <main_initial+0x568>)
 8001f42:	2130      	movs	r1, #48	; 0x30
 8001f44:	54d1      	strb	r1, [r2, r3]
 8001f46:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f50:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <main_initial+0x570>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d3ea      	bcc.n	8001f32 <main_initial+0x502>
			note_reset();
 8001f5c:	f7ff fd2a 	bl	80019b4 <note_reset>


			menuSelect=0;
 8001f60:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <main_initial+0x578>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <main_initial+0x57c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 8001f6c:	bf00      	nop
 8001f6e:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20009844 	.word	0x20009844
 8001f7c:	2000984a 	.word	0x2000984a
 8001f80:	2000c5b0 	.word	0x2000c5b0
 8001f84:	2000dc84 	.word	0x2000dc84
 8001f88:	0020b584 	.word	0x0020b584
 8001f8c:	2000c1ac 	.word	0x2000c1ac
 8001f90:	200093dc 	.word	0x200093dc
 8001f94:	20008cbc 	.word	0x20008cbc
 8001f98:	20008f7c 	.word	0x20008f7c
 8001f9c:	2000ec3a 	.word	0x2000ec3a
 8001fa0:	2000e02a 	.word	0x2000e02a
 8001fa4:	2000e02c 	.word	0x2000e02c
 8001fa8:	20009842 	.word	0x20009842
 8001fac:	20009843 	.word	0x20009843

08001fb0 <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	e02b      	b.n	8002018 <patch_lists+0x68>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	4a1a      	ldr	r2, [pc, #104]	; (800202c <patch_lists+0x7c>)
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d11d      	bne.n	8002012 <patch_lists+0x62>
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <patch_lists+0x7c>)
 8001fda:	212c      	movs	r1, #44	; 0x2c
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	79bb      	ldrb	r3, [r7, #6]
 8001fee:	3230      	adds	r2, #48	; 0x30
 8001ff0:	b2d1      	uxtb	r1, r2
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <patch_lists+0x80>)
 8001ff4:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	79bb      	ldrb	r3, [r7, #6]
 8001ffa:	490c      	ldr	r1, [pc, #48]	; (800202c <patch_lists+0x7c>)
 8001ffc:	202c      	movs	r0, #44	; 0x2c
 8001ffe:	fb00 f202 	mul.w	r2, r0, r2
 8002002:	440a      	add	r2, r1
 8002004:	3201      	adds	r2, #1
 8002006:	7811      	ldrb	r1, [r2, #0]
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <patch_lists+0x84>)
 800200a:	54d1      	strb	r1, [r2, r3]
	list_counter2++;
 800200c:	79bb      	ldrb	r3, [r7, #6]
 800200e:	3301      	adds	r3, #1
 8002010:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	3301      	adds	r3, #1
 8002016:	71fb      	strb	r3, [r7, #7]
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	2b13      	cmp	r3, #19
 800201c:	d9d0      	bls.n	8001fc0 <patch_lists+0x10>
	}

    }

}
 800201e:	bf00      	nop
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	2000dcb4 	.word	0x2000dcb4
 8002030:	20011e78 	.word	0x20011e78
 8002034:	200120e8 	.word	0x200120e8

08002038 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b0f2      	sub	sp, #456	; 0x1c8
 800203c:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 800203e:	4bcb      	ldr	r3, [pc, #812]	; (800236c <sampling+0x334>)
 8002040:	2200      	movs	r2, #0
 8002042:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 8002044:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002048:	2228      	movs	r2, #40	; 0x28
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f00a fe8b 	bl	800cd68 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 8002052:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002056:	2228      	movs	r2, #40	; 0x28
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f00a fe84 	bl	800cd68 <memset>
uint16_t tuned_list[10];
int32_t sample_adc=0;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
int32_t ram_temp=0;
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 800206c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002070:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002074:	4618      	mov	r0, r3
 8002076:	2350      	movs	r3, #80	; 0x50
 8002078:	461a      	mov	r2, r3
 800207a:	2100      	movs	r1, #0
 800207c:	f00a fe74 	bl	800cd68 <memset>
 8002080:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002084:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002088:	2201      	movs	r2, #1
 800208a:	801a      	strh	r2, [r3, #0]
 800208c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002090:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002094:	2201      	movs	r2, #1
 8002096:	805a      	strh	r2, [r3, #2]
 8002098:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800209c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020a0:	2201      	movs	r2, #1
 80020a2:	809a      	strh	r2, [r3, #4]
 80020a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020ac:	2201      	movs	r2, #1
 80020ae:	80da      	strh	r2, [r3, #6]
 80020b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020b8:	2201      	movs	r2, #1
 80020ba:	811a      	strh	r2, [r3, #8]
 80020bc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020c4:	2201      	movs	r2, #1
 80020c6:	815a      	strh	r2, [r3, #10]
 80020c8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020d0:	2201      	movs	r2, #1
 80020d2:	819a      	strh	r2, [r3, #12]
 80020d4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020dc:	2201      	movs	r2, #1
 80020de:	81da      	strh	r2, [r3, #14]
 80020e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020e8:	2201      	movs	r2, #1
 80020ea:	821a      	strh	r2, [r3, #16]
 80020ec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80020f4:	2201      	movs	r2, #1
 80020f6:	825a      	strh	r2, [r3, #18]
 80020f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80020fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002100:	2201      	movs	r2, #1
 8002102:	829a      	strh	r2, [r3, #20]
 8002104:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002108:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800210c:	2201      	movs	r2, #1
 800210e:	82da      	strh	r2, [r3, #22]
 8002110:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002114:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002118:	2201      	movs	r2, #1
 800211a:	831a      	strh	r2, [r3, #24]
 800211c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002120:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002124:	2201      	movs	r2, #1
 8002126:	835a      	strh	r2, [r3, #26]
 8002128:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800212c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002130:	2201      	movs	r2, #1
 8002132:	839a      	strh	r2, [r3, #28]
 8002134:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002138:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800213c:	2201      	movs	r2, #1
 800213e:	83da      	strh	r2, [r3, #30]
 8002140:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002144:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002148:	2201      	movs	r2, #1
 800214a:	841a      	strh	r2, [r3, #32]
 800214c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002150:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002154:	2201      	movs	r2, #1
 8002156:	845a      	strh	r2, [r3, #34]	; 0x22
 8002158:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800215c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002160:	2201      	movs	r2, #1
 8002162:	849a      	strh	r2, [r3, #36]	; 0x24
 8002164:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002168:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800216c:	2201      	movs	r2, #1
 800216e:	84da      	strh	r2, [r3, #38]	; 0x26
 8002170:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002174:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002178:	2201      	movs	r2, #1
 800217a:	851a      	strh	r2, [r3, #40]	; 0x28
 800217c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002180:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002184:	2201      	movs	r2, #1
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002188:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800218c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002190:	2201      	movs	r2, #1
 8002192:	859a      	strh	r2, [r3, #44]	; 0x2c
 8002194:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002198:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800219c:	2201      	movs	r2, #1
 800219e:	85da      	strh	r2, [r3, #46]	; 0x2e
 80021a0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021a8:	2201      	movs	r2, #1
 80021aa:	861a      	strh	r2, [r3, #48]	; 0x30
 80021ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021b0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021b4:	2201      	movs	r2, #1
 80021b6:	865a      	strh	r2, [r3, #50]	; 0x32
 80021b8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021bc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021c0:	2201      	movs	r2, #1
 80021c2:	869a      	strh	r2, [r3, #52]	; 0x34
 80021c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021cc:	2201      	movs	r2, #1
 80021ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80021d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021d8:	2201      	movs	r2, #1
 80021da:	871a      	strh	r2, [r3, #56]	; 0x38
 80021dc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021e4:	2201      	movs	r2, #1
 80021e6:	875a      	strh	r2, [r3, #58]	; 0x3a
 80021e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021f0:	2201      	movs	r2, #1
 80021f2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80021f4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80021f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021fc:	2201      	movs	r2, #1
 80021fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002200:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002204:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002208:	2201      	movs	r2, #1
 800220a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800220e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002212:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002216:	2201      	movs	r2, #1
 8002218:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800221c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002220:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002224:	2201      	movs	r2, #1
 8002226:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800222a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800222e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002232:	2201      	movs	r2, #1
 8002234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002238:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800223c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002240:	2201      	movs	r2, #1
 8002242:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
uint8_t flash_result;
int32_t sample_input=0;
 8002246:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800224a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
tempo_lut[131]=1023;   // force to an even count on samples
 8002252:	4b47      	ldr	r3, [pc, #284]	; (8002370 <sampling+0x338>)
 8002254:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002258:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
int32_t sample_loop_input=0;
 800225c:	2300      	movs	r3, #0
 800225e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <sampling+0x33c>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d104      	bne.n	8002274 <sampling+0x23c>
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <sampling+0x340>)
 800226c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	e002      	b.n	800227a <sampling+0x242>
 8002274:	4b40      	ldr	r3, [pc, #256]	; (8002378 <sampling+0x340>)
 8002276:	2200      	movs	r2, #0
 8002278:	801a      	strh	r2, [r3, #0]

bank_write=0;
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <sampling+0x33c>)
 800227c:	2200      	movs	r2, #0
 800227e:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8002280:	2210      	movs	r2, #16
 8002282:	493e      	ldr	r1, [pc, #248]	; (800237c <sampling+0x344>)
 8002284:	483e      	ldr	r0, [pc, #248]	; (8002380 <sampling+0x348>)
 8002286:	f00a fd61 	bl	800cd4c <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <sampling+0x34c>)
 800228c:	2210      	movs	r2, #16
 800228e:	493e      	ldr	r1, [pc, #248]	; (8002388 <sampling+0x350>)
 8002290:	4618      	mov	r0, r3
 8002292:	f00a fd5b 	bl	800cd4c <memcpy>
sample_pointB=sample_pointD;
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <sampling+0x340>)
 8002298:	881a      	ldrh	r2, [r3, #0]
 800229a:	4b3c      	ldr	r3, [pc, #240]	; (800238c <sampling+0x354>)
 800229c:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 800229e:	2300      	movs	r3, #0
 80022a0:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4

uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 80022a4:	4b3a      	ldr	r3, [pc, #232]	; (8002390 <sampling+0x358>)
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <sampling+0x338>)
 80022ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022b0:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
//if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s



tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 80022b4:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da00      	bge.n	80022be <sampling+0x286>
 80022bc:	331f      	adds	r3, #31
 80022be:	115b      	asrs	r3, r3, #5
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <sampling+0x35c>)
 80022d4:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <sampling+0x35c>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002398 <sampling+0x360>
 80022e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022e6:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <sampling+0x35c>)
 80022e8:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80022ec:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80022f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d110      	bne.n	800231a <sampling+0x2e2>
 80022f8:	4b28      	ldr	r3, [pc, #160]	; (800239c <sampling+0x364>)
 80022fa:	8c1b      	ldrh	r3, [r3, #32]
 80022fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002300:	d80b      	bhi.n	800231a <sampling+0x2e2>
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <sampling+0x358>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <sampling+0x2e2>
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <sampling+0x368>)
 8002310:	2200      	movs	r2, #0
 8002312:	801a      	strh	r2, [r3, #0]
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <sampling+0x36c>)
 8002316:	2200      	movs	r2, #0
 8002318:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 800231a:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <sampling+0x370>)
 800231c:	2200      	movs	r2, #0
 800231e:	801a      	strh	r2, [r3, #0]
	sampler.trigger_position=0;     // reset sample start here
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <sampling+0x364>)
 8002322:	2200      	movs	r2, #0
 8002324:	819a      	strh	r2, [r3, #12]




uint8_t looper_dat[8]={1,3,7,15};
 8002326:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800232a:	f5a3 7292 	sub.w	r2, r3, #292	; 0x124
 800232e:	491f      	ldr	r1, [pc, #124]	; (80023ac <sampling+0x374>)
 8002330:	4613      	mov	r3, r2
 8002332:	c903      	ldmia	r1, {r0, r1}
 8002334:	6018      	str	r0, [r3, #0]
 8002336:	3304      	adds	r3, #4
 8002338:	7019      	strb	r1, [r3, #0]
 800233a:	1d53      	adds	r3, r2, #5
 800233c:	2200      	movs	r2, #0
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <sampling+0x378>)
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 800234a:	429a      	cmp	r2, r3
 800234c:	d05e      	beq.n	800240c <sampling+0x3d4>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 800234e:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <sampling+0x37c>)
 8002354:	fb92 f3f3 	sdiv	r3, r2, r3
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002360:	edc7 7a6b 	vstr	s15, [r7, #428]	; 0x1ac


						for (i=0;i<256;i++){								// 128 is 1 note
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <sampling+0x380>)
 8002366:	2200      	movs	r2, #0
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e04b      	b.n	8002404 <sampling+0x3cc>
 800236c:	2000ce48 	.word	0x2000ce48
 8002370:	2000c1ac 	.word	0x2000c1ac
 8002374:	20008e0a 	.word	0x20008e0a
 8002378:	2000a856 	.word	0x2000a856
 800237c:	2000dc86 	.word	0x2000dc86
 8002380:	20010c48 	.word	0x20010c48
 8002384:	20010c58 	.word	0x20010c58
 8002388:	2000dc97 	.word	0x2000dc97
 800238c:	20009848 	.word	0x20009848
 8002390:	2000dc84 	.word	0x2000dc84
 8002394:	2000ca38 	.word	0x2000ca38
 8002398:	42a00000 	.word	0x42a00000
 800239c:	20008ebc 	.word	0x20008ebc
 80023a0:	2000c05c 	.word	0x2000c05c
 80023a4:	2000c088 	.word	0x2000c088
 80023a8:	200120fc 	.word	0x200120fc
 80023ac:	0800d4d0 	.word	0x0800d4d0
 80023b0:	2000c5ac 	.word	0x2000c5ac
 80023b4:	006487ec 	.word	0x006487ec
 80023b8:	2000984a 	.word	0x2000984a
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 80023bc:	4bae      	ldr	r3, [pc, #696]	; (8002678 <sampling+0x640>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ca:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 80023ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80023d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80023e6:	4ba4      	ldr	r3, [pc, #656]	; (8002678 <sampling+0x640>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023f0:	b299      	uxth	r1, r3
 80023f2:	4ba2      	ldr	r3, [pc, #648]	; (800267c <sampling+0x644>)
 80023f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 80023f8:	4b9f      	ldr	r3, [pc, #636]	; (8002678 <sampling+0x640>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	4b9d      	ldr	r3, [pc, #628]	; (8002678 <sampling+0x640>)
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	4b9c      	ldr	r3, [pc, #624]	; (8002678 <sampling+0x640>)
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d9d7      	bls.n	80023bc <sampling+0x384>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 800240c:	4a9c      	ldr	r2, [pc, #624]	; (8002680 <sampling+0x648>)
 800240e:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8002412:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 8002414:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002418:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800241c:	4618      	mov	r0, r3
 800241e:	2344      	movs	r3, #68	; 0x44
 8002420:	461a      	mov	r2, r3
 8002422:	2100      	movs	r1, #0
 8002424:	f00a fca0 	bl	800cd68 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002428:	4b93      	ldr	r3, [pc, #588]	; (8002678 <sampling+0x640>)
 800242a:	2200      	movs	r2, #0
 800242c:	801a      	strh	r2, [r3, #0]
 800242e:	e00f      	b.n	8002450 <sampling+0x418>
 8002430:	4b91      	ldr	r3, [pc, #580]	; (8002678 <sampling+0x640>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	4619      	mov	r1, r3
 8002436:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800243a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800243e:	2200      	movs	r2, #0
 8002440:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002444:	4b8c      	ldr	r3, [pc, #560]	; (8002678 <sampling+0x640>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b29a      	uxth	r2, r3
 800244c:	4b8a      	ldr	r3, [pc, #552]	; (8002678 <sampling+0x640>)
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <sampling+0x640>)
 8002452:	881b      	ldrh	r3, [r3, #0]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d9eb      	bls.n	8002430 <sampling+0x3f8>
	//potSource[150]=(freq_point[0])*100; //0-2


patch_lists();
 8002458:	f7ff fdaa 	bl	8001fb0 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 800245c:	2300      	movs	r3, #0
 800245e:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8002462:	e0dd      	b.n	8002620 <sampling+0x5e8>


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002464:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002468:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 800246c:	4985      	ldr	r1, [pc, #532]	; (8002684 <sampling+0x64c>)
 800246e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002478:	443b      	add	r3, r7
 800247a:	f843 2c84 	str.w	r2, [r3, #-132]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800247e:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002482:	4981      	ldr	r1, [pc, #516]	; (8002688 <sampling+0x650>)
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	440b      	add	r3, r1
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <sampling+0x472>
 8002494:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002498:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800249c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024a0:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80024a4:	3114      	adds	r1, #20
 80024a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 80024aa:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80024ae:	4976      	ldr	r1, [pc, #472]	; (8002688 <sampling+0x650>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	440b      	add	r3, r1
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10d      	bne.n	80024dc <sampling+0x4a4>
 80024c0:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 80024c4:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80024c8:	f507 71a2 	add.w	r1, r7, #324	; 0x144
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4419      	add	r1, r3
 80024d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80024d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80024d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 80024dc:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80024e0:	4969      	ldr	r1, [pc, #420]	; (8002688 <sampling+0x650>)
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	440b      	add	r3, r1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d10d      	bne.n	800250e <sampling+0x4d6>
 80024f2:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 80024f6:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80024fa:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4419      	add	r1, r3
 8002502:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002506:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];}   // sample_input
 800250e:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002512:	495d      	ldr	r1, [pc, #372]	; (8002688 <sampling+0x650>)
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	440b      	add	r3, r1
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d10e      	bne.n	8002542 <sampling+0x50a>
 8002524:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8002528:	3306      	adds	r3, #6
 800252a:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800252e:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4419      	add	r1, r3
 8002536:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800253a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800253e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;}  // sampleinput
 8002542:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002546:	4950      	ldr	r1, [pc, #320]	; (8002688 <sampling+0x650>)
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	440b      	add	r3, r1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d109      	bne.n	800256c <sampling+0x534>
 8002558:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800255c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002560:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002564:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 800256c:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002570:	4945      	ldr	r1, [pc, #276]	; (8002688 <sampling+0x650>)
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	440b      	add	r3, r1
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b05      	cmp	r3, #5
 8002580:	d109      	bne.n	8002596 <sampling+0x55e>
 8002582:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002586:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800258a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800258e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // non muted RAM , just loop
 8002596:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 800259a:	493b      	ldr	r1, [pc, #236]	; (8002688 <sampling+0x650>)
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	440b      	add	r3, r1
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b06      	cmp	r3, #6
 80025aa:	d109      	bne.n	80025c0 <sampling+0x588>
 80025ac:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80025b4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025b8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==7) osc_pointers[pars_counter]=&ram_temp ;   // trigger 0-16
 80025c0:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <sampling+0x650>)
 80025c6:	4613      	mov	r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	440b      	add	r3, r1
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b07      	cmp	r3, #7
 80025d4:	d109      	bne.n	80025ea <sampling+0x5b2>
 80025d6:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025da:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80025de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80025e2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80025e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>7) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80025ea:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 80025ee:	4926      	ldr	r1, [pc, #152]	; (8002688 <sampling+0x650>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	1a9b      	subs	r3, r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	440b      	add	r3, r1
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b07      	cmp	r3, #7
 80025fe:	d90a      	bls.n	8002616 <sampling+0x5de>
 8002600:	f897 21c3 	ldrb.w	r2, [r7, #451]	; 0x1c3
 8002604:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002608:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800260c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8002610:	3114      	adds	r1, #20
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002616:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 800261a:	3301      	adds	r3, #1
 800261c:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 8002620:	f897 31c3 	ldrb.w	r3, [r7, #451]	; 0x1c3
 8002624:	2b03      	cmp	r3, #3
 8002626:	f67f af1d 	bls.w	8002464 <sampling+0x42c>


 }

note_holdA=0;
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <sampling+0x654>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002630:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002634:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002638:	2200      	movs	r2, #0
 800263a:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 800263c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002640:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <sampling+0x658>)
 8002646:	461c      	mov	r4, r3
 8002648:	4615      	mov	r5, r2
 800264a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264e:	682b      	ldr	r3, [r5, #0]
 8002650:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <sampling+0x65c>)
 8002654:	2200      	movs	r2, #0
 8002656:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <sampling+0x660>)
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	b29b      	uxth	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	2201      	movs	r2, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3b01      	subs	r3, #1
 800266c:	f887 31a7 	strb.w	r3, [r7, #423]	; 0x1a7
///////////////////////////////////////////////////////////////
uint8_t note_plain;

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002670:	4b01      	ldr	r3, [pc, #4]	; (8002678 <sampling+0x640>)
 8002672:	2200      	movs	r2, #0
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e233      	b.n	8002ae0 <sampling+0xaa8>
 8002678:	2000984a 	.word	0x2000984a
 800267c:	2000c3ac 	.word	0x2000c3ac
 8002680:	2000c5ac 	.word	0x2000c5ac
 8002684:	2000c060 	.word	0x2000c060
 8002688:	20008e10 	.word	0x20008e10
 800268c:	2000c05e 	.word	0x2000c05e
 8002690:	0800d4d8 	.word	0x0800d4d8
 8002694:	20009840 	.word	0x20009840
 8002698:	20008e00 	.word	0x20008e00

	i_total=i+sample_pointB;
 800269c:	4ba3      	ldr	r3, [pc, #652]	; (800292c <sampling+0x8f4>)
 800269e:	881a      	ldrh	r2, [r3, #0]
 80026a0:	4ba3      	ldr	r3, [pc, #652]	; (8002930 <sampling+0x8f8>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	4413      	add	r3, r2
 80026a6:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
	sampling_position=i>>6;   //   0-8 steps
 80026aa:	4ba0      	ldr	r3, [pc, #640]	; (800292c <sampling+0x8f4>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	099b      	lsrs	r3, r3, #6
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b9f      	ldr	r3, [pc, #636]	; (8002934 <sampling+0x8fc>)
 80026b6:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80026b8:	4b9e      	ldr	r3, [pc, #632]	; (8002934 <sampling+0x8fc>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3307      	adds	r3, #7
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b9c      	ldr	r3, [pc, #624]	; (8002938 <sampling+0x900>)
 80026c8:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80026ca:	4b9c      	ldr	r3, [pc, #624]	; (800293c <sampling+0x904>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	4a9a      	ldr	r2, [pc, #616]	; (800293c <sampling+0x904>)
 80026d4:	4413      	add	r3, r2
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	f887 3173 	strb.w	r3, [r7, #371]	; 0x173
potValues[i&255]=potSource[i&255]>>4; //just to update values
 80026dc:	4b93      	ldr	r3, [pc, #588]	; (800292c <sampling+0x8f4>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4a97      	ldr	r2, [pc, #604]	; (8002940 <sampling+0x908>)
 80026e4:	5cd2      	ldrb	r2, [r2, r3]
 80026e6:	4b91      	ldr	r3, [pc, #580]	; (800292c <sampling+0x8f4>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	0912      	lsrs	r2, r2, #4
 80026ee:	b2d1      	uxtb	r1, r2
 80026f0:	4a94      	ldr	r2, [pc, #592]	; (8002944 <sampling+0x90c>)
 80026f2:	54d1      	strb	r1, [r2, r3]

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80026f4:	4b94      	ldr	r3, [pc, #592]	; (8002948 <sampling+0x910>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	f8b7 21b2 	ldrh.w	r2, [r7, #434]	; 0x1b2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d812      	bhi.n	8002726 <sampling+0x6ee>
 8002700:	4b92      	ldr	r3, [pc, #584]	; (800294c <sampling+0x914>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	3301      	adds	r3, #1
 8002706:	b29b      	uxth	r3, r3
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	b29a      	uxth	r2, r3
 800270e:	4b8f      	ldr	r3, [pc, #572]	; (800294c <sampling+0x914>)
 8002710:	801a      	strh	r2, [r3, #0]
 8002712:	4b8d      	ldr	r3, [pc, #564]	; (8002948 <sampling+0x910>)
 8002714:	2200      	movs	r2, #0
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	4b8c      	ldr	r3, [pc, #560]	; (800294c <sampling+0x914>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <sampling+0x918>)
 8002722:	801a      	strh	r2, [r3, #0]
 8002724:	e005      	b.n	8002732 <sampling+0x6fa>
 8002726:	4b88      	ldr	r3, [pc, #544]	; (8002948 <sampling+0x910>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b86      	ldr	r3, [pc, #536]	; (8002948 <sampling+0x910>)
 8002730:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002732:	2300      	movs	r3, #0
 8002734:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <sampling+0x914>)
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b7e      	ldr	r3, [pc, #504]	; (800293c <sampling+0x904>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b29b      	uxth	r3, r3
 8002746:	429a      	cmp	r2, r3
 8002748:	d009      	beq.n	800275e <sampling+0x726>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800274a:	4b80      	ldr	r3, [pc, #512]	; (800294c <sampling+0x914>)
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	091b      	lsrs	r3, r3, #4
 8002750:	b29b      	uxth	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4b79      	ldr	r3, [pc, #484]	; (800293c <sampling+0x904>)
 8002756:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002758:	2301      	movs	r3, #1
 800275a:	f8a7 31c4 	strh.w	r3, [r7, #452]	; 0x1c4
}

	//if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 800275e:	f8b7 31c4 	ldrh.w	r3, [r7, #452]	; 0x1c4
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 81ac 	beq.w	8002ac0 <sampling+0xa88>
	{
		serial_tosend=1;
 8002768:	4b7a      	ldr	r3, [pc, #488]	; (8002954 <sampling+0x91c>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <sampling+0x8f4>)
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	3301      	adds	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b78      	ldr	r3, [pc, #480]	; (8002958 <sampling+0x920>)
 8002778:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 800277a:	4b70      	ldr	r3, [pc, #448]	; (800293c <sampling+0x904>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	b2da      	uxtb	r2, r3
 8002784:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002788:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800278c:	701a      	strb	r2, [r3, #0]
	//	loop_temp1[3]=adc_values[0]>>2;




		seq.loop[0]=(note[0].timeshift+loop_temp1[0])&31;
 800278e:	4b73      	ldr	r3, [pc, #460]	; (800295c <sampling+0x924>)
 8002790:	799a      	ldrb	r2, [r3, #6]
 8002792:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002796:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4413      	add	r3, r2
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b65      	ldr	r3, [pc, #404]	; (800293c <sampling+0x904>)
 80027a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+loop_temp1[0])&31;
 80027ac:	4b6b      	ldr	r3, [pc, #428]	; (800295c <sampling+0x924>)
 80027ae:	7d1a      	ldrb	r2, [r3, #20]
 80027b0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80027b4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	4b5d      	ldr	r3, [pc, #372]	; (800293c <sampling+0x904>)
 80027c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+loop_temp1[0])&31; // this is really handy with sync to notes
 80027ca:	4b64      	ldr	r3, [pc, #400]	; (800295c <sampling+0x924>)
 80027cc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80027d0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80027d4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b55      	ldr	r3, [pc, #340]	; (800293c <sampling+0x904>)
 80027e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+loop_temp1[0])&31;
 80027ea:	4b5c      	ldr	r3, [pc, #368]	; (800295c <sampling+0x924>)
 80027ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80027f0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80027f4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b4d      	ldr	r3, [pc, #308]	; (800293c <sampling+0x904>)
 8002806:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		//seq.loop[5]=(note[5].timeshift+loop_temp1[0])&31;


			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 800280a:	4b4c      	ldr	r3, [pc, #304]	; (800293c <sampling+0x904>)
 800280c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002810:	461a      	mov	r2, r3
 8002812:	4b53      	ldr	r3, [pc, #332]	; (8002960 <sampling+0x928>)
 8002814:	5c9a      	ldrb	r2, [r3, r2]
 8002816:	4b51      	ldr	r3, [pc, #324]	; (800295c <sampling+0x924>)
 8002818:	795b      	ldrb	r3, [r3, #5]
 800281a:	4413      	add	r3, r2
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b4f      	ldr	r3, [pc, #316]	; (800295c <sampling+0x924>)
 8002820:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002822:	4b46      	ldr	r3, [pc, #280]	; (800293c <sampling+0x904>)
 8002824:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002828:	461a      	mov	r2, r3
 800282a:	4b4d      	ldr	r3, [pc, #308]	; (8002960 <sampling+0x928>)
 800282c:	5c9a      	ldrb	r2, [r3, r2]
 800282e:	4b4b      	ldr	r3, [pc, #300]	; (800295c <sampling+0x924>)
 8002830:	7cdb      	ldrb	r3, [r3, #19]
 8002832:	4413      	add	r3, r2
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4b49      	ldr	r3, [pc, #292]	; (800295c <sampling+0x924>)
 8002838:	741a      	strb	r2, [r3, #16]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 800283a:	4b40      	ldr	r3, [pc, #256]	; (800293c <sampling+0x904>)
 800283c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002840:	461a      	mov	r2, r3
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <sampling+0x928>)
 8002844:	5c9a      	ldrb	r2, [r3, r2]
 8002846:	4b45      	ldr	r3, [pc, #276]	; (800295c <sampling+0x924>)
 8002848:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800284c:	4413      	add	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b42      	ldr	r3, [pc, #264]	; (800295c <sampling+0x924>)
 8002852:	779a      	strb	r2, [r3, #30]

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002854:	4b39      	ldr	r3, [pc, #228]	; (800293c <sampling+0x904>)
 8002856:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800285a:	461a      	mov	r2, r3
 800285c:	4b40      	ldr	r3, [pc, #256]	; (8002960 <sampling+0x928>)
 800285e:	5c9a      	ldrb	r2, [r3, r2]
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <sampling+0x924>)
 8002862:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002866:	4413      	add	r3, r2
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b3c      	ldr	r3, [pc, #240]	; (800295c <sampling+0x924>)
 800286c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		// --------------------- sampler
		uint8_t pos_divide=15;
 8002870:	230f      	movs	r3, #15
 8002872:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002876:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <sampling+0x92c>)
 8002878:	7a1b      	ldrb	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <sampling+0x854>
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <sampling+0x92c>)
 8002880:	7a1b      	ldrb	r3, [r3, #8]
 8002882:	461a      	mov	r2, r3
 8002884:	230f      	movs	r3, #15
 8002886:	4113      	asrs	r3, r2
 8002888:	f887 31c2 	strb.w	r3, [r7, #450]	; 0x1c2

		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <sampling+0x92c>)
 800288e:	791b      	ldrb	r3, [r3, #4]
 8002890:	4619      	mov	r1, r3
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <sampling+0x904>)
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 800289a:	4013      	ands	r3, r2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	4299      	cmp	r1, r3
 80028a2:	d102      	bne.n	80028aa <sampling+0x872>
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <sampling+0x92c>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <sampling+0x92c>)
 80028ac:	795b      	ldrb	r3, [r3, #5]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4b22      	ldr	r3, [pc, #136]	; (800293c <sampling+0x904>)
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80028b8:	4013      	ands	r3, r2
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	3301      	adds	r3, #1
 80028be:	4299      	cmp	r1, r3
 80028c0:	d102      	bne.n	80028c8 <sampling+0x890>
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <sampling+0x92c>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80028c8:	4b26      	ldr	r3, [pc, #152]	; (8002964 <sampling+0x92c>)
 80028ca:	799b      	ldrb	r3, [r3, #6]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4b1b      	ldr	r3, [pc, #108]	; (800293c <sampling+0x904>)
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80028d6:	4013      	ands	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	4299      	cmp	r1, r3
 80028de:	d102      	bne.n	80028e6 <sampling+0x8ae>
 80028e0:	4b20      	ldr	r3, [pc, #128]	; (8002964 <sampling+0x92c>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80028e6:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <sampling+0x92c>)
 80028e8:	79db      	ldrb	r3, [r3, #7]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <sampling+0x904>)
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	f897 31c2 	ldrb.w	r3, [r7, #450]	; 0x1c2
 80028f4:	4013      	ands	r3, r2
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	4299      	cmp	r1, r3
 80028fc:	d102      	bne.n	8002904 <sampling+0x8cc>
 80028fe:	4b19      	ldr	r3, [pc, #100]	; (8002964 <sampling+0x92c>)
 8002900:	2201      	movs	r2, #1
 8002902:	819a      	strh	r2, [r3, #12]
		if(sampler.trigger_position) note[3].position=1;
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <sampling+0x92c>)
 8002906:	899b      	ldrh	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <sampling+0x8dc>
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <sampling+0x924>)
 800290e:	2201      	movs	r2, #1
 8002910:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

		patch_target_replace();
 8002914:	f7fe feaa 	bl	800166c <patch_target_replace>
		uint8_t detune_temp=0;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <sampling+0x930>)
 8002920:	2200      	movs	r2, #0
 8002922:	801a      	strh	r2, [r3, #0]
		uint8_t note_number;
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002924:	2300      	movs	r3, #0
 8002926:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 800292a:	e0c4      	b.n	8002ab6 <sampling+0xa7e>
 800292c:	2000984a 	.word	0x2000984a
 8002930:	20009848 	.word	0x20009848
 8002934:	2000ec40 	.word	0x2000ec40
 8002938:	2000ec41 	.word	0x2000ec41
 800293c:	2000dc84 	.word	0x2000dc84
 8002940:	200095e0 	.word	0x200095e0
 8002944:	200093e0 	.word	0x200093e0
 8002948:	2000c088 	.word	0x2000c088
 800294c:	2000c05c 	.word	0x2000c05c
 8002950:	20009840 	.word	0x20009840
 8002954:	20010e6d 	.word	0x20010e6d
 8002958:	200120fc 	.word	0x200120fc
 800295c:	20008e10 	.word	0x20008e10
 8002960:	20010c48 	.word	0x20010c48
 8002964:	20008ebc 	.word	0x20008ebc
 8002968:	2000a858 	.word	0x2000a858
   // note[0].tuned=7181;
  //  detune_temp=(note[mask_i].pitch+(note[mask_i].detune))&31    ;
	//	if(detune_temp>27) detune_temp=27;


		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 800296c:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002970:	492f      	ldr	r1, [pc, #188]	; (8002a30 <sampling+0x9f8>)
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	440b      	add	r3, r1
 800297c:	3302      	adds	r3, #2
 800297e:	7819      	ldrb	r1, [r3, #0]
 8002980:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002984:	482a      	ldr	r0, [pc, #168]	; (8002a30 <sampling+0x9f8>)
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4403      	add	r3, r0
 8002990:	3308      	adds	r3, #8
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	440b      	add	r3, r1
 8002996:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 800299a:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 800299e:	2b3c      	cmp	r3, #60	; 0x3c
 80029a0:	d902      	bls.n	80029a8 <sampling+0x970>
 80029a2:	233c      	movs	r3, #60	; 0x3c
 80029a4:	f887 31c1 	strb.w	r3, [r7, #449]	; 0x1c1
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 80029a8:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 80029ac:	2b1e      	cmp	r3, #30
 80029ae:	d907      	bls.n	80029c0 <sampling+0x988>
 80029b0:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 80029b4:	3b1f      	subs	r3, #31
 80029b6:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <sampling+0x9fc>)
 80029b8:	5cd3      	ldrb	r3, [r2, r3]
 80029ba:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
 80029be:	e005      	b.n	80029cc <sampling+0x994>
	else note_number=MajorNote[detune_temp];
 80029c0:	f897 31c1 	ldrb.w	r3, [r7, #449]	; 0x1c1
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <sampling+0xa00>)
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	f887 31c0 	strb.w	r3, [r7, #448]	; 0x1c0
		    note[mask_i].tuned=sample_Noteadd[note_number];
 80029cc:	f897 31c0 	ldrb.w	r3, [r7, #448]	; 0x1c0
 80029d0:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 80029d4:	4919      	ldr	r1, [pc, #100]	; (8002a3c <sampling+0xa04>)
 80029d6:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80029da:	4915      	ldr	r1, [pc, #84]	; (8002a30 <sampling+0x9f8>)
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	440b      	add	r3, r1
 80029e6:	330c      	adds	r3, #12
 80029e8:	4602      	mov	r2, r0
 80029ea:	801a      	strh	r2, [r3, #0]
	if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 80029ec:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 80029f0:	490f      	ldr	r1, [pc, #60]	; (8002a30 <sampling+0x9f8>)
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	3307      	adds	r3, #7
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d021      	beq.n	8002a48 <sampling+0xa10>
 8002a04:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002a08:	4909      	ldr	r1, [pc, #36]	; (8002a30 <sampling+0x9f8>)
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	440b      	add	r3, r1
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <sampling+0xa10>
 8002a1a:	f897 21c0 	ldrb.w	r2, [r7, #448]	; 0x1c0
 8002a1e:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002a22:	330f      	adds	r3, #15
 8002a24:	4906      	ldr	r1, [pc, #24]	; (8002a40 <sampling+0xa08>)
 8002a26:	5c89      	ldrb	r1, [r1, r2]
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <sampling+0xa0c>)
 8002a2a:	54d1      	strb	r1, [r2, r3]
 8002a2c:	e012      	b.n	8002a54 <sampling+0xa1c>
 8002a2e:	bf00      	nop
 8002a30:	20008e10 	.word	0x20008e10
 8002a34:	0800e890 	.word	0x0800e890
 8002a38:	0800e870 	.word	0x0800e870
 8002a3c:	0800e8b0 	.word	0x0800e8b0
 8002a40:	0800e830 	.word	0x0800e830
 8002a44:	20012084 	.word	0x20012084
 8002a48:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002a4c:	330f      	adds	r3, #15
 8002a4e:	4a94      	ldr	r2, [pc, #592]	; (8002ca0 <sampling+0xc68>)
 8002a50:	215f      	movs	r1, #95	; 0x5f
 8002a52:	54d1      	strb	r1, [r2, r3]
	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002a54:	f897 21c7 	ldrb.w	r2, [r7, #455]	; 0x1c7
 8002a58:	4992      	ldr	r1, [pc, #584]	; (8002ca4 <sampling+0xc6c>)
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	440b      	add	r3, r1
 8002a64:	330c      	adds	r3, #12
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a70:	edc7 7a5b 	vstr	s15, [r7, #364]	; 0x16c
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002a74:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8002a78:	f7fd fe44 	bl	8000704 <__aeabi_f2d>
 8002a7c:	a386      	add	r3, pc, #536	; (adr r3, 8002c98 <sampling+0xc60>)
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	f7fd fbb1 	bl	80001e8 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	f897 41c7 	ldrb.w	r4, [r7, #455]	; 0x1c7
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fd fe8f 	bl	80007b4 <__aeabi_d2uiz>
 8002a96:	4603      	mov	r3, r0
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	4a82      	ldr	r2, [pc, #520]	; (8002ca4 <sampling+0xc6c>)
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1b1b      	subs	r3, r3, r4
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	460a      	mov	r2, r1
 8002aaa:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002aac:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
 8002ab6:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	f67f af56 	bls.w	800296c <sampling+0x934>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002ac0:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <sampling+0xc70>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <sampling+0xa9c>
	{
	    LFO_square_one_pulse();
 8002acc:	f000 fe7a 	bl	80037c4 <LFO_square_one_pulse>

		LFO_source_synced();
 8002ad0:	f000 ff1e 	bl	8003910 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <sampling+0xc70>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	4b72      	ldr	r3, [pc, #456]	; (8002ca8 <sampling+0xc70>)
 8002ade:	801a      	strh	r2, [r3, #0]
 8002ae0:	4b71      	ldr	r3, [pc, #452]	; (8002ca8 <sampling+0xc70>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae8:	f4ff add8 	bcc.w	800269c <sampling+0x664>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002aec:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002af0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002af4:	4a6d      	ldr	r2, [pc, #436]	; (8002cac <sampling+0xc74>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	4611      	mov	r1, r2
 8002afa:	2350      	movs	r3, #80	; 0x50
 8002afc:	461a      	mov	r2, r3
 8002afe:	f00a f925 	bl	800cd4c <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002b02:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <sampling+0xc6c>)
 8002b04:	899a      	ldrh	r2, [r3, #12]
 8002b06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002b10:	4b64      	ldr	r3, [pc, #400]	; (8002ca4 <sampling+0xc6c>)
 8002b12:	8b5a      	ldrh	r2, [r3, #26]
 8002b14:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <sampling+0xc6c>)
 8002b20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8002b22:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002b2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ca4 <sampling+0xc6c>)
 8002b30:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8002b32:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002b3a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002b3e:	4b5c      	ldr	r3, [pc, #368]	; (8002cb0 <sampling+0xc78>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <sampling+0xc78>)
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <sampling+0xc78>)
 8002b54:	829a      	strh	r2, [r3, #20]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <sampling+0xc78>)
 8002b58:	789b      	ldrb	r3, [r3, #2]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <sampling+0xc78>)
 8002b62:	78db      	ldrb	r3, [r3, #3]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	4413      	add	r3, r2
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <sampling+0xc78>)
 8002b6c:	82da      	strh	r2, [r3, #22]

	sine_ptr_temp[0]=&sine_counter[3];
 8002b6e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b72:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b76:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <sampling+0xc7c>)
 8002b78:	601a      	str	r2, [r3, #0]
	sine_ptr_temp[1]=&sine_counter[6];
 8002b7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b82:	4a4d      	ldr	r2, [pc, #308]	; (8002cb8 <sampling+0xc80>)
 8002b84:	605a      	str	r2, [r3, #4]
	sine_ptr_temp[2]=&sine_counter[9];
 8002b86:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b8a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b8e:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <sampling+0xc84>)
 8002b90:	609a      	str	r2, [r3, #8]
	sine_ptr_temp[3]=&sine_counter[12];
 8002b92:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002b96:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002b9a:	4a49      	ldr	r2, [pc, #292]	; (8002cc0 <sampling+0xc88>)
 8002b9c:	60da      	str	r2, [r3, #12]

	    // does go out of time , likely skipping samples
	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002b9e:	4b44      	ldr	r3, [pc, #272]	; (8002cb0 <sampling+0xc78>)
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <sampling+0xc78>)
 8002ba4:	789b      	ldrb	r3, [r3, #2]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d902      	bls.n	8002bb0 <sampling+0xb78>
 8002baa:	4b41      	ldr	r3, [pc, #260]	; (8002cb0 <sampling+0xc78>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <sampling+0xc78>)
 8002bb2:	8c1a      	ldrh	r2, [r3, #32]
 8002bb4:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <sampling+0xc78>)
 8002bb6:	8a9b      	ldrh	r3, [r3, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d203      	bcs.n	8002bc4 <sampling+0xb8c>
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <sampling+0xc78>)
 8002bbe:	8a9a      	ldrh	r2, [r3, #20]
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <sampling+0xc78>)
 8002bc2:	841a      	strh	r2, [r3, #32]
	if ((sampler.ram_seq)>=sampler.end)     {sampler.ram_seq=sampler.start; note[3].position=0;}      // just for playback counter
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <sampling+0xc78>)
 8002bc6:	8c1a      	ldrh	r2, [r3, #32]
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <sampling+0xc78>)
 8002bca:	8adb      	ldrh	r3, [r3, #22]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d307      	bcc.n	8002be0 <sampling+0xba8>
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <sampling+0xc78>)
 8002bd2:	8a9a      	ldrh	r2, [r3, #20]
 8002bd4:	4b36      	ldr	r3, [pc, #216]	; (8002cb0 <sampling+0xc78>)
 8002bd6:	841a      	strh	r2, [r3, #32]
 8002bd8:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <sampling+0xc6c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	sampler.length=sampler.end-sampler.start;
 8002be0:	4b33      	ldr	r3, [pc, #204]	; (8002cb0 <sampling+0xc78>)
 8002be2:	8ada      	ldrh	r2, [r3, #22]
 8002be4:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <sampling+0xc78>)
 8002be6:	8a9b      	ldrh	r3, [r3, #20]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <sampling+0xc78>)
 8002bee:	831a      	strh	r2, [r3, #24]

	if(sampler.trigger_position )  { sampler.ram_seq=sampler.start; }   // starts her not perfect , figure out better
 8002bf0:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <sampling+0xc78>)
 8002bf2:	899b      	ldrh	r3, [r3, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <sampling+0xbc8>
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	; (8002cb0 <sampling+0xc78>)
 8002bfa:	8a9a      	ldrh	r2, [r3, #20]
 8002bfc:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <sampling+0xc78>)
 8002bfe:	841a      	strh	r2, [r3, #32]



//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002c00:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002c04:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c08:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <sampling+0xc8c>)
 8002c0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c0e:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002c12:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002c16:	2210      	movs	r2, #16
 8002c18:	492b      	ldr	r1, [pc, #172]	; (8002cc8 <sampling+0xc90>)
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f00a f896 	bl	800cd4c <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <sampling+0xc94>)
 8002c22:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
*/



	if(counter_16>64) counter_16=0;
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <sampling+0xc98>)
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d902      	bls.n	8002c34 <sampling+0xbfc>
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <sampling+0xc98>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	801a      	strh	r2, [r3, #0]

	  uint32_t sample_flash_address=(254<<16)+((128+counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well
 8002c34:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <sampling+0xc98>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	3380      	adds	r3, #128	; 0x80
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8002c40:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c


	 sample_flash_address=((sampler.sample_select*127)<<8)+(sampler.ram_seq*2);  //let see , limited now with a 1k byte delay
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <sampling+0xc78>)
 8002c46:	7a9b      	ldrb	r3, [r3, #10]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	01db      	lsls	r3, r3, #7
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <sampling+0xc78>)
 8002c54:	8c1b      	ldrh	r3, [r3, #32]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

   sampler_1k_load(sample_flash_address);
 8002c5e:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 8002c62:	f002 f823 	bl	8004cac <sampler_1k_load>
	//if((sampler.ram_seq&255)==0)	  sampler_1k_load(sample_flash_address);

	counter_16=counter_16+2;   // jump 512 bytes
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <sampling+0xc98>)
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <sampling+0xc98>)
 8002c70:	801a      	strh	r2, [r3, #0]
	//    if (sampler.ram_seq>14000) memcpy(&error_data,flash_read_block2,127);

	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <sampling+0xc9c>)
 8002c74:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	uint16_t* sample_ptr= &flash_read_block;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <sampling+0xc94>)
 8002c7a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	if(RAM_looper>=16127) RAM_looper=0;
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <sampling+0xca0>)
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	f643 62fe 	movw	r2, #16126	; 0x3efe
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d902      	bls.n	8002c90 <sampling+0xc58>
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <sampling+0xca0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	801a      	strh	r2, [r3, #0]
	int32_t   sample_adc_temp;
//	if ((sampler.ram_seq&255)==0)  ram_ptr=  &flash_read_block[128];

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <sampling+0xc70>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	801a      	strh	r2, [r3, #0]
 8002c96:	e280      	b.n	800319a <sampling+0x1162>
 8002c98:	7ae147ae 	.word	0x7ae147ae
 8002c9c:	3fefae14 	.word	0x3fefae14
 8002ca0:	20012084 	.word	0x20012084
 8002ca4:	20008e10 	.word	0x20008e10
 8002ca8:	2000984a 	.word	0x2000984a
 8002cac:	2000937c 	.word	0x2000937c
 8002cb0:	20008ebc 	.word	0x20008ebc
 8002cb4:	200097ec 	.word	0x200097ec
 8002cb8:	200097f8 	.word	0x200097f8
 8002cbc:	20009804 	.word	0x20009804
 8002cc0:	20009810 	.word	0x20009810
 8002cc4:	200093cc 	.word	0x200093cc
 8002cc8:	2000c060 	.word	0x2000c060
 8002ccc:	20012104 	.word	0x20012104
 8002cd0:	20012720 	.word	0x20012720
 8002cd4:	200001ac 	.word	0x200001ac
 8002cd8:	20012732 	.word	0x20012732
	i_total=i+sample_pointB;
 8002cdc:	4bca      	ldr	r3, [pc, #808]	; (8003008 <sampling+0xfd0>)
 8002cde:	881a      	ldrh	r2, [r3, #0]
 8002ce0:	4bca      	ldr	r3, [pc, #808]	; (800300c <sampling+0xfd4>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
	sampling_position=(i>>6);
 8002cea:	4bc7      	ldr	r3, [pc, #796]	; (8003008 <sampling+0xfd0>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4bc6      	ldr	r3, [pc, #792]	; (8003010 <sampling+0xfd8>)
 8002cf6:	701a      	strb	r2, [r3, #0]


	sample_adc_temp=input_holder[i>>1];
 8002cf8:	4bc3      	ldr	r3, [pc, #780]	; (8003008 <sampling+0xfd0>)
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	4bc4      	ldr	r3, [pc, #784]	; (8003014 <sampling+0xfdc>)
 8002d04:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002d08:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 8002d0c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d10:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d14:	3b7f      	subs	r3, #127	; 0x7f
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	sample_adc=(sample_adc_temp+sample_adc)>>1;
 8002d1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002d20:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002d24:	4413      	add	r3, r2
 8002d26:	105b      	asrs	r3, r3, #1
 8002d28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	   ram_temp=*(ram_ptr+RAM_looper);    // works
 8002d2c:	4bba      	ldr	r3, [pc, #744]	; (8003018 <sampling+0xfe0>)
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	//   sample_loop_input= *(sample_ptr+(RAM_looper&255));

	  // sample_loop_input=  ( sample_loop_input-32767)<<4;


	   debug_value=ram_temp;
 8002d3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4a:	4bb4      	ldr	r3, [pc, #720]	; (800301c <sampling+0xfe4>)
 8002d4c:	edc3 7a00 	vstr	s15, [r3]
	ram_temp=(ram_temp-32767)<<4;
 8002d50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002d54:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d58:	3b7f      	subs	r3, #127	; 0x7f
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100


	sample_input=*(sample_ptr+(sampler.ram_seq&255));
 8002d60:	4baf      	ldr	r3, [pc, #700]	; (8003020 <sampling+0xfe8>)
 8002d62:	8c1b      	ldrh	r3, [r3, #32]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d6c:	4413      	add	r3, r2
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d7a:	601a      	str	r2, [r3, #0]
	sample_input=(sample_input-32767)<<4;
 8002d7c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d8a:	3b7f      	subs	r3, #127	; 0x7f
 8002d8c:	011a      	lsls	r2, r3, #4
 8002d8e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002d92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d96:	601a      	str	r2, [r3, #0]

	if	((i&1)==1)  {sampler.ram_seq=sampler.ram_seq+1; RAM_looper++; } // half speed
 8002d98:	4b9b      	ldr	r3, [pc, #620]	; (8003008 <sampling+0xfd0>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <sampling+0xd84>
 8002da4:	4b9e      	ldr	r3, [pc, #632]	; (8003020 <sampling+0xfe8>)
 8002da6:	8c1b      	ldrh	r3, [r3, #32]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	4b9c      	ldr	r3, [pc, #624]	; (8003020 <sampling+0xfe8>)
 8002dae:	841a      	strh	r2, [r3, #32]
 8002db0:	4b99      	ldr	r3, [pc, #612]	; (8003018 <sampling+0xfe0>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b97      	ldr	r3, [pc, #604]	; (8003018 <sampling+0xfe0>)
 8002dba:	801a      	strh	r2, [r3, #0]



	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002dbc:	4b92      	ldr	r3, [pc, #584]	; (8003008 <sampling+0xfd0>)
 8002dbe:	881a      	ldrh	r2, [r3, #0]
 8002dc0:	4b98      	ldr	r3, [pc, #608]	; (8003024 <sampling+0xfec>)
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d129      	bne.n	8002e1c <sampling+0xde4>
 8002dc8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dcc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dd0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002dd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dd6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002ddc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002de0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002de4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002de6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002dea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002df0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002df4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002df8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002dfc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e00:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e04:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002e06:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e0a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e0e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002e12:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8002e16:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e1a:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002e1c:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <sampling+0xfd0>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f040 8095 	bne.w	8002f54 <sampling+0xf1c>
	  //  LFO_source_new(); // calculate lfo maybe 8 times for now
	    patch_target_replace();    // update values , not too bad
 8002e2a:	f7fe fc1f 	bl	800166c <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002e2e:	4b7e      	ldr	r3, [pc, #504]	; (8003028 <sampling+0xff0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fc54 	bl	80006e0 <__aeabi_i2d>
 8002e38:	a36f      	add	r3, pc, #444	; (adr r3, 8002ff8 <sampling+0xfc0>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd f9d3 	bl	80001e8 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4610      	mov	r0, r2
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f7fd fcd3 	bl	80007f4 <__aeabi_d2f>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	ee00 3a10 	vmov	s0, r3
 8002e54:	f009 ff08 	bl	800cc68 <arm_sin_f32>
 8002e58:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <sampling+0xfd8>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e64:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e6c:	4a6f      	ldr	r2, [pc, #444]	; (800302c <sampling+0xff4>)
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002e76:	4b6c      	ldr	r3, [pc, #432]	; (8003028 <sampling+0xff0>)
 8002e78:	7a1b      	ldrb	r3, [r3, #8]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fc30 	bl	80006e0 <__aeabi_i2d>
 8002e80:	a35f      	add	r3, pc, #380	; (adr r3, 8003000 <sampling+0xfc8>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	f7fd f9af 	bl	80001e8 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	f7fd fcaf 	bl	80007f4 <__aeabi_d2f>
 8002e96:	4603      	mov	r3, r0
 8002e98:	ee00 3a10 	vmov	s0, r3
 8002e9c:	f009 fee4 	bl	800cc68 <arm_sin_f32>
 8002ea0:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8002ea4:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <sampling+0xfd8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002eac:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb4:	4a5d      	ldr	r2, [pc, #372]	; (800302c <sampling+0xff4>)
 8002eb6:	3309      	adds	r3, #9
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8002ec0:	4b59      	ldr	r3, [pc, #356]	; (8003028 <sampling+0xff0>)
 8002ec2:	7c1b      	ldrb	r3, [r3, #16]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fc0b 	bl	80006e0 <__aeabi_i2d>
 8002eca:	a34d      	add	r3, pc, #308	; (adr r3, 8003000 <sampling+0xfc8>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd f98a 	bl	80001e8 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fd fc8a 	bl	80007f4 <__aeabi_d2f>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	ee00 3a10 	vmov	s0, r3
 8002ee6:	f009 febf 	bl	800cc68 <arm_sin_f32>
 8002eea:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8002eee:	4b48      	ldr	r3, [pc, #288]	; (8003010 <sampling+0xfd8>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ef6:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efe:	4a4b      	ldr	r2, [pc, #300]	; (800302c <sampling+0xff4>)
 8002f00:	3312      	adds	r3, #18
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8002f0a:	4b47      	ldr	r3, [pc, #284]	; (8003028 <sampling+0xff0>)
 8002f0c:	7e1b      	ldrb	r3, [r3, #24]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fbe6 	bl	80006e0 <__aeabi_i2d>
 8002f14:	a33a      	add	r3, pc, #232	; (adr r3, 8003000 <sampling+0xfc8>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd f965 	bl	80001e8 <__aeabi_dmul>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f7fd fc65 	bl	80007f4 <__aeabi_d2f>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	ee00 3a10 	vmov	s0, r3
 8002f30:	f009 fe9a 	bl	800cc68 <arm_sin_f32>
 8002f34:	ed87 0a62 	vstr	s0, [r7, #392]	; 0x188
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 8002f38:	4b35      	ldr	r3, [pc, #212]	; (8003010 <sampling+0xfd8>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f40:	edd7 7a62 	vldr	s15, [r7, #392]	; 0x188
 8002f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f48:	4a38      	ldr	r2, [pc, #224]	; (800302c <sampling+0xff4>)
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	edc3 7a00 	vstr	s15, [r3]

	}

		sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  // normal adder full volume
 8002f54:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f58:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002f5c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002f60:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8002f62:	4413      	add	r3, r2
 8002f64:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 8002f68:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002f6c:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002f70:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002f74:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8002f76:	4413      	add	r3, r2
 8002f78:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 8002f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f80:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002f84:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002f88:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 8002f90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f94:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002f98:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002f9c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

			if (sample_accus[0]>524287) sample_accus[0] =-0-sample_accus[0] ; // faster >  than &  ,strange,  or is even worse
 8002fa4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002fa8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fac:	db04      	blt.n	8002fb8 <sampling+0xf80>
 8002fae:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
			if (sample_accus[1]>524287) sample_accus[1] =-0-sample_accus[1] ; // faster >  than &  ,strange
 8002fb8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002fbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fc0:	db04      	blt.n	8002fcc <sampling+0xf94>
 8002fc2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002fc6:	425b      	negs	r3, r3
 8002fc8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			if (sample_accus[2]>524287) sample_accus[2] =-0-sample_accus[2] ; //
 8002fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fd4:	db04      	blt.n	8002fe0 <sampling+0xfa8>
 8002fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fda:	425b      	negs	r3, r3
 8002fdc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			if (sample_accus[3]>524287) sample_accus[3] =-0-sample_accus[3] ; //  6 cycles
 8002fe0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fe4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fe8:	db22      	blt.n	8003030 <sampling+0xff8>
 8002fea:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002fee:	425b      	negs	r3, r3
 8002ff0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ff4:	e01c      	b.n	8003030 <sampling+0xff8>
 8002ff6:	bf00      	nop
 8002ff8:	f9378ee3 	.word	0xf9378ee3
 8002ffc:	3f793a2d 	.word	0x3f793a2d
 8003000:	bc6a7efa 	.word	0xbc6a7efa
 8003004:	3f789374 	.word	0x3f789374
 8003008:	2000984a 	.word	0x2000984a
 800300c:	20009848 	.word	0x20009848
 8003010:	2000ec40 	.word	0x2000ec40
 8003014:	2000ca40 	.word	0x2000ca40
 8003018:	20012732 	.word	0x20012732
 800301c:	20012100 	.word	0x20012100
 8003020:	20008ebc 	.word	0x20008ebc
 8003024:	200120fc 	.word	0x200120fc
 8003028:	20008e9c 	.word	0x20008e9c
 800302c:	2000c118 	.word	0x2000c118

			sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8003030:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003034:	2b00      	cmp	r3, #0
 8003036:	bfb8      	it	lt
 8003038:	425b      	neglt	r3, r3
 800303a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
			sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8003044:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8003048:	2b00      	cmp	r3, #0
 800304a:	bfb8      	it	lt
 800304c:	425b      	neglt	r3, r3
 800304e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
			sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8003058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800305c:	2b00      	cmp	r3, #0
 800305e:	bfb8      	it	lt
 8003060:	425b      	neglt	r3, r3
 8003062:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 800306c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003070:	2b00      	cmp	r3, #0
 8003072:	bfb8      	it	lt
 8003074:	425b      	neglt	r3, r3
 8003076:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

					sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
 8003080:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003084:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5b      	ldr	r2, [pc, #364]	; (80031fc <sampling+0x11c4>)
 800308e:	79d2      	ldrb	r2, [r2, #7]
 8003090:	fb02 f303 	mul.w	r3, r2, r3
 8003094:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp2=(sample_temp1)>>2;
 8003098:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800309c:	109b      	asrs	r3, r3, #2
 800309e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

					sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 80030a2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80030a6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a53      	ldr	r2, [pc, #332]	; (80031fc <sampling+0x11c4>)
 80030b0:	7d52      	ldrb	r2, [r2, #21]
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp3=sample_temp1>>2; // 20+8
 80030ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030be:	109b      	asrs	r3, r3, #2
 80030c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c


					sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 80030c4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80030c8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a4a      	ldr	r2, [pc, #296]	; (80031fc <sampling+0x11c4>)
 80030d2:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 80030de:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80030e2:	109b      	asrs	r3, r3, #2
 80030e4:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

					if (note[3].position) {sample_Accu[9]=sample_input;sample_Accu[8]=sample_input;sample_Accu[7]=sample_input;sample_Accu[6]=sample_input;}
 80030e8:	4b44      	ldr	r3, [pc, #272]	; (80031fc <sampling+0x11c4>)
 80030ea:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01b      	beq.n	800312a <sampling+0x10f2>
 80030f2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80030f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003100:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003104:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800310e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003112:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800311c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8003120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 800312a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800312e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a31      	ldr	r2, [pc, #196]	; (80031fc <sampling+0x11c4>)
 8003138:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 800313c:	fb02 f303 	mul.w	r3, r2, r3
 8003140:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
					sample_temp5 =sample_temp1>>2;
 8003144:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003148:	109b      	asrs	r3, r3, #2
 800314a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

	play_holder0[i]=sample_temp2;  // write to bank
 800314e:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <sampling+0x11c8>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <sampling+0x11cc>)
 8003156:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800315a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 800315e:	4b28      	ldr	r3, [pc, #160]	; (8003200 <sampling+0x11c8>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	4619      	mov	r1, r3
 8003164:	4a28      	ldr	r2, [pc, #160]	; (8003208 <sampling+0x11d0>)
 8003166:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800316a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 800316e:	4b24      	ldr	r3, [pc, #144]	; (8003200 <sampling+0x11c8>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	4a25      	ldr	r2, [pc, #148]	; (800320c <sampling+0x11d4>)
 8003176:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800317a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <sampling+0x11c8>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <sampling+0x11d8>)
 8003186:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800318a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800318e:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <sampling+0x11c8>)
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <sampling+0x11c8>)
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	4b19      	ldr	r3, [pc, #100]	; (8003200 <sampling+0x11c8>)
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a2:	f4ff ad9b 	bcc.w	8002cdc <sampling+0xca4>
	} // end of osc , doing some sound

						    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on
 80031a6:	4b15      	ldr	r3, [pc, #84]	; (80031fc <sampling+0x11c4>)
 80031a8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <sampling+0x1184>
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <sampling+0x11dc>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031b8:	4a16      	ldr	r2, [pc, #88]	; (8003214 <sampling+0x11dc>)
 80031ba:	6253      	str	r3, [r2, #36]	; 0x24

    memcpy(&sample_accus_hold,sample_accus,16);
 80031bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80031c0:	2210      	movs	r2, #16
 80031c2:	4619      	mov	r1, r3
 80031c4:	4814      	ldr	r0, [pc, #80]	; (8003218 <sampling+0x11e0>)
 80031c6:	f009 fdc1 	bl	800cd4c <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 80031ca:	4914      	ldr	r1, [pc, #80]	; (800321c <sampling+0x11e4>)
 80031cc:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031d0:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 80031d4:	460b      	mov	r3, r1
 80031d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031da:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 80031de:	4a10      	ldr	r2, [pc, #64]	; (8003220 <sampling+0x11e8>)
 80031e0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80031e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031e8:	4610      	mov	r0, r2
 80031ea:	4619      	mov	r1, r3
 80031ec:	2350      	movs	r3, #80	; 0x50
 80031ee:	461a      	mov	r2, r3
 80031f0:	f009 fdac 	bl	800cd4c <memcpy>
    int32_t filter_Accu2;

    //uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <sampling+0x11c8>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	e2b0      	b.n	800375e <sampling+0x1726>
 80031fc:	20008e10 	.word	0x20008e10
 8003200:	2000984a 	.word	0x2000984a
 8003204:	20010444 	.word	0x20010444
 8003208:	2000ec44 	.word	0x2000ec44
 800320c:	2000f444 	.word	0x2000f444
 8003210:	2000fc44 	.word	0x2000fc44
 8003214:	200097e0 	.word	0x200097e0
 8003218:	2000c060 	.word	0x2000c060
 800321c:	200093cc 	.word	0x200093cc
 8003220:	2000937c 	.word	0x2000937c
				i_total=i+sample_pointB;
 8003224:	4bbd      	ldr	r3, [pc, #756]	; (800351c <sampling+0x14e4>)
 8003226:	881a      	ldrh	r2, [r3, #0]
 8003228:	4bbd      	ldr	r3, [pc, #756]	; (8003520 <sampling+0x14e8>)
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	4413      	add	r3, r2
 800322e:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192

			sampling_position=(i>>6);
 8003232:	4bba      	ldr	r3, [pc, #744]	; (800351c <sampling+0x14e4>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	b29b      	uxth	r3, r3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	4bb9      	ldr	r3, [pc, #740]	; (8003524 <sampling+0x14ec>)
 800323e:	701a      	strb	r2, [r3, #0]
			// filter 1
			if (		(note_toggler[i>>5]	)==(1<<(i&31)	)) 				{ADSR[0].attack_trigger =0;  trigger_counter++; trigger_counter=trigger_counter&1023  ;}
 8003240:	4bb6      	ldr	r3, [pc, #728]	; (800351c <sampling+0x14e4>)
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800324e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003256:	4ab1      	ldr	r2, [pc, #708]	; (800351c <sampling+0x14e4>)
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	f002 021f 	and.w	r2, r2, #31
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	4293      	cmp	r3, r2
 8003266:	d10f      	bne.n	8003288 <sampling+0x1250>
 8003268:	4baf      	ldr	r3, [pc, #700]	; (8003528 <sampling+0x14f0>)
 800326a:	2200      	movs	r2, #0
 800326c:	711a      	strb	r2, [r3, #4]
 800326e:	4baf      	ldr	r3, [pc, #700]	; (800352c <sampling+0x14f4>)
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	4bad      	ldr	r3, [pc, #692]	; (800352c <sampling+0x14f4>)
 8003278:	801a      	strh	r2, [r3, #0]
 800327a:	4bac      	ldr	r3, [pc, #688]	; (800352c <sampling+0x14f4>)
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003282:	b29a      	uxth	r2, r3
 8003284:	4ba9      	ldr	r3, [pc, #676]	; (800352c <sampling+0x14f4>)
 8003286:	801a      	strh	r2, [r3, #0]

			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 8003288:	4ba4      	ldr	r3, [pc, #656]	; (800351c <sampling+0x14e4>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4ba8      	ldr	r3, [pc, #672]	; (8003530 <sampling+0x14f8>)
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003298:	4ba0      	ldr	r3, [pc, #640]	; (800351c <sampling+0x14e4>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80032a4:	49a3      	ldr	r1, [pc, #652]	; (8003534 <sampling+0x14fc>)
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 80032aa:	4b9c      	ldr	r3, [pc, #624]	; (800351c <sampling+0x14e4>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4ba1      	ldr	r3, [pc, #644]	; (8003538 <sampling+0x1500>)
 80032b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032ba:	4b98      	ldr	r3, [pc, #608]	; (800351c <sampling+0x14e4>)
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80032c6:	499d      	ldr	r1, [pc, #628]	; (800353c <sampling+0x1504>)
 80032c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 80032cc:	4b93      	ldr	r3, [pc, #588]	; (800351c <sampling+0x14e4>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b9b      	ldr	r3, [pc, #620]	; (8003540 <sampling+0x1508>)
 80032d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032dc:	4b8f      	ldr	r3, [pc, #572]	; (800351c <sampling+0x14e4>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80032e8:	4996      	ldr	r1, [pc, #600]	; (8003544 <sampling+0x150c>)
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 80032ee:	4b8b      	ldr	r3, [pc, #556]	; (800351c <sampling+0x14e4>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b94      	ldr	r3, [pc, #592]	; (8003548 <sampling+0x1510>)
 80032f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032fe:	4b87      	ldr	r3, [pc, #540]	; (800351c <sampling+0x14e4>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800330a:	4990      	ldr	r1, [pc, #576]	; (800354c <sampling+0x1514>)
 800330c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 8003310:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <sampling+0x1518>)
 8003312:	789b      	ldrb	r3, [r3, #2]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <sampling+0x1306>
 8003318:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800331c:	105a      	asrs	r2, r3, #1
 800331e:	4b7f      	ldr	r3, [pc, #508]	; (800351c <sampling+0x14e4>)
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	4619      	mov	r1, r3
 8003324:	4b8a      	ldr	r3, [pc, #552]	; (8003550 <sampling+0x1518>)
 8003326:	789b      	ldrb	r3, [r3, #2]
 8003328:	1acb      	subs	r3, r1, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	4980      	ldr	r1, [pc, #512]	; (8003534 <sampling+0x14fc>)
 8003332:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003336:	105b      	asrs	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 800333e:	4b84      	ldr	r3, [pc, #528]	; (8003550 <sampling+0x1518>)
 8003340:	7a9b      	ldrb	r3, [r3, #10]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d012      	beq.n	800336c <sampling+0x1334>
 8003346:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800334a:	105a      	asrs	r2, r3, #1
 800334c:	4b73      	ldr	r3, [pc, #460]	; (800351c <sampling+0x14e4>)
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <sampling+0x1518>)
 8003354:	7a9b      	ldrb	r3, [r3, #10]
 8003356:	1acb      	subs	r3, r1, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	4977      	ldr	r1, [pc, #476]	; (800353c <sampling+0x1504>)
 8003360:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003364:	105b      	asrs	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 800336c:	4b78      	ldr	r3, [pc, #480]	; (8003550 <sampling+0x1518>)
 800336e:	7c9b      	ldrb	r3, [r3, #18]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <sampling+0x1362>
 8003374:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003378:	105a      	asrs	r2, r3, #1
 800337a:	4b68      	ldr	r3, [pc, #416]	; (800351c <sampling+0x14e4>)
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	4619      	mov	r1, r3
 8003380:	4b73      	ldr	r3, [pc, #460]	; (8003550 <sampling+0x1518>)
 8003382:	7c9b      	ldrb	r3, [r3, #18]
 8003384:	1acb      	subs	r3, r1, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	496d      	ldr	r1, [pc, #436]	; (8003544 <sampling+0x150c>)
 800338e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003392:	105b      	asrs	r3, r3, #1
 8003394:	4413      	add	r3, r2
 8003396:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 800339a:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <sampling+0x1518>)
 800339c:	7e9b      	ldrb	r3, [r3, #26]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <sampling+0x1390>
 80033a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033a6:	105a      	asrs	r2, r3, #1
 80033a8:	4b5c      	ldr	r3, [pc, #368]	; (800351c <sampling+0x14e4>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	4b68      	ldr	r3, [pc, #416]	; (8003550 <sampling+0x1518>)
 80033b0:	7e9b      	ldrb	r3, [r3, #26]
 80033b2:	1acb      	subs	r3, r1, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	4964      	ldr	r1, [pc, #400]	; (800354c <sampling+0x1514>)
 80033bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033c0:	105b      	asrs	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 80033c8:	4b54      	ldr	r3, [pc, #336]	; (800351c <sampling+0x14e4>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <sampling+0x13a0>
 80033d4:	f000 fbe4 	bl	8003ba0 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 80033d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033dc:	ee07 3a90 	vmov	s15, r3
 80033e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e4:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <sampling+0x151c>)
 80033e6:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 80033ea:	4b5a      	ldr	r3, [pc, #360]	; (8003554 <sampling+0x151c>)
 80033ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80033f0:	4b58      	ldr	r3, [pc, #352]	; (8003554 <sampling+0x151c>)
 80033f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80033f6:	4b58      	ldr	r3, [pc, #352]	; (8003558 <sampling+0x1520>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003404:	4b53      	ldr	r3, [pc, #332]	; (8003554 <sampling+0x151c>)
 8003406:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 800340a:	4b52      	ldr	r3, [pc, #328]	; (8003554 <sampling+0x151c>)
 800340c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003410:	4b52      	ldr	r3, [pc, #328]	; (800355c <sampling+0x1524>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800341a:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <sampling+0x151c>)
 800341c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003420:	4b4e      	ldr	r3, [pc, #312]	; (800355c <sampling+0x1524>)
 8003422:	edd3 7a01 	vldr	s15, [r3, #4]
 8003426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800342a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342e:	4b49      	ldr	r3, [pc, #292]	; (8003554 <sampling+0x151c>)
 8003430:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 8003434:	4b47      	ldr	r3, [pc, #284]	; (8003554 <sampling+0x151c>)
 8003436:	ed93 7a02 	vldr	s14, [r3, #8]
 800343a:	4b48      	ldr	r3, [pc, #288]	; (800355c <sampling+0x1524>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003444:	4b43      	ldr	r3, [pc, #268]	; (8003554 <sampling+0x151c>)
 8003446:	edd3 6a03 	vldr	s13, [r3, #12]
 800344a:	4b44      	ldr	r3, [pc, #272]	; (800355c <sampling+0x1524>)
 800344c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003458:	4b3e      	ldr	r3, [pc, #248]	; (8003554 <sampling+0x151c>)
 800345a:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 800345e:	4b3d      	ldr	r3, [pc, #244]	; (8003554 <sampling+0x151c>)
 8003460:	edd3 7a03 	vldr	s15, [r3, #12]
 8003464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003468:	ee17 3a90 	vmov	r3, s15
 800346c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8003470:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003474:	ee07 3a90 	vmov	s15, r3
 8003478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347c:	4b35      	ldr	r3, [pc, #212]	; (8003554 <sampling+0x151c>)
 800347e:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 8003482:	4b34      	ldr	r3, [pc, #208]	; (8003554 <sampling+0x151c>)
 8003484:	ed93 7a04 	vldr	s14, [r3, #16]
 8003488:	4b32      	ldr	r3, [pc, #200]	; (8003554 <sampling+0x151c>)
 800348a:	edd3 6a06 	vldr	s13, [r3, #24]
 800348e:	4b32      	ldr	r3, [pc, #200]	; (8003558 <sampling+0x1520>)
 8003490:	edd3 7a01 	vldr	s15, [r3, #4]
 8003494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349c:	4b2d      	ldr	r3, [pc, #180]	; (8003554 <sampling+0x151c>)
 800349e:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 80034a2:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <sampling+0x151c>)
 80034a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <sampling+0x1524>)
 80034aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80034ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b2:	4b28      	ldr	r3, [pc, #160]	; (8003554 <sampling+0x151c>)
 80034b4:	edd3 6a05 	vldr	s13, [r3, #20]
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <sampling+0x1524>)
 80034ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80034be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <sampling+0x151c>)
 80034c8:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <sampling+0x151c>)
 80034ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <sampling+0x1524>)
 80034d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80034d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034dc:	4b1d      	ldr	r3, [pc, #116]	; (8003554 <sampling+0x151c>)
 80034de:	edd3 6a06 	vldr	s13, [r3, #24]
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <sampling+0x1524>)
 80034e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80034e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f0:	4b18      	ldr	r3, [pc, #96]	; (8003554 <sampling+0x151c>)
 80034f2:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <sampling+0x151c>)
 80034f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80034fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003500:	ee17 3a90 	vmov	r3, s15
 8003504:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		filter_accus[7]=sample_Accu[2];
 8003508:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800350c:	ee07 3a90 	vmov	s15, r3
 8003510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <sampling+0x151c>)
 8003516:	edc3 7a07 	vstr	s15, [r3, #28]
 800351a:	e021      	b.n	8003560 <sampling+0x1528>
 800351c:	2000984a 	.word	0x2000984a
 8003520:	20009848 	.word	0x20009848
 8003524:	2000ec40 	.word	0x2000ec40
 8003528:	2000d1f8 	.word	0x2000d1f8
 800352c:	2000c1a8 	.word	0x2000c1a8
 8003530:	20010444 	.word	0x20010444
 8003534:	20011e84 	.word	0x20011e84
 8003538:	2000ec44 	.word	0x2000ec44
 800353c:	20011f04 	.word	0x20011f04
 8003540:	2000f444 	.word	0x2000f444
 8003544:	20011f84 	.word	0x20011f84
 8003548:	2000fc44 	.word	0x2000fc44
 800354c:	20012004 	.word	0x20012004
 8003550:	20008e9c 	.word	0x20008e9c
 8003554:	2000c0bc 	.word	0x2000c0bc
 8003558:	2000c0a8 	.word	0x2000c0a8
 800355c:	2000c0f8 	.word	0x2000c0f8
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <sampling+0x175c>)
 8003562:	ed93 7a07 	vldr	s14, [r3, #28]
 8003566:	4b8b      	ldr	r3, [pc, #556]	; (8003794 <sampling+0x175c>)
 8003568:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800356c:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <sampling+0x1760>)
 800356e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003572:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357a:	4b86      	ldr	r3, [pc, #536]	; (8003794 <sampling+0x175c>)
 800357c:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 8003580:	4b84      	ldr	r3, [pc, #528]	; (8003794 <sampling+0x175c>)
 8003582:	ed93 7a07 	vldr	s14, [r3, #28]
 8003586:	4b85      	ldr	r3, [pc, #532]	; (800379c <sampling+0x1764>)
 8003588:	edd3 7a04 	vldr	s15, [r3, #16]
 800358c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <sampling+0x175c>)
 8003592:	edd3 6a08 	vldr	s13, [r3, #32]
 8003596:	4b81      	ldr	r3, [pc, #516]	; (800379c <sampling+0x1764>)
 8003598:	edd3 7a05 	vldr	s15, [r3, #20]
 800359c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a4:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <sampling+0x175c>)
 80035a6:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 80035aa:	4b7a      	ldr	r3, [pc, #488]	; (8003794 <sampling+0x175c>)
 80035ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80035b0:	4b7a      	ldr	r3, [pc, #488]	; (800379c <sampling+0x1764>)
 80035b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80035b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035ba:	4b76      	ldr	r3, [pc, #472]	; (8003794 <sampling+0x175c>)
 80035bc:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80035c0:	4b76      	ldr	r3, [pc, #472]	; (800379c <sampling+0x1764>)
 80035c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80035c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035ce:	4b71      	ldr	r3, [pc, #452]	; (8003794 <sampling+0x175c>)
 80035d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 80035d4:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <sampling+0x175c>)
 80035d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80035da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035de:	ee17 3a90 	vmov	r3, s15
 80035e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

				filter_accus[10]=sample_Accu[3];
 80035e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035f2:	4b68      	ldr	r3, [pc, #416]	; (8003794 <sampling+0x175c>)
 80035f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 80035f8:	4b66      	ldr	r3, [pc, #408]	; (8003794 <sampling+0x175c>)
 80035fa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80035fe:	4b65      	ldr	r3, [pc, #404]	; (8003794 <sampling+0x175c>)
 8003600:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003604:	4b64      	ldr	r3, [pc, #400]	; (8003798 <sampling+0x1760>)
 8003606:	edd3 7a03 	vldr	s15, [r3, #12]
 800360a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800360e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003612:	4b60      	ldr	r3, [pc, #384]	; (8003794 <sampling+0x175c>)
 8003614:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 8003618:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <sampling+0x175c>)
 800361a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800361e:	4b5f      	ldr	r3, [pc, #380]	; (800379c <sampling+0x1764>)
 8003620:	edd3 7a06 	vldr	s15, [r3, #24]
 8003624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003628:	4b5a      	ldr	r3, [pc, #360]	; (8003794 <sampling+0x175c>)
 800362a:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800362e:	4b5b      	ldr	r3, [pc, #364]	; (800379c <sampling+0x1764>)
 8003630:	edd3 7a07 	vldr	s15, [r3, #28]
 8003634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800363c:	4b55      	ldr	r3, [pc, #340]	; (8003794 <sampling+0x175c>)
 800363e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 8003642:	4b54      	ldr	r3, [pc, #336]	; (8003794 <sampling+0x175c>)
 8003644:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003648:	4b54      	ldr	r3, [pc, #336]	; (800379c <sampling+0x1764>)
 800364a:	edd3 7a06 	vldr	s15, [r3, #24]
 800364e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <sampling+0x175c>)
 8003654:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8003658:	4b50      	ldr	r3, [pc, #320]	; (800379c <sampling+0x1764>)
 800365a:	edd3 7a07 	vldr	s15, [r3, #28]
 800365e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003666:	4b4b      	ldr	r3, [pc, #300]	; (8003794 <sampling+0x175c>)
 8003668:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 800366c:	4b49      	ldr	r3, [pc, #292]	; (8003794 <sampling+0x175c>)
 800366e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003676:	ee17 3a90 	vmov	r3, s15
 800367a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003684:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003688:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 800368c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003690:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003694:	4413      	add	r3, r2
 8003696:	141b      	asrs	r3, r3, #16
 8003698:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 800369c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80036a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036a4:	4413      	add	r3, r2
 80036a6:	141b      	asrs	r3, r3, #16
 80036a8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80036ac:	4b3c      	ldr	r3, [pc, #240]	; (80037a0 <sampling+0x1768>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2bc7      	cmp	r3, #199	; 0xc7
 80036b2:	d005      	beq.n	80036c0 <sampling+0x1688>
 80036b4:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <sampling+0x1768>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <sampling+0x1768>)
 80036be:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 80036c0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80036c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c8:	db0a      	blt.n	80036e0 <sampling+0x16a8>
 80036ca:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80036ce:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <sampling+0x176c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <sampling+0x176c>)
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e007      	b.n	80036f0 <sampling+0x16b8>
 80036e0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80036e4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80036e8:	dc02      	bgt.n	80036f0 <sampling+0x16b8>
 80036ea:	4b2f      	ldr	r3, [pc, #188]	; (80037a8 <sampling+0x1770>)
 80036ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 80036f0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	db0a      	blt.n	8003710 <sampling+0x16d8>
 80036fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80036fe:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8003702:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <sampling+0x176c>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <sampling+0x176c>)
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e007      	b.n	8003720 <sampling+0x16e8>
 8003710:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003714:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003718:	dc02      	bgt.n	8003720 <sampling+0x16e8>
 800371a:	4b23      	ldr	r3, [pc, #140]	; (80037a8 <sampling+0x1770>)
 800371c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003720:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003724:	b29a      	uxth	r2, r3
 8003726:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003730:	b291      	uxth	r1, r2
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <sampling+0x1774>)
 8003734:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003738:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800373c:	b29a      	uxth	r2, r3
 800373e:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	3301      	adds	r3, #1
 8003746:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800374a:	b291      	uxth	r1, r2
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <sampling+0x1774>)
 800374e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <sampling+0x1778>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <sampling+0x1778>)
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <sampling+0x1778>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003766:	f4ff ad5d 	bcc.w	8003224 <sampling+0x11ec>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <sampling+0x177c>)
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d006      	beq.n	8003780 <sampling+0x1748>
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <sampling+0x1780>)
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	3301      	adds	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <sampling+0x1780>)
 800377e:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003780:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <sampling+0x1784>)
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <sampling+0x1788>)
 8003786:	801a      	strh	r2, [r3, #0]


		//bank_write=0;   /// total 320 sample time (39khz)
		}
 8003788:	bf00      	nop
 800378a:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 800378e:	46bd      	mov	sp, r7
 8003790:	bdb0      	pop	{r4, r5, r7, pc}
 8003792:	bf00      	nop
 8003794:	2000c0bc 	.word	0x2000c0bc
 8003798:	2000c0a8 	.word	0x2000c0a8
 800379c:	2000c0f8 	.word	0x2000c0f8
 80037a0:	2000c078 	.word	0x2000c078
 80037a4:	20010c44 	.word	0x20010c44
 80037a8:	fffffc01 	.word	0xfffffc01
 80037ac:	2000984c 	.word	0x2000984c
 80037b0:	2000984a 	.word	0x2000984a
 80037b4:	20008e0a 	.word	0x20008e0a
 80037b8:	2000ce4a 	.word	0x2000ce4a
 80037bc:	2000ce48 	.word	0x2000ce48
 80037c0:	2000ce44 	.word	0x2000ce44

080037c4 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 80037c4:	b490      	push	{r4, r7}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos ;
 80037ca:	4b4d      	ldr	r3, [pc, #308]	; (8003900 <LFO_square_one_pulse+0x13c>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	717b      	strb	r3, [r7, #5]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 80037d0:	2307      	movs	r3, #7
 80037d2:	71fb      	strb	r3, [r7, #7]
	uint8_t lfo_c ;
	//uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t delay;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 80037d4:	2300      	movs	r3, #0
 80037d6:	71bb      	strb	r3, [r7, #6]
 80037d8:	e088      	b.n	80038ec <LFO_square_one_pulse+0x128>

	    pulse_low=LFO_square[lfo_c].rate;
 80037da:	79ba      	ldrb	r2, [r7, #6]
 80037dc:	4949      	ldr	r1, [pc, #292]	; (8003904 <LFO_square_one_pulse+0x140>)
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	713b      	strb	r3, [r7, #4]
	 //   if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
	    delay=LFO_square[lfo_c].delay;
 80037ec:	79ba      	ldrb	r2, [r7, #6]
 80037ee:	4945      	ldr	r1, [pc, #276]	; (8003904 <LFO_square_one_pulse+0x140>)
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3303      	adds	r3, #3
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	70fb      	strb	r3, [r7, #3]

	    if ((pulse_low&32) 	|| 	(delay&32)) 						 {seq_div=63;}  // This is the end
 8003800:	793b      	ldrb	r3, [r7, #4]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b00      	cmp	r3, #0
 8003808:	d104      	bne.n	8003814 <LFO_square_one_pulse+0x50>
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <LFO_square_one_pulse+0x54>
 8003814:	233f      	movs	r3, #63	; 0x3f
 8003816:	71fb      	strb	r3, [r7, #7]
	    if  ((pulse_low&16) 	|| 	(delay&16)) 								 {seq_div=31;}
 8003818:	793b      	ldrb	r3, [r7, #4]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b00      	cmp	r3, #0
 8003820:	d104      	bne.n	800382c <LFO_square_one_pulse+0x68>
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 0310 	and.w	r3, r3, #16
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <LFO_square_one_pulse+0x6c>
 800382c:	231f      	movs	r3, #31
 800382e:	71fb      	strb	r3, [r7, #7]
	    if  ((pulse_low&8) 	|| 	(delay&8)) 								{ seq_div=15;}
 8003830:	793b      	ldrb	r3, [r7, #4]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d104      	bne.n	8003844 <LFO_square_one_pulse+0x80>
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <LFO_square_one_pulse+0x84>
 8003844:	230f      	movs	r3, #15
 8003846:	71fb      	strb	r3, [r7, #7]
	    if  ((pulse_low&7) 	|| 	(delay&7)) 									 {seq_div=7;}
 8003848:	793b      	ldrb	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <LFO_square_one_pulse+0x98>
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <LFO_square_one_pulse+0x9c>
 800385c:	2307      	movs	r3, #7
 800385e:	71fb      	strb	r3, [r7, #7]

	    //delay=(delay*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=delay))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8003860:	797a      	ldrb	r2, [r7, #5]
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	4013      	ands	r3, r2
 8003866:	b2db      	uxtb	r3, r3
 8003868:	793a      	ldrb	r2, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d321      	bcc.n	80038b2 <LFO_square_one_pulse+0xee>
 800386e:	797a      	ldrb	r2, [r7, #5]
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	4013      	ands	r3, r2
 8003874:	b2db      	uxtb	r3, r3
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	429a      	cmp	r2, r3
 800387a:	d81a      	bhi.n	80038b2 <LFO_square_one_pulse+0xee>
 800387c:	79ba      	ldrb	r2, [r7, #6]
 800387e:	4921      	ldr	r1, [pc, #132]	; (8003904 <LFO_square_one_pulse+0x140>)
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3301      	adds	r3, #1
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	79ba      	ldrb	r2, [r7, #6]
 8003892:	491d      	ldr	r1, [pc, #116]	; (8003908 <LFO_square_one_pulse+0x144>)
 8003894:	7809      	ldrb	r1, [r1, #0]
 8003896:	460c      	mov	r4, r1
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	b298      	uxth	r0, r3
 800389c:	4919      	ldr	r1, [pc, #100]	; (8003904 <LFO_square_one_pulse+0x140>)
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	4423      	add	r3, r4
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	440b      	add	r3, r1
 80038ac:	4602      	mov	r2, r0
 80038ae:	809a      	strh	r2, [r3, #4]
 80038b0:	e019      	b.n	80038e6 <LFO_square_one_pulse+0x122>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 80038b2:	79ba      	ldrb	r2, [r7, #6]
 80038b4:	4913      	ldr	r1, [pc, #76]	; (8003904 <LFO_square_one_pulse+0x140>)
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	3302      	adds	r3, #2
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	79ba      	ldrb	r2, [r7, #6]
 80038c8:	490f      	ldr	r1, [pc, #60]	; (8003908 <LFO_square_one_pulse+0x144>)
 80038ca:	7809      	ldrb	r1, [r1, #0]
 80038cc:	460c      	mov	r4, r1
 80038ce:	021b      	lsls	r3, r3, #8
 80038d0:	b298      	uxth	r0, r3
 80038d2:	490c      	ldr	r1, [pc, #48]	; (8003904 <LFO_square_one_pulse+0x140>)
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4423      	add	r3, r4
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	440b      	add	r3, r1
 80038e2:	4602      	mov	r2, r0
 80038e4:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 80038e6:	79bb      	ldrb	r3, [r7, #6]
 80038e8:	3301      	adds	r3, #1
 80038ea:	71bb      	strb	r3, [r7, #6]
 80038ec:	79bb      	ldrb	r3, [r7, #6]
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	f67f af73 	bls.w	80037da <LFO_square_one_pulse+0x16>

	}
    }
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc90      	pop	{r4, r7}
 80038fe:	4770      	bx	lr
 8003900:	2000dc84 	.word	0x2000dc84
 8003904:	2000d130 	.word	0x2000d130
 8003908:	2000ec40 	.word	0x2000ec40
 800390c:	00000000 	.word	0x00000000

08003910 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok , half phase
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b08d      	sub	sp, #52	; 0x34
 8003914:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 8003922:	2300      	movs	r3, #0
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003936:	e117      	b.n	8003b68 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 8003938:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800393c:	4992      	ldr	r1, [pc, #584]	; (8003b88 <LFO_source_synced+0x278>)
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 800394c:	8b7b      	ldrh	r3, [r7, #26]
 800394e:	2b0a      	cmp	r3, #10
 8003950:	d901      	bls.n	8003956 <LFO_source_synced+0x46>
 8003952:	230a      	movs	r3, #10
 8003954:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 8003956:	4b8d      	ldr	r3, [pc, #564]	; (8003b8c <LFO_source_synced+0x27c>)
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	4619      	mov	r1, r3
 800395c:	8b7b      	ldrh	r3, [r7, #26]
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	400b      	ands	r3, r1
 8003968:	8b7a      	ldrh	r2, [r7, #26]
 800396a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800396e:	fa41 f202 	asr.w	r2, r1, r2
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8003978:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800397c:	4982      	ldr	r1, [pc, #520]	; (8003b88 <LFO_source_synced+0x278>)
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3304      	adds	r3, #4
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	035b      	lsls	r3, r3, #13
 8003992:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003994:	68b8      	ldr	r0, [r7, #8]
 8003996:	f7fc fe93 	bl	80006c0 <__aeabi_ui2d>
 800399a:	a379      	add	r3, pc, #484	; (adr r3, 8003b80 <LFO_source_synced+0x270>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f7fc fc22 	bl	80001e8 <__aeabi_dmul>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	f7fc ff22 	bl	80007f4 <__aeabi_d2f>
 80039b0:	4603      	mov	r3, r0
 80039b2:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 80039b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80039b8:	f009 f956 	bl	800cc68 <arm_sin_f32>
 80039bc:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 80039c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039c4:	4970      	ldr	r1, [pc, #448]	; (8003b88 <LFO_source_synced+0x278>)
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	3301      	adds	r3, #1
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039dc:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 80039e0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80039e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80039e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ec:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003b90 <LFO_source_synced+0x280>
 80039f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039f4:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003a02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a06:	4960      	ldr	r1, [pc, #384]	; (8003b88 <LFO_source_synced+0x278>)
 8003a08:	4613      	mov	r3, r2
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	3303      	adds	r3, #3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a20:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 8003a24:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a2c:	ee17 3a90 	vmov	r3, s15
 8003a30:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8003a32:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8003a42:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a46:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003b94 <LFO_source_synced+0x284>
 8003a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a52:	dd01      	ble.n	8003a58 <LFO_source_synced+0x148>
 8003a54:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <LFO_source_synced+0x288>)
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8003a58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a60:	ee17 3a90 	vmov	r3, s15
 8003a64:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d902      	bls.n	8003a76 <LFO_source_synced+0x166>
 8003a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a74:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003a76:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a7a:	4943      	ldr	r1, [pc, #268]	; (8003b88 <LFO_source_synced+0x278>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3301      	adds	r3, #1
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d902      	bls.n	8003aaa <LFO_source_synced+0x19a>
 8003aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003aaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <LFO_source_synced+0x28c>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461c      	mov	r4, r3
 8003ab4:	8878      	ldrh	r0, [r7, #2]
 8003ab6:	4934      	ldr	r1, [pc, #208]	; (8003b88 <LFO_source_synced+0x278>)
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4423      	add	r3, r4
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	440b      	add	r3, r1
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003aca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ace:	4b33      	ldr	r3, [pc, #204]	; (8003b9c <LFO_source_synced+0x28c>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	461c      	mov	r4, r3
 8003ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad6:	b298      	uxth	r0, r3
 8003ad8:	492b      	ldr	r1, [pc, #172]	; (8003b88 <LFO_source_synced+0x278>)
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	4413      	add	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4423      	add	r3, r4
 8003ae4:	330c      	adds	r3, #12
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	440b      	add	r3, r1
 8003aea:	4602      	mov	r2, r0
 8003aec:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af4:	d202      	bcs.n	8003afc <LFO_source_synced+0x1ec>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	e003      	b.n	8003b04 <LFO_source_synced+0x1f4>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003b02:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003b04:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b08:	491f      	ldr	r1, [pc, #124]	; (8003b88 <LFO_source_synced+0x278>)
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	3301      	adds	r3, #1
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	11db      	asrs	r3, r3, #7
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003b30:	4293      	cmp	r3, r2
 8003b32:	dd02      	ble.n	8003b3a <LFO_source_synced+0x22a>
 8003b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b38:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003b3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <LFO_source_synced+0x28c>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461c      	mov	r4, r3
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	b298      	uxth	r0, r3
 8003b48:	490f      	ldr	r1, [pc, #60]	; (8003b88 <LFO_source_synced+0x278>)
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	4423      	add	r3, r4
 8003b54:	3314      	adds	r3, #20
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	440b      	add	r3, r1
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b62:	3301      	adds	r3, #1
 8003b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b6c:	2b09      	cmp	r3, #9
 8003b6e:	f67f aee3 	bls.w	8003938 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	3734      	adds	r7, #52	; 0x34
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	f3af 8000 	nop.w
 8003b80:	64dc8498 	.word	0x64dc8498
 8003b84:	3f092213 	.word	0x3f092213
 8003b88:	2000ce4c 	.word	0x2000ce4c
 8003b8c:	2000c05c 	.word	0x2000c05c
 8003b90:	43800000 	.word	0x43800000
 8003b94:	477ffe00 	.word	0x477ffe00
 8003b98:	477fff00 	.word	0x477fff00
 8003b9c:	2000ec40 	.word	0x2000ec40

08003ba0 <frq_point>:


void  frq_point(void){
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <frq_point+0x218>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	4a84      	ldr	r2, [pc, #528]	; (8003dbc <frq_point+0x21c>)
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a83      	ldr	r2, [pc, #524]	; (8003dc0 <frq_point+0x220>)
 8003bb2:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003bb4:	4b80      	ldr	r3, [pc, #512]	; (8003db8 <frq_point+0x218>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	4a80      	ldr	r2, [pc, #512]	; (8003dbc <frq_point+0x21c>)
 8003bba:	3309      	adds	r3, #9
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7f      	ldr	r2, [pc, #508]	; (8003dc0 <frq_point+0x220>)
 8003bc4:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 8003bc6:	4b7c      	ldr	r3, [pc, #496]	; (8003db8 <frq_point+0x218>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	4a7c      	ldr	r2, [pc, #496]	; (8003dbc <frq_point+0x21c>)
 8003bcc:	3312      	adds	r3, #18
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a7a      	ldr	r2, [pc, #488]	; (8003dc0 <frq_point+0x220>)
 8003bd6:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8003bd8:	4b77      	ldr	r3, [pc, #476]	; (8003db8 <frq_point+0x218>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4a77      	ldr	r2, [pc, #476]	; (8003dbc <frq_point+0x21c>)
 8003bde:	331b      	adds	r3, #27
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a76      	ldr	r2, [pc, #472]	; (8003dc0 <frq_point+0x220>)
 8003be8:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8003bea:	4b75      	ldr	r3, [pc, #468]	; (8003dc0 <frq_point+0x220>)
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	dd04      	ble.n	8003c08 <frq_point+0x68>
 8003bfe:	4b70      	ldr	r3, [pc, #448]	; (8003dc0 <frq_point+0x220>)
 8003c00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	e00b      	b.n	8003c20 <frq_point+0x80>
 8003c08:	4b6d      	ldr	r3, [pc, #436]	; (8003dc0 <frq_point+0x220>)
 8003c0a:	edd3 7a00 	vldr	s15, [r3]
 8003c0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	d503      	bpl.n	8003c20 <frq_point+0x80>
 8003c18:	4b69      	ldr	r3, [pc, #420]	; (8003dc0 <frq_point+0x220>)
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8003c20:	4b67      	ldr	r3, [pc, #412]	; (8003dc0 <frq_point+0x220>)
 8003c22:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	dd04      	ble.n	8003c3e <frq_point+0x9e>
 8003c34:	4b62      	ldr	r3, [pc, #392]	; (8003dc0 <frq_point+0x220>)
 8003c36:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c3a:	611a      	str	r2, [r3, #16]
 8003c3c:	e00b      	b.n	8003c56 <frq_point+0xb6>
 8003c3e:	4b60      	ldr	r3, [pc, #384]	; (8003dc0 <frq_point+0x220>)
 8003c40:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	d503      	bpl.n	8003c56 <frq_point+0xb6>
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	; (8003dc0 <frq_point+0x220>)
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 8003c56:	4b5a      	ldr	r3, [pc, #360]	; (8003dc0 <frq_point+0x220>)
 8003c58:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c68:	dd04      	ble.n	8003c74 <frq_point+0xd4>
 8003c6a:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <frq_point+0x220>)
 8003c6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	e00b      	b.n	8003c8c <frq_point+0xec>
 8003c74:	4b52      	ldr	r3, [pc, #328]	; (8003dc0 <frq_point+0x220>)
 8003c76:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c82:	d503      	bpl.n	8003c8c <frq_point+0xec>
 8003c84:	4b4e      	ldr	r3, [pc, #312]	; (8003dc0 <frq_point+0x220>)
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8003c8c:	4b4c      	ldr	r3, [pc, #304]	; (8003dc0 <frq_point+0x220>)
 8003c8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9e:	dd04      	ble.n	8003caa <frq_point+0x10a>
 8003ca0:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <frq_point+0x220>)
 8003ca2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ca6:	619a      	str	r2, [r3, #24]
 8003ca8:	e00b      	b.n	8003cc2 <frq_point+0x122>
 8003caa:	4b45      	ldr	r3, [pc, #276]	; (8003dc0 <frq_point+0x220>)
 8003cac:	edd3 7a06 	vldr	s15, [r3, #24]
 8003cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb8:	d503      	bpl.n	8003cc2 <frq_point+0x122>
 8003cba:	4b41      	ldr	r3, [pc, #260]	; (8003dc0 <frq_point+0x220>)
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 8003cc2:	4b3f      	ldr	r3, [pc, #252]	; (8003dc0 <frq_point+0x220>)
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd0:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <frq_point+0x220>)
 8003cd2:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 8003cd6:	4b3a      	ldr	r3, [pc, #232]	; (8003dc0 <frq_point+0x220>)
 8003cd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce4:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <frq_point+0x220>)
 8003ce6:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <frq_point+0x220>)
 8003cec:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf8:	4b31      	ldr	r3, [pc, #196]	; (8003dc0 <frq_point+0x220>)
 8003cfa:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8003cfe:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <frq_point+0x220>)
 8003d00:	edd3 7a06 	vldr	s15, [r3, #24]
 8003d04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <frq_point+0x220>)
 8003d0e:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 8003d12:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <frq_point+0x220>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fc fcf4 	bl	8000704 <__aeabi_f2d>
 8003d1c:	a324      	add	r3, pc, #144	; (adr r3, 8003db0 <frq_point+0x210>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fa61 	bl	80001e8 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fc fd61 	bl	80007f4 <__aeabi_d2f>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <frq_point+0x224>)
 8003d36:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <frq_point+0x220>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc fce1 	bl	8000704 <__aeabi_f2d>
 8003d42:	a31b      	add	r3, pc, #108	; (adr r3, 8003db0 <frq_point+0x210>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fa4e 	bl	80001e8 <__aeabi_dmul>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7fc fd4e 	bl	80007f4 <__aeabi_d2f>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	4a1a      	ldr	r2, [pc, #104]	; (8003dc4 <frq_point+0x224>)
 8003d5c:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8003d5e:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <frq_point+0x220>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fcce 	bl	8000704 <__aeabi_f2d>
 8003d68:	a311      	add	r3, pc, #68	; (adr r3, 8003db0 <frq_point+0x210>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	f7fc fa3b 	bl	80001e8 <__aeabi_dmul>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4610      	mov	r0, r2
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f7fc fd3b 	bl	80007f4 <__aeabi_d2f>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <frq_point+0x224>)
 8003d82:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <frq_point+0x220>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fc fcbb 	bl	8000704 <__aeabi_f2d>
 8003d8e:	a308      	add	r3, pc, #32	; (adr r3, 8003db0 <frq_point+0x210>)
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f7fc fa28 	bl	80001e8 <__aeabi_dmul>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f7fc fd28 	bl	80007f4 <__aeabi_d2f>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <frq_point+0x224>)
 8003da8:	60d3      	str	r3, [r2, #12]

}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	9999999a 	.word	0x9999999a
 8003db4:	3fc99999 	.word	0x3fc99999
 8003db8:	2000ec40 	.word	0x2000ec40
 8003dbc:	2000c118 	.word	0x2000c118
 8003dc0:	2000c0f8 	.word	0x2000c0f8
 8003dc4:	2000c0a8 	.word	0x2000c0a8

08003dc8 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0




}   // end o void
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <displayBuffer2+0x1d0>)
 8003de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b71      	ldr	r3, [pc, #452]	; (8003fac <displayBuffer2+0x1d4>)
 8003de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	336b      	adds	r3, #107	; 0x6b
 8003df6:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003df8:	4b6b      	ldr	r3, [pc, #428]	; (8003fa8 <displayBuffer2+0x1d0>)
 8003dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <displayBuffer2+0x1d4>)
 8003e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a68      	ldr	r2, [pc, #416]	; (8003fb0 <displayBuffer2+0x1d8>)
 8003e10:	4413      	add	r3, r2
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <displayBuffer2+0x1dc>)
 8003e16:	6810      	ldr	r0, [r2, #0]
 8003e18:	6851      	ldr	r1, [r2, #4]
 8003e1a:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003e1c:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <displayBuffer2+0x1e0>)
 8003e1e:	463b      	mov	r3, r7
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	4611      	mov	r1, r2
 8003e24:	8019      	strh	r1, [r3, #0]
 8003e26:	3302      	adds	r3, #2
 8003e28:	0c12      	lsrs	r2, r2, #16
 8003e2a:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	; (8003fa8 <displayBuffer2+0x1d0>)
 8003e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b61      	ldr	r3, [pc, #388]	; (8003fbc <displayBuffer2+0x1e4>)
 8003e38:	4413      	add	r3, r2
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003e40:	463b      	mov	r3, r7
 8003e42:	4618      	mov	r0, r3
 8003e44:	f008 ff54 	bl	800ccf0 <atoi>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <displayBuffer2+0x1e8>)
 8003e4e:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003e50:	4b5b      	ldr	r3, [pc, #364]	; (8003fc0 <displayBuffer2+0x1e8>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	4619      	mov	r1, r3
 8003e56:	4857      	ldr	r0, [pc, #348]	; (8003fb4 <displayBuffer2+0x1dc>)
 8003e58:	f7fc fe9e 	bl	8000b98 <menu_vars>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4a59      	ldr	r2, [pc, #356]	; (8003fc4 <displayBuffer2+0x1ec>)
 8003e60:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003e62:	88bb      	ldrh	r3, [r7, #4]
 8003e64:	3308      	adds	r3, #8
 8003e66:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <displayBuffer2+0x1f0>)
 8003e68:	1898      	adds	r0, r3, r2
 8003e6a:	78fb      	ldrb	r3, [r7, #3]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <displayBuffer2+0x1d8>)
 8003e70:	4413      	add	r3, r2
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	4619      	mov	r1, r3
 8003e78:	f008 ff68 	bl	800cd4c <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 8003e7c:	88bb      	ldrh	r3, [r7, #4]
 8003e7e:	3311      	adds	r3, #17
 8003e80:	4a51      	ldr	r2, [pc, #324]	; (8003fc8 <displayBuffer2+0x1f0>)
 8003e82:	4413      	add	r3, r2
 8003e84:	4951      	ldr	r1, [pc, #324]	; (8003fcc <displayBuffer2+0x1f4>)
 8003e86:	2203      	movs	r2, #3
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f008 ff5f 	bl	800cd4c <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003e8e:	88bb      	ldrh	r3, [r7, #4]
 8003e90:	3305      	adds	r3, #5
 8003e92:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <displayBuffer2+0x1f0>)
 8003e94:	4413      	add	r3, r2
 8003e96:	883a      	ldrh	r2, [r7, #0]
 8003e98:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003e9a:	4b4d      	ldr	r3, [pc, #308]	; (8003fd0 <displayBuffer2+0x1f8>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d102      	bne.n	8003ea8 <displayBuffer2+0xd0>
 8003ea2:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <displayBuffer2+0x1f8>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b24      	cmp	r3, #36	; 0x24
 8003eae:	d102      	bne.n	8003eb6 <displayBuffer2+0xde>
 8003eb0:	4b48      	ldr	r3, [pc, #288]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003eb6:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <displayBuffer2+0x1f8>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b30      	cmp	r3, #48	; 0x30
 8003ebc:	d906      	bls.n	8003ecc <displayBuffer2+0xf4>
 8003ebe:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <displayBuffer2+0x1f8>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b34      	cmp	r3, #52	; 0x34
 8003ec4:	d802      	bhi.n	8003ecc <displayBuffer2+0xf4>
 8003ec6:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003ec8:	2203      	movs	r2, #3
 8003eca:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8003ecc:	4b41      	ldr	r3, [pc, #260]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d054      	beq.n	8003f7e <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003ed4:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <displayBuffer2+0x1ec>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee0:	d901      	bls.n	8003ee6 <displayBuffer2+0x10e>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d10c      	bne.n	8003f08 <displayBuffer2+0x130>
 8003eee:	88bb      	ldrh	r3, [r7, #4]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	4a35      	ldr	r2, [pc, #212]	; (8003fc8 <displayBuffer2+0x1f0>)
 8003ef4:	1898      	adds	r0, r3, r2
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <displayBuffer2+0x1d8>)
 8003efc:	4413      	add	r3, r2
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	4619      	mov	r1, r3
 8003f04:	f008 ff22 	bl	800cd4c <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003f08:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d10c      	bne.n	8003f2a <displayBuffer2+0x152>
 8003f10:	88bb      	ldrh	r3, [r7, #4]
 8003f12:	3308      	adds	r3, #8
 8003f14:	4a2c      	ldr	r2, [pc, #176]	; (8003fc8 <displayBuffer2+0x1f0>)
 8003f16:	1898      	adds	r0, r3, r2
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <displayBuffer2+0x200>)
 8003f1e:	4413      	add	r3, r2
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2208      	movs	r2, #8
 8003f24:	4619      	mov	r1, r3
 8003f26:	f008 ff11 	bl	800cd4c <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d125      	bne.n	8003f7e <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <displayBuffer2+0x1e8>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	4a28      	ldr	r2, [pc, #160]	; (8003fdc <displayBuffer2+0x204>)
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d017      	beq.n	8003f72 <displayBuffer2+0x19a>
 8003f42:	4827      	ldr	r0, [pc, #156]	; (8003fe0 <displayBuffer2+0x208>)
 8003f44:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <displayBuffer2+0x1e8>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <displayBuffer2+0x20c>)
 8003f4e:	5cd3      	ldrb	r3, [r2, r3]
 8003f50:	461a      	mov	r2, r3
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <displayBuffer2+0x1d8>)
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	2206      	movs	r2, #6
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f008 fef6 	bl	800cd4c <memcpy>
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <displayBuffer2+0x1e8>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <displayBuffer2+0x204>)
 8003f6a:	5cd2      	ldrb	r2, [r2, r3]
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <displayBuffer2+0x210>)
 8003f6e:	729a      	strb	r2, [r3, #10]
 8003f70:	e005      	b.n	8003f7e <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8003f72:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <displayBuffer2+0x208>)
 8003f74:	2208      	movs	r2, #8
 8003f76:	491d      	ldr	r1, [pc, #116]	; (8003fec <displayBuffer2+0x214>)
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f008 fee7 	bl	800cd4c <memcpy>
	     		    }
	     	}

	     target_display=0;
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <displayBuffer2+0x1fc>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <displayBuffer2+0x218>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b11      	cmp	r3, #17
 8003f8a:	d103      	bne.n	8003f94 <displayBuffer2+0x1bc>
 8003f8c:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <displayBuffer2+0x218>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003f92:	e005      	b.n	8003fa0 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <displayBuffer2+0x218>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <displayBuffer2+0x218>)
 8003f9e:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20008ee0 	.word	0x20008ee0
 8003fac:	2000e02c 	.word	0x2000e02c
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	2000ec30 	.word	0x2000ec30
 8003fb8:	0800d4f8 	.word	0x0800d4f8
 8003fbc:	2000e82c 	.word	0x2000e82c
 8003fc0:	2000ec38 	.word	0x2000ec38
 8003fc4:	2000ec2c 	.word	0x2000ec2c
 8003fc8:	20008f7c 	.word	0x20008f7c
 8003fcc:	2000975c 	.word	0x2000975c
 8003fd0:	20010c69 	.word	0x20010c69
 8003fd4:	2000ec3f 	.word	0x2000ec3f
 8003fd8:	200000fc 	.word	0x200000fc
 8003fdc:	20011e78 	.word	0x20011e78
 8003fe0:	20012087 	.word	0x20012087
 8003fe4:	200120e8 	.word	0x200120e8
 8003fe8:	20012084 	.word	0x20012084
 8003fec:	0800d4ec 	.word	0x0800d4ec
 8003ff0:	20008e0c 	.word	0x20008e0c

08003ff4 <SPI_command>:

void SPI_command(void){
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003ffa:	4b18      	ldr	r3, [pc, #96]	; (800405c <SPI_command+0x68>)
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d128      	bne.n	8004054 <SPI_command+0x60>
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <SPI_command+0x6c>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d124      	bne.n	8004054 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <SPI_command+0x70>)
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <SPI_command+0x2a>
 8004016:	4b14      	ldr	r3, [pc, #80]	; (8004068 <SPI_command+0x74>)
 8004018:	22f8      	movs	r2, #248	; 0xf8
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	e002      	b.n	8004024 <SPI_command+0x30>
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <SPI_command+0x74>)
 8004020:	22fa      	movs	r2, #250	; 0xfa
 8004022:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <SPI_command+0x74>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <SPI_command+0x70>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	b29b      	uxth	r3, r3
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	b2db      	uxtb	r3, r3
 8004036:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8004038:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <SPI_command+0x70>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	b2db      	uxtb	r3, r3
 8004040:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8004042:	4639      	mov	r1, r7
 8004044:	2303      	movs	r3, #3
 8004046:	2203      	movs	r2, #3
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <SPI_command+0x78>)
 800404a:	f006 f97c 	bl	800a346 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <SPI_command+0x68>)
 8004050:	2201      	movs	r2, #1
 8004052:	801a      	strh	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	2000c08c 	.word	0x2000c08c
 8004060:	2000c092 	.word	0x2000c092
 8004064:	2000c090 	.word	0x2000c090
 8004068:	2000c08e 	.word	0x2000c08e
 800406c:	20012888 	.word	0x20012888

08004070 <display_init>:

void display_init(void){
 8004070:	b5b0      	push	{r4, r5, r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8004076:	4b22      	ldr	r3, [pc, #136]	; (8004100 <display_init+0x90>)
 8004078:	1d3c      	adds	r4, r7, #4
 800407a:	461d      	mov	r5, r3
 800407c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800407e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <display_init+0x94>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d132      	bne.n	80040f6 <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8004090:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <display_init+0x98>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b06      	subs	r3, #6
 8004098:	b29a      	uxth	r2, r3
 800409a:	4b1c      	ldr	r3, [pc, #112]	; (800410c <display_init+0x9c>)
 800409c:	801a      	strh	r2, [r3, #0]
 800409e:	f7ff fe9b 	bl	8003dd8 <displayBuffer2>
 80040a2:	4b1a      	ldr	r3, [pc, #104]	; (800410c <display_init+0x9c>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <display_init+0xa0>)
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b19      	ldr	r3, [pc, #100]	; (8004114 <display_init+0xa4>)
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <display_init+0x98>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b05      	cmp	r3, #5
 80040ba:	d80b      	bhi.n	80040d4 <display_init+0x64>
 80040bc:	2003      	movs	r0, #3
 80040be:	f002 fd65 	bl	8006b8c <HAL_Delay>
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <display_init+0x98>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	3328      	adds	r3, #40	; 0x28
 80040ca:	443b      	add	r3, r7
 80040cc:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80040d0:	4b10      	ldr	r3, [pc, #64]	; (8004114 <display_init+0xa4>)
 80040d2:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <display_init+0x98>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <display_init+0x98>)
 80040de:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <display_init+0x94>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	f7ff ff85 	bl	8003ff4 <SPI_command>
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <display_init+0x94>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <display_init+0xa8>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 80040f6:	bf00      	nop
 80040f8:	3728      	adds	r7, #40	; 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bdb0      	pop	{r4, r5, r7, pc}
 80040fe:	bf00      	nop
 8004100:	0800d4fc 	.word	0x0800d4fc
 8004104:	2000c092 	.word	0x2000c092
 8004108:	2000c093 	.word	0x2000c093
 800410c:	2000c094 	.word	0x2000c094
 8004110:	20008cbc 	.word	0x20008cbc
 8004114:	2000c090 	.word	0x2000c090
 8004118:	2000c08c 	.word	0x2000c08c

0800411c <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8004122:	2300      	movs	r3, #0
 8004124:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 8004126:	2300      	movs	r3, #0
 8004128:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 800412a:	2300      	movs	r3, #0
 800412c:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 800412e:	2300      	movs	r3, #0
 8004130:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 8004132:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <gfx_TX_block+0xac>)
 8004134:	2200      	movs	r2, #0
 8004136:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8004138:	2300      	movs	r3, #0
 800413a:	81bb      	strh	r3, [r7, #12]
 800413c:	e034      	b.n	80041a8 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <gfx_TX_block+0xac>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	4b21      	ldr	r3, [pc, #132]	; (80041cc <gfx_TX_block+0xb0>)
 8004146:	5c9b      	ldrb	r3, [r3, r2]
 8004148:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d902      	bls.n	8004156 <gfx_TX_block+0x3a>
 8004150:	23fa      	movs	r3, #250	; 0xfa
 8004152:	73fb      	strb	r3, [r7, #15]
 8004154:	e001      	b.n	800415a <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8004156:	23f8      	movs	r3, #248	; 0xf8
 8004158:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 800415e:	7abb      	ldrb	r3, [r7, #10]
 8004160:	091b      	lsrs	r3, r3, #4
 8004162:	b2db      	uxtb	r3, r3
 8004164:	011b      	lsls	r3, r3, #4
 8004166:	b2db      	uxtb	r3, r3
 8004168:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 800416a:	7abb      	ldrb	r3, [r7, #10]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	b2db      	uxtb	r3, r3
 8004170:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8004172:	89bb      	ldrh	r3, [r7, #12]
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <gfx_TX_block+0xb4>)
 8004176:	4413      	add	r3, r2
 8004178:	461a      	mov	r2, r3
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	8819      	ldrh	r1, [r3, #0]
 800417e:	789b      	ldrb	r3, [r3, #2]
 8004180:	8011      	strh	r1, [r2, #0]
 8004182:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	2b11      	cmp	r3, #17
 8004188:	d102      	bne.n	8004190 <gfx_TX_block+0x74>
 800418a:	2300      	movs	r3, #0
 800418c:	72fb      	strb	r3, [r7, #11]
 800418e:	e002      	b.n	8004196 <gfx_TX_block+0x7a>
 8004190:	7afb      	ldrb	r3, [r7, #11]
 8004192:	3301      	adds	r3, #1
 8004194:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <gfx_TX_block+0xac>)
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <gfx_TX_block+0xac>)
 80041a0:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 80041a2:	89bb      	ldrh	r3, [r7, #12]
 80041a4:	3303      	adds	r3, #3
 80041a6:	81bb      	strh	r3, [r7, #12]
 80041a8:	89bb      	ldrh	r3, [r7, #12]
 80041aa:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 80041ae:	d3c6      	bcc.n	800413e <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 80041b0:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <gfx_TX_block+0xac>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <gfx_TX_block+0xb8>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]

}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	2000ca32 	.word	0x2000ca32
 80041cc:	2000c5b0 	.word	0x2000c5b0
 80041d0:	20010e74 	.word	0x20010e74
 80041d4:	2000ca3e 	.word	0x2000ca3e

080041d8 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <gfx_clear+0x6c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e01c      	b.n	800421e <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <gfx_clear+0x70>)
 80041e6:	2202      	movs	r2, #2
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	e00e      	b.n	800420a <gfx_clear+0x32>
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <gfx_clear+0x6c>)
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <gfx_clear+0x70>)
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	4413      	add	r3, r2
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <gfx_clear+0x74>)
 80041fa:	2100      	movs	r1, #0
 80041fc:	54d1      	strb	r1, [r2, r3]
 80041fe:	4b12      	ldr	r3, [pc, #72]	; (8004248 <gfx_clear+0x70>)
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	3301      	adds	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	4b10      	ldr	r3, [pc, #64]	; (8004248 <gfx_clear+0x70>)
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <gfx_clear+0x70>)
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	2b11      	cmp	r3, #17
 8004210:	d9ec      	bls.n	80041ec <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <gfx_clear+0x6c>)
 8004214:	881b      	ldrh	r3, [r3, #0]
 8004216:	3312      	adds	r3, #18
 8004218:	b29a      	uxth	r2, r3
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <gfx_clear+0x6c>)
 800421c:	801a      	strh	r2, [r3, #0]
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <gfx_clear+0x6c>)
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004226:	d3dd      	bcc.n	80041e4 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <gfx_clear+0x78>)
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 800422e:	4b09      	ldr	r3, [pc, #36]	; (8004254 <gfx_clear+0x7c>)
 8004230:	2200      	movs	r2, #0
 8004232:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <gfx_clear+0x80>)
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]

}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	20009844 	.word	0x20009844
 8004248:	2000984a 	.word	0x2000984a
 800424c:	2000c5b0 	.word	0x2000c5b0
 8004250:	2000ca34 	.word	0x2000ca34
 8004254:	2000ca32 	.word	0x2000ca32
 8004258:	2000ca3e 	.word	0x2000ca3e

0800425c <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8004262:	2300      	movs	r3, #0
 8004264:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004266:	2300      	movs	r3, #0
 8004268:	80fb      	strh	r3, [r7, #6]
 800426a:	e006      	b.n	800427a <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4a08      	ldr	r2, [pc, #32]	; (8004290 <display_clear+0x34>)
 8004270:	212f      	movs	r1, #47	; 0x2f
 8004272:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	3301      	adds	r3, #1
 8004278:	80fb      	strh	r3, [r7, #6]
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004280:	d3f4      	bcc.n	800426c <display_clear+0x10>
	}


}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	20008f7c 	.word	0x20008f7c

08004294 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <display_generate+0x1c>)
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 800429e:	f7ff fd93 	bl	8003dc8 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 80042a2:	f7ff fd99 	bl	8003dd8 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 80042a6:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <display_generate+0x20>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 80042ac:	bf00      	nop
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	2000ec42 	.word	0x2000ec42
 80042b4:	2000ca3e 	.word	0x2000ca3e

080042b8 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 80042b8:	b480      	push	{r7}
 80042ba:	b08b      	sub	sp, #44	; 0x2c
 80042bc:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 80042be:	4b5c      	ldr	r3, [pc, #368]	; (8004430 <gfx_line_fill+0x178>)
 80042c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b5b      	ldr	r3, [pc, #364]	; (8004434 <gfx_line_fill+0x17c>)
 80042c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042cc:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 80042ce:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <gfx_line_fill+0x180>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	b29a      	uxth	r2, r3
 80042da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042dc:	09db      	lsrs	r3, r3, #7
 80042de:	b29b      	uxth	r3, r3
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4413      	add	r3, r2
 80042e6:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 80042e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	00d2      	lsls	r2, r2, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 80042fa:	8c3b      	ldrh	r3, [r7, #32]
 80042fc:	3390      	adds	r3, #144	; 0x90
 80042fe:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8004300:	4b4e      	ldr	r3, [pc, #312]	; (800443c <gfx_line_fill+0x184>)
 8004302:	2201      	movs	r2, #1
 8004304:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 800430c:	2300      	movs	r3, #0
 800430e:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8004310:	2300      	movs	r3, #0
 8004312:	607b      	str	r3, [r7, #4]
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8004320:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	b29b      	uxth	r3, r3
 8004326:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004328:	429a      	cmp	r2, r3
 800432a:	d107      	bne.n	800433c <gfx_line_fill+0x84>
 800432c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3328      	adds	r3, #40	; 0x28
 8004334:	443b      	add	r3, r7
 8004336:	2201      	movs	r2, #1
 8004338:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 800433c:	4a40      	ldr	r2, [pc, #256]	; (8004440 <gfx_line_fill+0x188>)
 800433e:	8c3b      	ldrh	r3, [r7, #32]
 8004340:	8013      	strh	r3, [r2, #0]
 8004342:	e068      	b.n	8004416 <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <gfx_line_fill+0x18c>)
 8004346:	2200      	movs	r2, #0
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	e055      	b.n	80043f8 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 800434c:	4b3d      	ldr	r3, [pc, #244]	; (8004444 <gfx_line_fill+0x18c>)
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4413      	add	r3, r2
 8004358:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <gfx_line_fill+0x190>)
 800435a:	5cd3      	ldrb	r3, [r2, r3]
 800435c:	3b2f      	subs	r3, #47	; 0x2f
 800435e:	b29b      	uxth	r3, r3
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	b29a      	uxth	r2, r3
 8004364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004368:	b29b      	uxth	r3, r3
 800436a:	4413      	add	r3, r2
 800436c:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 800436e:	8b7b      	ldrh	r3, [r7, #26]
 8004370:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004374:	4a35      	ldr	r2, [pc, #212]	; (800444c <gfx_line_fill+0x194>)
 8004376:	5cd3      	ldrb	r3, [r2, r3]
 8004378:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 800437a:	4b32      	ldr	r3, [pc, #200]	; (8004444 <gfx_line_fill+0x18c>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	3328      	adds	r3, #40	; 0x28
 8004380:	443b      	add	r3, r7
 8004382:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004386:	461a      	mov	r2, r3
 8004388:	01d2      	lsls	r2, r2, #7
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	b2db      	uxtb	r3, r3
 800438e:	b25a      	sxtb	r2, r3
 8004390:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004394:	4053      	eors	r3, r2
 8004396:	b25b      	sxtb	r3, r3
 8004398:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <gfx_line_fill+0x188>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <gfx_line_fill+0x18c>)
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	4413      	add	r3, r2
 80043a6:	3302      	adds	r3, #2
 80043a8:	4929      	ldr	r1, [pc, #164]	; (8004450 <gfx_line_fill+0x198>)
 80043aa:	7f7a      	ldrb	r2, [r7, #29]
 80043ac:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 80043ae:	23fa      	movs	r3, #250	; 0xfa
 80043b0:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 80043b2:	7f7b      	ldrb	r3, [r7, #29]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 80043be:	7f7b      	ldrb	r3, [r7, #29]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <gfx_line_fill+0x188>)
 80043c8:	881b      	ldrh	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <gfx_line_fill+0x18c>)
 80043ce:	881b      	ldrh	r3, [r3, #0]
 80043d0:	441a      	add	r2, r3
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	3306      	adds	r3, #6
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <gfx_line_fill+0x19c>)
 80043dc:	4413      	add	r3, r2
 80043de:	461a      	mov	r2, r3
 80043e0:	f107 0314 	add.w	r3, r7, #20
 80043e4:	8819      	ldrh	r1, [r3, #0]
 80043e6:	789b      	ldrb	r3, [r3, #2]
 80043e8:	8011      	strh	r1, [r2, #0]
 80043ea:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 80043ec:	4b15      	ldr	r3, [pc, #84]	; (8004444 <gfx_line_fill+0x18c>)
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <gfx_line_fill+0x18c>)
 80043f6:	801a      	strh	r2, [r3, #0]
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <gfx_line_fill+0x18c>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	2b0f      	cmp	r3, #15
 80043fe:	d9a5      	bls.n	800434c <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004404:	3301      	adds	r3, #1
 8004406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 800440a:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <gfx_line_fill+0x188>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	3312      	adds	r3, #18
 8004410:	b29a      	uxth	r2, r3
 8004412:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <gfx_line_fill+0x188>)
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <gfx_line_fill+0x188>)
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	8bfa      	ldrh	r2, [r7, #30]
 800441c:	429a      	cmp	r2, r3
 800441e:	d891      	bhi.n	8004344 <gfx_line_fill+0x8c>
    }
    }
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	372c      	adds	r7, #44	; 0x2c
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20008ee0 	.word	0x20008ee0
 8004434:	2000e02c 	.word	0x2000e02c
 8004438:	20009846 	.word	0x20009846
 800443c:	2000ca3e 	.word	0x2000ca3e
 8004440:	20009844 	.word	0x20009844
 8004444:	2000984a 	.word	0x2000984a
 8004448:	20008f7c 	.word	0x20008f7c
 800444c:	0800e430 	.word	0x0800e430
 8004450:	2000c5b0 	.word	0x2000c5b0
 8004454:	20010e74 	.word	0x20010e74

08004458 <encoder2>:


void encoder2(void){  // encoder pos and data input
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <encoder2+0x184>)
 8004460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004464:	461a      	mov	r2, r3
 8004466:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <encoder2+0x188>)
 8004468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a5b      	ldr	r2, [pc, #364]	; (80045e4 <encoder2+0x18c>)
 8004476:	4413      	add	r3, r2
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <encoder2+0x190>)
 800447c:	6810      	ldr	r0, [r2, #0]
 800447e:	6851      	ldr	r1, [r2, #4]
 8004480:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004482:	4a5a      	ldr	r2, [pc, #360]	; (80045ec <encoder2+0x194>)
 8004484:	1d3b      	adds	r3, r7, #4
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4611      	mov	r1, r2
 800448a:	8019      	strh	r1, [r3, #0]
 800448c:	3302      	adds	r3, #2
 800448e:	0c12      	lsrs	r2, r2, #16
 8004490:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004492:	4b52      	ldr	r3, [pc, #328]	; (80045dc <encoder2+0x184>)
 8004494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	461a      	mov	r2, r3
 800449c:	4b54      	ldr	r3, [pc, #336]	; (80045f0 <encoder2+0x198>)
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f008 fc21 	bl	800ccf0 <atoi>
 80044ae:	4603      	mov	r3, r0
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b50      	ldr	r3, [pc, #320]	; (80045f4 <encoder2+0x19c>)
 80044b4:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80044b6:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <encoder2+0x19c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	484a      	ldr	r0, [pc, #296]	; (80045e8 <encoder2+0x190>)
 80044be:	f7fc fb6b 	bl	8000b98 <menu_vars>
 80044c2:	4603      	mov	r3, r0
 80044c4:	4a4c      	ldr	r2, [pc, #304]	; (80045f8 <encoder2+0x1a0>)
 80044c6:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 80044c8:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <encoder2+0x1a0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	4b4b      	ldr	r3, [pc, #300]	; (80045fc <encoder2+0x1a4>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	4619      	mov	r1, r3
 80044d4:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <encoder2+0x1a8>)
 80044d6:	5c5b      	ldrb	r3, [r3, r1]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d907      	bls.n	80044ec <encoder2+0x94>
 80044dc:	4b47      	ldr	r3, [pc, #284]	; (80045fc <encoder2+0x1a4>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <encoder2+0x1a0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a46      	ldr	r2, [pc, #280]	; (8004600 <encoder2+0x1a8>)
 80044e8:	5c52      	ldrb	r2, [r2, r1]
 80044ea:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 80044ec:	4b45      	ldr	r3, [pc, #276]	; (8004604 <encoder2+0x1ac>)
 80044ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b44      	ldr	r3, [pc, #272]	; (8004608 <encoder2+0x1b0>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d024      	beq.n	8004546 <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 80044fc:	4b41      	ldr	r3, [pc, #260]	; (8004604 <encoder2+0x1ac>)
 80044fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004502:	461a      	mov	r2, r3
 8004504:	4b40      	ldr	r3, [pc, #256]	; (8004608 <encoder2+0x1b0>)
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	dd07      	ble.n	800451c <encoder2+0xc4>
 800450c:	4b3a      	ldr	r3, [pc, #232]	; (80045f8 <encoder2+0x1a0>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <encoder2+0x1a0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3201      	adds	r2, #1
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 800451c:	4b39      	ldr	r3, [pc, #228]	; (8004604 <encoder2+0x1ac>)
 800451e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004522:	461a      	mov	r2, r3
 8004524:	4b38      	ldr	r3, [pc, #224]	; (8004608 <encoder2+0x1b0>)
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	da0c      	bge.n	8004546 <encoder2+0xee>
 800452c:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <encoder2+0x1a0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <encoder2+0xee>
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <encoder2+0x1a0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <encoder2+0x1a0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3a01      	subs	r2, #1
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <encoder2+0x1ac>)
 8004548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800454c:	b29a      	uxth	r2, r3
 800454e:	4b2e      	ldr	r3, [pc, #184]	; (8004608 <encoder2+0x1b0>)
 8004550:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8004552:	4b2e      	ldr	r3, [pc, #184]	; (800460c <encoder2+0x1b4>)
 8004554:	881a      	ldrh	r2, [r3, #0]
 8004556:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <encoder2+0x1b8>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d01d      	beq.n	800459a <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <encoder2+0x1b4>)
 8004560:	881a      	ldrh	r2, [r3, #0]
 8004562:	4b2b      	ldr	r3, [pc, #172]	; (8004610 <encoder2+0x1b8>)
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d908      	bls.n	800457c <encoder2+0x124>
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <encoder2+0x184>)
 800456c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004570:	b29b      	uxth	r3, r3
 8004572:	3301      	adds	r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	b21a      	sxth	r2, r3
 8004578:	4b18      	ldr	r3, [pc, #96]	; (80045dc <encoder2+0x184>)
 800457a:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 800457c:	4b23      	ldr	r3, [pc, #140]	; (800460c <encoder2+0x1b4>)
 800457e:	881a      	ldrh	r2, [r3, #0]
 8004580:	4b23      	ldr	r3, [pc, #140]	; (8004610 <encoder2+0x1b8>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d208      	bcs.n	800459a <encoder2+0x142>
 8004588:	4b14      	ldr	r3, [pc, #80]	; (80045dc <encoder2+0x184>)
 800458a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	b21a      	sxth	r2, r3
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <encoder2+0x184>)
 8004598:	801a      	strh	r2, [r3, #0]

	   	    }
	   	   if (enc_out1>menu_title_count) enc_out1=0;
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <encoder2+0x184>)
 800459c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a0:	461a      	mov	r2, r3
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <encoder2+0x1bc>)
 80045a4:	881b      	ldrh	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	dd02      	ble.n	80045b0 <encoder2+0x158>
 80045aa:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <encoder2+0x184>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <encoder2+0x184>)
 80045b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da04      	bge.n	80045c4 <encoder2+0x16c>
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <encoder2+0x1bc>)
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	b21a      	sxth	r2, r3
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <encoder2+0x184>)
 80045c2:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <encoder2+0x1b4>)
 80045c6:	881a      	ldrh	r2, [r3, #0]
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <encoder2+0x1b8>)
 80045ca:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 80045cc:	4b12      	ldr	r3, [pc, #72]	; (8004618 <encoder2+0x1c0>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]

    }
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20008ee0 	.word	0x20008ee0
 80045e0:	2000e02c 	.word	0x2000e02c
 80045e4:	20000000 	.word	0x20000000
 80045e8:	2000ec30 	.word	0x2000ec30
 80045ec:	0800d4f8 	.word	0x0800d4f8
 80045f0:	2000e82c 	.word	0x2000e82c
 80045f4:	2000ec38 	.word	0x2000ec38
 80045f8:	2000ec2c 	.word	0x2000ec2c
 80045fc:	20010c69 	.word	0x20010c69
 8004600:	0800e3b0 	.word	0x0800e3b0
 8004604:	2000c084 	.word	0x2000c084
 8004608:	20010e6e 	.word	0x20010e6e
 800460c:	2000c082 	.word	0x2000c082
 8004610:	2000ec3c 	.word	0x2000ec3c
 8004614:	2000e02a 	.word	0x2000e02a
 8004618:	2000c086 	.word	0x2000c086

0800461c <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 8004622:	4b4f      	ldr	r3, [pc, #316]	; (8004760 <menu3_fill+0x144>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8004628:	4b4e      	ldr	r3, [pc, #312]	; (8004764 <menu3_fill+0x148>)
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	89fa      	ldrh	r2, [r7, #14]
 800462e:	429a      	cmp	r2, r3
 8004630:	d904      	bls.n	800463c <menu3_fill+0x20>
 8004632:	2300      	movs	r3, #0
 8004634:	81fb      	strh	r3, [r7, #14]
 8004636:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <menu3_fill+0x144>)
 8004638:	2200      	movs	r2, #0
 800463a:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 800463c:	89fb      	ldrh	r3, [r7, #14]
 800463e:	4a4a      	ldr	r2, [pc, #296]	; (8004768 <menu3_fill+0x14c>)
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8004648:	7b7b      	ldrb	r3, [r7, #13]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4a47      	ldr	r2, [pc, #284]	; (800476c <menu3_fill+0x150>)
 800464e:	4413      	add	r3, r2
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <menu3_fill+0x154>)
 8004654:	6810      	ldr	r0, [r2, #0]
 8004656:	6851      	ldr	r1, [r2, #4]
 8004658:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 800465a:	4a46      	ldr	r2, [pc, #280]	; (8004774 <menu3_fill+0x158>)
 800465c:	1d3b      	adds	r3, r7, #4
 800465e:	6812      	ldr	r2, [r2, #0]
 8004660:	4611      	mov	r1, r2
 8004662:	8019      	strh	r1, [r3, #0]
 8004664:	3302      	adds	r3, #2
 8004666:	0c12      	lsrs	r2, r2, #16
 8004668:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 800466a:	89fb      	ldrh	r3, [r7, #14]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	461a      	mov	r2, r3
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <menu3_fill+0x15c>)
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	4618      	mov	r0, r3
 800467e:	f008 fb37 	bl	800ccf0 <atoi>
 8004682:	4603      	mov	r3, r0
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <menu3_fill+0x160>)
 8004688:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 800468a:	4b3c      	ldr	r3, [pc, #240]	; (800477c <menu3_fill+0x160>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	4837      	ldr	r0, [pc, #220]	; (8004770 <menu3_fill+0x154>)
 8004692:	f7fc fa81 	bl	8000b98 <menu_vars>
 8004696:	4603      	mov	r3, r0
 8004698:	4a39      	ldr	r2, [pc, #228]	; (8004780 <menu3_fill+0x164>)
 800469a:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 800469c:	4b38      	ldr	r3, [pc, #224]	; (8004780 <menu3_fill+0x164>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	4b37      	ldr	r3, [pc, #220]	; (8004784 <menu3_fill+0x168>)
 80046a6:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 80046a8:	4b37      	ldr	r3, [pc, #220]	; (8004788 <menu3_fill+0x16c>)
 80046aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046ae:	461a      	mov	r2, r3
 80046b0:	89fb      	ldrh	r3, [r7, #14]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d104      	bne.n	80046c0 <menu3_fill+0xa4>
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <menu3_fill+0x168>)
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	4b33      	ldr	r3, [pc, #204]	; (800478c <menu3_fill+0x170>)
 80046be:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 80046c0:	4b30      	ldr	r3, [pc, #192]	; (8004784 <menu3_fill+0x168>)
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <menu3_fill+0x174>)
 80046c8:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 80046ca:	4b31      	ldr	r3, [pc, #196]	; (8004790 <menu3_fill+0x174>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b09      	cmp	r3, #9
 80046d0:	d902      	bls.n	80046d8 <menu3_fill+0xbc>
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <menu3_fill+0x174>)
 80046d4:	2209      	movs	r2, #9
 80046d6:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <menu3_fill+0x14c>)
 80046dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e0:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 80046e2:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <menu3_fill+0x174>)
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	897b      	ldrh	r3, [r7, #10]
 80046e8:	3230      	adds	r2, #48	; 0x30
 80046ea:	b2d1      	uxtb	r1, r2
 80046ec:	4a29      	ldr	r2, [pc, #164]	; (8004794 <menu3_fill+0x178>)
 80046ee:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 80046f0:	4b29      	ldr	r3, [pc, #164]	; (8004798 <menu3_fill+0x17c>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b35      	cmp	r3, #53	; 0x35
 80046f6:	d105      	bne.n	8004704 <menu3_fill+0xe8>
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <menu3_fill+0x168>)
 80046fa:	881a      	ldrh	r2, [r3, #0]
 80046fc:	897b      	ldrh	r3, [r7, #10]
 80046fe:	b2d1      	uxtb	r1, r2
 8004700:	4a24      	ldr	r2, [pc, #144]	; (8004794 <menu3_fill+0x178>)
 8004702:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004704:	4b24      	ldr	r3, [pc, #144]	; (8004798 <menu3_fill+0x17c>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b18      	cmp	r3, #24
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2da      	uxtb	r2, r3
 8004712:	4b21      	ldr	r3, [pc, #132]	; (8004798 <menu3_fill+0x17c>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b19      	cmp	r3, #25
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <menu3_fill+0x11e>
 8004728:	4b16      	ldr	r3, [pc, #88]	; (8004784 <menu3_fill+0x168>)
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	f003 021f 	and.w	r2, r3, #31
 8004730:	897b      	ldrh	r3, [r7, #10]
 8004732:	491a      	ldr	r1, [pc, #104]	; (800479c <menu3_fill+0x180>)
 8004734:	5c89      	ldrb	r1, [r1, r2]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <menu3_fill+0x178>)
 8004738:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 800473a:	4b09      	ldr	r3, [pc, #36]	; (8004760 <menu3_fill+0x144>)
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	3301      	adds	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <menu3_fill+0x144>)
 8004744:	801a      	strh	r2, [r3, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 8004746:	4b06      	ldr	r3, [pc, #24]	; (8004760 <menu3_fill+0x144>)
 8004748:	881a      	ldrh	r2, [r3, #0]
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <menu3_fill+0x148>)
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d902      	bls.n	8004758 <menu3_fill+0x13c>
 8004752:	4b03      	ldr	r3, [pc, #12]	; (8004760 <menu3_fill+0x144>)
 8004754:	2200      	movs	r2, #0
 8004756:	801a      	strh	r2, [r3, #0]

    }
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20010e70 	.word	0x20010e70
 8004764:	2000e02a 	.word	0x2000e02a
 8004768:	2000e02c 	.word	0x2000e02c
 800476c:	20000000 	.word	0x20000000
 8004770:	2000ec30 	.word	0x2000ec30
 8004774:	0800d4f8 	.word	0x0800d4f8
 8004778:	2000e82c 	.word	0x2000e82c
 800477c:	2000ec38 	.word	0x2000ec38
 8004780:	2000ec2c 	.word	0x2000ec2c
 8004784:	2000ca3c 	.word	0x2000ca3c
 8004788:	20008ee0 	.word	0x20008ee0
 800478c:	2000ec3e 	.word	0x2000ec3e
 8004790:	20010c6a 	.word	0x20010c6a
 8004794:	20008f7c 	.word	0x20008f7c
 8004798:	20010c69 	.word	0x20010c69
 800479c:	0800e830 	.word	0x0800e830

080047a0 <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 80047a4:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <LCD_Info_feedback+0x154>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	4a53      	ldr	r2, [pc, #332]	; (80048f8 <LCD_Info_feedback+0x158>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	095b      	lsrs	r3, r3, #5
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	3330      	adds	r3, #48	; 0x30
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <LCD_Info_feedback+0x15c>)
 80047b8:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 80047bc:	4b4d      	ldr	r3, [pc, #308]	; (80048f4 <LCD_Info_feedback+0x154>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	4a4d      	ldr	r2, [pc, #308]	; (80048f8 <LCD_Info_feedback+0x158>)
 80047c2:	fba2 1203 	umull	r1, r2, r2, r3
 80047c6:	0952      	lsrs	r2, r2, #5
 80047c8:	2164      	movs	r1, #100	; 0x64
 80047ca:	fb01 f202 	mul.w	r2, r1, r2
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <LCD_Info_feedback+0x160>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	08db      	lsrs	r3, r3, #3
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3330      	adds	r3, #48	; 0x30
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	4b46      	ldr	r3, [pc, #280]	; (80048fc <LCD_Info_feedback+0x15c>)
 80047e2:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			    potSource[382]=(lcd_temp%10)+48;
 80047e6:	4b43      	ldr	r3, [pc, #268]	; (80048f4 <LCD_Info_feedback+0x154>)
 80047e8:	781a      	ldrb	r2, [r3, #0]
 80047ea:	4b45      	ldr	r3, [pc, #276]	; (8004900 <LCD_Info_feedback+0x160>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	08d9      	lsrs	r1, r3, #3
 80047f2:	460b      	mov	r3, r1
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	3330      	adds	r3, #48	; 0x30
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4b3e      	ldr	r3, [pc, #248]	; (80048fc <LCD_Info_feedback+0x15c>)
 8004804:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

			    LCD_Info[0]  =( seq.pos/100) +48;
 8004808:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <LCD_Info_feedback+0x164>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <LCD_Info_feedback+0x158>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	095b      	lsrs	r3, r3, #5
 8004814:	b2db      	uxtb	r3, r3
 8004816:	3330      	adds	r3, #48	; 0x30
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <LCD_Info_feedback+0x168>)
 800481c:	701a      	strb	r2, [r3, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 800481e:	4b39      	ldr	r3, [pc, #228]	; (8004904 <LCD_Info_feedback+0x164>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	4a35      	ldr	r2, [pc, #212]	; (80048f8 <LCD_Info_feedback+0x158>)
 8004824:	fba2 1203 	umull	r1, r2, r2, r3
 8004828:	0952      	lsrs	r2, r2, #5
 800482a:	2164      	movs	r1, #100	; 0x64
 800482c:	fb01 f202 	mul.w	r2, r1, r2
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	b2db      	uxtb	r3, r3
 8004834:	4a32      	ldr	r2, [pc, #200]	; (8004900 <LCD_Info_feedback+0x160>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	3330      	adds	r3, #48	; 0x30
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4b31      	ldr	r3, [pc, #196]	; (8004908 <LCD_Info_feedback+0x168>)
 8004844:	705a      	strb	r2, [r3, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8004846:	4b2f      	ldr	r3, [pc, #188]	; (8004904 <LCD_Info_feedback+0x164>)
 8004848:	781a      	ldrb	r2, [r3, #0]
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <LCD_Info_feedback+0x160>)
 800484c:	fba3 1302 	umull	r1, r3, r3, r2
 8004850:	08d9      	lsrs	r1, r3, #3
 8004852:	460b      	mov	r3, r1
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	440b      	add	r3, r1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	3330      	adds	r3, #48	; 0x30
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4b29      	ldr	r3, [pc, #164]	; (8004908 <LCD_Info_feedback+0x168>)
 8004864:	709a      	strb	r2, [r3, #2]

			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 8004866:	4b27      	ldr	r3, [pc, #156]	; (8004904 <LCD_Info_feedback+0x164>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3331      	adds	r3, #49	; 0x31
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b25      	ldr	r3, [pc, #148]	; (8004908 <LCD_Info_feedback+0x168>)
 8004874:	72da      	strb	r2, [r3, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 8004876:	4b23      	ldr	r3, [pc, #140]	; (8004904 <LCD_Info_feedback+0x164>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	111b      	asrs	r3, r3, #4
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	3331      	adds	r3, #49	; 0x31
 8004886:	b2da      	uxtb	r2, r3
 8004888:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <LCD_Info_feedback+0x168>)
 800488a:	731a      	strb	r2, [r3, #12]
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <LCD_Info_feedback+0x164>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <LCD_Info_feedback+0x158>)
 8004898:	fb83 1302 	smull	r1, r3, r3, r2
 800489c:	1159      	asrs	r1, r3, #5
 800489e:	17d3      	asrs	r3, r2, #31
 80048a0:	1acb      	subs	r3, r1, r3
 80048a2:	2164      	movs	r1, #100	; 0x64
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <LCD_Info_feedback+0x16c>)
 80048ac:	fb82 1203 	smull	r1, r2, r2, r3
 80048b0:	1092      	asrs	r2, r2, #2
 80048b2:	17db      	asrs	r3, r3, #31
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3330      	adds	r3, #48	; 0x30
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b12      	ldr	r3, [pc, #72]	; (8004908 <LCD_Info_feedback+0x168>)
 80048be:	735a      	strb	r2, [r3, #13]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 80048c0:	4b10      	ldr	r3, [pc, #64]	; (8004904 <LCD_Info_feedback+0x164>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <LCD_Info_feedback+0x16c>)
 80048cc:	fb83 1302 	smull	r1, r3, r3, r2
 80048d0:	1099      	asrs	r1, r3, #2
 80048d2:	17d3      	asrs	r3, r2, #31
 80048d4:	1ac9      	subs	r1, r1, r3
 80048d6:	460b      	mov	r3, r1
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	1ad1      	subs	r1, r2, r3
 80048e0:	b2cb      	uxtb	r3, r1
 80048e2:	3330      	adds	r3, #48	; 0x30
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b08      	ldr	r3, [pc, #32]	; (8004908 <LCD_Info_feedback+0x168>)
 80048e8:	739a      	strb	r2, [r3, #14]



    }
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	2000ec3e 	.word	0x2000ec3e
 80048f8:	51eb851f 	.word	0x51eb851f
 80048fc:	200095e0 	.word	0x200095e0
 8004900:	cccccccd 	.word	0xcccccccd
 8004904:	2000dc84 	.word	0x2000dc84
 8004908:	20012084 	.word	0x20012084
 800490c:	66666667 	.word	0x66666667

08004910 <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 8004910:	b580      	push	{r7, lr}
 8004912:	b08c      	sub	sp, #48	; 0x30
 8004914:	af02      	add	r7, sp, #8
 8004916:	4603      	mov	r3, r0
 8004918:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004920:	d301      	bcc.n	8004926 <sampler_ram_clear_test+0x16>
 8004922:	2300      	movs	r3, #0
 8004924:	e044      	b.n	80049b0 <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 8004926:	f001 f8a7 	bl	8005a78 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 8004930:	2300      	movs	r3, #0
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	f107 030c 	add.w	r3, r7, #12
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 8004944:	2303      	movs	r3, #3
 8004946:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	b2db      	uxtb	r3, r3
 8004950:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	01db      	lsls	r3, r3, #7
 8004956:	b2db      	uxtb	r3, r3
 8004958:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 800495a:	2300      	movs	r3, #0
 800495c:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 800495e:	2200      	movs	r2, #0
 8004960:	2110      	movs	r1, #16
 8004962:	4815      	ldr	r0, [pc, #84]	; (80049b8 <sampler_ram_clear_test+0xa8>)
 8004964:	f004 f81c 	bl	80089a0 <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 8004968:	f107 0208 	add.w	r2, r7, #8
 800496c:	f107 0108 	add.w	r1, r7, #8
 8004970:	2364      	movs	r3, #100	; 0x64
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2318      	movs	r3, #24
 8004976:	4811      	ldr	r0, [pc, #68]	; (80049bc <sampler_ram_clear_test+0xac>)
 8004978:	f005 fe21 	bl	800a5be <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 800497c:	2201      	movs	r2, #1
 800497e:	2110      	movs	r1, #16
 8004980:	480d      	ldr	r0, [pc, #52]	; (80049b8 <sampler_ram_clear_test+0xa8>)
 8004982:	f004 f80d 	bl	80089a0 <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004990:	2b13      	cmp	r3, #19
 8004992:	d80c      	bhi.n	80049ae <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 8004994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004998:	3314      	adds	r3, #20
 800499a:	3328      	adds	r3, #40	; 0x28
 800499c:	443b      	add	r3, r7
 800499e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80049a2:	2bff      	cmp	r3, #255	; 0xff
 80049a4:	d001      	beq.n	80049aa <sampler_ram_clear_test+0x9a>
 80049a6:	2300      	movs	r3, #0
 80049a8:	e002      	b.n	80049b0 <sampler_ram_clear_test+0xa0>
 80049aa:	230f      	movs	r3, #15
 80049ac:	e000      	b.n	80049b0 <sampler_ram_clear_test+0xa0>

	}
	return 15;
 80049ae:	230f      	movs	r3, #15
    }
 80049b0:	4618      	mov	r0, r3
 80049b2:	3728      	adds	r7, #40	; 0x28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40020000 	.word	0x40020000
 80049bc:	20012830 	.word	0x20012830

080049c0 <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b0c8      	sub	sp, #288	; 0x120
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80049ce:	6019      	str	r1, [r3, #0]
 80049d0:	4611      	mov	r1, r2
 80049d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049d6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80049da:	4602      	mov	r2, r0
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80049e6:	460a      	mov	r2, r1
 80049e8:	801a      	strh	r2, [r3, #0]

		stop_toggle=1;  stop_start();   // halt for slow write
 80049ea:	4bad      	ldr	r3, [pc, #692]	; (8004ca0 <sample_save+0x2e0>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	f001 fbec 	bl	80061cc <stop_start>

		uint8_t spi_test[270]={0};
 80049f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80049f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f008 f9ad 	bl	800cd68 <memset>
		if (sample_number>509) return ;
 8004a0e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a12:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004a1c:	f080 8139 	bcs.w	8004c92 <sample_save+0x2d2>



			spi_test[1]=sample_number>>1; //24bit address msb
 8004a20:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a24:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a38:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 8004a3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a3e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	01db      	lsls	r3, r3, #7
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a50:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 8004a52:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	70da      	strb	r2, [r3, #3]

				//----formAT SECTION
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 8004a5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a66:	2206      	movs	r2, #6
 8004a68:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2110      	movs	r1, #16
 8004a6e:	488d      	ldr	r0, [pc, #564]	; (8004ca4 <sample_save+0x2e4>)
 8004a70:	f003 ff96 	bl	80089a0 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 8004a74:	f107 010c 	add.w	r1, r7, #12
 8004a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	488a      	ldr	r0, [pc, #552]	; (8004ca8 <sample_save+0x2e8>)
 8004a80:	f005 fc61 	bl	800a346 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8004a84:	2201      	movs	r2, #1
 8004a86:	2110      	movs	r1, #16
 8004a88:	4886      	ldr	r0, [pc, #536]	; (8004ca4 <sample_save+0x2e4>)
 8004a8a:	f003 ff89 	bl	80089a0 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8004a8e:	2005      	movs	r0, #5
 8004a90:	f002 f87c 	bl	8006b8c <HAL_Delay>
					spi_test[0]=0x52; //block
 8004a94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004a98:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004a9c:	2252      	movs	r2, #82	; 0x52
 8004a9e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	487f      	ldr	r0, [pc, #508]	; (8004ca4 <sample_save+0x2e4>)
 8004aa6:	f003 ff7b 	bl	80089a0 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 8004aaa:	f107 010c 	add.w	r1, r7, #12
 8004aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	487c      	ldr	r0, [pc, #496]	; (8004ca8 <sample_save+0x2e8>)
 8004ab6:	f005 fc46 	bl	800a346 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004aba:	2201      	movs	r2, #1
 8004abc:	2110      	movs	r1, #16
 8004abe:	4879      	ldr	r0, [pc, #484]	; (8004ca4 <sample_save+0x2e4>)
 8004ac0:	f003 ff6e 	bl	80089a0 <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 8004ac4:	20fa      	movs	r0, #250	; 0xfa
 8004ac6:	f002 f861 	bl	8006b8c <HAL_Delay>



					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004aca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ace:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff1b 	bl	8004910 <sampler_ram_clear_test>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80da 	beq.w	8004c96 <sample_save+0x2d6>


		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 8004ae2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ae6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004aea:	2203      	movs	r2, #3
 8004aec:	701a      	strb	r2, [r3, #0]

			uint16_t write_counter=0;    // write start location
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 8004af4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004af8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	01db      	lsls	r3, r3, #7
 8004b00:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 8004b04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b08:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004b0c:	881b      	ldrh	r3, [r3, #0]
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 8004b16:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da02      	bge.n	8004b24 <sample_save+0x164>
 8004b1e:	237f      	movs	r3, #127	; 0x7f
 8004b20:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 8004b24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b2c:	2206      	movs	r2, #6
 8004b2e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2110      	movs	r1, #16
 8004b34:	485b      	ldr	r0, [pc, #364]	; (8004ca4 <sample_save+0x2e4>)
 8004b36:	f003 ff33 	bl	80089a0 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004b3a:	f107 010c 	add.w	r1, r7, #12
 8004b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b42:	2201      	movs	r2, #1
 8004b44:	4858      	ldr	r0, [pc, #352]	; (8004ca8 <sample_save+0x2e8>)
 8004b46:	f005 fbfe 	bl	800a346 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2110      	movs	r1, #16
 8004b4e:	4855      	ldr	r0, [pc, #340]	; (8004ca4 <sample_save+0x2e4>)
 8004b50:	f003 ff26 	bl	80089a0 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8004b54:	2005      	movs	r0, #5
 8004b56:	f002 f819 	bl	8006b8c <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004b60:	e06f      	b.n	8004c42 <sample_save+0x282>

					    spi_test[0]=0x02; //write
 8004b62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 8004b6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b72:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	085b      	lsrs	r3, r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b86:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8004b88:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004b92:	4413      	add	r3, r2
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004b9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b9e:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 8004ba0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004ba4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004ba8:	2200      	movs	r2, #0
 8004baa:	70da      	strb	r2, [r3, #3]

					//   spi_test[1]=255; //24bit address msb
					    			//		spi_test[2]=127+write_counter; //24bit address
					    			//		spi_test[3]=0; //24bit address lsb

					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004bb6:	0212      	lsls	r2, r2, #8
 8004bb8:	4611      	mov	r1, r2
 8004bba:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8004bbe:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	4411      	add	r1, r2
 8004bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f008 f8be 	bl	800cd4c <memcpy>

					    spi_test[0]=0x06; //enable write each time
 8004bd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004bd4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004bd8:	2206      	movs	r2, #6
 8004bda:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004bdc:	2200      	movs	r2, #0
 8004bde:	2110      	movs	r1, #16
 8004be0:	4830      	ldr	r0, [pc, #192]	; (8004ca4 <sample_save+0x2e4>)
 8004be2:	f003 fedd 	bl	80089a0 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004be6:	f107 010c 	add.w	r1, r7, #12
 8004bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bee:	2201      	movs	r2, #1
 8004bf0:	482d      	ldr	r0, [pc, #180]	; (8004ca8 <sample_save+0x2e8>)
 8004bf2:	f005 fba8 	bl	800a346 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	482a      	ldr	r0, [pc, #168]	; (8004ca4 <sample_save+0x2e4>)
 8004bfc:	f003 fed0 	bl	80089a0 <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 8004c00:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c08:	2202      	movs	r2, #2
 8004c0a:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2110      	movs	r1, #16
 8004c10:	4824      	ldr	r0, [pc, #144]	; (8004ca4 <sample_save+0x2e4>)
 8004c12:	f003 fec5 	bl	80089a0 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 8004c16:	f107 010c 	add.w	r1, r7, #12
 8004c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c1e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c22:	4821      	ldr	r0, [pc, #132]	; (8004ca8 <sample_save+0x2e8>)
 8004c24:	f005 fb8f 	bl	800a346 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8004c28:	2201      	movs	r2, #1
 8004c2a:	2110      	movs	r1, #16
 8004c2c:	481d      	ldr	r0, [pc, #116]	; (8004ca4 <sample_save+0x2e4>)
 8004c2e:	f003 feb7 	bl	80089a0 <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8004c32:	200a      	movs	r0, #10
 8004c34:	f001 ffaa 	bl	8006b8c <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004c38:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004c42:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d988      	bls.n	8004b62 <sample_save+0x1a2>

					}


					spi_test[0]=0x04; //disable write
 8004c50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004c54:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004c58:	2204      	movs	r2, #4
 8004c5a:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2110      	movs	r1, #16
 8004c60:	4810      	ldr	r0, [pc, #64]	; (8004ca4 <sample_save+0x2e4>)
 8004c62:	f003 fe9d 	bl	80089a0 <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004c66:	f107 010c 	add.w	r1, r7, #12
 8004c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c6e:	2201      	movs	r2, #1
 8004c70:	480d      	ldr	r0, [pc, #52]	; (8004ca8 <sample_save+0x2e8>)
 8004c72:	f005 fb68 	bl	800a346 <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8004c76:	2201      	movs	r2, #1
 8004c78:	2110      	movs	r1, #16
 8004c7a:	480a      	ldr	r0, [pc, #40]	; (8004ca4 <sample_save+0x2e4>)
 8004c7c:	f003 fe90 	bl	80089a0 <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8004c80:	2014      	movs	r0, #20
 8004c82:	f001 ff83 	bl	8006b8c <HAL_Delay>


	 stop_toggle=2;  stop_start();  		// restart
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <sample_save+0x2e0>)
 8004c88:	2202      	movs	r2, #2
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	f001 fa9e 	bl	80061cc <stop_start>
 8004c90:	e002      	b.n	8004c98 <sample_save+0x2d8>
		if (sample_number>509) return ;
 8004c92:	bf00      	nop
 8004c94:	e000      	b.n	8004c98 <sample_save+0x2d8>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004c96:	bf00      	nop

	    }
 8004c98:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20012728 	.word	0x20012728
 8004ca4:	40020000 	.word	0x40020000
 8004ca8:	20012830 	.word	0x20012830

08004cac <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 8004cac:	b580      	push	{r7, lr}
 8004cae:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004cb8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004cbc:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 8004cbe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004cc2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	f240 4202 	movw	r2, #1026	; 0x402
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f008 f848 	bl	800cd68 <memset>

	    load_address=load_address& 16777215; // 24 bit
 8004cd8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004cdc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004ce0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8004ce4:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cee:	601a      	str	r2, [r3, #0]
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004cf0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004cf4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4c      	ldr	r2, [pc, #304]	; (8004e2c <sampler_1k_load+0x180>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	f200 808f 	bhi.w	8004e20 <sampler_1k_load+0x174>
	    send_spi2[0]=0x03; //read page 1
 8004d02:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d06:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 8004d0e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d12:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d20:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d24:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 8004d26:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d2a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d38:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d3c:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 8004d3e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d42:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d4e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d52:	70da      	strb	r2, [r3, #3]

	    current_spi[0]=send_spi2[0];   // to track  later
 8004d54:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d58:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	4b34      	ldr	r3, [pc, #208]	; (8004e30 <sampler_1k_load+0x184>)
 8004d60:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 8004d62:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d66:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d6a:	785a      	ldrb	r2, [r3, #1]
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <sampler_1k_load+0x184>)
 8004d6e:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 8004d70:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d74:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d78:	789a      	ldrb	r2, [r3, #2]
 8004d7a:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <sampler_1k_load+0x184>)
 8004d7c:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 8004d7e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004d82:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004d86:	78da      	ldrb	r2, [r3, #3]
 8004d88:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <sampler_1k_load+0x184>)
 8004d8a:	70da      	strb	r2, [r3, #3]

	    if ((flash_flag==3)&&(flash_bank_read==0))  {   memcpy( &flash_read_block, flash_read_block2+516,512); flash_flag=4; }  // second half
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <sampler_1k_load+0x188>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d10d      	bne.n	8004db2 <sampler_1k_load+0x106>
 8004d96:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <sampler_1k_load+0x18c>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <sampler_1k_load+0x106>
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <sampler_1k_load+0x190>)
 8004da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da4:	4619      	mov	r1, r3
 8004da6:	4826      	ldr	r0, [pc, #152]	; (8004e40 <sampler_1k_load+0x194>)
 8004da8:	f007 ffd0 	bl	800cd4c <memcpy>
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <sampler_1k_load+0x188>)
 8004dae:	2204      	movs	r2, #4
 8004db0:	701a      	strb	r2, [r3, #0]
	    if ((flash_flag==2)&&(flash_bank_read==1))   {   memcpy( &flash_read_block, flash_read_block2+4,512);   flash_flag=3;           }  // second half
 8004db2:	4b20      	ldr	r3, [pc, #128]	; (8004e34 <sampler_1k_load+0x188>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d10d      	bne.n	8004dd8 <sampler_1k_load+0x12c>
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <sampler_1k_load+0x18c>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d109      	bne.n	8004dd8 <sampler_1k_load+0x12c>
 8004dc4:	4b1f      	ldr	r3, [pc, #124]	; (8004e44 <sampler_1k_load+0x198>)
 8004dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dca:	4619      	mov	r1, r3
 8004dcc:	481c      	ldr	r0, [pc, #112]	; (8004e40 <sampler_1k_load+0x194>)
 8004dce:	f007 ffbd 	bl	800cd4c <memcpy>
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <sampler_1k_load+0x188>)
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	701a      	strb	r2, [r3, #0]
	    flash_bank_read=!flash_bank_read;
 8004dd8:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <sampler_1k_load+0x18c>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	461a      	mov	r2, r3
 8004de8:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <sampler_1k_load+0x18c>)
 8004dea:	701a      	strb	r2, [r3, #0]

		    if ((flash_flag==4)&&  (flash_bank_read==1) )    {
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <sampler_1k_load+0x188>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d115      	bne.n	8004e22 <sampler_1k_load+0x176>
 8004df6:	4b10      	ldr	r3, [pc, #64]	; (8004e38 <sampler_1k_load+0x18c>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d111      	bne.n	8004e22 <sampler_1k_load+0x176>

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2110      	movs	r1, #16
 8004e02:	4811      	ldr	r0, [pc, #68]	; (8004e48 <sampler_1k_load+0x19c>)
 8004e04:	f003 fdcc 	bl	80089a0 <HAL_GPIO_WritePin>
 8004e08:	f107 0108 	add.w	r1, r7, #8
 8004e0c:	f240 4304 	movw	r3, #1028	; 0x404
 8004e10:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <sampler_1k_load+0x1a0>)
 8004e12:	480f      	ldr	r0, [pc, #60]	; (8004e50 <sampler_1k_load+0x1a4>)
 8004e14:	f005 fe2c 	bl	800aa70 <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible internet advice , put cs low before not after  !
		    flash_flag=0;  }
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <sampler_1k_load+0x188>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e000      	b.n	8004e22 <sampler_1k_load+0x176>
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004e20:	bf00      	nop

	}
 8004e22:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	00febfff 	.word	0x00febfff
 8004e30:	20012724 	.word	0x20012724
 8004e34:	20008eec 	.word	0x20008eec
 8004e38:	2001271e 	.word	0x2001271e
 8004e3c:	2001251c 	.word	0x2001251c
 8004e40:	20012104 	.word	0x20012104
 8004e44:	2001231c 	.word	0x2001231c
 8004e48:	40020000 	.word	0x40020000
 8004e4c:	20012318 	.word	0x20012318
 8004e50:	20012830 	.word	0x20012830

08004e54 <sampler_ram_record>:
	void sampler_ram_record(void) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <sampler_ram_record+0x64>)
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d104      	bne.n	8004e6a <sampler_ram_record+0x16>
 8004e60:	4b16      	ldr	r3, [pc, #88]	; (8004ebc <sampler_ram_record+0x68>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	f001 f9b1 	bl	80061cc <stop_start>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 8004e6a:	4b13      	ldr	r3, [pc, #76]	; (8004eb8 <sampler_ram_record+0x64>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <sampler_ram_record+0x6c>)
 8004e72:	4413      	add	r3, r2
 8004e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e78:	4912      	ldr	r1, [pc, #72]	; (8004ec4 <sampler_ram_record+0x70>)
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f007 ff66 	bl	800cd4c <memcpy>
	record_counter =record_counter+1024;
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <sampler_ram_record+0x64>)
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <sampler_ram_record+0x64>)
 8004e8c:	801a      	strh	r2, [r3, #0]
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 8004e8e:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <sampler_ram_record+0x64>)
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d90c      	bls.n	8004eb4 <sampler_ram_record+0x60>
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <sampler_ram_record+0x64>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <sampler_ram_record+0x74>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	739a      	strb	r2, [r3, #14]
 8004ea6:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <sampler_ram_record+0x68>)
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	f000 f810 	bl	8004ed0 <RAM_normalise>
 8004eb0:	f001 f98c 	bl	80061cc <stop_start>

	}
 8004eb4:	bf00      	nop
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20012730 	.word	0x20012730
 8004ebc:	20012728 	.word	0x20012728
 8004ec0:	200001ac 	.word	0x200001ac
 8004ec4:	2000ca40 	.word	0x2000ca40
 8004ec8:	20008ebc 	.word	0x20008ebc
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <RAM_normalise>:

void RAM_normalise(void){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
	    uint16_t counter=0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	81fb      	strh	r3, [r7, #14]
	    uint16_t peak=0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	81bb      	strh	r3, [r7, #12]
	    uint16_t*   ram_ptr=  &RAM;
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <RAM_normalise+0xe8>)
 8004ee0:	60bb      	str	r3, [r7, #8]
	    float process1=32767 ;
 8004ee2:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <RAM_normalise+0xec>)
 8004ee4:	607b      	str	r3, [r7, #4]
	   int32_t incoming;
	    for (counter=0;counter<16384;counter++){
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	81fb      	strh	r3, [r7, #14]
 8004eea:	e00e      	b.n	8004f0a <RAM_normalise+0x3a>

		incoming= *(ram_ptr+counter);
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	603b      	str	r3, [r7, #0]
		if (incoming>peak ) peak=incoming;
 8004ef8:	89bb      	ldrh	r3, [r7, #12]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	dd01      	ble.n	8004f04 <RAM_normalise+0x34>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	81bb      	strh	r3, [r7, #12]
	    for (counter=0;counter<16384;counter++){
 8004f04:	89fb      	ldrh	r3, [r7, #14]
 8004f06:	3301      	adds	r3, #1
 8004f08:	81fb      	strh	r3, [r7, #14]
 8004f0a:	89fb      	ldrh	r3, [r7, #14]
 8004f0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f10:	d3ec      	bcc.n	8004eec <RAM_normalise+0x1c>
	    }
	    process1=(32767/(peak-process1))*0.9;
 8004f12:	89bb      	ldrh	r3, [r7, #12]
 8004f14:	ee07 3a90 	vmov	s15, r3
 8004f18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f24:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004fc0 <RAM_normalise+0xf0>
 8004f28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004f2c:	ee16 0a90 	vmov	r0, s13
 8004f30:	f7fb fbe8 	bl	8000704 <__aeabi_f2d>
 8004f34:	a31e      	add	r3, pc, #120	; (adr r3, 8004fb0 <RAM_normalise+0xe0>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb f955 	bl	80001e8 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	f7fb fc55 	bl	80007f4 <__aeabi_d2f>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	607b      	str	r3, [r7, #4]

	    for (counter=0;counter<16384;counter++){
 8004f4e:	2300      	movs	r3, #0
 8004f50:	81fb      	strh	r3, [r7, #14]
 8004f52:	e024      	b.n	8004f9e <RAM_normalise+0xce>
		incoming= (*(ram_ptr+counter))-32767;
 8004f54:	89fb      	ldrh	r3, [r7, #14]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8004f62:	3b7f      	subs	r3, #127	; 0x7f
 8004f64:	603b      	str	r3, [r7, #0]
		incoming=(incoming*process1)+32767;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f78:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004fc0 <RAM_normalise+0xf0>
 8004f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f84:	ee17 3a90 	vmov	r3, s15
 8004f88:	603b      	str	r3, [r7, #0]

		*(ram_ptr+counter)=incoming&65535;
 8004f8a:	89fb      	ldrh	r3, [r7, #14]
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4413      	add	r3, r2
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	b292      	uxth	r2, r2
 8004f96:	801a      	strh	r2, [r3, #0]
	    for (counter=0;counter<16384;counter++){
 8004f98:	89fb      	ldrh	r3, [r7, #14]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	81fb      	strh	r3, [r7, #14]
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa4:	d3d6      	bcc.n	8004f54 <RAM_normalise+0x84>

	    }

	}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	cccccccd 	.word	0xcccccccd
 8004fb4:	3feccccc 	.word	0x3feccccc
 8004fb8:	200001ac 	.word	0x200001ac
 8004fbc:	46fffe00 	.word	0x46fffe00
 8004fc0:	46fffe00 	.word	0x46fffe00

08004fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fc6:	b0a7      	sub	sp, #156	; 0x9c
 8004fc8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fca:	f001 fd6d 	bl	8006aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fce:	f000 fc25 	bl	800581c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fd2:	f000 ffcd 	bl	8005f70 <MX_GPIO_Init>
  MX_DMA_Init();
 8004fd6:	f000 ff85 	bl	8005ee4 <MX_DMA_Init>
  MX_ADC1_Init();
 8004fda:	f000 fc89 	bl	80058f0 <MX_ADC1_Init>
  MX_SPI2_Init();
 8004fde:	f000 fd81 	bl	8005ae4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004fe2:	f000 fe09 	bl	8005bf8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004fe6:	f000 fe89 	bl	8005cfc <MX_TIM4_Init>
  MX_I2C2_Init();
 8004fea:	f000 fd17 	bl	8005a1c <MX_I2C2_Init>
  MX_SPI1_Init();
 8004fee:	f000 fd43 	bl	8005a78 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004ff2:	f000 ff23 	bl	8005e3c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004ff6:	f000 ff4b 	bl	8005e90 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8004ffa:	f000 fed5 	bl	8005da8 <MX_TIM10_Init>
  MX_TIM2_Init();
 8004ffe:	f000 fda7 	bl	8005b50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 8005002:	f7fc fd15 	bl	8001a30 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8005006:	4bb7      	ldr	r3, [pc, #732]	; (80052e4 <main+0x320>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	b2da      	uxtb	r2, r3
 800500e:	4bb5      	ldr	r3, [pc, #724]	; (80052e4 <main+0x320>)
 8005010:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8005012:	4bb5      	ldr	r3, [pc, #724]	; (80052e8 <main+0x324>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3301      	adds	r3, #1
 8005018:	4ab3      	ldr	r2, [pc, #716]	; (80052e8 <main+0x324>)
 800501a:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  uint32_t  millis = HAL_GetTick();
 800501c:	f001 fdaa 	bl	8006b74 <HAL_GetTick>
 8005020:	67f8      	str	r0, [r7, #124]	; 0x7c


	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8005022:	4bb1      	ldr	r3, [pc, #708]	; (80052e8 <main+0x324>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b06      	cmp	r3, #6
 800502c:	d101      	bne.n	8005032 <main+0x6e>
 800502e:	f7fc fc47 	bl	80018c0 <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8005032:	4bae      	ldr	r3, [pc, #696]	; (80052ec <main+0x328>)
 8005034:	785b      	ldrb	r3, [r3, #1]
 8005036:	2b27      	cmp	r3, #39	; 0x27
 8005038:	d80e      	bhi.n	8005058 <main+0x94>
 800503a:	4bad      	ldr	r3, [pc, #692]	; (80052f0 <main+0x32c>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <main+0x94>
 8005042:	4bab      	ldr	r3, [pc, #684]	; (80052f0 <main+0x32c>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	f001 f8c0 	bl	80061cc <stop_start>
 800504c:	4ba8      	ldr	r3, [pc, #672]	; (80052f0 <main+0x32c>)
 800504e:	2203      	movs	r2, #3
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	4ba6      	ldr	r3, [pc, #664]	; (80052ec <main+0x328>)
 8005054:	2232      	movs	r2, #50	; 0x32
 8005056:	705a      	strb	r2, [r3, #1]
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8005058:	4ba4      	ldr	r3, [pc, #656]	; (80052ec <main+0x328>)
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	2b27      	cmp	r3, #39	; 0x27
 800505e:	d80e      	bhi.n	800507e <main+0xba>
 8005060:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <main+0x32c>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d10a      	bne.n	800507e <main+0xba>
 8005068:	4ba1      	ldr	r3, [pc, #644]	; (80052f0 <main+0x32c>)
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	f001 f8ad 	bl	80061cc <stop_start>
 8005072:	4b9f      	ldr	r3, [pc, #636]	; (80052f0 <main+0x32c>)
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	4b9c      	ldr	r3, [pc, #624]	; (80052ec <main+0x328>)
 800507a:	2232      	movs	r2, #50	; 0x32
 800507c:	705a      	strb	r2, [r3, #1]

	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 800507e:	4b9a      	ldr	r3, [pc, #616]	; (80052e8 <main+0x324>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 8005086:	f040 8193 	bne.w	80053b0 <main+0x3ec>

		    if (mem_count>EPROM_limit) mem_count=0; else mem_count++;
 800508a:	4b9a      	ldr	r3, [pc, #616]	; (80052f4 <main+0x330>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	f240 2266 	movw	r2, #614	; 0x266
 8005092:	4293      	cmp	r3, r2
 8005094:	d903      	bls.n	800509e <main+0xda>
 8005096:	4b97      	ldr	r3, [pc, #604]	; (80052f4 <main+0x330>)
 8005098:	2200      	movs	r2, #0
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e005      	b.n	80050aa <main+0xe6>
 800509e:	4b95      	ldr	r3, [pc, #596]	; (80052f4 <main+0x330>)
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	3301      	adds	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	4b93      	ldr	r3, [pc, #588]	; (80052f4 <main+0x330>)
 80050a8:	801a      	strh	r2, [r3, #0]
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 80050aa:	4b92      	ldr	r3, [pc, #584]	; (80052f4 <main+0x330>)
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 80050b2:	d903      	bls.n	80050bc <main+0xf8>
 80050b4:	4b8f      	ldr	r3, [pc, #572]	; (80052f4 <main+0x330>)
 80050b6:	f240 12cd 	movw	r2, #461	; 0x1cd
 80050ba:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 80050bc:	f7fc f910 	bl	80012e0 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 80050c0:	2300      	movs	r3, #0
 80050c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			memcpy(potSource,&seq,46); // about 35
 80050c6:	4a8c      	ldr	r2, [pc, #560]	; (80052f8 <main+0x334>)
 80050c8:	4b88      	ldr	r3, [pc, #544]	; (80052ec <main+0x328>)
 80050ca:	4614      	mov	r4, r2
 80050cc:	461d      	mov	r5, r3
 80050ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80050da:	c407      	stmia	r4!, {r0, r1, r2}
 80050dc:	8023      	strh	r3, [r4, #0]
			memcpy(potSource+476,&sampler,11);
 80050de:	4b87      	ldr	r3, [pc, #540]	; (80052fc <main+0x338>)
 80050e0:	220b      	movs	r2, #11
 80050e2:	4987      	ldr	r1, [pc, #540]	; (8005300 <main+0x33c>)
 80050e4:	4618      	mov	r0, r3
 80050e6:	f007 fe31 	bl	800cd4c <memcpy>
			for(i=0;i<10;i++){
 80050ea:	4b86      	ldr	r3, [pc, #536]	; (8005304 <main+0x340>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e0a1      	b.n	8005236 <main+0x272>
					memcpy(potSource+156+(i*14),&note[i],14 );  //grab note settings ,112 total , works
 80050f2:	4b84      	ldr	r3, [pc, #528]	; (8005304 <main+0x340>)
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	4613      	mov	r3, r2
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	1a9b      	subs	r3, r3, r2
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	339c      	adds	r3, #156	; 0x9c
 8005102:	4a7d      	ldr	r2, [pc, #500]	; (80052f8 <main+0x334>)
 8005104:	1898      	adds	r0, r3, r2
 8005106:	4b7f      	ldr	r3, [pc, #508]	; (8005304 <main+0x340>)
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4a7c      	ldr	r2, [pc, #496]	; (8005308 <main+0x344>)
 8005116:	4413      	add	r3, r2
 8005118:	220e      	movs	r2, #14
 800511a:	4619      	mov	r1, r3
 800511c:	f007 fe16 	bl	800cd4c <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 8005120:	4b78      	ldr	r3, [pc, #480]	; (8005304 <main+0x340>)
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	332e      	adds	r3, #46	; 0x2e
 8005130:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <main+0x334>)
 8005132:	1898      	adds	r0, r3, r2
 8005134:	4b73      	ldr	r3, [pc, #460]	; (8005304 <main+0x340>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a72      	ldr	r2, [pc, #456]	; (800530c <main+0x348>)
 8005144:	4413      	add	r3, r2
 8005146:	2206      	movs	r2, #6
 8005148:	4619      	mov	r1, r3
 800514a:	f007 fdff 	bl	800cd4c <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 800514e:	4b6d      	ldr	r3, [pc, #436]	; (8005304 <main+0x340>)
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	336a      	adds	r3, #106	; 0x6a
 800515c:	4a66      	ldr	r2, [pc, #408]	; (80052f8 <main+0x334>)
 800515e:	1898      	adds	r0, r3, r2
 8005160:	4b68      	ldr	r3, [pc, #416]	; (8005304 <main+0x340>)
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	4a68      	ldr	r2, [pc, #416]	; (8005310 <main+0x34c>)
 8005170:	4413      	add	r3, r2
 8005172:	2205      	movs	r2, #5
 8005174:	4619      	mov	r1, r3
 8005176:	f007 fde9 	bl	800cd4c <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 800517a:	4b62      	ldr	r3, [pc, #392]	; (8005304 <main+0x340>)
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	4613      	mov	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4413      	add	r3, r2
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800518c:	4a5a      	ldr	r2, [pc, #360]	; (80052f8 <main+0x334>)
 800518e:	1898      	adds	r0, r3, r2
 8005190:	4b5c      	ldr	r3, [pc, #368]	; (8005304 <main+0x340>)
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	232c      	movs	r3, #44	; 0x2c
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	4a5d      	ldr	r2, [pc, #372]	; (8005314 <main+0x350>)
 800519e:	4413      	add	r3, r2
 80051a0:	2206      	movs	r2, #6
 80051a2:	4619      	mov	r1, r3
 80051a4:	f007 fdd2 	bl	800cd4c <memcpy>
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 80051a8:	4b56      	ldr	r3, [pc, #344]	; (8005304 <main+0x340>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80051ba:	4a4f      	ldr	r2, [pc, #316]	; (80052f8 <main+0x334>)
 80051bc:	1898      	adds	r0, r3, r2
 80051be:	4b51      	ldr	r3, [pc, #324]	; (8005304 <main+0x340>)
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	330a      	adds	r3, #10
 80051c4:	222c      	movs	r2, #44	; 0x2c
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	4a52      	ldr	r2, [pc, #328]	; (8005314 <main+0x350>)
 80051cc:	4413      	add	r3, r2
 80051ce:	2206      	movs	r2, #6
 80051d0:	4619      	mov	r1, r3
 80051d2:	f007 fdbb 	bl	800cd4c <memcpy>
				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80051d6:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <main+0x340>)
 80051d8:	881b      	ldrh	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	4613      	mov	r3, r2
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	4413      	add	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80051e8:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <main+0x334>)
 80051ea:	1898      	adds	r0, r3, r2
 80051ec:	4b45      	ldr	r3, [pc, #276]	; (8005304 <main+0x340>)
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4613      	mov	r3, r2
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	4413      	add	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	4a47      	ldr	r2, [pc, #284]	; (8005318 <main+0x354>)
 80051fc:	4413      	add	r3, r2
 80051fe:	2206      	movs	r2, #6
 8005200:	4619      	mov	r1, r3
 8005202:	f007 fda3 	bl	800cd4c <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8005206:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <main+0x340>)
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005210:	4a39      	ldr	r2, [pc, #228]	; (80052f8 <main+0x334>)
 8005212:	441a      	add	r2, r3
 8005214:	4b3b      	ldr	r3, [pc, #236]	; (8005304 <main+0x340>)
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	460b      	mov	r3, r1
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	493e      	ldr	r1, [pc, #248]	; (800531c <main+0x358>)
 8005224:	440b      	add	r3, r1
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6013      	str	r3, [r2, #0]
			for(i=0;i<10;i++){
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <main+0x340>)
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	4b34      	ldr	r3, [pc, #208]	; (8005304 <main+0x340>)
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	4b33      	ldr	r3, [pc, #204]	; (8005304 <main+0x340>)
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	2b09      	cmp	r3, #9
 800523c:	f67f af59 	bls.w	80050f2 <main+0x12e>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8005240:	2300      	movs	r3, #0
 8005242:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8005246:	2300      	movs	r3, #0
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	1d3b      	adds	r3, r7, #4
 800524c:	222e      	movs	r2, #46	; 0x2e
 800524e:	2100      	movs	r1, #0
 8005250:	4618      	mov	r0, r3
 8005252:	f007 fd89 	bl	800cd68 <memset>
			 uint8_t mem_verify_list[50]={0};
 8005256:	2300      	movs	r3, #0
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800525e:	222e      	movs	r2, #46	; 0x2e
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f007 fd80 	bl	800cd68 <memset>
			 uint8_t read_counter=0;
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 800526e:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <main+0x330>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <main+0x334>)
 8005276:	4413      	add	r3, r2
 8005278:	461c      	mov	r4, r3
 800527a:	463e      	mov	r6, r7
 800527c:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8005280:	4635      	mov	r5, r6
 8005282:	4623      	mov	r3, r4
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	6859      	ldr	r1, [r3, #4]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800528e:	3410      	adds	r4, #16
 8005290:	3610      	adds	r6, #16
 8005292:	4564      	cmp	r4, ip
 8005294:	d1f4      	bne.n	8005280 <main+0x2bc>
 8005296:	4632      	mov	r2, r6
 8005298:	4623      	mov	r3, r4
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800529e:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <main+0x330>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	019b      	lsls	r3, r3, #6
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <main+0x330>)
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4413      	add	r3, r2
 80052ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 80052be:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80052c2:	2364      	movs	r3, #100	; 0x64
 80052c4:	9302      	str	r3, [sp, #8]
 80052c6:	2332      	movs	r3, #50	; 0x32
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	2302      	movs	r3, #2
 80052d2:	21a0      	movs	r1, #160	; 0xa0
 80052d4:	4812      	ldr	r0, [pc, #72]	; (8005320 <main+0x35c>)
 80052d6:	f003 fdd3 	bl	8008e80 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80052e0:	e039      	b.n	8005356 <main+0x392>
 80052e2:	bf00      	nop
 80052e4:	20009846 	.word	0x20009846
 80052e8:	2000c0a0 	.word	0x2000c0a0
 80052ec:	2000dc84 	.word	0x2000dc84
 80052f0:	20012728 	.word	0x20012728
 80052f4:	2000c09e 	.word	0x2000c09e
 80052f8:	200095e0 	.word	0x200095e0
 80052fc:	200097bc 	.word	0x200097bc
 8005300:	20008ebc 	.word	0x20008ebc
 8005304:	2000984a 	.word	0x2000984a
 8005308:	20008e10 	.word	0x20008e10
 800530c:	2000ce4c 	.word	0x2000ce4c
 8005310:	2000d1f8 	.word	0x2000d1f8
 8005314:	2000dcb4 	.word	0x2000dcb4
 8005318:	2000d0f4 	.word	0x2000d0f4
 800531c:	2000d130 	.word	0x2000d130
 8005320:	200127dc 	.word	0x200127dc

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005324:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005328:	3388      	adds	r3, #136	; 0x88
 800532a:	443b      	add	r3, r7
 800532c:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 8005330:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005334:	3388      	adds	r3, #136	; 0x88
 8005336:	443b      	add	r3, r7
 8005338:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 800533c:	429a      	cmp	r2, r3
 800533e:	d10f      	bne.n	8005360 <main+0x39c>
			     mem_count++;
 8005340:	4b6e      	ldr	r3, [pc, #440]	; (80054fc <main+0x538>)
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	4b6c      	ldr	r3, [pc, #432]	; (80054fc <main+0x538>)
 800534a:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 800534c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005350:	3301      	adds	r3, #1
 8005352:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005356:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800535a:	2b31      	cmp	r3, #49	; 0x31
 800535c:	d9e2      	bls.n	8005324 <main+0x360>
 800535e:	e000      	b.n	8005362 <main+0x39e>
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005360:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8005362:	4b66      	ldr	r3, [pc, #408]	; (80054fc <main+0x538>)
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	4b65      	ldr	r3, [pc, #404]	; (8005500 <main+0x53c>)
 800536a:	5c9a      	ldrb	r2, [r3, r2]
 800536c:	4b65      	ldr	r3, [pc, #404]	; (8005504 <main+0x540>)
 800536e:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8005370:	4b62      	ldr	r3, [pc, #392]	; (80054fc <main+0x538>)
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	b29b      	uxth	r3, r3
 8005378:	3301      	adds	r3, #1
 800537a:	b29b      	uxth	r3, r3
 800537c:	019b      	lsls	r3, r3, #6
 800537e:	b29a      	uxth	r2, r3
 8005380:	4b5e      	ldr	r3, [pc, #376]	; (80054fc <main+0x538>)
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005388:	b29b      	uxth	r3, r3
 800538a:	4413      	add	r3, r2
 800538c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 8005390:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005394:	2364      	movs	r3, #100	; 0x64
 8005396:	9302      	str	r3, [sp, #8]
 8005398:	2301      	movs	r3, #1
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	4b59      	ldr	r3, [pc, #356]	; (8005504 <main+0x540>)
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	2302      	movs	r3, #2
 80053a2:	21a0      	movs	r1, #160	; 0xa0
 80053a4:	4858      	ldr	r0, [pc, #352]	; (8005508 <main+0x544>)
 80053a6:	f003 fc71 	bl	8008c8c <HAL_I2C_Mem_Write>

			 // "&hi2c2"  actual register address  , write only when needed

		loop_counter2=0; //reset
 80053aa:	4b58      	ldr	r3, [pc, #352]	; (800550c <main+0x548>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 80053b0:	4b57      	ldr	r3, [pc, #348]	; (8005510 <main+0x54c>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8093 	beq.w	80054e0 <main+0x51c>
		uint16_t mem_counter=0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		  memcpy(serial_source,&seq,36); // copy bits
 80053c0:	2224      	movs	r2, #36	; 0x24
 80053c2:	4954      	ldr	r1, [pc, #336]	; (8005514 <main+0x550>)
 80053c4:	4854      	ldr	r0, [pc, #336]	; (8005518 <main+0x554>)
 80053c6:	f007 fcc1 	bl	800cd4c <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80053ca:	4b54      	ldr	r3, [pc, #336]	; (800551c <main+0x558>)
 80053cc:	4954      	ldr	r1, [pc, #336]	; (8005520 <main+0x55c>)
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	4618      	mov	r0, r3
 80053d2:	f007 fcbb 	bl	800cd4c <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80053dc:	e032      	b.n	8005444 <main+0x480>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 80053de:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d814      	bhi.n	8005410 <main+0x44c>
 80053e6:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	3360      	adds	r3, #96	; 0x60
 80053f2:	4a49      	ldr	r2, [pc, #292]	; (8005518 <main+0x554>)
 80053f4:	1898      	adds	r0, r3, r2
 80053f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80053fa:	1d9a      	adds	r2, r3, #6
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	4a47      	ldr	r2, [pc, #284]	; (8005524 <main+0x560>)
 8005406:	4413      	add	r3, r2
 8005408:	2207      	movs	r2, #7
 800540a:	4619      	mov	r1, r3
 800540c:	f007 fc9e 	bl	800cd4c <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8005410:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	3324      	adds	r3, #36	; 0x24
 800541e:	4a3e      	ldr	r2, [pc, #248]	; (8005518 <main+0x554>)
 8005420:	1898      	adds	r0, r3, r2
 8005422:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005426:	4613      	mov	r3, r2
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	4413      	add	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4a3e      	ldr	r2, [pc, #248]	; (8005528 <main+0x564>)
 8005430:	4413      	add	r3, r2
 8005432:	2206      	movs	r2, #6
 8005434:	4619      	mov	r1, r3
 8005436:	f007 fc89 	bl	800cd4c <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 800543a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800543e:	3301      	adds	r3, #1
 8005440:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005444:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005448:	2b09      	cmp	r3, #9
 800544a:	d9c8      	bls.n	80053de <main+0x41a>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800544c:	e005      	b.n	800545a <main+0x496>
			  serial_up++;
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <main+0x568>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b35      	ldr	r3, [pc, #212]	; (800552c <main+0x568>)
 8005458:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 800545a:	4b34      	ldr	r3, [pc, #208]	; (800552c <main+0x568>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	4b33      	ldr	r3, [pc, #204]	; (8005530 <main+0x56c>)
 8005462:	5c9a      	ldrb	r2, [r3, r2]
 8005464:	4b31      	ldr	r3, [pc, #196]	; (800552c <main+0x568>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	4619      	mov	r1, r3
 800546a:	4b2b      	ldr	r3, [pc, #172]	; (8005518 <main+0x554>)
 800546c:	5c5b      	ldrb	r3, [r3, r1]
 800546e:	429a      	cmp	r2, r3
 8005470:	d103      	bne.n	800547a <main+0x4b6>
 8005472:	4b2e      	ldr	r3, [pc, #184]	; (800552c <main+0x568>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2ba0      	cmp	r3, #160	; 0xa0
 8005478:	d9e9      	bls.n	800544e <main+0x48a>
		  }

		  serial_send[6]=0;
 800547a:	4b2e      	ldr	r3, [pc, #184]	; (8005534 <main+0x570>)
 800547c:	2200      	movs	r2, #0
 800547e:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <main+0x550>)
 8005482:	781a      	ldrb	r2, [r3, #0]
 8005484:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <main+0x570>)
 8005486:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8005488:	4b28      	ldr	r3, [pc, #160]	; (800552c <main+0x568>)
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	4b29      	ldr	r3, [pc, #164]	; (8005534 <main+0x570>)
 800548e:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 8005490:	4b26      	ldr	r3, [pc, #152]	; (800552c <main+0x568>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	4b20      	ldr	r3, [pc, #128]	; (8005518 <main+0x554>)
 8005498:	5c9a      	ldrb	r2, [r3, r2]
 800549a:	4b26      	ldr	r3, [pc, #152]	; (8005534 <main+0x570>)
 800549c:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <main+0x568>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	4619      	mov	r1, r3
 80054a4:	4b21      	ldr	r3, [pc, #132]	; (800552c <main+0x568>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <main+0x554>)
 80054ac:	5c59      	ldrb	r1, [r3, r1]
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <main+0x56c>)
 80054b0:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 80054b2:	4b1e      	ldr	r3, [pc, #120]	; (800552c <main+0x568>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2ba1      	cmp	r3, #161	; 0xa1
 80054b8:	d903      	bls.n	80054c2 <main+0x4fe>
 80054ba:	4b1c      	ldr	r3, [pc, #112]	; (800552c <main+0x568>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e005      	b.n	80054ce <main+0x50a>
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <main+0x568>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	4b18      	ldr	r3, [pc, #96]	; (800552c <main+0x568>)
 80054cc:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 80054ce:	2364      	movs	r3, #100	; 0x64
 80054d0:	2208      	movs	r2, #8
 80054d2:	4918      	ldr	r1, [pc, #96]	; (8005534 <main+0x570>)
 80054d4:	4818      	ldr	r0, [pc, #96]	; (8005538 <main+0x574>)
 80054d6:	f007 f852 	bl	800c57e <HAL_UART_Transmit>
		  serial_tosend=0;
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <main+0x54c>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 80054e0:	4b16      	ldr	r3, [pc, #88]	; (800553c <main+0x578>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <main+0x528>
 80054e8:	f7fe fed4 	bl	8004294 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <main+0x57c>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b05      	cmp	r3, #5
 80054f2:	d841      	bhi.n	8005578 <main+0x5b4>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <main+0x580>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e02d      	b.n	8005558 <main+0x594>
 80054fc:	2000c09e 	.word	0x2000c09e
 8005500:	200095e0 	.word	0x200095e0
 8005504:	2000c0a4 	.word	0x2000c0a4
 8005508:	200127dc 	.word	0x200127dc
 800550c:	2000c0a0 	.word	0x2000c0a0
 8005510:	20010e6d 	.word	0x20010e6d
 8005514:	2000dc84 	.word	0x2000dc84
 8005518:	20010c6c 	.word	0x20010c6c
 800551c:	20010ccc 	.word	0x20010ccc
 8005520:	200096dc 	.word	0x200096dc
 8005524:	20008e10 	.word	0x20008e10
 8005528:	2000d0f4 	.word	0x2000d0f4
 800552c:	20010e6c 	.word	0x20010e6c
 8005530:	20010d6c 	.word	0x20010d6c
 8005534:	20008ee4 	.word	0x20008ee4
 8005538:	20012b20 	.word	0x20012b20
 800553c:	2000ca3e 	.word	0x2000ca3e
 8005540:	2000c093 	.word	0x2000c093
 8005544:	2000984a 	.word	0x2000984a
 8005548:	f7fe fd92 	bl	8004070 <display_init>
 800554c:	4b9f      	ldr	r3, [pc, #636]	; (80057cc <main+0x808>)
 800554e:	881b      	ldrh	r3, [r3, #0]
 8005550:	3301      	adds	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	4b9d      	ldr	r3, [pc, #628]	; (80057cc <main+0x808>)
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	4b9c      	ldr	r3, [pc, #624]	; (80057cc <main+0x808>)
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	2b05      	cmp	r3, #5
 800555e:	d9f3      	bls.n	8005548 <main+0x584>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8005560:	4b9b      	ldr	r3, [pc, #620]	; (80057d0 <main+0x80c>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b06      	cmp	r3, #6
 8005566:	d107      	bne.n	8005578 <main+0x5b4>
 8005568:	489a      	ldr	r0, [pc, #616]	; (80057d4 <main+0x810>)
 800556a:	f005 feb5 	bl	800b2d8 <HAL_TIM_Base_Start_IT>
 800556e:	4899      	ldr	r0, [pc, #612]	; (80057d4 <main+0x810>)
 8005570:	f005 fe58 	bl	800b224 <HAL_TIM_Base_Start>
 8005574:	f7fe fdd2 	bl	800411c <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8005578:	4b95      	ldr	r3, [pc, #596]	; (80057d0 <main+0x80c>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b05      	cmp	r3, #5
 800557e:	d91f      	bls.n	80055c0 <main+0x5fc>

			if(sampler.sample_save_enable>10){
 8005580:	4b95      	ldr	r3, [pc, #596]	; (80057d8 <main+0x814>)
 8005582:	7c1b      	ldrb	r3, [r3, #16]
 8005584:	2b0a      	cmp	r3, #10
 8005586:	d917      	bls.n	80055b8 <main+0x5f4>

			    uint16_t sample_size=sizeof(RAM);
 8005588:	f648 330e 	movw	r3, #35598	; 0x8b0e
 800558c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			    		uint8_t* ram_ptr=&RAM[0];
 8005590:	4b92      	ldr	r3, [pc, #584]	; (80057dc <main+0x818>)
 8005592:	677b      	str	r3, [r7, #116]	; 0x74

			    				sample_save(sampler.sample_save,ram_ptr, sample_size);  // write sample no 255
 8005594:	4b90      	ldr	r3, [pc, #576]	; (80057d8 <main+0x814>)
 8005596:	7adb      	ldrb	r3, [r3, #11]
 8005598:	b29b      	uxth	r3, r3
 800559a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800559e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff fa0d 	bl	80049c0 <sample_save>
			    sampler.sample_save_enable=0;
 80055a6:	4b8c      	ldr	r3, [pc, #560]	; (80057d8 <main+0x814>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	741a      	strb	r2, [r3, #16]
			    sampler.sample_save=0;   // reset position jus tin case
 80055ac:	4b8a      	ldr	r3, [pc, #552]	; (80057d8 <main+0x814>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	72da      	strb	r2, [r3, #11]
			    sampler.RAM_free=0; //
 80055b2:	4b89      	ldr	r3, [pc, #548]	; (80057d8 <main+0x814>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	749a      	strb	r2, [r3, #18]


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 80055b8:	f7ff f830 	bl	800461c <menu3_fill>
 80055bc:	f7fe ff4c 	bl	8004458 <encoder2>
		}


		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 80055c0:	4b87      	ldr	r3, [pc, #540]	; (80057e0 <main+0x81c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d147      	bne.n	800565c <main+0x698>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 80055cc:	4885      	ldr	r0, [pc, #532]	; (80057e4 <main+0x820>)
 80055ce:	f002 f889 	bl	80076e4 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 80055d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 80055dc:	2101      	movs	r1, #1
 80055de:	4881      	ldr	r0, [pc, #516]	; (80057e4 <main+0x820>)
 80055e0:	f001 fbf0 	bl	8006dc4 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80055e4:	2101      	movs	r1, #1
 80055e6:	487f      	ldr	r0, [pc, #508]	; (80057e4 <main+0x820>)
 80055e8:	f002 f992 	bl	8007910 <HAL_ADCEx_InjectedGetValue>
 80055ec:	4603      	mov	r3, r0
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80055f4:	2102      	movs	r1, #2
 80055f6:	487b      	ldr	r0, [pc, #492]	; (80057e4 <main+0x820>)
 80055f8:	f002 f98a 	bl	8007910 <HAL_ADCEx_InjectedGetValue>
 80055fc:	4603      	mov	r3, r0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8005604:	2103      	movs	r1, #3
 8005606:	4877      	ldr	r0, [pc, #476]	; (80057e4 <main+0x820>)
 8005608:	f002 f982 	bl	8007910 <HAL_ADCEx_InjectedGetValue>
 800560c:	4603      	mov	r3, r0
 800560e:	b29b      	uxth	r3, r3
 8005610:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8005614:	4873      	ldr	r0, [pc, #460]	; (80057e4 <main+0x820>)
 8005616:	f002 f92f 	bl	8007878 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 800561a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800561e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005622:	330f      	adds	r3, #15
 8005624:	b29b      	uxth	r3, r3
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	b29a      	uxth	r2, r3
 800562a:	4b6f      	ldr	r3, [pc, #444]	; (80057e8 <main+0x824>)
 800562c:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 800562e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005632:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005636:	330f      	adds	r3, #15
 8005638:	b29b      	uxth	r3, r3
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	b29a      	uxth	r2, r3
 800563e:	4b6a      	ldr	r3, [pc, #424]	; (80057e8 <main+0x824>)
 8005640:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8005642:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005646:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800564a:	330f      	adds	r3, #15
 800564c:	b29b      	uxth	r3, r3
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	b29a      	uxth	r2, r3
 8005652:	4b65      	ldr	r3, [pc, #404]	; (80057e8 <main+0x824>)
 8005654:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8005656:	4b65      	ldr	r3, [pc, #404]	; (80057ec <main+0x828>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 800565c:	4b64      	ldr	r3, [pc, #400]	; (80057f0 <main+0x82c>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b07      	cmp	r3, #7
 8005662:	d106      	bne.n	8005672 <main+0x6ae>
 8005664:	4b63      	ldr	r3, [pc, #396]	; (80057f4 <main+0x830>)
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <main+0x6ae>
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <main+0x830>)
 800566e:	2201      	movs	r2, #1
 8005670:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8005672:	4b5f      	ldr	r3, [pc, #380]	; (80057f0 <main+0x82c>)
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005682:	485d      	ldr	r0, [pc, #372]	; (80057f8 <main+0x834>)
 8005684:	f003 f98c 	bl	80089a0 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8005688:	4b5c      	ldr	r3, [pc, #368]	; (80057fc <main+0x838>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d062      	beq.n	8005756 <main+0x792>


			uint16_t    adc_page=0; ;
 8005690:	2300      	movs	r3, #0
 8005692:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8005696:	4b59      	ldr	r3, [pc, #356]	; (80057fc <main+0x838>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d102      	bne.n	80056a4 <main+0x6e0>
 800569e:	2300      	movs	r3, #0
 80056a0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==2)	  	{	adc_page=1536;  }
 80056a4:	4b55      	ldr	r3, [pc, #340]	; (80057fc <main+0x838>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d103      	bne.n	80056b4 <main+0x6f0>
 80056ac:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056b0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82


			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 80056b4:	4b45      	ldr	r3, [pc, #276]	; (80057cc <main+0x808>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e038      	b.n	800572e <main+0x76a>
				adc_convert_count=(i*3)+adc_page;
 80056bc:	4b43      	ldr	r3, [pc, #268]	; (80057cc <main+0x808>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	0052      	lsls	r2, r2, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80056cc:	4413      	add	r3, r2
 80056ce:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 80056d2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80056d6:	4a4a      	ldr	r2, [pc, #296]	; (8005800 <main+0x83c>)
 80056d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80056dc:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80056e0:	3301      	adds	r3, #1
 80056e2:	4947      	ldr	r1, [pc, #284]	; (8005800 <main+0x83c>)
 80056e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80056e8:	4413      	add	r3, r2
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80056f0:	3302      	adds	r3, #2
 80056f2:	4943      	ldr	r1, [pc, #268]	; (8005800 <main+0x83c>)
 80056f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80056f8:	4413      	add	r3, r2
 80056fa:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 80056fe:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005702:	4a40      	ldr	r2, [pc, #256]	; (8005804 <main+0x840>)
 8005704:	fba2 2303 	umull	r2, r3, r2, r3
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				input_holder[i]=adc_convert_temp<<4;
 800570e:	4b2f      	ldr	r3, [pc, #188]	; (80057cc <main+0x808>)
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	b299      	uxth	r1, r3
 800571c:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <main+0x844>)
 800571e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i=0;i<512;i++){
 8005722:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <main+0x808>)
 8005724:	881b      	ldrh	r3, [r3, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	4b28      	ldr	r3, [pc, #160]	; (80057cc <main+0x808>)
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	4b27      	ldr	r3, [pc, #156]	; (80057cc <main+0x808>)
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005736:	d3c1      	bcc.n	80056bc <main+0x6f8>


				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler.RAM_free=1;  loop_counter2=111;   sampler_ram_record(); }  //stop loop counter2
 8005738:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <main+0x814>)
 800573a:	7b9b      	ldrb	r3, [r3, #14]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <main+0x78c>
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <main+0x814>)
 8005742:	2201      	movs	r2, #1
 8005744:	749a      	strb	r2, [r3, #18]
 8005746:	4b26      	ldr	r3, [pc, #152]	; (80057e0 <main+0x81c>)
 8005748:	226f      	movs	r2, #111	; 0x6f
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f7ff fb82 	bl	8004e54 <sampler_ram_record>

			adc_flag=0;
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <main+0x838>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8005756:	4b2d      	ldr	r3, [pc, #180]	; (800580c <main+0x848>)
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	b29b      	uxth	r3, r3
 800575c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005760:	d90a      	bls.n	8005778 <main+0x7b4>
 8005762:	4b2b      	ldr	r3, [pc, #172]	; (8005810 <main+0x84c>)
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576a:	d105      	bne.n	8005778 <main+0x7b4>
 800576c:	4b29      	ldr	r3, [pc, #164]	; (8005814 <main+0x850>)
 800576e:	2201      	movs	r2, #1
 8005770:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8005772:	e001      	b.n	8005778 <main+0x7b4>

			sampling();
 8005774:	f7fc fc60 	bl	8002038 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 8005778:	4b26      	ldr	r3, [pc, #152]	; (8005814 <main+0x850>)
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f9      	bne.n	8005774 <main+0x7b0>

	  	}   // should trigger this after adc reads also reset sample_point here

		if((millis-millis_stored)>5) {   // run gfx_line
 8005780:	4b25      	ldr	r3, [pc, #148]	; (8005818 <main+0x854>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b05      	cmp	r3, #5
 800578a:	f67f ac3c 	bls.w	8005006 <main+0x42>

		  LCD_Info_feedback();
 800578e:	f7ff f807 	bl	80047a0 <LCD_Info_feedback>
		    uint8_t up_counter2=0;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					while ((up_counter2<8) && (init > 5) )								{
 8005798:	e00c      	b.n	80057b4 <main+0x7f0>

					gfx_line_fill();   // just run 8 times between sampling , dont need more
 800579a:	f7fe fd8d 	bl	80042b8 <gfx_line_fill>
					up_counter2++;
 800579e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80057a2:	3301      	adds	r3, #1
 80057a4:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					loop_counter++;
 80057a8:	4b10      	ldr	r3, [pc, #64]	; (80057ec <main+0x828>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <main+0x828>)
 80057b2:	701a      	strb	r2, [r3, #0]
					while ((up_counter2<8) && (init > 5) )								{
 80057b4:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80057b8:	2b07      	cmp	r3, #7
 80057ba:	d803      	bhi.n	80057c4 <main+0x800>
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <main+0x80c>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d8ea      	bhi.n	800579a <main+0x7d6>
					}   millis_stored=millis;
 80057c4:	4a14      	ldr	r2, [pc, #80]	; (8005818 <main+0x854>)
 80057c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057c8:	6013      	str	r3, [r2, #0]
  {
 80057ca:	e41c      	b.n	8005006 <main+0x42>
 80057cc:	2000984a 	.word	0x2000984a
 80057d0:	2000c093 	.word	0x2000c093
 80057d4:	20012ad8 	.word	0x20012ad8
 80057d8:	20008ebc 	.word	0x20008ebc
 80057dc:	200001ac 	.word	0x200001ac
 80057e0:	2000c0a0 	.word	0x2000c0a0
 80057e4:	20012734 	.word	0x20012734
 80057e8:	20008e00 	.word	0x20008e00
 80057ec:	20009846 	.word	0x20009846
 80057f0:	2000dc84 	.word	0x2000dc84
 80057f4:	2000c08a 	.word	0x2000c08a
 80057f8:	40020800 	.word	0x40020800
 80057fc:	2000ce40 	.word	0x2000ce40
 8005800:	2000a85c 	.word	0x2000a85c
 8005804:	aaaaaaab 	.word	0xaaaaaaab
 8005808:	2000ca40 	.word	0x2000ca40
 800580c:	2000a850 	.word	0x2000a850
 8005810:	2000a856 	.word	0x2000a856
 8005814:	20008e0a 	.word	0x20008e0a
 8005818:	2001272c 	.word	0x2001272c

0800581c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b094      	sub	sp, #80	; 0x50
 8005820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005822:	f107 0320 	add.w	r3, r7, #32
 8005826:	2230      	movs	r2, #48	; 0x30
 8005828:	2100      	movs	r1, #0
 800582a:	4618      	mov	r0, r3
 800582c:	f007 fa9c 	bl	800cd68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005830:	f107 030c 	add.w	r3, r7, #12
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	605a      	str	r2, [r3, #4]
 800583a:	609a      	str	r2, [r3, #8]
 800583c:	60da      	str	r2, [r3, #12]
 800583e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005840:	2300      	movs	r3, #0
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	4b28      	ldr	r3, [pc, #160]	; (80058e8 <SystemClock_Config+0xcc>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <SystemClock_Config+0xcc>)
 800584a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584e:	6413      	str	r3, [r2, #64]	; 0x40
 8005850:	4b25      	ldr	r3, [pc, #148]	; (80058e8 <SystemClock_Config+0xcc>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800585c:	2300      	movs	r3, #0
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	4b22      	ldr	r3, [pc, #136]	; (80058ec <SystemClock_Config+0xd0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <SystemClock_Config+0xd0>)
 8005866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	4b1f      	ldr	r3, [pc, #124]	; (80058ec <SystemClock_Config+0xd0>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005874:	607b      	str	r3, [r7, #4]
 8005876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005878:	2302      	movs	r3, #2
 800587a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800587c:	2301      	movs	r3, #1
 800587e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005880:	2310      	movs	r3, #16
 8005882:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005884:	2302      	movs	r3, #2
 8005886:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005888:	2300      	movs	r3, #0
 800588a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800588c:	2308      	movs	r3, #8
 800588e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005890:	2364      	movs	r3, #100	; 0x64
 8005892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005894:	2302      	movs	r3, #2
 8005896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005898:	2304      	movs	r3, #4
 800589a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800589c:	f107 0320 	add.w	r3, r7, #32
 80058a0:	4618      	mov	r0, r3
 80058a2:	f004 f86f 	bl	8009984 <HAL_RCC_OscConfig>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80058ac:	f000 fca4 	bl	80061f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80058b0:	230f      	movs	r3, #15
 80058b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058b4:	2302      	movs	r3, #2
 80058b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80058bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80058c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80058c8:	f107 030c 	add.w	r3, r7, #12
 80058cc:	2103      	movs	r1, #3
 80058ce:	4618      	mov	r0, r3
 80058d0:	f004 fad0 	bl	8009e74 <HAL_RCC_ClockConfig>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80058da:	f000 fc8d 	bl	80061f8 <Error_Handler>
  }
}
 80058de:	bf00      	nop
 80058e0:	3750      	adds	r7, #80	; 0x50
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40007000 	.word	0x40007000

080058f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	; 0x30
 80058f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80058f6:	f107 0320 	add.w	r3, r7, #32
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	605a      	str	r2, [r3, #4]
 8005900:	609a      	str	r2, [r3, #8]
 8005902:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005904:	463b      	mov	r3, r7
 8005906:	2220      	movs	r2, #32
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f007 fa2c 	bl	800cd68 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005912:	4a3f      	ldr	r2, [pc, #252]	; (8005a10 <MX_ADC1_Init+0x120>)
 8005914:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005916:	4b3d      	ldr	r3, [pc, #244]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005918:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800591c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005920:	2200      	movs	r2, #0
 8005922:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005924:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005926:	2201      	movs	r2, #1
 8005928:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800592a:	4b38      	ldr	r3, [pc, #224]	; (8005a0c <MX_ADC1_Init+0x11c>)
 800592c:	2201      	movs	r2, #1
 800592e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005930:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005932:	2200      	movs	r2, #0
 8005934:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005938:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <MX_ADC1_Init+0x11c>)
 800593a:	2200      	movs	r2, #0
 800593c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800593e:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005940:	4a34      	ldr	r2, [pc, #208]	; (8005a14 <MX_ADC1_Init+0x124>)
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005944:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005946:	2200      	movs	r2, #0
 8005948:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800594a:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <MX_ADC1_Init+0x11c>)
 800594c:	2201      	movs	r2, #1
 800594e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005950:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005958:	4b2c      	ldr	r3, [pc, #176]	; (8005a0c <MX_ADC1_Init+0x11c>)
 800595a:	2200      	movs	r2, #0
 800595c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800595e:	482b      	ldr	r0, [pc, #172]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005960:	f001 f938 	bl	8006bd4 <HAL_ADC_Init>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800596a:	f000 fc45 	bl	80061f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800596e:	2309      	movs	r3, #9
 8005970:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8005972:	2301      	movs	r3, #1
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005976:	2306      	movs	r3, #6
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800597a:	f107 0320 	add.w	r3, r7, #32
 800597e:	4619      	mov	r1, r3
 8005980:	4822      	ldr	r0, [pc, #136]	; (8005a0c <MX_ADC1_Init+0x11c>)
 8005982:	f001 fbff 	bl	8007184 <HAL_ADC_ConfigChannel>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800598c:	f000 fc34 	bl	80061f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8005990:	2300      	movs	r3, #0
 8005992:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005994:	2301      	movs	r3, #1
 8005996:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005998:	2303      	movs	r3, #3
 800599a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 800599c:	2303      	movs	r3, #3
 800599e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80059a4:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <MX_ADC1_Init+0x128>)
 80059a6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80059b4:	463b      	mov	r3, r7
 80059b6:	4619      	mov	r1, r3
 80059b8:	4814      	ldr	r0, [pc, #80]	; (8005a0c <MX_ADC1_Init+0x11c>)
 80059ba:	f001 ffe1 	bl	8007980 <HAL_ADCEx_InjectedConfigChannel>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80059c4:	f000 fc18 	bl	80061f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80059c8:	2302      	movs	r3, #2
 80059ca:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80059cc:	2302      	movs	r3, #2
 80059ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80059d0:	463b      	mov	r3, r7
 80059d2:	4619      	mov	r1, r3
 80059d4:	480d      	ldr	r0, [pc, #52]	; (8005a0c <MX_ADC1_Init+0x11c>)
 80059d6:	f001 ffd3 	bl	8007980 <HAL_ADCEx_InjectedConfigChannel>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80059e0:	f000 fc0a 	bl	80061f8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80059e4:	2308      	movs	r3, #8
 80059e6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80059e8:	2303      	movs	r3, #3
 80059ea:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80059f0:	463b      	mov	r3, r7
 80059f2:	4619      	mov	r1, r3
 80059f4:	4805      	ldr	r0, [pc, #20]	; (8005a0c <MX_ADC1_Init+0x11c>)
 80059f6:	f001 ffc3 	bl	8007980 <HAL_ADCEx_InjectedConfigChannel>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8005a00:	f000 fbfa 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a04:	bf00      	nop
 8005a06:	3730      	adds	r7, #48	; 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20012734 	.word	0x20012734
 8005a10:	40012000 	.word	0x40012000
 8005a14:	0f000001 	.word	0x0f000001
 8005a18:	000f0001 	.word	0x000f0001

08005a1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005a20:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a22:	4a13      	ldr	r2, [pc, #76]	; (8005a70 <MX_I2C2_Init+0x54>)
 8005a24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005a26:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a28:	4a12      	ldr	r2, [pc, #72]	; (8005a74 <MX_I2C2_Init+0x58>)
 8005a2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005a46:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005a4c:	4b07      	ldr	r3, [pc, #28]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005a58:	4804      	ldr	r0, [pc, #16]	; (8005a6c <MX_I2C2_Init+0x50>)
 8005a5a:	f002 ffd3 	bl	8008a04 <HAL_I2C_Init>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005a64:	f000 fbc8 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005a68:	bf00      	nop
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	200127dc 	.word	0x200127dc
 8005a70:	40005800 	.word	0x40005800
 8005a74:	000186a0 	.word	0x000186a0

08005a78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005a7c:	4b17      	ldr	r3, [pc, #92]	; (8005adc <MX_SPI1_Init+0x64>)
 8005a7e:	4a18      	ldr	r2, [pc, #96]	; (8005ae0 <MX_SPI1_Init+0x68>)
 8005a80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005a82:	4b16      	ldr	r3, [pc, #88]	; (8005adc <MX_SPI1_Init+0x64>)
 8005a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005a88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005a8a:	4b14      	ldr	r3, [pc, #80]	; (8005adc <MX_SPI1_Init+0x64>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005a90:	4b12      	ldr	r3, [pc, #72]	; (8005adc <MX_SPI1_Init+0x64>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <MX_SPI1_Init+0x64>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <MX_SPI1_Init+0x64>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	; (8005adc <MX_SPI1_Init+0x64>)
 8005aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aaa:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <MX_SPI1_Init+0x64>)
 8005aac:	2200      	movs	r2, #0
 8005aae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <MX_SPI1_Init+0x64>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <MX_SPI1_Init+0x64>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005abc:	4b07      	ldr	r3, [pc, #28]	; (8005adc <MX_SPI1_Init+0x64>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <MX_SPI1_Init+0x64>)
 8005ac4:	220a      	movs	r2, #10
 8005ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005ac8:	4804      	ldr	r0, [pc, #16]	; (8005adc <MX_SPI1_Init+0x64>)
 8005aca:	f004 fbb3 	bl	800a234 <HAL_SPI_Init>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ad4:	f000 fb90 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ad8:	bf00      	nop
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20012830 	.word	0x20012830
 8005ae0:	40013000 	.word	0x40013000

08005ae4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005ae8:	4b17      	ldr	r3, [pc, #92]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005aea:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <MX_SPI2_Init+0x68>)
 8005aec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005aee:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005af4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005afc:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b02:	4b11      	ldr	r3, [pc, #68]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b08:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b18:	2230      	movs	r2, #48	; 0x30
 8005b1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b30:	220a      	movs	r2, #10
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005b34:	4804      	ldr	r0, [pc, #16]	; (8005b48 <MX_SPI2_Init+0x64>)
 8005b36:	f004 fb7d 	bl	800a234 <HAL_SPI_Init>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005b40:	f000 fb5a 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b44:	bf00      	nop
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20012888 	.word	0x20012888
 8005b4c:	40003800 	.word	0x40003800

08005b50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08c      	sub	sp, #48	; 0x30
 8005b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b56:	f107 030c 	add.w	r3, r7, #12
 8005b5a:	2224      	movs	r2, #36	; 0x24
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f007 f902 	bl	800cd68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b7a:	4b1e      	ldr	r3, [pc, #120]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005b80:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005b96:	2301      	movs	r3, #1
 8005b98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005baa:	2302      	movs	r3, #2
 8005bac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005bba:	f107 030c 	add.w	r3, r7, #12
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005bc2:	f005 fd7d 	bl	800b6c0 <HAL_TIM_Encoder_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005bcc:	f000 fb14 	bl	80061f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4805      	ldr	r0, [pc, #20]	; (8005bf4 <MX_TIM2_Init+0xa4>)
 8005bde:	f006 fbf7 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005be8:	f000 fb06 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005bec:	bf00      	nop
 8005bee:	3730      	adds	r7, #48	; 0x30
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20012a00 	.word	0x20012a00

08005bf8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08e      	sub	sp, #56	; 0x38
 8005bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c02:	2200      	movs	r2, #0
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
 8005c08:	609a      	str	r2, [r3, #8]
 8005c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c0c:	f107 0320 	add.w	r3, r7, #32
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c16:	1d3b      	adds	r3, r7, #4
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	605a      	str	r2, [r3, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
 8005c20:	60da      	str	r2, [r3, #12]
 8005c22:	611a      	str	r2, [r3, #16]
 8005c24:	615a      	str	r2, [r3, #20]
 8005c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c28:	4b32      	ldr	r3, [pc, #200]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c2a:	4a33      	ldr	r2, [pc, #204]	; (8005cf8 <MX_TIM3_Init+0x100>)
 8005c2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c34:	4b2f      	ldr	r3, [pc, #188]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2800;
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c3c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8005c40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c42:	4b2c      	ldr	r3, [pc, #176]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c48:	4b2a      	ldr	r3, [pc, #168]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c4a:	2280      	movs	r2, #128	; 0x80
 8005c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c4e:	4829      	ldr	r0, [pc, #164]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c50:	f005 fa98 	bl	800b184 <HAL_TIM_Base_Init>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005c5a:	f000 facd 	bl	80061f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4822      	ldr	r0, [pc, #136]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c6c:	f005 fff4 	bl	800bc58 <HAL_TIM_ConfigClockSource>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005c76:	f000 fabf 	bl	80061f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005c7a:	481e      	ldr	r0, [pc, #120]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c7c:	f005 fc16 	bl	800b4ac <HAL_TIM_PWM_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005c86:	f000 fab7 	bl	80061f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c92:	f107 0320 	add.w	r3, r7, #32
 8005c96:	4619      	mov	r1, r3
 8005c98:	4816      	ldr	r0, [pc, #88]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005c9a:	f006 fb99 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005ca4:	f000 faa8 	bl	80061f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ca8:	2360      	movs	r3, #96	; 0x60
 8005caa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	480d      	ldr	r0, [pc, #52]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005cc0:	f005 ff08 	bl	800bad4 <HAL_TIM_PWM_ConfigChannel>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005cca:	f000 fa95 	bl	80061f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005cce:	1d3b      	adds	r3, r7, #4
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4807      	ldr	r0, [pc, #28]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005cd6:	f005 fefd 	bl	800bad4 <HAL_TIM_PWM_ConfigChannel>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8005ce0:	f000 fa8a 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005ce4:	4803      	ldr	r0, [pc, #12]	; (8005cf4 <MX_TIM3_Init+0xfc>)
 8005ce6:	f000 fd79 	bl	80067dc <HAL_TIM_MspPostInit>

}
 8005cea:	bf00      	nop
 8005cec:	3738      	adds	r7, #56	; 0x38
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20012a48 	.word	0x20012a48
 8005cf8:	40000400 	.word	0x40000400

08005cfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08c      	sub	sp, #48	; 0x30
 8005d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	2224      	movs	r2, #36	; 0x24
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f007 f82c 	bl	800cd68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d10:	1d3b      	adds	r3, r7, #4
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005d18:	4b21      	ldr	r3, [pc, #132]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d1a:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <MX_TIM4_Init+0xa8>)
 8005d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005d1e:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d24:	4b1e      	ldr	r3, [pc, #120]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005d32:	4b1b      	ldr	r3, [pc, #108]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d3a:	4b19      	ldr	r3, [pc, #100]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8005d40:	2302      	movs	r3, #2
 8005d42:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8005d44:	2302      	movs	r3, #2
 8005d46:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8005d50:	2304      	movs	r3, #4
 8005d52:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8005d54:	2302      	movs	r3, #2
 8005d56:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8005d60:	2304      	movs	r3, #4
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	4619      	mov	r1, r3
 8005d6a:	480d      	ldr	r0, [pc, #52]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d6c:	f005 fca8 	bl	800b6c0 <HAL_TIM_Encoder_Init>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005d76:	f000 fa3f 	bl	80061f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d82:	1d3b      	adds	r3, r7, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4806      	ldr	r0, [pc, #24]	; (8005da0 <MX_TIM4_Init+0xa4>)
 8005d88:	f006 fb22 	bl	800c3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005d92:	f000 fa31 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005d96:	bf00      	nop
 8005d98:	3730      	adds	r7, #48	; 0x30
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20012a90 	.word	0x20012a90
 8005da4:	40000800 	.word	0x40000800

08005da8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005dae:	1d3b      	adds	r3, r7, #4
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	605a      	str	r2, [r3, #4]
 8005db6:	609a      	str	r2, [r3, #8]
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	611a      	str	r2, [r3, #16]
 8005dbc:	615a      	str	r2, [r3, #20]
 8005dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005dc2:	4a1d      	ldr	r2, [pc, #116]	; (8005e38 <MX_TIM10_Init+0x90>)
 8005dc4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8005dc6:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005dc8:	2204      	movs	r2, #4
 8005dca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dcc:	4b19      	ldr	r3, [pc, #100]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 8005dd2:	4b18      	ldr	r3, [pc, #96]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005dd4:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005dd8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dda:	4b16      	ldr	r3, [pc, #88]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005de0:	4b14      	ldr	r3, [pc, #80]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005de2:	2280      	movs	r2, #128	; 0x80
 8005de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005de6:	4813      	ldr	r0, [pc, #76]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005de8:	f005 f9cc 	bl	800b184 <HAL_TIM_Base_Init>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005df2:	f000 fa01 	bl	80061f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8005df6:	480f      	ldr	r0, [pc, #60]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005df8:	f005 faff 	bl	800b3fa <HAL_TIM_OC_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005e02:	f000 f9f9 	bl	80061f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4805      	ldr	r0, [pc, #20]	; (8005e34 <MX_TIM10_Init+0x8c>)
 8005e1e:	f005 fdfd 	bl	800ba1c <HAL_TIM_OC_ConfigChannel>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005e28:	f000 f9e6 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005e2c:	bf00      	nop
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20012ad8 	.word	0x20012ad8
 8005e38:	40014400 	.word	0x40014400

08005e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e40:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e42:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <MX_USART1_UART_Init+0x50>)
 8005e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e62:	2208      	movs	r2, #8
 8005e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8005e72:	4805      	ldr	r0, [pc, #20]	; (8005e88 <MX_USART1_UART_Init+0x4c>)
 8005e74:	f006 fb2e 	bl	800c4d4 <HAL_HalfDuplex_Init>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005e7e:	f000 f9bb 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005e82:	bf00      	nop
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20012b20 	.word	0x20012b20
 8005e8c:	40011000 	.word	0x40011000

08005e90 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005e94:	4b11      	ldr	r3, [pc, #68]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005e96:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <MX_USART6_UART_Init+0x50>)
 8005e98:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005ea0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005eae:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005eb6:	220c      	movs	r2, #12
 8005eb8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart6) != HAL_OK)
 8005ec6:	4805      	ldr	r0, [pc, #20]	; (8005edc <MX_USART6_UART_Init+0x4c>)
 8005ec8:	f006 fb04 	bl	800c4d4 <HAL_HalfDuplex_Init>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005ed2:	f000 f991 	bl	80061f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20012b64 	.word	0x20012b64
 8005ee0:	40011400 	.word	0x40011400

08005ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	4b1f      	ldr	r3, [pc, #124]	; (8005f6c <MX_DMA_Init+0x88>)
 8005ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <MX_DMA_Init+0x88>)
 8005ef4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8005efa:	4b1c      	ldr	r3, [pc, #112]	; (8005f6c <MX_DMA_Init+0x88>)
 8005efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f02:	607b      	str	r3, [r7, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <MX_DMA_Init+0x88>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	4a17      	ldr	r2, [pc, #92]	; (8005f6c <MX_DMA_Init+0x88>)
 8005f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f14:	6313      	str	r3, [r2, #48]	; 0x30
 8005f16:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <MX_DMA_Init+0x88>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2105      	movs	r1, #5
 8005f26:	200f      	movs	r0, #15
 8005f28:	f001 ff9f 	bl	8007e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005f2c:	200f      	movs	r0, #15
 8005f2e:	f001 ffb8 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005f32:	2200      	movs	r2, #0
 8005f34:	2100      	movs	r1, #0
 8005f36:	2038      	movs	r0, #56	; 0x38
 8005f38:	f001 ff97 	bl	8007e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005f3c:	2038      	movs	r0, #56	; 0x38
 8005f3e:	f001 ffb0 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005f42:	2200      	movs	r2, #0
 8005f44:	2100      	movs	r1, #0
 8005f46:	203a      	movs	r0, #58	; 0x3a
 8005f48:	f001 ff8f 	bl	8007e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005f4c:	203a      	movs	r0, #58	; 0x3a
 8005f4e:	f001 ffa8 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8005f52:	2200      	movs	r2, #0
 8005f54:	2102      	movs	r1, #2
 8005f56:	203c      	movs	r0, #60	; 0x3c
 8005f58:	f001 ff87 	bl	8007e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8005f5c:	203c      	movs	r0, #60	; 0x3c
 8005f5e:	f001 ffa0 	bl	8007ea2 <HAL_NVIC_EnableIRQ>

}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800

08005f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f76:	f107 030c 	add.w	r3, r7, #12
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	609a      	str	r2, [r3, #8]
 8005f82:	60da      	str	r2, [r3, #12]
 8005f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	4b35      	ldr	r3, [pc, #212]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	4a34      	ldr	r2, [pc, #208]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	6313      	str	r3, [r2, #48]	; 0x30
 8005f96:	4b32      	ldr	r3, [pc, #200]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	4a2d      	ldr	r2, [pc, #180]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005fac:	f043 0302 	orr.w	r3, r3, #2
 8005fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb2:	4b2b      	ldr	r3, [pc, #172]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb6:	f003 0302 	and.w	r3, r3, #2
 8005fba:	607b      	str	r3, [r7, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4b27      	ldr	r3, [pc, #156]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a26      	ldr	r2, [pc, #152]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005fc8:	f043 0304 	orr.w	r3, r3, #4
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b24      	ldr	r3, [pc, #144]	; (8006060 <MX_GPIO_Init+0xf0>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fe0:	4820      	ldr	r0, [pc, #128]	; (8006064 <MX_GPIO_Init+0xf4>)
 8005fe2:	f002 fcdd 	bl	80089a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2110      	movs	r1, #16
 8005fea:	481f      	ldr	r0, [pc, #124]	; (8006068 <MX_GPIO_Init+0xf8>)
 8005fec:	f002 fcd8 	bl	80089a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ff4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ffe:	2300      	movs	r3, #0
 8006000:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006002:	f107 030c 	add.w	r3, r7, #12
 8006006:	4619      	mov	r1, r3
 8006008:	4816      	ldr	r0, [pc, #88]	; (8006064 <MX_GPIO_Init+0xf4>)
 800600a:	f002 fb45 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pin : record_pin_Pin */
  GPIO_InitStruct.Pin = record_pin_Pin;
 800600e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006012:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006014:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006018:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(record_pin_GPIO_Port, &GPIO_InitStruct);
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	4619      	mov	r1, r3
 8006024:	4811      	ldr	r0, [pc, #68]	; (800606c <MX_GPIO_Init+0xfc>)
 8006026:	f002 fb37 	bl	8008698 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800602a:	2310      	movs	r3, #16
 800602c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800602e:	2301      	movs	r3, #1
 8006030:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006032:	2300      	movs	r3, #0
 8006034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006036:	2303      	movs	r3, #3
 8006038:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 800603a:	f107 030c 	add.w	r3, r7, #12
 800603e:	4619      	mov	r1, r3
 8006040:	4809      	ldr	r0, [pc, #36]	; (8006068 <MX_GPIO_Init+0xf8>)
 8006042:	f002 fb29 	bl	8008698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8006046:	2200      	movs	r2, #0
 8006048:	2104      	movs	r1, #4
 800604a:	2028      	movs	r0, #40	; 0x28
 800604c:	f001 ff0d 	bl	8007e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006050:	2028      	movs	r0, #40	; 0x28
 8006052:	f001 ff26 	bl	8007ea2 <HAL_NVIC_EnableIRQ>

}
 8006056:	bf00      	nop
 8006058:	3720      	adds	r7, #32
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800
 8006064:	40020800 	.word	0x40020800
 8006068:	40020000 	.word	0x40020000
 800606c:	40020400 	.word	0x40020400

08006070 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 8006078:	4b04      	ldr	r3, [pc, #16]	; (800608c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800607a:	2201      	movs	r2, #1
 800607c:	701a      	strb	r2, [r3, #0]

	}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	2000ce40 	.word	0x2000ce40

08006090 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <HAL_ADC_ConvCpltCallback+0x28>)
 800609a:	2202      	movs	r2, #2
 800609c:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 800609e:	4807      	ldr	r0, [pc, #28]	; (80060bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80060a0:	f001 f80c 	bl	80070bc <HAL_ADC_Stop_DMA>
 80060a4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80060a8:	4905      	ldr	r1, [pc, #20]	; (80060c0 <HAL_ADC_ConvCpltCallback+0x30>)
 80060aa:	4804      	ldr	r0, [pc, #16]	; (80060bc <HAL_ADC_ConvCpltCallback+0x2c>)
 80060ac:	f000 ff16 	bl	8006edc <HAL_ADC_Start_DMA>

	}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	2000ce40 	.word	0x2000ce40
 80060bc:	20012734 	.word	0x20012734
 80060c0:	2000a85c 	.word	0x2000a85c

080060c4 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a10      	ldr	r2, [pc, #64]	; (8006114 <HAL_SPI_TxRxHalfCpltCallback+0x50>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d118      	bne.n	8006108 <HAL_SPI_TxRxHalfCpltCallback+0x44>

				if  ((flash_read_block2[10]+   flash_read_block2[11]+  flash_read_block2[12]+  flash_read_block2[13])== 1020                  )
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80060d8:	7a9b      	ldrb	r3, [r3, #10]
 80060da:	461a      	mov	r2, r3
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80060de:	7adb      	ldrb	r3, [r3, #11]
 80060e0:	4413      	add	r3, r2
 80060e2:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80060e4:	7b12      	ldrb	r2, [r2, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	4a0b      	ldr	r2, [pc, #44]	; (8006118 <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80060ea:	7b52      	ldrb	r2, [r2, #13]
 80060ec:	4413      	add	r3, r2
 80060ee:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80060f2:	d109      	bne.n	8006108 <HAL_SPI_TxRxHalfCpltCallback+0x44>

				    {
				    error_count++;
 80060f4:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3301      	adds	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 8006100:	801a      	strh	r2, [r3, #0]
		//	memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice

						flash_flag=1;}
 8006102:	4b07      	ldr	r3, [pc, #28]	; (8006120 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]


	}		}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	40013000 	.word	0x40013000
 8006118:	20012318 	.word	0x20012318
 800611c:	2000ce4a 	.word	0x2000ce4a
 8006120:	20008eec 	.word	0x20008eec

08006124 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a07      	ldr	r2, [pc, #28]	; (8006150 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d107      	bne.n	8006146 <HAL_SPI_TxRxCpltCallback+0x22>


		       flash_flag=2;
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <HAL_SPI_TxRxCpltCallback+0x30>)
 8006138:	2202      	movs	r2, #2
 800613a:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 800613c:	2201      	movs	r2, #1
 800613e:	2110      	movs	r1, #16
 8006140:	4805      	ldr	r0, [pc, #20]	; (8006158 <HAL_SPI_TxRxCpltCallback+0x34>)
 8006142:	f002 fc2d 	bl	80089a0 <HAL_GPIO_WritePin>
		   }
		}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40013000 	.word	0x40013000
 8006154:	20008eec 	.word	0x20008eec
 8006158:	40020000 	.word	0x40020000

0800615c <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a07      	ldr	r2, [pc, #28]	; (8006188 <HAL_SPI_ErrorCallback+0x2c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d106      	bne.n	800617c <HAL_SPI_ErrorCallback+0x20>
error_count++;
 800616e:	4b07      	ldr	r3, [pc, #28]	; (800618c <HAL_SPI_ErrorCallback+0x30>)
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	3301      	adds	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	4b04      	ldr	r3, [pc, #16]	; (800618c <HAL_SPI_ErrorCallback+0x30>)
 800617a:	801a      	strh	r2, [r3, #0]

		   }
	}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	40013000 	.word	0x40013000
 800618c:	2000ce4a 	.word	0x2000ce4a

08006190 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	4603      	mov	r3, r0
 80061ac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b4:	d102      	bne.n	80061bc <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 80061b6:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <HAL_GPIO_EXTI_Callback+0x24>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	739a      	strb	r2, [r3, #14]
  }
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	20008ebc 	.word	0x20008ebc

080061cc <stop_start>:
//NVIC_DisableIRQ(TIM3_IRQn);   //  disables all tim irq
void stop_start	(void)             {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  //  if (TIM3==htim ->Instance)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 80061d0:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <stop_start+0x24>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d102      	bne.n	80061de <stop_start+0x12>
 80061d8:	4806      	ldr	r0, [pc, #24]	; (80061f4 <stop_start+0x28>)
 80061da:	f005 f8df 	bl	800b39c <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 80061de:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <stop_start+0x24>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d102      	bne.n	80061ec <stop_start+0x20>
 80061e6:	4803      	ldr	r0, [pc, #12]	; (80061f4 <stop_start+0x28>)
 80061e8:	f005 f876 	bl	800b2d8 <HAL_TIM_Base_Start_IT>

}
 80061ec:	bf00      	nop
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20012728 	.word	0x20012728
 80061f4:	20012a48 	.word	0x20012a48

080061f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80061fc:	b672      	cpsid	i
}
 80061fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006200:	e7fe      	b.n	8006200 <Error_Handler+0x8>
	...

08006204 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	4b10      	ldr	r3, [pc, #64]	; (8006250 <HAL_MspInit+0x4c>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	4a0f      	ldr	r2, [pc, #60]	; (8006250 <HAL_MspInit+0x4c>)
 8006214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006218:	6453      	str	r3, [r2, #68]	; 0x44
 800621a:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <HAL_MspInit+0x4c>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	2300      	movs	r3, #0
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <HAL_MspInit+0x4c>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	4a08      	ldr	r2, [pc, #32]	; (8006250 <HAL_MspInit+0x4c>)
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006234:	6413      	str	r3, [r2, #64]	; 0x40
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_MspInit+0x4c>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40023800 	.word	0x40023800

08006254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	60da      	str	r2, [r3, #12]
 800626a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3c      	ldr	r2, [pc, #240]	; (8006364 <HAL_ADC_MspInit+0x110>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d171      	bne.n	800635a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006276:	2300      	movs	r3, #0
 8006278:	613b      	str	r3, [r7, #16]
 800627a:	4b3b      	ldr	r3, [pc, #236]	; (8006368 <HAL_ADC_MspInit+0x114>)
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <HAL_ADC_MspInit+0x114>)
 8006280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006284:	6453      	str	r3, [r2, #68]	; 0x44
 8006286:	4b38      	ldr	r3, [pc, #224]	; (8006368 <HAL_ADC_MspInit+0x114>)
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	4b34      	ldr	r3, [pc, #208]	; (8006368 <HAL_ADC_MspInit+0x114>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	4a33      	ldr	r2, [pc, #204]	; (8006368 <HAL_ADC_MspInit+0x114>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6313      	str	r3, [r2, #48]	; 0x30
 80062a2:	4b31      	ldr	r3, [pc, #196]	; (8006368 <HAL_ADC_MspInit+0x114>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062ae:	2300      	movs	r3, #0
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	4b2d      	ldr	r3, [pc, #180]	; (8006368 <HAL_ADC_MspInit+0x114>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	4a2c      	ldr	r2, [pc, #176]	; (8006368 <HAL_ADC_MspInit+0x114>)
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	6313      	str	r3, [r2, #48]	; 0x30
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <HAL_ADC_MspInit+0x114>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	60bb      	str	r3, [r7, #8]
 80062c8:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80062ca:	2305      	movs	r3, #5
 80062cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062ce:	2303      	movs	r3, #3
 80062d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d6:	f107 0314 	add.w	r3, r7, #20
 80062da:	4619      	mov	r1, r3
 80062dc:	4823      	ldr	r0, [pc, #140]	; (800636c <HAL_ADC_MspInit+0x118>)
 80062de:	f002 f9db 	bl	8008698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80062e2:	2303      	movs	r3, #3
 80062e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062e6:	2303      	movs	r3, #3
 80062e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ee:	f107 0314 	add.w	r3, r7, #20
 80062f2:	4619      	mov	r1, r3
 80062f4:	481e      	ldr	r0, [pc, #120]	; (8006370 <HAL_ADC_MspInit+0x11c>)
 80062f6:	f002 f9cf 	bl	8008698 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <HAL_ADC_MspInit+0x120>)
 80062fc:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_ADC_MspInit+0x124>)
 80062fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006300:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006302:	2200      	movs	r2, #0
 8006304:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006306:	4b1b      	ldr	r3, [pc, #108]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006308:	2200      	movs	r2, #0
 800630a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800630c:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_ADC_MspInit+0x120>)
 800630e:	2200      	movs	r2, #0
 8006310:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006318:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800631a:	4b16      	ldr	r3, [pc, #88]	; (8006374 <HAL_ADC_MspInit+0x120>)
 800631c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006320:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006328:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <HAL_ADC_MspInit+0x120>)
 800632c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006330:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006334:	2200      	movs	r2, #0
 8006336:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <HAL_ADC_MspInit+0x120>)
 800633a:	2200      	movs	r2, #0
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800633e:	480d      	ldr	r0, [pc, #52]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006340:	f001 fdca 	bl	8007ed8 <HAL_DMA_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800634a:	f7ff ff55 	bl	80061f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a08      	ldr	r2, [pc, #32]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006352:	639a      	str	r2, [r3, #56]	; 0x38
 8006354:	4a07      	ldr	r2, [pc, #28]	; (8006374 <HAL_ADC_MspInit+0x120>)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800635a:	bf00      	nop
 800635c:	3728      	adds	r7, #40	; 0x28
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40012000 	.word	0x40012000
 8006368:	40023800 	.word	0x40023800
 800636c:	40020000 	.word	0x40020000
 8006370:	40020400 	.word	0x40020400
 8006374:	2001277c 	.word	0x2001277c
 8006378:	40026470 	.word	0x40026470

0800637c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <HAL_I2C_MspInit+0xa8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d13d      	bne.n	800641a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	4b21      	ldr	r3, [pc, #132]	; (8006428 <HAL_I2C_MspInit+0xac>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a20      	ldr	r2, [pc, #128]	; (8006428 <HAL_I2C_MspInit+0xac>)
 80063a8:	f043 0302 	orr.w	r3, r3, #2
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <HAL_I2C_MspInit+0xac>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80063ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063c0:	2312      	movs	r3, #18
 80063c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063c8:	2303      	movs	r3, #3
 80063ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80063cc:	2309      	movs	r3, #9
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063d0:	f107 0314 	add.w	r3, r7, #20
 80063d4:	4619      	mov	r1, r3
 80063d6:	4815      	ldr	r0, [pc, #84]	; (800642c <HAL_I2C_MspInit+0xb0>)
 80063d8:	f002 f95e 	bl	8008698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80063dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063e2:	2312      	movs	r3, #18
 80063e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ea:	2303      	movs	r3, #3
 80063ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80063ee:	2304      	movs	r3, #4
 80063f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063f2:	f107 0314 	add.w	r3, r7, #20
 80063f6:	4619      	mov	r1, r3
 80063f8:	480c      	ldr	r0, [pc, #48]	; (800642c <HAL_I2C_MspInit+0xb0>)
 80063fa:	f002 f94d 	bl	8008698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <HAL_I2C_MspInit+0xac>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	4a08      	ldr	r2, [pc, #32]	; (8006428 <HAL_I2C_MspInit+0xac>)
 8006408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800640c:	6413      	str	r3, [r2, #64]	; 0x40
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <HAL_I2C_MspInit+0xac>)
 8006410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800641a:	bf00      	nop
 800641c:	3728      	adds	r7, #40	; 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40005800 	.word	0x40005800
 8006428:	40023800 	.word	0x40023800
 800642c:	40020400 	.word	0x40020400

08006430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08c      	sub	sp, #48	; 0x30
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006438:	f107 031c 	add.w	r3, r7, #28
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a77      	ldr	r2, [pc, #476]	; (800662c <HAL_SPI_MspInit+0x1fc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	f040 8089 	bne.w	8006566 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
 8006458:	4b75      	ldr	r3, [pc, #468]	; (8006630 <HAL_SPI_MspInit+0x200>)
 800645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645c:	4a74      	ldr	r2, [pc, #464]	; (8006630 <HAL_SPI_MspInit+0x200>)
 800645e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006462:	6453      	str	r3, [r2, #68]	; 0x44
 8006464:	4b72      	ldr	r3, [pc, #456]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800646c:	61bb      	str	r3, [r7, #24]
 800646e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	4b6e      	ldr	r3, [pc, #440]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006478:	4a6d      	ldr	r2, [pc, #436]	; (8006630 <HAL_SPI_MspInit+0x200>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6313      	str	r3, [r2, #48]	; 0x30
 8006480:	4b6b      	ldr	r3, [pc, #428]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 800648c:	23e0      	movs	r3, #224	; 0xe0
 800648e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006490:	2302      	movs	r3, #2
 8006492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006494:	2300      	movs	r3, #0
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006498:	2302      	movs	r3, #2
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800649c:	2305      	movs	r3, #5
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064a0:	f107 031c 	add.w	r3, r7, #28
 80064a4:	4619      	mov	r1, r3
 80064a6:	4863      	ldr	r0, [pc, #396]	; (8006634 <HAL_SPI_MspInit+0x204>)
 80064a8:	f002 f8f6 	bl	8008698 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80064ac:	4b62      	ldr	r3, [pc, #392]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064ae:	4a63      	ldr	r2, [pc, #396]	; (800663c <HAL_SPI_MspInit+0x20c>)
 80064b0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80064b2:	4b61      	ldr	r3, [pc, #388]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064b4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80064b8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064ba:	4b5f      	ldr	r3, [pc, #380]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064bc:	2200      	movs	r2, #0
 80064be:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c0:	4b5d      	ldr	r3, [pc, #372]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064c6:	4b5c      	ldr	r3, [pc, #368]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064cc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064ce:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064d4:	4b58      	ldr	r3, [pc, #352]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80064da:	4b57      	ldr	r3, [pc, #348]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064dc:	2200      	movs	r2, #0
 80064de:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064e0:	4b55      	ldr	r3, [pc, #340]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064e6:	4b54      	ldr	r3, [pc, #336]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80064ec:	4852      	ldr	r0, [pc, #328]	; (8006638 <HAL_SPI_MspInit+0x208>)
 80064ee:	f001 fcf3 	bl	8007ed8 <HAL_DMA_Init>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80064f8:	f7ff fe7e 	bl	80061f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a4e      	ldr	r2, [pc, #312]	; (8006638 <HAL_SPI_MspInit+0x208>)
 8006500:	64da      	str	r2, [r3, #76]	; 0x4c
 8006502:	4a4d      	ldr	r2, [pc, #308]	; (8006638 <HAL_SPI_MspInit+0x208>)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8006508:	4b4d      	ldr	r3, [pc, #308]	; (8006640 <HAL_SPI_MspInit+0x210>)
 800650a:	4a4e      	ldr	r2, [pc, #312]	; (8006644 <HAL_SPI_MspInit+0x214>)
 800650c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 800650e:	4b4c      	ldr	r3, [pc, #304]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006510:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006514:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006516:	4b4a      	ldr	r3, [pc, #296]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006518:	2240      	movs	r2, #64	; 0x40
 800651a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800651c:	4b48      	ldr	r3, [pc, #288]	; (8006640 <HAL_SPI_MspInit+0x210>)
 800651e:	2200      	movs	r2, #0
 8006520:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006522:	4b47      	ldr	r3, [pc, #284]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006528:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <HAL_SPI_MspInit+0x210>)
 800652c:	2200      	movs	r2, #0
 800652e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006530:	4b43      	ldr	r3, [pc, #268]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006532:	2200      	movs	r2, #0
 8006534:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006536:	4b42      	ldr	r3, [pc, #264]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006538:	2200      	movs	r2, #0
 800653a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800653c:	4b40      	ldr	r3, [pc, #256]	; (8006640 <HAL_SPI_MspInit+0x210>)
 800653e:	2200      	movs	r2, #0
 8006540:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006542:	4b3f      	ldr	r3, [pc, #252]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006544:	2200      	movs	r2, #0
 8006546:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006548:	483d      	ldr	r0, [pc, #244]	; (8006640 <HAL_SPI_MspInit+0x210>)
 800654a:	f001 fcc5 	bl	8007ed8 <HAL_DMA_Init>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006554:	f7ff fe50 	bl	80061f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a39      	ldr	r2, [pc, #228]	; (8006640 <HAL_SPI_MspInit+0x210>)
 800655c:	649a      	str	r2, [r3, #72]	; 0x48
 800655e:	4a38      	ldr	r2, [pc, #224]	; (8006640 <HAL_SPI_MspInit+0x210>)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006564:	e05e      	b.n	8006624 <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a37      	ldr	r2, [pc, #220]	; (8006648 <HAL_SPI_MspInit+0x218>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d159      	bne.n	8006624 <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
 8006574:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <HAL_SPI_MspInit+0x200>)
 800657a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800657e:	6413      	str	r3, [r2, #64]	; 0x40
 8006580:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	4b27      	ldr	r3, [pc, #156]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006594:	4a26      	ldr	r2, [pc, #152]	; (8006630 <HAL_SPI_MspInit+0x200>)
 8006596:	f043 0302 	orr.w	r3, r3, #2
 800659a:	6313      	str	r3, [r2, #48]	; 0x30
 800659c:	4b24      	ldr	r3, [pc, #144]	; (8006630 <HAL_SPI_MspInit+0x200>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 80065a8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80065ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ae:	2302      	movs	r3, #2
 80065b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b2:	2300      	movs	r3, #0
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b6:	2303      	movs	r3, #3
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80065ba:	2305      	movs	r3, #5
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065be:	f107 031c 	add.w	r3, r7, #28
 80065c2:	4619      	mov	r1, r3
 80065c4:	4821      	ldr	r0, [pc, #132]	; (800664c <HAL_SPI_MspInit+0x21c>)
 80065c6:	f002 f867 	bl	8008698 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065cc:	4a21      	ldr	r2, [pc, #132]	; (8006654 <HAL_SPI_MspInit+0x224>)
 80065ce:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80065d0:	4b1f      	ldr	r3, [pc, #124]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065d6:	4b1e      	ldr	r3, [pc, #120]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065d8:	2240      	movs	r2, #64	; 0x40
 80065da:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065dc:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065de:	2200      	movs	r2, #0
 80065e0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065e2:	4b1b      	ldr	r3, [pc, #108]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065ea:	4b19      	ldr	r3, [pc, #100]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065f0:	4b17      	ldr	r3, [pc, #92]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80065f6:	4b16      	ldr	r3, [pc, #88]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <HAL_SPI_MspInit+0x220>)
 80065fe:	2200      	movs	r2, #0
 8006600:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006602:	4b13      	ldr	r3, [pc, #76]	; (8006650 <HAL_SPI_MspInit+0x220>)
 8006604:	2200      	movs	r2, #0
 8006606:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006608:	4811      	ldr	r0, [pc, #68]	; (8006650 <HAL_SPI_MspInit+0x220>)
 800660a:	f001 fc65 	bl	8007ed8 <HAL_DMA_Init>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 8006614:	f7ff fdf0 	bl	80061f8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a0d      	ldr	r2, [pc, #52]	; (8006650 <HAL_SPI_MspInit+0x220>)
 800661c:	649a      	str	r2, [r3, #72]	; 0x48
 800661e:	4a0c      	ldr	r2, [pc, #48]	; (8006650 <HAL_SPI_MspInit+0x220>)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006624:	bf00      	nop
 8006626:	3730      	adds	r7, #48	; 0x30
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40013000 	.word	0x40013000
 8006630:	40023800 	.word	0x40023800
 8006634:	40020000 	.word	0x40020000
 8006638:	200128e0 	.word	0x200128e0
 800663c:	40026410 	.word	0x40026410
 8006640:	20012940 	.word	0x20012940
 8006644:	40026440 	.word	0x40026440
 8006648:	40003800 	.word	0x40003800
 800664c:	40020400 	.word	0x40020400
 8006650:	200129a0 	.word	0x200129a0
 8006654:	40026070 	.word	0x40026070

08006658 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08c      	sub	sp, #48	; 0x30
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006660:	f107 031c 	add.w	r3, r7, #28
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d12d      	bne.n	80066d6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	4b30      	ldr	r3, [pc, #192]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	4a2f      	ldr	r2, [pc, #188]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6413      	str	r3, [r2, #64]	; 0x40
 800668a:	4b2d      	ldr	r3, [pc, #180]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	61bb      	str	r3, [r7, #24]
 8006694:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	4b29      	ldr	r3, [pc, #164]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	4a28      	ldr	r2, [pc, #160]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	6313      	str	r3, [r2, #48]	; 0x30
 80066a6:	4b26      	ldr	r3, [pc, #152]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 80066b2:	f248 0302 	movw	r3, #32770	; 0x8002
 80066b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b8:	2302      	movs	r3, #2
 80066ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066bc:	2301      	movs	r3, #1
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066c0:	2300      	movs	r3, #0
 80066c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80066c4:	2301      	movs	r3, #1
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c8:	f107 031c 	add.w	r3, r7, #28
 80066cc:	4619      	mov	r1, r3
 80066ce:	481d      	ldr	r0, [pc, #116]	; (8006744 <HAL_TIM_Encoder_MspInit+0xec>)
 80066d0:	f001 ffe2 	bl	8008698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80066d4:	e030      	b.n	8006738 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1b      	ldr	r2, [pc, #108]	; (8006748 <HAL_TIM_Encoder_MspInit+0xf0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d12b      	bne.n	8006738 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	4b16      	ldr	r3, [pc, #88]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	4a15      	ldr	r2, [pc, #84]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 80066ea:	f043 0304 	orr.w	r3, r3, #4
 80066ee:	6413      	str	r3, [r2, #64]	; 0x40
 80066f0:	4b13      	ldr	r3, [pc, #76]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006706:	f043 0302 	orr.w	r3, r3, #2
 800670a:	6313      	str	r3, [r2, #48]	; 0x30
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <HAL_TIM_Encoder_MspInit+0xe8>)
 800670e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006718:	23c0      	movs	r3, #192	; 0xc0
 800671a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671c:	2302      	movs	r3, #2
 800671e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006720:	2301      	movs	r3, #1
 8006722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006724:	2300      	movs	r3, #0
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006728:	2302      	movs	r3, #2
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800672c:	f107 031c 	add.w	r3, r7, #28
 8006730:	4619      	mov	r1, r3
 8006732:	4806      	ldr	r0, [pc, #24]	; (800674c <HAL_TIM_Encoder_MspInit+0xf4>)
 8006734:	f001 ffb0 	bl	8008698 <HAL_GPIO_Init>
}
 8006738:	bf00      	nop
 800673a:	3730      	adds	r7, #48	; 0x30
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40023800 	.word	0x40023800
 8006744:	40020000 	.word	0x40020000
 8006748:	40000800 	.word	0x40000800
 800674c:	40020400 	.word	0x40020400

08006750 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_TIM_Base_MspInit+0x80>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d116      	bne.n	8006790 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <HAL_TIM_Base_MspInit+0x84>)
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4a1a      	ldr	r2, [pc, #104]	; (80067d4 <HAL_TIM_Base_MspInit+0x84>)
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	6413      	str	r3, [r2, #64]	; 0x40
 8006772:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <HAL_TIM_Base_MspInit+0x84>)
 8006774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800677e:	2200      	movs	r2, #0
 8006780:	2101      	movs	r1, #1
 8006782:	201d      	movs	r0, #29
 8006784:	f001 fb71 	bl	8007e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006788:	201d      	movs	r0, #29
 800678a:	f001 fb8a 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800678e:	e01a      	b.n	80067c6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a10      	ldr	r2, [pc, #64]	; (80067d8 <HAL_TIM_Base_MspInit+0x88>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d115      	bne.n	80067c6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <HAL_TIM_Base_MspInit+0x84>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <HAL_TIM_Base_MspInit+0x84>)
 80067a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a8:	6453      	str	r3, [r2, #68]	; 0x44
 80067aa:	4b0a      	ldr	r3, [pc, #40]	; (80067d4 <HAL_TIM_Base_MspInit+0x84>)
 80067ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2103      	movs	r1, #3
 80067ba:	2019      	movs	r0, #25
 80067bc:	f001 fb55 	bl	8007e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80067c0:	2019      	movs	r0, #25
 80067c2:	f001 fb6e 	bl	8007ea2 <HAL_NVIC_EnableIRQ>
}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40000400 	.word	0x40000400
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40014400 	.word	0x40014400

080067dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a12      	ldr	r2, [pc, #72]	; (8006844 <HAL_TIM_MspPostInit+0x68>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d11d      	bne.n	800683a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	4b11      	ldr	r3, [pc, #68]	; (8006848 <HAL_TIM_MspPostInit+0x6c>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <HAL_TIM_MspPostInit+0x6c>)
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	6313      	str	r3, [r2, #48]	; 0x30
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <HAL_TIM_MspPostInit+0x6c>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800681a:	2330      	movs	r3, #48	; 0x30
 800681c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681e:	2302      	movs	r3, #2
 8006820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800682a:	2302      	movs	r3, #2
 800682c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4619      	mov	r1, r3
 8006834:	4805      	ldr	r0, [pc, #20]	; (800684c <HAL_TIM_MspPostInit+0x70>)
 8006836:	f001 ff2f 	bl	8008698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800683a:	bf00      	nop
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40000400 	.word	0x40000400
 8006848:	40023800 	.word	0x40023800
 800684c:	40020400 	.word	0x40020400

08006850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	; 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006858:	f107 031c 	add.w	r3, r7, #28
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a33      	ldr	r2, [pc, #204]	; (800693c <HAL_UART_MspInit+0xec>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d12d      	bne.n	80068ce <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	4b32      	ldr	r3, [pc, #200]	; (8006940 <HAL_UART_MspInit+0xf0>)
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	4a31      	ldr	r2, [pc, #196]	; (8006940 <HAL_UART_MspInit+0xf0>)
 800687c:	f043 0310 	orr.w	r3, r3, #16
 8006880:	6453      	str	r3, [r2, #68]	; 0x44
 8006882:	4b2f      	ldr	r3, [pc, #188]	; (8006940 <HAL_UART_MspInit+0xf0>)
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	4b2b      	ldr	r3, [pc, #172]	; (8006940 <HAL_UART_MspInit+0xf0>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	4a2a      	ldr	r2, [pc, #168]	; (8006940 <HAL_UART_MspInit+0xf0>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6313      	str	r3, [r2, #48]	; 0x30
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <HAL_UART_MspInit+0xf0>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80068aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b0:	2302      	movs	r3, #2
 80068b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b8:	2300      	movs	r3, #0
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80068bc:	2307      	movs	r3, #7
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c0:	f107 031c 	add.w	r3, r7, #28
 80068c4:	4619      	mov	r1, r3
 80068c6:	481f      	ldr	r0, [pc, #124]	; (8006944 <HAL_UART_MspInit+0xf4>)
 80068c8:	f001 fee6 	bl	8008698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80068cc:	e031      	b.n	8006932 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <HAL_UART_MspInit+0xf8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d12c      	bne.n	8006932 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	4b18      	ldr	r3, [pc, #96]	; (8006940 <HAL_UART_MspInit+0xf0>)
 80068de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e0:	4a17      	ldr	r2, [pc, #92]	; (8006940 <HAL_UART_MspInit+0xf0>)
 80068e2:	f043 0320 	orr.w	r3, r3, #32
 80068e6:	6453      	str	r3, [r2, #68]	; 0x44
 80068e8:	4b15      	ldr	r3, [pc, #84]	; (8006940 <HAL_UART_MspInit+0xf0>)
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	4b11      	ldr	r3, [pc, #68]	; (8006940 <HAL_UART_MspInit+0xf0>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	4a10      	ldr	r2, [pc, #64]	; (8006940 <HAL_UART_MspInit+0xf0>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6313      	str	r3, [r2, #48]	; 0x30
 8006904:	4b0e      	ldr	r3, [pc, #56]	; (8006940 <HAL_UART_MspInit+0xf0>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006916:	2302      	movs	r3, #2
 8006918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800691a:	2301      	movs	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691e:	2300      	movs	r3, #0
 8006920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006922:	2308      	movs	r3, #8
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006926:	f107 031c 	add.w	r3, r7, #28
 800692a:	4619      	mov	r1, r3
 800692c:	4805      	ldr	r0, [pc, #20]	; (8006944 <HAL_UART_MspInit+0xf4>)
 800692e:	f001 feb3 	bl	8008698 <HAL_GPIO_Init>
}
 8006932:	bf00      	nop
 8006934:	3730      	adds	r7, #48	; 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40011000 	.word	0x40011000
 8006940:	40023800 	.word	0x40023800
 8006944:	40020000 	.word	0x40020000
 8006948:	40011400 	.word	0x40011400

0800694c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006950:	e7fe      	b.n	8006950 <NMI_Handler+0x4>

08006952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006952:	b480      	push	{r7}
 8006954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006956:	e7fe      	b.n	8006956 <HardFault_Handler+0x4>

08006958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800695c:	e7fe      	b.n	800695c <MemManage_Handler+0x4>

0800695e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800695e:	b480      	push	{r7}
 8006960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006962:	e7fe      	b.n	8006962 <BusFault_Handler+0x4>

08006964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006968:	e7fe      	b.n	8006968 <UsageFault_Handler+0x4>

0800696a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800696a:	b480      	push	{r7}
 800696c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800697c:	bf00      	nop
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006986:	b480      	push	{r7}
 8006988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800698a:	bf00      	nop
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006998:	f000 f8d8 	bl	8006b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800699c:	bf00      	nop
 800699e:	bd80      	pop	{r7, pc}

080069a0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80069a4:	4802      	ldr	r0, [pc, #8]	; (80069b0 <DMA1_Stream4_IRQHandler+0x10>)
 80069a6:	f001 fc0d 	bl	80081c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200129a0 	.word	0x200129a0

080069b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80069b8:	4802      	ldr	r0, [pc, #8]	; (80069c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80069ba:	f004 ff27 	bl	800b80c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20012ad8 	.word	0x20012ad8

080069c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80069cc:	4802      	ldr	r0, [pc, #8]	; (80069d8 <TIM3_IRQHandler+0x10>)
 80069ce:	f004 ff1d 	bl	800b80c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20012a48 	.word	0x20012a48

080069dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 80069e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80069e4:	f001 fff6 	bl	80089d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80069e8:	bf00      	nop
 80069ea:	bd80      	pop	{r7, pc}

080069ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80069f0:	4802      	ldr	r0, [pc, #8]	; (80069fc <DMA2_Stream0_IRQHandler+0x10>)
 80069f2:	f001 fbe7 	bl	80081c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80069f6:	bf00      	nop
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	200128e0 	.word	0x200128e0

08006a00 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006a04:	4802      	ldr	r0, [pc, #8]	; (8006a10 <DMA2_Stream2_IRQHandler+0x10>)
 8006a06:	f001 fbdd 	bl	80081c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20012940 	.word	0x20012940

08006a14 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006a18:	4802      	ldr	r0, [pc, #8]	; (8006a24 <DMA2_Stream4_IRQHandler+0x10>)
 8006a1a:	f001 fbd3 	bl	80081c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006a1e:	bf00      	nop
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	2001277c 	.word	0x2001277c

08006a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a2c:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <SystemInit+0x28>)
 8006a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a32:	4a07      	ldr	r2, [pc, #28]	; (8006a50 <SystemInit+0x28>)
 8006a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a3c:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <SystemInit+0x28>)
 8006a3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a42:	609a      	str	r2, [r3, #8]
#endif
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000ed00 	.word	0xe000ed00

08006a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006a5a:	e003      	b.n	8006a64 <LoopCopyDataInit>

08006a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006a62:	3104      	adds	r1, #4

08006a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006a64:	480b      	ldr	r0, [pc, #44]	; (8006a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006a6c:	d3f6      	bcc.n	8006a5c <CopyDataInit>
  ldr  r2, =_sbss
 8006a6e:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006a70:	e002      	b.n	8006a78 <LoopFillZerobss>

08006a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a74:	f842 3b04 	str.w	r3, [r2], #4

08006a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a7c:	d3f9      	bcc.n	8006a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a7e:	f7ff ffd3 	bl	8006a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a82:	f006 f93f 	bl	800cd04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a86:	f7fe fa9d 	bl	8004fc4 <main>
  bx  lr    
 8006a8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006a8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006a90:	0800f250 	.word	0x0800f250
  ldr  r0, =_sdata
 8006a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006a98:	20008f60 	.word	0x20008f60
  ldr  r2, =_sbss
 8006a9c:	20008f60 	.word	0x20008f60
  ldr  r3, = _ebss
 8006aa0:	20012bac 	.word	0x20012bac

08006aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006aa4:	e7fe      	b.n	8006aa4 <ADC_IRQHandler>
	...

08006aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <HAL_Init+0x40>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <HAL_Init+0x40>)
 8006ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <HAL_Init+0x40>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a0a      	ldr	r2, [pc, #40]	; (8006ae8 <HAL_Init+0x40>)
 8006abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ac4:	4b08      	ldr	r3, [pc, #32]	; (8006ae8 <HAL_Init+0x40>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a07      	ldr	r2, [pc, #28]	; (8006ae8 <HAL_Init+0x40>)
 8006aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ad0:	2003      	movs	r0, #3
 8006ad2:	f001 f9bf 	bl	8007e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f000 f808 	bl	8006aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006adc:	f7ff fb92 	bl	8006204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40023c00 	.word	0x40023c00

08006aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006af4:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <HAL_InitTick+0x54>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <HAL_InitTick+0x58>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	4619      	mov	r1, r3
 8006afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f001 f9d7 	bl	8007ebe <HAL_SYSTICK_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e00e      	b.n	8006b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b0f      	cmp	r3, #15
 8006b1e:	d80a      	bhi.n	8006b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b20:	2200      	movs	r2, #0
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	f001 f99f 	bl	8007e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b2c:	4a06      	ldr	r2, [pc, #24]	; (8006b48 <HAL_InitTick+0x5c>)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e000      	b.n	8006b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	20008ef0 	.word	0x20008ef0
 8006b44:	20008ef8 	.word	0x20008ef8
 8006b48:	20008ef4 	.word	0x20008ef4

08006b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b50:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <HAL_IncTick+0x20>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <HAL_IncTick+0x24>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	4a04      	ldr	r2, [pc, #16]	; (8006b70 <HAL_IncTick+0x24>)
 8006b5e:	6013      	str	r3, [r2, #0]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20008ef8 	.word	0x20008ef8
 8006b70:	20012ba8 	.word	0x20012ba8

08006b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return uwTick;
 8006b78:	4b03      	ldr	r3, [pc, #12]	; (8006b88 <HAL_GetTick+0x14>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	20012ba8 	.word	0x20012ba8

08006b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b94:	f7ff ffee 	bl	8006b74 <HAL_GetTick>
 8006b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d005      	beq.n	8006bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	; (8006bd0 <HAL_Delay+0x44>)
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006bb2:	bf00      	nop
 8006bb4:	f7ff ffde 	bl	8006b74 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d8f7      	bhi.n	8006bb4 <HAL_Delay+0x28>
  {
  }
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20008ef8 	.word	0x20008ef8

08006bd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e033      	b.n	8006c52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fb2e 	bl	8006254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f003 0310 	and.w	r3, r3, #16
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d118      	bne.n	8006c44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c1a:	f023 0302 	bic.w	r3, r3, #2
 8006c1e:	f043 0202 	orr.w	r2, r3, #2
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fbde 	bl	80073e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	f043 0201 	orr.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40
 8006c42:	e001      	b.n	8006c48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d101      	bne.n	8006c76 <HAL_ADC_Start+0x1a>
 8006c72:	2302      	movs	r3, #2
 8006c74:	e097      	b.n	8006da6 <HAL_ADC_Start+0x14a>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d018      	beq.n	8006cbe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c9c:	4b45      	ldr	r3, [pc, #276]	; (8006db4 <HAL_ADC_Start+0x158>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a45      	ldr	r2, [pc, #276]	; (8006db8 <HAL_ADC_Start+0x15c>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	0c9a      	lsrs	r2, r3, #18
 8006ca8:	4613      	mov	r3, r2
 8006caa:	005b      	lsls	r3, r3, #1
 8006cac:	4413      	add	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006cb0:	e002      	b.n	8006cb8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f9      	bne.n	8006cb2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d15f      	bne.n	8006d8c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006cf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0a:	d106      	bne.n	8006d1a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d10:	f023 0206 	bic.w	r2, r3, #6
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	645a      	str	r2, [r3, #68]	; 0x44
 8006d18:	e002      	b.n	8006d20 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d28:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <HAL_ADC_Start+0x160>)
 8006d2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006d34:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10f      	bne.n	8006d62 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d129      	bne.n	8006da4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d5e:	609a      	str	r2, [r3, #8]
 8006d60:	e020      	b.n	8006da4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <HAL_ADC_Start+0x164>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d11b      	bne.n	8006da4 <HAL_ADC_Start+0x148>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d114      	bne.n	8006da4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006d88:	609a      	str	r2, [r3, #8]
 8006d8a:	e00b      	b.n	8006da4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f043 0210 	orr.w	r2, r3, #16
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9c:	f043 0201 	orr.w	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20008ef0 	.word	0x20008ef0
 8006db8:	431bde83 	.word	0x431bde83
 8006dbc:	40012300 	.word	0x40012300
 8006dc0:	40012000 	.word	0x40012000

08006dc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d113      	bne.n	8006e0a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df0:	d10b      	bne.n	8006e0a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f043 0220 	orr.w	r2, r3, #32
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e063      	b.n	8006ed2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006e0a:	f7ff feb3 	bl	8006b74 <HAL_GetTick>
 8006e0e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006e10:	e021      	b.n	8006e56 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d01d      	beq.n	8006e56 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <HAL_ADC_PollForConversion+0x6c>
 8006e20:	f7ff fea8 	bl	8006b74 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d212      	bcs.n	8006e56 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d00b      	beq.n	8006e56 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f043 0204 	orr.w	r2, r3, #4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e03d      	b.n	8006ed2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d1d6      	bne.n	8006e12 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0212 	mvn.w	r2, #18
 8006e6c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d123      	bne.n	8006ed0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11f      	bne.n	8006ed0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d006      	beq.n	8006eac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d111      	bne.n	8006ed0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	f043 0201 	orr.w	r2, r3, #1
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_ADC_Start_DMA+0x1e>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e0ce      	b.n	8007098 <HAL_ADC_Start_DMA+0x1bc>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d018      	beq.n	8006f42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0201 	orr.w	r2, r2, #1
 8006f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006f20:	4b5f      	ldr	r3, [pc, #380]	; (80070a0 <HAL_ADC_Start_DMA+0x1c4>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a5f      	ldr	r2, [pc, #380]	; (80070a4 <HAL_ADC_Start_DMA+0x1c8>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	0c9a      	lsrs	r2, r3, #18
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	4413      	add	r3, r2
 8006f32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006f34:	e002      	b.n	8006f3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f9      	bne.n	8006f36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f50:	d107      	bne.n	8006f62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	f040 8086 	bne.w	800707e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb0:	d106      	bne.n	8006fc0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f023 0206 	bic.w	r2, r3, #6
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8006fbe:	e002      	b.n	8006fc6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006fce:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <HAL_ADC_Start_DMA+0x1cc>)
 8006fd0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	4a35      	ldr	r2, [pc, #212]	; (80070ac <HAL_ADC_Start_DMA+0x1d0>)
 8006fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fde:	4a34      	ldr	r2, [pc, #208]	; (80070b0 <HAL_ADC_Start_DMA+0x1d4>)
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	4a33      	ldr	r2, [pc, #204]	; (80070b4 <HAL_ADC_Start_DMA+0x1d8>)
 8006fe8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006ff2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007002:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007012:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	334c      	adds	r3, #76	; 0x4c
 800701e:	4619      	mov	r1, r3
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f001 f806 	bl	8008034 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10f      	bne.n	8007054 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d129      	bne.n	8007096 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689a      	ldr	r2, [r3, #8]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007050:	609a      	str	r2, [r3, #8]
 8007052:	e020      	b.n	8007096 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a17      	ldr	r2, [pc, #92]	; (80070b8 <HAL_ADC_Start_DMA+0x1dc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d11b      	bne.n	8007096 <HAL_ADC_Start_DMA+0x1ba>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d114      	bne.n	8007096 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800707a:	609a      	str	r2, [r3, #8]
 800707c:	e00b      	b.n	8007096 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f043 0210 	orr.w	r2, r3, #16
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708e:	f043 0201 	orr.w	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	20008ef0 	.word	0x20008ef0
 80070a4:	431bde83 	.word	0x431bde83
 80070a8:	40012300 	.word	0x40012300
 80070ac:	080075e1 	.word	0x080075e1
 80070b0:	0800769b 	.word	0x0800769b
 80070b4:	080076b7 	.word	0x080076b7
 80070b8:	40012000 	.word	0x40012000

080070bc <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d101      	bne.n	80070d6 <HAL_ADC_Stop_DMA+0x1a>
 80070d2:	2302      	movs	r3, #2
 80070d4:	e048      	b.n	8007168 <HAL_ADC_Stop_DMA+0xac>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d130      	bne.n	800715e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800710a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b02      	cmp	r3, #2
 8007118:	d10f      	bne.n	800713a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	4618      	mov	r0, r3
 8007120:	f000 ffe0 	bl	80080e4 <HAL_DMA_Abort>
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007128:	7bfb      	ldrb	r3, [r7, #15]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007148:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	f043 0201 	orr.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_ADC_ConfigChannel+0x1c>
 800719c:	2302      	movs	r3, #2
 800719e:	e113      	b.n	80073c8 <HAL_ADC_ConfigChannel+0x244>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b09      	cmp	r3, #9
 80071ae:	d925      	bls.n	80071fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68d9      	ldr	r1, [r3, #12]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	461a      	mov	r2, r3
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	3b1e      	subs	r3, #30
 80071c6:	2207      	movs	r2, #7
 80071c8:	fa02 f303 	lsl.w	r3, r2, r3
 80071cc:	43da      	mvns	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	400a      	ands	r2, r1
 80071d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68d9      	ldr	r1, [r3, #12]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	4618      	mov	r0, r3
 80071e8:	4603      	mov	r3, r0
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	4403      	add	r3, r0
 80071ee:	3b1e      	subs	r3, #30
 80071f0:	409a      	lsls	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	60da      	str	r2, [r3, #12]
 80071fa:	e022      	b.n	8007242 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6919      	ldr	r1, [r3, #16]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	b29b      	uxth	r3, r3
 8007208:	461a      	mov	r2, r3
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	2207      	movs	r2, #7
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	43da      	mvns	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	400a      	ands	r2, r1
 800721e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6919      	ldr	r1, [r3, #16]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689a      	ldr	r2, [r3, #8]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	b29b      	uxth	r3, r3
 8007230:	4618      	mov	r0, r3
 8007232:	4603      	mov	r3, r0
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	4403      	add	r3, r0
 8007238:	409a      	lsls	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b06      	cmp	r3, #6
 8007248:	d824      	bhi.n	8007294 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	3b05      	subs	r3, #5
 800725c:	221f      	movs	r2, #31
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	43da      	mvns	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	400a      	ands	r2, r1
 800726a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	4618      	mov	r0, r3
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	3b05      	subs	r3, #5
 8007286:	fa00 f203 	lsl.w	r2, r0, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	635a      	str	r2, [r3, #52]	; 0x34
 8007292:	e04c      	b.n	800732e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b0c      	cmp	r3, #12
 800729a:	d824      	bhi.n	80072e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	3b23      	subs	r3, #35	; 0x23
 80072ae:	221f      	movs	r2, #31
 80072b0:	fa02 f303 	lsl.w	r3, r2, r3
 80072b4:	43da      	mvns	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	400a      	ands	r2, r1
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4618      	mov	r0, r3
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4613      	mov	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4413      	add	r3, r2
 80072d6:	3b23      	subs	r3, #35	; 0x23
 80072d8:	fa00 f203 	lsl.w	r2, r0, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	631a      	str	r2, [r3, #48]	; 0x30
 80072e4:	e023      	b.n	800732e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	3b41      	subs	r3, #65	; 0x41
 80072f8:	221f      	movs	r2, #31
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43da      	mvns	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	400a      	ands	r2, r1
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	4618      	mov	r0, r3
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	3b41      	subs	r3, #65	; 0x41
 8007322:	fa00 f203 	lsl.w	r2, r0, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800732e:	4b29      	ldr	r3, [pc, #164]	; (80073d4 <HAL_ADC_ConfigChannel+0x250>)
 8007330:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a28      	ldr	r2, [pc, #160]	; (80073d8 <HAL_ADC_ConfigChannel+0x254>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10f      	bne.n	800735c <HAL_ADC_ConfigChannel+0x1d8>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b12      	cmp	r3, #18
 8007342:	d10b      	bne.n	800735c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a1d      	ldr	r2, [pc, #116]	; (80073d8 <HAL_ADC_ConfigChannel+0x254>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d12b      	bne.n	80073be <HAL_ADC_ConfigChannel+0x23a>
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <HAL_ADC_ConfigChannel+0x258>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d003      	beq.n	8007378 <HAL_ADC_ConfigChannel+0x1f4>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b11      	cmp	r3, #17
 8007376:	d122      	bne.n	80073be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a11      	ldr	r2, [pc, #68]	; (80073dc <HAL_ADC_ConfigChannel+0x258>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d111      	bne.n	80073be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800739a:	4b11      	ldr	r3, [pc, #68]	; (80073e0 <HAL_ADC_ConfigChannel+0x25c>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <HAL_ADC_ConfigChannel+0x260>)
 80073a0:	fba2 2303 	umull	r2, r3, r2, r3
 80073a4:	0c9a      	lsrs	r2, r3, #18
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073b0:	e002      	b.n	80073b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f9      	bne.n	80073b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40012300 	.word	0x40012300
 80073d8:	40012000 	.word	0x40012000
 80073dc:	10000012 	.word	0x10000012
 80073e0:	20008ef0 	.word	0x20008ef0
 80073e4:	431bde83 	.word	0x431bde83

080073e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073f0:	4b79      	ldr	r3, [pc, #484]	; (80075d8 <ADC_Init+0x1f0>)
 80073f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	431a      	orrs	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800741c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6859      	ldr	r1, [r3, #4]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	021a      	lsls	r2, r3, #8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6859      	ldr	r1, [r3, #4]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6899      	ldr	r1, [r3, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	4a58      	ldr	r2, [pc, #352]	; (80075dc <ADC_Init+0x1f4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d022      	beq.n	80074c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800748e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6899      	ldr	r1, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6899      	ldr	r1, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
 80074c4:	e00f      	b.n	80074e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689a      	ldr	r2, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80074e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f022 0202 	bic.w	r2, r2, #2
 80074f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6899      	ldr	r1, [r3, #8]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	7e1b      	ldrb	r3, [r3, #24]
 8007500:	005a      	lsls	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d01b      	beq.n	800754c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007522:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007532:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	3b01      	subs	r3, #1
 8007540:	035a      	lsls	r2, r3, #13
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	e007      	b.n	800755c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800755a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800756a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	3b01      	subs	r3, #1
 8007578:	051a      	lsls	r2, r3, #20
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6899      	ldr	r1, [r3, #8]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800759e:	025a      	lsls	r2, r3, #9
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6899      	ldr	r1, [r3, #8]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	029a      	lsls	r2, r3, #10
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	430a      	orrs	r2, r1
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	40012300 	.word	0x40012300
 80075dc:	0f000001 	.word	0x0f000001

080075e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d13c      	bne.n	8007674 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d12b      	bne.n	800766c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007618:	2b00      	cmp	r3, #0
 800761a:	d127      	bne.n	800766c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007634:	2b00      	cmp	r3, #0
 8007636:	d119      	bne.n	800766c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0220 	bic.w	r2, r2, #32
 8007646:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d105      	bne.n	800766c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7fe fd0f 	bl	8006090 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007672:	e00e      	b.n	8007692 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f7ff fd75 	bl	8007170 <HAL_ADC_ErrorCallback>
}
 8007686:	e004      	b.n	8007692 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4798      	blx	r3
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80076a8:	68f8      	ldr	r0, [r7, #12]
 80076aa:	f7fe fce1 	bl	8006070 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076ae:	bf00      	nop
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2240      	movs	r2, #64	; 0x40
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ce:	f043 0204 	orr.w	r2, r3, #4
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fd4a 	bl	8007170 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	2300      	movs	r3, #0
 80076f6:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_ADCEx_InjectedStart+0x22>
 8007702:	2302      	movs	r3, #2
 8007704:	e0aa      	b.n	800785c <HAL_ADCEx_InjectedStart+0x178>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b01      	cmp	r3, #1
 800771a:	d018      	beq.n	800774e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689a      	ldr	r2, [r3, #8]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800772c:	4b4e      	ldr	r3, [pc, #312]	; (8007868 <HAL_ADCEx_InjectedStart+0x184>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a4e      	ldr	r2, [pc, #312]	; (800786c <HAL_ADCEx_InjectedStart+0x188>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	0c9a      	lsrs	r2, r3, #18
 8007738:	4613      	mov	r3, r2
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	4413      	add	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007740:	e002      	b.n	8007748 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	3b01      	subs	r3, #1
 8007746:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f9      	bne.n	8007742 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	d172      	bne.n	8007842 <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d102      	bne.n	8007782 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f06f 0204 	mvn.w	r2, #4
 8007792:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007794:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_ADCEx_InjectedStart+0x18c>)
 8007796:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f003 031f 	and.w	r3, r3, #31
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d124      	bne.n	80077ee <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf0c      	ite	eq
 80077b2:	2301      	moveq	r3, #1
 80077b4:	2300      	movne	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bf0c      	ite	eq
 80077c8:	2301      	moveq	r3, #1
 80077ca:	2300      	movne	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d041      	beq.n	800785a <HAL_ADCEx_InjectedStart+0x176>
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d03e      	beq.n	800785a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80077ea:	609a      	str	r2, [r3, #8]
 80077ec:	e035      	b.n	800785a <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	bf0c      	ite	eq
 80077fc:	2301      	moveq	r3, #1
 80077fe:	2300      	movne	r3, #0
 8007800:	b2db      	uxtb	r3, r3
 8007802:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780e:	2b00      	cmp	r3, #0
 8007810:	bf0c      	ite	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	2300      	movne	r3, #0
 8007816:	b2db      	uxtb	r3, r3
 8007818:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a15      	ldr	r2, [pc, #84]	; (8007874 <HAL_ADCEx_InjectedStart+0x190>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d11a      	bne.n	800785a <HAL_ADCEx_InjectedStart+0x176>
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d017      	beq.n	800785a <HAL_ADCEx_InjectedStart+0x176>
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d014      	beq.n	800785a <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	e00b      	b.n	800785a <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	f043 0210 	orr.w	r2, r3, #16
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007852:	f043 0201 	orr.w	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	371c      	adds	r7, #28
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr
 8007868:	20008ef0 	.word	0x20008ef0
 800786c:	431bde83 	.word	0x431bde83
 8007870:	40012300 	.word	0x40012300
 8007874:	40012000 	.word	0x40012000

08007878 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_ADCEx_InjectedStop+0x1a>
 800788e:	2302      	movs	r3, #2
 8007890:	e037      	b.n	8007902 <HAL_ADCEx_InjectedStop+0x8a>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d120      	bne.n	80078e8 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d119      	bne.n	80078e8 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d112      	bne.n	80078f8 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80078da:	f023 0301 	bic.w	r3, r3, #1
 80078de:	f043 0201 	orr.w	r2, r3, #1
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80078e6:	e007      	b.n	80078f8 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ec:	f043 0220 	orr.w	r2, r3, #32
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007900:	7bfb      	ldrb	r3, [r7, #15]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f06f 0204 	mvn.w	r2, #4
 8007926:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	2b03      	cmp	r3, #3
 800792e:	d81f      	bhi.n	8007970 <HAL_ADCEx_InjectedGetValue+0x60>
 8007930:	a201      	add	r2, pc, #4	; (adr r2, 8007938 <HAL_ADCEx_InjectedGetValue+0x28>)
 8007932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007936:	bf00      	nop
 8007938:	08007967 	.word	0x08007967
 800793c:	0800795d 	.word	0x0800795d
 8007940:	08007953 	.word	0x08007953
 8007944:	08007949 	.word	0x08007949
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794e:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007950:	e00f      	b.n	8007972 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007958:	60fb      	str	r3, [r7, #12]
    }  
    break;
 800795a:	e00a      	b.n	8007972 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007964:	e005      	b.n	8007972 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796c:	60fb      	str	r3, [r7, #12]
    }
    break;
 800796e:	e000      	b.n	8007972 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8007970:	bf00      	nop
  }
  return tmp;
 8007972:	68fb      	ldr	r3, [r7, #12]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007990:	2b01      	cmp	r3, #1
 8007992:	d101      	bne.n	8007998 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8007994:	2302      	movs	r3, #2
 8007996:	e17e      	b.n	8007c96 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d925      	bls.n	80079f4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68d9      	ldr	r1, [r3, #12]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	3b1e      	subs	r3, #30
 80079be:	2207      	movs	r2, #7
 80079c0:	fa02 f303 	lsl.w	r3, r2, r3
 80079c4:	43da      	mvns	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	400a      	ands	r2, r1
 80079cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68d9      	ldr	r1, [r3, #12]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	4618      	mov	r0, r3
 80079e0:	4603      	mov	r3, r0
 80079e2:	005b      	lsls	r3, r3, #1
 80079e4:	4403      	add	r3, r0
 80079e6:	3b1e      	subs	r3, #30
 80079e8:	409a      	lsls	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	e022      	b.n	8007a3a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6919      	ldr	r1, [r3, #16]
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	4613      	mov	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	2207      	movs	r2, #7
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	43da      	mvns	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	400a      	ands	r2, r1
 8007a16:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6919      	ldr	r1, [r3, #16]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	4618      	mov	r0, r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4403      	add	r3, r0
 8007a30:	409a      	lsls	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007a48:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	051a      	lsls	r2, r3, #20
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	3303      	adds	r3, #3
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	221f      	movs	r2, #31
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	43da      	mvns	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	400a      	ands	r2, r1
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	3303      	adds	r3, #3
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	fa00 f203 	lsl.w	r2, r0, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	4a75      	ldr	r2, [pc, #468]	; (8007ca4 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d022      	beq.n	8007b18 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6899      	ldr	r1, [r3, #8]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	699a      	ldr	r2, [r3, #24]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689a      	ldr	r2, [r3, #8]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007b02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6899      	ldr	r1, [r3, #8]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	69da      	ldr	r2, [r3, #28]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	609a      	str	r2, [r3, #8]
 8007b16:	e00f      	b.n	8007b38 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8007b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007b36:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	7d5b      	ldrb	r3, [r3, #21]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d008      	beq.n	8007b52 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b4e:	605a      	str	r2, [r3, #4]
 8007b50:	e007      	b.n	8007b62 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b60:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	7d1b      	ldrb	r3, [r3, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d008      	beq.n	8007b7c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	e007      	b.n	8007b8c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b8a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d02e      	beq.n	8007bf2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d840      	bhi.n	8007c1a <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d002      	beq.n	8007ba2 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d014      	beq.n	8007bca <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8007ba0:	e03b      	b.n	8007c1a <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007bb0:	f023 030f 	bic.w	r3, r3, #15
 8007bb4:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6959      	ldr	r1, [r3, #20]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	615a      	str	r2, [r3, #20]
      break;
 8007bc8:	e03b      	b.n	8007c42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007bd8:	f023 030f 	bic.w	r3, r3, #15
 8007bdc:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6999      	ldr	r1, [r3, #24]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	619a      	str	r2, [r3, #24]
      break;
 8007bf0:	e027      	b.n	8007c42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007c00:	f023 030f 	bic.w	r3, r3, #15
 8007c04:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69d9      	ldr	r1, [r3, #28]
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	430a      	orrs	r2, r1
 8007c16:	61da      	str	r2, [r3, #28]
      break;
 8007c18:	e013      	b.n	8007c42 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	6812      	ldr	r2, [r2, #0]
 8007c24:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007c28:	f023 030f 	bic.w	r3, r3, #15
 8007c2c:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6a19      	ldr	r1, [r3, #32]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	621a      	str	r2, [r3, #32]
      break;
 8007c40:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c42:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8007c44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a18      	ldr	r2, [pc, #96]	; (8007cac <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d109      	bne.n	8007c64 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b12      	cmp	r3, #18
 8007c56:	d105      	bne.n	8007c64 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a10      	ldr	r2, [pc, #64]	; (8007cac <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d10e      	bne.n	8007c8c <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a0f      	ldr	r2, [pc, #60]	; (8007cb0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d003      	beq.n	8007c80 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b11      	cmp	r3, #17
 8007c7e:	d105      	bne.n	8007c8c <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	000f0001 	.word	0x000f0001
 8007ca8:	40012300 	.word	0x40012300
 8007cac:	40012000 	.word	0x40012000
 8007cb0:	10000012 	.word	0x10000012

08007cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ce6:	4a04      	ldr	r2, [pc, #16]	; (8007cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	60d3      	str	r3, [r2, #12]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	e000ed00 	.word	0xe000ed00

08007cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d00:	4b04      	ldr	r3, [pc, #16]	; (8007d14 <__NVIC_GetPriorityGrouping+0x18>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	f003 0307 	and.w	r3, r3, #7
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	e000ed00 	.word	0xe000ed00

08007d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	db0b      	blt.n	8007d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	f003 021f 	and.w	r2, r3, #31
 8007d30:	4907      	ldr	r1, [pc, #28]	; (8007d50 <__NVIC_EnableIRQ+0x38>)
 8007d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	2001      	movs	r0, #1
 8007d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	e000e100 	.word	0xe000e100

08007d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	6039      	str	r1, [r7, #0]
 8007d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	db0a      	blt.n	8007d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	490c      	ldr	r1, [pc, #48]	; (8007da0 <__NVIC_SetPriority+0x4c>)
 8007d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d72:	0112      	lsls	r2, r2, #4
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	440b      	add	r3, r1
 8007d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d7c:	e00a      	b.n	8007d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4908      	ldr	r1, [pc, #32]	; (8007da4 <__NVIC_SetPriority+0x50>)
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	f003 030f 	and.w	r3, r3, #15
 8007d8a:	3b04      	subs	r3, #4
 8007d8c:	0112      	lsls	r2, r2, #4
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	440b      	add	r3, r1
 8007d92:	761a      	strb	r2, [r3, #24]
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	e000e100 	.word	0xe000e100
 8007da4:	e000ed00 	.word	0xe000ed00

08007da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b089      	sub	sp, #36	; 0x24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f1c3 0307 	rsb	r3, r3, #7
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	bf28      	it	cs
 8007dc6:	2304      	movcs	r3, #4
 8007dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2b06      	cmp	r3, #6
 8007dd0:	d902      	bls.n	8007dd8 <NVIC_EncodePriority+0x30>
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3b03      	subs	r3, #3
 8007dd6:	e000      	b.n	8007dda <NVIC_EncodePriority+0x32>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43da      	mvns	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	401a      	ands	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007df0:	f04f 31ff 	mov.w	r1, #4294967295
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	fa01 f303 	lsl.w	r3, r1, r3
 8007dfa:	43d9      	mvns	r1, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e00:	4313      	orrs	r3, r2
         );
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3724      	adds	r7, #36	; 0x24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
	...

08007e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e20:	d301      	bcc.n	8007e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e22:	2301      	movs	r3, #1
 8007e24:	e00f      	b.n	8007e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e26:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <SysTick_Config+0x40>)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e2e:	210f      	movs	r1, #15
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	f7ff ff8e 	bl	8007d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e38:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <SysTick_Config+0x40>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e3e:	4b04      	ldr	r3, [pc, #16]	; (8007e50 <SysTick_Config+0x40>)
 8007e40:	2207      	movs	r2, #7
 8007e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	e000e010 	.word	0xe000e010

08007e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ff29 	bl	8007cb4 <__NVIC_SetPriorityGrouping>
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b086      	sub	sp, #24
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	4603      	mov	r3, r0
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	607a      	str	r2, [r7, #4]
 8007e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e7c:	f7ff ff3e 	bl	8007cfc <__NVIC_GetPriorityGrouping>
 8007e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7ff ff8e 	bl	8007da8 <NVIC_EncodePriority>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff ff5d 	bl	8007d54 <__NVIC_SetPriority>
}
 8007e9a:	bf00      	nop
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff ff31 	bl	8007d18 <__NVIC_EnableIRQ>
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff ffa2 	bl	8007e10 <SysTick_Config>
 8007ecc:	4603      	mov	r3, r0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ee4:	f7fe fe46 	bl	8006b74 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e099      	b.n	8008028 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681a      	ldr	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f022 0201 	bic.w	r2, r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f14:	e00f      	b.n	8007f36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f16:	f7fe fe2d 	bl	8006b74 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b05      	cmp	r3, #5
 8007f22:	d908      	bls.n	8007f36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e078      	b.n	8008028 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e8      	bne.n	8007f16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4b38      	ldr	r3, [pc, #224]	; (8008030 <HAL_DMA_Init+0x158>)
 8007f50:	4013      	ands	r3, r2
 8007f52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	2b04      	cmp	r3, #4
 8007f8e:	d107      	bne.n	8007fa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	697a      	ldr	r2, [r7, #20]
 8007fa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f023 0307 	bic.w	r3, r3, #7
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b04      	cmp	r3, #4
 8007fc8:	d117      	bne.n	8007ffa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00e      	beq.n	8007ffa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fadf 	bl	80085a0 <DMA_CheckFifoParam>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2240      	movs	r2, #64	; 0x40
 8007fec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e016      	b.n	8008028 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa96 	bl	8008534 <DMA_CalcBaseAndBitshift>
 8008008:	4603      	mov	r3, r0
 800800a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008010:	223f      	movs	r2, #63	; 0x3f
 8008012:	409a      	lsls	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	f010803f 	.word	0xf010803f

08008034 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_DMA_Start_IT+0x26>
 8008056:	2302      	movs	r3, #2
 8008058:	e040      	b.n	80080dc <HAL_DMA_Start_IT+0xa8>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b01      	cmp	r3, #1
 800806c:	d12f      	bne.n	80080ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fa28 	bl	80084d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808c:	223f      	movs	r2, #63	; 0x3f
 800808e:	409a      	lsls	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f042 0216 	orr.w	r2, r2, #22
 80080a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d007      	beq.n	80080bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0208 	orr.w	r2, r2, #8
 80080ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	e005      	b.n	80080da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
 80080d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80080da:	7dfb      	ldrb	r3, [r7, #23]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80080f2:	f7fe fd3f 	bl	8006b74 <HAL_GetTick>
 80080f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b02      	cmp	r3, #2
 8008102:	d008      	beq.n	8008116 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2280      	movs	r2, #128	; 0x80
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e052      	b.n	80081bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0216 	bic.w	r2, r2, #22
 8008124:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008134:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d103      	bne.n	8008146 <HAL_DMA_Abort+0x62>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008142:	2b00      	cmp	r3, #0
 8008144:	d007      	beq.n	8008156 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f022 0208 	bic.w	r2, r2, #8
 8008154:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008166:	e013      	b.n	8008190 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008168:	f7fe fd04 	bl	8006b74 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b05      	cmp	r3, #5
 8008174:	d90c      	bls.n	8008190 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2203      	movs	r2, #3
 8008180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e015      	b.n	80081bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e4      	bne.n	8008168 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a2:	223f      	movs	r2, #63	; 0x3f
 80081a4:	409a      	lsls	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80081cc:	2300      	movs	r3, #0
 80081ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80081d0:	4b8e      	ldr	r3, [pc, #568]	; (800840c <HAL_DMA_IRQHandler+0x248>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a8e      	ldr	r2, [pc, #568]	; (8008410 <HAL_DMA_IRQHandler+0x24c>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	0a9b      	lsrs	r3, r3, #10
 80081dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ee:	2208      	movs	r2, #8
 80081f0:	409a      	lsls	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4013      	ands	r3, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01a      	beq.n	8008230 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	d013      	beq.n	8008230 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0204 	bic.w	r2, r2, #4
 8008216:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821c:	2208      	movs	r2, #8
 800821e:	409a      	lsls	r2, r3
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008228:	f043 0201 	orr.w	r2, r3, #1
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008234:	2201      	movs	r2, #1
 8008236:	409a      	lsls	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d012      	beq.n	8008266 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008252:	2201      	movs	r2, #1
 8008254:	409a      	lsls	r2, r3
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	f043 0202 	orr.w	r2, r3, #2
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826a:	2204      	movs	r2, #4
 800826c:	409a      	lsls	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d012      	beq.n	800829c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008288:	2204      	movs	r2, #4
 800828a:	409a      	lsls	r2, r3
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008294:	f043 0204 	orr.w	r2, r3, #4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a0:	2210      	movs	r2, #16
 80082a2:	409a      	lsls	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4013      	ands	r3, r2
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d043      	beq.n	8008334 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d03c      	beq.n	8008334 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082be:	2210      	movs	r2, #16
 80082c0:	409a      	lsls	r2, r3
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d018      	beq.n	8008306 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d108      	bne.n	80082f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d024      	beq.n	8008334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
 80082f2:	e01f      	b.n	8008334 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d01b      	beq.n	8008334 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	4798      	blx	r3
 8008304:	e016      	b.n	8008334 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008310:	2b00      	cmp	r3, #0
 8008312:	d107      	bne.n	8008324 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0208 	bic.w	r2, r2, #8
 8008322:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008338:	2220      	movs	r2, #32
 800833a:	409a      	lsls	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	4013      	ands	r3, r2
 8008340:	2b00      	cmp	r3, #0
 8008342:	f000 808f 	beq.w	8008464 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0310 	and.w	r3, r3, #16
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 8087 	beq.w	8008464 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835a:	2220      	movs	r2, #32
 800835c:	409a      	lsls	r2, r3
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b05      	cmp	r3, #5
 800836c:	d136      	bne.n	80083dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0216 	bic.w	r2, r2, #22
 800837c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695a      	ldr	r2, [r3, #20]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800838c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	2b00      	cmp	r3, #0
 8008394:	d103      	bne.n	800839e <HAL_DMA_IRQHandler+0x1da>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0208 	bic.w	r2, r2, #8
 80083ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	223f      	movs	r2, #63	; 0x3f
 80083b4:	409a      	lsls	r2, r3
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d07e      	beq.n	80084d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	4798      	blx	r3
        }
        return;
 80083da:	e079      	b.n	80084d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01d      	beq.n	8008426 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10d      	bne.n	8008414 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d031      	beq.n	8008464 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
 8008408:	e02c      	b.n	8008464 <HAL_DMA_IRQHandler+0x2a0>
 800840a:	bf00      	nop
 800840c:	20008ef0 	.word	0x20008ef0
 8008410:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d023      	beq.n	8008464 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	4798      	blx	r3
 8008424:	e01e      	b.n	8008464 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10f      	bne.n	8008454 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0210 	bic.w	r2, r2, #16
 8008442:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d003      	beq.n	8008464 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008468:	2b00      	cmp	r3, #0
 800846a:	d032      	beq.n	80084d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d022      	beq.n	80084be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2205      	movs	r2, #5
 800847c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 0201 	bic.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3301      	adds	r3, #1
 8008494:	60bb      	str	r3, [r7, #8]
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	429a      	cmp	r2, r3
 800849a:	d307      	bcc.n	80084ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1f2      	bne.n	8008490 <HAL_DMA_IRQHandler+0x2cc>
 80084aa:	e000      	b.n	80084ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80084ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	e000      	b.n	80084d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80084d0:	bf00      	nop
    }
  }
}
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	2b40      	cmp	r3, #64	; 0x40
 8008504:	d108      	bne.n	8008518 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008516:	e007      	b.n	8008528 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]
}
 8008528:	bf00      	nop
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	b2db      	uxtb	r3, r3
 8008542:	3b10      	subs	r3, #16
 8008544:	4a14      	ldr	r2, [pc, #80]	; (8008598 <DMA_CalcBaseAndBitshift+0x64>)
 8008546:	fba2 2303 	umull	r2, r3, r2, r3
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800854e:	4a13      	ldr	r2, [pc, #76]	; (800859c <DMA_CalcBaseAndBitshift+0x68>)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	461a      	mov	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b03      	cmp	r3, #3
 8008560:	d909      	bls.n	8008576 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	659a      	str	r2, [r3, #88]	; 0x58
 8008574:	e007      	b.n	8008586 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	aaaaaaab 	.word	0xaaaaaaab
 800859c:	0800e930 	.word	0x0800e930

080085a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d11f      	bne.n	80085fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d856      	bhi.n	800866e <DMA_CheckFifoParam+0xce>
 80085c0:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <DMA_CheckFifoParam+0x28>)
 80085c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c6:	bf00      	nop
 80085c8:	080085d9 	.word	0x080085d9
 80085cc:	080085eb 	.word	0x080085eb
 80085d0:	080085d9 	.word	0x080085d9
 80085d4:	0800866f 	.word	0x0800866f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d046      	beq.n	8008672 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085e8:	e043      	b.n	8008672 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085f2:	d140      	bne.n	8008676 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80085f8:	e03d      	b.n	8008676 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008602:	d121      	bne.n	8008648 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d837      	bhi.n	800867a <DMA_CheckFifoParam+0xda>
 800860a:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <DMA_CheckFifoParam+0x70>)
 800860c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008610:	08008621 	.word	0x08008621
 8008614:	08008627 	.word	0x08008627
 8008618:	08008621 	.word	0x08008621
 800861c:	08008639 	.word	0x08008639
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	73fb      	strb	r3, [r7, #15]
      break;
 8008624:	e030      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d025      	beq.n	800867e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008636:	e022      	b.n	800867e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800863c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008640:	d11f      	bne.n	8008682 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008646:	e01c      	b.n	8008682 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d903      	bls.n	8008656 <DMA_CheckFifoParam+0xb6>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d003      	beq.n	800865c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008654:	e018      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	e015      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00e      	beq.n	8008686 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
      break;
 800866c:	e00b      	b.n	8008686 <DMA_CheckFifoParam+0xe6>
      break;
 800866e:	bf00      	nop
 8008670:	e00a      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      break;
 8008672:	bf00      	nop
 8008674:	e008      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      break;
 8008676:	bf00      	nop
 8008678:	e006      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      break;
 800867a:	bf00      	nop
 800867c:	e004      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      break;
 800867e:	bf00      	nop
 8008680:	e002      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      break;   
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <DMA_CheckFifoParam+0xe8>
      break;
 8008686:	bf00      	nop
    }
  } 
  
  return status; 
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop

08008698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	61fb      	str	r3, [r7, #28]
 80086b2:	e159      	b.n	8008968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80086b4:	2201      	movs	r2, #1
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4013      	ands	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	f040 8148 	bne.w	8008962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d005      	beq.n	80086ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d130      	bne.n	800874c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	2203      	movs	r2, #3
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	43db      	mvns	r3, r3
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4013      	ands	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	fa02 f303 	lsl.w	r3, r2, r3
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	4313      	orrs	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008720:	2201      	movs	r2, #1
 8008722:	69fb      	ldr	r3, [r7, #28]
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	43db      	mvns	r3, r3
 800872a:	69ba      	ldr	r2, [r7, #24]
 800872c:	4013      	ands	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	091b      	lsrs	r3, r3, #4
 8008736:	f003 0201 	and.w	r2, r3, #1
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	fa02 f303 	lsl.w	r3, r2, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4313      	orrs	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b03      	cmp	r3, #3
 8008756:	d017      	beq.n	8008788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	2203      	movs	r2, #3
 8008764:	fa02 f303 	lsl.w	r3, r2, r3
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4313      	orrs	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69ba      	ldr	r2, [r7, #24]
 8008786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d123      	bne.n	80087dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	08da      	lsrs	r2, r3, #3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	3208      	adds	r2, #8
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	220f      	movs	r2, #15
 80087ac:	fa02 f303 	lsl.w	r3, r2, r3
 80087b0:	43db      	mvns	r3, r3
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	4013      	ands	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	691a      	ldr	r2, [r3, #16]
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	69ba      	ldr	r2, [r7, #24]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	08da      	lsrs	r2, r3, #3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3208      	adds	r2, #8
 80087d6:	69b9      	ldr	r1, [r7, #24]
 80087d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	2203      	movs	r2, #3
 80087e8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ec:	43db      	mvns	r3, r3
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	4013      	ands	r3, r2
 80087f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f003 0203 	and.w	r2, r3, #3
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	4313      	orrs	r3, r2
 8008808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 80a2 	beq.w	8008962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	4b57      	ldr	r3, [pc, #348]	; (8008980 <HAL_GPIO_Init+0x2e8>)
 8008824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008826:	4a56      	ldr	r2, [pc, #344]	; (8008980 <HAL_GPIO_Init+0x2e8>)
 8008828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800882c:	6453      	str	r3, [r2, #68]	; 0x44
 800882e:	4b54      	ldr	r3, [pc, #336]	; (8008980 <HAL_GPIO_Init+0x2e8>)
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800883a:	4a52      	ldr	r2, [pc, #328]	; (8008984 <HAL_GPIO_Init+0x2ec>)
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	089b      	lsrs	r3, r3, #2
 8008840:	3302      	adds	r3, #2
 8008842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	220f      	movs	r2, #15
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	43db      	mvns	r3, r3
 8008858:	69ba      	ldr	r2, [r7, #24]
 800885a:	4013      	ands	r3, r2
 800885c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a49      	ldr	r2, [pc, #292]	; (8008988 <HAL_GPIO_Init+0x2f0>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d019      	beq.n	800889a <HAL_GPIO_Init+0x202>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a48      	ldr	r2, [pc, #288]	; (800898c <HAL_GPIO_Init+0x2f4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <HAL_GPIO_Init+0x1fe>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a47      	ldr	r2, [pc, #284]	; (8008990 <HAL_GPIO_Init+0x2f8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00d      	beq.n	8008892 <HAL_GPIO_Init+0x1fa>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	4a46      	ldr	r2, [pc, #280]	; (8008994 <HAL_GPIO_Init+0x2fc>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d007      	beq.n	800888e <HAL_GPIO_Init+0x1f6>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a45      	ldr	r2, [pc, #276]	; (8008998 <HAL_GPIO_Init+0x300>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d101      	bne.n	800888a <HAL_GPIO_Init+0x1f2>
 8008886:	2304      	movs	r3, #4
 8008888:	e008      	b.n	800889c <HAL_GPIO_Init+0x204>
 800888a:	2307      	movs	r3, #7
 800888c:	e006      	b.n	800889c <HAL_GPIO_Init+0x204>
 800888e:	2303      	movs	r3, #3
 8008890:	e004      	b.n	800889c <HAL_GPIO_Init+0x204>
 8008892:	2302      	movs	r3, #2
 8008894:	e002      	b.n	800889c <HAL_GPIO_Init+0x204>
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <HAL_GPIO_Init+0x204>
 800889a:	2300      	movs	r3, #0
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	f002 0203 	and.w	r2, r2, #3
 80088a2:	0092      	lsls	r2, r2, #2
 80088a4:	4093      	lsls	r3, r2
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088ac:	4935      	ldr	r1, [pc, #212]	; (8008984 <HAL_GPIO_Init+0x2ec>)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	089b      	lsrs	r3, r3, #2
 80088b2:	3302      	adds	r3, #2
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088ba:	4b38      	ldr	r3, [pc, #224]	; (800899c <HAL_GPIO_Init+0x304>)
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	43db      	mvns	r3, r3
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4013      	ands	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80088de:	4a2f      	ldr	r2, [pc, #188]	; (800899c <HAL_GPIO_Init+0x304>)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80088e4:	4b2d      	ldr	r3, [pc, #180]	; (800899c <HAL_GPIO_Init+0x304>)
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	43db      	mvns	r3, r3
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	4013      	ands	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d003      	beq.n	8008908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4313      	orrs	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008908:	4a24      	ldr	r2, [pc, #144]	; (800899c <HAL_GPIO_Init+0x304>)
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <HAL_GPIO_Init+0x304>)
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	43db      	mvns	r3, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4013      	ands	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008932:	4a1a      	ldr	r2, [pc, #104]	; (800899c <HAL_GPIO_Init+0x304>)
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008938:	4b18      	ldr	r3, [pc, #96]	; (800899c <HAL_GPIO_Init+0x304>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	43db      	mvns	r3, r3
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	4013      	ands	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d003      	beq.n	800895c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	4313      	orrs	r3, r2
 800895a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800895c:	4a0f      	ldr	r2, [pc, #60]	; (800899c <HAL_GPIO_Init+0x304>)
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	3301      	adds	r3, #1
 8008966:	61fb      	str	r3, [r7, #28]
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	2b0f      	cmp	r3, #15
 800896c:	f67f aea2 	bls.w	80086b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	3724      	adds	r7, #36	; 0x24
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40023800 	.word	0x40023800
 8008984:	40013800 	.word	0x40013800
 8008988:	40020000 	.word	0x40020000
 800898c:	40020400 	.word	0x40020400
 8008990:	40020800 	.word	0x40020800
 8008994:	40020c00 	.word	0x40020c00
 8008998:	40021000 	.word	0x40021000
 800899c:	40013c00 	.word	0x40013c00

080089a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
 80089ac:	4613      	mov	r3, r2
 80089ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80089b0:	787b      	ldrb	r3, [r7, #1]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089b6:	887a      	ldrh	r2, [r7, #2]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80089bc:	e003      	b.n	80089c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80089be:	887b      	ldrh	r3, [r7, #2]
 80089c0:	041a      	lsls	r2, r3, #16
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	619a      	str	r2, [r3, #24]
}
 80089c6:	bf00      	nop
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	4013      	ands	r3, r2
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d006      	beq.n	80089f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80089ea:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80089f0:	88fb      	ldrh	r3, [r7, #6]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fd fbd6 	bl	80061a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	40013c00 	.word	0x40013c00

08008a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e12b      	b.n	8008c6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7fd fca6 	bl	800637c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2224      	movs	r2, #36	; 0x24
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0201 	bic.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a68:	f001 fbbc 	bl	800a1e4 <HAL_RCC_GetPCLK1Freq>
 8008a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	4a81      	ldr	r2, [pc, #516]	; (8008c78 <HAL_I2C_Init+0x274>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d807      	bhi.n	8008a88 <HAL_I2C_Init+0x84>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a80      	ldr	r2, [pc, #512]	; (8008c7c <HAL_I2C_Init+0x278>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	bf94      	ite	ls
 8008a80:	2301      	movls	r3, #1
 8008a82:	2300      	movhi	r3, #0
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	e006      	b.n	8008a96 <HAL_I2C_Init+0x92>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4a7d      	ldr	r2, [pc, #500]	; (8008c80 <HAL_I2C_Init+0x27c>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bf94      	ite	ls
 8008a90:	2301      	movls	r3, #1
 8008a92:	2300      	movhi	r3, #0
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e0e7      	b.n	8008c6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4a78      	ldr	r2, [pc, #480]	; (8008c84 <HAL_I2C_Init+0x280>)
 8008aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa6:	0c9b      	lsrs	r3, r3, #18
 8008aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	4a6a      	ldr	r2, [pc, #424]	; (8008c78 <HAL_I2C_Init+0x274>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d802      	bhi.n	8008ad8 <HAL_I2C_Init+0xd4>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	e009      	b.n	8008aec <HAL_I2C_Init+0xe8>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ade:	fb02 f303 	mul.w	r3, r2, r3
 8008ae2:	4a69      	ldr	r2, [pc, #420]	; (8008c88 <HAL_I2C_Init+0x284>)
 8008ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae8:	099b      	lsrs	r3, r3, #6
 8008aea:	3301      	adds	r3, #1
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6812      	ldr	r2, [r2, #0]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	495c      	ldr	r1, [pc, #368]	; (8008c78 <HAL_I2C_Init+0x274>)
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	d819      	bhi.n	8008b40 <HAL_I2C_Init+0x13c>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	1e59      	subs	r1, r3, #1
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	005b      	lsls	r3, r3, #1
 8008b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b1a:	1c59      	adds	r1, r3, #1
 8008b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b20:	400b      	ands	r3, r1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00a      	beq.n	8008b3c <HAL_I2C_Init+0x138>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	1e59      	subs	r1, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b34:	3301      	adds	r3, #1
 8008b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b3a:	e051      	b.n	8008be0 <HAL_I2C_Init+0x1dc>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	e04f      	b.n	8008be0 <HAL_I2C_Init+0x1dc>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d111      	bne.n	8008b6c <HAL_I2C_Init+0x168>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	1e58      	subs	r0, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6859      	ldr	r1, [r3, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	440b      	add	r3, r1
 8008b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	e012      	b.n	8008b92 <HAL_I2C_Init+0x18e>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	1e58      	subs	r0, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6859      	ldr	r1, [r3, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	0099      	lsls	r1, r3, #2
 8008b7c:	440b      	add	r3, r1
 8008b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b82:	3301      	adds	r3, #1
 8008b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bf0c      	ite	eq
 8008b8c:	2301      	moveq	r3, #1
 8008b8e:	2300      	movne	r3, #0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <HAL_I2C_Init+0x196>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e022      	b.n	8008be0 <HAL_I2C_Init+0x1dc>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10e      	bne.n	8008bc0 <HAL_I2C_Init+0x1bc>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1e58      	subs	r0, r3, #1
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6859      	ldr	r1, [r3, #4]
 8008baa:	460b      	mov	r3, r1
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	440b      	add	r3, r1
 8008bb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bbe:	e00f      	b.n	8008be0 <HAL_I2C_Init+0x1dc>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	1e58      	subs	r0, r3, #1
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6859      	ldr	r1, [r3, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	0099      	lsls	r1, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	6809      	ldr	r1, [r1, #0]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69da      	ldr	r2, [r3, #28]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008c0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	6911      	ldr	r1, [r2, #16]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	68d2      	ldr	r2, [r2, #12]
 8008c1a:	4311      	orrs	r1, r2
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6812      	ldr	r2, [r2, #0]
 8008c20:	430b      	orrs	r3, r1
 8008c22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	695a      	ldr	r2, [r3, #20]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	430a      	orrs	r2, r1
 8008c3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	000186a0 	.word	0x000186a0
 8008c7c:	001e847f 	.word	0x001e847f
 8008c80:	003d08ff 	.word	0x003d08ff
 8008c84:	431bde83 	.word	0x431bde83
 8008c88:	10624dd3 	.word	0x10624dd3

08008c8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b088      	sub	sp, #32
 8008c90:	af02      	add	r7, sp, #8
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	4608      	mov	r0, r1
 8008c96:	4611      	mov	r1, r2
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	817b      	strh	r3, [r7, #10]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	813b      	strh	r3, [r7, #8]
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ca6:	f7fd ff65 	bl	8006b74 <HAL_GetTick>
 8008caa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	2b20      	cmp	r3, #32
 8008cb6:	f040 80d9 	bne.w	8008e6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	2319      	movs	r3, #25
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	496d      	ldr	r1, [pc, #436]	; (8008e78 <HAL_I2C_Mem_Write+0x1ec>)
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 fc7f 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e0cc      	b.n	8008e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_I2C_Mem_Write+0x56>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e0c5      	b.n	8008e6e <HAL_I2C_Mem_Write+0x1e2>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d007      	beq.n	8008d08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0201 	orr.w	r2, r2, #1
 8008d06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2221      	movs	r2, #33	; 0x21
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2240      	movs	r2, #64	; 0x40
 8008d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a3a      	ldr	r2, [r7, #32]
 8008d32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4a4d      	ldr	r2, [pc, #308]	; (8008e7c <HAL_I2C_Mem_Write+0x1f0>)
 8008d48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008d4a:	88f8      	ldrh	r0, [r7, #6]
 8008d4c:	893a      	ldrh	r2, [r7, #8]
 8008d4e:	8979      	ldrh	r1, [r7, #10]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4603      	mov	r3, r0
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 fab6 	bl	80092cc <I2C_RequestMemoryWrite>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d052      	beq.n	8008e0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e081      	b.n	8008e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f000 fd00 	bl	8009774 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00d      	beq.n	8008d96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d107      	bne.n	8008d92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e06b      	b.n	8008e6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008db0:	3b01      	subs	r3, #1
 8008db2:	b29a      	uxth	r2, r3
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	f003 0304 	and.w	r3, r3, #4
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d11b      	bne.n	8008e0c <HAL_I2C_Mem_Write+0x180>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d017      	beq.n	8008e0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	781a      	ldrb	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	1c5a      	adds	r2, r3, #1
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df6:	3b01      	subs	r3, #1
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1aa      	bne.n	8008d6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 fcec 	bl	80097f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00d      	beq.n	8008e40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e28:	2b04      	cmp	r3, #4
 8008e2a:	d107      	bne.n	8008e3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e016      	b.n	8008e6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e000      	b.n	8008e6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008e6c:	2302      	movs	r3, #2
  }
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	00100002 	.word	0x00100002
 8008e7c:	ffff0000 	.word	0xffff0000

08008e80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08c      	sub	sp, #48	; 0x30
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	4608      	mov	r0, r1
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	817b      	strh	r3, [r7, #10]
 8008e92:	460b      	mov	r3, r1
 8008e94:	813b      	strh	r3, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e9a:	f7fd fe6b 	bl	8006b74 <HAL_GetTick>
 8008e9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b20      	cmp	r3, #32
 8008eaa:	f040 8208 	bne.w	80092be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	2319      	movs	r3, #25
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	497b      	ldr	r1, [pc, #492]	; (80090a4 <HAL_I2C_Mem_Read+0x224>)
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fb85 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e1fb      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d101      	bne.n	8008ed6 <HAL_I2C_Mem_Read+0x56>
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	e1f4      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d007      	beq.n	8008efc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2222      	movs	r2, #34	; 0x22
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2240      	movs	r2, #64	; 0x40
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f32:	b29a      	uxth	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a5b      	ldr	r2, [pc, #364]	; (80090a8 <HAL_I2C_Mem_Read+0x228>)
 8008f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f3e:	88f8      	ldrh	r0, [r7, #6]
 8008f40:	893a      	ldrh	r2, [r7, #8]
 8008f42:	8979      	ldrh	r1, [r7, #10]
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f000 fa52 	bl	80093f8 <I2C_RequestMemoryRead>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e1b0      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d113      	bne.n	8008f8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f66:	2300      	movs	r3, #0
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	623b      	str	r3, [r7, #32]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	699b      	ldr	r3, [r3, #24]
 8008f78:	623b      	str	r3, [r7, #32]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	e184      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d11b      	bne.n	8008fce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61fb      	str	r3, [r7, #28]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	61fb      	str	r3, [r7, #28]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	61fb      	str	r3, [r7, #28]
 8008fba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	e164      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d11b      	bne.n	800900e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	61bb      	str	r3, [r7, #24]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	e144      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	695b      	ldr	r3, [r3, #20]
 8009018:	617b      	str	r3, [r7, #20]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009024:	e138      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800902a:	2b03      	cmp	r3, #3
 800902c:	f200 80f1 	bhi.w	8009212 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009034:	2b01      	cmp	r3, #1
 8009036:	d123      	bne.n	8009080 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800903a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fc1b 	bl	8009878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e139      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	691a      	ldr	r2, [r3, #16]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800907e:	e10b      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009084:	2b02      	cmp	r3, #2
 8009086:	d14e      	bne.n	8009126 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	2200      	movs	r2, #0
 8009090:	4906      	ldr	r1, [pc, #24]	; (80090ac <HAL_I2C_Mem_Read+0x22c>)
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fa98 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d008      	beq.n	80090b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e10e      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
 80090a2:	bf00      	nop
 80090a4:	00100002 	.word	0x00100002
 80090a8:	ffff0000 	.word	0xffff0000
 80090ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691a      	ldr	r2, [r3, #16]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090dc:	3b01      	subs	r3, #1
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	b2d2      	uxtb	r2, r2
 80090fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911a:	b29b      	uxth	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009124:	e0b8      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	2200      	movs	r2, #0
 800912e:	4966      	ldr	r1, [pc, #408]	; (80092c8 <HAL_I2C_Mem_Read+0x448>)
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fa49 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	e0bf      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800914e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	691a      	ldr	r2, [r3, #16]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800916c:	3b01      	subs	r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	2200      	movs	r2, #0
 800918a:	494f      	ldr	r1, [pc, #316]	; (80092c8 <HAL_I2C_Mem_Read+0x448>)
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 fa1b 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e091      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	691a      	ldr	r2, [r3, #16]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091c8:	3b01      	subs	r3, #1
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	3b01      	subs	r3, #1
 80091d8:	b29a      	uxth	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	691a      	ldr	r2, [r3, #16]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	b2d2      	uxtb	r2, r2
 80091ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fa:	3b01      	subs	r3, #1
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009210:	e042      	b.n	8009298 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009214:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fb2e 	bl	8009878 <I2C_WaitOnRXNEFlagUntilTimeout>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e04c      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	691a      	ldr	r2, [r3, #16]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b01      	subs	r3, #1
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b04      	cmp	r3, #4
 8009264:	d118      	bne.n	8009298 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	b2d2      	uxtb	r2, r2
 8009272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800928e:	b29b      	uxth	r3, r3
 8009290:	3b01      	subs	r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	f47f aec2 	bne.w	8009026 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	e000      	b.n	80092c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80092be:	2302      	movs	r3, #2
  }
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3728      	adds	r7, #40	; 0x28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	00010004 	.word	0x00010004

080092cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b088      	sub	sp, #32
 80092d0:	af02      	add	r7, sp, #8
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	4608      	mov	r0, r1
 80092d6:	4611      	mov	r1, r2
 80092d8:	461a      	mov	r2, r3
 80092da:	4603      	mov	r3, r0
 80092dc:	817b      	strh	r3, [r7, #10]
 80092de:	460b      	mov	r3, r1
 80092e0:	813b      	strh	r3, [r7, #8]
 80092e2:	4613      	mov	r3, r2
 80092e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	6a3b      	ldr	r3, [r7, #32]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f000 f960 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8009308:	4603      	mov	r3, r0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00d      	beq.n	800932a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800931c:	d103      	bne.n	8009326 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009324:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e05f      	b.n	80093ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800932a:	897b      	ldrh	r3, [r7, #10]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	6a3a      	ldr	r2, [r7, #32]
 800933e:	492d      	ldr	r1, [pc, #180]	; (80093f4 <I2C_RequestMemoryWrite+0x128>)
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 f998 	bl	8009676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e04c      	b.n	80093ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009350:	2300      	movs	r3, #0
 8009352:	617b      	str	r3, [r7, #20]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	695b      	ldr	r3, [r3, #20]
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	617b      	str	r3, [r7, #20]
 8009364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009368:	6a39      	ldr	r1, [r7, #32]
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 fa02 	bl	8009774 <I2C_WaitOnTXEFlagUntilTimeout>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00d      	beq.n	8009392 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937a:	2b04      	cmp	r3, #4
 800937c:	d107      	bne.n	800938e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800938c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e02b      	b.n	80093ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d105      	bne.n	80093a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009398:	893b      	ldrh	r3, [r7, #8]
 800939a:	b2da      	uxtb	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	611a      	str	r2, [r3, #16]
 80093a2:	e021      	b.n	80093e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093a4:	893b      	ldrh	r3, [r7, #8]
 80093a6:	0a1b      	lsrs	r3, r3, #8
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	b2da      	uxtb	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093b4:	6a39      	ldr	r1, [r7, #32]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 f9dc 	bl	8009774 <I2C_WaitOnTXEFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00d      	beq.n	80093de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	d107      	bne.n	80093da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e005      	b.n	80093ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093de:	893b      	ldrh	r3, [r7, #8]
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	00010002 	.word	0x00010002

080093f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	4608      	mov	r0, r1
 8009402:	4611      	mov	r1, r2
 8009404:	461a      	mov	r2, r3
 8009406:	4603      	mov	r3, r0
 8009408:	817b      	strh	r3, [r7, #10]
 800940a:	460b      	mov	r3, r1
 800940c:	813b      	strh	r3, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009420:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009430:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	2200      	movs	r2, #0
 800943a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f8c2 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00d      	beq.n	8009466 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009458:	d103      	bne.n	8009462 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009460:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e0aa      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009466:	897b      	ldrh	r3, [r7, #10]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	461a      	mov	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009474:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	6a3a      	ldr	r2, [r7, #32]
 800947a:	4952      	ldr	r1, [pc, #328]	; (80095c4 <I2C_RequestMemoryRead+0x1cc>)
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f8fa 	bl	8009676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e097      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800948c:	2300      	movs	r3, #0
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	695b      	ldr	r3, [r3, #20]
 8009496:	617b      	str	r3, [r7, #20]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a4:	6a39      	ldr	r1, [r7, #32]
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f964 	bl	8009774 <I2C_WaitOnTXEFlagUntilTimeout>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00d      	beq.n	80094ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b6:	2b04      	cmp	r3, #4
 80094b8:	d107      	bne.n	80094ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e076      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094ce:	88fb      	ldrh	r3, [r7, #6]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d105      	bne.n	80094e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80094d4:	893b      	ldrh	r3, [r7, #8]
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	611a      	str	r2, [r3, #16]
 80094de:	e021      	b.n	8009524 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80094e0:	893b      	ldrh	r3, [r7, #8]
 80094e2:	0a1b      	lsrs	r3, r3, #8
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f0:	6a39      	ldr	r1, [r7, #32]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f93e 	bl	8009774 <I2C_WaitOnTXEFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	2b04      	cmp	r3, #4
 8009504:	d107      	bne.n	8009516 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009514:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e050      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800951a:	893b      	ldrh	r3, [r7, #8]
 800951c:	b2da      	uxtb	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009526:	6a39      	ldr	r1, [r7, #32]
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 f923 	bl	8009774 <I2C_WaitOnTXEFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00d      	beq.n	8009550 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	2b04      	cmp	r3, #4
 800953a:	d107      	bne.n	800954c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e035      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800955e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	2200      	movs	r2, #0
 8009568:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f000 f82b 	bl	80095c8 <I2C_WaitOnFlagUntilTimeout>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00d      	beq.n	8009594 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009586:	d103      	bne.n	8009590 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800958e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e013      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009594:	897b      	ldrh	r3, [r7, #10]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	f043 0301 	orr.w	r3, r3, #1
 800959c:	b2da      	uxtb	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	4906      	ldr	r1, [pc, #24]	; (80095c4 <I2C_RequestMemoryRead+0x1cc>)
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 f863 	bl	8009676 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	00010002 	.word	0x00010002

080095c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	603b      	str	r3, [r7, #0]
 80095d4:	4613      	mov	r3, r2
 80095d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80095d8:	e025      	b.n	8009626 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e0:	d021      	beq.n	8009626 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095e2:	f7fd fac7 	bl	8006b74 <HAL_GetTick>
 80095e6:	4602      	mov	r2, r0
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	1ad3      	subs	r3, r2, r3
 80095ec:	683a      	ldr	r2, [r7, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d302      	bcc.n	80095f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d116      	bne.n	8009626 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	f043 0220 	orr.w	r2, r3, #32
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	e023      	b.n	800966e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	0c1b      	lsrs	r3, r3, #16
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10d      	bne.n	800964c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	43da      	mvns	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	4013      	ands	r3, r2
 800963c:	b29b      	uxth	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	bf0c      	ite	eq
 8009642:	2301      	moveq	r3, #1
 8009644:	2300      	movne	r3, #0
 8009646:	b2db      	uxtb	r3, r3
 8009648:	461a      	mov	r2, r3
 800964a:	e00c      	b.n	8009666 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	43da      	mvns	r2, r3
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	4013      	ands	r3, r2
 8009658:	b29b      	uxth	r3, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf0c      	ite	eq
 800965e:	2301      	moveq	r3, #1
 8009660:	2300      	movne	r3, #0
 8009662:	b2db      	uxtb	r3, r3
 8009664:	461a      	mov	r2, r3
 8009666:	79fb      	ldrb	r3, [r7, #7]
 8009668:	429a      	cmp	r2, r3
 800966a:	d0b6      	beq.n	80095da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
 8009682:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009684:	e051      	b.n	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009694:	d123      	bne.n	80096de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2220      	movs	r2, #32
 80096ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ca:	f043 0204 	orr.w	r2, r3, #4
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e046      	b.n	800976c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e4:	d021      	beq.n	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e6:	f7fd fa45 	bl	8006b74 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d302      	bcc.n	80096fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d116      	bne.n	800972a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2220      	movs	r2, #32
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	f043 0220 	orr.w	r2, r3, #32
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e020      	b.n	800976c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	0c1b      	lsrs	r3, r3, #16
 800972e:	b2db      	uxtb	r3, r3
 8009730:	2b01      	cmp	r3, #1
 8009732:	d10c      	bne.n	800974e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	43da      	mvns	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4013      	ands	r3, r2
 8009740:	b29b      	uxth	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	bf14      	ite	ne
 8009746:	2301      	movne	r3, #1
 8009748:	2300      	moveq	r3, #0
 800974a:	b2db      	uxtb	r3, r3
 800974c:	e00b      	b.n	8009766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	43da      	mvns	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4013      	ands	r3, r2
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	bf14      	ite	ne
 8009760:	2301      	movne	r3, #1
 8009762:	2300      	moveq	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d18d      	bne.n	8009686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009780:	e02d      	b.n	80097de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f8ce 	bl	8009924 <I2C_IsAcknowledgeFailed>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e02d      	b.n	80097ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d021      	beq.n	80097de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800979a:	f7fd f9eb 	bl	8006b74 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d302      	bcc.n	80097b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d116      	bne.n	80097de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ca:	f043 0220 	orr.w	r2, r3, #32
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e007      	b.n	80097ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d1ca      	bne.n	8009782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	60f8      	str	r0, [r7, #12]
 80097fe:	60b9      	str	r1, [r7, #8]
 8009800:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009802:	e02d      	b.n	8009860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 f88d 	bl	8009924 <I2C_IsAcknowledgeFailed>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e02d      	b.n	8009870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981a:	d021      	beq.n	8009860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981c:	f7fd f9aa 	bl	8006b74 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d116      	bne.n	8009860 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2220      	movs	r2, #32
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984c:	f043 0220 	orr.w	r2, r3, #32
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e007      	b.n	8009870 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b04      	cmp	r3, #4
 800986c:	d1ca      	bne.n	8009804 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009884:	e042      	b.n	800990c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	2b10      	cmp	r3, #16
 8009892:	d119      	bne.n	80098c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f06f 0210 	mvn.w	r2, #16
 800989c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e029      	b.n	800991c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c8:	f7fd f954 	bl	8006b74 <HAL_GetTick>
 80098cc:	4602      	mov	r2, r0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d302      	bcc.n	80098de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d116      	bne.n	800990c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f8:	f043 0220 	orr.w	r2, r3, #32
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e007      	b.n	800991c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009916:	2b40      	cmp	r3, #64	; 0x40
 8009918:	d1b5      	bne.n	8009886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800993a:	d11b      	bne.n	8009974 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009944:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	f043 0204 	orr.w	r2, r3, #4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e000      	b.n	8009976 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
	...

08009984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e267      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d075      	beq.n	8009a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80099a2:	4b88      	ldr	r3, [pc, #544]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f003 030c 	and.w	r3, r3, #12
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d00c      	beq.n	80099c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099ae:	4b85      	ldr	r3, [pc, #532]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80099b6:	2b08      	cmp	r3, #8
 80099b8:	d112      	bne.n	80099e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80099ba:	4b82      	ldr	r3, [pc, #520]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099c6:	d10b      	bne.n	80099e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099c8:	4b7e      	ldr	r3, [pc, #504]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d05b      	beq.n	8009a8c <HAL_RCC_OscConfig+0x108>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d157      	bne.n	8009a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e242      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e8:	d106      	bne.n	80099f8 <HAL_RCC_OscConfig+0x74>
 80099ea:	4b76      	ldr	r3, [pc, #472]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a75      	ldr	r2, [pc, #468]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 80099f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	e01d      	b.n	8009a34 <HAL_RCC_OscConfig+0xb0>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a00:	d10c      	bne.n	8009a1c <HAL_RCC_OscConfig+0x98>
 8009a02:	4b70      	ldr	r3, [pc, #448]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a6f      	ldr	r2, [pc, #444]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	4b6d      	ldr	r3, [pc, #436]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a6c      	ldr	r2, [pc, #432]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	e00b      	b.n	8009a34 <HAL_RCC_OscConfig+0xb0>
 8009a1c:	4b69      	ldr	r3, [pc, #420]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a68      	ldr	r2, [pc, #416]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	4b66      	ldr	r3, [pc, #408]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a65      	ldr	r2, [pc, #404]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d013      	beq.n	8009a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a3c:	f7fd f89a 	bl	8006b74 <HAL_GetTick>
 8009a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a42:	e008      	b.n	8009a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a44:	f7fd f896 	bl	8006b74 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b64      	cmp	r3, #100	; 0x64
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e207      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a56:	4b5b      	ldr	r3, [pc, #364]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0f0      	beq.n	8009a44 <HAL_RCC_OscConfig+0xc0>
 8009a62:	e014      	b.n	8009a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a64:	f7fd f886 	bl	8006b74 <HAL_GetTick>
 8009a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a6a:	e008      	b.n	8009a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009a6c:	f7fd f882 	bl	8006b74 <HAL_GetTick>
 8009a70:	4602      	mov	r2, r0
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	1ad3      	subs	r3, r2, r3
 8009a76:	2b64      	cmp	r3, #100	; 0x64
 8009a78:	d901      	bls.n	8009a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e1f3      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a7e:	4b51      	ldr	r3, [pc, #324]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f0      	bne.n	8009a6c <HAL_RCC_OscConfig+0xe8>
 8009a8a:	e000      	b.n	8009a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d063      	beq.n	8009b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a9a:	4b4a      	ldr	r3, [pc, #296]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 030c 	and.w	r3, r3, #12
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00b      	beq.n	8009abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009aa6:	4b47      	ldr	r3, [pc, #284]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009aae:	2b08      	cmp	r3, #8
 8009ab0:	d11c      	bne.n	8009aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ab2:	4b44      	ldr	r3, [pc, #272]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d116      	bne.n	8009aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009abe:	4b41      	ldr	r3, [pc, #260]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0302 	and.w	r3, r3, #2
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d005      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x152>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d001      	beq.n	8009ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e1c7      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ad6:	4b3b      	ldr	r3, [pc, #236]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	4937      	ldr	r1, [pc, #220]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009aea:	e03a      	b.n	8009b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d020      	beq.n	8009b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009af4:	4b34      	ldr	r3, [pc, #208]	; (8009bc8 <HAL_RCC_OscConfig+0x244>)
 8009af6:	2201      	movs	r2, #1
 8009af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afa:	f7fd f83b 	bl	8006b74 <HAL_GetTick>
 8009afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b00:	e008      	b.n	8009b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b02:	f7fd f837 	bl	8006b74 <HAL_GetTick>
 8009b06:	4602      	mov	r2, r0
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d901      	bls.n	8009b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e1a8      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b14:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d0f0      	beq.n	8009b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b20:	4b28      	ldr	r3, [pc, #160]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	4925      	ldr	r1, [pc, #148]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	600b      	str	r3, [r1, #0]
 8009b34:	e015      	b.n	8009b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <HAL_RCC_OscConfig+0x244>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fd f81a 	bl	8006b74 <HAL_GetTick>
 8009b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009b44:	f7fd f816 	bl	8006b74 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e187      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009b56:	4b1b      	ldr	r3, [pc, #108]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f0      	bne.n	8009b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f003 0308 	and.w	r3, r3, #8
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d036      	beq.n	8009bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d016      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b76:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <HAL_RCC_OscConfig+0x248>)
 8009b78:	2201      	movs	r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b7c:	f7fc fffa 	bl	8006b74 <HAL_GetTick>
 8009b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b82:	e008      	b.n	8009b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b84:	f7fc fff6 	bl	8006b74 <HAL_GetTick>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d901      	bls.n	8009b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e167      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b96:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <HAL_RCC_OscConfig+0x240>)
 8009b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b9a:	f003 0302 	and.w	r3, r3, #2
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0f0      	beq.n	8009b84 <HAL_RCC_OscConfig+0x200>
 8009ba2:	e01b      	b.n	8009bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <HAL_RCC_OscConfig+0x248>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009baa:	f7fc ffe3 	bl	8006b74 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bb0:	e00e      	b.n	8009bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bb2:	f7fc ffdf 	bl	8006b74 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d907      	bls.n	8009bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e150      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
 8009bc4:	40023800 	.word	0x40023800
 8009bc8:	42470000 	.word	0x42470000
 8009bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009bd0:	4b88      	ldr	r3, [pc, #544]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1ea      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 8097 	beq.w	8009d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009bee:	4b81      	ldr	r3, [pc, #516]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d10f      	bne.n	8009c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60bb      	str	r3, [r7, #8]
 8009bfe:	4b7d      	ldr	r3, [pc, #500]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	4a7c      	ldr	r2, [pc, #496]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c08:	6413      	str	r3, [r2, #64]	; 0x40
 8009c0a:	4b7a      	ldr	r3, [pc, #488]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c12:	60bb      	str	r3, [r7, #8]
 8009c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c1a:	4b77      	ldr	r3, [pc, #476]	; (8009df8 <HAL_RCC_OscConfig+0x474>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d118      	bne.n	8009c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009c26:	4b74      	ldr	r3, [pc, #464]	; (8009df8 <HAL_RCC_OscConfig+0x474>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a73      	ldr	r2, [pc, #460]	; (8009df8 <HAL_RCC_OscConfig+0x474>)
 8009c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009c32:	f7fc ff9f 	bl	8006b74 <HAL_GetTick>
 8009c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c38:	e008      	b.n	8009c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c3a:	f7fc ff9b 	bl	8006b74 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d901      	bls.n	8009c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e10c      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009c4c:	4b6a      	ldr	r3, [pc, #424]	; (8009df8 <HAL_RCC_OscConfig+0x474>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0f0      	beq.n	8009c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d106      	bne.n	8009c6e <HAL_RCC_OscConfig+0x2ea>
 8009c60:	4b64      	ldr	r3, [pc, #400]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c64:	4a63      	ldr	r2, [pc, #396]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c66:	f043 0301 	orr.w	r3, r3, #1
 8009c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c6c:	e01c      	b.n	8009ca8 <HAL_RCC_OscConfig+0x324>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	d10c      	bne.n	8009c90 <HAL_RCC_OscConfig+0x30c>
 8009c76:	4b5f      	ldr	r3, [pc, #380]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	4a5e      	ldr	r2, [pc, #376]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c7c:	f043 0304 	orr.w	r3, r3, #4
 8009c80:	6713      	str	r3, [r2, #112]	; 0x70
 8009c82:	4b5c      	ldr	r3, [pc, #368]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	4a5b      	ldr	r2, [pc, #364]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c88:	f043 0301 	orr.w	r3, r3, #1
 8009c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c8e:	e00b      	b.n	8009ca8 <HAL_RCC_OscConfig+0x324>
 8009c90:	4b58      	ldr	r3, [pc, #352]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c94:	4a57      	ldr	r2, [pc, #348]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c96:	f023 0301 	bic.w	r3, r3, #1
 8009c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c9c:	4b55      	ldr	r3, [pc, #340]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca0:	4a54      	ldr	r2, [pc, #336]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009ca2:	f023 0304 	bic.w	r3, r3, #4
 8009ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d015      	beq.n	8009cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb0:	f7fc ff60 	bl	8006b74 <HAL_GetTick>
 8009cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cb6:	e00a      	b.n	8009cce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cb8:	f7fc ff5c 	bl	8006b74 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e0cb      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009cce:	4b49      	ldr	r3, [pc, #292]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd2:	f003 0302 	and.w	r3, r3, #2
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0ee      	beq.n	8009cb8 <HAL_RCC_OscConfig+0x334>
 8009cda:	e014      	b.n	8009d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009cdc:	f7fc ff4a 	bl	8006b74 <HAL_GetTick>
 8009ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ce2:	e00a      	b.n	8009cfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009ce4:	f7fc ff46 	bl	8006b74 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d901      	bls.n	8009cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e0b5      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009cfa:	4b3e      	ldr	r3, [pc, #248]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfe:	f003 0302 	and.w	r3, r3, #2
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1ee      	bne.n	8009ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d105      	bne.n	8009d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009d0c:	4b39      	ldr	r3, [pc, #228]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d10:	4a38      	ldr	r2, [pc, #224]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	699b      	ldr	r3, [r3, #24]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 80a1 	beq.w	8009e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d22:	4b34      	ldr	r3, [pc, #208]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f003 030c 	and.w	r3, r3, #12
 8009d2a:	2b08      	cmp	r3, #8
 8009d2c:	d05c      	beq.n	8009de8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d141      	bne.n	8009dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d36:	4b31      	ldr	r3, [pc, #196]	; (8009dfc <HAL_RCC_OscConfig+0x478>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d3c:	f7fc ff1a 	bl	8006b74 <HAL_GetTick>
 8009d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d42:	e008      	b.n	8009d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d44:	f7fc ff16 	bl	8006b74 <HAL_GetTick>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d901      	bls.n	8009d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e087      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d56:	4b27      	ldr	r3, [pc, #156]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f0      	bne.n	8009d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	69da      	ldr	r2, [r3, #28]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	431a      	orrs	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	019b      	lsls	r3, r3, #6
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d78:	085b      	lsrs	r3, r3, #1
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	041b      	lsls	r3, r3, #16
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d84:	061b      	lsls	r3, r3, #24
 8009d86:	491b      	ldr	r1, [pc, #108]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <HAL_RCC_OscConfig+0x478>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d92:	f7fc feef 	bl	8006b74 <HAL_GetTick>
 8009d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d9a:	f7fc feeb 	bl	8006b74 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e05c      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dac:	4b11      	ldr	r3, [pc, #68]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0f0      	beq.n	8009d9a <HAL_RCC_OscConfig+0x416>
 8009db8:	e054      	b.n	8009e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dba:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <HAL_RCC_OscConfig+0x478>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dc0:	f7fc fed8 	bl	8006b74 <HAL_GetTick>
 8009dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dc6:	e008      	b.n	8009dda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dc8:	f7fc fed4 	bl	8006b74 <HAL_GetTick>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	1ad3      	subs	r3, r2, r3
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d901      	bls.n	8009dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e045      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dda:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <HAL_RCC_OscConfig+0x470>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1f0      	bne.n	8009dc8 <HAL_RCC_OscConfig+0x444>
 8009de6:	e03d      	b.n	8009e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d107      	bne.n	8009e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e038      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
 8009df4:	40023800 	.word	0x40023800
 8009df8:	40007000 	.word	0x40007000
 8009dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009e00:	4b1b      	ldr	r3, [pc, #108]	; (8009e70 <HAL_RCC_OscConfig+0x4ec>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d028      	beq.n	8009e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d121      	bne.n	8009e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d11a      	bne.n	8009e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009e30:	4013      	ands	r3, r2
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d111      	bne.n	8009e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e46:	085b      	lsrs	r3, r3, #1
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d107      	bne.n	8009e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d001      	beq.n	8009e64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009e60:	2301      	movs	r3, #1
 8009e62:	e000      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	40023800 	.word	0x40023800

08009e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e0cc      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e88:	4b68      	ldr	r3, [pc, #416]	; (800a02c <HAL_RCC_ClockConfig+0x1b8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 0307 	and.w	r3, r3, #7
 8009e90:	683a      	ldr	r2, [r7, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d90c      	bls.n	8009eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e96:	4b65      	ldr	r3, [pc, #404]	; (800a02c <HAL_RCC_ClockConfig+0x1b8>)
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e9e:	4b63      	ldr	r3, [pc, #396]	; (800a02c <HAL_RCC_ClockConfig+0x1b8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 0307 	and.w	r3, r3, #7
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d001      	beq.n	8009eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e0b8      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d020      	beq.n	8009efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f003 0304 	and.w	r3, r3, #4
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ec8:	4b59      	ldr	r3, [pc, #356]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	4a58      	ldr	r2, [pc, #352]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 0308 	and.w	r3, r3, #8
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009ee0:	4b53      	ldr	r3, [pc, #332]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	4a52      	ldr	r2, [pc, #328]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eec:	4b50      	ldr	r3, [pc, #320]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	494d      	ldr	r1, [pc, #308]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d044      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d107      	bne.n	8009f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f12:	4b47      	ldr	r3, [pc, #284]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d119      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e07f      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d003      	beq.n	8009f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d107      	bne.n	8009f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f32:	4b3f      	ldr	r3, [pc, #252]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e06f      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f42:	4b3b      	ldr	r3, [pc, #236]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e067      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f52:	4b37      	ldr	r3, [pc, #220]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f023 0203 	bic.w	r2, r3, #3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	4934      	ldr	r1, [pc, #208]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f64:	f7fc fe06 	bl	8006b74 <HAL_GetTick>
 8009f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f6a:	e00a      	b.n	8009f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f6c:	f7fc fe02 	bl	8006b74 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e04f      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f82:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f003 020c 	and.w	r2, r3, #12
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d1eb      	bne.n	8009f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f94:	4b25      	ldr	r3, [pc, #148]	; (800a02c <HAL_RCC_ClockConfig+0x1b8>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d20c      	bcs.n	8009fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fa2:	4b22      	ldr	r3, [pc, #136]	; (800a02c <HAL_RCC_ClockConfig+0x1b8>)
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009faa:	4b20      	ldr	r3, [pc, #128]	; (800a02c <HAL_RCC_ClockConfig+0x1b8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0307 	and.w	r3, r3, #7
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d001      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e032      	b.n	800a022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d008      	beq.n	8009fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009fc8:	4b19      	ldr	r3, [pc, #100]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	4916      	ldr	r1, [pc, #88]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0308 	and.w	r3, r3, #8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d009      	beq.n	8009ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009fe6:	4b12      	ldr	r3, [pc, #72]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	490e      	ldr	r1, [pc, #56]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009ffa:	f000 f821 	bl	800a040 <HAL_RCC_GetSysClockFreq>
 8009ffe:	4602      	mov	r2, r0
 800a000:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <HAL_RCC_ClockConfig+0x1bc>)
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	091b      	lsrs	r3, r3, #4
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	490a      	ldr	r1, [pc, #40]	; (800a034 <HAL_RCC_ClockConfig+0x1c0>)
 800a00c:	5ccb      	ldrb	r3, [r1, r3]
 800a00e:	fa22 f303 	lsr.w	r3, r2, r3
 800a012:	4a09      	ldr	r2, [pc, #36]	; (800a038 <HAL_RCC_ClockConfig+0x1c4>)
 800a014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a016:	4b09      	ldr	r3, [pc, #36]	; (800a03c <HAL_RCC_ClockConfig+0x1c8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fc fd66 	bl	8006aec <HAL_InitTick>

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	40023c00 	.word	0x40023c00
 800a030:	40023800 	.word	0x40023800
 800a034:	0800e918 	.word	0x0800e918
 800a038:	20008ef0 	.word	0x20008ef0
 800a03c:	20008ef4 	.word	0x20008ef4

0800a040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a044:	b090      	sub	sp, #64	; 0x40
 800a046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	637b      	str	r3, [r7, #52]	; 0x34
 800a04c:	2300      	movs	r3, #0
 800a04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a050:	2300      	movs	r3, #0
 800a052:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a058:	4b59      	ldr	r3, [pc, #356]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f003 030c 	and.w	r3, r3, #12
 800a060:	2b08      	cmp	r3, #8
 800a062:	d00d      	beq.n	800a080 <HAL_RCC_GetSysClockFreq+0x40>
 800a064:	2b08      	cmp	r3, #8
 800a066:	f200 80a1 	bhi.w	800a1ac <HAL_RCC_GetSysClockFreq+0x16c>
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <HAL_RCC_GetSysClockFreq+0x34>
 800a06e:	2b04      	cmp	r3, #4
 800a070:	d003      	beq.n	800a07a <HAL_RCC_GetSysClockFreq+0x3a>
 800a072:	e09b      	b.n	800a1ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a074:	4b53      	ldr	r3, [pc, #332]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a076:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a078:	e09b      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a07a:	4b53      	ldr	r3, [pc, #332]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a07c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a07e:	e098      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a080:	4b4f      	ldr	r3, [pc, #316]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a088:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a08a:	4b4d      	ldr	r3, [pc, #308]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a092:	2b00      	cmp	r3, #0
 800a094:	d028      	beq.n	800a0e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a096:	4b4a      	ldr	r3, [pc, #296]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	099b      	lsrs	r3, r3, #6
 800a09c:	2200      	movs	r2, #0
 800a09e:	623b      	str	r3, [r7, #32]
 800a0a0:	627a      	str	r2, [r7, #36]	; 0x24
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
 800a0a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4b47      	ldr	r3, [pc, #284]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a0ac:	fb03 f201 	mul.w	r2, r3, r1
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	fb00 f303 	mul.w	r3, r0, r3
 800a0b6:	4413      	add	r3, r2
 800a0b8:	4a43      	ldr	r2, [pc, #268]	; (800a1c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800a0ba:	fba0 1202 	umull	r1, r2, r0, r2
 800a0be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	62ba      	str	r2, [r7, #40]	; 0x28
 800a0c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0c6:	4413      	add	r3, r2
 800a0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	61bb      	str	r3, [r7, #24]
 800a0d0:	61fa      	str	r2, [r7, #28]
 800a0d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a0da:	f7f6 fbdb 	bl	8000894 <__aeabi_uldivmod>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e6:	e053      	b.n	800a190 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0e8:	4b35      	ldr	r3, [pc, #212]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	099b      	lsrs	r3, r3, #6
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	617a      	str	r2, [r7, #20]
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a0fa:	f04f 0b00 	mov.w	fp, #0
 800a0fe:	4652      	mov	r2, sl
 800a100:	465b      	mov	r3, fp
 800a102:	f04f 0000 	mov.w	r0, #0
 800a106:	f04f 0100 	mov.w	r1, #0
 800a10a:	0159      	lsls	r1, r3, #5
 800a10c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a110:	0150      	lsls	r0, r2, #5
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	ebb2 080a 	subs.w	r8, r2, sl
 800a11a:	eb63 090b 	sbc.w	r9, r3, fp
 800a11e:	f04f 0200 	mov.w	r2, #0
 800a122:	f04f 0300 	mov.w	r3, #0
 800a126:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a12a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a12e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a132:	ebb2 0408 	subs.w	r4, r2, r8
 800a136:	eb63 0509 	sbc.w	r5, r3, r9
 800a13a:	f04f 0200 	mov.w	r2, #0
 800a13e:	f04f 0300 	mov.w	r3, #0
 800a142:	00eb      	lsls	r3, r5, #3
 800a144:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a148:	00e2      	lsls	r2, r4, #3
 800a14a:	4614      	mov	r4, r2
 800a14c:	461d      	mov	r5, r3
 800a14e:	eb14 030a 	adds.w	r3, r4, sl
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	eb45 030b 	adc.w	r3, r5, fp
 800a158:	607b      	str	r3, [r7, #4]
 800a15a:	f04f 0200 	mov.w	r2, #0
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a166:	4629      	mov	r1, r5
 800a168:	028b      	lsls	r3, r1, #10
 800a16a:	4621      	mov	r1, r4
 800a16c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a170:	4621      	mov	r1, r4
 800a172:	028a      	lsls	r2, r1, #10
 800a174:	4610      	mov	r0, r2
 800a176:	4619      	mov	r1, r3
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	2200      	movs	r2, #0
 800a17c:	60bb      	str	r3, [r7, #8]
 800a17e:	60fa      	str	r2, [r7, #12]
 800a180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a184:	f7f6 fb86 	bl	8000894 <__aeabi_uldivmod>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4613      	mov	r3, r2
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a190:	4b0b      	ldr	r3, [pc, #44]	; (800a1c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	0c1b      	lsrs	r3, r3, #16
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	3301      	adds	r3, #1
 800a19c:	005b      	lsls	r3, r3, #1
 800a19e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a1a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a1aa:	e002      	b.n	800a1b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <HAL_RCC_GetSysClockFreq+0x184>)
 800a1ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a1b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3740      	adds	r7, #64	; 0x40
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1be:	bf00      	nop
 800a1c0:	40023800 	.word	0x40023800
 800a1c4:	00f42400 	.word	0x00f42400
 800a1c8:	017d7840 	.word	0x017d7840

0800a1cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1d0:	4b03      	ldr	r3, [pc, #12]	; (800a1e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	20008ef0 	.word	0x20008ef0

0800a1e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1e8:	f7ff fff0 	bl	800a1cc <HAL_RCC_GetHCLKFreq>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	0a9b      	lsrs	r3, r3, #10
 800a1f4:	f003 0307 	and.w	r3, r3, #7
 800a1f8:	4903      	ldr	r1, [pc, #12]	; (800a208 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1fa:	5ccb      	ldrb	r3, [r1, r3]
 800a1fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a200:	4618      	mov	r0, r3
 800a202:	bd80      	pop	{r7, pc}
 800a204:	40023800 	.word	0x40023800
 800a208:	0800e928 	.word	0x0800e928

0800a20c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a210:	f7ff ffdc 	bl	800a1cc <HAL_RCC_GetHCLKFreq>
 800a214:	4602      	mov	r2, r0
 800a216:	4b05      	ldr	r3, [pc, #20]	; (800a22c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	0b5b      	lsrs	r3, r3, #13
 800a21c:	f003 0307 	and.w	r3, r3, #7
 800a220:	4903      	ldr	r1, [pc, #12]	; (800a230 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a222:	5ccb      	ldrb	r3, [r1, r3]
 800a224:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a228:	4618      	mov	r0, r3
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	40023800 	.word	0x40023800
 800a230:	0800e928 	.word	0x0800e928

0800a234 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e07b      	b.n	800a33e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d108      	bne.n	800a260 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a256:	d009      	beq.n	800a26c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	61da      	str	r2, [r3, #28]
 800a25e:	e005      	b.n	800a26c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fc f8d2 	bl	8006430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2202      	movs	r2, #2
 800a290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68db      	ldr	r3, [r3, #12]
 800a2ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	f003 0302 	and.w	r3, r3, #2
 800a2c8:	431a      	orrs	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	695b      	ldr	r3, [r3, #20]
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	69db      	ldr	r3, [r3, #28]
 800a2e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2e6:	431a      	orrs	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f0:	ea42 0103 	orr.w	r1, r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	430a      	orrs	r2, r1
 800a302:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	0c1b      	lsrs	r3, r3, #16
 800a30a:	f003 0104 	and.w	r1, r3, #4
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	f003 0210 	and.w	r2, r3, #16
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	430a      	orrs	r2, r1
 800a31c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	69da      	ldr	r2, [r3, #28]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a32c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b088      	sub	sp, #32
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	60b9      	str	r1, [r7, #8]
 800a350:	603b      	str	r3, [r7, #0]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a360:	2b01      	cmp	r3, #1
 800a362:	d101      	bne.n	800a368 <HAL_SPI_Transmit+0x22>
 800a364:	2302      	movs	r3, #2
 800a366:	e126      	b.n	800a5b6 <HAL_SPI_Transmit+0x270>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a370:	f7fc fc00 	bl	8006b74 <HAL_GetTick>
 800a374:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a376:	88fb      	ldrh	r3, [r7, #6]
 800a378:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a380:	b2db      	uxtb	r3, r3
 800a382:	2b01      	cmp	r3, #1
 800a384:	d002      	beq.n	800a38c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a386:	2302      	movs	r3, #2
 800a388:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a38a:	e10b      	b.n	800a5a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <HAL_SPI_Transmit+0x52>
 800a392:	88fb      	ldrh	r3, [r7, #6]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a39c:	e102      	b.n	800a5a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2203      	movs	r2, #3
 800a3a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	88fa      	ldrh	r2, [r7, #6]
 800a3b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	88fa      	ldrh	r2, [r7, #6]
 800a3bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3e4:	d10f      	bne.n	800a406 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a404:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a410:	2b40      	cmp	r3, #64	; 0x40
 800a412:	d007      	beq.n	800a424 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a42c:	d14b      	bne.n	800a4c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <HAL_SPI_Transmit+0xf6>
 800a436:	8afb      	ldrh	r3, [r7, #22]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d13e      	bne.n	800a4ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a440:	881a      	ldrh	r2, [r3, #0]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	1c9a      	adds	r2, r3, #2
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a460:	e02b      	b.n	800a4ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d112      	bne.n	800a496 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a480:	1c9a      	adds	r2, r3, #2
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	3b01      	subs	r3, #1
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	86da      	strh	r2, [r3, #54]	; 0x36
 800a494:	e011      	b.n	800a4ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a496:	f7fc fb6d 	bl	8006b74 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	683a      	ldr	r2, [r7, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d803      	bhi.n	800a4ae <HAL_SPI_Transmit+0x168>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ac:	d102      	bne.n	800a4b4 <HAL_SPI_Transmit+0x16e>
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d102      	bne.n	800a4ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a4b8:	e074      	b.n	800a5a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1ce      	bne.n	800a462 <HAL_SPI_Transmit+0x11c>
 800a4c4:	e04c      	b.n	800a560 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_SPI_Transmit+0x18e>
 800a4ce:	8afb      	ldrh	r3, [r7, #22]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d140      	bne.n	800a556 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	330c      	adds	r3, #12
 800a4de:	7812      	ldrb	r2, [r2, #0]
 800a4e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a4fa:	e02c      	b.n	800a556 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b02      	cmp	r3, #2
 800a508:	d113      	bne.n	800a532 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	330c      	adds	r3, #12
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a526:	b29b      	uxth	r3, r3
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a530:	e011      	b.n	800a556 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a532:	f7fc fb1f 	bl	8006b74 <HAL_GetTick>
 800a536:	4602      	mov	r2, r0
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d803      	bhi.n	800a54a <HAL_SPI_Transmit+0x204>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d102      	bne.n	800a550 <HAL_SPI_Transmit+0x20a>
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d102      	bne.n	800a556 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a554:	e026      	b.n	800a5a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1cd      	bne.n	800a4fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fdcb 	bl	800b100 <SPI_EndRxTxTransaction>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2220      	movs	r2, #32
 800a574:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	77fb      	strb	r3, [r7, #31]
 800a5a0:	e000      	b.n	800a5a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a5a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3720      	adds	r7, #32
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b08c      	sub	sp, #48	; 0x30
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60f8      	str	r0, [r7, #12]
 800a5c6:	60b9      	str	r1, [r7, #8]
 800a5c8:	607a      	str	r2, [r7, #4]
 800a5ca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d101      	bne.n	800a5e4 <HAL_SPI_TransmitReceive+0x26>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e18a      	b.n	800a8fa <HAL_SPI_TransmitReceive+0x33c>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5ec:	f7fc fac2 	bl	8006b74 <HAL_GetTick>
 800a5f0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a602:	887b      	ldrh	r3, [r7, #2]
 800a604:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d00f      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x70>
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a614:	d107      	bne.n	800a626 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d103      	bne.n	800a626 <HAL_SPI_TransmitReceive+0x68>
 800a61e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a622:	2b04      	cmp	r3, #4
 800a624:	d003      	beq.n	800a62e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a626:	2302      	movs	r3, #2
 800a628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a62c:	e15b      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <HAL_SPI_TransmitReceive+0x82>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d002      	beq.n	800a640 <HAL_SPI_TransmitReceive+0x82>
 800a63a:	887b      	ldrh	r3, [r7, #2]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d103      	bne.n	800a648 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a646:	e14e      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	2b04      	cmp	r3, #4
 800a652:	d003      	beq.n	800a65c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2205      	movs	r2, #5
 800a658:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	887a      	ldrh	r2, [r7, #2]
 800a66c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	887a      	ldrh	r2, [r7, #2]
 800a672:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	887a      	ldrh	r2, [r7, #2]
 800a67e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	887a      	ldrh	r2, [r7, #2]
 800a684:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2200      	movs	r2, #0
 800a690:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a69c:	2b40      	cmp	r3, #64	; 0x40
 800a69e:	d007      	beq.n	800a6b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6b8:	d178      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <HAL_SPI_TransmitReceive+0x10a>
 800a6c2:	8b7b      	ldrh	r3, [r7, #26]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d166      	bne.n	800a796 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6cc:	881a      	ldrh	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d8:	1c9a      	adds	r2, r3, #2
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6ec:	e053      	b.n	800a796 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f003 0302 	and.w	r3, r3, #2
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d11b      	bne.n	800a734 <HAL_SPI_TransmitReceive+0x176>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a700:	b29b      	uxth	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d016      	beq.n	800a734 <HAL_SPI_TransmitReceive+0x176>
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d113      	bne.n	800a734 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	881a      	ldrh	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	1c9a      	adds	r2, r3, #2
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a726:	b29b      	uxth	r3, r3
 800a728:	3b01      	subs	r3, #1
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a730:	2300      	movs	r3, #0
 800a732:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d119      	bne.n	800a776 <HAL_SPI_TransmitReceive+0x1b8>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a746:	b29b      	uxth	r3, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d014      	beq.n	800a776 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a756:	b292      	uxth	r2, r2
 800a758:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	1c9a      	adds	r2, r3, #2
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a768:	b29b      	uxth	r3, r3
 800a76a:	3b01      	subs	r3, #1
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a772:	2301      	movs	r3, #1
 800a774:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a776:	f7fc f9fd 	bl	8006b74 <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a782:	429a      	cmp	r2, r3
 800a784:	d807      	bhi.n	800a796 <HAL_SPI_TransmitReceive+0x1d8>
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78c:	d003      	beq.n	800a796 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a794:	e0a7      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1a6      	bne.n	800a6ee <HAL_SPI_TransmitReceive+0x130>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1a1      	bne.n	800a6ee <HAL_SPI_TransmitReceive+0x130>
 800a7aa:	e07c      	b.n	800a8a6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <HAL_SPI_TransmitReceive+0x1fc>
 800a7b4:	8b7b      	ldrh	r3, [r7, #26]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d16b      	bne.n	800a892 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	330c      	adds	r3, #12
 800a7c4:	7812      	ldrb	r2, [r2, #0]
 800a7c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7cc:	1c5a      	adds	r2, r3, #1
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7e0:	e057      	b.n	800a892 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f003 0302 	and.w	r3, r3, #2
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d11c      	bne.n	800a82a <HAL_SPI_TransmitReceive+0x26c>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d017      	beq.n	800a82a <HAL_SPI_TransmitReceive+0x26c>
 800a7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d114      	bne.n	800a82a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	330c      	adds	r3, #12
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	3b01      	subs	r3, #1
 800a820:	b29a      	uxth	r2, r3
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b01      	cmp	r3, #1
 800a836:	d119      	bne.n	800a86c <HAL_SPI_TransmitReceive+0x2ae>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d014      	beq.n	800a86c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84c:	b2d2      	uxtb	r2, r2
 800a84e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a85e:	b29b      	uxth	r3, r3
 800a860:	3b01      	subs	r3, #1
 800a862:	b29a      	uxth	r2, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a868:	2301      	movs	r3, #1
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a86c:	f7fc f982 	bl	8006b74 <HAL_GetTick>
 800a870:	4602      	mov	r2, r0
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a878:	429a      	cmp	r2, r3
 800a87a:	d803      	bhi.n	800a884 <HAL_SPI_TransmitReceive+0x2c6>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a882:	d102      	bne.n	800a88a <HAL_SPI_TransmitReceive+0x2cc>
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a890:	e029      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a896:	b29b      	uxth	r3, r3
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1a2      	bne.n	800a7e2 <HAL_SPI_TransmitReceive+0x224>
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d19d      	bne.n	800a7e2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 fc28 	bl	800b100 <SPI_EndRxTxTransaction>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d006      	beq.n	800a8c4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2220      	movs	r2, #32
 800a8c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a8c2:	e010      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10b      	bne.n	800a8e4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	e000      	b.n	800a8e6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a8e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3730      	adds	r7, #48	; 0x30
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_SPI_Transmit_DMA+0x20>
 800a920:	2302      	movs	r3, #2
 800a922:	e09b      	b.n	800aa5c <HAL_SPI_Transmit_DMA+0x158>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	d002      	beq.n	800a93e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a938:	2302      	movs	r3, #2
 800a93a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a93c:	e089      	b.n	800aa52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <HAL_SPI_Transmit_DMA+0x46>
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a94e:	e080      	b.n	800aa52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2203      	movs	r2, #3
 800a954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	88fa      	ldrh	r2, [r7, #6]
 800a968:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	88fa      	ldrh	r2, [r7, #6]
 800a96e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2200      	movs	r2, #0
 800a97a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a996:	d10f      	bne.n	800a9b8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9bc:	4a29      	ldr	r2, [pc, #164]	; (800aa64 <HAL_SPI_Transmit_DMA+0x160>)
 800a9be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c4:	4a28      	ldr	r2, [pc, #160]	; (800aa68 <HAL_SPI_Transmit_DMA+0x164>)
 800a9c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9cc:	4a27      	ldr	r2, [pc, #156]	; (800aa6c <HAL_SPI_Transmit_DMA+0x168>)
 800a9ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	330c      	adds	r3, #12
 800a9e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a9f0:	f7fd fb20 	bl	8008034 <HAL_DMA_Start_IT>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00c      	beq.n	800aa14 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9fe:	f043 0210 	orr.w	r2, r3, #16
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800aa12:	e01e      	b.n	800aa52 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1e:	2b40      	cmp	r3, #64	; 0x40
 800aa20:	d007      	beq.n	800aa32 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0220 	orr.w	r2, r2, #32
 800aa40:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0202 	orr.w	r2, r2, #2
 800aa50:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2200      	movs	r2, #0
 800aa56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3718      	adds	r7, #24
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	0800ae91 	.word	0x0800ae91
 800aa68:	0800acb1 	.word	0x0800acb1
 800aa6c:	0800aee5 	.word	0x0800aee5

0800aa70 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d101      	bne.n	800aa90 <HAL_SPI_TransmitReceive_DMA+0x20>
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	e0e3      	b.n	800ac58 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa9e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800aaa6:	7dbb      	ldrb	r3, [r7, #22]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d00d      	beq.n	800aac8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aab2:	d106      	bne.n	800aac2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d102      	bne.n	800aac2 <HAL_SPI_TransmitReceive_DMA+0x52>
 800aabc:	7dbb      	ldrb	r3, [r7, #22]
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d002      	beq.n	800aac8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800aac2:	2302      	movs	r3, #2
 800aac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aac6:	e0c2      	b.n	800ac4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d005      	beq.n	800aada <HAL_SPI_TransmitReceive_DMA+0x6a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <HAL_SPI_TransmitReceive_DMA+0x6a>
 800aad4:	887b      	ldrh	r3, [r7, #2]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aade:	e0b6      	b.n	800ac4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d003      	beq.n	800aaf4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2205      	movs	r2, #5
 800aaf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	887a      	ldrh	r2, [r7, #2]
 800ab04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	887a      	ldrh	r2, [r7, #2]
 800ab0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	887a      	ldrh	r2, [r7, #2]
 800ab16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	887a      	ldrh	r2, [r7, #2]
 800ab1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d108      	bne.n	800ab48 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3a:	4a49      	ldr	r2, [pc, #292]	; (800ac60 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800ab3c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab42:	4a48      	ldr	r2, [pc, #288]	; (800ac64 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800ab44:	63da      	str	r2, [r3, #60]	; 0x3c
 800ab46:	e007      	b.n	800ab58 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab4c:	4a46      	ldr	r2, [pc, #280]	; (800ac68 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800ab4e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab54:	4a45      	ldr	r2, [pc, #276]	; (800ac6c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800ab56:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5c:	4a44      	ldr	r2, [pc, #272]	; (800ac70 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800ab5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab64:	2200      	movs	r2, #0
 800ab66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	4619      	mov	r1, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800ab80:	f7fd fa58 	bl	8008034 <HAL_DMA_Start_IT>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00c      	beq.n	800aba4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8e:	f043 0210 	orr.w	r2, r3, #16
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800aba2:	e054      	b.n	800ac4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f042 0201 	orr.w	r2, r2, #1
 800abb2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abb8:	2200      	movs	r2, #0
 800abba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc0:	2200      	movs	r2, #0
 800abc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc8:	2200      	movs	r2, #0
 800abca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd0:	2200      	movs	r2, #0
 800abd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abdc:	4619      	mov	r1, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	330c      	adds	r3, #12
 800abe4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800abec:	f7fd fa22 	bl	8008034 <HAL_DMA_Start_IT>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00c      	beq.n	800ac10 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abfa:	f043 0210 	orr.w	r2, r3, #16
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800ac0e:	e01e      	b.n	800ac4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1a:	2b40      	cmp	r3, #64	; 0x40
 800ac1c:	d007      	beq.n	800ac2e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac2c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f042 0220 	orr.w	r2, r2, #32
 800ac3c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f042 0202 	orr.w	r2, r2, #2
 800ac4c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	0800aead 	.word	0x0800aead
 800ac64:	0800ad59 	.word	0x0800ad59
 800ac68:	0800aec9 	.word	0x0800aec9
 800ac6c:	0800ae01 	.word	0x0800ae01
 800ac70:	0800aee5 	.word	0x0800aee5

0800ac74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acbe:	f7fb ff59 	bl	8006b74 <HAL_GetTick>
 800acc2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd2:	d03b      	beq.n	800ad4c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	685a      	ldr	r2, [r3, #4]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f022 0220 	bic.w	r2, r2, #32
 800ace2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0202 	bic.w	r2, r2, #2
 800acf2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	2164      	movs	r1, #100	; 0x64
 800acf8:	6978      	ldr	r0, [r7, #20]
 800acfa:	f000 fa01 	bl	800b100 <SPI_EndRxTxTransaction>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad08:	f043 0220 	orr.w	r2, r3, #32
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10a      	bne.n	800ad2e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	2200      	movs	r2, #0
 800ad32:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d003      	beq.n	800ad4c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad44:	6978      	ldr	r0, [r7, #20]
 800ad46:	f7fb fa09 	bl	800615c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad4a:	e002      	b.n	800ad52 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ad4c:	6978      	ldr	r0, [r7, #20]
 800ad4e:	f7fb fa1f 	bl	8006190 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad64:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad66:	f7fb ff05 	bl	8006b74 <HAL_GetTick>
 800ad6a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad7a:	d03b      	beq.n	800adf4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	685a      	ldr	r2, [r3, #4]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0220 	bic.w	r2, r2, #32
 800ad8a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10d      	bne.n	800adb0 <SPI_DMAReceiveCplt+0x58>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad9c:	d108      	bne.n	800adb0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	685a      	ldr	r2, [r3, #4]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0203 	bic.w	r2, r2, #3
 800adac:	605a      	str	r2, [r3, #4]
 800adae:	e007      	b.n	800adc0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 0201 	bic.w	r2, r2, #1
 800adbe:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	2164      	movs	r1, #100	; 0x64
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f935 	bl	800b034 <SPI_EndRxTransaction>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2220      	movs	r2, #32
 800add4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2200      	movs	r2, #0
 800adda:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f7fb f9b5 	bl	800615c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800adf2:	e002      	b.n	800adfa <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f7ff ff3d 	bl	800ac74 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae0c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae0e:	f7fb feb1 	bl	8006b74 <HAL_GetTick>
 800ae12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae22:	d02f      	beq.n	800ae84 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0220 	bic.w	r2, r2, #32
 800ae32:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	2164      	movs	r1, #100	; 0x64
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 f961 	bl	800b100 <SPI_EndRxTxTransaction>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d005      	beq.n	800ae50 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae48:	f043 0220 	orr.w	r2, r3, #32
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0203 	bic.w	r2, r2, #3
 800ae5e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d003      	beq.n	800ae84 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7fb f96d 	bl	800615c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae82:	e002      	b.n	800ae8a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7fb f94d 	bl	8006124 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fef2 	bl	800ac88 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aea4:	bf00      	nop
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f7ff feee 	bl	800ac9c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aec0:	bf00      	nop
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f7fb f8f4 	bl	80060c4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f022 0203 	bic.w	r2, r2, #3
 800af00:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af06:	f043 0210 	orr.w	r2, r3, #16
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7fb f920 	bl	800615c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af1c:	bf00      	nop
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	4613      	mov	r3, r2
 800af32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af34:	f7fb fe1e 	bl	8006b74 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	1a9b      	subs	r3, r3, r2
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	4413      	add	r3, r2
 800af42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af44:	f7fb fe16 	bl	8006b74 <HAL_GetTick>
 800af48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af4a:	4b39      	ldr	r3, [pc, #228]	; (800b030 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	015b      	lsls	r3, r3, #5
 800af50:	0d1b      	lsrs	r3, r3, #20
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	fb02 f303 	mul.w	r3, r2, r3
 800af58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af5a:	e054      	b.n	800b006 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af62:	d050      	beq.n	800b006 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af64:	f7fb fe06 	bl	8006b74 <HAL_GetTick>
 800af68:	4602      	mov	r2, r0
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	429a      	cmp	r2, r3
 800af72:	d902      	bls.n	800af7a <SPI_WaitFlagStateUntilTimeout+0x56>
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d13d      	bne.n	800aff6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af92:	d111      	bne.n	800afb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af9c:	d004      	beq.n	800afa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afa6:	d107      	bne.n	800afb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc0:	d10f      	bne.n	800afe2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800aff2:	2303      	movs	r3, #3
 800aff4:	e017      	b.n	800b026 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	3b01      	subs	r3, #1
 800b004:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	4013      	ands	r3, r2
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	429a      	cmp	r2, r3
 800b014:	bf0c      	ite	eq
 800b016:	2301      	moveq	r3, #1
 800b018:	2300      	movne	r3, #0
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	429a      	cmp	r2, r3
 800b022:	d19b      	bne.n	800af5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	3720      	adds	r7, #32
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20008ef0 	.word	0x20008ef0

0800b034 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af02      	add	r7, sp, #8
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b048:	d111      	bne.n	800b06e <SPI_EndRxTransaction+0x3a>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b052:	d004      	beq.n	800b05e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b05c:	d107      	bne.n	800b06e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b06c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b076:	d12a      	bne.n	800b0ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b080:	d012      	beq.n	800b0a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	2200      	movs	r2, #0
 800b08a:	2180      	movs	r1, #128	; 0x80
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f7ff ff49 	bl	800af24 <SPI_WaitFlagStateUntilTimeout>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d02d      	beq.n	800b0f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b09c:	f043 0220 	orr.w	r2, r3, #32
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e026      	b.n	800b0f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2101      	movs	r1, #1
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff ff36 	bl	800af24 <SPI_WaitFlagStateUntilTimeout>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d01a      	beq.n	800b0f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c2:	f043 0220 	orr.w	r2, r3, #32
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e013      	b.n	800b0f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff ff23 	bl	800af24 <SPI_WaitFlagStateUntilTimeout>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d007      	beq.n	800b0f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0e8:	f043 0220 	orr.w	r2, r3, #32
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e000      	b.n	800b0f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b088      	sub	sp, #32
 800b104:	af02      	add	r7, sp, #8
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b10c:	4b1b      	ldr	r3, [pc, #108]	; (800b17c <SPI_EndRxTxTransaction+0x7c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a1b      	ldr	r2, [pc, #108]	; (800b180 <SPI_EndRxTxTransaction+0x80>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	0d5b      	lsrs	r3, r3, #21
 800b118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b11c:	fb02 f303 	mul.w	r3, r2, r3
 800b120:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b12a:	d112      	bne.n	800b152 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	2180      	movs	r1, #128	; 0x80
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f7ff fef4 	bl	800af24 <SPI_WaitFlagStateUntilTimeout>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d016      	beq.n	800b170 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b146:	f043 0220 	orr.w	r2, r3, #32
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e00f      	b.n	800b172 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00a      	beq.n	800b16e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b168:	2b80      	cmp	r3, #128	; 0x80
 800b16a:	d0f2      	beq.n	800b152 <SPI_EndRxTxTransaction+0x52>
 800b16c:	e000      	b.n	800b170 <SPI_EndRxTxTransaction+0x70>
        break;
 800b16e:	bf00      	nop
  }

  return HAL_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3718      	adds	r7, #24
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20008ef0 	.word	0x20008ef0
 800b180:	165e9f81 	.word	0x165e9f81

0800b184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e041      	b.n	800b21a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7fb fad0 	bl	8006750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2202      	movs	r2, #2
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	f000 fe38 	bl	800be38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b232:	b2db      	uxtb	r3, r3
 800b234:	2b01      	cmp	r3, #1
 800b236:	d001      	beq.n	800b23c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e03c      	b.n	800b2b6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2202      	movs	r2, #2
 800b240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a1e      	ldr	r2, [pc, #120]	; (800b2c4 <HAL_TIM_Base_Start+0xa0>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d018      	beq.n	800b280 <HAL_TIM_Base_Start+0x5c>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b256:	d013      	beq.n	800b280 <HAL_TIM_Base_Start+0x5c>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a1a      	ldr	r2, [pc, #104]	; (800b2c8 <HAL_TIM_Base_Start+0xa4>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d00e      	beq.n	800b280 <HAL_TIM_Base_Start+0x5c>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a19      	ldr	r2, [pc, #100]	; (800b2cc <HAL_TIM_Base_Start+0xa8>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d009      	beq.n	800b280 <HAL_TIM_Base_Start+0x5c>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <HAL_TIM_Base_Start+0xac>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d004      	beq.n	800b280 <HAL_TIM_Base_Start+0x5c>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a16      	ldr	r2, [pc, #88]	; (800b2d4 <HAL_TIM_Base_Start+0xb0>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d111      	bne.n	800b2a4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b06      	cmp	r3, #6
 800b290:	d010      	beq.n	800b2b4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f042 0201 	orr.w	r2, r2, #1
 800b2a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2a2:	e007      	b.n	800b2b4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0201 	orr.w	r2, r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	40010000 	.word	0x40010000
 800b2c8:	40000400 	.word	0x40000400
 800b2cc:	40000800 	.word	0x40000800
 800b2d0:	40000c00 	.word	0x40000c00
 800b2d4:	40014000 	.word	0x40014000

0800b2d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d001      	beq.n	800b2f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e044      	b.n	800b37a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f042 0201 	orr.w	r2, r2, #1
 800b306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a1e      	ldr	r2, [pc, #120]	; (800b388 <HAL_TIM_Base_Start_IT+0xb0>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d018      	beq.n	800b344 <HAL_TIM_Base_Start_IT+0x6c>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31a:	d013      	beq.n	800b344 <HAL_TIM_Base_Start_IT+0x6c>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a1a      	ldr	r2, [pc, #104]	; (800b38c <HAL_TIM_Base_Start_IT+0xb4>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d00e      	beq.n	800b344 <HAL_TIM_Base_Start_IT+0x6c>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a19      	ldr	r2, [pc, #100]	; (800b390 <HAL_TIM_Base_Start_IT+0xb8>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d009      	beq.n	800b344 <HAL_TIM_Base_Start_IT+0x6c>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a17      	ldr	r2, [pc, #92]	; (800b394 <HAL_TIM_Base_Start_IT+0xbc>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d004      	beq.n	800b344 <HAL_TIM_Base_Start_IT+0x6c>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a16      	ldr	r2, [pc, #88]	; (800b398 <HAL_TIM_Base_Start_IT+0xc0>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d111      	bne.n	800b368 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	f003 0307 	and.w	r3, r3, #7
 800b34e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b06      	cmp	r3, #6
 800b354:	d010      	beq.n	800b378 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f042 0201 	orr.w	r2, r2, #1
 800b364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b366:	e007      	b.n	800b378 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f042 0201 	orr.w	r2, r2, #1
 800b376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr
 800b386:	bf00      	nop
 800b388:	40010000 	.word	0x40010000
 800b38c:	40000400 	.word	0x40000400
 800b390:	40000800 	.word	0x40000800
 800b394:	40000c00 	.word	0x40000c00
 800b398:	40014000 	.word	0x40014000

0800b39c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68da      	ldr	r2, [r3, #12]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0201 	bic.w	r2, r2, #1
 800b3b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6a1a      	ldr	r2, [r3, #32]
 800b3ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800b3be:	4013      	ands	r3, r2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d10f      	bne.n	800b3e4 <HAL_TIM_Base_Stop_IT+0x48>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6a1a      	ldr	r2, [r3, #32]
 800b3ca:	f240 4344 	movw	r3, #1092	; 0x444
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d107      	bne.n	800b3e4 <HAL_TIM_Base_Stop_IT+0x48>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	370c      	adds	r7, #12
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr

0800b3fa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	e041      	b.n	800b490 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b00      	cmp	r3, #0
 800b416:	d106      	bne.n	800b426 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f839 	bl	800b498 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2202      	movs	r2, #2
 800b42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	3304      	adds	r3, #4
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f000 fcfd 	bl	800be38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2201      	movs	r2, #1
 800b44a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2201      	movs	r2, #1
 800b462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e041      	b.n	800b542 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f839 	bl	800b54a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f000 fca4 	bl	800be38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b552:	bf00      	nop
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
	...

0800b560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <HAL_TIM_PWM_Start+0x24>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b01      	cmp	r3, #1
 800b57a:	bf14      	ite	ne
 800b57c:	2301      	movne	r3, #1
 800b57e:	2300      	moveq	r3, #0
 800b580:	b2db      	uxtb	r3, r3
 800b582:	e022      	b.n	800b5ca <HAL_TIM_PWM_Start+0x6a>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d109      	bne.n	800b59e <HAL_TIM_PWM_Start+0x3e>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b01      	cmp	r3, #1
 800b594:	bf14      	ite	ne
 800b596:	2301      	movne	r3, #1
 800b598:	2300      	moveq	r3, #0
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	e015      	b.n	800b5ca <HAL_TIM_PWM_Start+0x6a>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d109      	bne.n	800b5b8 <HAL_TIM_PWM_Start+0x58>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	bf14      	ite	ne
 800b5b0:	2301      	movne	r3, #1
 800b5b2:	2300      	moveq	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	e008      	b.n	800b5ca <HAL_TIM_PWM_Start+0x6a>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	bf14      	ite	ne
 800b5c4:	2301      	movne	r3, #1
 800b5c6:	2300      	moveq	r3, #0
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e068      	b.n	800b6a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d104      	bne.n	800b5e2 <HAL_TIM_PWM_Start+0x82>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2202      	movs	r2, #2
 800b5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5e0:	e013      	b.n	800b60a <HAL_TIM_PWM_Start+0xaa>
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d104      	bne.n	800b5f2 <HAL_TIM_PWM_Start+0x92>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5f0:	e00b      	b.n	800b60a <HAL_TIM_PWM_Start+0xaa>
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d104      	bne.n	800b602 <HAL_TIM_PWM_Start+0xa2>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b600:	e003      	b.n	800b60a <HAL_TIM_PWM_Start+0xaa>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2202      	movs	r2, #2
 800b606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2201      	movs	r2, #1
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	4618      	mov	r0, r3
 800b614:	f000 feb6 	bl	800c384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a23      	ldr	r2, [pc, #140]	; (800b6ac <HAL_TIM_PWM_Start+0x14c>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d107      	bne.n	800b632 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b630:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a1d      	ldr	r2, [pc, #116]	; (800b6ac <HAL_TIM_PWM_Start+0x14c>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d018      	beq.n	800b66e <HAL_TIM_PWM_Start+0x10e>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b644:	d013      	beq.n	800b66e <HAL_TIM_PWM_Start+0x10e>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a19      	ldr	r2, [pc, #100]	; (800b6b0 <HAL_TIM_PWM_Start+0x150>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d00e      	beq.n	800b66e <HAL_TIM_PWM_Start+0x10e>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a17      	ldr	r2, [pc, #92]	; (800b6b4 <HAL_TIM_PWM_Start+0x154>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d009      	beq.n	800b66e <HAL_TIM_PWM_Start+0x10e>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a16      	ldr	r2, [pc, #88]	; (800b6b8 <HAL_TIM_PWM_Start+0x158>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d004      	beq.n	800b66e <HAL_TIM_PWM_Start+0x10e>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a14      	ldr	r2, [pc, #80]	; (800b6bc <HAL_TIM_PWM_Start+0x15c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d111      	bne.n	800b692 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f003 0307 	and.w	r3, r3, #7
 800b678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b06      	cmp	r3, #6
 800b67e:	d010      	beq.n	800b6a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f042 0201 	orr.w	r2, r2, #1
 800b68e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b690:	e007      	b.n	800b6a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f042 0201 	orr.w	r2, r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	40010000 	.word	0x40010000
 800b6b0:	40000400 	.word	0x40000400
 800b6b4:	40000800 	.word	0x40000800
 800b6b8:	40000c00 	.word	0x40000c00
 800b6bc:	40014000 	.word	0x40014000

0800b6c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b086      	sub	sp, #24
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e097      	b.n	800b804 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d106      	bne.n	800b6ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7fa ffb5 	bl	8006658 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	6812      	ldr	r2, [r2, #0]
 800b700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b704:	f023 0307 	bic.w	r3, r3, #7
 800b708:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3304      	adds	r3, #4
 800b712:	4619      	mov	r1, r3
 800b714:	4610      	mov	r0, r2
 800b716:	f000 fb8f 	bl	800be38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	6a1b      	ldr	r3, [r3, #32]
 800b730:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4313      	orrs	r3, r2
 800b73a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b742:	f023 0303 	bic.w	r3, r3, #3
 800b746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	689a      	ldr	r2, [r3, #8]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	021b      	lsls	r3, r3, #8
 800b752:	4313      	orrs	r3, r2
 800b754:	693a      	ldr	r2, [r7, #16]
 800b756:	4313      	orrs	r3, r2
 800b758:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b760:	f023 030c 	bic.w	r3, r3, #12
 800b764:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b76c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b770:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	68da      	ldr	r2, [r3, #12]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	021b      	lsls	r3, r3, #8
 800b77c:	4313      	orrs	r3, r2
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	4313      	orrs	r3, r2
 800b782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	691b      	ldr	r3, [r3, #16]
 800b788:	011a      	lsls	r2, r3, #4
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	031b      	lsls	r3, r3, #12
 800b790:	4313      	orrs	r3, r2
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	4313      	orrs	r3, r2
 800b796:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b79e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b7a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	695b      	ldr	r3, [r3, #20]
 800b7b0:	011b      	lsls	r3, r3, #4
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	693a      	ldr	r2, [r7, #16]
 800b7c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d122      	bne.n	800b868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	f003 0302 	and.w	r3, r3, #2
 800b82c:	2b02      	cmp	r3, #2
 800b82e:	d11b      	bne.n	800b868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f06f 0202 	mvn.w	r2, #2
 800b838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2201      	movs	r2, #1
 800b83e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	f003 0303 	and.w	r3, r3, #3
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fad3 	bl	800bdfa <HAL_TIM_IC_CaptureCallback>
 800b854:	e005      	b.n	800b862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fac5 	bl	800bde6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fad6 	bl	800be0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	f003 0304 	and.w	r3, r3, #4
 800b872:	2b04      	cmp	r3, #4
 800b874:	d122      	bne.n	800b8bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b04      	cmp	r3, #4
 800b882:	d11b      	bne.n	800b8bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f06f 0204 	mvn.w	r2, #4
 800b88c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2202      	movs	r2, #2
 800b892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	699b      	ldr	r3, [r3, #24]
 800b89a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d003      	beq.n	800b8aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 faa9 	bl	800bdfa <HAL_TIM_IC_CaptureCallback>
 800b8a8:	e005      	b.n	800b8b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fa9b 	bl	800bde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 faac 	bl	800be0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	f003 0308 	and.w	r3, r3, #8
 800b8c6:	2b08      	cmp	r3, #8
 800b8c8:	d122      	bne.n	800b910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f003 0308 	and.w	r3, r3, #8
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d11b      	bne.n	800b910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f06f 0208 	mvn.w	r2, #8
 800b8e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2204      	movs	r2, #4
 800b8e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	69db      	ldr	r3, [r3, #28]
 800b8ee:	f003 0303 	and.w	r3, r3, #3
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d003      	beq.n	800b8fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa7f 	bl	800bdfa <HAL_TIM_IC_CaptureCallback>
 800b8fc:	e005      	b.n	800b90a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa71 	bl	800bde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fa82 	bl	800be0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	f003 0310 	and.w	r3, r3, #16
 800b91a:	2b10      	cmp	r3, #16
 800b91c:	d122      	bne.n	800b964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	f003 0310 	and.w	r3, r3, #16
 800b928:	2b10      	cmp	r3, #16
 800b92a:	d11b      	bne.n	800b964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f06f 0210 	mvn.w	r2, #16
 800b934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2208      	movs	r2, #8
 800b93a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fa55 	bl	800bdfa <HAL_TIM_IC_CaptureCallback>
 800b950:	e005      	b.n	800b95e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fa47 	bl	800bde6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fa58 	bl	800be0e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d10e      	bne.n	800b990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d107      	bne.n	800b990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f06f 0201 	mvn.w	r2, #1
 800b988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7f5 ff1e 	bl	80017cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b80      	cmp	r3, #128	; 0x80
 800b99c:	d10e      	bne.n	800b9bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a8:	2b80      	cmp	r3, #128	; 0x80
 800b9aa:	d107      	bne.n	800b9bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fd82 	bl	800c4c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c6:	2b40      	cmp	r3, #64	; 0x40
 800b9c8:	d10e      	bne.n	800b9e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d4:	2b40      	cmp	r3, #64	; 0x40
 800b9d6:	d107      	bne.n	800b9e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa1d 	bl	800be22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f003 0320 	and.w	r3, r3, #32
 800b9f2:	2b20      	cmp	r3, #32
 800b9f4:	d10e      	bne.n	800ba14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b20      	cmp	r3, #32
 800ba02:	d107      	bne.n	800ba14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f06f 0220 	mvn.w	r2, #32
 800ba0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fd4c 	bl	800c4ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba14:	bf00      	nop
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <HAL_TIM_OC_ConfigChannel+0x1e>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e048      	b.n	800bacc <HAL_TIM_OC_ConfigChannel+0xb0>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2b0c      	cmp	r3, #12
 800ba46:	d839      	bhi.n	800babc <HAL_TIM_OC_ConfigChannel+0xa0>
 800ba48:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <HAL_TIM_OC_ConfigChannel+0x34>)
 800ba4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4e:	bf00      	nop
 800ba50:	0800ba85 	.word	0x0800ba85
 800ba54:	0800babd 	.word	0x0800babd
 800ba58:	0800babd 	.word	0x0800babd
 800ba5c:	0800babd 	.word	0x0800babd
 800ba60:	0800ba93 	.word	0x0800ba93
 800ba64:	0800babd 	.word	0x0800babd
 800ba68:	0800babd 	.word	0x0800babd
 800ba6c:	0800babd 	.word	0x0800babd
 800ba70:	0800baa1 	.word	0x0800baa1
 800ba74:	0800babd 	.word	0x0800babd
 800ba78:	0800babd 	.word	0x0800babd
 800ba7c:	0800babd 	.word	0x0800babd
 800ba80:	0800baaf 	.word	0x0800baaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68b9      	ldr	r1, [r7, #8]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 fa54 	bl	800bf38 <TIM_OC1_SetConfig>
      break;
 800ba90:	e017      	b.n	800bac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fab3 	bl	800c004 <TIM_OC2_SetConfig>
      break;
 800ba9e:	e010      	b.n	800bac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 fb18 	bl	800c0dc <TIM_OC3_SetConfig>
      break;
 800baac:	e009      	b.n	800bac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 fb7b 	bl	800c1b0 <TIM_OC4_SetConfig>
      break;
 800baba:	e002      	b.n	800bac2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	75fb      	strb	r3, [r7, #23]
      break;
 800bac0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800baee:	2302      	movs	r3, #2
 800baf0:	e0ae      	b.n	800bc50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b0c      	cmp	r3, #12
 800bafe:	f200 809f 	bhi.w	800bc40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bb02:	a201      	add	r2, pc, #4	; (adr r2, 800bb08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb08:	0800bb3d 	.word	0x0800bb3d
 800bb0c:	0800bc41 	.word	0x0800bc41
 800bb10:	0800bc41 	.word	0x0800bc41
 800bb14:	0800bc41 	.word	0x0800bc41
 800bb18:	0800bb7d 	.word	0x0800bb7d
 800bb1c:	0800bc41 	.word	0x0800bc41
 800bb20:	0800bc41 	.word	0x0800bc41
 800bb24:	0800bc41 	.word	0x0800bc41
 800bb28:	0800bbbf 	.word	0x0800bbbf
 800bb2c:	0800bc41 	.word	0x0800bc41
 800bb30:	0800bc41 	.word	0x0800bc41
 800bb34:	0800bc41 	.word	0x0800bc41
 800bb38:	0800bbff 	.word	0x0800bbff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68b9      	ldr	r1, [r7, #8]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 f9f8 	bl	800bf38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	699a      	ldr	r2, [r3, #24]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f042 0208 	orr.w	r2, r2, #8
 800bb56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	699a      	ldr	r2, [r3, #24]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f022 0204 	bic.w	r2, r2, #4
 800bb66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	6999      	ldr	r1, [r3, #24]
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	691a      	ldr	r2, [r3, #16]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	430a      	orrs	r2, r1
 800bb78:	619a      	str	r2, [r3, #24]
      break;
 800bb7a:	e064      	b.n	800bc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	68b9      	ldr	r1, [r7, #8]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 fa3e 	bl	800c004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	699a      	ldr	r2, [r3, #24]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	699a      	ldr	r2, [r3, #24]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	6999      	ldr	r1, [r3, #24]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	691b      	ldr	r3, [r3, #16]
 800bbb2:	021a      	lsls	r2, r3, #8
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	430a      	orrs	r2, r1
 800bbba:	619a      	str	r2, [r3, #24]
      break;
 800bbbc:	e043      	b.n	800bc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f000 fa89 	bl	800c0dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	69da      	ldr	r2, [r3, #28]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f042 0208 	orr.w	r2, r2, #8
 800bbd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69da      	ldr	r2, [r3, #28]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 0204 	bic.w	r2, r2, #4
 800bbe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	69d9      	ldr	r1, [r3, #28]
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	691a      	ldr	r2, [r3, #16]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	61da      	str	r2, [r3, #28]
      break;
 800bbfc:	e023      	b.n	800bc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68b9      	ldr	r1, [r7, #8]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f000 fad3 	bl	800c1b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	69da      	ldr	r2, [r3, #28]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69da      	ldr	r2, [r3, #28]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	69d9      	ldr	r1, [r3, #28]
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	691b      	ldr	r3, [r3, #16]
 800bc34:	021a      	lsls	r2, r3, #8
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	430a      	orrs	r2, r1
 800bc3c:	61da      	str	r2, [r3, #28]
      break;
 800bc3e:	e002      	b.n	800bc46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	75fb      	strb	r3, [r7, #23]
      break;
 800bc44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3718      	adds	r7, #24
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc62:	2300      	movs	r3, #0
 800bc64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d101      	bne.n	800bc74 <HAL_TIM_ConfigClockSource+0x1c>
 800bc70:	2302      	movs	r3, #2
 800bc72:	e0b4      	b.n	800bdde <HAL_TIM_ConfigClockSource+0x186>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcac:	d03e      	beq.n	800bd2c <HAL_TIM_ConfigClockSource+0xd4>
 800bcae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcb2:	f200 8087 	bhi.w	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcba:	f000 8086 	beq.w	800bdca <HAL_TIM_ConfigClockSource+0x172>
 800bcbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcc2:	d87f      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcc4:	2b70      	cmp	r3, #112	; 0x70
 800bcc6:	d01a      	beq.n	800bcfe <HAL_TIM_ConfigClockSource+0xa6>
 800bcc8:	2b70      	cmp	r3, #112	; 0x70
 800bcca:	d87b      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bccc:	2b60      	cmp	r3, #96	; 0x60
 800bcce:	d050      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0x11a>
 800bcd0:	2b60      	cmp	r3, #96	; 0x60
 800bcd2:	d877      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcd4:	2b50      	cmp	r3, #80	; 0x50
 800bcd6:	d03c      	beq.n	800bd52 <HAL_TIM_ConfigClockSource+0xfa>
 800bcd8:	2b50      	cmp	r3, #80	; 0x50
 800bcda:	d873      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcdc:	2b40      	cmp	r3, #64	; 0x40
 800bcde:	d058      	beq.n	800bd92 <HAL_TIM_ConfigClockSource+0x13a>
 800bce0:	2b40      	cmp	r3, #64	; 0x40
 800bce2:	d86f      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bce4:	2b30      	cmp	r3, #48	; 0x30
 800bce6:	d064      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bce8:	2b30      	cmp	r3, #48	; 0x30
 800bcea:	d86b      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcec:	2b20      	cmp	r3, #32
 800bcee:	d060      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	d867      	bhi.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d05c      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bcf8:	2b10      	cmp	r3, #16
 800bcfa:	d05a      	beq.n	800bdb2 <HAL_TIM_ConfigClockSource+0x15a>
 800bcfc:	e062      	b.n	800bdc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6818      	ldr	r0, [r3, #0]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	6899      	ldr	r1, [r3, #8]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	685a      	ldr	r2, [r3, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	f000 fb19 	bl	800c344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	609a      	str	r2, [r3, #8]
      break;
 800bd2a:	e04f      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	6899      	ldr	r1, [r3, #8]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685a      	ldr	r2, [r3, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	f000 fb02 	bl	800c344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	689a      	ldr	r2, [r3, #8]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd4e:	609a      	str	r2, [r3, #8]
      break;
 800bd50:	e03c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6818      	ldr	r0, [r3, #0]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	6859      	ldr	r1, [r3, #4]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	461a      	mov	r2, r3
 800bd60:	f000 fa76 	bl	800c250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2150      	movs	r1, #80	; 0x50
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 facf 	bl	800c30e <TIM_ITRx_SetConfig>
      break;
 800bd70:	e02c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6818      	ldr	r0, [r3, #0]
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	6859      	ldr	r1, [r3, #4]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	f000 fa95 	bl	800c2ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2160      	movs	r1, #96	; 0x60
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fabf 	bl	800c30e <TIM_ITRx_SetConfig>
      break;
 800bd90:	e01c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	6859      	ldr	r1, [r3, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	461a      	mov	r2, r3
 800bda0:	f000 fa56 	bl	800c250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2140      	movs	r1, #64	; 0x40
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 faaf 	bl	800c30e <TIM_ITRx_SetConfig>
      break;
 800bdb0:	e00c      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f000 faa6 	bl	800c30e <TIM_ITRx_SetConfig>
      break;
 800bdc2:	e003      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc8:	e000      	b.n	800bdcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bdca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdee:	bf00      	nop
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b083      	sub	sp, #12
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be02:	bf00      	nop
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr

0800be0e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be0e:	b480      	push	{r7}
 800be10:	b083      	sub	sp, #12
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be2a:	bf00      	nop
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
	...

0800be38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a34      	ldr	r2, [pc, #208]	; (800bf1c <TIM_Base_SetConfig+0xe4>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d00f      	beq.n	800be70 <TIM_Base_SetConfig+0x38>
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be56:	d00b      	beq.n	800be70 <TIM_Base_SetConfig+0x38>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a31      	ldr	r2, [pc, #196]	; (800bf20 <TIM_Base_SetConfig+0xe8>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d007      	beq.n	800be70 <TIM_Base_SetConfig+0x38>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a30      	ldr	r2, [pc, #192]	; (800bf24 <TIM_Base_SetConfig+0xec>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d003      	beq.n	800be70 <TIM_Base_SetConfig+0x38>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a2f      	ldr	r2, [pc, #188]	; (800bf28 <TIM_Base_SetConfig+0xf0>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d108      	bne.n	800be82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	4313      	orrs	r3, r2
 800be80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a25      	ldr	r2, [pc, #148]	; (800bf1c <TIM_Base_SetConfig+0xe4>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d01b      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be90:	d017      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a22      	ldr	r2, [pc, #136]	; (800bf20 <TIM_Base_SetConfig+0xe8>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d013      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a21      	ldr	r2, [pc, #132]	; (800bf24 <TIM_Base_SetConfig+0xec>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d00f      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a20      	ldr	r2, [pc, #128]	; (800bf28 <TIM_Base_SetConfig+0xf0>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d00b      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a1f      	ldr	r2, [pc, #124]	; (800bf2c <TIM_Base_SetConfig+0xf4>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d007      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a1e      	ldr	r2, [pc, #120]	; (800bf30 <TIM_Base_SetConfig+0xf8>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d003      	beq.n	800bec2 <TIM_Base_SetConfig+0x8a>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a1d      	ldr	r2, [pc, #116]	; (800bf34 <TIM_Base_SetConfig+0xfc>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d108      	bne.n	800bed4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	4313      	orrs	r3, r2
 800bee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	689a      	ldr	r2, [r3, #8]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a08      	ldr	r2, [pc, #32]	; (800bf1c <TIM_Base_SetConfig+0xe4>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d103      	bne.n	800bf08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	691a      	ldr	r2, [r3, #16]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	615a      	str	r2, [r3, #20]
}
 800bf0e:	bf00      	nop
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	40010000 	.word	0x40010000
 800bf20:	40000400 	.word	0x40000400
 800bf24:	40000800 	.word	0x40000800
 800bf28:	40000c00 	.word	0x40000c00
 800bf2c:	40014000 	.word	0x40014000
 800bf30:	40014400 	.word	0x40014400
 800bf34:	40014800 	.word	0x40014800

0800bf38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	f023 0201 	bic.w	r2, r3, #1
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	699b      	ldr	r3, [r3, #24]
 800bf5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68fa      	ldr	r2, [r7, #12]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f023 0302 	bic.w	r3, r3, #2
 800bf80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a1c      	ldr	r2, [pc, #112]	; (800c000 <TIM_OC1_SetConfig+0xc8>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d10c      	bne.n	800bfae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f023 0308 	bic.w	r3, r3, #8
 800bf9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	697a      	ldr	r2, [r7, #20]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f023 0304 	bic.w	r3, r3, #4
 800bfac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a13      	ldr	r2, [pc, #76]	; (800c000 <TIM_OC1_SetConfig+0xc8>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d111      	bne.n	800bfda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	685a      	ldr	r2, [r3, #4]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	621a      	str	r2, [r3, #32]
}
 800bff4:	bf00      	nop
 800bff6:	371c      	adds	r7, #28
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	40010000 	.word	0x40010000

0800c004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c004:	b480      	push	{r7}
 800c006:	b087      	sub	sp, #28
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	f023 0210 	bic.w	r2, r3, #16
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	021b      	lsls	r3, r3, #8
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	4313      	orrs	r3, r2
 800c046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	f023 0320 	bic.w	r3, r3, #32
 800c04e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	011b      	lsls	r3, r3, #4
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	4313      	orrs	r3, r2
 800c05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a1e      	ldr	r2, [pc, #120]	; (800c0d8 <TIM_OC2_SetConfig+0xd4>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d10d      	bne.n	800c080 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c06a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	4313      	orrs	r3, r2
 800c076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c07e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a15      	ldr	r2, [pc, #84]	; (800c0d8 <TIM_OC2_SetConfig+0xd4>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d113      	bne.n	800c0b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c08e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	621a      	str	r2, [r3, #32]
}
 800c0ca:	bf00      	nop
 800c0cc:	371c      	adds	r7, #28
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	40010000 	.word	0x40010000

0800c0dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6a1b      	ldr	r3, [r3, #32]
 800c0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	021b      	lsls	r3, r3, #8
 800c12c:	697a      	ldr	r2, [r7, #20]
 800c12e:	4313      	orrs	r3, r2
 800c130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a1d      	ldr	r2, [pc, #116]	; (800c1ac <TIM_OC3_SetConfig+0xd0>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d10d      	bne.n	800c156 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	021b      	lsls	r3, r3, #8
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a14      	ldr	r2, [pc, #80]	; (800c1ac <TIM_OC3_SetConfig+0xd0>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d113      	bne.n	800c186 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c16c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	011b      	lsls	r3, r3, #4
 800c174:	693a      	ldr	r2, [r7, #16]
 800c176:	4313      	orrs	r3, r2
 800c178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	011b      	lsls	r3, r3, #4
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	4313      	orrs	r3, r2
 800c184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	685a      	ldr	r2, [r3, #4]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	697a      	ldr	r2, [r7, #20]
 800c19e:	621a      	str	r2, [r3, #32]
}
 800c1a0:	bf00      	nop
 800c1a2:	371c      	adds	r7, #28
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	40010000 	.word	0x40010000

0800c1b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	021b      	lsls	r3, r3, #8
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	031b      	lsls	r3, r3, #12
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	4313      	orrs	r3, r2
 800c206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a10      	ldr	r2, [pc, #64]	; (800c24c <TIM_OC4_SetConfig+0x9c>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d109      	bne.n	800c224 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	695b      	ldr	r3, [r3, #20]
 800c21c:	019b      	lsls	r3, r3, #6
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	4313      	orrs	r3, r2
 800c222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	621a      	str	r2, [r3, #32]
}
 800c23e:	bf00      	nop
 800c240:	371c      	adds	r7, #28
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	40010000 	.word	0x40010000

0800c250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c250:	b480      	push	{r7}
 800c252:	b087      	sub	sp, #28
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6a1b      	ldr	r3, [r3, #32]
 800c260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6a1b      	ldr	r3, [r3, #32]
 800c266:	f023 0201 	bic.w	r2, r3, #1
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c27a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	011b      	lsls	r3, r3, #4
 800c280:	693a      	ldr	r2, [r7, #16]
 800c282:	4313      	orrs	r3, r2
 800c284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	f023 030a 	bic.w	r3, r3, #10
 800c28c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	4313      	orrs	r3, r2
 800c294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	621a      	str	r2, [r3, #32]
}
 800c2a2:	bf00      	nop
 800c2a4:	371c      	adds	r7, #28
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b087      	sub	sp, #28
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6a1b      	ldr	r3, [r3, #32]
 800c2be:	f023 0210 	bic.w	r2, r3, #16
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	031b      	lsls	r3, r3, #12
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c2ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	011b      	lsls	r3, r3, #4
 800c2f0:	693a      	ldr	r2, [r7, #16]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	621a      	str	r2, [r3, #32]
}
 800c302:	bf00      	nop
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c30e:	b480      	push	{r7}
 800c310:	b085      	sub	sp, #20
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	f043 0307 	orr.w	r3, r3, #7
 800c330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	609a      	str	r2, [r3, #8]
}
 800c338:	bf00      	nop
 800c33a:	3714      	adds	r7, #20
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c35e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	021a      	lsls	r2, r3, #8
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	431a      	orrs	r2, r3
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	697a      	ldr	r2, [r7, #20]
 800c36e:	4313      	orrs	r3, r2
 800c370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	609a      	str	r2, [r3, #8]
}
 800c378:	bf00      	nop
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c384:	b480      	push	{r7}
 800c386:	b087      	sub	sp, #28
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f003 031f 	and.w	r3, r3, #31
 800c396:	2201      	movs	r2, #1
 800c398:	fa02 f303 	lsl.w	r3, r2, r3
 800c39c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a1a      	ldr	r2, [r3, #32]
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	6a1a      	ldr	r2, [r3, #32]
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f003 031f 	and.w	r3, r3, #31
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3bc:	431a      	orrs	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	621a      	str	r2, [r3, #32]
}
 800c3c2:	bf00      	nop
 800c3c4:	371c      	adds	r7, #28
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
	...

0800c3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d101      	bne.n	800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	e050      	b.n	800c48a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2202      	movs	r2, #2
 800c3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c40e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	4313      	orrs	r3, r2
 800c418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a1c      	ldr	r2, [pc, #112]	; (800c498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d018      	beq.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c434:	d013      	beq.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a18      	ldr	r2, [pc, #96]	; (800c49c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00e      	beq.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a16      	ldr	r2, [pc, #88]	; (800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d009      	beq.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a15      	ldr	r2, [pc, #84]	; (800c4a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d004      	beq.n	800c45e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a13      	ldr	r2, [pc, #76]	; (800c4a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d10c      	bne.n	800c478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	4313      	orrs	r3, r2
 800c46e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68ba      	ldr	r2, [r7, #8]
 800c476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3714      	adds	r7, #20
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
 800c496:	bf00      	nop
 800c498:	40010000 	.word	0x40010000
 800c49c:	40000400 	.word	0x40000400
 800c4a0:	40000800 	.word	0x40000800
 800c4a4:	40000c00 	.word	0x40000c00
 800c4a8:	40014000 	.word	0x40014000

0800c4ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d101      	bne.n	800c4e6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e047      	b.n	800c576 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7fa f9a8 	bl	8006850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2224      	movs	r2, #36	; 0x24
 800c504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	68da      	ldr	r2, [r3, #12]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f931 	bl	800c780 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	691a      	ldr	r2, [r3, #16]
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c52c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	695a      	ldr	r2, [r3, #20]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800c53c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	695a      	ldr	r2, [r3, #20]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f042 0208 	orr.w	r2, r2, #8
 800c54c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	68da      	ldr	r2, [r3, #12]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c55c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2220      	movs	r2, #32
 800c568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2220      	movs	r2, #32
 800c570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b08a      	sub	sp, #40	; 0x28
 800c582:	af02      	add	r7, sp, #8
 800c584:	60f8      	str	r0, [r7, #12]
 800c586:	60b9      	str	r1, [r7, #8]
 800c588:	603b      	str	r3, [r7, #0]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c58e:	2300      	movs	r3, #0
 800c590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b20      	cmp	r3, #32
 800c59c:	d17c      	bne.n	800c698 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <HAL_UART_Transmit+0x2c>
 800c5a4:	88fb      	ldrh	r3, [r7, #6]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e075      	b.n	800c69a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d101      	bne.n	800c5bc <HAL_UART_Transmit+0x3e>
 800c5b8:	2302      	movs	r3, #2
 800c5ba:	e06e      	b.n	800c69a <HAL_UART_Transmit+0x11c>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2221      	movs	r2, #33	; 0x21
 800c5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c5d2:	f7fa facf 	bl	8006b74 <HAL_GetTick>
 800c5d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	88fa      	ldrh	r2, [r7, #6]
 800c5dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	88fa      	ldrh	r2, [r7, #6]
 800c5e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ec:	d108      	bne.n	800c600 <HAL_UART_Transmit+0x82>
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d104      	bne.n	800c600 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	61bb      	str	r3, [r7, #24]
 800c5fe:	e003      	b.n	800c608 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c610:	e02a      	b.n	800c668 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	2200      	movs	r2, #0
 800c61a:	2180      	movs	r1, #128	; 0x80
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 f840 	bl	800c6a2 <UART_WaitOnFlagUntilTimeout>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c628:	2303      	movs	r3, #3
 800c62a:	e036      	b.n	800c69a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10b      	bne.n	800c64a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c632:	69bb      	ldr	r3, [r7, #24]
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	461a      	mov	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c640:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	3302      	adds	r3, #2
 800c646:	61bb      	str	r3, [r7, #24]
 800c648:	e007      	b.n	800c65a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	781a      	ldrb	r2, [r3, #0]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c654:	69fb      	ldr	r3, [r7, #28]
 800c656:	3301      	adds	r3, #1
 800c658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c65e:	b29b      	uxth	r3, r3
 800c660:	3b01      	subs	r3, #1
 800c662:	b29a      	uxth	r2, r3
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1cf      	bne.n	800c612 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	9300      	str	r3, [sp, #0]
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2200      	movs	r2, #0
 800c67a:	2140      	movs	r1, #64	; 0x40
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f000 f810 	bl	800c6a2 <UART_WaitOnFlagUntilTimeout>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	e006      	b.n	800c69a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2220      	movs	r2, #32
 800c690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	e000      	b.n	800c69a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c698:	2302      	movs	r3, #2
  }
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3720      	adds	r7, #32
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b090      	sub	sp, #64	; 0x40
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	60b9      	str	r1, [r7, #8]
 800c6ac:	603b      	str	r3, [r7, #0]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6b2:	e050      	b.n	800c756 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ba:	d04c      	beq.n	800c756 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c6c2:	f7fa fa57 	bl	8006b74 <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d241      	bcs.n	800c756 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	330c      	adds	r3, #12
 800c6d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	330c      	adds	r3, #12
 800c6f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6f2:	637a      	str	r2, [r7, #52]	; 0x34
 800c6f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6fa:	e841 2300 	strex	r3, r2, [r1]
 800c6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e5      	bne.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3314      	adds	r3, #20
 800c70c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	e853 3f00 	ldrex	r3, [r3]
 800c714:	613b      	str	r3, [r7, #16]
   return(result);
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f023 0301 	bic.w	r3, r3, #1
 800c71c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3314      	adds	r3, #20
 800c724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c726:	623a      	str	r2, [r7, #32]
 800c728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	69f9      	ldr	r1, [r7, #28]
 800c72c:	6a3a      	ldr	r2, [r7, #32]
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	61bb      	str	r3, [r7, #24]
   return(result);
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e5      	bne.n	800c706 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2220      	movs	r2, #32
 800c746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	e00f      	b.n	800c776 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	4013      	ands	r3, r2
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	429a      	cmp	r2, r3
 800c764:	bf0c      	ite	eq
 800c766:	2301      	moveq	r3, #1
 800c768:	2300      	movne	r3, #0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	461a      	mov	r2, r3
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	429a      	cmp	r2, r3
 800c772:	d09f      	beq.n	800c6b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3740      	adds	r7, #64	; 0x40
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c784:	b0c0      	sub	sp, #256	; 0x100
 800c786:	af00      	add	r7, sp, #0
 800c788:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c78c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79c:	68d9      	ldr	r1, [r3, #12]
 800c79e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	ea40 0301 	orr.w	r3, r0, r1
 800c7a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ae:	689a      	ldr	r2, [r3, #8]
 800c7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b4:	691b      	ldr	r3, [r3, #16]
 800c7b6:	431a      	orrs	r2, r3
 800c7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c7d8:	f021 010c 	bic.w	r1, r1, #12
 800c7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c7e6:	430b      	orrs	r3, r1
 800c7e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fa:	6999      	ldr	r1, [r3, #24]
 800c7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	ea40 0301 	orr.w	r3, r0, r1
 800c806:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	4b8f      	ldr	r3, [pc, #572]	; (800ca4c <UART_SetConfig+0x2cc>)
 800c810:	429a      	cmp	r2, r3
 800c812:	d005      	beq.n	800c820 <UART_SetConfig+0xa0>
 800c814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c818:	681a      	ldr	r2, [r3, #0]
 800c81a:	4b8d      	ldr	r3, [pc, #564]	; (800ca50 <UART_SetConfig+0x2d0>)
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d104      	bne.n	800c82a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c820:	f7fd fcf4 	bl	800a20c <HAL_RCC_GetPCLK2Freq>
 800c824:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c828:	e003      	b.n	800c832 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c82a:	f7fd fcdb 	bl	800a1e4 <HAL_RCC_GetPCLK1Freq>
 800c82e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c83c:	f040 810c 	bne.w	800ca58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c844:	2200      	movs	r2, #0
 800c846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c84a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c84e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c852:	4622      	mov	r2, r4
 800c854:	462b      	mov	r3, r5
 800c856:	1891      	adds	r1, r2, r2
 800c858:	65b9      	str	r1, [r7, #88]	; 0x58
 800c85a:	415b      	adcs	r3, r3
 800c85c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c85e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c862:	4621      	mov	r1, r4
 800c864:	eb12 0801 	adds.w	r8, r2, r1
 800c868:	4629      	mov	r1, r5
 800c86a:	eb43 0901 	adc.w	r9, r3, r1
 800c86e:	f04f 0200 	mov.w	r2, #0
 800c872:	f04f 0300 	mov.w	r3, #0
 800c876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c87a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c87e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c882:	4690      	mov	r8, r2
 800c884:	4699      	mov	r9, r3
 800c886:	4623      	mov	r3, r4
 800c888:	eb18 0303 	adds.w	r3, r8, r3
 800c88c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c890:	462b      	mov	r3, r5
 800c892:	eb49 0303 	adc.w	r3, r9, r3
 800c896:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	18db      	adds	r3, r3, r3
 800c8b2:	653b      	str	r3, [r7, #80]	; 0x50
 800c8b4:	4613      	mov	r3, r2
 800c8b6:	eb42 0303 	adc.w	r3, r2, r3
 800c8ba:	657b      	str	r3, [r7, #84]	; 0x54
 800c8bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c8c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c8c4:	f7f3 ffe6 	bl	8000894 <__aeabi_uldivmod>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4b61      	ldr	r3, [pc, #388]	; (800ca54 <UART_SetConfig+0x2d4>)
 800c8ce:	fba3 2302 	umull	r2, r3, r3, r2
 800c8d2:	095b      	lsrs	r3, r3, #5
 800c8d4:	011c      	lsls	r4, r3, #4
 800c8d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c8e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c8e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c8e8:	4642      	mov	r2, r8
 800c8ea:	464b      	mov	r3, r9
 800c8ec:	1891      	adds	r1, r2, r2
 800c8ee:	64b9      	str	r1, [r7, #72]	; 0x48
 800c8f0:	415b      	adcs	r3, r3
 800c8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c8f8:	4641      	mov	r1, r8
 800c8fa:	eb12 0a01 	adds.w	sl, r2, r1
 800c8fe:	4649      	mov	r1, r9
 800c900:	eb43 0b01 	adc.w	fp, r3, r1
 800c904:	f04f 0200 	mov.w	r2, #0
 800c908:	f04f 0300 	mov.w	r3, #0
 800c90c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c910:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c918:	4692      	mov	sl, r2
 800c91a:	469b      	mov	fp, r3
 800c91c:	4643      	mov	r3, r8
 800c91e:	eb1a 0303 	adds.w	r3, sl, r3
 800c922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c926:	464b      	mov	r3, r9
 800c928:	eb4b 0303 	adc.w	r3, fp, r3
 800c92c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c93c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c940:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c944:	460b      	mov	r3, r1
 800c946:	18db      	adds	r3, r3, r3
 800c948:	643b      	str	r3, [r7, #64]	; 0x40
 800c94a:	4613      	mov	r3, r2
 800c94c:	eb42 0303 	adc.w	r3, r2, r3
 800c950:	647b      	str	r3, [r7, #68]	; 0x44
 800c952:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c956:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c95a:	f7f3 ff9b 	bl	8000894 <__aeabi_uldivmod>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4611      	mov	r1, r2
 800c964:	4b3b      	ldr	r3, [pc, #236]	; (800ca54 <UART_SetConfig+0x2d4>)
 800c966:	fba3 2301 	umull	r2, r3, r3, r1
 800c96a:	095b      	lsrs	r3, r3, #5
 800c96c:	2264      	movs	r2, #100	; 0x64
 800c96e:	fb02 f303 	mul.w	r3, r2, r3
 800c972:	1acb      	subs	r3, r1, r3
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c97a:	4b36      	ldr	r3, [pc, #216]	; (800ca54 <UART_SetConfig+0x2d4>)
 800c97c:	fba3 2302 	umull	r2, r3, r3, r2
 800c980:	095b      	lsrs	r3, r3, #5
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c988:	441c      	add	r4, r3
 800c98a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c98e:	2200      	movs	r2, #0
 800c990:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c994:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c998:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c99c:	4642      	mov	r2, r8
 800c99e:	464b      	mov	r3, r9
 800c9a0:	1891      	adds	r1, r2, r2
 800c9a2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9a4:	415b      	adcs	r3, r3
 800c9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9ac:	4641      	mov	r1, r8
 800c9ae:	1851      	adds	r1, r2, r1
 800c9b0:	6339      	str	r1, [r7, #48]	; 0x30
 800c9b2:	4649      	mov	r1, r9
 800c9b4:	414b      	adcs	r3, r1
 800c9b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9b8:	f04f 0200 	mov.w	r2, #0
 800c9bc:	f04f 0300 	mov.w	r3, #0
 800c9c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c9c4:	4659      	mov	r1, fp
 800c9c6:	00cb      	lsls	r3, r1, #3
 800c9c8:	4651      	mov	r1, sl
 800c9ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9ce:	4651      	mov	r1, sl
 800c9d0:	00ca      	lsls	r2, r1, #3
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	4642      	mov	r2, r8
 800c9da:	189b      	adds	r3, r3, r2
 800c9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9e0:	464b      	mov	r3, r9
 800c9e2:	460a      	mov	r2, r1
 800c9e4:	eb42 0303 	adc.w	r3, r2, r3
 800c9e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c9f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c9fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca00:	460b      	mov	r3, r1
 800ca02:	18db      	adds	r3, r3, r3
 800ca04:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca06:	4613      	mov	r3, r2
 800ca08:	eb42 0303 	adc.w	r3, r2, r3
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca16:	f7f3 ff3d 	bl	8000894 <__aeabi_uldivmod>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4b0d      	ldr	r3, [pc, #52]	; (800ca54 <UART_SetConfig+0x2d4>)
 800ca20:	fba3 1302 	umull	r1, r3, r3, r2
 800ca24:	095b      	lsrs	r3, r3, #5
 800ca26:	2164      	movs	r1, #100	; 0x64
 800ca28:	fb01 f303 	mul.w	r3, r1, r3
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	3332      	adds	r3, #50	; 0x32
 800ca32:	4a08      	ldr	r2, [pc, #32]	; (800ca54 <UART_SetConfig+0x2d4>)
 800ca34:	fba2 2303 	umull	r2, r3, r2, r3
 800ca38:	095b      	lsrs	r3, r3, #5
 800ca3a:	f003 0207 	and.w	r2, r3, #7
 800ca3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4422      	add	r2, r4
 800ca46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca48:	e105      	b.n	800cc56 <UART_SetConfig+0x4d6>
 800ca4a:	bf00      	nop
 800ca4c:	40011000 	.word	0x40011000
 800ca50:	40011400 	.word	0x40011400
 800ca54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca6a:	4642      	mov	r2, r8
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	1891      	adds	r1, r2, r2
 800ca70:	6239      	str	r1, [r7, #32]
 800ca72:	415b      	adcs	r3, r3
 800ca74:	627b      	str	r3, [r7, #36]	; 0x24
 800ca76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca7a:	4641      	mov	r1, r8
 800ca7c:	1854      	adds	r4, r2, r1
 800ca7e:	4649      	mov	r1, r9
 800ca80:	eb43 0501 	adc.w	r5, r3, r1
 800ca84:	f04f 0200 	mov.w	r2, #0
 800ca88:	f04f 0300 	mov.w	r3, #0
 800ca8c:	00eb      	lsls	r3, r5, #3
 800ca8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca92:	00e2      	lsls	r2, r4, #3
 800ca94:	4614      	mov	r4, r2
 800ca96:	461d      	mov	r5, r3
 800ca98:	4643      	mov	r3, r8
 800ca9a:	18e3      	adds	r3, r4, r3
 800ca9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800caa0:	464b      	mov	r3, r9
 800caa2:	eb45 0303 	adc.w	r3, r5, r3
 800caa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800caaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800caba:	f04f 0200 	mov.w	r2, #0
 800cabe:	f04f 0300 	mov.w	r3, #0
 800cac2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cac6:	4629      	mov	r1, r5
 800cac8:	008b      	lsls	r3, r1, #2
 800caca:	4621      	mov	r1, r4
 800cacc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cad0:	4621      	mov	r1, r4
 800cad2:	008a      	lsls	r2, r1, #2
 800cad4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cad8:	f7f3 fedc 	bl	8000894 <__aeabi_uldivmod>
 800cadc:	4602      	mov	r2, r0
 800cade:	460b      	mov	r3, r1
 800cae0:	4b60      	ldr	r3, [pc, #384]	; (800cc64 <UART_SetConfig+0x4e4>)
 800cae2:	fba3 2302 	umull	r2, r3, r3, r2
 800cae6:	095b      	lsrs	r3, r3, #5
 800cae8:	011c      	lsls	r4, r3, #4
 800caea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caee:	2200      	movs	r2, #0
 800caf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800caf4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800caf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cafc:	4642      	mov	r2, r8
 800cafe:	464b      	mov	r3, r9
 800cb00:	1891      	adds	r1, r2, r2
 800cb02:	61b9      	str	r1, [r7, #24]
 800cb04:	415b      	adcs	r3, r3
 800cb06:	61fb      	str	r3, [r7, #28]
 800cb08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb0c:	4641      	mov	r1, r8
 800cb0e:	1851      	adds	r1, r2, r1
 800cb10:	6139      	str	r1, [r7, #16]
 800cb12:	4649      	mov	r1, r9
 800cb14:	414b      	adcs	r3, r1
 800cb16:	617b      	str	r3, [r7, #20]
 800cb18:	f04f 0200 	mov.w	r2, #0
 800cb1c:	f04f 0300 	mov.w	r3, #0
 800cb20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb24:	4659      	mov	r1, fp
 800cb26:	00cb      	lsls	r3, r1, #3
 800cb28:	4651      	mov	r1, sl
 800cb2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb2e:	4651      	mov	r1, sl
 800cb30:	00ca      	lsls	r2, r1, #3
 800cb32:	4610      	mov	r0, r2
 800cb34:	4619      	mov	r1, r3
 800cb36:	4603      	mov	r3, r0
 800cb38:	4642      	mov	r2, r8
 800cb3a:	189b      	adds	r3, r3, r2
 800cb3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb40:	464b      	mov	r3, r9
 800cb42:	460a      	mov	r2, r1
 800cb44:	eb42 0303 	adc.w	r3, r2, r3
 800cb48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb56:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb58:	f04f 0200 	mov.w	r2, #0
 800cb5c:	f04f 0300 	mov.w	r3, #0
 800cb60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb64:	4649      	mov	r1, r9
 800cb66:	008b      	lsls	r3, r1, #2
 800cb68:	4641      	mov	r1, r8
 800cb6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb6e:	4641      	mov	r1, r8
 800cb70:	008a      	lsls	r2, r1, #2
 800cb72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb76:	f7f3 fe8d 	bl	8000894 <__aeabi_uldivmod>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4b39      	ldr	r3, [pc, #228]	; (800cc64 <UART_SetConfig+0x4e4>)
 800cb80:	fba3 1302 	umull	r1, r3, r3, r2
 800cb84:	095b      	lsrs	r3, r3, #5
 800cb86:	2164      	movs	r1, #100	; 0x64
 800cb88:	fb01 f303 	mul.w	r3, r1, r3
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	011b      	lsls	r3, r3, #4
 800cb90:	3332      	adds	r3, #50	; 0x32
 800cb92:	4a34      	ldr	r2, [pc, #208]	; (800cc64 <UART_SetConfig+0x4e4>)
 800cb94:	fba2 2303 	umull	r2, r3, r2, r3
 800cb98:	095b      	lsrs	r3, r3, #5
 800cb9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb9e:	441c      	add	r4, r3
 800cba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cba4:	2200      	movs	r2, #0
 800cba6:	673b      	str	r3, [r7, #112]	; 0x70
 800cba8:	677a      	str	r2, [r7, #116]	; 0x74
 800cbaa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbae:	4642      	mov	r2, r8
 800cbb0:	464b      	mov	r3, r9
 800cbb2:	1891      	adds	r1, r2, r2
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	415b      	adcs	r3, r3
 800cbb8:	60fb      	str	r3, [r7, #12]
 800cbba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbbe:	4641      	mov	r1, r8
 800cbc0:	1851      	adds	r1, r2, r1
 800cbc2:	6039      	str	r1, [r7, #0]
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	414b      	adcs	r3, r1
 800cbc8:	607b      	str	r3, [r7, #4]
 800cbca:	f04f 0200 	mov.w	r2, #0
 800cbce:	f04f 0300 	mov.w	r3, #0
 800cbd2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cbd6:	4659      	mov	r1, fp
 800cbd8:	00cb      	lsls	r3, r1, #3
 800cbda:	4651      	mov	r1, sl
 800cbdc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbe0:	4651      	mov	r1, sl
 800cbe2:	00ca      	lsls	r2, r1, #3
 800cbe4:	4610      	mov	r0, r2
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4603      	mov	r3, r0
 800cbea:	4642      	mov	r2, r8
 800cbec:	189b      	adds	r3, r3, r2
 800cbee:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbf0:	464b      	mov	r3, r9
 800cbf2:	460a      	mov	r2, r1
 800cbf4:	eb42 0303 	adc.w	r3, r2, r3
 800cbf8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	663b      	str	r3, [r7, #96]	; 0x60
 800cc04:	667a      	str	r2, [r7, #100]	; 0x64
 800cc06:	f04f 0200 	mov.w	r2, #0
 800cc0a:	f04f 0300 	mov.w	r3, #0
 800cc0e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc12:	4649      	mov	r1, r9
 800cc14:	008b      	lsls	r3, r1, #2
 800cc16:	4641      	mov	r1, r8
 800cc18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	008a      	lsls	r2, r1, #2
 800cc20:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc24:	f7f3 fe36 	bl	8000894 <__aeabi_uldivmod>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	4b0d      	ldr	r3, [pc, #52]	; (800cc64 <UART_SetConfig+0x4e4>)
 800cc2e:	fba3 1302 	umull	r1, r3, r3, r2
 800cc32:	095b      	lsrs	r3, r3, #5
 800cc34:	2164      	movs	r1, #100	; 0x64
 800cc36:	fb01 f303 	mul.w	r3, r1, r3
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	011b      	lsls	r3, r3, #4
 800cc3e:	3332      	adds	r3, #50	; 0x32
 800cc40:	4a08      	ldr	r2, [pc, #32]	; (800cc64 <UART_SetConfig+0x4e4>)
 800cc42:	fba2 2303 	umull	r2, r3, r2, r3
 800cc46:	095b      	lsrs	r3, r3, #5
 800cc48:	f003 020f 	and.w	r2, r3, #15
 800cc4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4422      	add	r2, r4
 800cc54:	609a      	str	r2, [r3, #8]
}
 800cc56:	bf00      	nop
 800cc58:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc62:	bf00      	nop
 800cc64:	51eb851f 	.word	0x51eb851f

0800cc68 <arm_sin_f32>:
 800cc68:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800cce4 <arm_sin_f32+0x7c>
 800cc6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cc70:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc78:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800cc7c:	d42c      	bmi.n	800ccd8 <arm_sin_f32+0x70>
 800cc7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc82:	eddf 6a19 	vldr	s13, [pc, #100]	; 800cce8 <arm_sin_f32+0x80>
 800cc86:	4a19      	ldr	r2, [pc, #100]	; (800ccec <arm_sin_f32+0x84>)
 800cc88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc94:	eef4 7ae6 	vcmpe.f32	s15, s13
 800cc98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc9c:	bfa8      	it	ge
 800cc9e:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800cca2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800cca6:	ee17 3a10 	vmov	r3, s14
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	ee07 3a10 	vmov	s14, r3
 800ccb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ccb6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ccba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ccbe:	edd1 6a01 	vldr	s13, [r1, #4]
 800ccc2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ccc6:	ed91 0a00 	vldr	s0, [r1]
 800ccca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ccce:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ccd2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccd6:	4770      	bx	lr
 800ccd8:	ee17 3a90 	vmov	r3, s15
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	e7cc      	b.n	800cc7e <arm_sin_f32+0x16>
 800cce4:	3e22f983 	.word	0x3e22f983
 800cce8:	44000000 	.word	0x44000000
 800ccec:	0800e938 	.word	0x0800e938

0800ccf0 <atoi>:
 800ccf0:	220a      	movs	r2, #10
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	f000 b8d6 	b.w	800cea4 <strtol>

0800ccf8 <__errno>:
 800ccf8:	4b01      	ldr	r3, [pc, #4]	; (800cd00 <__errno+0x8>)
 800ccfa:	6818      	ldr	r0, [r3, #0]
 800ccfc:	4770      	bx	lr
 800ccfe:	bf00      	nop
 800cd00:	20008efc 	.word	0x20008efc

0800cd04 <__libc_init_array>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	4d0d      	ldr	r5, [pc, #52]	; (800cd3c <__libc_init_array+0x38>)
 800cd08:	4c0d      	ldr	r4, [pc, #52]	; (800cd40 <__libc_init_array+0x3c>)
 800cd0a:	1b64      	subs	r4, r4, r5
 800cd0c:	10a4      	asrs	r4, r4, #2
 800cd0e:	2600      	movs	r6, #0
 800cd10:	42a6      	cmp	r6, r4
 800cd12:	d109      	bne.n	800cd28 <__libc_init_array+0x24>
 800cd14:	4d0b      	ldr	r5, [pc, #44]	; (800cd44 <__libc_init_array+0x40>)
 800cd16:	4c0c      	ldr	r4, [pc, #48]	; (800cd48 <__libc_init_array+0x44>)
 800cd18:	f000 f8ce 	bl	800ceb8 <_init>
 800cd1c:	1b64      	subs	r4, r4, r5
 800cd1e:	10a4      	asrs	r4, r4, #2
 800cd20:	2600      	movs	r6, #0
 800cd22:	42a6      	cmp	r6, r4
 800cd24:	d105      	bne.n	800cd32 <__libc_init_array+0x2e>
 800cd26:	bd70      	pop	{r4, r5, r6, pc}
 800cd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd2c:	4798      	blx	r3
 800cd2e:	3601      	adds	r6, #1
 800cd30:	e7ee      	b.n	800cd10 <__libc_init_array+0xc>
 800cd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd36:	4798      	blx	r3
 800cd38:	3601      	adds	r6, #1
 800cd3a:	e7f2      	b.n	800cd22 <__libc_init_array+0x1e>
 800cd3c:	0800f248 	.word	0x0800f248
 800cd40:	0800f248 	.word	0x0800f248
 800cd44:	0800f248 	.word	0x0800f248
 800cd48:	0800f24c 	.word	0x0800f24c

0800cd4c <memcpy>:
 800cd4c:	440a      	add	r2, r1
 800cd4e:	4291      	cmp	r1, r2
 800cd50:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd54:	d100      	bne.n	800cd58 <memcpy+0xc>
 800cd56:	4770      	bx	lr
 800cd58:	b510      	push	{r4, lr}
 800cd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd62:	4291      	cmp	r1, r2
 800cd64:	d1f9      	bne.n	800cd5a <memcpy+0xe>
 800cd66:	bd10      	pop	{r4, pc}

0800cd68 <memset>:
 800cd68:	4402      	add	r2, r0
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d100      	bne.n	800cd72 <memset+0xa>
 800cd70:	4770      	bx	lr
 800cd72:	f803 1b01 	strb.w	r1, [r3], #1
 800cd76:	e7f9      	b.n	800cd6c <memset+0x4>

0800cd78 <strncmp>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	b17a      	cbz	r2, 800cd9c <strncmp+0x24>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	3901      	subs	r1, #1
 800cd80:	1884      	adds	r4, r0, r2
 800cd82:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd8a:	4290      	cmp	r0, r2
 800cd8c:	d101      	bne.n	800cd92 <strncmp+0x1a>
 800cd8e:	42a3      	cmp	r3, r4
 800cd90:	d101      	bne.n	800cd96 <strncmp+0x1e>
 800cd92:	1a80      	subs	r0, r0, r2
 800cd94:	bd10      	pop	{r4, pc}
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d1f3      	bne.n	800cd82 <strncmp+0xa>
 800cd9a:	e7fa      	b.n	800cd92 <strncmp+0x1a>
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	e7f9      	b.n	800cd94 <strncmp+0x1c>

0800cda0 <_strtol_l.constprop.0>:
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda6:	d001      	beq.n	800cdac <_strtol_l.constprop.0+0xc>
 800cda8:	2b24      	cmp	r3, #36	; 0x24
 800cdaa:	d906      	bls.n	800cdba <_strtol_l.constprop.0+0x1a>
 800cdac:	f7ff ffa4 	bl	800ccf8 <__errno>
 800cdb0:	2316      	movs	r3, #22
 800cdb2:	6003      	str	r3, [r0, #0]
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cea0 <_strtol_l.constprop.0+0x100>
 800cdbe:	460d      	mov	r5, r1
 800cdc0:	462e      	mov	r6, r5
 800cdc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdc6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cdca:	f017 0708 	ands.w	r7, r7, #8
 800cdce:	d1f7      	bne.n	800cdc0 <_strtol_l.constprop.0+0x20>
 800cdd0:	2c2d      	cmp	r4, #45	; 0x2d
 800cdd2:	d132      	bne.n	800ce3a <_strtol_l.constprop.0+0x9a>
 800cdd4:	782c      	ldrb	r4, [r5, #0]
 800cdd6:	2701      	movs	r7, #1
 800cdd8:	1cb5      	adds	r5, r6, #2
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d05b      	beq.n	800ce96 <_strtol_l.constprop.0+0xf6>
 800cdde:	2b10      	cmp	r3, #16
 800cde0:	d109      	bne.n	800cdf6 <_strtol_l.constprop.0+0x56>
 800cde2:	2c30      	cmp	r4, #48	; 0x30
 800cde4:	d107      	bne.n	800cdf6 <_strtol_l.constprop.0+0x56>
 800cde6:	782c      	ldrb	r4, [r5, #0]
 800cde8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cdec:	2c58      	cmp	r4, #88	; 0x58
 800cdee:	d14d      	bne.n	800ce8c <_strtol_l.constprop.0+0xec>
 800cdf0:	786c      	ldrb	r4, [r5, #1]
 800cdf2:	2310      	movs	r3, #16
 800cdf4:	3502      	adds	r5, #2
 800cdf6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cdfa:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdfe:	f04f 0c00 	mov.w	ip, #0
 800ce02:	fbb8 f9f3 	udiv	r9, r8, r3
 800ce06:	4666      	mov	r6, ip
 800ce08:	fb03 8a19 	mls	sl, r3, r9, r8
 800ce0c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ce10:	f1be 0f09 	cmp.w	lr, #9
 800ce14:	d816      	bhi.n	800ce44 <_strtol_l.constprop.0+0xa4>
 800ce16:	4674      	mov	r4, lr
 800ce18:	42a3      	cmp	r3, r4
 800ce1a:	dd24      	ble.n	800ce66 <_strtol_l.constprop.0+0xc6>
 800ce1c:	f1bc 0f00 	cmp.w	ip, #0
 800ce20:	db1e      	blt.n	800ce60 <_strtol_l.constprop.0+0xc0>
 800ce22:	45b1      	cmp	r9, r6
 800ce24:	d31c      	bcc.n	800ce60 <_strtol_l.constprop.0+0xc0>
 800ce26:	d101      	bne.n	800ce2c <_strtol_l.constprop.0+0x8c>
 800ce28:	45a2      	cmp	sl, r4
 800ce2a:	db19      	blt.n	800ce60 <_strtol_l.constprop.0+0xc0>
 800ce2c:	fb06 4603 	mla	r6, r6, r3, r4
 800ce30:	f04f 0c01 	mov.w	ip, #1
 800ce34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce38:	e7e8      	b.n	800ce0c <_strtol_l.constprop.0+0x6c>
 800ce3a:	2c2b      	cmp	r4, #43	; 0x2b
 800ce3c:	bf04      	itt	eq
 800ce3e:	782c      	ldrbeq	r4, [r5, #0]
 800ce40:	1cb5      	addeq	r5, r6, #2
 800ce42:	e7ca      	b.n	800cdda <_strtol_l.constprop.0+0x3a>
 800ce44:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ce48:	f1be 0f19 	cmp.w	lr, #25
 800ce4c:	d801      	bhi.n	800ce52 <_strtol_l.constprop.0+0xb2>
 800ce4e:	3c37      	subs	r4, #55	; 0x37
 800ce50:	e7e2      	b.n	800ce18 <_strtol_l.constprop.0+0x78>
 800ce52:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ce56:	f1be 0f19 	cmp.w	lr, #25
 800ce5a:	d804      	bhi.n	800ce66 <_strtol_l.constprop.0+0xc6>
 800ce5c:	3c57      	subs	r4, #87	; 0x57
 800ce5e:	e7db      	b.n	800ce18 <_strtol_l.constprop.0+0x78>
 800ce60:	f04f 3cff 	mov.w	ip, #4294967295
 800ce64:	e7e6      	b.n	800ce34 <_strtol_l.constprop.0+0x94>
 800ce66:	f1bc 0f00 	cmp.w	ip, #0
 800ce6a:	da05      	bge.n	800ce78 <_strtol_l.constprop.0+0xd8>
 800ce6c:	2322      	movs	r3, #34	; 0x22
 800ce6e:	6003      	str	r3, [r0, #0]
 800ce70:	4646      	mov	r6, r8
 800ce72:	b942      	cbnz	r2, 800ce86 <_strtol_l.constprop.0+0xe6>
 800ce74:	4630      	mov	r0, r6
 800ce76:	e79e      	b.n	800cdb6 <_strtol_l.constprop.0+0x16>
 800ce78:	b107      	cbz	r7, 800ce7c <_strtol_l.constprop.0+0xdc>
 800ce7a:	4276      	negs	r6, r6
 800ce7c:	2a00      	cmp	r2, #0
 800ce7e:	d0f9      	beq.n	800ce74 <_strtol_l.constprop.0+0xd4>
 800ce80:	f1bc 0f00 	cmp.w	ip, #0
 800ce84:	d000      	beq.n	800ce88 <_strtol_l.constprop.0+0xe8>
 800ce86:	1e69      	subs	r1, r5, #1
 800ce88:	6011      	str	r1, [r2, #0]
 800ce8a:	e7f3      	b.n	800ce74 <_strtol_l.constprop.0+0xd4>
 800ce8c:	2430      	movs	r4, #48	; 0x30
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d1b1      	bne.n	800cdf6 <_strtol_l.constprop.0+0x56>
 800ce92:	2308      	movs	r3, #8
 800ce94:	e7af      	b.n	800cdf6 <_strtol_l.constprop.0+0x56>
 800ce96:	2c30      	cmp	r4, #48	; 0x30
 800ce98:	d0a5      	beq.n	800cde6 <_strtol_l.constprop.0+0x46>
 800ce9a:	230a      	movs	r3, #10
 800ce9c:	e7ab      	b.n	800cdf6 <_strtol_l.constprop.0+0x56>
 800ce9e:	bf00      	nop
 800cea0:	0800f13d 	.word	0x0800f13d

0800cea4 <strtol>:
 800cea4:	4613      	mov	r3, r2
 800cea6:	460a      	mov	r2, r1
 800cea8:	4601      	mov	r1, r0
 800ceaa:	4802      	ldr	r0, [pc, #8]	; (800ceb4 <strtol+0x10>)
 800ceac:	6800      	ldr	r0, [r0, #0]
 800ceae:	f7ff bf77 	b.w	800cda0 <_strtol_l.constprop.0>
 800ceb2:	bf00      	nop
 800ceb4:	20008efc 	.word	0x20008efc

0800ceb8 <_init>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr

0800cec4 <_fini>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr
