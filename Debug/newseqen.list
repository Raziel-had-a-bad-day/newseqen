
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2f4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024bc  0800d48c  0800d48c  0001d48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f948  0800f948  00028f78  2**0
                  CONTENTS
  4 .ARM          00000008  0800f948  0800f948  0001f948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f950  0800f950  00028f78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f950  0800f950  0001f950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f954  0800f954  0001f954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008f78  20000000  0800f958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096d0  20008f78  080188d0  00028f78  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012648  080188d0  00032648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028f78  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188ed  00000000  00000000  00028fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284f  00000000  00000000  00041895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  000440e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  000455a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dc4  00000000  00000000  00046970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019813  00000000  00000000  0005f734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1ea9  00000000  00000000  00078f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011adf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bac  00000000  00000000  0011aeb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00120a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008f78 	.word	0x20008f78
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d474 	.word	0x0800d474

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008f7c 	.word	0x20008f7c
 80001d4:	0800d474 	.word	0x0800d474

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bb9      	ldr	r3, [pc, #740]	; (8000e94 <menu_vars+0x2fc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bb7      	ldr	r3, [pc, #732]	; (8000e94 <menu_vars+0x2fc>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bb7      	ldr	r3, [pc, #732]	; (8000e98 <menu_vars+0x300>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00c fbae 	bl	800d334 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4bad      	ldr	r3, [pc, #692]	; (8000e94 <menu_vars+0x2fc>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bab      	ldr	r3, [pc, #684]	; (8000e94 <menu_vars+0x2fc>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4ba9      	ldr	r3, [pc, #676]	; (8000e94 <menu_vars+0x2fc>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4ba8      	ldr	r3, [pc, #672]	; (8000e94 <menu_vars+0x2fc>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b3f      	cmp	r3, #63	; 0x3f
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aa8      	ldr	r2, [pc, #672]	; (8000e9c <menu_vars+0x304>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aa7      	ldr	r2, [pc, #668]	; (8000ea0 <menu_vars+0x308>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa4      	ldr	r2, [pc, #656]	; (8000ea0 <menu_vars+0x308>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b3e      	cmp	r3, #62	; 0x3e
 8000c16:	f200 8236 	bhi.w	8001086 <menu_vars+0x4ee>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000d1d 	.word	0x08000d1d
 8000c24:	08000d23 	.word	0x08000d23
 8000c28:	08000d35 	.word	0x08000d35
 8000c2c:	08000d49 	.word	0x08000d49
 8000c30:	08000d5d 	.word	0x08000d5d
 8000c34:	08000d71 	.word	0x08000d71
 8000c38:	08000d83 	.word	0x08000d83
 8000c3c:	08000d89 	.word	0x08000d89
 8000c40:	08000d9b 	.word	0x08000d9b
 8000c44:	08000daf 	.word	0x08000daf
 8000c48:	08000dc3 	.word	0x08000dc3
 8000c4c:	08000dd7 	.word	0x08000dd7
 8000c50:	08000ddd 	.word	0x08000ddd
 8000c54:	08000de9 	.word	0x08000de9
 8000c58:	08000df7 	.word	0x08000df7
 8000c5c:	08000e05 	.word	0x08000e05
 8000c60:	08000e13 	.word	0x08000e13
 8000c64:	08000e21 	.word	0x08000e21
 8000c68:	08000e2f 	.word	0x08000e2f
 8000c6c:	08000e3d 	.word	0x08000e3d
 8000c70:	08000e4b 	.word	0x08000e4b
 8000c74:	08000e59 	.word	0x08000e59
 8000c78:	08000e5f 	.word	0x08000e5f
 8000c7c:	08000e65 	.word	0x08000e65
 8000c80:	08000e6b 	.word	0x08000e6b
 8000c84:	08000e77 	.word	0x08000e77
 8000c88:	08000e85 	.word	0x08000e85
 8000c8c:	08000ebd 	.word	0x08000ebd
 8000c90:	08000ec9 	.word	0x08000ec9
 8000c94:	08000ed7 	.word	0x08000ed7
 8000c98:	08000ee5 	.word	0x08000ee5
 8000c9c:	08000ef3 	.word	0x08000ef3
 8000ca0:	08000f01 	.word	0x08000f01
 8000ca4:	08000f0f 	.word	0x08000f0f
 8000ca8:	08000f1d 	.word	0x08000f1d
 8000cac:	08000f2b 	.word	0x08000f2b
 8000cb0:	08000f3d 	.word	0x08000f3d
 8000cb4:	08000f4d 	.word	0x08000f4d
 8000cb8:	08000f5f 	.word	0x08000f5f
 8000cbc:	08000f71 	.word	0x08000f71
 8000cc0:	08000f83 	.word	0x08000f83
 8000cc4:	08000f95 	.word	0x08000f95
 8000cc8:	08000fa9 	.word	0x08000fa9
 8000ccc:	08000fbd 	.word	0x08000fbd
 8000cd0:	08000fd1 	.word	0x08000fd1
 8000cd4:	08000fd7 	.word	0x08000fd7
 8000cd8:	08000fdd 	.word	0x08000fdd
 8000cdc:	08000fe3 	.word	0x08000fe3
 8000ce0:	08000fe9 	.word	0x08000fe9
 8000ce4:	08000fef 	.word	0x08000fef
 8000ce8:	08001001 	.word	0x08001001
 8000cec:	08001015 	.word	0x08001015
 8000cf0:	08001029 	.word	0x08001029
 8000cf4:	0800103d 	.word	0x0800103d
 8000cf8:	08001047 	.word	0x08001047
 8000cfc:	0800104d 	.word	0x0800104d
 8000d00:	08001053 	.word	0x08001053
 8000d04:	08001059 	.word	0x08001059
 8000d08:	0800105f 	.word	0x0800105f
 8000d0c:	08001065 	.word	0x08001065
 8000d10:	0800106b 	.word	0x0800106b
 8000d14:	08001071 	.word	0x08001071
 8000d18:	08001077 	.word	0x08001077
	case 0:     menu_vars_var1= NULL; break;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	e1b4      	b.n	800108c <menu_vars+0x4f4>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	4613      	mov	r3, r2
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ea4 <menu_vars+0x30c>)
 8000d2e:	4413      	add	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	e1ab      	b.n	800108c <menu_vars+0x4f4>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d34:	78fa      	ldrb	r2, [r7, #3]
 8000d36:	4613      	mov	r3, r2
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	4a59      	ldr	r2, [pc, #356]	; (8000ea4 <menu_vars+0x30c>)
 8000d40:	4413      	add	r3, r2
 8000d42:	3301      	adds	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	e1a1      	b.n	800108c <menu_vars+0x4f4>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d48:	78fa      	ldrb	r2, [r7, #3]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4a54      	ldr	r2, [pc, #336]	; (8000ea4 <menu_vars+0x30c>)
 8000d54:	4413      	add	r3, r2
 8000d56:	3304      	adds	r3, #4
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	e197      	b.n	800108c <menu_vars+0x4f4>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	4413      	add	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <menu_vars+0x30c>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	3303      	adds	r3, #3
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	e18d      	b.n	800108c <menu_vars+0x4f4>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	222c      	movs	r2, #44	; 0x2c
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <menu_vars+0x310>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e184      	b.n	800108c <menu_vars+0x4f4>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	e181      	b.n	800108c <menu_vars+0x4f4>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	011b      	lsls	r3, r3, #4
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4a46      	ldr	r2, [pc, #280]	; (8000eac <menu_vars+0x314>)
 8000d94:	4413      	add	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	e178      	b.n	800108c <menu_vars+0x4f4>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000d9a:	78fa      	ldrb	r2, [r7, #3]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4a41      	ldr	r2, [pc, #260]	; (8000eac <menu_vars+0x314>)
 8000da6:	4413      	add	r3, r2
 8000da8:	3301      	adds	r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	e16e      	b.n	800108c <menu_vars+0x4f4>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000dae:	78fa      	ldrb	r2, [r7, #3]
 8000db0:	4613      	mov	r3, r2
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	4a3c      	ldr	r2, [pc, #240]	; (8000eac <menu_vars+0x314>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	e164      	b.n	800108c <menu_vars+0x4f4>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000dc2:	78fa      	ldrb	r2, [r7, #3]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	1a9b      	subs	r3, r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4a37      	ldr	r2, [pc, #220]	; (8000eac <menu_vars+0x314>)
 8000dce:	4413      	add	r3, r2
 8000dd0:	3303      	adds	r3, #3
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	e15a      	b.n	800108c <menu_vars+0x4f4>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	e157      	b.n	800108c <menu_vars+0x4f4>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4a33      	ldr	r2, [pc, #204]	; (8000eb0 <menu_vars+0x318>)
 8000de2:	4413      	add	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	e151      	b.n	800108c <menu_vars+0x4f4>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <menu_vars+0x318>)
 8000dee:	4413      	add	r3, r2
 8000df0:	3301      	adds	r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	e14a      	b.n	800108c <menu_vars+0x4f4>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <menu_vars+0x318>)
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	e143      	b.n	800108c <menu_vars+0x4f4>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <menu_vars+0x318>)
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3303      	adds	r3, #3
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e13c      	b.n	800108c <menu_vars+0x4f4>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	011b      	lsls	r3, r3, #4
 8000e16:	4a26      	ldr	r2, [pc, #152]	; (8000eb0 <menu_vars+0x318>)
 8000e18:	4413      	add	r3, r2
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e135      	b.n	800108c <menu_vars+0x4f4>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <menu_vars+0x318>)
 8000e26:	4413      	add	r3, r2
 8000e28:	3305      	adds	r3, #5
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	e12e      	b.n	800108c <menu_vars+0x4f4>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	4a1f      	ldr	r2, [pc, #124]	; (8000eb0 <menu_vars+0x318>)
 8000e34:	4413      	add	r3, r2
 8000e36:	3306      	adds	r3, #6
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	e127      	b.n	800108c <menu_vars+0x4f4>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4a1b      	ldr	r2, [pc, #108]	; (8000eb0 <menu_vars+0x318>)
 8000e42:	4413      	add	r3, r2
 8000e44:	3307      	adds	r3, #7
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	e120      	b.n	800108c <menu_vars+0x4f4>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e4a:	78fb      	ldrb	r3, [r7, #3]
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	3308      	adds	r3, #8
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <menu_vars+0x318>)
 8000e52:	4413      	add	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	e119      	b.n	800108c <menu_vars+0x4f4>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	e116      	b.n	800108c <menu_vars+0x4f4>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <menu_vars+0x31c>)
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	e113      	b.n	800108c <menu_vars+0x4f4>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <menu_vars+0x320>)
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	e110      	b.n	800108c <menu_vars+0x4f4>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	4a11      	ldr	r2, [pc, #68]	; (8000eb4 <menu_vars+0x31c>)
 8000e6e:	4413      	add	r3, r2
 8000e70:	3302      	adds	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	e10a      	b.n	800108c <menu_vars+0x4f4>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	3310      	adds	r3, #16
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <menu_vars+0x31c>)
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3303      	adds	r3, #3
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	e103      	b.n	800108c <menu_vars+0x4f4>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	3320      	adds	r3, #32
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <menu_vars+0x31c>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	e0fc      	b.n	800108c <menu_vars+0x4f4>
 8000e92:	bf00      	nop
 8000e94:	200098d0 	.word	0x200098d0
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	200102f9 	.word	0x200102f9
 8000ea0:	0800ea78 	.word	0x0800ea78
 8000ea4:	2000ced0 	.word	0x2000ced0
 8000ea8:	2000d344 	.word	0x2000d344
 8000eac:	2000d27c 	.word	0x2000d27c
 8000eb0:	20008e14 	.word	0x20008e14
 8000eb4:	2000d314 	.word	0x2000d314
 8000eb8:	2000d315 	.word	0x2000d315
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	4a75      	ldr	r2, [pc, #468]	; (8001098 <menu_vars+0x500>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	e0e1      	b.n	800108c <menu_vars+0x4f4>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	4a72      	ldr	r2, [pc, #456]	; (8001098 <menu_vars+0x500>)
 8000ece:	4413      	add	r3, r2
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	e0da      	b.n	800108c <menu_vars+0x4f4>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000ed6:	78fb      	ldrb	r3, [r7, #3]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4a6f      	ldr	r2, [pc, #444]	; (8001098 <menu_vars+0x500>)
 8000edc:	4413      	add	r3, r2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	e0d3      	b.n	800108c <menu_vars+0x4f4>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4a6b      	ldr	r2, [pc, #428]	; (8001098 <menu_vars+0x500>)
 8000eea:	4413      	add	r3, r2
 8000eec:	3303      	adds	r3, #3
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e0cc      	b.n	800108c <menu_vars+0x4f4>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000ef2:	78fb      	ldrb	r3, [r7, #3]
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	4a68      	ldr	r2, [pc, #416]	; (8001098 <menu_vars+0x500>)
 8000ef8:	4413      	add	r3, r2
 8000efa:	3304      	adds	r3, #4
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	e0c5      	b.n	800108c <menu_vars+0x4f4>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4a64      	ldr	r2, [pc, #400]	; (8001098 <menu_vars+0x500>)
 8000f06:	4413      	add	r3, r2
 8000f08:	3307      	adds	r3, #7
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	e0be      	b.n	800108c <menu_vars+0x4f4>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4a61      	ldr	r2, [pc, #388]	; (8001098 <menu_vars+0x500>)
 8000f14:	4413      	add	r3, r2
 8000f16:	3306      	adds	r3, #6
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	e0b7      	b.n	800108c <menu_vars+0x4f4>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4a5d      	ldr	r2, [pc, #372]	; (8001098 <menu_vars+0x500>)
 8000f22:	4413      	add	r3, r2
 8000f24:	3305      	adds	r3, #5
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	e0b0      	b.n	800108c <menu_vars+0x4f4>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f2a:	78fb      	ldrb	r3, [r7, #3]
 8000f2c:	222c      	movs	r2, #44	; 0x2c
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	4a5a      	ldr	r2, [pc, #360]	; (800109c <menu_vars+0x504>)
 8000f34:	4413      	add	r3, r2
 8000f36:	3302      	adds	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	e0a7      	b.n	800108c <menu_vars+0x4f4>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	222c      	movs	r2, #44	; 0x2c
 8000f40:	fb02 f303 	mul.w	r3, r2, r3
 8000f44:	4a55      	ldr	r2, [pc, #340]	; (800109c <menu_vars+0x504>)
 8000f46:	4413      	add	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	e09f      	b.n	800108c <menu_vars+0x4f4>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	222c      	movs	r2, #44	; 0x2c
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4a51      	ldr	r2, [pc, #324]	; (800109c <menu_vars+0x504>)
 8000f56:	4413      	add	r3, r2
 8000f58:	3303      	adds	r3, #3
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	e096      	b.n	800108c <menu_vars+0x4f4>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	222c      	movs	r2, #44	; 0x2c
 8000f62:	fb02 f303 	mul.w	r3, r2, r3
 8000f66:	4a4d      	ldr	r2, [pc, #308]	; (800109c <menu_vars+0x504>)
 8000f68:	4413      	add	r3, r2
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	e08d      	b.n	800108c <menu_vars+0x4f4>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	222c      	movs	r2, #44	; 0x2c
 8000f74:	fb02 f303 	mul.w	r3, r2, r3
 8000f78:	4a48      	ldr	r2, [pc, #288]	; (800109c <menu_vars+0x504>)
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3305      	adds	r3, #5
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	e084      	b.n	800108c <menu_vars+0x4f4>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f82:	78fa      	ldrb	r2, [r7, #3]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4a44      	ldr	r2, [pc, #272]	; (80010a0 <menu_vars+0x508>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e07b      	b.n	800108c <menu_vars+0x4f4>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f94:	78fa      	ldrb	r2, [r7, #3]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4a40      	ldr	r2, [pc, #256]	; (80010a0 <menu_vars+0x508>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e071      	b.n	800108c <menu_vars+0x4f4>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fa8:	78fa      	ldrb	r2, [r7, #3]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	; (80010a0 <menu_vars+0x508>)
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	e067      	b.n	800108c <menu_vars+0x4f4>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4a36      	ldr	r2, [pc, #216]	; (80010a0 <menu_vars+0x508>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	3303      	adds	r3, #3
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	e05d      	b.n	800108c <menu_vars+0x4f4>
	case 44: 	menu_vars_var1=&sampler.start_MSB ;break;
 8000fd0:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <menu_vars+0x50c>)
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e05a      	b.n	800108c <menu_vars+0x4f4>
	case 45: 	menu_vars_var1=&sampler.start_LSB ;break;
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <menu_vars+0x510>)
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	e057      	b.n	800108c <menu_vars+0x4f4>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <menu_vars+0x514>)
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	e054      	b.n	800108c <menu_vars+0x4f4>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000fe2:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <menu_vars+0x518>)
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	e051      	b.n	800108c <menu_vars+0x4f4>
	case 48: 	menu_vars_var1=&sampler.offset ;break;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <menu_vars+0x51c>)
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	e04e      	b.n	800108c <menu_vars+0x4f4>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <menu_vars+0x520>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e045      	b.n	800108c <menu_vars+0x4f4>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <menu_vars+0x520>)
 800100c:	4413      	add	r3, r2
 800100e:	3301      	adds	r3, #1
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	e03b      	b.n	800108c <menu_vars+0x4f4>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <menu_vars+0x520>)
 8001020:	4413      	add	r3, r2
 8001022:	3302      	adds	r3, #2
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	e031      	b.n	800108c <menu_vars+0x4f4>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 8001028:	78fa      	ldrb	r2, [r7, #3]
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <menu_vars+0x520>)
 8001034:	4413      	add	r3, r2
 8001036:	3303      	adds	r3, #3
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	e027      	b.n	800108c <menu_vars+0x4f4>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 800103c:	78fb      	ldrb	r3, [r7, #3]
 800103e:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <menu_vars+0x524>)
 8001040:	4413      	add	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	e022      	b.n	800108c <menu_vars+0x4f4>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 8001046:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <menu_vars+0x528>)
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e01f      	b.n	800108c <menu_vars+0x4f4>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <menu_vars+0x52c>)
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	e01c      	b.n	800108c <menu_vars+0x4f4>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <menu_vars+0x530>)
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e019      	b.n	800108c <menu_vars+0x4f4>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <menu_vars+0x534>)
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	e016      	b.n	800108c <menu_vars+0x4f4>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <menu_vars+0x538>)
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e013      	b.n	800108c <menu_vars+0x4f4>
	case 59: 	menu_vars_var1=&sampler.sample_select  ;break;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <menu_vars+0x53c>)
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e010      	b.n	800108c <menu_vars+0x4f4>
	case 60: 	menu_vars_var1=&sampler.sample_save  ;break;
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <menu_vars+0x540>)
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e00d      	b.n	800108c <menu_vars+0x4f4>
	case 61: 	menu_vars_var1=&sampler.sample_save_enable  ;break;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <menu_vars+0x544>)
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e00a      	b.n	800108c <menu_vars+0x4f4>
	case 62:     menu_vars_var1= &note[var_index].slide_length    ; break;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	011b      	lsls	r3, r3, #4
 800107a:	3308      	adds	r3, #8
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <menu_vars+0x548>)
 800107e:	4413      	add	r3, r2
 8001080:	3301      	adds	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	e002      	b.n	800108c <menu_vars+0x4f4>


	default :		menu_vars_var1= NULL   ; break;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 800108c:	693b      	ldr	r3, [r7, #16]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20008eb4 	.word	0x20008eb4
 800109c:	2000d344 	.word	0x2000d344
 80010a0:	2000d178 	.word	0x2000d178
 80010a4:	20008ed4 	.word	0x20008ed4
 80010a8:	20008ed5 	.word	0x20008ed5
 80010ac:	20008ed6 	.word	0x20008ed6
 80010b0:	20008ed7 	.word	0x20008ed7
 80010b4:	20008edd 	.word	0x20008edd
 80010b8:	2000d1b4 	.word	0x2000d1b4
 80010bc:	20011714 	.word	0x20011714
 80010c0:	20008ed8 	.word	0x20008ed8
 80010c4:	20008ed9 	.word	0x20008ed9
 80010c8:	20008eda 	.word	0x20008eda
 80010cc:	20008edb 	.word	0x20008edb
 80010d0:	20008edc 	.word	0x20008edc
 80010d4:	20008ede 	.word	0x20008ede
 80010d8:	20008edf 	.word	0x20008edf
 80010dc:	20008ee4 	.word	0x20008ee4
 80010e0:	20008e14 	.word	0x20008e14

080010e4 <menu_parser>:





void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 80010ea:	4a6b      	ldr	r2, [pc, #428]	; (8001298 <menu_parser+0x1b4>)
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f4:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 80010f8:	4a68      	ldr	r2, [pc, #416]	; (800129c <menu_parser+0x1b8>)
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001100:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001108:	f640 536c 	movw	r3, #3436	; 0xd6c
 800110c:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800110e:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <menu_parser+0x1bc>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	8aba      	ldrh	r2, [r7, #20]
 8001114:	429a      	cmp	r2, r3
 8001116:	f0c0 80bb 	bcc.w	8001290 <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 800111a:	4b61      	ldr	r3, [pc, #388]	; (80012a0 <menu_parser+0x1bc>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b60      	ldr	r3, [pc, #384]	; (80012a4 <menu_parser+0x1c0>)
 8001122:	441a      	add	r2, r3
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	6810      	ldr	r0, [r2, #0]
 800112a:	6851      	ldr	r1, [r2, #4]
 800112c:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800112e:	2300      	movs	r3, #0
 8001130:	75fb      	strb	r3, [r7, #23]
 8001132:	e092      	b.n	800125a <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	4a5c      	ldr	r2, [pc, #368]	; (80012a8 <menu_parser+0x1c4>)
 8001138:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	6810      	ldr	r0, [r2, #0]
 8001140:	6851      	ldr	r1, [r2, #4]
 8001142:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001144:	1d39      	adds	r1, r7, #4
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2208      	movs	r2, #8
 800114c:	4618      	mov	r0, r3
 800114e:	f00c f8f1 	bl	800d334 <strncmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d17d      	bne.n	8001254 <menu_parser+0x170>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001158:	4b54      	ldr	r3, [pc, #336]	; (80012ac <menu_parser+0x1c8>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	2b6f      	cmp	r3, #111	; 0x6f
 800115e:	d909      	bls.n	8001174 <menu_parser+0x90>
 8001160:	4b52      	ldr	r3, [pc, #328]	; (80012ac <menu_parser+0x1c8>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	2b7f      	cmp	r3, #127	; 0x7f
 8001166:	d805      	bhi.n	8001174 <menu_parser+0x90>
 8001168:	4b50      	ldr	r3, [pc, #320]	; (80012ac <menu_parser+0x1c8>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	3310      	adds	r3, #16
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <menu_parser+0x1c8>)
 8001172:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 8001174:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <menu_parser+0x1c8>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	2bef      	cmp	r3, #239	; 0xef
 800117a:	d909      	bls.n	8001190 <menu_parser+0xac>
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <menu_parser+0x1c8>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	2bff      	cmp	r3, #255	; 0xff
 8001182:	d805      	bhi.n	8001190 <menu_parser+0xac>
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <menu_parser+0x1c8>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	3310      	adds	r3, #16
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b47      	ldr	r3, [pc, #284]	; (80012ac <menu_parser+0x1c8>)
 800118e:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 8001190:	4b46      	ldr	r3, [pc, #280]	; (80012ac <menu_parser+0x1c8>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 8001198:	d30a      	bcc.n	80011b0 <menu_parser+0xcc>
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <menu_parser+0x1c8>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011a2:	d205      	bcs.n	80011b0 <menu_parser+0xcc>
 80011a4:	4b41      	ldr	r3, [pc, #260]	; (80012ac <menu_parser+0x1c8>)
 80011a6:	881b      	ldrh	r3, [r3, #0]
 80011a8:	3310      	adds	r3, #16
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b3f      	ldr	r3, [pc, #252]	; (80012ac <menu_parser+0x1c8>)
 80011ae:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011b8:	d30a      	bcc.n	80011d0 <menu_parser+0xec>
 80011ba:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <menu_parser+0x1c8>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011c2:	d205      	bcs.n	80011d0 <menu_parser+0xec>
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <menu_parser+0x1c8>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3310      	adds	r3, #16
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b37      	ldr	r3, [pc, #220]	; (80012ac <menu_parser+0x1c8>)
 80011ce:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011d0:	4b36      	ldr	r3, [pc, #216]	; (80012ac <menu_parser+0x1c8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 80011d8:	d30a      	bcc.n	80011f0 <menu_parser+0x10c>
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <menu_parser+0x1c8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80011e2:	d205      	bcs.n	80011f0 <menu_parser+0x10c>
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <menu_parser+0x1c8>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	3310      	adds	r3, #16
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <menu_parser+0x1c8>)
 80011ee:	801a      	strh	r2, [r3, #0]

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	041a      	lsls	r2, r3, #16
 80011f4:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <menu_parser+0x1c8>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011fc:	18d1      	adds	r1, r2, r3
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <menu_parser+0x1cc>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <menu_parser+0x1d0>)
 8001206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <menu_parser+0x1cc>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	461a      	mov	r2, r3
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <menu_parser+0x1d4>)
 8001214:	18d0      	adds	r0, r2, r3
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <menu_parser+0x1bc>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	3b02      	subs	r3, #2
 800121c:	4a21      	ldr	r2, [pc, #132]	; (80012a4 <menu_parser+0x1c0>)
 800121e:	4413      	add	r3, r2
 8001220:	2202      	movs	r2, #2
 8001222:	4619      	mov	r1, r3
 8001224:	f00c f870 	bl	800d308 <memcpy>
        			    menu_title_count++;
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <menu_parser+0x1cc>)
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	3301      	adds	r3, #1
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <menu_parser+0x1cc>)
 8001232:	801a      	strh	r2, [r3, #0]
			    menu_counter++;
 8001234:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <menu_parser+0x1c8>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <menu_parser+0x1c8>)
 800123e:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <menu_parser+0x1d8>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <menu_parser+0x1bc>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	3308      	adds	r3, #8
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <menu_parser+0x1bc>)
 8001250:	801a      	strh	r2, [r3, #0]
    			    return;}
 8001252:	e01e      	b.n	8001292 <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	3301      	adds	r3, #1
 8001258:	75fb      	strb	r3, [r7, #23]
 800125a:	7dfb      	ldrb	r3, [r7, #23]
 800125c:	2b3f      	cmp	r3, #63	; 0x3f
 800125e:	f67f af69 	bls.w	8001134 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <menu_parser+0x1d8>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d905      	bls.n	8001276 <menu_parser+0x192>
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <menu_parser+0x1c8>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <menu_parser+0x1c8>)
 8001274:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <menu_parser+0x1d8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <menu_parser+0x1d8>)
 8001280:	701a      	strb	r2, [r3, #0]
	    string_search++;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <menu_parser+0x1bc>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <menu_parser+0x1bc>)
 800128c:	801a      	strh	r2, [r3, #0]
	    return;
 800128e:	e000      	b.n	8001292 <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 8001290:	bf00      	nop

    }
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0800d984 	.word	0x0800d984
 800129c:	0800d98c 	.word	0x0800d98c
 80012a0:	2000d6b4 	.word	0x2000d6b4
 80012a4:	0800dd04 	.word	0x0800dd04
 80012a8:	20000000 	.word	0x20000000
 80012ac:	2000d6b6 	.word	0x2000d6b6
 80012b0:	2000d6ba 	.word	0x2000d6ba
 80012b4:	2000d6bc 	.word	0x2000d6bc
 80012b8:	2000debc 	.word	0x2000debc
 80012bc:	2000d6b8 	.word	0x2000d6b8

080012c0 <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 80012ca:	2300      	movs	r3, #0
 80012cc:	75bb      	strb	r3, [r7, #22]
 80012ce:	e1b5      	b.n	800163c <patch_target_parse+0x37c>

			uint16_t* output_hold;
			uint16_t* output_hold2;


			uint8_t input_hold=patch[counter].input1;
 80012d0:	7dbb      	ldrb	r3, [r7, #22]
 80012d2:	4a97      	ldr	r2, [pc, #604]	; (8001530 <patch_target_parse+0x270>)
 80012d4:	212c      	movs	r1, #44	; 0x2c
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	4413      	add	r3, r2
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	727b      	strb	r3, [r7, #9]
			uint8_t input_hold2=patch[counter].input2;
 80012e0:	7dbb      	ldrb	r3, [r7, #22]
 80012e2:	4a93      	ldr	r2, [pc, #588]	; (8001530 <patch_target_parse+0x270>)
 80012e4:	212c      	movs	r1, #44	; 0x2c
 80012e6:	fb01 f303 	mul.w	r3, r1, r3
 80012ea:	4413      	add	r3, r2
 80012ec:	3303      	adds	r3, #3
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	723b      	strb	r3, [r7, #8]
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 80012f2:	7dbb      	ldrb	r3, [r7, #22]
 80012f4:	4a8e      	ldr	r2, [pc, #568]	; (8001530 <patch_target_parse+0x270>)
 80012f6:	212c      	movs	r1, #44	; 0x2c
 80012f8:	fb01 f303 	mul.w	r3, r1, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b3f      	cmp	r3, #63	; 0x3f
 8001302:	d907      	bls.n	8001314 <patch_target_parse+0x54>
 8001304:	7dbb      	ldrb	r3, [r7, #22]
 8001306:	4a8a      	ldr	r2, [pc, #552]	; (8001530 <patch_target_parse+0x270>)
 8001308:	212c      	movs	r1, #44	; 0x2c
 800130a:	fb01 f303 	mul.w	r3, r1, r3
 800130e:	4413      	add	r3, r2
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001314:	7a7b      	ldrb	r3, [r7, #9]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b03      	cmp	r3, #3
 800131c:	d840      	bhi.n	80013a0 <patch_target_parse+0xe0>
 800131e:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <patch_target_parse+0x64>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	08001335 	.word	0x08001335
 8001328:	0800134f 	.word	0x0800134f
 800132c:	0800136b 	.word	0x0800136b
 8001330:	08001387 	.word	0x08001387

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001334:	7a7b      	ldrb	r3, [r7, #9]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4613      	mov	r3, r2
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4a7b      	ldr	r2, [pc, #492]	; (8001534 <patch_target_parse+0x274>)
 8001346:	4413      	add	r3, r2
 8001348:	3306      	adds	r3, #6
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	e028      	b.n	80013a0 <patch_target_parse+0xe0>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 800134e:	7a7b      	ldrb	r3, [r7, #9]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4613      	mov	r3, r2
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	3318      	adds	r3, #24
 8001360:	4a74      	ldr	r2, [pc, #464]	; (8001534 <patch_target_parse+0x274>)
 8001362:	4413      	add	r3, r2
 8001364:	3302      	adds	r3, #2
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	e01a      	b.n	80013a0 <patch_target_parse+0xe0>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 800136a:	7a7b      	ldrb	r3, [r7, #9]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	4613      	mov	r3, r2
 8001374:	011b      	lsls	r3, r3, #4
 8001376:	4413      	add	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	3328      	adds	r3, #40	; 0x28
 800137c:	4a6d      	ldr	r2, [pc, #436]	; (8001534 <patch_target_parse+0x274>)
 800137e:	4413      	add	r3, r2
 8001380:	3306      	adds	r3, #6
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	e00c      	b.n	80013a0 <patch_target_parse+0xe0>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 8001386:	7a7b      	ldrb	r3, [r7, #9]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	4613      	mov	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4a68      	ldr	r2, [pc, #416]	; (8001538 <patch_target_parse+0x278>)
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	bf00      	nop
			}
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 80013a0:	7dbb      	ldrb	r3, [r7, #22]
 80013a2:	4a63      	ldr	r2, [pc, #396]	; (8001530 <patch_target_parse+0x270>)
 80013a4:	212c      	movs	r1, #44	; 0x2c
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	4413      	add	r3, r2
 80013ac:	3303      	adds	r3, #3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b3f      	cmp	r3, #63	; 0x3f
 80013b2:	d908      	bls.n	80013c6 <patch_target_parse+0x106>
 80013b4:	7dbb      	ldrb	r3, [r7, #22]
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <patch_target_parse+0x270>)
 80013b8:	212c      	movs	r1, #44	; 0x2c
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	3303      	adds	r3, #3
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]

			switch(input_hold2&3){     // lfo now , can add adsr later
 80013c6:	7a3b      	ldrb	r3, [r7, #8]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d841      	bhi.n	8001454 <patch_target_parse+0x194>
 80013d0:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <patch_target_parse+0x118>)
 80013d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	08001403 	.word	0x08001403
 80013e0:	0800141f 	.word	0x0800141f
 80013e4:	0800143b 	.word	0x0800143b

			case 0:   output_hold2=&LFO[input_hold2>>2].out[0];break;
 80013e8:	7a3b      	ldrb	r3, [r7, #8]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4613      	mov	r3, r2
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4a4e      	ldr	r2, [pc, #312]	; (8001534 <patch_target_parse+0x274>)
 80013fa:	4413      	add	r3, r2
 80013fc:	3306      	adds	r3, #6
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e028      	b.n	8001454 <patch_target_parse+0x194>
			case 1:   output_hold2=&LFO[input_hold2>>2].out_saw[0];break;
 8001402:	7a3b      	ldrb	r3, [r7, #8]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	461a      	mov	r2, r3
 800140a:	4613      	mov	r3, r2
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	3318      	adds	r3, #24
 8001414:	4a47      	ldr	r2, [pc, #284]	; (8001534 <patch_target_parse+0x274>)
 8001416:	4413      	add	r3, r2
 8001418:	3302      	adds	r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e01a      	b.n	8001454 <patch_target_parse+0x194>
			case 2:   output_hold2=&LFO[input_hold2>>2].out_tri[0];break;
 800141e:	7a3b      	ldrb	r3, [r7, #8]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4613      	mov	r3, r2
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	3328      	adds	r3, #40	; 0x28
 8001430:	4a40      	ldr	r2, [pc, #256]	; (8001534 <patch_target_parse+0x274>)
 8001432:	4413      	add	r3, r2
 8001434:	3306      	adds	r3, #6
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	e00c      	b.n	8001454 <patch_target_parse+0x194>
			//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
 800143a:	7a3b      	ldrb	r3, [r7, #8]
 800143c:	089b      	lsrs	r3, r3, #2
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <patch_target_parse+0x278>)
 800144c:	4413      	add	r3, r2
 800144e:	3304      	adds	r3, #4
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	bf00      	nop
			}

			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 8001454:	7dbb      	ldrb	r3, [r7, #22]
 8001456:	4a36      	ldr	r2, [pc, #216]	; (8001530 <patch_target_parse+0x270>)
 8001458:	212c      	movs	r1, #44	; 0x2c
 800145a:	fb01 f303 	mul.w	r3, r1, r3
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b29      	cmp	r3, #41	; 0x29
 8001464:	d101      	bne.n	800146a <patch_target_parse+0x1aa>
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <patch_target_parse+0x27c>)
 8001468:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 800146a:	7dbb      	ldrb	r3, [r7, #22]
 800146c:	4a30      	ldr	r2, [pc, #192]	; (8001530 <patch_target_parse+0x270>)
 800146e:	212c      	movs	r1, #44	; 0x2c
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b2a      	cmp	r3, #42	; 0x2a
 800147a:	d101      	bne.n	8001480 <patch_target_parse+0x1c0>
 800147c:	4b30      	ldr	r3, [pc, #192]	; (8001540 <patch_target_parse+0x280>)
 800147e:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	4a2b      	ldr	r2, [pc, #172]	; (8001530 <patch_target_parse+0x270>)
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b2b      	cmp	r3, #43	; 0x2b
 8001490:	d101      	bne.n	8001496 <patch_target_parse+0x1d6>
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <patch_target_parse+0x284>)
 8001494:	613b      	str	r3, [r7, #16]
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 8001496:	7dbb      	ldrb	r3, [r7, #22]
 8001498:	4a25      	ldr	r2, [pc, #148]	; (8001530 <patch_target_parse+0x270>)
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	3303      	adds	r3, #3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b29      	cmp	r3, #41	; 0x29
 80014a8:	d101      	bne.n	80014ae <patch_target_parse+0x1ee>
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <patch_target_parse+0x27c>)
 80014ac:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 80014ae:	7dbb      	ldrb	r3, [r7, #22]
 80014b0:	4a1f      	ldr	r2, [pc, #124]	; (8001530 <patch_target_parse+0x270>)
 80014b2:	212c      	movs	r1, #44	; 0x2c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	3303      	adds	r3, #3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b2a      	cmp	r3, #42	; 0x2a
 80014c0:	d101      	bne.n	80014c6 <patch_target_parse+0x206>
 80014c2:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <patch_target_parse+0x280>)
 80014c4:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==43) output_hold2=&adc_values[0];
 80014c6:	7dbb      	ldrb	r3, [r7, #22]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <patch_target_parse+0x270>)
 80014ca:	212c      	movs	r1, #44	; 0x2c
 80014cc:	fb01 f303 	mul.w	r3, r1, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	3303      	adds	r3, #3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b2b      	cmp	r3, #43	; 0x2b
 80014d8:	d101      	bne.n	80014de <patch_target_parse+0x21e>
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <patch_target_parse+0x284>)
 80014dc:	60fb      	str	r3, [r7, #12]



			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 80014de:	7dbb      	ldrb	r3, [r7, #22]
 80014e0:	4a13      	ldr	r2, [pc, #76]	; (8001530 <patch_target_parse+0x270>)
 80014e2:	212c      	movs	r1, #44	; 0x2c
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	3320      	adds	r3, #32
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	601a      	str	r2, [r3, #0]
			patch[counter].in2_ptr=output_hold2;
 80014f0:	7dbb      	ldrb	r3, [r7, #22]
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <patch_target_parse+0x270>)
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	3324      	adds	r3, #36	; 0x24
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]


			if (patch[counter].target) {  // test if above zero
 8001502:	7dbb      	ldrb	r3, [r7, #22]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <patch_target_parse+0x270>)
 8001506:	212c      	movs	r1, #44	; 0x2c
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	4413      	add	r3, r2
 800150e:	3301      	adds	r3, #1
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 808f 	beq.w	8001636 <patch_target_parse+0x376>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001518:	7dbb      	ldrb	r3, [r7, #22]
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <patch_target_parse+0x270>)
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3301      	adds	r3, #1
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 800152a:	7afb      	ldrb	r3, [r7, #11]
 800152c:	75fb      	strb	r3, [r7, #23]
 800152e:	e016      	b.n	800155e <patch_target_parse+0x29e>
 8001530:	2000d344 	.word	0x2000d344
 8001534:	2000ced0 	.word	0x2000ced0
 8001538:	2000d1b4 	.word	0x2000d1b4
 800153c:	20008e06 	.word	0x20008e06
 8001540:	20008e08 	.word	0x20008e08
 8001544:	20008e04 	.word	0x20008e04
					if (patch_skip_list[target_input]==1)  target_input++;
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	4a41      	ldr	r2, [pc, #260]	; (8001650 <patch_target_parse+0x390>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d102      	bne.n	8001558 <patch_target_parse+0x298>
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	3301      	adds	r3, #1
 8001556:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	3301      	adds	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b3f      	cmp	r3, #63	; 0x3f
 8001562:	d9f1      	bls.n	8001548 <patch_target_parse+0x288>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	2b3f      	cmp	r3, #63	; 0x3f
 8001568:	d901      	bls.n	800156e <patch_target_parse+0x2ae>
 800156a:	233f      	movs	r3, #63	; 0x3f
 800156c:	72fb      	strb	r3, [r7, #11]
				if (target_input!=35)  {     // make target index is not selected
 800156e:	7afb      	ldrb	r3, [r7, #11]
 8001570:	2b23      	cmp	r3, #35	; 0x23
 8001572:	d057      	beq.n	8001624 <patch_target_parse+0x364>
			patch[counter].target=target_input; // write back corrected value
 8001574:	7dbb      	ldrb	r3, [r7, #22]
 8001576:	4a37      	ldr	r2, [pc, #220]	; (8001654 <patch_target_parse+0x394>)
 8001578:	212c      	movs	r1, #44	; 0x2c
 800157a:	fb01 f303 	mul.w	r3, r1, r3
 800157e:	4413      	add	r3, r2
 8001580:	3301      	adds	r3, #1
 8001582:	7afa      	ldrb	r2, [r7, #11]
 8001584:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 8001586:	7dbb      	ldrb	r3, [r7, #22]
 8001588:	4a32      	ldr	r2, [pc, #200]	; (8001654 <patch_target_parse+0x394>)
 800158a:	212c      	movs	r1, #44	; 0x2c
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	4413      	add	r3, r2
 8001592:	3302      	adds	r3, #2
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	72bb      	strb	r3, [r7, #10]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <patch_target_parse+0x398>)
 800159c:	5cd3      	ldrb	r3, [r2, r3]
 800159e:	7aba      	ldrb	r2, [r7, #10]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d903      	bls.n	80015ac <patch_target_parse+0x2ec>
			{	target_index=menu_vars_index_limit[target_index]; }
 80015a4:	7abb      	ldrb	r3, [r7, #10]
 80015a6:	4a2c      	ldr	r2, [pc, #176]	; (8001658 <patch_target_parse+0x398>)
 80015a8:	5cd3      	ldrb	r3, [r2, r3]
 80015aa:	72bb      	strb	r3, [r7, #10]
			patch[counter].target_index=target_index;
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <patch_target_parse+0x394>)
 80015b0:	212c      	movs	r1, #44	; 0x2c
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	3302      	adds	r3, #2
 80015ba:	7aba      	ldrb	r2, [r7, #10]
 80015bc:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80015be:	7afb      	ldrb	r3, [r7, #11]
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <patch_target_parse+0x39c>)
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	7aba      	ldrb	r2, [r7, #10]
 80015c8:	4611      	mov	r1, r2
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fae4 	bl	8000b98 <menu_vars>
 80015d0:	6078      	str	r0, [r7, #4]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d02e      	beq.n	8001636 <patch_target_parse+0x376>
 80015d8:	7dbb      	ldrb	r3, [r7, #22]
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <patch_target_parse+0x394>)
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	331c      	adds	r3, #28
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <patch_target_parse+0x3a0>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4619      	mov	r1, r3
 80015f0:	7dbb      	ldrb	r3, [r7, #22]
 80015f2:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <patch_target_parse+0x3a4>)
 80015f4:	5c50      	ldrb	r0, [r2, r1]
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <patch_target_parse+0x394>)
 80015f8:	212c      	movs	r1, #44	; 0x2c
 80015fa:	fb01 f303 	mul.w	r3, r1, r3
 80015fe:	4413      	add	r3, r2
 8001600:	3329      	adds	r3, #41	; 0x29
 8001602:	4602      	mov	r2, r0
 8001604:	701a      	strb	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 8001606:	4b16      	ldr	r3, [pc, #88]	; (8001660 <patch_target_parse+0x3a0>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4619      	mov	r1, r3
 800160c:	7dbb      	ldrb	r3, [r7, #22]
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <patch_target_parse+0x3a8>)
 8001610:	5c50      	ldrb	r0, [r2, r1]
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <patch_target_parse+0x394>)
 8001614:	212c      	movs	r1, #44	; 0x2c
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	3328      	adds	r3, #40	; 0x28
 800161e:	4602      	mov	r2, r0
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	e008      	b.n	8001636 <patch_target_parse+0x376>
				}
				else patch[counter].target=0;  // write back 0 if failed
 8001624:	7dbb      	ldrb	r3, [r7, #22]
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <patch_target_parse+0x394>)
 8001628:	212c      	movs	r1, #44	; 0x2c
 800162a:	fb01 f303 	mul.w	r3, r1, r3
 800162e:	4413      	add	r3, r2
 8001630:	3301      	adds	r3, #1
 8001632:	2200      	movs	r2, #0
 8001634:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 8001636:	7dbb      	ldrb	r3, [r7, #22]
 8001638:	3301      	adds	r3, #1
 800163a:	75bb      	strb	r3, [r7, #22]
 800163c:	7dbb      	ldrb	r3, [r7, #22]
 800163e:	2b13      	cmp	r3, #19
 8001640:	f67f ae46 	bls.w	80012d0 <patch_target_parse+0x10>
			}
		}
	}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	0800eaf8 	.word	0x0800eaf8
 8001654:	2000d344 	.word	0x2000d344
 8001658:	0800ea78 	.word	0x0800ea78
 800165c:	20000000 	.word	0x20000000
 8001660:	200102f9 	.word	0x200102f9
 8001664:	200121cc 	.word	0x200121cc
 8001668:	0800eab8 	.word	0x0800eab8

0800166c <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 800166c:	b490      	push	{r4, r7}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 8001672:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <patch_target_replace+0x16c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	753b      	strb	r3, [r7, #20]
	    uint8_t counter;
	   uint8_t input_loop_position;
	   int32_t output_hold;
	   int32_t output_hold2;
	   uint8_t input_mix=0;
 800167c:	2300      	movs	r3, #0
 800167e:	74fb      	strb	r3, [r7, #19]

	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 8001680:	2300      	movs	r3, #0
 8001682:	75fb      	strb	r3, [r7, #23]
 8001684:	e09d      	b.n	80017c2 <patch_target_replace+0x156>



		    if (patch[counter].target) {         // check first for enable
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	4a54      	ldr	r2, [pc, #336]	; (80017dc <patch_target_replace+0x170>)
 800168a:	212c      	movs	r1, #44	; 0x2c
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3301      	adds	r3, #1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8090 	beq.w	80017bc <patch_target_replace+0x150>

			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	4a4f      	ldr	r2, [pc, #316]	; (80017dc <patch_target_replace+0x170>)
 80016a0:	212c      	movs	r1, #44	; 0x2c
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b28      	cmp	r3, #40	; 0x28
 80016ac:	d809      	bhi.n	80016c2 <patch_target_replace+0x56>
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	4a4a      	ldr	r2, [pc, #296]	; (80017dc <patch_target_replace+0x170>)
 80016b2:	212c      	movs	r1, #44	; 0x2c
 80016b4:	fb01 f303 	mul.w	r3, r1, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	3303      	adds	r3, #3
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b28      	cmp	r3, #40	; 0x28
 80016c0:	d902      	bls.n	80016c8 <patch_target_replace+0x5c>
 80016c2:	2300      	movs	r3, #0
 80016c4:	75bb      	strb	r3, [r7, #22]
 80016c6:	e001      	b.n	80016cc <patch_target_replace+0x60>
 80016c8:	7d3b      	ldrb	r3, [r7, #20]
 80016ca:	75bb      	strb	r3, [r7, #22]


				input_mix=patch[counter].in_mix;
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	4a43      	ldr	r2, [pc, #268]	; (80017dc <patch_target_replace+0x170>)
 80016d0:	212c      	movs	r1, #44	; 0x2c
 80016d2:	fb01 f303 	mul.w	r3, r1, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	3304      	adds	r3, #4
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	74fb      	strb	r3, [r7, #19]
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	4a3e      	ldr	r2, [pc, #248]	; (80017dc <patch_target_replace+0x170>)
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3320      	adds	r3, #32
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	7dbb      	ldrb	r3, [r7, #22]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4a38      	ldr	r2, [pc, #224]	; (80017dc <patch_target_replace+0x170>)
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3324      	adds	r3, #36	; 0x24
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	7dbb      	ldrb	r3, [r7, #22]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	60bb      	str	r3, [r7, #8]

				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	f1c3 0210 	rsb	r2, r3, #16
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	60fb      	str	r3, [r7, #12]
				output_hold2	=output_hold2*input_mix;
 8001720:	7cfa      	ldrb	r2, [r7, #19]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	fb02 f303 	mul.w	r3, r2, r3
 8001728:	60bb      	str	r3, [r7, #8]



				patch[counter].output[loop_position]	=((output_hold+output_hold2)>>4);
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	1119      	asrs	r1, r3, #4
 8001732:	7dfa      	ldrb	r2, [r7, #23]
 8001734:	7d3b      	ldrb	r3, [r7, #20]
 8001736:	b28c      	uxth	r4, r1
 8001738:	4928      	ldr	r1, [pc, #160]	; (80017dc <patch_target_replace+0x170>)
 800173a:	2016      	movs	r0, #22
 800173c:	fb00 f202 	mul.w	r2, r0, r2
 8001740:	4413      	add	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	4622      	mov	r2, r4
 8001748:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 800174a:	7dfb      	ldrb	r3, [r7, #23]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <patch_target_replace+0x170>)
 800174e:	212c      	movs	r1, #44	; 0x2c
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	331c      	adds	r3, #28
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	607b      	str	r3, [r7, #4]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 800175c:	7dfa      	ldrb	r2, [r7, #23]
 800175e:	7d3b      	ldrb	r3, [r7, #20]
 8001760:	491e      	ldr	r1, [pc, #120]	; (80017dc <patch_target_replace+0x170>)
 8001762:	2016      	movs	r0, #22
 8001764:	fb00 f202 	mul.w	r2, r0, r2
 8001768:	4413      	add	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	440b      	add	r3, r1
 800176e:	88db      	ldrh	r3, [r3, #6]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	807b      	strh	r3, [r7, #2]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	707b      	strb	r3, [r7, #1]

			    uint8_t  var_replaced =  lfo_out_temp >>patch[counter].divider;   // grab lfo out *    data to be modfied
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	7dfa      	ldrb	r2, [r7, #23]
 800177c:	4917      	ldr	r1, [pc, #92]	; (80017dc <patch_target_replace+0x170>)
 800177e:	202c      	movs	r0, #44	; 0x2c
 8001780:	fb00 f202 	mul.w	r2, r0, r2
 8001784:	440a      	add	r2, r1
 8001786:	3229      	adds	r2, #41	; 0x29
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	4113      	asrs	r3, r2
 800178c:	757b      	strb	r3, [r7, #21]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <patch_target_replace+0x170>)
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	3328      	adds	r3, #40	; 0x28
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	7d7a      	ldrb	r2, [r7, #21]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d908      	bls.n	80017b6 <patch_target_replace+0x14a>
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <patch_target_replace+0x170>)
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3328      	adds	r3, #40	; 0x28
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	757b      	strb	r3, [r7, #21]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7d7a      	ldrb	r2, [r7, #21]
 80017ba:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	3301      	adds	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
 80017c2:	7dfb      	ldrb	r3, [r7, #23]
 80017c4:	2b13      	cmp	r3, #19
 80017c6:	f67f af5e 	bls.w	8001686 <patch_target_replace+0x1a>
		    }
	    }
    }
 80017ca:	bf00      	nop
 80017cc:	bf00      	nop
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc90      	pop	{r4, r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000e2d0 	.word	0x2000e2d0
 80017dc:	2000d344 	.word	0x2000d344

080017e0 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d118      	bne.n	8001824 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 80017f2:	4b2e      	ldr	r3, [pc, #184]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80017fa:	4413      	add	r3, r2
 80017fc:	2236      	movs	r2, #54	; 0x36
 80017fe:	4619      	mov	r1, r3
 8001800:	482c      	ldr	r0, [pc, #176]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001802:	f009 fb5d 	bl	800aec0 <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800180e:	d206      	bcs.n	800181e <HAL_TIM_PeriodElapsedCallback+0x3e>
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	3336      	adds	r3, #54	; 0x36
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e002      	b.n	8001824 <HAL_TIM_PeriodElapsedCallback+0x44>
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001820:	2200      	movs	r2, #0
 8001822:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d137      	bne.n	800189e <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001838:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001844:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800184a:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	b29b      	uxth	r3, r3
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	3301      	adds	r3, #1
 8001856:	4a1b      	ldr	r2, [pc, #108]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001858:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xec>)
 800185e:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	b29b      	uxth	r3, r3
 8001866:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800186a:	4293      	cmp	r3, r2
 800186c:	d906      	bls.n	800187c <HAL_TIM_PeriodElapsedCallback+0x9c>
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001870:	2202      	movs	r2, #2
 8001872:	801a      	strh	r2, [r3, #0]
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	e006      	b.n	800188a <HAL_TIM_PeriodElapsedCallback+0xaa>
 800187c:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	b29b      	uxth	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001888:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001892:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40014400 	.word	0x40014400
 80018ac:	20011504 	.word	0x20011504
 80018b0:	20010504 	.word	0x20010504
 80018b4:	20012368 	.word	0x20012368
 80018b8:	40000400 	.word	0x40000400
 80018bc:	2000cecc 	.word	0x2000cecc
 80018c0:	2000a8d8 	.word	0x2000a8d8
 80018c4:	200098d4 	.word	0x200098d4
 80018c8:	2000a8da 	.word	0x2000a8da
 80018cc:	2000a8dc 	.word	0x2000a8dc
 80018d0:	20008e0e 	.word	0x20008e0e

080018d4 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <analoginputloopb+0xd0>)
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	b29b      	uxth	r3, r3
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <analoginputloopb+0xd4>)
 80018e4:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <analoginputloopb+0xd0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <analoginputloopb+0xd8>)
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <analoginputloopb+0xd0>)
 80018f2:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 80018f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80018fe:	337f      	adds	r3, #127	; 0x7f
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <analoginputloopb+0xdc>)
 8001906:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <analoginputloopb+0xe0>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001910:	337f      	adds	r3, #127	; 0x7f
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <analoginputloopb+0xe4>)
 8001918:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <analoginputloopb+0xdc>)
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <analoginputloopb+0xe8>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d908      	bls.n	8001938 <analoginputloopb+0x64>
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <analoginputloopb+0xec>)
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	b21a      	sxth	r2, r3
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <analoginputloopb+0xec>)
 8001936:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <analoginputloopb+0xdc>)
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <analoginputloopb+0xe8>)
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d208      	bcs.n	8001956 <analoginputloopb+0x82>
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <analoginputloopb+0xec>)
 8001946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194a:	b29b      	uxth	r3, r3
 800194c:	3301      	adds	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21a      	sxth	r2, r3
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <analoginputloopb+0xec>)
 8001954:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <analoginputloopb+0xe4>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	43db      	mvns	r3, r3
 800195c:	b29a      	uxth	r2, r3
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <analoginputloopb+0xd8>)
 8001960:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <analoginputloopb+0xec>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 800196c:	4293      	cmp	r3, r2
 800196e:	dd02      	ble.n	8001976 <analoginputloopb+0xa2>
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <analoginputloopb+0xec>)
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <analoginputloopb+0xec>)
 8001978:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	da03      	bge.n	8001988 <analoginputloopb+0xb4>
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <analoginputloopb+0xec>)
 8001982:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001986:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <analoginputloopb+0xdc>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <analoginputloopb+0xe8>)
 800198e:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <analoginputloopb+0xe4>)
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <analoginputloopb+0xf0>)
 8001996:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000c120 	.word	0x2000c120
 80019a8:	200098c8 	.word	0x200098c8
 80019ac:	2000c10a 	.word	0x2000c10a
 80019b0:	2000c102 	.word	0x2000c102
 80019b4:	40000800 	.word	0x40000800
 80019b8:	2000c106 	.word	0x2000c106
 80019bc:	2000c104 	.word	0x2000c104
 80019c0:	2000c10c 	.word	0x2000c10c
 80019c4:	2000c108 	.word	0x2000c108

080019c8 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80019cc:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <note_reset+0xc4>)
 80019ce:	22ff      	movs	r2, #255	; 0xff
 80019d0:	71da      	strb	r2, [r3, #7]
 80019d2:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <note_reset+0xc4>)
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	75da      	strb	r2, [r3, #23]
 80019d8:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <note_reset+0xc4>)
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80019e0:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <note_reset+0xc4>)
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <note_reset+0xc4>)
 80019ea:	22ff      	movs	r2, #255	; 0xff
 80019ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80019f0:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <note_reset+0xc4>)
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <note_reset+0xc4>)
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <note_reset+0xc4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	721a      	strb	r2, [r3, #8]
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <note_reset+0xc4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	761a      	strb	r2, [r3, #24]
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <note_reset+0xc4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <note_reset+0xc4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <note_reset+0xc4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	note[5].detune=0;note[6].detune=0;
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <note_reset+0xc4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <note_reset+0xc4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	filter[0].cutoff_1=0;filter[1].cutoff_1=0;filter[2].cutoff_1=0;filter[4].cutoff_1=0;
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <note_reset+0xc8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <note_reset+0xc8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	721a      	strb	r2, [r3, #8]
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <note_reset+0xc8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	741a      	strb	r2, [r3, #16]
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <note_reset+0xc8>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2020 	strb.w	r2, [r3, #32]
	filter[0].resonance=0;filter[1].resonance=0;filter[2].resonance=0;filter[3].resonance=0;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <note_reset+0xc8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	709a      	strb	r2, [r3, #2]
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <note_reset+0xc8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	729a      	strb	r2, [r3, #10]
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <note_reset+0xc8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	749a      	strb	r2, [r3, #18]
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <note_reset+0xc8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	769a      	strb	r2, [r3, #26]
	note[0].position=1;note[1].position=1;note[2].position=1;note[3].position=1;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <note_reset+0xc4>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	711a      	strb	r2, [r3, #4]
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <note_reset+0xc4>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	751a      	strb	r2, [r3, #20]
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <note_reset+0xc4>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a7a:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <note_reset+0xc4>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	20008e14 	.word	0x20008e14
 8001a90:	20008eb4 	.word	0x20008eb4

08001a94 <main_initial>:

void main_initial(void){
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	b0dd      	sub	sp, #372	; 0x174
 8001a98:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001a9a:	4ba7      	ldr	r3, [pc, #668]	; (8001d38 <main_initial+0x2a4>)
 8001a9c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154



	HAL_DMA_Init(&hdma_spi2_tx);
 8001aa0:	48a6      	ldr	r0, [pc, #664]	; (8001d3c <main_initial+0x2a8>)
 8001aa2:	f006 fcf7 	bl	8008494 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 8001aa6:	48a6      	ldr	r0, [pc, #664]	; (8001d40 <main_initial+0x2ac>)
 8001aa8:	f006 fcf4 	bl	8008494 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001aac:	48a5      	ldr	r0, [pc, #660]	; (8001d44 <main_initial+0x2b0>)
 8001aae:	f006 fcf1 	bl	8008494 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001ab2:	48a5      	ldr	r0, [pc, #660]	; (8001d48 <main_initial+0x2b4>)
 8001ab4:	f008 fe9c 	bl	800a7f0 <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001ab8:	48a4      	ldr	r0, [pc, #656]	; (8001d4c <main_initial+0x2b8>)
 8001aba:	f008 fe99 	bl	800a7f0 <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001abe:	48a4      	ldr	r0, [pc, #656]	; (8001d50 <main_initial+0x2bc>)
 8001ac0:	f009 fee8 	bl	800b894 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001ac4:	4ba3      	ldr	r3, [pc, #652]	; (8001d54 <main_initial+0x2c0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001aca:	48a3      	ldr	r0, [pc, #652]	; (8001d58 <main_initial+0x2c4>)
 8001acc:	f009 fe88 	bl	800b7e0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001ad0:	48a2      	ldr	r0, [pc, #648]	; (8001d5c <main_initial+0x2c8>)
 8001ad2:	f009 fe85 	bl	800b7e0 <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	489d      	ldr	r0, [pc, #628]	; (8001d50 <main_initial+0x2bc>)
 8001ada:	f00a f81f 	bl	800bb1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001ade:	2104      	movs	r1, #4
 8001ae0:	489b      	ldr	r0, [pc, #620]	; (8001d50 <main_initial+0x2bc>)
 8001ae2:	f00a f81b 	bl	800bb1c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aea:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001af0:	489b      	ldr	r0, [pc, #620]	; (8001d60 <main_initial+0x2cc>)
 8001af2:	f005 fb91 	bl	8007218 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001af6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001afa:	499a      	ldr	r1, [pc, #616]	; (8001d64 <main_initial+0x2d0>)
 8001afc:	4898      	ldr	r0, [pc, #608]	; (8001d60 <main_initial+0x2cc>)
 8001afe:	f005 fccb 	bl	8007498 <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 8001b02:	4899      	ldr	r0, [pc, #612]	; (8001d68 <main_initial+0x2d4>)
 8001b04:	f004 ff46 	bl	8006994 <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001b08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b0c:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001b10:	4b96      	ldr	r3, [pc, #600]	; (8001d6c <main_initial+0x2d8>)
 8001b12:	4634      	mov	r4, r6
 8001b14:	461d      	mov	r5, r3
 8001b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b1a:	682b      	ldr	r3, [r5, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	8022      	strh	r2, [r4, #0]
 8001b20:	3402      	adds	r4, #2
 8001b22:	0c1b      	lsrs	r3, r3, #16
 8001b24:	7023      	strb	r3, [r4, #0]
 8001b26:	f106 0313 	add.w	r3, r6, #19
 8001b2a:	22f1      	movs	r2, #241	; 0xf1
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00b fbf8 	bl	800d324 <memset>


	HAL_Delay(5);
 8001b34:	2005      	movs	r0, #5
 8001b36:	f005 fb07 	bl	8007148 <HAL_Delay>



		//uint16_t sample_size=sizeof(RAM);

		uint16_t sample_size=32678;
 8001b3a:	f647 73a6 	movw	r3, #32678	; 0x7fa6
 8001b3e:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152



		uint8_t* ram_ptr=&RAM[0];
 8001b42:	4b8b      	ldr	r3, [pc, #556]	; (8001d70 <main_initial+0x2dc>)
 8001b44:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 8001b48:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001b52:	2002      	movs	r0, #2
 8001b54:	f002 fda4 	bl	80046a0 <sample_save>
				send_spi1[0]=sampler_ram_clear_test(2);  // test written ok
 8001b58:	2002      	movs	r0, #2
 8001b5a:	f002 fd49 	bl	80045f0 <sampler_ram_clear_test>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b6a:	701a      	strb	r2, [r3, #0]



	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b6c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b70:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	223c      	movs	r2, #60	; 0x3c
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00b fbd0 	bl	800d324 <memset>
	uint16_t mem_count2=0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
	uint16_t mem_counter=0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 8001b90:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <main_initial+0x2e0>)
 8001b92:	2203      	movs	r2, #3
 8001b94:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 8001b96:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <main_initial+0x2e0>)
 8001b98:	22ff      	movs	r2, #255	; 0xff
 8001b9a:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 8001b9c:	4b75      	ldr	r3, [pc, #468]	; (8001d74 <main_initial+0x2e0>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 8001ba2:	4b74      	ldr	r3, [pc, #464]	; (8001d74 <main_initial+0x2e0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	4872      	ldr	r0, [pc, #456]	; (8001d78 <main_initial+0x2e4>)
 8001bae:	f007 f9d5 	bl	8008f5c <HAL_GPIO_WritePin>
 8001bb2:	f240 4304 	movw	r3, #1028	; 0x404
 8001bb6:	4a6f      	ldr	r2, [pc, #444]	; (8001d74 <main_initial+0x2e0>)
 8001bb8:	496e      	ldr	r1, [pc, #440]	; (8001d74 <main_initial+0x2e0>)
 8001bba:	4864      	ldr	r0, [pc, #400]	; (8001d4c <main_initial+0x2b8>)
 8001bbc:	f009 fa36 	bl	800b02c <HAL_SPI_TransmitReceive_DMA>
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	486c      	ldr	r0, [pc, #432]	; (8001d78 <main_initial+0x2e4>)
 8001bc6:	f007 f9c9 	bl	8008f5c <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	4b69      	ldr	r3, [pc, #420]	; (8001d7c <main_initial+0x2e8>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	2240      	movs	r2, #64	; 0x40
 8001bde:	21a0      	movs	r1, #160	; 0xa0
 8001be0:	4861      	ldr	r0, [pc, #388]	; (8001d68 <main_initial+0x2d4>)
 8001be2:	f007 fc2b 	bl	800943c <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001be6:	4a66      	ldr	r2, [pc, #408]	; (8001d80 <main_initial+0x2ec>)
 8001be8:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <main_initial+0x2e8>)
 8001bea:	4614      	mov	r4, r2
 8001bec:	461d      	mov	r5, r3
 8001bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001bfa:	c407      	stmia	r4!, {r0, r1, r2}
 8001bfc:	8023      	strh	r3, [r4, #0]
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001bfe:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <main_initial+0x2f0>)
 8001c00:	22a0      	movs	r2, #160	; 0xa0
 8001c02:	4619      	mov	r1, r3
 8001c04:	4860      	ldr	r0, [pc, #384]	; (8001d88 <main_initial+0x2f4>)
 8001c06:	f00b fb7f 	bl	800d308 <memcpy>
	    memcpy(&sampler,potSource+476,11 );
 8001c0a:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <main_initial+0x2f8>)
 8001c0c:	220b      	movs	r2, #11
 8001c0e:	4619      	mov	r1, r3
 8001c10:	485f      	ldr	r0, [pc, #380]	; (8001d90 <main_initial+0x2fc>)
 8001c12:	f00b fb79 	bl	800d308 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001c1c:	e07f      	b.n	8001d1e <main_initial+0x28a>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001c1e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c22:	4613      	mov	r3, r2
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4a5a      	ldr	r2, [pc, #360]	; (8001d94 <main_initial+0x300>)
 8001c2c:	1898      	adds	r0, r3, r2
 8001c2e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	332e      	adds	r3, #46	; 0x2e
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <main_initial+0x2e8>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	2206      	movs	r2, #6
 8001c42:	4619      	mov	r1, r3
 8001c44:	f00b fb60 	bl	800d308 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001c48:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	1a9b      	subs	r3, r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <main_initial+0x304>)
 8001c56:	1898      	adds	r0, r3, r2
 8001c58:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	336a      	adds	r3, #106	; 0x6a
 8001c64:	4a45      	ldr	r2, [pc, #276]	; (8001d7c <main_initial+0x2e8>)
 8001c66:	4413      	add	r3, r2
 8001c68:	2205      	movs	r2, #5
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f00b fb4c 	bl	800d308 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001c70:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001c74:	222c      	movs	r2, #44	; 0x2c
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <main_initial+0x308>)
 8001c7c:	1898      	adds	r0, r3, r2
 8001c7e:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001c8e:	4a3b      	ldr	r2, [pc, #236]	; (8001d7c <main_initial+0x2e8>)
 8001c90:	4413      	add	r3, r2
 8001c92:	2206      	movs	r2, #6
 8001c94:	4619      	mov	r1, r3
 8001c96:	f00b fb37 	bl	800d308 <memcpy>

			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001c9a:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <main_initial+0x30c>)
 8001ca8:	1898      	adds	r0, r3, r2
 8001caa:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cba:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <main_initial+0x2e8>)
 8001cbc:	4413      	add	r3, r2
 8001cbe:	2206      	movs	r2, #6
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f00b fb21 	bl	800d308 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001cc6:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4a34      	ldr	r2, [pc, #208]	; (8001da4 <main_initial+0x310>)
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cda:	0092      	lsls	r2, r2, #2
 8001cdc:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001ce0:	4926      	ldr	r1, [pc, #152]	; (8001d7c <main_initial+0x2e8>)
 8001ce2:	440a      	add	r2, r1
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	601a      	str	r2, [r3, #0]
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 8001ce8:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001cec:	330a      	adds	r3, #10
 8001cee:	222c      	movs	r2, #44	; 0x2c
 8001cf0:	fb02 f303 	mul.w	r3, r2, r3
 8001cf4:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <main_initial+0x308>)
 8001cf6:	1898      	adds	r0, r3, r2
 8001cf8:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <main_initial+0x2e8>)
 8001d0a:	4413      	add	r3, r2
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f00b fafa 	bl	800d308 <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001d14:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d18:	3301      	adds	r3, #1
 8001d1a:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001d1e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d22:	2b09      	cmp	r3, #9
 8001d24:	f67f af7b 	bls.w	8001c1e <main_initial+0x18a>


	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <main_initial+0x314>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e093      	b.n	8001e58 <main_initial+0x3c4>

		for 	(n=0;n<18;n++){					// this is ok
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <main_initial+0x318>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	e085      	b.n	8001e44 <main_initial+0x3b0>
 8001d38:	0800d2f0 	.word	0x0800d2f0
 8001d3c:	20012480 	.word	0x20012480
 8001d40:	200123c0 	.word	0x200123c0
 8001d44:	20012420 	.word	0x20012420
 8001d48:	20012368 	.word	0x20012368
 8001d4c:	20012310 	.word	0x20012310
 8001d50:	20012528 	.word	0x20012528
 8001d54:	40000400 	.word	0x40000400
 8001d58:	200124e0 	.word	0x200124e0
 8001d5c:	20012570 	.word	0x20012570
 8001d60:	20012214 	.word	0x20012214
 8001d64:	2000a8e4 	.word	0x2000a8e4
 8001d68:	200122bc 	.word	0x200122bc
 8001d6c:	0800d994 	.word	0x0800d994
 8001d70:	200001b0 	.word	0x200001b0
 8001d74:	200119a8 	.word	0x200119a8
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	20009660 	.word	0x20009660
 8001d80:	2000d314 	.word	0x2000d314
 8001d84:	200096fc 	.word	0x200096fc
 8001d88:	20008e14 	.word	0x20008e14
 8001d8c:	2000983c 	.word	0x2000983c
 8001d90:	20008ed4 	.word	0x20008ed4
 8001d94:	2000ced0 	.word	0x2000ced0
 8001d98:	2000d27c 	.word	0x2000d27c
 8001d9c:	2000d344 	.word	0x2000d344
 8001da0:	2000d178 	.word	0x2000d178
 8001da4:	2000d1b4 	.word	0x2000d1b4
 8001da8:	200098d0 	.word	0x200098d0
 8001dac:	200098ca 	.word	0x200098ca
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001db0:	4ba4      	ldr	r3, [pc, #656]	; (8002044 <main_initial+0x5b0>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d114      	bne.n	8001de2 <main_initial+0x34e>
 8001db8:	4ba3      	ldr	r3, [pc, #652]	; (8002048 <main_initial+0x5b4>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	4ba0      	ldr	r3, [pc, #640]	; (8002048 <main_initial+0x5b4>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	460b      	mov	r3, r1
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4b9b      	ldr	r3, [pc, #620]	; (8002044 <main_initial+0x5b0>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	440b      	add	r3, r1
 8001dda:	3a80      	subs	r2, #128	; 0x80
 8001ddc:	b2d1      	uxtb	r1, r2
 8001dde:	4a9b      	ldr	r2, [pc, #620]	; (800204c <main_initial+0x5b8>)
 8001de0:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001de2:	4b98      	ldr	r3, [pc, #608]	; (8002044 <main_initial+0x5b0>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d114      	bne.n	8001e14 <main_initial+0x380>
 8001dea:	4b97      	ldr	r3, [pc, #604]	; (8002048 <main_initial+0x5b4>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	3310      	adds	r3, #16
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b94      	ldr	r3, [pc, #592]	; (8002048 <main_initial+0x5b4>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4619      	mov	r1, r3
 8001e06:	4b8f      	ldr	r3, [pc, #572]	; (8002044 <main_initial+0x5b0>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	440b      	add	r3, r1
 8001e0c:	00d2      	lsls	r2, r2, #3
 8001e0e:	b2d1      	uxtb	r1, r2
 8001e10:	4a8e      	ldr	r2, [pc, #568]	; (800204c <main_initial+0x5b8>)
 8001e12:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001e14:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <main_initial+0x5b0>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d90d      	bls.n	8001e38 <main_initial+0x3a4>
 8001e1c:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <main_initial+0x5b4>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b85      	ldr	r3, [pc, #532]	; (8002044 <main_initial+0x5b0>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a86      	ldr	r2, [pc, #536]	; (800204c <main_initial+0x5b8>)
 8001e34:	21ff      	movs	r1, #255	; 0xff
 8001e36:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001e38:	4b82      	ldr	r3, [pc, #520]	; (8002044 <main_initial+0x5b0>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b80      	ldr	r3, [pc, #512]	; (8002044 <main_initial+0x5b0>)
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <main_initial+0x5b0>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	2b11      	cmp	r3, #17
 8001e4a:	d9b1      	bls.n	8001db0 <main_initial+0x31c>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <main_initial+0x5b4>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b7c      	ldr	r3, [pc, #496]	; (8002048 <main_initial+0x5b4>)
 8001e56:	801a      	strh	r2, [r3, #0]
 8001e58:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <main_initial+0x5b4>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e5e:	f67f af67 	bls.w	8001d30 <main_initial+0x29c>

		}

		}
	seq.pos=0;
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <main_initial+0x5bc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001e68:	2301      	movs	r3, #1
 8001e6a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001e6e:	4b76      	ldr	r3, [pc, #472]	; (8002048 <main_initial+0x5b4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	e01a      	b.n	8001eac <main_initial+0x418>
	  		tempo_hold=i;
 8001e76:	4b74      	ldr	r3, [pc, #464]	; (8002048 <main_initial+0x5b4>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001e7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4a73      	ldr	r2, [pc, #460]	; (8002054 <main_initial+0x5c0>)
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	  	tempo_lut[i]=tempo_hold;
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <main_initial+0x5b4>)
 8001e90:	881b      	ldrh	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <main_initial+0x5c4>)
 8001e9c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001ea0:	4b69      	ldr	r3, [pc, #420]	; (8002048 <main_initial+0x5b4>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b67      	ldr	r3, [pc, #412]	; (8002048 <main_initial+0x5b4>)
 8001eaa:	801a      	strh	r2, [r3, #0]
 8001eac:	4b66      	ldr	r3, [pc, #408]	; (8002048 <main_initial+0x5b4>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	2bff      	cmp	r3, #255	; 0xff
 8001eb2:	d9e0      	bls.n	8001e76 <main_initial+0x3e2>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001eb4:	4b69      	ldr	r3, [pc, #420]	; (800205c <main_initial+0x5c8>)
 8001eb6:	2218      	movs	r2, #24
 8001eb8:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <main_initial+0x5b4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	e00b      	b.n	8001eda <main_initial+0x446>
			spell[i]=67;
 8001ec2:	4b61      	ldr	r3, [pc, #388]	; (8002048 <main_initial+0x5b4>)
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b65      	ldr	r3, [pc, #404]	; (8002060 <main_initial+0x5cc>)
 8001eca:	2143      	movs	r1, #67	; 0x43
 8001ecc:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001ece:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <main_initial+0x5b4>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <main_initial+0x5b4>)
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <main_initial+0x5b4>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ee2:	d3ee      	bcc.n	8001ec2 <main_initial+0x42e>

		}

		gfx_clear();
 8001ee4:	f001 ff82 	bl	8003dec <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001eee:	e006      	b.n	8001efe <main_initial+0x46a>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001ef0:	f7ff f8f8 	bl	80010e4 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001ef4:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001efe:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f02:	f240 5213 	movw	r2, #1299	; 0x513
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d9f2      	bls.n	8001ef0 <main_initial+0x45c>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <main_initial+0x5b4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	801a      	strh	r2, [r3, #0]
 8001f10:	e005      	b.n	8001f1e <main_initial+0x48a>
 8001f12:	4b4d      	ldr	r3, [pc, #308]	; (8002048 <main_initial+0x5b4>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <main_initial+0x5b4>)
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <main_initial+0x5b4>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f26:	d3f4      	bcc.n	8001f12 <main_initial+0x47e>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <main_initial+0x5b4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	801a      	strh	r2, [r3, #0]
 8001f2e:	e005      	b.n	8001f3c <main_initial+0x4a8>
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <main_initial+0x5b4>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b43      	ldr	r3, [pc, #268]	; (8002048 <main_initial+0x5b4>)
 8001f3a:	801a      	strh	r2, [r3, #0]
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <main_initial+0x5b4>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f44:	d3f4      	bcc.n	8001f30 <main_initial+0x49c>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f4c:	e00c      	b.n	8001f68 <main_initial+0x4d4>
 8001f4e:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b42      	ldr	r3, [pc, #264]	; (8002064 <main_initial+0x5d0>)
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	5499      	strb	r1, [r3, r2]
 8001f5e:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f62:	3301      	adds	r3, #1
 8001f64:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f68:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d3ed      	bcc.n	8001f4e <main_initial+0x4ba>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001f72:	483c      	ldr	r0, [pc, #240]	; (8002064 <main_initial+0x5d0>)
 8001f74:	f7fe f930 	bl	80001d8 <strlen>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <main_initial+0x5d4>)
 8001f7e:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <main_initial+0x5d8>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b38      	ldr	r3, [pc, #224]	; (800206c <main_initial+0x5d8>)
 8001f8a:	801a      	strh	r2, [r3, #0]
			display_clear ();
 8001f8c:	f001 ff70 	bl	8003e70 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001f96:	e00e      	b.n	8001fb6 <main_initial+0x522>
 8001f98:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001f9c:	4a34      	ldr	r2, [pc, #208]	; (8002070 <main_initial+0x5dc>)
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <main_initial+0x5d0>)
 8001fa8:	2130      	movs	r1, #48	; 0x30
 8001faa:	54d1      	strb	r1, [r2, r3]
 8001fac:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <main_initial+0x5d8>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3ea      	bcc.n	8001f98 <main_initial+0x504>
			note_reset();
 8001fc2:	f7ff fd01 	bl	80019c8 <note_reset>


			uint8_t find_set=0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			uint8_t var_hold=0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8001fd8:	e025      	b.n	8002026 <main_initial+0x592>
			   var_hold=menu_vars_limiter[pars_counter];
 8001fda:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8001fde:	4a25      	ldr	r2, [pc, #148]	; (8002074 <main_initial+0x5e0>)
 8001fe0:	5cd3      	ldrb	r3, [r2, r3]
 8001fe2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
			    find_set=0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			   while ( var_hold >>= 1) {
 8001fec:	e004      	b.n	8001ff8 <main_initial+0x564>
			       find_set++;
 8001fee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
			   while ( var_hold >>= 1) {
 8001ff8:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8002002:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f1      	bne.n	8001fee <main_initial+0x55a>
			    }

			    LFO_vars_divider[pars_counter]= 7-find_set;    // high set bit , use it to shift left from 255
 800200a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800200e:	f897 215b 	ldrb.w	r2, [r7, #347]	; 0x15b
 8002012:	f1c2 0207 	rsb	r2, r2, #7
 8002016:	b2d1      	uxtb	r1, r2
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <main_initial+0x5e4>)
 800201a:	54d1      	strb	r1, [r2, r3]
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 800201c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8002020:	3301      	adds	r3, #1
 8002022:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
 8002026:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800202a:	2b3f      	cmp	r3, #63	; 0x3f
 800202c:	d9d5      	bls.n	8001fda <main_initial+0x546>
			}

			menuSelect=0;
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <main_initial+0x5e8>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <main_initial+0x5ec>)
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 800203a:	bf00      	nop
 800203c:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8002040:	46bd      	mov	sp, r7
 8002042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002044:	200098ca 	.word	0x200098ca
 8002048:	200098d0 	.word	0x200098d0
 800204c:	2000c634 	.word	0x2000c634
 8002050:	2000d314 	.word	0x2000d314
 8002054:	00209d9c 	.word	0x00209d9c
 8002058:	2000c230 	.word	0x2000c230
 800205c:	200093f4 	.word	0x200093f4
 8002060:	20008cc0 	.word	0x20008cc0
 8002064:	20008f94 	.word	0x20008f94
 8002068:	2000e2ca 	.word	0x2000e2ca
 800206c:	2000d6ba 	.word	0x2000d6ba
 8002070:	2000d6bc 	.word	0x2000d6bc
 8002074:	0800eab8 	.word	0x0800eab8
 8002078:	200121cc 	.word	0x200121cc
 800207c:	200098c8 	.word	0x200098c8
 8002080:	200098c9 	.word	0x200098c9

08002084 <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 800208a:	2300      	movs	r3, #0
 800208c:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 800208e:	2300      	movs	r3, #0
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	e02b      	b.n	80020ec <patch_lists+0x68>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	4a1a      	ldr	r2, [pc, #104]	; (8002100 <patch_lists+0x7c>)
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d11d      	bne.n	80020e6 <patch_lists+0x62>
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <patch_lists+0x7c>)
 80020ae:	212c      	movs	r1, #44	; 0x2c
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	4413      	add	r3, r2
 80020b6:	3302      	adds	r3, #2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	79bb      	ldrb	r3, [r7, #6]
 80020c2:	3230      	adds	r2, #48	; 0x30
 80020c4:	b2d1      	uxtb	r1, r2
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <patch_lists+0x80>)
 80020c8:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 80020ca:	79fa      	ldrb	r2, [r7, #7]
 80020cc:	79bb      	ldrb	r3, [r7, #6]
 80020ce:	490c      	ldr	r1, [pc, #48]	; (8002100 <patch_lists+0x7c>)
 80020d0:	202c      	movs	r0, #44	; 0x2c
 80020d2:	fb00 f202 	mul.w	r2, r0, r2
 80020d6:	440a      	add	r2, r1
 80020d8:	3201      	adds	r2, #1
 80020da:	7811      	ldrb	r1, [r2, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <patch_lists+0x84>)
 80020de:	54d1      	strb	r1, [r2, r3]
	list_counter2++;
 80020e0:	79bb      	ldrb	r3, [r7, #6]
 80020e2:	3301      	adds	r3, #1
 80020e4:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3301      	adds	r3, #1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b13      	cmp	r3, #19
 80020f0:	d9d0      	bls.n	8002094 <patch_lists+0x10>
	}

    }

}
 80020f2:	bf00      	nop
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	2000d344 	.word	0x2000d344
 8002104:	20011508 	.word	0x20011508
 8002108:	20011778 	.word	0x20011778
 800210c:	00000000 	.word	0x00000000

08002110 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b0f6      	sub	sp, #472	; 0x1d8
 8002114:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;

	time_proc=0;
 8002116:	4bcc      	ldr	r3, [pc, #816]	; (8002448 <sampling+0x338>)
 8002118:	2200      	movs	r2, #0
 800211a:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 800211c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002120:	2228      	movs	r2, #40	; 0x28
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f00b f8fd 	bl	800d324 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 800212a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800212e:	2228      	movs	r2, #40	; 0x28
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f00b f8f6 	bl	800d324 <memset>
uint16_t tuned_list[10];
int32_t sample_adc=0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
int32_t ram_temp=0;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 8002144:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002148:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800214c:	4618      	mov	r0, r3
 800214e:	2350      	movs	r3, #80	; 0x50
 8002150:	461a      	mov	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	f00b f8e6 	bl	800d324 <memset>
 8002158:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800215c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002160:	2201      	movs	r2, #1
 8002162:	801a      	strh	r2, [r3, #0]
 8002164:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002168:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800216c:	2201      	movs	r2, #1
 800216e:	805a      	strh	r2, [r3, #2]
 8002170:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002174:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002178:	2201      	movs	r2, #1
 800217a:	809a      	strh	r2, [r3, #4]
 800217c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002180:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002184:	2201      	movs	r2, #1
 8002186:	80da      	strh	r2, [r3, #6]
 8002188:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800218c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002190:	2201      	movs	r2, #1
 8002192:	811a      	strh	r2, [r3, #8]
 8002194:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002198:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800219c:	2201      	movs	r2, #1
 800219e:	815a      	strh	r2, [r3, #10]
 80021a0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021a4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021a8:	2201      	movs	r2, #1
 80021aa:	819a      	strh	r2, [r3, #12]
 80021ac:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021b0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021b4:	2201      	movs	r2, #1
 80021b6:	81da      	strh	r2, [r3, #14]
 80021b8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021c0:	2201      	movs	r2, #1
 80021c2:	821a      	strh	r2, [r3, #16]
 80021c4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021c8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021cc:	2201      	movs	r2, #1
 80021ce:	825a      	strh	r2, [r3, #18]
 80021d0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021d4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021d8:	2201      	movs	r2, #1
 80021da:	829a      	strh	r2, [r3, #20]
 80021dc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021e4:	2201      	movs	r2, #1
 80021e6:	82da      	strh	r2, [r3, #22]
 80021e8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021f0:	2201      	movs	r2, #1
 80021f2:	831a      	strh	r2, [r3, #24]
 80021f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80021f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80021fc:	2201      	movs	r2, #1
 80021fe:	835a      	strh	r2, [r3, #26]
 8002200:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002204:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002208:	2201      	movs	r2, #1
 800220a:	839a      	strh	r2, [r3, #28]
 800220c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002210:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002214:	2201      	movs	r2, #1
 8002216:	83da      	strh	r2, [r3, #30]
 8002218:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800221c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002220:	2201      	movs	r2, #1
 8002222:	841a      	strh	r2, [r3, #32]
 8002224:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002228:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800222c:	2201      	movs	r2, #1
 800222e:	845a      	strh	r2, [r3, #34]	; 0x22
 8002230:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002234:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002238:	2201      	movs	r2, #1
 800223a:	849a      	strh	r2, [r3, #36]	; 0x24
 800223c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002240:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002244:	2201      	movs	r2, #1
 8002246:	84da      	strh	r2, [r3, #38]	; 0x26
 8002248:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800224c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002250:	2201      	movs	r2, #1
 8002252:	851a      	strh	r2, [r3, #40]	; 0x28
 8002254:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002258:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800225c:	2201      	movs	r2, #1
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002260:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002264:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002268:	2201      	movs	r2, #1
 800226a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800226c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002270:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002274:	2201      	movs	r2, #1
 8002276:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002278:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800227c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002280:	2201      	movs	r2, #1
 8002282:	861a      	strh	r2, [r3, #48]	; 0x30
 8002284:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002288:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800228c:	2201      	movs	r2, #1
 800228e:	865a      	strh	r2, [r3, #50]	; 0x32
 8002290:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002294:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002298:	2201      	movs	r2, #1
 800229a:	869a      	strh	r2, [r3, #52]	; 0x34
 800229c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022a4:	2201      	movs	r2, #1
 80022a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80022a8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022b0:	2201      	movs	r2, #1
 80022b2:	871a      	strh	r2, [r3, #56]	; 0x38
 80022b4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022bc:	2201      	movs	r2, #1
 80022be:	875a      	strh	r2, [r3, #58]	; 0x3a
 80022c0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022c8:	2201      	movs	r2, #1
 80022ca:	879a      	strh	r2, [r3, #60]	; 0x3c
 80022cc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022d4:	2201      	movs	r2, #1
 80022d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022d8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022e0:	2201      	movs	r2, #1
 80022e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80022e6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022ea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022ee:	2201      	movs	r2, #1
 80022f0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80022f4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80022f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80022fc:	2201      	movs	r2, #1
 80022fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002302:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002306:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800230a:	2201      	movs	r2, #1
 800230c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002310:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002314:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002318:	2201      	movs	r2, #1
 800231a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
uint8_t flash_result;
int32_t sample_input=0;
 800231e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002322:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
tempo_lut[131]=1023;   // force to an even count on samples
 800232a:	4b48      	ldr	r3, [pc, #288]	; (800244c <sampling+0x33c>)
 800232c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002330:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
int32_t sample_loop_input=0;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 800233a:	4b45      	ldr	r3, [pc, #276]	; (8002450 <sampling+0x340>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d104      	bne.n	800234c <sampling+0x23c>
 8002342:	4b44      	ldr	r3, [pc, #272]	; (8002454 <sampling+0x344>)
 8002344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e002      	b.n	8002352 <sampling+0x242>
 800234c:	4b41      	ldr	r3, [pc, #260]	; (8002454 <sampling+0x344>)
 800234e:	2200      	movs	r2, #0
 8002350:	801a      	strh	r2, [r3, #0]

bank_write=0;
 8002352:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <sampling+0x340>)
 8002354:	2200      	movs	r2, #0
 8002356:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 8002358:	2210      	movs	r2, #16
 800235a:	493f      	ldr	r1, [pc, #252]	; (8002458 <sampling+0x348>)
 800235c:	483f      	ldr	r0, [pc, #252]	; (800245c <sampling+0x34c>)
 800235e:	f00a ffd3 	bl	800d308 <memcpy>
memcpy(notes_joined+16,seq.notes2,16);
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <sampling+0x350>)
 8002364:	2210      	movs	r2, #16
 8002366:	493f      	ldr	r1, [pc, #252]	; (8002464 <sampling+0x354>)
 8002368:	4618      	mov	r0, r3
 800236a:	f00a ffcd 	bl	800d308 <memcpy>
sample_pointB=sample_pointD;
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <sampling+0x344>)
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <sampling+0x358>)
 8002374:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002376:	2300      	movs	r3, #0
 8002378:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4

LCD_Info_notes();
 800237c:	f002 f8e4 	bl	8004548 <LCD_Info_notes>



uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <sampling+0x35c>)
 8002382:	785b      	ldrb	r3, [r3, #1]
 8002384:	461a      	mov	r2, r3
 8002386:	4b31      	ldr	r3, [pc, #196]	; (800244c <sampling+0x33c>)
 8002388:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800238c:	f8a7 31c2 	strh.w	r3, [r7, #450]	; 0x1c2
//if (seq.tempo<40)  tempo_mod=511;  // syncs to main loop
uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s



tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002390:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 8002394:	2b00      	cmp	r3, #0
 8002396:	da00      	bge.n	800239a <sampling+0x28a>
 8002398:	331f      	adds	r3, #31
 800239a:	115b      	asrs	r3, r3, #5
 800239c:	461a      	mov	r2, r3
 800239e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <sampling+0x360>)
 80023b0:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80023b4:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <sampling+0x360>)
 80023b6:	ed93 7a00 	vldr	s14, [r3]
 80023ba:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002474 <sampling+0x364>
 80023be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <sampling+0x360>)
 80023c4:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80023c8:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 80023cc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d110      	bne.n	80023f6 <sampling+0x2e6>
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <sampling+0x368>)
 80023d6:	8c1b      	ldrh	r3, [r3, #32]
 80023d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023dc:	d80b      	bhi.n	80023f6 <sampling+0x2e6>
 80023de:	4b23      	ldr	r3, [pc, #140]	; (800246c <sampling+0x35c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <sampling+0x2e6>
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <sampling+0x36c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	4b23      	ldr	r3, [pc, #140]	; (8002480 <sampling+0x370>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 80023f6:	4b23      	ldr	r3, [pc, #140]	; (8002484 <sampling+0x374>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	801a      	strh	r2, [r3, #0]
	sampler.trigger_position=0;     // reset sample start here
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <sampling+0x368>)
 80023fe:	2200      	movs	r2, #0
 8002400:	819a      	strh	r2, [r3, #12]




uint8_t looper_dat[8]={1,3,7,15};
 8002402:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002406:	f5a3 7296 	sub.w	r2, r3, #300	; 0x12c
 800240a:	491f      	ldr	r1, [pc, #124]	; (8002488 <sampling+0x378>)
 800240c:	4613      	mov	r3, r2
 800240e:	c903      	ldmia	r1, {r0, r1}
 8002410:	6018      	str	r0, [r3, #0]
 8002412:	3304      	adds	r3, #4
 8002414:	7019      	strb	r1, [r3, #0]
 8002416:	1d53      	adds	r3, r2, #5
 8002418:	2200      	movs	r2, #0
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <sampling+0x37c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f8b7 21c2 	ldrh.w	r2, [r7, #450]	; 0x1c2
 8002426:	429a      	cmp	r2, r3
 8002428:	d05e      	beq.n	80024e8 <sampling+0x3d8>

		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 800242a:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <sampling+0x380>)
 8002430:	fb92 f3f3 	sdiv	r3, r2, r3
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243c:	edc7 7a6f 	vstr	s15, [r7, #444]	; 0x1bc


						for (i=0;i<256;i++){								// 128 is 1 note
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <sampling+0x384>)
 8002442:	2200      	movs	r2, #0
 8002444:	801a      	strh	r2, [r3, #0]
 8002446:	e04b      	b.n	80024e0 <sampling+0x3d0>
 8002448:	2000cecc 	.word	0x2000cecc
 800244c:	2000c230 	.word	0x2000c230
 8002450:	20008e0e 	.word	0x20008e0e
 8002454:	2000a8de 	.word	0x2000a8de
 8002458:	2000d316 	.word	0x2000d316
 800245c:	200102d8 	.word	0x200102d8
 8002460:	200102e8 	.word	0x200102e8
 8002464:	2000d327 	.word	0x2000d327
 8002468:	200098ce 	.word	0x200098ce
 800246c:	2000d314 	.word	0x2000d314
 8002470:	2000cabc 	.word	0x2000cabc
 8002474:	42a00000 	.word	0x42a00000
 8002478:	20008ed4 	.word	0x20008ed4
 800247c:	2000c0e4 	.word	0x2000c0e4
 8002480:	2000c110 	.word	0x2000c110
 8002484:	2001178c 	.word	0x2001178c
 8002488:	0800da98 	.word	0x0800da98
 800248c:	2000c630 	.word	0x2000c630
 8002490:	006487ec 	.word	0x006487ec
 8002494:	200098d0 	.word	0x200098d0
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 8002498:	4ba1      	ldr	r3, [pc, #644]	; (8002720 <sampling+0x610>)
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a6:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 80024aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ae:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80024b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ba:	ee17 3a90 	vmov	r3, s15
 80024be:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	lfo_tempo_lut[i]= lfo_tempo_hold;
 80024c2:	4b97      	ldr	r3, [pc, #604]	; (8002720 <sampling+0x610>)
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80024cc:	b299      	uxth	r1, r3
 80024ce:	4b95      	ldr	r3, [pc, #596]	; (8002724 <sampling+0x614>)
 80024d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 80024d4:	4b92      	ldr	r3, [pc, #584]	; (8002720 <sampling+0x610>)
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	4b90      	ldr	r3, [pc, #576]	; (8002720 <sampling+0x610>)
 80024de:	801a      	strh	r2, [r3, #0]
 80024e0:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <sampling+0x610>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2bff      	cmp	r3, #255	; 0xff
 80024e6:	d9d7      	bls.n	8002498 <sampling+0x388>

}}
tempo_mod_hold=tempo_mod;   // for lfo
 80024e8:	4a8f      	ldr	r2, [pc, #572]	; (8002728 <sampling+0x618>)
 80024ea:	f8b7 31c2 	ldrh.w	r3, [r7, #450]	; 0x1c2
 80024ee:	8013      	strh	r3, [r2, #0]

uint32_t  note_toggler[17]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  //records note position on 0-512   using a bit
 80024f0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80024f8:	4618      	mov	r0, r3
 80024fa:	2344      	movs	r3, #68	; 0x44
 80024fc:	461a      	mov	r2, r3
 80024fe:	2100      	movs	r1, #0
 8002500:	f00a ff10 	bl	800d324 <memset>
for (i=0;i<16;i++) {  note_toggler[i]=0; }
 8002504:	4b86      	ldr	r3, [pc, #536]	; (8002720 <sampling+0x610>)
 8002506:	2200      	movs	r2, #0
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	e00f      	b.n	800252c <sampling+0x41c>
 800250c:	4b84      	ldr	r3, [pc, #528]	; (8002720 <sampling+0x610>)
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002516:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800251a:	2200      	movs	r2, #0
 800251c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002520:	4b7f      	ldr	r3, [pc, #508]	; (8002720 <sampling+0x610>)
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	3301      	adds	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b7d      	ldr	r3, [pc, #500]	; (8002720 <sampling+0x610>)
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	4b7c      	ldr	r3, [pc, #496]	; (8002720 <sampling+0x610>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	2b0f      	cmp	r3, #15
 8002532:	d9eb      	bls.n	800250c <sampling+0x3fc>
	//potSource[150]=(freq_point[0])*100; //0-2


patch_lists();
 8002534:	f7ff fda6 	bl	8002084 <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 8002538:	2300      	movs	r3, #0
 800253a:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 800253e:	e0c2      	b.n	80026c6 <sampling+0x5b6>


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 8002540:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 8002544:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8002548:	4978      	ldr	r1, [pc, #480]	; (800272c <sampling+0x61c>)
 800254a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002554:	443b      	add	r3, r7
 8002556:	f843 2c8c 	str.w	r2, [r3, #-140]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 800255a:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 800255e:	4a74      	ldr	r2, [pc, #464]	; (8002730 <sampling+0x620>)
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	4413      	add	r3, r2
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <sampling+0x470>
 800256a:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 800256e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002572:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002576:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800257a:	3114      	adds	r1, #20
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002580:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8002584:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <sampling+0x620>)
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d10d      	bne.n	80025ac <sampling+0x49c>
 8002590:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8002594:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 8002598:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4419      	add	r1, r3
 80025a0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80025a4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 80025ac:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 80025b0:	4a5f      	ldr	r2, [pc, #380]	; (8002730 <sampling+0x620>)
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	4413      	add	r3, r2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d10d      	bne.n	80025d8 <sampling+0x4c8>
 80025bc:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 80025c0:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 80025c4:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4419      	add	r1, r3
 80025cc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80025d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];}   // sample_input
 80025d8:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 80025dc:	4a54      	ldr	r2, [pc, #336]	; (8002730 <sampling+0x620>)
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d10e      	bne.n	8002606 <sampling+0x4f6>
 80025e8:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 80025ec:	3306      	adds	r3, #6
 80025ee:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 80025f2:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4419      	add	r1, r3
 80025fa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80025fe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;}  // sampleinput
 8002606:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 800260a:	4a49      	ldr	r2, [pc, #292]	; (8002730 <sampling+0x620>)
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4413      	add	r3, r2
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b04      	cmp	r3, #4
 8002614:	d109      	bne.n	800262a <sampling+0x51a>
 8002616:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 800261a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800261e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002622:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 800262a:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 800262e:	4a40      	ldr	r2, [pc, #256]	; (8002730 <sampling+0x620>)
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b05      	cmp	r3, #5
 8002638:	d109      	bne.n	800264e <sampling+0x53e>
 800263a:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 800263e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002642:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002646:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800264a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // non muted RAM , just loop
 800264e:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8002652:	4a37      	ldr	r2, [pc, #220]	; (8002730 <sampling+0x620>)
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4413      	add	r3, r2
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d109      	bne.n	8002672 <sampling+0x562>
 800265e:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 8002662:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002666:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800266a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800266e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==7) osc_pointers[pars_counter]=&ram_temp ;   // trigger 0-16
 8002672:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 8002676:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <sampling+0x620>)
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b07      	cmp	r3, #7
 8002680:	d109      	bne.n	8002696 <sampling+0x586>
 8002682:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 8002686:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800268a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800268e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>7) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 8002696:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 800269a:	4a25      	ldr	r2, [pc, #148]	; (8002730 <sampling+0x620>)
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	d90a      	bls.n	80026bc <sampling+0x5ac>
 80026a6:	f897 21d3 	ldrb.w	r2, [r7, #467]	; 0x1d3
 80026aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80026ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80026b2:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80026b6:	3114      	adds	r1, #20
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<4;pars_counter++)	{   // fill up pointers and reload vars
 80026bc:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 80026c0:	3301      	adds	r3, #1
 80026c2:	f887 31d3 	strb.w	r3, [r7, #467]	; 0x1d3
 80026c6:	f897 31d3 	ldrb.w	r3, [r7, #467]	; 0x1d3
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	f67f af38 	bls.w	8002540 <sampling+0x430>


 }

note_holdA=0;
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <sampling+0x624>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 80026d6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80026da:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80026de:	2200      	movs	r2, #0
 80026e0:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 80026e2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80026e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <sampling+0x628>)
 80026ec:	461c      	mov	r4, r3
 80026ee:	4615      	mov	r5, r2
 80026f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f4:	682b      	ldr	r3, [r5, #0]
 80026f6:	7023      	strb	r3, [r4, #0]
	if ((ADSR[0].attack_data>1999)  &&  (ADSR[0].attack_data<2500)	)					{ADSR[0].attack_data=ADSR[0].attack_data+ADSR[0].sustain_data	;	ADSR[0].buffer_temp=2500-ADSR[0].attack_data; } //500-0;
	if (ADSR[0].attack_data>3000)   																			{ADSR[0].buffer_temp=1; ADSR[0].attack_data=4000; }     // THE END

adsr_lut[i]= ADSR[0].buffer_temp*0.001;
}*/
isr_change=0;
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <sampling+0x62c>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <sampling+0x630>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	b29b      	uxth	r3, r3
 8002706:	3301      	adds	r3, #1
 8002708:	2201      	movs	r2, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
///////////////////////////////////////////////////////////////
uint8_t note_plain;


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002716:	4b02      	ldr	r3, [pc, #8]	; (8002720 <sampling+0x610>)
 8002718:	2200      	movs	r2, #0
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e262      	b.n	8002be4 <sampling+0xad4>
 800271e:	bf00      	nop
 8002720:	200098d0 	.word	0x200098d0
 8002724:	2000c430 	.word	0x2000c430
 8002728:	2000c630 	.word	0x2000c630
 800272c:	2000c0e8 	.word	0x2000c0e8
 8002730:	20008e14 	.word	0x20008e14
 8002734:	2000c0e6 	.word	0x2000c0e6
 8002738:	0800daa0 	.word	0x0800daa0
 800273c:	200098c6 	.word	0x200098c6
 8002740:	20008e04 	.word	0x20008e04

	i_total=i+sample_pointB;
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <sampling+0x6c0>)
 8002746:	881a      	ldrh	r2, [r3, #0]
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <sampling+0x6c4>)
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	4413      	add	r3, r2
 800274e:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
	sampling_position=i>>6;   //   0-8 steps
 8002752:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <sampling+0x6c0>)
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	b29b      	uxth	r3, r3
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <sampling+0x6c8>)
 800275e:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <sampling+0x6c8>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3307      	adds	r3, #7
 8002766:	b2db      	uxtb	r3, r3
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <sampling+0x6cc>)
 8002770:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 8002772:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <sampling+0x6d0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <sampling+0x6d0>)
 800277c:	4413      	add	r3, r2
 800277e:	789b      	ldrb	r3, [r3, #2]
 8002780:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
potValues[i&255]=potSource[i&255]>>4; //just to update values
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <sampling+0x6c0>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <sampling+0x6d4>)
 800278c:	5cd2      	ldrb	r2, [r2, r3]
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <sampling+0x6c0>)
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	0912      	lsrs	r2, r2, #4
 8002796:	b2d1      	uxtb	r1, r2
 8002798:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <sampling+0x6d8>)
 800279a:	54d1      	strb	r1, [r2, r3]

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <sampling+0x6dc>)
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	f8b7 21c2 	ldrh.w	r2, [r7, #450]	; 0x1c2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d827      	bhi.n	80027f8 <sampling+0x6e8>
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <sampling+0x6e0>)
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	3301      	adds	r3, #1
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <sampling+0x6e0>)
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <sampling+0x6dc>)
 80027bc:	2200      	movs	r2, #0
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <sampling+0x6e0>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	3301      	adds	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <sampling+0x6e4>)
 80027ca:	801a      	strh	r2, [r3, #0]
 80027cc:	e01a      	b.n	8002804 <sampling+0x6f4>
 80027ce:	bf00      	nop
 80027d0:	200098d0 	.word	0x200098d0
 80027d4:	200098ce 	.word	0x200098ce
 80027d8:	2000e2d0 	.word	0x2000e2d0
 80027dc:	2000e2d1 	.word	0x2000e2d1
 80027e0:	2000d314 	.word	0x2000d314
 80027e4:	20009660 	.word	0x20009660
 80027e8:	200093f8 	.word	0x200093f8
 80027ec:	2000c110 	.word	0x2000c110
 80027f0:	2000c0e4 	.word	0x2000c0e4
 80027f4:	200098c6 	.word	0x200098c6
 80027f8:	4b95      	ldr	r3, [pc, #596]	; (8002a50 <sampling+0x940>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	4b93      	ldr	r3, [pc, #588]	; (8002a50 <sampling+0x940>)
 8002802:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002804:	2300      	movs	r3, #0
 8002806:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 800280a:	4b92      	ldr	r3, [pc, #584]	; (8002a54 <sampling+0x944>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	091b      	lsrs	r3, r3, #4
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b91      	ldr	r3, [pc, #580]	; (8002a58 <sampling+0x948>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	429a      	cmp	r2, r3
 800281a:	d009      	beq.n	8002830 <sampling+0x720>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 800281c:	4b8d      	ldr	r3, [pc, #564]	; (8002a54 <sampling+0x944>)
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	b29b      	uxth	r3, r3
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <sampling+0x948>)
 8002828:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 800282a:	2301      	movs	r3, #1
 800282c:	f8a7 31d4 	strh.w	r3, [r7, #468]	; 0x1d4
}

	//if ((next_isr&7)==0+(sampler.offset&7))	note[3].position=1;  // for sample     run always


	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 8002830:	f8b7 31d4 	ldrh.w	r3, [r7, #468]	; 0x1d4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 81c5 	beq.w	8002bc4 <sampling+0xab4>
	{
		serial_tosend=1;
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <sampling+0x94c>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 8002840:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <sampling+0x950>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b86      	ldr	r3, [pc, #536]	; (8002a64 <sampling+0x954>)
 800284a:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 800284c:	4b82      	ldr	r3, [pc, #520]	; (8002a58 <sampling+0x948>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	b2da      	uxtb	r2, r3
 8002856:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800285a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800285e:	701a      	strb	r2, [r3, #0]
	//	loop_temp1[3]=adc_values[0]>>2;




		seq.loop[0]=(note[0].timeshift+(seq.pos&note[0].slide_length))&31;
 8002860:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <sampling+0x958>)
 8002862:	799a      	ldrb	r2, [r3, #6]
 8002864:	4b7c      	ldr	r3, [pc, #496]	; (8002a58 <sampling+0x948>)
 8002866:	7819      	ldrb	r1, [r3, #0]
 8002868:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <sampling+0x958>)
 800286a:	7a5b      	ldrb	r3, [r3, #9]
 800286c:	400b      	ands	r3, r1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4413      	add	r3, r2
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b77      	ldr	r3, [pc, #476]	; (8002a58 <sampling+0x948>)
 800287c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+(seq.pos&note[1].slide_length))&31;
 8002880:	4b79      	ldr	r3, [pc, #484]	; (8002a68 <sampling+0x958>)
 8002882:	7d9a      	ldrb	r2, [r3, #22]
 8002884:	4b74      	ldr	r3, [pc, #464]	; (8002a58 <sampling+0x948>)
 8002886:	7819      	ldrb	r1, [r3, #0]
 8002888:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <sampling+0x958>)
 800288a:	7e5b      	ldrb	r3, [r3, #25]
 800288c:	400b      	ands	r3, r1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4413      	add	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4b6f      	ldr	r3, [pc, #444]	; (8002a58 <sampling+0x948>)
 800289c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+(seq.pos&note[2].slide_length))&31; // this is really handy with sync to notes
 80028a0:	4b71      	ldr	r3, [pc, #452]	; (8002a68 <sampling+0x958>)
 80028a2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80028a6:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <sampling+0x948>)
 80028a8:	7819      	ldrb	r1, [r3, #0]
 80028aa:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <sampling+0x958>)
 80028ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80028b0:	400b      	ands	r3, r1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <sampling+0x948>)
 80028c0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+(seq.pos&note[3].slide_length))&31;
 80028c4:	4b68      	ldr	r3, [pc, #416]	; (8002a68 <sampling+0x958>)
 80028c6:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <sampling+0x948>)
 80028cc:	7819      	ldrb	r1, [r3, #0]
 80028ce:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <sampling+0x958>)
 80028d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028d4:	400b      	ands	r3, r1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4413      	add	r3, r2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <sampling+0x948>)
 80028e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27



			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 80028e8:	4b5b      	ldr	r3, [pc, #364]	; (8002a58 <sampling+0x948>)
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b5e      	ldr	r3, [pc, #376]	; (8002a6c <sampling+0x95c>)
 80028f2:	5c9a      	ldrb	r2, [r3, r2]
 80028f4:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <sampling+0x958>)
 80028f6:	795b      	ldrb	r3, [r3, #5]
 80028f8:	4413      	add	r3, r2
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b5a      	ldr	r3, [pc, #360]	; (8002a68 <sampling+0x958>)
 80028fe:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 8002900:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <sampling+0x948>)
 8002902:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002906:	461a      	mov	r2, r3
 8002908:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <sampling+0x95c>)
 800290a:	5c9a      	ldrb	r2, [r3, r2]
 800290c:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <sampling+0x958>)
 800290e:	7d5b      	ldrb	r3, [r3, #21]
 8002910:	4413      	add	r3, r2
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b54      	ldr	r3, [pc, #336]	; (8002a68 <sampling+0x958>)
 8002916:	749a      	strb	r2, [r3, #18]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <sampling+0x948>)
 800291a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800291e:	461a      	mov	r2, r3
 8002920:	4b52      	ldr	r3, [pc, #328]	; (8002a6c <sampling+0x95c>)
 8002922:	5c9a      	ldrb	r2, [r3, r2]
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <sampling+0x958>)
 8002926:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800292a:	4413      	add	r3, r2
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b4e      	ldr	r3, [pc, #312]	; (8002a68 <sampling+0x958>)
 8002930:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 8002934:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <sampling+0x948>)
 8002936:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800293a:	461a      	mov	r2, r3
 800293c:	4b4b      	ldr	r3, [pc, #300]	; (8002a6c <sampling+0x95c>)
 800293e:	5c9a      	ldrb	r2, [r3, r2]
 8002940:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <sampling+0x958>)
 8002942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002946:	4413      	add	r3, r2
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <sampling+0x958>)
 800294c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		// --------------------- sampler
		uint8_t pos_divide=15;
 8002950:	230f      	movs	r3, #15
 8002952:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002956:	4b46      	ldr	r3, [pc, #280]	; (8002a70 <sampling+0x960>)
 8002958:	7a1b      	ldrb	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <sampling+0x85c>
 800295e:	4b44      	ldr	r3, [pc, #272]	; (8002a70 <sampling+0x960>)
 8002960:	7a1b      	ldrb	r3, [r3, #8]
 8002962:	461a      	mov	r2, r3
 8002964:	230f      	movs	r3, #15
 8002966:	4113      	asrs	r3, r2
 8002968:	f887 31d2 	strb.w	r3, [r7, #466]	; 0x1d2

		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <sampling+0x960>)
 800296e:	791b      	ldrb	r3, [r3, #4]
 8002970:	4619      	mov	r1, r3
 8002972:	4b39      	ldr	r3, [pc, #228]	; (8002a58 <sampling+0x948>)
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 800297a:	4013      	ands	r3, r2
 800297c:	b2db      	uxtb	r3, r3
 800297e:	3301      	adds	r3, #1
 8002980:	4299      	cmp	r1, r3
 8002982:	d102      	bne.n	800298a <sampling+0x87a>
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <sampling+0x960>)
 8002986:	2201      	movs	r2, #1
 8002988:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <sampling+0x960>)
 800298c:	795b      	ldrb	r3, [r3, #5]
 800298e:	4619      	mov	r1, r3
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <sampling+0x948>)
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 8002998:	4013      	ands	r3, r2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	4299      	cmp	r1, r3
 80029a0:	d102      	bne.n	80029a8 <sampling+0x898>
 80029a2:	4b33      	ldr	r3, [pc, #204]	; (8002a70 <sampling+0x960>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80029a8:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <sampling+0x960>)
 80029aa:	799b      	ldrb	r3, [r3, #6]
 80029ac:	4619      	mov	r1, r3
 80029ae:	4b2a      	ldr	r3, [pc, #168]	; (8002a58 <sampling+0x948>)
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 80029b6:	4013      	ands	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	4299      	cmp	r1, r3
 80029be:	d102      	bne.n	80029c6 <sampling+0x8b6>
 80029c0:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <sampling+0x960>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	819a      	strh	r2, [r3, #12]
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 80029c6:	4b2a      	ldr	r3, [pc, #168]	; (8002a70 <sampling+0x960>)
 80029c8:	79db      	ldrb	r3, [r3, #7]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <sampling+0x948>)
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	f897 31d2 	ldrb.w	r3, [r7, #466]	; 0x1d2
 80029d4:	4013      	ands	r3, r2
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	3301      	adds	r3, #1
 80029da:	4299      	cmp	r1, r3
 80029dc:	d102      	bne.n	80029e4 <sampling+0x8d4>
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <sampling+0x960>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	819a      	strh	r2, [r3, #12]
		if(sampler.trigger_position) note[3].position=sampling_position+1;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <sampling+0x960>)
 80029e6:	899b      	ldrh	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <sampling+0x8ea>
 80029ec:	4b21      	ldr	r3, [pc, #132]	; (8002a74 <sampling+0x964>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <sampling+0x958>)
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		patch_target_replace();
 80029fa:	f7fe fe37 	bl	800166c <patch_target_replace>
		uint8_t detune_temp=0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <sampling+0x968>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	801a      	strh	r2, [r3, #0]
		uint8_t note_number;
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 8002a10:	e0d3      	b.n	8002bba <sampling+0xaaa>

			if  (note[mask_i].osc<3)  { if (seq.loop[mask_i]==0)  {note[mask_i].position=0;   zero_cross[mask_i]=0;} else  note[mask_i].position=sampling_position+1;    }
 8002a12:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <sampling+0x958>)
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d83a      	bhi.n	8002a98 <sampling+0x988>
 8002a22:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <sampling+0x948>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d126      	bne.n	8002a80 <sampling+0x970>
 8002a32:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002a36:	4a0c      	ldr	r2, [pc, #48]	; (8002a68 <sampling+0x958>)
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002a46:	4a0d      	ldr	r2, [pc, #52]	; (8002a7c <sampling+0x96c>)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	54d1      	strb	r1, [r2, r3]
 8002a4c:	e024      	b.n	8002a98 <sampling+0x988>
 8002a4e:	bf00      	nop
 8002a50:	2000c110 	.word	0x2000c110
 8002a54:	2000c0e4 	.word	0x2000c0e4
 8002a58:	2000d314 	.word	0x2000d314
 8002a5c:	200104fd 	.word	0x200104fd
 8002a60:	200098d0 	.word	0x200098d0
 8002a64:	2001178c 	.word	0x2001178c
 8002a68:	20008e14 	.word	0x20008e14
 8002a6c:	200102d8 	.word	0x200102d8
 8002a70:	20008ed4 	.word	0x20008ed4
 8002a74:	2000e2d0 	.word	0x2000e2d0
 8002a78:	2000a8e0 	.word	0x2000a8e0
 8002a7c:	20012210 	.word	0x20012210
 8002a80:	4b2e      	ldr	r3, [pc, #184]	; (8002b3c <sampling+0xa2c>)
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002a88:	3201      	adds	r2, #1
 8002a8a:	b2d1      	uxtb	r1, r2
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <sampling+0xa30>)
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	460a      	mov	r2, r1
 8002a96:	701a      	strb	r2, [r3, #0]


			// disable note on lowest , optional

		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002a98:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <sampling+0xa30>)
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002aaa:	4925      	ldr	r1, [pc, #148]	; (8002b40 <sampling+0xa30>)
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	440b      	add	r3, r1
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1

	//if	   (detune_temp>=30) detune_temp=30;
	//note[mask_i].tuned=(sample_Noteadd[MajorNote[detune_temp]]);   // put unit tune here

		        if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002aba:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8002abe:	2b3c      	cmp	r3, #60	; 0x3c
 8002ac0:	d902      	bls.n	8002ac8 <sampling+0x9b8>
 8002ac2:	233c      	movs	r3, #60	; 0x3c
 8002ac4:	f887 31d1 	strb.w	r3, [r7, #465]	; 0x1d1
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 8002ac8:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8002acc:	2b1e      	cmp	r3, #30
 8002ace:	d907      	bls.n	8002ae0 <sampling+0x9d0>
 8002ad0:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8002ad4:	3b1f      	subs	r3, #31
 8002ad6:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <sampling+0xa34>)
 8002ad8:	5cd3      	ldrb	r3, [r2, r3]
 8002ada:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
 8002ade:	e005      	b.n	8002aec <sampling+0x9dc>
	else note_number=MajorNote[detune_temp];
 8002ae0:	f897 31d1 	ldrb.w	r3, [r7, #465]	; 0x1d1
 8002ae4:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <sampling+0xa38>)
 8002ae6:	5cd3      	ldrb	r3, [r2, r3]
 8002ae8:	f887 31d0 	strb.w	r3, [r7, #464]	; 0x1d0
		    note[mask_i].tuned=sample_Noteadd[note_number];
 8002aec:	f897 21d0 	ldrb.w	r2, [r7, #464]	; 0x1d0
 8002af0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002af4:	4915      	ldr	r1, [pc, #84]	; (8002b4c <sampling+0xa3c>)
 8002af6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002afa:	4a11      	ldr	r2, [pc, #68]	; (8002b40 <sampling+0xa30>)
 8002afc:	011b      	lsls	r3, r3, #4
 8002afe:	4413      	add	r3, r2
 8002b00:	330e      	adds	r3, #14
 8002b02:	460a      	mov	r2, r1
 8002b04:	801a      	strh	r2, [r3, #0]
	if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 8002b06:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <sampling+0xa30>)
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	4413      	add	r3, r2
 8002b10:	3307      	adds	r3, #7
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01f      	beq.n	8002b58 <sampling+0xa48>
 8002b18:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002b1c:	4a08      	ldr	r2, [pc, #32]	; (8002b40 <sampling+0xa30>)
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d017      	beq.n	8002b58 <sampling+0xa48>
 8002b28:	f897 21d0 	ldrb.w	r2, [r7, #464]	; 0x1d0
 8002b2c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002b30:	330f      	adds	r3, #15
 8002b32:	4907      	ldr	r1, [pc, #28]	; (8002b50 <sampling+0xa40>)
 8002b34:	5c89      	ldrb	r1, [r1, r2]
 8002b36:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <sampling+0xa44>)
 8002b38:	54d1      	strb	r1, [r2, r3]
 8002b3a:	e013      	b.n	8002b64 <sampling+0xa54>
 8002b3c:	2000e2d0 	.word	0x2000e2d0
 8002b40:	20008e14 	.word	0x20008e14
 8002b44:	0800ef98 	.word	0x0800ef98
 8002b48:	0800ef78 	.word	0x0800ef78
 8002b4c:	0800efb8 	.word	0x0800efb8
 8002b50:	0800ef38 	.word	0x0800ef38
 8002b54:	20011714 	.word	0x20011714
 8002b58:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002b5c:	330f      	adds	r3, #15
 8002b5e:	4aaa      	ldr	r2, [pc, #680]	; (8002e08 <sampling+0xcf8>)
 8002b60:	215f      	movs	r1, #95	; 0x5f
 8002b62:	54d1      	strb	r1, [r2, r3]
	//note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here

		float tune_temp=note[mask_i].tuned;
 8002b64:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002b68:	4aa8      	ldr	r2, [pc, #672]	; (8002e0c <sampling+0xcfc>)
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	330e      	adds	r3, #14
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7a:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002b7e:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 8002b82:	f7fd fdbf 	bl	8000704 <__aeabi_f2d>
 8002b86:	a39e      	add	r3, pc, #632	; (adr r3, 8002e00 <sampling+0xcf0>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f7fd fb2c 	bl	80001e8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	f897 41d7 	ldrb.w	r4, [r7, #471]	; 0x1d7
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7fd fe0a 	bl	80007b4 <__aeabi_d2uiz>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	b299      	uxth	r1, r3
 8002ba4:	4a99      	ldr	r2, [pc, #612]	; (8002e0c <sampling+0xcfc>)
 8002ba6:	0123      	lsls	r3, r4, #4
 8002ba8:	4413      	add	r3, r2
 8002baa:	330e      	adds	r3, #14
 8002bac:	460a      	mov	r2, r1
 8002bae:	801a      	strh	r2, [r3, #0]
		for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 8002bb0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
 8002bba:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	f67f af27 	bls.w	8002a12 <sampling+0x902>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002bc4:	4b92      	ldr	r3, [pc, #584]	; (8002e10 <sampling+0xd00>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d103      	bne.n	8002bd8 <sampling+0xac8>
	{
	    LFO_square_one_pulse();
 8002bd0:	f002 f894 	bl	8004cfc <LFO_square_one_pulse>

		LFO_source_synced();
 8002bd4:	f002 f920 	bl	8004e18 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002bd8:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <sampling+0xd00>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	4b8b      	ldr	r3, [pc, #556]	; (8002e10 <sampling+0xd00>)
 8002be2:	801a      	strh	r2, [r3, #0]
 8002be4:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <sampling+0xd00>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bec:	f4ff adaa 	bcc.w	8002744 <sampling+0x634>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;


memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002bf0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002bf4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002bf8:	4a86      	ldr	r2, [pc, #536]	; (8002e14 <sampling+0xd04>)
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	2350      	movs	r3, #80	; 0x50
 8002c00:	461a      	mov	r2, r3
 8002c02:	f00a fb81 	bl	800d308 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002c06:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <sampling+0xcfc>)
 8002c08:	89da      	ldrh	r2, [r3, #14]
 8002c0a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c12:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002c14:	4b7d      	ldr	r3, [pc, #500]	; (8002e0c <sampling+0xcfc>)
 8002c16:	8bda      	ldrh	r2, [r3, #30]
 8002c18:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c1c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c20:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002c22:	4b7a      	ldr	r3, [pc, #488]	; (8002e0c <sampling+0xcfc>)
 8002c24:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002c26:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <sampling+0xcfc>)
 8002c34:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002c36:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002c3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002c3e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42


uint32_t*  sine_ptr_temp[5];
	sampler.start=(sampler.start_MSB<<8)+sampler.start_LSB;
 8002c42:	4b75      	ldr	r3, [pc, #468]	; (8002e18 <sampling+0xd08>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <sampling+0xd08>)
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <sampling+0xd08>)
 8002c58:	829a      	strh	r2, [r3, #20]
	sampler.end=(sampler.end_MSB<<8)+sampler.end_LSB;
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <sampling+0xd08>)
 8002c5c:	789b      	ldrb	r3, [r3, #2]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <sampling+0xd08>)
 8002c66:	78db      	ldrb	r3, [r3, #3]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <sampling+0xd08>)
 8002c70:	82da      	strh	r2, [r3, #22]
//	sine_ptr_temp[1]=&sine_counter[6];
//	sine_ptr_temp[2]=&sine_counter[9];
//	sine_ptr_temp[3]=&sine_counter[12];

	    // does go out of time , likely skipping samples
	if(sampler.start_MSB>sampler.end_MSB) sampler.start_MSB=0; //flip to 0  for now
 8002c72:	4b69      	ldr	r3, [pc, #420]	; (8002e18 <sampling+0xd08>)
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <sampling+0xd08>)
 8002c78:	789b      	ldrb	r3, [r3, #2]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d902      	bls.n	8002c84 <sampling+0xb74>
 8002c7e:	4b66      	ldr	r3, [pc, #408]	; (8002e18 <sampling+0xd08>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
	if (sampler.ram_seq<sampler.start)      sampler.ram_seq=sampler.start;
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <sampling+0xd08>)
 8002c86:	8c1a      	ldrh	r2, [r3, #32]
 8002c88:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <sampling+0xd08>)
 8002c8a:	8a9b      	ldrh	r3, [r3, #20]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d203      	bcs.n	8002c98 <sampling+0xb88>
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <sampling+0xd08>)
 8002c92:	8a9a      	ldrh	r2, [r3, #20]
 8002c94:	4b60      	ldr	r3, [pc, #384]	; (8002e18 <sampling+0xd08>)
 8002c96:	841a      	strh	r2, [r3, #32]
	//if ((sampler.ram_seq)>=sampler.end)     {sampler.ram_seq=sampler.start; note[3].position=0;}      // just for playback counter
	if ((sampler.ram_seq)>=sampler.end)     {sampler.ram_seq=sampler.start; }      // just for playback counter
 8002c98:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <sampling+0xd08>)
 8002c9a:	8c1a      	ldrh	r2, [r3, #32]
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <sampling+0xd08>)
 8002c9e:	8adb      	ldrh	r3, [r3, #22]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d303      	bcc.n	8002cac <sampling+0xb9c>
 8002ca4:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <sampling+0xd08>)
 8002ca6:	8a9a      	ldrh	r2, [r3, #20]
 8002ca8:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <sampling+0xd08>)
 8002caa:	841a      	strh	r2, [r3, #32]
	sampler.length=sampler.end-sampler.start;
 8002cac:	4b5a      	ldr	r3, [pc, #360]	; (8002e18 <sampling+0xd08>)
 8002cae:	8ada      	ldrh	r2, [r3, #22]
 8002cb0:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <sampling+0xd08>)
 8002cb2:	8a9b      	ldrh	r3, [r3, #20]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <sampling+0xd08>)
 8002cba:	831a      	strh	r2, [r3, #24]

	if(sampler.trigger_position )  { sampler.ram_seq=sampler.start;note[3].position=1; }   // starts here not perfect , figure out better
 8002cbc:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <sampling+0xd08>)
 8002cbe:	899b      	ldrh	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <sampling+0xbc4>
 8002cc4:	4b54      	ldr	r3, [pc, #336]	; (8002e18 <sampling+0xd08>)
 8002cc6:	8a9a      	ldrh	r2, [r3, #20]
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <sampling+0xd08>)
 8002cca:	841a      	strh	r2, [r3, #32]
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <sampling+0xcfc>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34



//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002cd4:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002cd8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <sampling+0xd0c>)
 8002cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce2:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002ce6:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002cea:	2210      	movs	r2, #16
 8002cec:	494c      	ldr	r1, [pc, #304]	; (8002e20 <sampling+0xd10>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00a fb0a 	bl	800d308 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <sampling+0xd14>)
 8002cf6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

	if(counter_16>127) counter_16=0;
 8002cfa:	4b4b      	ldr	r3, [pc, #300]	; (8002e28 <sampling+0xd18>)
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8002d00:	d902      	bls.n	8002d08 <sampling+0xbf8>
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <sampling+0xd18>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	801a      	strh	r2, [r3, #0]

	  uint32_t sample_flash_address=((sampler.sample_select*128)<<8)+((counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <sampling+0xd08>)
 8002d0a:	7a9b      	ldrb	r3, [r3, #10]
 8002d0c:	01db      	lsls	r3, r3, #7
 8002d0e:	021a      	lsls	r2, r3, #8
 8002d10:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <sampling+0xd18>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	4413      	add	r3, r2
 8002d18:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac


	 sample_flash_address=((sampler.sample_select*128)<<8)+((sampler.ram_seq&15872)*2);  //let see , limited now with a 1k jumps or 31
 8002d1c:	4b3e      	ldr	r3, [pc, #248]	; (8002e18 <sampling+0xd08>)
 8002d1e:	7a9b      	ldrb	r3, [r3, #10]
 8002d20:	01db      	lsls	r3, r3, #7
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	4b3c      	ldr	r3, [pc, #240]	; (8002e18 <sampling+0xd08>)
 8002d26:	8c1b      	ldrh	r3, [r3, #32]
 8002d28:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	4413      	add	r3, r2
 8002d30:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac




	 sampler_1k_load(sample_flash_address);
 8002d34:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 8002d38:	f001 fe28 	bl	800498c <sampler_1k_load>
	//if((sampler.ram_seq&255)==0)	  sampler_1k_load(sample_flash_address);

	counter_16=counter_16+2;   // jump 512 bytes
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	; (8002e28 <sampling+0xd18>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	3302      	adds	r3, #2
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	4b38      	ldr	r3, [pc, #224]	; (8002e28 <sampling+0xd18>)
 8002d46:	801a      	strh	r2, [r3, #0]
	//    if (sampler.ram_seq>14000) memcpy(&error_data,flash_read_block2,127);

	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
 8002d48:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <sampling+0xd1c>)
 8002d4a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
	uint16_t* sample_ptr= &flash_read_block;
 8002d4e:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <sampling+0xd14>)
 8002d50:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4



	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002d54:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <sampling+0xd20>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d902      	bls.n	8002d66 <sampling+0xc56>
 8002d60:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <sampling+0xd20>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	801a      	strh	r2, [r3, #0]
	int32_t   sample_adc_temp;
//	if ((sampler.ram_seq&255)==0)  ram_ptr=  &flash_read_block[128];
	uint16_t looper_point=0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
//	float pitch_counter=1;

//	ram_float=(1<<20) /(1.059463*ram_float);

	int16_t  flash_read_a=0;
 8002d6c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d70:	f5a3 73e7 	sub.w	r3, r3, #462	; 0x1ce
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]

	for (i=0;i<256;i++){    // convert to signed
 8002d78:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <sampling+0xd00>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	e021      	b.n	8002dc4 <sampling+0xcb4>

					flash_read_a= *(sample_ptr+i) - 32767;
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <sampling+0xd00>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d92:	3b7f      	subs	r3, #127	; 0x7f
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	b21a      	sxth	r2, r3
 8002d98:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002d9c:	f5a3 73e7 	sub.w	r3, r3, #462	; 0x1ce
 8002da0:	801a      	strh	r2, [r3, #0]
				//	float_table[i]=flash_read_a;
					memcpy(&flash_read_block[i*2],&flash_read_a,2);   //
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <sampling+0xd00>)
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <sampling+0xd14>)
 8002daa:	4413      	add	r3, r2
 8002dac:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002db0:	f5a2 72e7 	sub.w	r2, r2, #462	; 0x1ce
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	801a      	strh	r2, [r3, #0]
	for (i=0;i<256;i++){    // convert to signed
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <sampling+0xd00>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <sampling+0xd00>)
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <sampling+0xd00>)
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	2bff      	cmp	r3, #255	; 0xff
 8002dca:	d9d9      	bls.n	8002d80 <sampling+0xc70>

	}

///    downsample  is a no go without playback from RAM , leave it , work on loops etc
//	sine_count_sample();   //change playback rate
	int16_t* signed_ptr=&flash_read_block;
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <sampling+0xd14>)
 8002dce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	 if (LFO_square[0].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[60]=95;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <sampling+0xd24>)
 8002dd4:	889b      	ldrh	r3, [r3, #4]
 8002dd6:	2b0a      	cmp	r3, #10
 8002dd8:	d904      	bls.n	8002de4 <sampling+0xcd4>
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <sampling+0xcf8>)
 8002ddc:	225e      	movs	r2, #94	; 0x5e
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002de2:	e003      	b.n	8002dec <sampling+0xcdc>
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <sampling+0xcf8>)
 8002de6:	225f      	movs	r2, #95	; 0x5f
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 if (LFO_square[2].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[62]=95;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <sampling+0xd24>)
 8002dee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002df0:	2b0a      	cmp	r3, #10
 8002df2:	d921      	bls.n	8002e38 <sampling+0xd28>
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <sampling+0xcf8>)
 8002df6:	225e      	movs	r2, #94	; 0x5e
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dfc:	e020      	b.n	8002e40 <sampling+0xd30>
 8002dfe:	bf00      	nop
 8002e00:	7ae147ae 	.word	0x7ae147ae
 8002e04:	3fefae14 	.word	0x3fefae14
 8002e08:	20011714 	.word	0x20011714
 8002e0c:	20008e14 	.word	0x20008e14
 8002e10:	200098d0 	.word	0x200098d0
 8002e14:	20009394 	.word	0x20009394
 8002e18:	20008ed4 	.word	0x20008ed4
 8002e1c:	200093e4 	.word	0x200093e4
 8002e20:	2000c0e8 	.word	0x2000c0e8
 8002e24:	20011794 	.word	0x20011794
 8002e28:	20011db0 	.word	0x20011db0
 8002e2c:	200001b0 	.word	0x200001b0
 8002e30:	20011dc2 	.word	0x20011dc2
 8002e34:	2000d1b4 	.word	0x2000d1b4
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <sampling+0xd38>)
 8002e3a:	225f      	movs	r2, #95	; 0x5f
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002e40:	4b02      	ldr	r3, [pc, #8]	; (8002e4c <sampling+0xd3c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	801a      	strh	r2, [r3, #0]
 8002e46:	e2ac      	b.n	80033a2 <sampling+0x1292>
 8002e48:	20011714 	.word	0x20011714
 8002e4c:	200098d0 	.word	0x200098d0
	i_total=i+sample_pointB;
 8002e50:	4bc3      	ldr	r3, [pc, #780]	; (8003160 <sampling+0x1050>)
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	4bc3      	ldr	r3, [pc, #780]	; (8003164 <sampling+0x1054>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
	sampling_position=(i>>6);
 8002e5e:	4bc0      	ldr	r3, [pc, #768]	; (8003160 <sampling+0x1050>)
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	4bbf      	ldr	r3, [pc, #764]	; (8003168 <sampling+0x1058>)
 8002e6a:	701a      	strb	r2, [r3, #0]


	sample_adc_temp=input_holder[((adc_playback_position++)&1023)>>1];
 8002e6c:	4bbf      	ldr	r3, [pc, #764]	; (800316c <sampling+0x105c>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	b291      	uxth	r1, r2
 8002e74:	4abd      	ldr	r2, [pc, #756]	; (800316c <sampling+0x105c>)
 8002e76:	8011      	strh	r1, [r2, #0]
 8002e78:	105b      	asrs	r3, r3, #1
 8002e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7e:	4abc      	ldr	r2, [pc, #752]	; (8003170 <sampling+0x1060>)
 8002e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e84:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 8002e88:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002e8c:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002e90:	3b7f      	subs	r3, #127	; 0x7f
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	sample_adc=(sample_adc_temp+sample_adc)>>1;
 8002e98:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002e9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002ea0:	4413      	add	r3, r2
 8002ea2:	105b      	asrs	r3, r3, #1
 8002ea4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	looper_point=(RAM_looper+(sampler.offset<<11))&16383;
 8002ea8:	4bb2      	ldr	r3, [pc, #712]	; (8003174 <sampling+0x1064>)
 8002eaa:	7a5b      	ldrb	r3, [r3, #9]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	02db      	lsls	r3, r3, #11
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	4bb1      	ldr	r3, [pc, #708]	; (8003178 <sampling+0x1068>)
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002ebe:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
	   ram_temp=*(ram_ptr+looper_point);    // works
 8002ec2:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8002ecc:	4413      	add	r3, r2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	ram_temp=(ram_temp-32767)<<4;
 8002ed4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ed8:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002edc:	3b7f      	subs	r3, #127	; 0x7f
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//	sample_input=(sample_input)<<4;
	//int_float= (i/2);

	//arm_float_to_q31(&ram_float,&inter_float,1);    // q31 is different here
	//sample_input=	arm_linear_interp_q15(signed_ptr,int_float,256.);
	sample_input=*(signed_ptr+(sampler.ram_seq&255));
 8002ee4:	4ba3      	ldr	r3, [pc, #652]	; (8003174 <sampling+0x1064>)
 8002ee6:	8c1b      	ldrh	r3, [r3, #32]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002efc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f00:	601a      	str	r2, [r3, #0]

	    sample_input=sample_input<<4;
 8002f02:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f06:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	011a      	lsls	r2, r3, #4
 8002f0e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f16:	601a      	str	r2, [r3, #0]


	if	((i&1)==1)  {sampler.ram_seq=sampler.ram_seq+1; RAM_looper++; } // half speed
 8002f18:	4b91      	ldr	r3, [pc, #580]	; (8003160 <sampling+0x1050>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <sampling+0xe2c>
 8002f24:	4b93      	ldr	r3, [pc, #588]	; (8003174 <sampling+0x1064>)
 8002f26:	8c1b      	ldrh	r3, [r3, #32]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b91      	ldr	r3, [pc, #580]	; (8003174 <sampling+0x1064>)
 8002f2e:	841a      	strh	r2, [r3, #32]
 8002f30:	4b91      	ldr	r3, [pc, #580]	; (8003178 <sampling+0x1068>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b8f      	ldr	r3, [pc, #572]	; (8003178 <sampling+0x1068>)
 8002f3a:	801a      	strh	r2, [r3, #0]



	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <sampling+0x1050>)
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	4b8e      	ldr	r3, [pc, #568]	; (800317c <sampling+0x106c>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d129      	bne.n	8002f9c <sampling+0xe8c>
 8002f48:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f4c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f50:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002f52:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f56:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8002f5c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f64:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002f66:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8002f70:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f74:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f78:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002f7c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f84:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 8002f86:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f8a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f8e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002f92:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002f96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f9a:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8002f9c:	4b70      	ldr	r3, [pc, #448]	; (8003160 <sampling+0x1050>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f040 8097 	bne.w	80030d8 <sampling+0xfc8>
	    ADSR_loop();
 8002faa:	f002 f991 	bl	80052d0 <ADSR_loop>
	    //  LFO_source_new(); // calculate lfo maybe 8 times for now
	   patch_target_replace();    // update values , not too bad
 8002fae:	f7fe fb5d 	bl	800166c <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8002fb2:	4b73      	ldr	r3, [pc, #460]	; (8003180 <sampling+0x1070>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fb92 	bl	80006e0 <__aeabi_i2d>
 8002fbc:	a364      	add	r3, pc, #400	; (adr r3, 8003150 <sampling+0x1040>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd f911 	bl	80001e8 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fc11 	bl	80007f4 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	ee00 3a10 	vmov	s0, r3
 8002fd8:	f00a f924 	bl	800d224 <arm_sin_f32>
 8002fdc:	ed87 0a64 	vstr	s0, [r7, #400]	; 0x190
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 8002fe0:	4b61      	ldr	r3, [pc, #388]	; (8003168 <sampling+0x1058>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fe8:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8002fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ff0:	4a64      	ldr	r2, [pc, #400]	; (8003184 <sampling+0x1074>)
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 8002ffa:	4b61      	ldr	r3, [pc, #388]	; (8003180 <sampling+0x1070>)
 8002ffc:	7a1b      	ldrb	r3, [r3, #8]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fb6e 	bl	80006e0 <__aeabi_i2d>
 8003004:	a354      	add	r3, pc, #336	; (adr r3, 8003158 <sampling+0x1048>)
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	f7fd f8ed 	bl	80001e8 <__aeabi_dmul>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f7fd fbed 	bl	80007f4 <__aeabi_d2f>
 800301a:	4603      	mov	r3, r0
 800301c:	ee00 3a10 	vmov	s0, r3
 8003020:	f00a f900 	bl	800d224 <arm_sin_f32>
 8003024:	ed87 0a64 	vstr	s0, [r7, #400]	; 0x190
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 8003028:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <sampling+0x1058>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003030:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 8003034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <sampling+0x1074>)
 800303a:	3309      	adds	r3, #9
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8003044:	4b4e      	ldr	r3, [pc, #312]	; (8003180 <sampling+0x1070>)
 8003046:	7c1b      	ldrb	r3, [r3, #16]
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fb49 	bl	80006e0 <__aeabi_i2d>
 800304e:	a342      	add	r3, pc, #264	; (adr r3, 8003158 <sampling+0x1048>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd f8c8 	bl	80001e8 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	f7fd fbc8 	bl	80007f4 <__aeabi_d2f>
 8003064:	4603      	mov	r3, r0
 8003066:	ee00 3a10 	vmov	s0, r3
 800306a:	f00a f8db 	bl	800d224 <arm_sin_f32>
 800306e:	ed87 0a64 	vstr	s0, [r7, #400]	; 0x190
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <sampling+0x1058>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800307a:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 800307e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003082:	4a40      	ldr	r2, [pc, #256]	; (8003184 <sampling+0x1074>)
 8003084:	3312      	adds	r3, #18
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 800308e:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <sampling+0x1070>)
 8003090:	7e1b      	ldrb	r3, [r3, #24]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fb24 	bl	80006e0 <__aeabi_i2d>
 8003098:	a32f      	add	r3, pc, #188	; (adr r3, 8003158 <sampling+0x1048>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd f8a3 	bl	80001e8 <__aeabi_dmul>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f7fd fba3 	bl	80007f4 <__aeabi_d2f>
 80030ae:	4603      	mov	r3, r0
 80030b0:	ee00 3a10 	vmov	s0, r3
 80030b4:	f00a f8b6 	bl	800d224 <arm_sin_f32>
 80030b8:	ed87 0a64 	vstr	s0, [r7, #400]	; 0x190
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <sampling+0x1058>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030c4:	edd7 7a64 	vldr	s15, [r7, #400]	; 0x190
 80030c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030cc:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <sampling+0x1074>)
 80030ce:	331b      	adds	r3, #27
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	edc3 7a00 	vstr	s15, [r3]

	}

	note[0].velocity=ADSR[0].buffer[sampling_position]>>3;
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <sampling+0x1058>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <sampling+0x1078>)
 80030de:	3304      	adds	r3, #4
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80030e8:	10db      	asrs	r3, r3, #3
 80030ea:	b21b      	sxth	r3, r3
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b27      	ldr	r3, [pc, #156]	; (800318c <sampling+0x107c>)
 80030f0:	71da      	strb	r2, [r3, #7]
	note[1].velocity=ADSR[1].buffer[sampling_position]>>3;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <sampling+0x1058>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	4a24      	ldr	r2, [pc, #144]	; (8003188 <sampling+0x1078>)
 80030f8:	3313      	adds	r3, #19
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003102:	10db      	asrs	r3, r3, #3
 8003104:	b21b      	sxth	r3, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <sampling+0x107c>)
 800310a:	75da      	strb	r2, [r3, #23]
	note[2].velocity=ADSR[2].buffer[sampling_position]>>3;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <sampling+0x1058>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <sampling+0x1078>)
 8003112:	3322      	adds	r3, #34	; 0x22
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800311c:	10db      	asrs	r3, r3, #3
 800311e:	b21b      	sxth	r3, r3
 8003120:	b2da      	uxtb	r2, r3
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <sampling+0x107c>)
 8003124:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	note[3].velocity=ADSR[3].buffer[sampling_position]>>3;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <sampling+0x1058>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	4a16      	ldr	r2, [pc, #88]	; (8003188 <sampling+0x1078>)
 800312e:	3331      	adds	r3, #49	; 0x31
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003138:	10db      	asrs	r3, r3, #3
 800313a:	b21b      	sxth	r3, r3
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b13      	ldr	r3, [pc, #76]	; (800318c <sampling+0x107c>)
 8003140:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	if (note[0].velocity)   sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  else sample_accus[0]=200000;// normal adder full volume
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <sampling+0x107c>)
 8003146:	79db      	ldrb	r3, [r3, #7]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02c      	beq.n	80031a6 <sampling+0x1096>
 800314c:	e020      	b.n	8003190 <sampling+0x1080>
 800314e:	bf00      	nop
 8003150:	f9378ee3 	.word	0xf9378ee3
 8003154:	3f793a2d 	.word	0x3f793a2d
 8003158:	bc6a7efa 	.word	0xbc6a7efa
 800315c:	3f789374 	.word	0x3f789374
 8003160:	200098d0 	.word	0x200098d0
 8003164:	200098ce 	.word	0x200098ce
 8003168:	2000e2d0 	.word	0x2000e2d0
 800316c:	2001220c 	.word	0x2001220c
 8003170:	2000cac4 	.word	0x2000cac4
 8003174:	20008ed4 	.word	0x20008ed4
 8003178:	20011dc2 	.word	0x20011dc2
 800317c:	2001178c 	.word	0x2001178c
 8003180:	20008eb4 	.word	0x20008eb4
 8003184:	2000c1a0 	.word	0x2000c1a0
 8003188:	2000d27c 	.word	0x2000d27c
 800318c:	20008e14 	.word	0x20008e14
 8003190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003194:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8003198:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800319c:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800319e:	4413      	add	r3, r2
 80031a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80031a4:	e002      	b.n	80031ac <sampling+0x109c>
 80031a6:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <sampling+0x12e0>)
 80031a8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 80031ac:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80031b0:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80031b4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80031b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80031ba:	4413      	add	r3, r2
 80031bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 80031c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80031c4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80031c8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80031cc:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80031ce:	4413      	add	r3, r2
 80031d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 80031d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031d8:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80031dc:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80031e0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80031e2:	4413      	add	r3, r2
 80031e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

			if (sample_accus[0]>524287) {sample_accus[0] =-0-sample_accus[0] ; } // faster >  than &  ,strange,  or is even worse
 80031e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031f0:	db04      	blt.n	80031fc <sampling+0x10ec>
 80031f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f6:	425b      	negs	r3, r3
 80031f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,strange
 80031fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003204:	db04      	blt.n	8003210 <sampling+0x1100>
 8003206:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800320a:	425b      	negs	r3, r3
 800320c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
 8003210:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003214:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003218:	db04      	blt.n	8003224 <sampling+0x1114>
 800321a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800321e:	425b      	negs	r3, r3
 8003220:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			if (sample_accus[3]>524287) {sample_accus[3] =-0-sample_accus[3] ;} //  6 cycles
 8003224:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003228:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800322c:	db04      	blt.n	8003238 <sampling+0x1128>
 800322e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003232:	425b      	negs	r3, r3
 8003234:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

		//	if (note[0].velocity==0) sample_accus[0]=200000;



			sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 8003238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800323c:	2b00      	cmp	r3, #0
 800323e:	bfb8      	it	lt
 8003240:	425b      	neglt	r3, r3
 8003242:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 800324c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003250:	2b00      	cmp	r3, #0
 8003252:	bfb8      	it	lt
 8003254:	425b      	neglt	r3, r3
 8003256:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8003260:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003264:	2b00      	cmp	r3, #0
 8003266:	bfb8      	it	lt
 8003268:	425b      	neglt	r3, r3
 800326a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8003274:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003278:	2b00      	cmp	r3, #0
 800327a:	bfb8      	it	lt
 800327c:	425b      	neglt	r3, r3
 800327e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130





			sample_temp1=(*osc_pointers[0])*note[0].velocity;
 8003288:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800328c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a57      	ldr	r2, [pc, #348]	; (80033f4 <sampling+0x12e4>)
 8003296:	79d2      	ldrb	r2, [r2, #7]
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		//	sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
					sample_temp2=(sample_temp1)>>2;
 80032a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80032a4:	109b      	asrs	r3, r3, #2
 80032a6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

							sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 80032aa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80032ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4f      	ldr	r2, [pc, #316]	; (80033f4 <sampling+0x12e4>)
 80032b8:	7dd2      	ldrb	r2, [r2, #23]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
					sample_temp3=sample_temp1>>2; // 20+8
 80032c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80032c6:	109b      	asrs	r3, r3, #2
 80032c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184


							sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 80032cc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80032d0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a46      	ldr	r2, [pc, #280]	; (80033f4 <sampling+0x12e4>)
 80032da:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 80032e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80032ea:	109b      	asrs	r3, r3, #2
 80032ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

					if (note[3].position) {sample_Accu[9]=sample_input;sample_Accu[8]=sample_input;sample_Accu[7]=sample_input;sample_Accu[6]=sample_input;}
 80032f0:	4b40      	ldr	r3, [pc, #256]	; (80033f4 <sampling+0x12e4>)
 80032f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01b      	beq.n	8003332 <sampling+0x1222>
 80032fa:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80032fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003308:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800330c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003316:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800331a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003324:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003328:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 8003332:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8003336:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <sampling+0x12e4>)
 8003340:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
					sample_temp5 =sample_temp1>>2;
 800334c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003350:	109b      	asrs	r3, r3, #2
 8003352:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

	play_holder0[i]=sample_temp2;  // write to bank
 8003356:	4b28      	ldr	r3, [pc, #160]	; (80033f8 <sampling+0x12e8>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	4619      	mov	r1, r3
 800335c:	4a27      	ldr	r2, [pc, #156]	; (80033fc <sampling+0x12ec>)
 800335e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003362:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <sampling+0x12e8>)
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	4a24      	ldr	r2, [pc, #144]	; (8003400 <sampling+0x12f0>)
 800336e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003372:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <sampling+0x12e8>)
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	4619      	mov	r1, r3
 800337c:	4a21      	ldr	r2, [pc, #132]	; (8003404 <sampling+0x12f4>)
 800337e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003382:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <sampling+0x12e8>)
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	4619      	mov	r1, r3
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <sampling+0x12f8>)
 800338e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8003392:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <sampling+0x12e8>)
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	3301      	adds	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <sampling+0x12e8>)
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <sampling+0x12e8>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033aa:	f4ff ad51 	bcc.w	8002e50 <sampling+0xd40>
	} // end of osc , doing some sound

				//		    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on

    memcpy(&sample_accus_hold,sample_accus,16);
 80033ae:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80033b2:	2210      	movs	r2, #16
 80033b4:	4619      	mov	r1, r3
 80033b6:	4815      	ldr	r0, [pc, #84]	; (800340c <sampling+0x12fc>)
 80033b8:	f009 ffa6 	bl	800d308 <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 80033bc:	4914      	ldr	r1, [pc, #80]	; (8003410 <sampling+0x1300>)
 80033be:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80033c2:	f5a3 72e6 	sub.w	r2, r3, #460	; 0x1cc
 80033c6:	460b      	mov	r3, r1
 80033c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033cc:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 80033d0:	4a10      	ldr	r2, [pc, #64]	; (8003414 <sampling+0x1304>)
 80033d2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80033d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	2350      	movs	r3, #80	; 0x50
 80033e0:	461a      	mov	r2, r3
 80033e2:	f009 ff91 	bl	800d308 <memcpy>
    int32_t filter_Accu2;

    //uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80033e6:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <sampling+0x12e8>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	801a      	strh	r2, [r3, #0]
 80033ec:	e2b7      	b.n	800395e <sampling+0x184e>
 80033ee:	bf00      	nop
 80033f0:	00030d40 	.word	0x00030d40
 80033f4:	20008e14 	.word	0x20008e14
 80033f8:	200098d0 	.word	0x200098d0
 80033fc:	2000fad4 	.word	0x2000fad4
 8003400:	2000e2d4 	.word	0x2000e2d4
 8003404:	2000ead4 	.word	0x2000ead4
 8003408:	2000f2d4 	.word	0x2000f2d4
 800340c:	2000c0e8 	.word	0x2000c0e8
 8003410:	200093e4 	.word	0x200093e4
 8003414:	20009394 	.word	0x20009394
				i_total=i+sample_pointB;
 8003418:	4bc2      	ldr	r3, [pc, #776]	; (8003724 <sampling+0x1614>)
 800341a:	881a      	ldrh	r2, [r3, #0]
 800341c:	4bc2      	ldr	r3, [pc, #776]	; (8003728 <sampling+0x1618>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

			sampling_position=(i>>6);
 8003426:	4bbf      	ldr	r3, [pc, #764]	; (8003724 <sampling+0x1614>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	099b      	lsrs	r3, r3, #6
 800342c:	b29b      	uxth	r3, r3
 800342e:	b2da      	uxtb	r2, r3
 8003430:	4bbe      	ldr	r3, [pc, #760]	; (800372c <sampling+0x161c>)
 8003432:	701a      	strb	r2, [r3, #0]
			// filter 1


			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 8003434:	4bbb      	ldr	r3, [pc, #748]	; (8003724 <sampling+0x1614>)
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	4bbd      	ldr	r3, [pc, #756]	; (8003730 <sampling+0x1620>)
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003444:	4bb7      	ldr	r3, [pc, #732]	; (8003724 <sampling+0x1614>)
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	f003 031f 	and.w	r3, r3, #31
 800344c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003450:	49b8      	ldr	r1, [pc, #736]	; (8003734 <sampling+0x1624>)
 8003452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 8003456:	4bb3      	ldr	r3, [pc, #716]	; (8003724 <sampling+0x1614>)
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	4bb6      	ldr	r3, [pc, #728]	; (8003738 <sampling+0x1628>)
 800345e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003462:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003466:	4baf      	ldr	r3, [pc, #700]	; (8003724 <sampling+0x1614>)
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003472:	49b2      	ldr	r1, [pc, #712]	; (800373c <sampling+0x162c>)
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003478:	4baa      	ldr	r3, [pc, #680]	; (8003724 <sampling+0x1614>)
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	461a      	mov	r2, r3
 800347e:	4bb0      	ldr	r3, [pc, #704]	; (8003740 <sampling+0x1630>)
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003488:	4ba6      	ldr	r3, [pc, #664]	; (8003724 <sampling+0x1614>)
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8003494:	49ab      	ldr	r1, [pc, #684]	; (8003744 <sampling+0x1634>)
 8003496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 800349a:	4ba2      	ldr	r3, [pc, #648]	; (8003724 <sampling+0x1614>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	4ba9      	ldr	r3, [pc, #676]	; (8003748 <sampling+0x1638>)
 80034a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80034aa:	4b9e      	ldr	r3, [pc, #632]	; (8003724 <sampling+0x1614>)
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80034b6:	49a5      	ldr	r1, [pc, #660]	; (800374c <sampling+0x163c>)
 80034b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 80034bc:	4ba4      	ldr	r3, [pc, #656]	; (8003750 <sampling+0x1640>)
 80034be:	789b      	ldrb	r3, [r3, #2]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <sampling+0x13da>
 80034c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80034c8:	105a      	asrs	r2, r3, #1
 80034ca:	4b96      	ldr	r3, [pc, #600]	; (8003724 <sampling+0x1614>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4b9f      	ldr	r3, [pc, #636]	; (8003750 <sampling+0x1640>)
 80034d2:	789b      	ldrb	r3, [r3, #2]
 80034d4:	1acb      	subs	r3, r1, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	4995      	ldr	r1, [pc, #596]	; (8003734 <sampling+0x1624>)
 80034de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034e2:	105b      	asrs	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 80034ea:	4b99      	ldr	r3, [pc, #612]	; (8003750 <sampling+0x1640>)
 80034ec:	7a9b      	ldrb	r3, [r3, #10]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d012      	beq.n	8003518 <sampling+0x1408>
 80034f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034f6:	105a      	asrs	r2, r3, #1
 80034f8:	4b8a      	ldr	r3, [pc, #552]	; (8003724 <sampling+0x1614>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4b94      	ldr	r3, [pc, #592]	; (8003750 <sampling+0x1640>)
 8003500:	7a9b      	ldrb	r3, [r3, #10]
 8003502:	1acb      	subs	r3, r1, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	498c      	ldr	r1, [pc, #560]	; (800373c <sampling+0x162c>)
 800350c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003510:	105b      	asrs	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 8003518:	4b8d      	ldr	r3, [pc, #564]	; (8003750 <sampling+0x1640>)
 800351a:	7c9b      	ldrb	r3, [r3, #18]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d012      	beq.n	8003546 <sampling+0x1436>
 8003520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003524:	105a      	asrs	r2, r3, #1
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <sampling+0x1614>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	4619      	mov	r1, r3
 800352c:	4b88      	ldr	r3, [pc, #544]	; (8003750 <sampling+0x1640>)
 800352e:	7c9b      	ldrb	r3, [r3, #18]
 8003530:	1acb      	subs	r3, r1, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	4982      	ldr	r1, [pc, #520]	; (8003744 <sampling+0x1634>)
 800353a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800353e:	105b      	asrs	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 8003546:	4b82      	ldr	r3, [pc, #520]	; (8003750 <sampling+0x1640>)
 8003548:	7e9b      	ldrb	r3, [r3, #26]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d012      	beq.n	8003574 <sampling+0x1464>
 800354e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003552:	105a      	asrs	r2, r3, #1
 8003554:	4b73      	ldr	r3, [pc, #460]	; (8003724 <sampling+0x1614>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	4619      	mov	r1, r3
 800355a:	4b7d      	ldr	r3, [pc, #500]	; (8003750 <sampling+0x1640>)
 800355c:	7e9b      	ldrb	r3, [r3, #26]
 800355e:	1acb      	subs	r3, r1, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	4979      	ldr	r1, [pc, #484]	; (800374c <sampling+0x163c>)
 8003568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800356c:	105b      	asrs	r3, r3, #1
 800356e:	4413      	add	r3, r2
 8003570:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 8003574:	4b6b      	ldr	r3, [pc, #428]	; (8003724 <sampling+0x1614>)
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <sampling+0x1474>
 8003580:	f001 fd92 	bl	80050a8 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 8003584:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003588:	ee07 3a90 	vmov	s15, r3
 800358c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <sampling+0x1644>)
 8003592:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 8003596:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <sampling+0x1644>)
 8003598:	ed93 7a01 	vldr	s14, [r3, #4]
 800359c:	4b6d      	ldr	r3, [pc, #436]	; (8003754 <sampling+0x1644>)
 800359e:	edd3 6a03 	vldr	s13, [r3, #12]
 80035a2:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <sampling+0x1648>)
 80035a4:	edd3 7a00 	vldr	s15, [r3]
 80035a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b0:	4b68      	ldr	r3, [pc, #416]	; (8003754 <sampling+0x1644>)
 80035b2:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <sampling+0x1644>)
 80035b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80035bc:	4b67      	ldr	r3, [pc, #412]	; (800375c <sampling+0x164c>)
 80035be:	edd3 7a00 	vldr	s15, [r3]
 80035c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035c6:	4b63      	ldr	r3, [pc, #396]	; (8003754 <sampling+0x1644>)
 80035c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80035cc:	4b63      	ldr	r3, [pc, #396]	; (800375c <sampling+0x164c>)
 80035ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035da:	4b5e      	ldr	r3, [pc, #376]	; (8003754 <sampling+0x1644>)
 80035dc:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80035e0:	4b5c      	ldr	r3, [pc, #368]	; (8003754 <sampling+0x1644>)
 80035e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <sampling+0x164c>)
 80035e8:	edd3 7a00 	vldr	s15, [r3]
 80035ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035f0:	4b58      	ldr	r3, [pc, #352]	; (8003754 <sampling+0x1644>)
 80035f2:	edd3 6a03 	vldr	s13, [r3, #12]
 80035f6:	4b59      	ldr	r3, [pc, #356]	; (800375c <sampling+0x164c>)
 80035f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80035fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <sampling+0x1644>)
 8003606:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 800360a:	4b52      	ldr	r3, [pc, #328]	; (8003754 <sampling+0x1644>)
 800360c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003610:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003614:	ee17 3a90 	vmov	r3, s15
 8003618:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 800361c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003628:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <sampling+0x1644>)
 800362a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 800362e:	4b49      	ldr	r3, [pc, #292]	; (8003754 <sampling+0x1644>)
 8003630:	ed93 7a04 	vldr	s14, [r3, #16]
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <sampling+0x1644>)
 8003636:	edd3 6a06 	vldr	s13, [r3, #24]
 800363a:	4b47      	ldr	r3, [pc, #284]	; (8003758 <sampling+0x1648>)
 800363c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003640:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <sampling+0x1644>)
 800364a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 800364e:	4b41      	ldr	r3, [pc, #260]	; (8003754 <sampling+0x1644>)
 8003650:	ed93 7a04 	vldr	s14, [r3, #16]
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <sampling+0x164c>)
 8003656:	edd3 7a02 	vldr	s15, [r3, #8]
 800365a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800365e:	4b3d      	ldr	r3, [pc, #244]	; (8003754 <sampling+0x1644>)
 8003660:	edd3 6a05 	vldr	s13, [r3, #20]
 8003664:	4b3d      	ldr	r3, [pc, #244]	; (800375c <sampling+0x164c>)
 8003666:	edd3 7a03 	vldr	s15, [r3, #12]
 800366a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800366e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <sampling+0x1644>)
 8003674:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003678:	4b36      	ldr	r3, [pc, #216]	; (8003754 <sampling+0x1644>)
 800367a:	ed93 7a05 	vldr	s14, [r3, #20]
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <sampling+0x164c>)
 8003680:	edd3 7a02 	vldr	s15, [r3, #8]
 8003684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003688:	4b32      	ldr	r3, [pc, #200]	; (8003754 <sampling+0x1644>)
 800368a:	edd3 6a06 	vldr	s13, [r3, #24]
 800368e:	4b33      	ldr	r3, [pc, #204]	; (800375c <sampling+0x164c>)
 8003690:	edd3 7a03 	vldr	s15, [r3, #12]
 8003694:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	4b2d      	ldr	r3, [pc, #180]	; (8003754 <sampling+0x1644>)
 800369e:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <sampling+0x1644>)
 80036a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80036a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036ac:	ee17 3a90 	vmov	r3, s15
 80036b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		filter_accus[7]=sample_Accu[2];
 80036b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <sampling+0x1644>)
 80036c2:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <sampling+0x1644>)
 80036c8:	ed93 7a07 	vldr	s14, [r3, #28]
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <sampling+0x1644>)
 80036ce:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80036d2:	4b21      	ldr	r3, [pc, #132]	; (8003758 <sampling+0x1648>)
 80036d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <sampling+0x1644>)
 80036e2:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <sampling+0x1644>)
 80036e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <sampling+0x164c>)
 80036ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80036f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036f6:	4b17      	ldr	r3, [pc, #92]	; (8003754 <sampling+0x1644>)
 80036f8:	edd3 6a08 	vldr	s13, [r3, #32]
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <sampling+0x164c>)
 80036fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800370a:	4b12      	ldr	r3, [pc, #72]	; (8003754 <sampling+0x1644>)
 800370c:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 8003710:	4b10      	ldr	r3, [pc, #64]	; (8003754 <sampling+0x1644>)
 8003712:	ed93 7a08 	vldr	s14, [r3, #32]
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <sampling+0x164c>)
 8003718:	edd3 7a04 	vldr	s15, [r3, #16]
 800371c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003720:	e01e      	b.n	8003760 <sampling+0x1650>
 8003722:	bf00      	nop
 8003724:	200098d0 	.word	0x200098d0
 8003728:	200098ce 	.word	0x200098ce
 800372c:	2000e2d0 	.word	0x2000e2d0
 8003730:	2000fad4 	.word	0x2000fad4
 8003734:	20011514 	.word	0x20011514
 8003738:	2000e2d4 	.word	0x2000e2d4
 800373c:	20011594 	.word	0x20011594
 8003740:	2000ead4 	.word	0x2000ead4
 8003744:	20011614 	.word	0x20011614
 8003748:	2000f2d4 	.word	0x2000f2d4
 800374c:	20011694 	.word	0x20011694
 8003750:	20008eb4 	.word	0x20008eb4
 8003754:	2000c144 	.word	0x2000c144
 8003758:	2000c130 	.word	0x2000c130
 800375c:	2000c180 	.word	0x2000c180
 8003760:	4b8f      	ldr	r3, [pc, #572]	; (80039a0 <sampling+0x1890>)
 8003762:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003766:	4b8f      	ldr	r3, [pc, #572]	; (80039a4 <sampling+0x1894>)
 8003768:	edd3 7a05 	vldr	s15, [r3, #20]
 800376c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	4b8a      	ldr	r3, [pc, #552]	; (80039a0 <sampling+0x1890>)
 8003776:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 800377a:	4b89      	ldr	r3, [pc, #548]	; (80039a0 <sampling+0x1890>)
 800377c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003784:	ee17 3a90 	vmov	r3, s15
 8003788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

				filter_accus[10]=sample_Accu[3];
 800378c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003798:	4b81      	ldr	r3, [pc, #516]	; (80039a0 <sampling+0x1890>)
 800379a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 800379e:	4b80      	ldr	r3, [pc, #512]	; (80039a0 <sampling+0x1890>)
 80037a0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80037a4:	4b7e      	ldr	r3, [pc, #504]	; (80039a0 <sampling+0x1890>)
 80037a6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80037aa:	4b7f      	ldr	r3, [pc, #508]	; (80039a8 <sampling+0x1898>)
 80037ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80037b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b8:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <sampling+0x1890>)
 80037ba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 80037be:	4b78      	ldr	r3, [pc, #480]	; (80039a0 <sampling+0x1890>)
 80037c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80037c4:	4b77      	ldr	r3, [pc, #476]	; (80039a4 <sampling+0x1894>)
 80037c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80037ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ce:	4b74      	ldr	r3, [pc, #464]	; (80039a0 <sampling+0x1890>)
 80037d0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80037d4:	4b73      	ldr	r3, [pc, #460]	; (80039a4 <sampling+0x1894>)
 80037d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80037da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e2:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <sampling+0x1890>)
 80037e4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 80037e8:	4b6d      	ldr	r3, [pc, #436]	; (80039a0 <sampling+0x1890>)
 80037ea:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80037ee:	4b6d      	ldr	r3, [pc, #436]	; (80039a4 <sampling+0x1894>)
 80037f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80037f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f8:	4b69      	ldr	r3, [pc, #420]	; (80039a0 <sampling+0x1890>)
 80037fa:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80037fe:	4b69      	ldr	r3, [pc, #420]	; (80039a4 <sampling+0x1894>)
 8003800:	edd3 7a07 	vldr	s15, [r3, #28]
 8003804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380c:	4b64      	ldr	r3, [pc, #400]	; (80039a0 <sampling+0x1890>)
 800380e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 8003812:	4b63      	ldr	r3, [pc, #396]	; (80039a0 <sampling+0x1890>)
 8003814:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800381c:	ee17 3a90 	vmov	r3, s15
 8003820:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800382a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800382e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		//if  (record_output)  {
		filter_Accu = (sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3] )>>10 ;
 8003832:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003836:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800383a:	441a      	add	r2, r3
 800383c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003840:	441a      	add	r2, r3
 8003842:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003846:	4413      	add	r3, r2
 8003848:	129b      	asrs	r3, r3, #10
 800384a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		filter_Accu =filter_Accu+32767;
 800384e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003852:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003856:	337f      	adds	r3, #127	; 0x7f
 8003858:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

		  debug_value=filter_Accu;
 800385c:	4a53      	ldr	r2, [pc, #332]	; (80039ac <sampling+0x189c>)
 800385e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003862:	6013      	str	r3, [r2, #0]
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 8003864:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003868:	121a      	asrs	r2, r3, #8
 800386a:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <sampling+0x18a0>)
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003872:	3301      	adds	r3, #1
 8003874:	b2d1      	uxtb	r1, r2
 8003876:	4a4f      	ldr	r2, [pc, #316]	; (80039b4 <sampling+0x18a4>)
 8003878:	54d1      	strb	r1, [r2, r3]
		output_mix[(i&510)]=filter_Accu&255;
 800387a:	4b4d      	ldr	r3, [pc, #308]	; (80039b0 <sampling+0x18a0>)
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003882:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8003886:	b2d1      	uxtb	r1, r2
 8003888:	4a4a      	ldr	r2, [pc, #296]	; (80039b4 <sampling+0x18a4>)
 800388a:	54d1      	strb	r1, [r2, r3]


	//	}

		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 800388c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8003890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003894:	4413      	add	r3, r2
 8003896:	141b      	asrs	r3, r3, #16
 8003898:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc



		filter_Accu2=(sample_Accu[2]+sample_Accu[3])>>16; //filter + drum out
 800389c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80038a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80038a4:	4413      	add	r3, r2
 80038a6:	141b      	asrs	r3, r3, #16
 80038a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <sampling+0x18a8>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2bc7      	cmp	r3, #199	; 0xc7
 80038b2:	d005      	beq.n	80038c0 <sampling+0x17b0>
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <sampling+0x18a8>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <sampling+0x18a8>)
 80038be:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 80038c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c8:	db0a      	blt.n	80038e0 <sampling+0x17d0>
 80038ca:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80038ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80038d2:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <sampling+0x18ac>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b38      	ldr	r3, [pc, #224]	; (80039bc <sampling+0x18ac>)
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e007      	b.n	80038f0 <sampling+0x17e0>
 80038e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80038e4:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80038e8:	dc02      	bgt.n	80038f0 <sampling+0x17e0>
 80038ea:	4b35      	ldr	r3, [pc, #212]	; (80039c0 <sampling+0x18b0>)
 80038ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 80038f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80038f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f8:	db0a      	blt.n	8003910 <sampling+0x1800>
 80038fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80038fe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003902:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <sampling+0x18ac>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	3301      	adds	r3, #1
 8003908:	b2da      	uxtb	r2, r3
 800390a:	4b2c      	ldr	r3, [pc, #176]	; (80039bc <sampling+0x18ac>)
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e007      	b.n	8003920 <sampling+0x1810>
 8003910:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003914:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003918:	dc02      	bgt.n	8003920 <sampling+0x1810>
 800391a:	4b29      	ldr	r3, [pc, #164]	; (80039c0 <sampling+0x18b0>)
 800391c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003920:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003924:	b29a      	uxth	r2, r3
 8003926:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003930:	b291      	uxth	r1, r2
 8003932:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <sampling+0x18b4>)
 8003934:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003938:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800393c:	b29a      	uxth	r2, r3
 800393e:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	3301      	adds	r3, #1
 8003946:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800394a:	b291      	uxth	r1, r2
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <sampling+0x18b4>)
 800394e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <sampling+0x18a0>)
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <sampling+0x18a0>)
 800395c:	801a      	strh	r2, [r3, #0]
 800395e:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <sampling+0x18a0>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003966:	f4ff ad57 	bcc.w	8003418 <sampling+0x1308>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 800396a:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <sampling+0x18b8>)
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <sampling+0x1870>
 8003972:	4b16      	ldr	r3, [pc, #88]	; (80039cc <sampling+0x18bc>)
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <sampling+0x18bc>)
 800397e:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003980:	4b13      	ldr	r3, [pc, #76]	; (80039d0 <sampling+0x18c0>)
 8003982:	881a      	ldrh	r2, [r3, #0]
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <sampling+0x18c4>)
 8003986:	801a      	strh	r2, [r3, #0]
		if  (record_output)  record_output_to_RAM();
 8003988:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <sampling+0x18c8>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <sampling+0x1886>
 8003992:	f001 f987 	bl	8004ca4 <record_output_to_RAM>

		//bank_write=0;   /// total 320 sample time (39khz)
		}
 8003996:	bf00      	nop
 8003998:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 800399c:	46bd      	mov	sp, r7
 800399e:	bdb0      	pop	{r4, r5, r7, pc}
 80039a0:	2000c144 	.word	0x2000c144
 80039a4:	2000c180 	.word	0x2000c180
 80039a8:	2000c130 	.word	0x2000c130
 80039ac:	20011790 	.word	0x20011790
 80039b0:	200098d0 	.word	0x200098d0
 80039b4:	20011dc8 	.word	0x20011dc8
 80039b8:	2000c100 	.word	0x2000c100
 80039bc:	200102d4 	.word	0x200102d4
 80039c0:	fffffc01 	.word	0xfffffc01
 80039c4:	200098d4 	.word	0x200098d4
 80039c8:	20008e0e 	.word	0x20008e0e
 80039cc:	2000cece 	.word	0x2000cece
 80039d0:	2000cecc 	.word	0x2000cecc
 80039d4:	2000cec8 	.word	0x2000cec8
 80039d8:	20011dc5 	.word	0x20011dc5

080039dc <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0




}   // end o void
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 80039f2:	4b72      	ldr	r3, [pc, #456]	; (8003bbc <displayBuffer2+0x1d0>)
 80039f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f8:	461a      	mov	r2, r3
 80039fa:	4b71      	ldr	r3, [pc, #452]	; (8003bc0 <displayBuffer2+0x1d4>)
 80039fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	336b      	adds	r3, #107	; 0x6b
 8003a0a:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8003a0c:	4b6b      	ldr	r3, [pc, #428]	; (8003bbc <displayBuffer2+0x1d0>)
 8003a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <displayBuffer2+0x1d4>)
 8003a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1a:	0c1b      	lsrs	r3, r3, #16
 8003a1c:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a68      	ldr	r2, [pc, #416]	; (8003bc4 <displayBuffer2+0x1d8>)
 8003a24:	4413      	add	r3, r2
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b67      	ldr	r3, [pc, #412]	; (8003bc8 <displayBuffer2+0x1dc>)
 8003a2a:	6810      	ldr	r0, [r2, #0]
 8003a2c:	6851      	ldr	r1, [r2, #4]
 8003a2e:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8003a30:	4a66      	ldr	r2, [pc, #408]	; (8003bcc <displayBuffer2+0x1e0>)
 8003a32:	463b      	mov	r3, r7
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4611      	mov	r1, r2
 8003a38:	8019      	strh	r1, [r3, #0]
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	0c12      	lsrs	r2, r2, #16
 8003a3e:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8003a40:	4b5e      	ldr	r3, [pc, #376]	; (8003bbc <displayBuffer2+0x1d0>)
 8003a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b61      	ldr	r3, [pc, #388]	; (8003bd0 <displayBuffer2+0x1e4>)
 8003a4c:	4413      	add	r3, r2
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8003a54:	463b      	mov	r3, r7
 8003a56:	4618      	mov	r0, r3
 8003a58:	f009 fc28 	bl	800d2ac <atoi>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	4b5c      	ldr	r3, [pc, #368]	; (8003bd4 <displayBuffer2+0x1e8>)
 8003a62:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8003a64:	4b5b      	ldr	r3, [pc, #364]	; (8003bd4 <displayBuffer2+0x1e8>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4857      	ldr	r0, [pc, #348]	; (8003bc8 <displayBuffer2+0x1dc>)
 8003a6c:	f7fd f894 	bl	8000b98 <menu_vars>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a59      	ldr	r2, [pc, #356]	; (8003bd8 <displayBuffer2+0x1ec>)
 8003a74:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 8003a76:	88bb      	ldrh	r3, [r7, #4]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <displayBuffer2+0x1f0>)
 8003a7c:	1898      	adds	r0, r3, r2
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4a50      	ldr	r2, [pc, #320]	; (8003bc4 <displayBuffer2+0x1d8>)
 8003a84:	4413      	add	r3, r2
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f009 fc3c 	bl	800d308 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 8003a90:	88bb      	ldrh	r3, [r7, #4]
 8003a92:	3311      	adds	r3, #17
 8003a94:	4a51      	ldr	r2, [pc, #324]	; (8003bdc <displayBuffer2+0x1f0>)
 8003a96:	4413      	add	r3, r2
 8003a98:	4951      	ldr	r1, [pc, #324]	; (8003be0 <displayBuffer2+0x1f4>)
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f009 fc33 	bl	800d308 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 8003aa2:	88bb      	ldrh	r3, [r7, #4]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <displayBuffer2+0x1f0>)
 8003aa8:	4413      	add	r3, r2
 8003aaa:	883a      	ldrh	r2, [r7, #0]
 8003aac:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 8003aae:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <displayBuffer2+0x1f8>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d102      	bne.n	8003abc <displayBuffer2+0xd0>
 8003ab6:	4b4c      	ldr	r3, [pc, #304]	; (8003be8 <displayBuffer2+0x1fc>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
	     if (menu_vars_ref==36) target_display=2;
 8003abc:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <displayBuffer2+0x1f8>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b24      	cmp	r3, #36	; 0x24
 8003ac2:	d102      	bne.n	8003aca <displayBuffer2+0xde>
 8003ac4:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <displayBuffer2+0x1fc>)
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 8003aca:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <displayBuffer2+0x1f8>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	2b30      	cmp	r3, #48	; 0x30
 8003ad0:	d906      	bls.n	8003ae0 <displayBuffer2+0xf4>
 8003ad2:	4b44      	ldr	r3, [pc, #272]	; (8003be4 <displayBuffer2+0x1f8>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b34      	cmp	r3, #52	; 0x34
 8003ad8:	d802      	bhi.n	8003ae0 <displayBuffer2+0xf4>
 8003ada:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <displayBuffer2+0x1fc>)
 8003adc:	2203      	movs	r2, #3
 8003ade:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8003ae0:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <displayBuffer2+0x1fc>)
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d054      	beq.n	8003b92 <displayBuffer2+0x1a6>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 8003ae8:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <displayBuffer2+0x1ec>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	2b3f      	cmp	r3, #63	; 0x3f
 8003af4:	d901      	bls.n	8003afa <displayBuffer2+0x10e>
 8003af6:	2300      	movs	r3, #0
 8003af8:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 8003afa:	4b3b      	ldr	r3, [pc, #236]	; (8003be8 <displayBuffer2+0x1fc>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10c      	bne.n	8003b1c <displayBuffer2+0x130>
 8003b02:	88bb      	ldrh	r3, [r7, #4]
 8003b04:	3308      	adds	r3, #8
 8003b06:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <displayBuffer2+0x1f0>)
 8003b08:	1898      	adds	r0, r3, r2
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4a2d      	ldr	r2, [pc, #180]	; (8003bc4 <displayBuffer2+0x1d8>)
 8003b10:	4413      	add	r3, r2
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2208      	movs	r2, #8
 8003b16:	4619      	mov	r1, r3
 8003b18:	f009 fbf6 	bl	800d308 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8003b1c:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <displayBuffer2+0x1fc>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d10c      	bne.n	8003b3e <displayBuffer2+0x152>
 8003b24:	88bb      	ldrh	r3, [r7, #4]
 8003b26:	3308      	adds	r3, #8
 8003b28:	4a2c      	ldr	r2, [pc, #176]	; (8003bdc <displayBuffer2+0x1f0>)
 8003b2a:	1898      	adds	r0, r3, r2
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a2e      	ldr	r2, [pc, #184]	; (8003bec <displayBuffer2+0x200>)
 8003b32:	4413      	add	r3, r2
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2208      	movs	r2, #8
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f009 fbe5 	bl	800d308 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <displayBuffer2+0x1fc>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d125      	bne.n	8003b92 <displayBuffer2+0x1a6>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 8003b46:	4b23      	ldr	r3, [pc, #140]	; (8003bd4 <displayBuffer2+0x1e8>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <displayBuffer2+0x204>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d017      	beq.n	8003b86 <displayBuffer2+0x19a>
 8003b56:	4827      	ldr	r0, [pc, #156]	; (8003bf4 <displayBuffer2+0x208>)
 8003b58:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <displayBuffer2+0x1e8>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <displayBuffer2+0x20c>)
 8003b62:	5cd3      	ldrb	r3, [r2, r3]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <displayBuffer2+0x1d8>)
 8003b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6c:	2206      	movs	r2, #6
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f009 fbca 	bl	800d308 <memcpy>
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <displayBuffer2+0x1e8>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <displayBuffer2+0x204>)
 8003b7e:	5cd2      	ldrb	r2, [r2, r3]
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <displayBuffer2+0x210>)
 8003b82:	729a      	strb	r2, [r3, #10]
 8003b84:	e005      	b.n	8003b92 <displayBuffer2+0x1a6>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <displayBuffer2+0x208>)
 8003b88:	2208      	movs	r2, #8
 8003b8a:	491d      	ldr	r1, [pc, #116]	; (8003c00 <displayBuffer2+0x214>)
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f009 fbbb 	bl	800d308 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <displayBuffer2+0x1fc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <displayBuffer2+0x218>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b11      	cmp	r3, #17
 8003b9e:	d103      	bne.n	8003ba8 <displayBuffer2+0x1bc>
 8003ba0:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <displayBuffer2+0x218>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 8003ba6:	e005      	b.n	8003bb4 <displayBuffer2+0x1c8>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 8003ba8:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <displayBuffer2+0x218>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <displayBuffer2+0x218>)
 8003bb2:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20008ef8 	.word	0x20008ef8
 8003bc0:	2000d6bc 	.word	0x2000d6bc
 8003bc4:	20000000 	.word	0x20000000
 8003bc8:	2000e2c0 	.word	0x2000e2c0
 8003bcc:	0800dac0 	.word	0x0800dac0
 8003bd0:	2000debc 	.word	0x2000debc
 8003bd4:	2000e2c8 	.word	0x2000e2c8
 8003bd8:	2000e2bc 	.word	0x2000e2bc
 8003bdc:	20008f94 	.word	0x20008f94
 8003be0:	200097dc 	.word	0x200097dc
 8003be4:	200102f9 	.word	0x200102f9
 8003be8:	2000e2cf 	.word	0x2000e2cf
 8003bec:	20000100 	.word	0x20000100
 8003bf0:	20011508 	.word	0x20011508
 8003bf4:	20011717 	.word	0x20011717
 8003bf8:	20011778 	.word	0x20011778
 8003bfc:	20011714 	.word	0x20011714
 8003c00:	0800dab4 	.word	0x0800dab4
 8003c04:	20008e10 	.word	0x20008e10

08003c08 <SPI_command>:

void SPI_command(void){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8003c0e:	4b18      	ldr	r3, [pc, #96]	; (8003c70 <SPI_command+0x68>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d128      	bne.n	8003c68 <SPI_command+0x60>
 8003c16:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <SPI_command+0x6c>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d124      	bne.n	8003c68 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003c1e:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <SPI_command+0x70>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <SPI_command+0x2a>
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <SPI_command+0x74>)
 8003c2c:	22f8      	movs	r2, #248	; 0xf8
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	e002      	b.n	8003c38 <SPI_command+0x30>
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <SPI_command+0x74>)
 8003c34:	22fa      	movs	r2, #250	; 0xfa
 8003c36:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <SPI_command+0x74>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <SPI_command+0x70>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <SPI_command+0x70>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 8003c56:	4639      	mov	r1, r7
 8003c58:	2303      	movs	r3, #3
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	4808      	ldr	r0, [pc, #32]	; (8003c80 <SPI_command+0x78>)
 8003c5e:	f006 fe50 	bl	800a902 <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 8003c62:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <SPI_command+0x68>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	801a      	strh	r2, [r3, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	2000c114 	.word	0x2000c114
 8003c74:	2000c11a 	.word	0x2000c11a
 8003c78:	2000c118 	.word	0x2000c118
 8003c7c:	2000c116 	.word	0x2000c116
 8003c80:	20012368 	.word	0x20012368

08003c84 <display_init>:

void display_init(void){
 8003c84:	b5b0      	push	{r4, r5, r7, lr}
 8003c86:	b08a      	sub	sp, #40	; 0x28
 8003c88:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <display_init+0x90>)
 8003c8c:	1d3c      	adds	r4, r7, #4
 8003c8e:	461d      	mov	r5, r3
 8003c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8003c9c:	4b1e      	ldr	r3, [pc, #120]	; (8003d18 <display_init+0x94>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d132      	bne.n	8003d0a <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <display_init+0x98>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b06      	subs	r3, #6
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <display_init+0x9c>)
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	f7ff fe9b 	bl	80039ec <displayBuffer2>
 8003cb6:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <display_init+0x9c>)
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <display_init+0xa0>)
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <display_init+0xa4>)
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <display_init+0x98>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b05      	cmp	r3, #5
 8003cce:	d80b      	bhi.n	8003ce8 <display_init+0x64>
 8003cd0:	2003      	movs	r0, #3
 8003cd2:	f003 fa39 	bl	8007148 <HAL_Delay>
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <display_init+0x98>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	3328      	adds	r3, #40	; 0x28
 8003cde:	443b      	add	r3, r7
 8003ce0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <display_init+0xa4>)
 8003ce6:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <display_init+0x98>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <display_init+0x98>)
 8003cf2:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <display_init+0x94>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	f7ff ff85 	bl	8003c08 <SPI_command>
 8003cfe:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <display_init+0x94>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
 8003d04:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <display_init+0xa8>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 8003d0a:	bf00      	nop
 8003d0c:	3728      	adds	r7, #40	; 0x28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdb0      	pop	{r4, r5, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	0800dac4 	.word	0x0800dac4
 8003d18:	2000c11a 	.word	0x2000c11a
 8003d1c:	2000c11b 	.word	0x2000c11b
 8003d20:	2000c11c 	.word	0x2000c11c
 8003d24:	20008cc0 	.word	0x20008cc0
 8003d28:	2000c118 	.word	0x2000c118
 8003d2c:	2000c114 	.word	0x2000c114

08003d30 <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <gfx_TX_block+0xac>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	81bb      	strh	r3, [r7, #12]
 8003d50:	e034      	b.n	8003dbc <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 8003d52:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <gfx_TX_block+0xac>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <gfx_TX_block+0xb0>)
 8003d5a:	5c9b      	ldrb	r3, [r3, r2]
 8003d5c:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 8003d5e:	7afb      	ldrb	r3, [r7, #11]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d902      	bls.n	8003d6a <gfx_TX_block+0x3a>
 8003d64:	23fa      	movs	r3, #250	; 0xfa
 8003d66:	73fb      	strb	r3, [r7, #15]
 8003d68:	e001      	b.n	8003d6e <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8003d6a:	23f8      	movs	r3, #248	; 0xf8
 8003d6c:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 8003d72:	7abb      	ldrb	r3, [r7, #10]
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 8003d7e:	7abb      	ldrb	r3, [r7, #10]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 8003d86:	89bb      	ldrh	r3, [r7, #12]
 8003d88:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <gfx_TX_block+0xb4>)
 8003d8a:	4413      	add	r3, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	1d3b      	adds	r3, r7, #4
 8003d90:	8819      	ldrh	r1, [r3, #0]
 8003d92:	789b      	ldrb	r3, [r3, #2]
 8003d94:	8011      	strh	r1, [r2, #0]
 8003d96:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	2b11      	cmp	r3, #17
 8003d9c:	d102      	bne.n	8003da4 <gfx_TX_block+0x74>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	72fb      	strb	r3, [r7, #11]
 8003da2:	e002      	b.n	8003daa <gfx_TX_block+0x7a>
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	3301      	adds	r3, #1
 8003da8:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <gfx_TX_block+0xac>)
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <gfx_TX_block+0xac>)
 8003db4:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 8003db6:	89bb      	ldrh	r3, [r7, #12]
 8003db8:	3303      	adds	r3, #3
 8003dba:	81bb      	strh	r3, [r7, #12]
 8003dbc:	89bb      	ldrh	r3, [r7, #12]
 8003dbe:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8003dc2:	d3c6      	bcc.n	8003d52 <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <gfx_TX_block+0xac>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <gfx_TX_block+0xb8>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]

}
 8003dd0:	bf00      	nop
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	2000cab6 	.word	0x2000cab6
 8003de0:	2000c634 	.word	0x2000c634
 8003de4:	20010504 	.word	0x20010504
 8003de8:	2000cac2 	.word	0x2000cac2

08003dec <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <gfx_clear+0x6c>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	801a      	strh	r2, [r3, #0]
 8003df6:	e01c      	b.n	8003e32 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <gfx_clear+0x70>)
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	e00e      	b.n	8003e1e <gfx_clear+0x32>
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <gfx_clear+0x6c>)
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <gfx_clear+0x70>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <gfx_clear+0x74>)
 8003e0e:	2100      	movs	r1, #0
 8003e10:	54d1      	strb	r1, [r2, r3]
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <gfx_clear+0x70>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	3301      	adds	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <gfx_clear+0x70>)
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <gfx_clear+0x70>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	2b11      	cmp	r3, #17
 8003e24:	d9ec      	bls.n	8003e00 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <gfx_clear+0x6c>)
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	3312      	adds	r3, #18
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <gfx_clear+0x6c>)
 8003e30:	801a      	strh	r2, [r3, #0]
 8003e32:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <gfx_clear+0x6c>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8003e3a:	d3dd      	bcc.n	8003df8 <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <gfx_clear+0x78>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <gfx_clear+0x7c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <gfx_clear+0x80>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]

}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	200098ca 	.word	0x200098ca
 8003e5c:	200098d0 	.word	0x200098d0
 8003e60:	2000c634 	.word	0x2000c634
 8003e64:	2000cab8 	.word	0x2000cab8
 8003e68:	2000cab6 	.word	0x2000cab6
 8003e6c:	2000cac2 	.word	0x2000cac2

08003e70 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 8003e76:	2300      	movs	r3, #0
 8003e78:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	80fb      	strh	r3, [r7, #6]
 8003e7e:	e006      	b.n	8003e8e <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <display_clear+0x34>)
 8003e84:	212f      	movs	r1, #47	; 0x2f
 8003e86:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	80fb      	strh	r3, [r7, #6]
 8003e8e:	88fb      	ldrh	r3, [r7, #6]
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	d3f4      	bcc.n	8003e80 <display_clear+0x10>
	}


}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20008f94 	.word	0x20008f94

08003ea8 <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <display_generate+0x1c>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 8003eb2:	f7ff fd93 	bl	80039dc <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8003eb6:	f7ff fd99 	bl	80039ec <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <display_generate+0x20>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	2000e2d2 	.word	0x2000e2d2
 8003ec8:	2000cac2 	.word	0x2000cac2

08003ecc <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8003ecc:	b480      	push	{r7}
 8003ece:	b08b      	sub	sp, #44	; 0x2c
 8003ed0:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <gfx_line_fill+0x178>)
 8003ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b5b      	ldr	r3, [pc, #364]	; (8004048 <gfx_line_fill+0x17c>)
 8003edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee0:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	; (800404c <gfx_line_fill+0x180>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ef0:	09db      	lsrs	r3, r3, #7
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	4413      	add	r3, r2
 8003efa:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8003efc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	00d2      	lsls	r2, r2, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 8003f0e:	8c3b      	ldrh	r3, [r7, #32]
 8003f10:	3390      	adds	r3, #144	; 0x90
 8003f12:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8003f14:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <gfx_line_fill+0x184>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8003f24:	2300      	movs	r3, #0
 8003f26:	607b      	str	r3, [r7, #4]
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	605a      	str	r2, [r3, #4]
 8003f32:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8003f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d107      	bne.n	8003f50 <gfx_line_fill+0x84>
 8003f40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	3328      	adds	r3, #40	; 0x28
 8003f48:	443b      	add	r3, r7
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8003f50:	4a40      	ldr	r2, [pc, #256]	; (8004054 <gfx_line_fill+0x188>)
 8003f52:	8c3b      	ldrh	r3, [r7, #32]
 8003f54:	8013      	strh	r3, [r2, #0]
 8003f56:	e068      	b.n	800402a <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <gfx_line_fill+0x18c>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e055      	b.n	800400c <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <gfx_line_fill+0x18c>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a3b      	ldr	r2, [pc, #236]	; (800405c <gfx_line_fill+0x190>)
 8003f6e:	5cd3      	ldrb	r3, [r2, r3]
 8003f70:	3b2f      	subs	r3, #47	; 0x2f
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	4413      	add	r3, r2
 8003f80:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 8003f82:	8b7b      	ldrh	r3, [r7, #26]
 8003f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f88:	4a35      	ldr	r2, [pc, #212]	; (8004060 <gfx_line_fill+0x194>)
 8003f8a:	5cd3      	ldrb	r3, [r2, r3]
 8003f8c:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <gfx_line_fill+0x18c>)
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	3328      	adds	r3, #40	; 0x28
 8003f94:	443b      	add	r3, r7
 8003f96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	01d2      	lsls	r2, r2, #7
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	b25a      	sxtb	r2, r3
 8003fa4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003fa8:	4053      	eors	r3, r2
 8003faa:	b25b      	sxtb	r3, r3
 8003fac:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <gfx_line_fill+0x188>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b28      	ldr	r3, [pc, #160]	; (8004058 <gfx_line_fill+0x18c>)
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3302      	adds	r3, #2
 8003fbc:	4929      	ldr	r1, [pc, #164]	; (8004064 <gfx_line_fill+0x198>)
 8003fbe:	7f7a      	ldrb	r2, [r7, #29]
 8003fc0:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 8003fc2:	23fa      	movs	r3, #250	; 0xfa
 8003fc4:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8003fc6:	7f7b      	ldrb	r3, [r7, #29]
 8003fc8:	091b      	lsrs	r3, r3, #4
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	011b      	lsls	r3, r3, #4
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 8003fd2:	7f7b      	ldrb	r3, [r7, #29]
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <gfx_line_fill+0x188>)
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <gfx_line_fill+0x18c>)
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	3306      	adds	r3, #6
 8003fee:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <gfx_line_fill+0x19c>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	8819      	ldrh	r1, [r3, #0]
 8003ffa:	789b      	ldrb	r3, [r3, #2]
 8003ffc:	8011      	strh	r1, [r2, #0]
 8003ffe:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 8004000:	4b15      	ldr	r3, [pc, #84]	; (8004058 <gfx_line_fill+0x18c>)
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <gfx_line_fill+0x18c>)
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <gfx_line_fill+0x18c>)
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b0f      	cmp	r3, #15
 8004012:	d9a5      	bls.n	8003f60 <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004018:	3301      	adds	r3, #1
 800401a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 800401e:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <gfx_line_fill+0x188>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	3312      	adds	r3, #18
 8004024:	b29a      	uxth	r2, r3
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <gfx_line_fill+0x188>)
 8004028:	801a      	strh	r2, [r3, #0]
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <gfx_line_fill+0x188>)
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	8bfa      	ldrh	r2, [r7, #30]
 8004030:	429a      	cmp	r2, r3
 8004032:	d891      	bhi.n	8003f58 <gfx_line_fill+0x8c>
    }
    }
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	372c      	adds	r7, #44	; 0x2c
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20008ef8 	.word	0x20008ef8
 8004048:	2000d6bc 	.word	0x2000d6bc
 800404c:	200098cc 	.word	0x200098cc
 8004050:	2000cac2 	.word	0x2000cac2
 8004054:	200098ca 	.word	0x200098ca
 8004058:	200098d0 	.word	0x200098d0
 800405c:	20008f94 	.word	0x20008f94
 8004060:	0800eb38 	.word	0x0800eb38
 8004064:	2000c634 	.word	0x2000c634
 8004068:	20010504 	.word	0x20010504

0800406c <encoder2>:


void encoder2(void){  // encoder pos and data input
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8004072:	4b67      	ldr	r3, [pc, #412]	; (8004210 <encoder2+0x1a4>)
 8004074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004078:	461a      	mov	r2, r3
 800407a:	4b66      	ldr	r3, [pc, #408]	; (8004214 <encoder2+0x1a8>)
 800407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4a63      	ldr	r2, [pc, #396]	; (8004218 <encoder2+0x1ac>)
 800408a:	4413      	add	r3, r2
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <encoder2+0x1b0>)
 8004090:	6810      	ldr	r0, [r2, #0]
 8004092:	6851      	ldr	r1, [r2, #4]
 8004094:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004096:	4a62      	ldr	r2, [pc, #392]	; (8004220 <encoder2+0x1b4>)
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4611      	mov	r1, r2
 800409e:	8019      	strh	r1, [r3, #0]
 80040a0:	3302      	adds	r3, #2
 80040a2:	0c12      	lsrs	r2, r2, #16
 80040a4:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80040a6:	4b5a      	ldr	r3, [pc, #360]	; (8004210 <encoder2+0x1a4>)
 80040a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	461a      	mov	r2, r3
 80040b0:	4b5c      	ldr	r3, [pc, #368]	; (8004224 <encoder2+0x1b8>)
 80040b2:	4413      	add	r3, r2
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	4618      	mov	r0, r3
 80040be:	f009 f8f5 	bl	800d2ac <atoi>
 80040c2:	4603      	mov	r3, r0
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4b58      	ldr	r3, [pc, #352]	; (8004228 <encoder2+0x1bc>)
 80040c8:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80040ca:	4b57      	ldr	r3, [pc, #348]	; (8004228 <encoder2+0x1bc>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	4852      	ldr	r0, [pc, #328]	; (800421c <encoder2+0x1b0>)
 80040d2:	f7fc fd61 	bl	8000b98 <menu_vars>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a54      	ldr	r2, [pc, #336]	; (800422c <encoder2+0x1c0>)
 80040da:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <encoder2+0x1c0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	781a      	ldrb	r2, [r3, #0]
 80040e2:	4b53      	ldr	r3, [pc, #332]	; (8004230 <encoder2+0x1c4>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	4b52      	ldr	r3, [pc, #328]	; (8004234 <encoder2+0x1c8>)
 80040ea:	5c5b      	ldrb	r3, [r3, r1]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d907      	bls.n	8004100 <encoder2+0x94>
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <encoder2+0x1c4>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4619      	mov	r1, r3
 80040f6:	4b4d      	ldr	r3, [pc, #308]	; (800422c <encoder2+0x1c0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4e      	ldr	r2, [pc, #312]	; (8004234 <encoder2+0x1c8>)
 80040fc:	5c52      	ldrb	r2, [r2, r1]
 80040fe:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8004100:	4b4d      	ldr	r3, [pc, #308]	; (8004238 <encoder2+0x1cc>)
 8004102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004106:	461a      	mov	r2, r3
 8004108:	4b4c      	ldr	r3, [pc, #304]	; (800423c <encoder2+0x1d0>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d024      	beq.n	800415a <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8004110:	4b49      	ldr	r3, [pc, #292]	; (8004238 <encoder2+0x1cc>)
 8004112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004116:	461a      	mov	r2, r3
 8004118:	4b48      	ldr	r3, [pc, #288]	; (800423c <encoder2+0x1d0>)
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	dd07      	ble.n	8004130 <encoder2+0xc4>
 8004120:	4b42      	ldr	r3, [pc, #264]	; (800422c <encoder2+0x1c0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <encoder2+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3201      	adds	r2, #1
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <encoder2+0x1cc>)
 8004132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004136:	461a      	mov	r2, r3
 8004138:	4b40      	ldr	r3, [pc, #256]	; (800423c <encoder2+0x1d0>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	da0c      	bge.n	800415a <encoder2+0xee>
 8004140:	4b3a      	ldr	r3, [pc, #232]	; (800422c <encoder2+0x1c0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <encoder2+0xee>
 800414a:	4b38      	ldr	r3, [pc, #224]	; (800422c <encoder2+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	4b36      	ldr	r3, [pc, #216]	; (800422c <encoder2+0x1c0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3a01      	subs	r2, #1
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <encoder2+0x1cc>)
 800415c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004160:	b29a      	uxth	r2, r3
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <encoder2+0x1d0>)
 8004164:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8004166:	4b36      	ldr	r3, [pc, #216]	; (8004240 <encoder2+0x1d4>)
 8004168:	881a      	ldrh	r2, [r3, #0]
 800416a:	4b36      	ldr	r3, [pc, #216]	; (8004244 <encoder2+0x1d8>)
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d01d      	beq.n	80041ae <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 8004172:	4b33      	ldr	r3, [pc, #204]	; (8004240 <encoder2+0x1d4>)
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	4b33      	ldr	r3, [pc, #204]	; (8004244 <encoder2+0x1d8>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d908      	bls.n	8004190 <encoder2+0x124>
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <encoder2+0x1a4>)
 8004180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004184:	b29b      	uxth	r3, r3
 8004186:	3301      	adds	r3, #1
 8004188:	b29b      	uxth	r3, r3
 800418a:	b21a      	sxth	r2, r3
 800418c:	4b20      	ldr	r3, [pc, #128]	; (8004210 <encoder2+0x1a4>)
 800418e:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <encoder2+0x1d4>)
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <encoder2+0x1d8>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d208      	bcs.n	80041ae <encoder2+0x142>
 800419c:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <encoder2+0x1a4>)
 800419e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	b21a      	sxth	r2, r3
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <encoder2+0x1a4>)
 80041ac:	801a      	strh	r2, [r3, #0]

	   	    }

	    if (page_skip)  {enc_out1=enc_out1+20; page_skip=0; }
 80041ae:	4b26      	ldr	r3, [pc, #152]	; (8004248 <encoder2+0x1dc>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <encoder2+0x164>
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <encoder2+0x1a4>)
 80041ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3314      	adds	r3, #20
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	b21a      	sxth	r2, r3
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <encoder2+0x1a4>)
 80041c8:	801a      	strh	r2, [r3, #0]
 80041ca:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <encoder2+0x1dc>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]
	    if (enc_out1>menu_title_count) enc_out1=0;
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <encoder2+0x1a4>)
 80041d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d6:	461a      	mov	r2, r3
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <encoder2+0x1e0>)
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	dd02      	ble.n	80041e6 <encoder2+0x17a>
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <encoder2+0x1a4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 80041e6:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <encoder2+0x1a4>)
 80041e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da04      	bge.n	80041fa <encoder2+0x18e>
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <encoder2+0x1e0>)
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b21a      	sxth	r2, r3
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <encoder2+0x1a4>)
 80041f8:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <encoder2+0x1d4>)
 80041fc:	881a      	ldrh	r2, [r3, #0]
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <encoder2+0x1d8>)
 8004200:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <encoder2+0x1e4>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]

    }
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20008ef8 	.word	0x20008ef8
 8004214:	2000d6bc 	.word	0x2000d6bc
 8004218:	20000000 	.word	0x20000000
 800421c:	2000e2c0 	.word	0x2000e2c0
 8004220:	0800dac0 	.word	0x0800dac0
 8004224:	2000debc 	.word	0x2000debc
 8004228:	2000e2c8 	.word	0x2000e2c8
 800422c:	2000e2bc 	.word	0x2000e2bc
 8004230:	200102f9 	.word	0x200102f9
 8004234:	0800eab8 	.word	0x0800eab8
 8004238:	2000c10c 	.word	0x2000c10c
 800423c:	200104fe 	.word	0x200104fe
 8004240:	2000c10a 	.word	0x2000c10a
 8004244:	2000e2cc 	.word	0x2000e2cc
 8004248:	20011dc4 	.word	0x20011dc4
 800424c:	2000d6ba 	.word	0x2000d6ba
 8004250:	2000c10e 	.word	0x2000c10e

08004254 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 800425a:	4b4f      	ldr	r3, [pc, #316]	; (8004398 <menu3_fill+0x144>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8004260:	4b4e      	ldr	r3, [pc, #312]	; (800439c <menu3_fill+0x148>)
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	89fa      	ldrh	r2, [r7, #14]
 8004266:	429a      	cmp	r2, r3
 8004268:	d904      	bls.n	8004274 <menu3_fill+0x20>
 800426a:	2300      	movs	r3, #0
 800426c:	81fb      	strh	r3, [r7, #14]
 800426e:	4b4a      	ldr	r3, [pc, #296]	; (8004398 <menu3_fill+0x144>)
 8004270:	2200      	movs	r2, #0
 8004272:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	4a4a      	ldr	r2, [pc, #296]	; (80043a0 <menu3_fill+0x14c>)
 8004278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8004280:	7b7b      	ldrb	r3, [r7, #13]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4a47      	ldr	r2, [pc, #284]	; (80043a4 <menu3_fill+0x150>)
 8004286:	4413      	add	r3, r2
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b47      	ldr	r3, [pc, #284]	; (80043a8 <menu3_fill+0x154>)
 800428c:	6810      	ldr	r0, [r2, #0]
 800428e:	6851      	ldr	r1, [r2, #4]
 8004290:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8004292:	4a46      	ldr	r2, [pc, #280]	; (80043ac <menu3_fill+0x158>)
 8004294:	1d3b      	adds	r3, r7, #4
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	4611      	mov	r1, r2
 800429a:	8019      	strh	r1, [r3, #0]
 800429c:	3302      	adds	r3, #2
 800429e:	0c12      	lsrs	r2, r2, #16
 80042a0:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 80042a2:	89fb      	ldrh	r3, [r7, #14]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	461a      	mov	r2, r3
 80042a8:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <menu3_fill+0x15c>)
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80042b2:	1d3b      	adds	r3, r7, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f008 fff9 	bl	800d2ac <atoi>
 80042ba:	4603      	mov	r3, r0
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <menu3_fill+0x160>)
 80042c0:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80042c2:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <menu3_fill+0x160>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	4837      	ldr	r0, [pc, #220]	; (80043a8 <menu3_fill+0x154>)
 80042ca:	f7fc fc65 	bl	8000b98 <menu_vars>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4a39      	ldr	r2, [pc, #228]	; (80043b8 <menu3_fill+0x164>)
 80042d2:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 80042d4:	4b38      	ldr	r3, [pc, #224]	; (80043b8 <menu3_fill+0x164>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b29a      	uxth	r2, r3
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <menu3_fill+0x168>)
 80042de:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 80042e0:	4b37      	ldr	r3, [pc, #220]	; (80043c0 <menu3_fill+0x16c>)
 80042e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042e6:	461a      	mov	r2, r3
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d104      	bne.n	80042f8 <menu3_fill+0xa4>
 80042ee:	4b33      	ldr	r3, [pc, #204]	; (80043bc <menu3_fill+0x168>)
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <menu3_fill+0x170>)
 80042f6:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 80042f8:	4b30      	ldr	r3, [pc, #192]	; (80043bc <menu3_fill+0x168>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4b32      	ldr	r3, [pc, #200]	; (80043c8 <menu3_fill+0x174>)
 8004300:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <menu3_fill+0x174>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b09      	cmp	r3, #9
 8004308:	d902      	bls.n	8004310 <menu3_fill+0xbc>
 800430a:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <menu3_fill+0x174>)
 800430c:	2209      	movs	r2, #9
 800430e:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004310:	89fb      	ldrh	r3, [r7, #14]
 8004312:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <menu3_fill+0x14c>)
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <menu3_fill+0x174>)
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	3230      	adds	r2, #48	; 0x30
 8004322:	b2d1      	uxtb	r1, r2
 8004324:	4a29      	ldr	r2, [pc, #164]	; (80043cc <menu3_fill+0x178>)
 8004326:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <menu3_fill+0x17c>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b35      	cmp	r3, #53	; 0x35
 800432e:	d105      	bne.n	800433c <menu3_fill+0xe8>
 8004330:	4b22      	ldr	r3, [pc, #136]	; (80043bc <menu3_fill+0x168>)
 8004332:	881a      	ldrh	r2, [r3, #0]
 8004334:	897b      	ldrh	r3, [r7, #10]
 8004336:	b2d1      	uxtb	r1, r2
 8004338:	4a24      	ldr	r2, [pc, #144]	; (80043cc <menu3_fill+0x178>)
 800433a:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24) | (menu_vars_ref==25))  default_menu3[crap8]=major_notes[lcd_out3&31];
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <menu3_fill+0x17c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b18      	cmp	r3, #24
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b21      	ldr	r3, [pc, #132]	; (80043d0 <menu3_fill+0x17c>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b19      	cmp	r3, #25
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4313      	orrs	r3, r2
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <menu3_fill+0x11e>
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <menu3_fill+0x168>)
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	897b      	ldrh	r3, [r7, #10]
 800436a:	491a      	ldr	r1, [pc, #104]	; (80043d4 <menu3_fill+0x180>)
 800436c:	5c89      	ldrb	r1, [r1, r2]
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <menu3_fill+0x178>)
 8004370:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 8004372:	4b09      	ldr	r3, [pc, #36]	; (8004398 <menu3_fill+0x144>)
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	3301      	adds	r3, #1
 8004378:	b29a      	uxth	r2, r3
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <menu3_fill+0x144>)
 800437c:	801a      	strh	r2, [r3, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 800437e:	4b06      	ldr	r3, [pc, #24]	; (8004398 <menu3_fill+0x144>)
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <menu3_fill+0x148>)
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d902      	bls.n	8004390 <menu3_fill+0x13c>
 800438a:	4b03      	ldr	r3, [pc, #12]	; (8004398 <menu3_fill+0x144>)
 800438c:	2200      	movs	r2, #0
 800438e:	801a      	strh	r2, [r3, #0]

    }
 8004390:	bf00      	nop
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20010500 	.word	0x20010500
 800439c:	2000d6ba 	.word	0x2000d6ba
 80043a0:	2000d6bc 	.word	0x2000d6bc
 80043a4:	20000000 	.word	0x20000000
 80043a8:	2000e2c0 	.word	0x2000e2c0
 80043ac:	0800dac0 	.word	0x0800dac0
 80043b0:	2000debc 	.word	0x2000debc
 80043b4:	2000e2c8 	.word	0x2000e2c8
 80043b8:	2000e2bc 	.word	0x2000e2bc
 80043bc:	2000cac0 	.word	0x2000cac0
 80043c0:	20008ef8 	.word	0x20008ef8
 80043c4:	2000e2ce 	.word	0x2000e2ce
 80043c8:	200102fa 	.word	0x200102fa
 80043cc:	20008f94 	.word	0x20008f94
 80043d0:	200102f9 	.word	0x200102f9
 80043d4:	0800ef38 	.word	0x0800ef38

080043d8 <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <LCD_Info_feedback+0x154>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	4a53      	ldr	r2, [pc, #332]	; (8004530 <LCD_Info_feedback+0x158>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3330      	adds	r3, #48	; 0x30
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	4b51      	ldr	r3, [pc, #324]	; (8004534 <LCD_Info_feedback+0x15c>)
 80043f0:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <LCD_Info_feedback+0x154>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	4a4d      	ldr	r2, [pc, #308]	; (8004530 <LCD_Info_feedback+0x158>)
 80043fa:	fba2 1203 	umull	r1, r2, r2, r3
 80043fe:	0952      	lsrs	r2, r2, #5
 8004400:	2164      	movs	r1, #100	; 0x64
 8004402:	fb01 f202 	mul.w	r2, r1, r2
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4a4b      	ldr	r2, [pc, #300]	; (8004538 <LCD_Info_feedback+0x160>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3330      	adds	r3, #48	; 0x30
 8004416:	b2da      	uxtb	r2, r3
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <LCD_Info_feedback+0x15c>)
 800441a:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			    potSource[382]=(lcd_temp%10)+48;
 800441e:	4b43      	ldr	r3, [pc, #268]	; (800452c <LCD_Info_feedback+0x154>)
 8004420:	781a      	ldrb	r2, [r3, #0]
 8004422:	4b45      	ldr	r3, [pc, #276]	; (8004538 <LCD_Info_feedback+0x160>)
 8004424:	fba3 1302 	umull	r1, r3, r3, r2
 8004428:	08d9      	lsrs	r1, r3, #3
 800442a:	460b      	mov	r3, r1
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	b2db      	uxtb	r3, r3
 8004436:	3330      	adds	r3, #48	; 0x30
 8004438:	b2da      	uxtb	r2, r3
 800443a:	4b3e      	ldr	r3, [pc, #248]	; (8004534 <LCD_Info_feedback+0x15c>)
 800443c:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

			    LCD_Info[0]  =( seq.pos/100) +48;
 8004440:	4b3e      	ldr	r3, [pc, #248]	; (800453c <LCD_Info_feedback+0x164>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4a3a      	ldr	r2, [pc, #232]	; (8004530 <LCD_Info_feedback+0x158>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	b2db      	uxtb	r3, r3
 800444e:	3330      	adds	r3, #48	; 0x30
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <LCD_Info_feedback+0x168>)
 8004454:	701a      	strb	r2, [r3, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8004456:	4b39      	ldr	r3, [pc, #228]	; (800453c <LCD_Info_feedback+0x164>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	4a35      	ldr	r2, [pc, #212]	; (8004530 <LCD_Info_feedback+0x158>)
 800445c:	fba2 1203 	umull	r1, r2, r2, r3
 8004460:	0952      	lsrs	r2, r2, #5
 8004462:	2164      	movs	r1, #100	; 0x64
 8004464:	fb01 f202 	mul.w	r2, r1, r2
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4a32      	ldr	r2, [pc, #200]	; (8004538 <LCD_Info_feedback+0x160>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	08db      	lsrs	r3, r3, #3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	3330      	adds	r3, #48	; 0x30
 8004478:	b2da      	uxtb	r2, r3
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <LCD_Info_feedback+0x168>)
 800447c:	705a      	strb	r2, [r3, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 800447e:	4b2f      	ldr	r3, [pc, #188]	; (800453c <LCD_Info_feedback+0x164>)
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <LCD_Info_feedback+0x160>)
 8004484:	fba3 1302 	umull	r1, r3, r3, r2
 8004488:	08d9      	lsrs	r1, r3, #3
 800448a:	460b      	mov	r3, r1
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	3330      	adds	r3, #48	; 0x30
 8004498:	b2da      	uxtb	r2, r3
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <LCD_Info_feedback+0x168>)
 800449c:	709a      	strb	r2, [r3, #2]

			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 800449e:	4b27      	ldr	r3, [pc, #156]	; (800453c <LCD_Info_feedback+0x164>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	3331      	adds	r3, #49	; 0x31
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4b25      	ldr	r3, [pc, #148]	; (8004540 <LCD_Info_feedback+0x168>)
 80044ac:	72da      	strb	r2, [r3, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 80044ae:	4b23      	ldr	r3, [pc, #140]	; (800453c <LCD_Info_feedback+0x164>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	111b      	asrs	r3, r3, #4
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3331      	adds	r3, #49	; 0x31
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	4b1f      	ldr	r3, [pc, #124]	; (8004540 <LCD_Info_feedback+0x168>)
 80044c2:	731a      	strb	r2, [r3, #12]
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <LCD_Info_feedback+0x164>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	4b18      	ldr	r3, [pc, #96]	; (8004530 <LCD_Info_feedback+0x158>)
 80044d0:	fb83 1302 	smull	r1, r3, r3, r2
 80044d4:	1159      	asrs	r1, r3, #5
 80044d6:	17d3      	asrs	r3, r2, #31
 80044d8:	1acb      	subs	r3, r1, r3
 80044da:	2164      	movs	r1, #100	; 0x64
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	4a18      	ldr	r2, [pc, #96]	; (8004544 <LCD_Info_feedback+0x16c>)
 80044e4:	fb82 1203 	smull	r1, r2, r2, r3
 80044e8:	1092      	asrs	r2, r2, #2
 80044ea:	17db      	asrs	r3, r3, #31
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	3330      	adds	r3, #48	; 0x30
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <LCD_Info_feedback+0x168>)
 80044f6:	735a      	strb	r2, [r3, #13]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 80044f8:	4b10      	ldr	r3, [pc, #64]	; (800453c <LCD_Info_feedback+0x164>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <LCD_Info_feedback+0x16c>)
 8004504:	fb83 1302 	smull	r1, r3, r3, r2
 8004508:	1099      	asrs	r1, r3, #2
 800450a:	17d3      	asrs	r3, r2, #31
 800450c:	1ac9      	subs	r1, r1, r3
 800450e:	460b      	mov	r3, r1
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	1ad1      	subs	r1, r2, r3
 8004518:	b2cb      	uxtb	r3, r1
 800451a:	3330      	adds	r3, #48	; 0x30
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <LCD_Info_feedback+0x168>)
 8004520:	739a      	strb	r2, [r3, #14]



    }
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	2000e2ce 	.word	0x2000e2ce
 8004530:	51eb851f 	.word	0x51eb851f
 8004534:	20009660 	.word	0x20009660
 8004538:	cccccccd 	.word	0xcccccccd
 800453c:	2000d314 	.word	0x2000d314
 8004540:	20011714 	.word	0x20011714
 8004544:	66666667 	.word	0x66666667

08004548 <LCD_Info_notes>:
void LCD_Info_notes(void){
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
uint8_t counter=0;
 800454e:	2300      	movs	r3, #0
 8004550:	71fb      	strb	r3, [r7, #7]

for (counter=0;counter<8;counter++){
 8004552:	2300      	movs	r3, #0
 8004554:	71fb      	strb	r3, [r7, #7]
 8004556:	e038      	b.n	80045ca <LCD_Info_notes+0x82>

  LCD_Info[20+counter]=major_notes[notes_joined[counter+note[0].timeshift]];
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <LCD_Info_notes+0x98>)
 800455c:	7992      	ldrb	r2, [r2, #6]
 800455e:	4413      	add	r3, r2
 8004560:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <LCD_Info_notes+0x9c>)
 8004562:	5cd3      	ldrb	r3, [r2, r3]
 8004564:	4619      	mov	r1, r3
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	3314      	adds	r3, #20
 800456a:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <LCD_Info_notes+0xa0>)
 800456c:	5c51      	ldrb	r1, [r2, r1]
 800456e:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <LCD_Info_notes+0xa4>)
 8004570:	54d1      	strb	r1, [r2, r3]
  LCD_Info[28+counter]=major_notes[notes_joined[counter+note[1].timeshift]];
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	4a1a      	ldr	r2, [pc, #104]	; (80045e0 <LCD_Info_notes+0x98>)
 8004576:	7d92      	ldrb	r2, [r2, #22]
 8004578:	4413      	add	r3, r2
 800457a:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <LCD_Info_notes+0x9c>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	4619      	mov	r1, r3
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	331c      	adds	r3, #28
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <LCD_Info_notes+0xa0>)
 8004586:	5c51      	ldrb	r1, [r2, r1]
 8004588:	4a18      	ldr	r2, [pc, #96]	; (80045ec <LCD_Info_notes+0xa4>)
 800458a:	54d1      	strb	r1, [r2, r3]
  LCD_Info[36+counter]=major_notes[notes_joined[counter+note[2].timeshift]];
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <LCD_Info_notes+0x98>)
 8004590:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8004594:	4413      	add	r3, r2
 8004596:	4a13      	ldr	r2, [pc, #76]	; (80045e4 <LCD_Info_notes+0x9c>)
 8004598:	5cd3      	ldrb	r3, [r2, r3]
 800459a:	4619      	mov	r1, r3
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	3324      	adds	r3, #36	; 0x24
 80045a0:	4a11      	ldr	r2, [pc, #68]	; (80045e8 <LCD_Info_notes+0xa0>)
 80045a2:	5c51      	ldrb	r1, [r2, r1]
 80045a4:	4a11      	ldr	r2, [pc, #68]	; (80045ec <LCD_Info_notes+0xa4>)
 80045a6:	54d1      	strb	r1, [r2, r3]
  LCD_Info[44+counter]=major_notes[notes_joined[counter+note[3].timeshift]];
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	4a0d      	ldr	r2, [pc, #52]	; (80045e0 <LCD_Info_notes+0x98>)
 80045ac:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80045b0:	4413      	add	r3, r2
 80045b2:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <LCD_Info_notes+0x9c>)
 80045b4:	5cd3      	ldrb	r3, [r2, r3]
 80045b6:	4619      	mov	r1, r3
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	332c      	adds	r3, #44	; 0x2c
 80045bc:	4a0a      	ldr	r2, [pc, #40]	; (80045e8 <LCD_Info_notes+0xa0>)
 80045be:	5c51      	ldrb	r1, [r2, r1]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <LCD_Info_notes+0xa4>)
 80045c2:	54d1      	strb	r1, [r2, r3]
for (counter=0;counter<8;counter++){
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	3301      	adds	r3, #1
 80045c8:	71fb      	strb	r3, [r7, #7]
 80045ca:	79fb      	ldrb	r3, [r7, #7]
 80045cc:	2b07      	cmp	r3, #7
 80045ce:	d9c3      	bls.n	8004558 <LCD_Info_notes+0x10>
}




}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	20008e14 	.word	0x20008e14
 80045e4:	200102d8 	.word	0x200102d8
 80045e8:	0800ef38 	.word	0x0800ef38
 80045ec:	20011714 	.word	0x20011714

080045f0 <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08c      	sub	sp, #48	; 0x30
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004600:	d301      	bcc.n	8004606 <sampler_ram_clear_test+0x16>
 8004602:	2300      	movs	r3, #0
 8004604:	e044      	b.n	8004690 <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 8004606:	f001 fd55 	bl	80060b4 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 800460a:	2300      	movs	r3, #0
 800460c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 8004610:	2300      	movs	r3, #0
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	f107 030c 	add.w	r3, r7, #12
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 8004624:	2303      	movs	r3, #3
 8004626:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	b29b      	uxth	r3, r3
 800462e:	b2db      	uxtb	r3, r3
 8004630:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	01db      	lsls	r3, r3, #7
 8004636:	b2db      	uxtb	r3, r3
 8004638:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 800463a:	2300      	movs	r3, #0
 800463c:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 800463e:	2200      	movs	r2, #0
 8004640:	2110      	movs	r1, #16
 8004642:	4815      	ldr	r0, [pc, #84]	; (8004698 <sampler_ram_clear_test+0xa8>)
 8004644:	f004 fc8a 	bl	8008f5c <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 8004648:	f107 0208 	add.w	r2, r7, #8
 800464c:	f107 0108 	add.w	r1, r7, #8
 8004650:	2364      	movs	r3, #100	; 0x64
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	2318      	movs	r3, #24
 8004656:	4811      	ldr	r0, [pc, #68]	; (800469c <sampler_ram_clear_test+0xac>)
 8004658:	f006 fa8f 	bl	800ab7a <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 800465c:	2201      	movs	r2, #1
 800465e:	2110      	movs	r1, #16
 8004660:	480d      	ldr	r0, [pc, #52]	; (8004698 <sampler_ram_clear_test+0xa8>)
 8004662:	f004 fc7b 	bl	8008f5c <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 8004666:	2300      	movs	r3, #0
 8004668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800466c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004670:	2b13      	cmp	r3, #19
 8004672:	d80c      	bhi.n	800468e <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 8004674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004678:	3314      	adds	r3, #20
 800467a:	3328      	adds	r3, #40	; 0x28
 800467c:	443b      	add	r3, r7
 800467e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004682:	2bff      	cmp	r3, #255	; 0xff
 8004684:	d001      	beq.n	800468a <sampler_ram_clear_test+0x9a>
 8004686:	2300      	movs	r3, #0
 8004688:	e002      	b.n	8004690 <sampler_ram_clear_test+0xa0>
 800468a:	230f      	movs	r3, #15
 800468c:	e000      	b.n	8004690 <sampler_ram_clear_test+0xa0>

	}
	return 15;
 800468e:	230f      	movs	r3, #15
    }
 8004690:	4618      	mov	r0, r3
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40020000 	.word	0x40020000
 800469c:	20012310 	.word	0x20012310

080046a0 <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b0c8      	sub	sp, #288	; 0x120
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046ae:	6019      	str	r1, [r3, #0]
 80046b0:	4611      	mov	r1, r2
 80046b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046b6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80046ba:	4602      	mov	r2, r0
 80046bc:	801a      	strh	r2, [r3, #0]
 80046be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046c6:	460a      	mov	r2, r1
 80046c8:	801a      	strh	r2, [r3, #0]

		stop_toggle=1;  stop_start();   // halt for slow write
 80046ca:	4bad      	ldr	r3, [pc, #692]	; (8004980 <sample_save+0x2e0>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
 80046d0:	f002 f888 	bl	80067e4 <stop_start>

		uint8_t spi_test[270]={0};
 80046d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	3304      	adds	r3, #4
 80046e2:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f008 fe1b 	bl	800d324 <memset>
		if (sample_number>509) return ;
 80046ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80046f2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80046fc:	f080 8139 	bcs.w	8004972 <sample_save+0x2d2>



			spi_test[1]=sample_number>>1; //24bit address msb
 8004700:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004704:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004714:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004718:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 800471a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800471e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	01db      	lsls	r3, r3, #7
 8004726:	b2da      	uxtb	r2, r3
 8004728:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800472c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004730:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 8004732:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004736:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800473a:	2200      	movs	r2, #0
 800473c:	70da      	strb	r2, [r3, #3]

				//----formAT SECTION
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 800473e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004742:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004746:	2206      	movs	r2, #6
 8004748:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 800474a:	2200      	movs	r2, #0
 800474c:	2110      	movs	r1, #16
 800474e:	488d      	ldr	r0, [pc, #564]	; (8004984 <sample_save+0x2e4>)
 8004750:	f004 fc04 	bl	8008f5c <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 8004754:	f107 010c 	add.w	r1, r7, #12
 8004758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800475c:	2201      	movs	r2, #1
 800475e:	488a      	ldr	r0, [pc, #552]	; (8004988 <sample_save+0x2e8>)
 8004760:	f006 f8cf 	bl	800a902 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8004764:	2201      	movs	r2, #1
 8004766:	2110      	movs	r1, #16
 8004768:	4886      	ldr	r0, [pc, #536]	; (8004984 <sample_save+0x2e4>)
 800476a:	f004 fbf7 	bl	8008f5c <HAL_GPIO_WritePin>
					HAL_Delay(5);
 800476e:	2005      	movs	r0, #5
 8004770:	f002 fcea 	bl	8007148 <HAL_Delay>
					spi_test[0]=0x52; //block
 8004774:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004778:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800477c:	2252      	movs	r2, #82	; 0x52
 800477e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8004780:	2200      	movs	r2, #0
 8004782:	2110      	movs	r1, #16
 8004784:	487f      	ldr	r0, [pc, #508]	; (8004984 <sample_save+0x2e4>)
 8004786:	f004 fbe9 	bl	8008f5c <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 800478a:	f107 010c 	add.w	r1, r7, #12
 800478e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004792:	2204      	movs	r2, #4
 8004794:	487c      	ldr	r0, [pc, #496]	; (8004988 <sample_save+0x2e8>)
 8004796:	f006 f8b4 	bl	800a902 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800479a:	2201      	movs	r2, #1
 800479c:	2110      	movs	r1, #16
 800479e:	4879      	ldr	r0, [pc, #484]	; (8004984 <sample_save+0x2e4>)
 80047a0:	f004 fbdc 	bl	8008f5c <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 80047a4:	20fa      	movs	r0, #250	; 0xfa
 80047a6:	f002 fccf 	bl	8007148 <HAL_Delay>



					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 80047aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047ae:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff1b 	bl	80045f0 <sampler_ram_clear_test>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80da 	beq.w	8004976 <sample_save+0x2d6>


		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 80047c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80047ca:	2203      	movs	r2, #3
 80047cc:	701a      	strb	r2, [r3, #0]

			uint16_t write_counter=0;    // write start location
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 80047d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047d8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80047dc:	881b      	ldrh	r3, [r3, #0]
 80047de:	01db      	lsls	r3, r3, #7
 80047e0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 80047e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80047e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	0a1b      	lsrs	r3, r3, #8
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 80047f6:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da02      	bge.n	8004804 <sample_save+0x164>
 80047fe:	237f      	movs	r3, #127	; 0x7f
 8004800:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 8004804:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004808:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800480c:	2206      	movs	r2, #6
 800480e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8004810:	2200      	movs	r2, #0
 8004812:	2110      	movs	r1, #16
 8004814:	485b      	ldr	r0, [pc, #364]	; (8004984 <sample_save+0x2e4>)
 8004816:	f004 fba1 	bl	8008f5c <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 800481a:	f107 010c 	add.w	r1, r7, #12
 800481e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004822:	2201      	movs	r2, #1
 8004824:	4858      	ldr	r0, [pc, #352]	; (8004988 <sample_save+0x2e8>)
 8004826:	f006 f86c 	bl	800a902 <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800482a:	2201      	movs	r2, #1
 800482c:	2110      	movs	r1, #16
 800482e:	4855      	ldr	r0, [pc, #340]	; (8004984 <sample_save+0x2e4>)
 8004830:	f004 fb94 	bl	8008f5c <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8004834:	2005      	movs	r0, #5
 8004836:	f002 fc87 	bl	8007148 <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 800483a:	2300      	movs	r3, #0
 800483c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004840:	e06f      	b.n	8004922 <sample_save+0x282>

					    spi_test[0]=0x02; //write
 8004842:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004846:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800484a:	2202      	movs	r2, #2
 800484c:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 800484e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004852:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	085b      	lsrs	r3, r3, #1
 800485a:	b29b      	uxth	r3, r3
 800485c:	b2da      	uxtb	r2, r3
 800485e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004862:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004866:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8004868:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800486c:	b2da      	uxtb	r2, r3
 800486e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8004872:	4413      	add	r3, r2
 8004874:	b2da      	uxtb	r2, r3
 8004876:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800487a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800487e:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 8004880:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004884:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004888:	2200      	movs	r2, #0
 800488a:	70da      	strb	r2, [r3, #3]

					//   spi_test[1]=255; //24bit address msb
					    			//		spi_test[2]=127+write_counter; //24bit address
					    			//		spi_test[3]=0; //24bit address lsb

					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	3304      	adds	r3, #4
 8004892:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8004896:	0212      	lsls	r2, r2, #8
 8004898:	4611      	mov	r1, r2
 800489a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800489e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80048a2:	6812      	ldr	r2, [r2, #0]
 80048a4:	4411      	add	r1, r2
 80048a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048aa:	4618      	mov	r0, r3
 80048ac:	f008 fd2c 	bl	800d308 <memcpy>

					    spi_test[0]=0x06; //enable write each time
 80048b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048b4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048b8:	2206      	movs	r2, #6
 80048ba:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80048bc:	2200      	movs	r2, #0
 80048be:	2110      	movs	r1, #16
 80048c0:	4830      	ldr	r0, [pc, #192]	; (8004984 <sample_save+0x2e4>)
 80048c2:	f004 fb4b 	bl	8008f5c <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 80048c6:	f107 010c 	add.w	r1, r7, #12
 80048ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048ce:	2201      	movs	r2, #1
 80048d0:	482d      	ldr	r0, [pc, #180]	; (8004988 <sample_save+0x2e8>)
 80048d2:	f006 f816 	bl	800a902 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80048d6:	2201      	movs	r2, #1
 80048d8:	2110      	movs	r1, #16
 80048da:	482a      	ldr	r0, [pc, #168]	; (8004984 <sample_save+0x2e4>)
 80048dc:	f004 fb3e 	bl	8008f5c <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 80048e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80048e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80048e8:	2202      	movs	r2, #2
 80048ea:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 80048ec:	2200      	movs	r2, #0
 80048ee:	2110      	movs	r1, #16
 80048f0:	4824      	ldr	r0, [pc, #144]	; (8004984 <sample_save+0x2e4>)
 80048f2:	f004 fb33 	bl	8008f5c <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 80048f6:	f107 010c 	add.w	r1, r7, #12
 80048fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048fe:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004902:	4821      	ldr	r0, [pc, #132]	; (8004988 <sample_save+0x2e8>)
 8004904:	f005 fffd 	bl	800a902 <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 8004908:	2201      	movs	r2, #1
 800490a:	2110      	movs	r1, #16
 800490c:	481d      	ldr	r0, [pc, #116]	; (8004984 <sample_save+0x2e4>)
 800490e:	f004 fb25 	bl	8008f5c <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8004912:	200a      	movs	r0, #10
 8004914:	f002 fc18 	bl	8007148 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8004918:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800491c:	3301      	adds	r3, #1
 800491e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8004922:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8004926:	b29b      	uxth	r3, r3
 8004928:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800492c:	429a      	cmp	r2, r3
 800492e:	d988      	bls.n	8004842 <sample_save+0x1a2>

					}


					spi_test[0]=0x04; //disable write
 8004930:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8004934:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004938:	2204      	movs	r2, #4
 800493a:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 800493c:	2200      	movs	r2, #0
 800493e:	2110      	movs	r1, #16
 8004940:	4810      	ldr	r0, [pc, #64]	; (8004984 <sample_save+0x2e4>)
 8004942:	f004 fb0b 	bl	8008f5c <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8004946:	f107 010c 	add.w	r1, r7, #12
 800494a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800494e:	2201      	movs	r2, #1
 8004950:	480d      	ldr	r0, [pc, #52]	; (8004988 <sample_save+0x2e8>)
 8004952:	f005 ffd6 	bl	800a902 <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8004956:	2201      	movs	r2, #1
 8004958:	2110      	movs	r1, #16
 800495a:	480a      	ldr	r0, [pc, #40]	; (8004984 <sample_save+0x2e4>)
 800495c:	f004 fafe 	bl	8008f5c <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8004960:	2014      	movs	r0, #20
 8004962:	f002 fbf1 	bl	8007148 <HAL_Delay>


	 stop_toggle=2;  stop_start();  		// restart
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <sample_save+0x2e0>)
 8004968:	2202      	movs	r2, #2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	f001 ff3a 	bl	80067e4 <stop_start>
 8004970:	e002      	b.n	8004978 <sample_save+0x2d8>
		if (sample_number>509) return ;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <sample_save+0x2d8>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8004976:	bf00      	nop

	    }
 8004978:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20011db8 	.word	0x20011db8
 8004984:	40020000 	.word	0x40020000
 8004988:	20012310 	.word	0x20012310

0800498c <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 800498c:	b580      	push	{r7, lr}
 800498e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004992:	af00      	add	r7, sp, #0
 8004994:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004998:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800499c:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 800499e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049a2:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	3304      	adds	r3, #4
 80049ac:	f240 4202 	movw	r2, #1026	; 0x402
 80049b0:	2100      	movs	r1, #0
 80049b2:	4618      	mov	r0, r3
 80049b4:	f008 fcb6 	bl	800d324 <memset>

	    load_address=load_address& 16777215; // 24 bit
 80049b8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049bc:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80049c0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80049c4:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80049ce:	601a      	str	r2, [r3, #0]
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 80049d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049d4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4c      	ldr	r2, [pc, #304]	; (8004b0c <sampler_1k_load+0x180>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	f200 808f 	bhi.w	8004b00 <sampler_1k_load+0x174>
	    send_spi2[0]=0x03; //read page 1
 80049e2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049e6:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80049ea:	2203      	movs	r2, #3
 80049ec:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 80049ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049f2:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a00:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a04:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 8004a06:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a0a:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0a1b      	lsrs	r3, r3, #8
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a18:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a1c:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 8004a1e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a22:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a2e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a32:	70da      	strb	r2, [r3, #3]

	    current_spi[0]=send_spi2[0];   // to track  later
 8004a34:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a38:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <sampler_1k_load+0x184>)
 8004a40:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 8004a42:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a46:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a4a:	785a      	ldrb	r2, [r3, #1]
 8004a4c:	4b30      	ldr	r3, [pc, #192]	; (8004b10 <sampler_1k_load+0x184>)
 8004a4e:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 8004a50:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a54:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a58:	789a      	ldrb	r2, [r3, #2]
 8004a5a:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <sampler_1k_load+0x184>)
 8004a5c:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 8004a5e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004a62:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8004a66:	78da      	ldrb	r2, [r3, #3]
 8004a68:	4b29      	ldr	r3, [pc, #164]	; (8004b10 <sampler_1k_load+0x184>)
 8004a6a:	70da      	strb	r2, [r3, #3]

	    if ((flash_flag==3)&&(flash_bank_read==0))  {   memcpy( &flash_read_block, flash_read_block2+516,512); flash_flag=4; }  // second half
 8004a6c:	4b29      	ldr	r3, [pc, #164]	; (8004b14 <sampler_1k_load+0x188>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d10d      	bne.n	8004a92 <sampler_1k_load+0x106>
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <sampler_1k_load+0x18c>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <sampler_1k_load+0x106>
 8004a7e:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <sampler_1k_load+0x190>)
 8004a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a84:	4619      	mov	r1, r3
 8004a86:	4826      	ldr	r0, [pc, #152]	; (8004b20 <sampler_1k_load+0x194>)
 8004a88:	f008 fc3e 	bl	800d308 <memcpy>
 8004a8c:	4b21      	ldr	r3, [pc, #132]	; (8004b14 <sampler_1k_load+0x188>)
 8004a8e:	2204      	movs	r2, #4
 8004a90:	701a      	strb	r2, [r3, #0]
	    if ((flash_flag==2)&&(flash_bank_read==1))   {   memcpy( &flash_read_block, flash_read_block2+4,512);   flash_flag=3;           }  // second half
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <sampler_1k_load+0x188>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d10d      	bne.n	8004ab8 <sampler_1k_load+0x12c>
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <sampler_1k_load+0x18c>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d109      	bne.n	8004ab8 <sampler_1k_load+0x12c>
 8004aa4:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <sampler_1k_load+0x198>)
 8004aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aaa:	4619      	mov	r1, r3
 8004aac:	481c      	ldr	r0, [pc, #112]	; (8004b20 <sampler_1k_load+0x194>)
 8004aae:	f008 fc2b 	bl	800d308 <memcpy>
 8004ab2:	4b18      	ldr	r3, [pc, #96]	; (8004b14 <sampler_1k_load+0x188>)
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	701a      	strb	r2, [r3, #0]
	    flash_bank_read=!flash_bank_read;
 8004ab8:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <sampler_1k_load+0x18c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <sampler_1k_load+0x18c>)
 8004aca:	701a      	strb	r2, [r3, #0]

		    if ((flash_flag==4)&&  (flash_bank_read==1) )    {
 8004acc:	4b11      	ldr	r3, [pc, #68]	; (8004b14 <sampler_1k_load+0x188>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d115      	bne.n	8004b02 <sampler_1k_load+0x176>
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <sampler_1k_load+0x18c>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d111      	bne.n	8004b02 <sampler_1k_load+0x176>

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2110      	movs	r1, #16
 8004ae2:	4811      	ldr	r0, [pc, #68]	; (8004b28 <sampler_1k_load+0x19c>)
 8004ae4:	f004 fa3a 	bl	8008f5c <HAL_GPIO_WritePin>
 8004ae8:	f107 0108 	add.w	r1, r7, #8
 8004aec:	f240 4304 	movw	r3, #1028	; 0x404
 8004af0:	4a0e      	ldr	r2, [pc, #56]	; (8004b2c <sampler_1k_load+0x1a0>)
 8004af2:	480f      	ldr	r0, [pc, #60]	; (8004b30 <sampler_1k_load+0x1a4>)
 8004af4:	f006 fa9a 	bl	800b02c <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible internet advice , put cs low before not after  !
		    flash_flag=0;  }
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <sampler_1k_load+0x188>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <sampler_1k_load+0x176>
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8004b00:	bf00      	nop

	}
 8004b02:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	00febfff 	.word	0x00febfff
 8004b10:	20011db4 	.word	0x20011db4
 8004b14:	20008f04 	.word	0x20008f04
 8004b18:	20011dae 	.word	0x20011dae
 8004b1c:	20011bac 	.word	0x20011bac
 8004b20:	20011794 	.word	0x20011794
 8004b24:	200119ac 	.word	0x200119ac
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	200119a8 	.word	0x200119a8
 8004b30:	20012310 	.word	0x20012310

08004b34 <sampler_ram_record>:
void sampler_ram_record(void) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <sampler_ram_record+0x64>)
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <sampler_ram_record+0x16>
 8004b40:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <sampler_ram_record+0x68>)
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	f001 fe4d 	bl	80067e4 <stop_start>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <sampler_ram_record+0x64>)
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <sampler_ram_record+0x6c>)
 8004b52:	4413      	add	r3, r2
 8004b54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b58:	4912      	ldr	r1, [pc, #72]	; (8004ba4 <sampler_ram_record+0x70>)
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f008 fbd4 	bl	800d308 <memcpy>
	record_counter =record_counter+1024;
 8004b60:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <sampler_ram_record+0x64>)
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <sampler_ram_record+0x64>)
 8004b6c:	801a      	strh	r2, [r3, #0]
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 8004b6e:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <sampler_ram_record+0x64>)
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d90c      	bls.n	8004b94 <sampler_ram_record+0x60>
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <sampler_ram_record+0x64>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	4b09      	ldr	r3, [pc, #36]	; (8004ba8 <sampler_ram_record+0x74>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	739a      	strb	r2, [r3, #14]
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <sampler_ram_record+0x68>)
 8004b88:	2202      	movs	r2, #2
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	f000 f810 	bl	8004bb0 <RAM_normalise>
 8004b90:	f001 fe28 	bl	80067e4 <stop_start>

	}
 8004b94:	bf00      	nop
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20011dc0 	.word	0x20011dc0
 8004b9c:	20011db8 	.word	0x20011db8
 8004ba0:	200001b0 	.word	0x200001b0
 8004ba4:	2000cac4 	.word	0x2000cac4
 8004ba8:	20008ed4 	.word	0x20008ed4
 8004bac:	00000000 	.word	0x00000000

08004bb0 <RAM_normalise>:

void RAM_normalise(void){
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
	    uint16_t counter=0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	81fb      	strh	r3, [r7, #14]
	    uint16_t peak=0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	81bb      	strh	r3, [r7, #12]
	    uint16_t*   ram_ptr=  &RAM;
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <RAM_normalise+0xe8>)
 8004bc0:	60bb      	str	r3, [r7, #8]
	    float process1=32767 ;
 8004bc2:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <RAM_normalise+0xec>)
 8004bc4:	607b      	str	r3, [r7, #4]
	   int32_t incoming;
	    for (counter=0;counter<16384;counter++){
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	81fb      	strh	r3, [r7, #14]
 8004bca:	e00e      	b.n	8004bea <RAM_normalise+0x3a>

		incoming= *(ram_ptr+counter);
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	603b      	str	r3, [r7, #0]
		if (incoming>peak ) peak=incoming;
 8004bd8:	89bb      	ldrh	r3, [r7, #12]
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	dd01      	ble.n	8004be4 <RAM_normalise+0x34>
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	81bb      	strh	r3, [r7, #12]
	    for (counter=0;counter<16384;counter++){
 8004be4:	89fb      	ldrh	r3, [r7, #14]
 8004be6:	3301      	adds	r3, #1
 8004be8:	81fb      	strh	r3, [r7, #14]
 8004bea:	89fb      	ldrh	r3, [r7, #14]
 8004bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bf0:	d3ec      	bcc.n	8004bcc <RAM_normalise+0x1c>
	    }
	    process1=(32767/(peak-process1))*0.9;
 8004bf2:	89bb      	ldrh	r3, [r7, #12]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c04:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004ca0 <RAM_normalise+0xf0>
 8004c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c0c:	ee16 0a90 	vmov	r0, s13
 8004c10:	f7fb fd78 	bl	8000704 <__aeabi_f2d>
 8004c14:	a31e      	add	r3, pc, #120	; (adr r3, 8004c90 <RAM_normalise+0xe0>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	f7fb fae5 	bl	80001e8 <__aeabi_dmul>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f7fb fde5 	bl	80007f4 <__aeabi_d2f>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	607b      	str	r3, [r7, #4]

	    for (counter=0;counter<16384;counter++){
 8004c2e:	2300      	movs	r3, #0
 8004c30:	81fb      	strh	r3, [r7, #14]
 8004c32:	e024      	b.n	8004c7e <RAM_normalise+0xce>
		incoming= (*(ram_ptr+counter))-32767;
 8004c34:	89fb      	ldrh	r3, [r7, #14]
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8004c42:	3b7f      	subs	r3, #127	; 0x7f
 8004c44:	603b      	str	r3, [r7, #0]
		incoming=(incoming*process1)+32767;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c50:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c58:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004ca0 <RAM_normalise+0xf0>
 8004c5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c64:	ee17 3a90 	vmov	r3, s15
 8004c68:	603b      	str	r3, [r7, #0]

		*(ram_ptr+counter)=incoming&65535;
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4413      	add	r3, r2
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	b292      	uxth	r2, r2
 8004c76:	801a      	strh	r2, [r3, #0]
	    for (counter=0;counter<16384;counter++){
 8004c78:	89fb      	ldrh	r3, [r7, #14]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	81fb      	strh	r3, [r7, #14]
 8004c7e:	89fb      	ldrh	r3, [r7, #14]
 8004c80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c84:	d3d6      	bcc.n	8004c34 <RAM_normalise+0x84>

	    }

	}
 8004c86:	bf00      	nop
 8004c88:	bf00      	nop
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	cccccccd 	.word	0xcccccccd
 8004c94:	3feccccc 	.word	0x3feccccc
 8004c98:	200001b0 	.word	0x200001b0
 8004c9c:	46fffe00 	.word	0x46fffe00
 8004ca0:	46fffe00 	.word	0x46fffe00

08004ca4 <record_output_to_RAM>:
void record_output_to_RAM(void){
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
//	  if (sampler.record_enable)  { return;} // skip if recording already
    memcpy(	&RAM[record_out_counter], output_mix,512);   // transfer
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <record_output_to_RAM+0x48>)
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <record_output_to_RAM+0x4c>)
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb6:	490f      	ldr	r1, [pc, #60]	; (8004cf4 <record_output_to_RAM+0x50>)
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f008 fb25 	bl	800d308 <memcpy>
    record_out_counter =record_out_counter+512;
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <record_output_to_RAM+0x48>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	4b08      	ldr	r3, [pc, #32]	; (8004cec <record_output_to_RAM+0x48>)
 8004cca:	801a      	strh	r2, [r3, #0]
if (record_out_counter>=32767) { record_out_counter=0; record_output=0;
 8004ccc:	4b07      	ldr	r3, [pc, #28]	; (8004cec <record_output_to_RAM+0x48>)
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d907      	bls.n	8004ce8 <record_output_to_RAM+0x44>
 8004cd8:	4b04      	ldr	r3, [pc, #16]	; (8004cec <record_output_to_RAM+0x48>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <record_output_to_RAM+0x54>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]

						RAM_normalise();   }  // reset and stop record RAM_normalise();
 8004ce4:	f7ff ff64 	bl	8004bb0 <RAM_normalise>

		     }
 8004ce8:	bf00      	nop
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	200121c8 	.word	0x200121c8
 8004cf0:	200001b0 	.word	0x200001b0
 8004cf4:	20011dc8 	.word	0x20011dc8
 8004cf8:	20011dc5 	.word	0x20011dc5

08004cfc <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8004cfc:	b490      	push	{r4, r7}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos>>3 ;
 8004d02:	4b42      	ldr	r3, [pc, #264]	; (8004e0c <LFO_square_one_pulse+0x110>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	08db      	lsrs	r3, r3, #3
 8004d08:	717b      	strb	r3, [r7, #5]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8004d0a:	2307      	movs	r3, #7
 8004d0c:	71fb      	strb	r3, [r7, #7]
	uint8_t lfo_c ;
	//uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t pulse_high;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8004d0e:	2300      	movs	r3, #0
 8004d10:	71bb      	strb	r3, [r7, #6]
 8004d12:	e071      	b.n	8004df8 <LFO_square_one_pulse+0xfc>

	    pulse_low=LFO_square[lfo_c].rate;
 8004d14:	79ba      	ldrb	r2, [r7, #6]
 8004d16:	493e      	ldr	r1, [pc, #248]	; (8004e10 <LFO_square_one_pulse+0x114>)
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	713b      	strb	r3, [r7, #4]
	 //   if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
	    pulse_high=LFO_square[lfo_c].delay;
 8004d26:	79ba      	ldrb	r2, [r7, #6]
 8004d28:	4939      	ldr	r1, [pc, #228]	; (8004e10 <LFO_square_one_pulse+0x114>)
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	3303      	adds	r3, #3
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	70fb      	strb	r3, [r7, #3]

	    if (pulse_low<64) 						 {seq_div=63;}  // This is the end
 8004d3a:	793b      	ldrb	r3, [r7, #4]
 8004d3c:	2b3f      	cmp	r3, #63	; 0x3f
 8004d3e:	d801      	bhi.n	8004d44 <LFO_square_one_pulse+0x48>
 8004d40:	233f      	movs	r3, #63	; 0x3f
 8004d42:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<32) 								 {seq_div=31;}
 8004d44:	793b      	ldrb	r3, [r7, #4]
 8004d46:	2b1f      	cmp	r3, #31
 8004d48:	d801      	bhi.n	8004d4e <LFO_square_one_pulse+0x52>
 8004d4a:	231f      	movs	r3, #31
 8004d4c:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<16) 								{ seq_div=15;}
 8004d4e:	793b      	ldrb	r3, [r7, #4]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d801      	bhi.n	8004d58 <LFO_square_one_pulse+0x5c>
 8004d54:	230f      	movs	r3, #15
 8004d56:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<8) 									 {seq_div=7;}
 8004d58:	793b      	ldrb	r3, [r7, #4]
 8004d5a:	2b07      	cmp	r3, #7
 8004d5c:	d801      	bhi.n	8004d62 <LFO_square_one_pulse+0x66>
 8004d5e:	2307      	movs	r3, #7
 8004d60:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<4) 									 {seq_div=3;}
 8004d62:	793b      	ldrb	r3, [r7, #4]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d801      	bhi.n	8004d6c <LFO_square_one_pulse+0x70>
 8004d68:	2303      	movs	r3, #3
 8004d6a:	71fb      	strb	r3, [r7, #7]
	    //pulse_high=(pulse_high*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8004d6c:	797a      	ldrb	r2, [r7, #5]
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	4013      	ands	r3, r2
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	793a      	ldrb	r2, [r7, #4]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d321      	bcc.n	8004dbe <LFO_square_one_pulse+0xc2>
 8004d7a:	797a      	ldrb	r2, [r7, #5]
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d81a      	bhi.n	8004dbe <LFO_square_one_pulse+0xc2>
 8004d88:	79ba      	ldrb	r2, [r7, #6]
 8004d8a:	4921      	ldr	r1, [pc, #132]	; (8004e10 <LFO_square_one_pulse+0x114>)
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	3301      	adds	r3, #1
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	79ba      	ldrb	r2, [r7, #6]
 8004d9e:	491d      	ldr	r1, [pc, #116]	; (8004e14 <LFO_square_one_pulse+0x118>)
 8004da0:	7809      	ldrb	r1, [r1, #0]
 8004da2:	460c      	mov	r4, r1
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	b298      	uxth	r0, r3
 8004da8:	4919      	ldr	r1, [pc, #100]	; (8004e10 <LFO_square_one_pulse+0x114>)
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4423      	add	r3, r4
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	440b      	add	r3, r1
 8004db8:	4602      	mov	r2, r0
 8004dba:	809a      	strh	r2, [r3, #4]
 8004dbc:	e019      	b.n	8004df2 <LFO_square_one_pulse+0xf6>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8004dbe:	79ba      	ldrb	r2, [r7, #6]
 8004dc0:	4913      	ldr	r1, [pc, #76]	; (8004e10 <LFO_square_one_pulse+0x114>)
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3302      	adds	r3, #2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	79ba      	ldrb	r2, [r7, #6]
 8004dd4:	490f      	ldr	r1, [pc, #60]	; (8004e14 <LFO_square_one_pulse+0x118>)
 8004dd6:	7809      	ldrb	r1, [r1, #0]
 8004dd8:	460c      	mov	r4, r1
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	b298      	uxth	r0, r3
 8004dde:	490c      	ldr	r1, [pc, #48]	; (8004e10 <LFO_square_one_pulse+0x114>)
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	4423      	add	r3, r4
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	440b      	add	r3, r1
 8004dee:	4602      	mov	r2, r0
 8004df0:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8004df2:	79bb      	ldrb	r3, [r7, #6]
 8004df4:	3301      	adds	r3, #1
 8004df6:	71bb      	strb	r3, [r7, #6]
 8004df8:	79bb      	ldrb	r3, [r7, #6]
 8004dfa:	2b09      	cmp	r3, #9
 8004dfc:	d98a      	bls.n	8004d14 <LFO_square_one_pulse+0x18>

	}
    }
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc90      	pop	{r4, r7}
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	2000d314 	.word	0x2000d314
 8004e10:	2000d1b4 	.word	0x2000d1b4
 8004e14:	2000e2d0 	.word	0x2000e2d0

08004e18 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok , half phase
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b08d      	sub	sp, #52	; 0x34
 8004e1c:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e3e:	e117      	b.n	8005070 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 8004e40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e44:	4992      	ldr	r1, [pc, #584]	; (8005090 <LFO_source_synced+0x278>)
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 8004e54:	8b7b      	ldrh	r3, [r7, #26]
 8004e56:	2b0a      	cmp	r3, #10
 8004e58:	d901      	bls.n	8004e5e <LFO_source_synced+0x46>
 8004e5a:	230a      	movs	r3, #10
 8004e5c:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	; (8005094 <LFO_source_synced+0x27c>)
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	8b7b      	ldrh	r3, [r7, #26]
 8004e66:	2201      	movs	r2, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	400b      	ands	r3, r1
 8004e70:	8b7a      	ldrh	r2, [r7, #26]
 8004e72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e76:	fa41 f202 	asr.w	r2, r1, r2
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8004e80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e84:	4982      	ldr	r1, [pc, #520]	; (8005090 <LFO_source_synced+0x278>)
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	4413      	add	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	440b      	add	r3, r1
 8004e90:	3304      	adds	r3, #4
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	035b      	lsls	r3, r3, #13
 8004e9a:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8004e9c:	68b8      	ldr	r0, [r7, #8]
 8004e9e:	f7fb fc0f 	bl	80006c0 <__aeabi_ui2d>
 8004ea2:	a379      	add	r3, pc, #484	; (adr r3, 8005088 <LFO_source_synced+0x270>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f7fb f99e 	bl	80001e8 <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	f7fb fc9e 	bl	80007f4 <__aeabi_d2f>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8004ebc:	ed97 0a05 	vldr	s0, [r7, #20]
 8004ec0:	f008 f9b0 	bl	800d224 <arm_sin_f32>
 8004ec4:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8004ec8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004ecc:	4970      	ldr	r1, [pc, #448]	; (8005090 <LFO_source_synced+0x278>)
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3301      	adds	r3, #1
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee4:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8004ee8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004eec:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005098 <LFO_source_synced+0x280>
 8004ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004efc:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8004f0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f0e:	4960      	ldr	r1, [pc, #384]	; (8005090 <LFO_source_synced+0x278>)
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	3303      	adds	r3, #3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f28:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 8004f2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f34:	ee17 3a90 	vmov	r3, s15
 8004f38:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8004f3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f46:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8004f4a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f4e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800509c <LFO_source_synced+0x284>
 8004f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	dd01      	ble.n	8004f60 <LFO_source_synced+0x148>
 8004f5c:	4b50      	ldr	r3, [pc, #320]	; (80050a0 <LFO_source_synced+0x288>)
 8004f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8004f60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f68:	ee17 3a90 	vmov	r3, s15
 8004f6c:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d902      	bls.n	8004f7e <LFO_source_synced+0x166>
 8004f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004f7c:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8004f7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004f82:	4943      	ldr	r1, [pc, #268]	; (8005090 <LFO_source_synced+0x278>)
 8004f84:	4613      	mov	r3, r2
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	3301      	adds	r3, #1
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	0a1b      	lsrs	r3, r3, #8
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d902      	bls.n	8004fb2 <LFO_source_synced+0x19a>
 8004fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8004fb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <LFO_source_synced+0x28c>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	461c      	mov	r4, r3
 8004fbc:	8878      	ldrh	r0, [r7, #2]
 8004fbe:	4934      	ldr	r1, [pc, #208]	; (8005090 <LFO_source_synced+0x278>)
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4423      	add	r3, r4
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	440b      	add	r3, r1
 8004fce:	4602      	mov	r2, r0
 8004fd0:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8004fd2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004fd6:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <LFO_source_synced+0x28c>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	461c      	mov	r4, r3
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	b298      	uxth	r0, r3
 8004fe0:	492b      	ldr	r1, [pc, #172]	; (8005090 <LFO_source_synced+0x278>)
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	4413      	add	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4423      	add	r3, r4
 8004fec:	330c      	adds	r3, #12
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	440b      	add	r3, r1
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffc:	d202      	bcs.n	8005004 <LFO_source_synced+0x1ec>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	623b      	str	r3, [r7, #32]
 8005002:	e003      	b.n	800500c <LFO_source_synced+0x1f4>
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 800500a:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 800500c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005010:	491f      	ldr	r1, [pc, #124]	; (8005090 <LFO_source_synced+0x278>)
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	4413      	add	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3301      	adds	r3, #1
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	11db      	asrs	r3, r3, #7
 800502a:	461a      	mov	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4413      	add	r3, r2
 8005030:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005038:	4293      	cmp	r3, r2
 800503a:	dd02      	ble.n	8005042 <LFO_source_synced+0x22a>
 800503c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005040:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8005042:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005046:	4b17      	ldr	r3, [pc, #92]	; (80050a4 <LFO_source_synced+0x28c>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	461c      	mov	r4, r3
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	b298      	uxth	r0, r3
 8005050:	490f      	ldr	r1, [pc, #60]	; (8005090 <LFO_source_synced+0x278>)
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	4413      	add	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4423      	add	r3, r4
 800505c:	3314      	adds	r3, #20
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	440b      	add	r3, r1
 8005062:	4602      	mov	r2, r0
 8005064:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8005066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800506a:	3301      	adds	r3, #1
 800506c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005074:	2b09      	cmp	r3, #9
 8005076:	f67f aee3 	bls.w	8004e40 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 800507a:	bf00      	nop
 800507c:	bf00      	nop
 800507e:	3734      	adds	r7, #52	; 0x34
 8005080:	46bd      	mov	sp, r7
 8005082:	bd90      	pop	{r4, r7, pc}
 8005084:	f3af 8000 	nop.w
 8005088:	64dc8498 	.word	0x64dc8498
 800508c:	3f092213 	.word	0x3f092213
 8005090:	2000ced0 	.word	0x2000ced0
 8005094:	2000c0e4 	.word	0x2000c0e4
 8005098:	43800000 	.word	0x43800000
 800509c:	477ffe00 	.word	0x477ffe00
 80050a0:	477fff00 	.word	0x477fff00
 80050a4:	2000e2d0 	.word	0x2000e2d0

080050a8 <frq_point>:


void  frq_point(void){
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 80050ac:	4b84      	ldr	r3, [pc, #528]	; (80052c0 <frq_point+0x218>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	4a84      	ldr	r2, [pc, #528]	; (80052c4 <frq_point+0x21c>)
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a83      	ldr	r2, [pc, #524]	; (80052c8 <frq_point+0x220>)
 80050ba:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 80050bc:	4b80      	ldr	r3, [pc, #512]	; (80052c0 <frq_point+0x218>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4a80      	ldr	r2, [pc, #512]	; (80052c4 <frq_point+0x21c>)
 80050c2:	3309      	adds	r3, #9
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a7f      	ldr	r2, [pc, #508]	; (80052c8 <frq_point+0x220>)
 80050cc:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 80050ce:	4b7c      	ldr	r3, [pc, #496]	; (80052c0 <frq_point+0x218>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4a7c      	ldr	r2, [pc, #496]	; (80052c4 <frq_point+0x21c>)
 80050d4:	3312      	adds	r3, #18
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a7a      	ldr	r2, [pc, #488]	; (80052c8 <frq_point+0x220>)
 80050de:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 80050e0:	4b77      	ldr	r3, [pc, #476]	; (80052c0 <frq_point+0x218>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	4a77      	ldr	r2, [pc, #476]	; (80052c4 <frq_point+0x21c>)
 80050e6:	331b      	adds	r3, #27
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a76      	ldr	r2, [pc, #472]	; (80052c8 <frq_point+0x220>)
 80050f0:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 80050f2:	4b75      	ldr	r3, [pc, #468]	; (80052c8 <frq_point+0x220>)
 80050f4:	edd3 7a00 	vldr	s15, [r3]
 80050f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005104:	dd04      	ble.n	8005110 <frq_point+0x68>
 8005106:	4b70      	ldr	r3, [pc, #448]	; (80052c8 <frq_point+0x220>)
 8005108:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e00b      	b.n	8005128 <frq_point+0x80>
 8005110:	4b6d      	ldr	r3, [pc, #436]	; (80052c8 <frq_point+0x220>)
 8005112:	edd3 7a00 	vldr	s15, [r3]
 8005116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800511a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511e:	d503      	bpl.n	8005128 <frq_point+0x80>
 8005120:	4b69      	ldr	r3, [pc, #420]	; (80052c8 <frq_point+0x220>)
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8005128:	4b67      	ldr	r3, [pc, #412]	; (80052c8 <frq_point+0x220>)
 800512a:	edd3 7a04 	vldr	s15, [r3, #16]
 800512e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800513a:	dd04      	ble.n	8005146 <frq_point+0x9e>
 800513c:	4b62      	ldr	r3, [pc, #392]	; (80052c8 <frq_point+0x220>)
 800513e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005142:	611a      	str	r2, [r3, #16]
 8005144:	e00b      	b.n	800515e <frq_point+0xb6>
 8005146:	4b60      	ldr	r3, [pc, #384]	; (80052c8 <frq_point+0x220>)
 8005148:	edd3 7a04 	vldr	s15, [r3, #16]
 800514c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005154:	d503      	bpl.n	800515e <frq_point+0xb6>
 8005156:	4b5c      	ldr	r3, [pc, #368]	; (80052c8 <frq_point+0x220>)
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 800515e:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <frq_point+0x220>)
 8005160:	edd3 7a02 	vldr	s15, [r3, #8]
 8005164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800516c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005170:	dd04      	ble.n	800517c <frq_point+0xd4>
 8005172:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <frq_point+0x220>)
 8005174:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005178:	609a      	str	r2, [r3, #8]
 800517a:	e00b      	b.n	8005194 <frq_point+0xec>
 800517c:	4b52      	ldr	r3, [pc, #328]	; (80052c8 <frq_point+0x220>)
 800517e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518a:	d503      	bpl.n	8005194 <frq_point+0xec>
 800518c:	4b4e      	ldr	r3, [pc, #312]	; (80052c8 <frq_point+0x220>)
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 8005194:	4b4c      	ldr	r3, [pc, #304]	; (80052c8 <frq_point+0x220>)
 8005196:	edd3 7a06 	vldr	s15, [r3, #24]
 800519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a6:	dd04      	ble.n	80051b2 <frq_point+0x10a>
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <frq_point+0x220>)
 80051aa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80051ae:	619a      	str	r2, [r3, #24]
 80051b0:	e00b      	b.n	80051ca <frq_point+0x122>
 80051b2:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <frq_point+0x220>)
 80051b4:	edd3 7a06 	vldr	s15, [r3, #24]
 80051b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051c0:	d503      	bpl.n	80051ca <frq_point+0x122>
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <frq_point+0x220>)
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 80051ca:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <frq_point+0x220>)
 80051cc:	edd3 7a00 	vldr	s15, [r3]
 80051d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d8:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <frq_point+0x220>)
 80051da:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 80051de:	4b3a      	ldr	r3, [pc, #232]	; (80052c8 <frq_point+0x220>)
 80051e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80051e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ec:	4b36      	ldr	r3, [pc, #216]	; (80052c8 <frq_point+0x220>)
 80051ee:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 80051f2:	4b35      	ldr	r3, [pc, #212]	; (80052c8 <frq_point+0x220>)
 80051f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80051f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <frq_point+0x220>)
 8005202:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <frq_point+0x220>)
 8005208:	edd3 7a06 	vldr	s15, [r3, #24]
 800520c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005214:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <frq_point+0x220>)
 8005216:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 800521a:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <frq_point+0x220>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fb fa70 	bl	8000704 <__aeabi_f2d>
 8005224:	a324      	add	r3, pc, #144	; (adr r3, 80052b8 <frq_point+0x210>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fa ffdd 	bl	80001e8 <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4610      	mov	r0, r2
 8005234:	4619      	mov	r1, r3
 8005236:	f7fb fadd 	bl	80007f4 <__aeabi_d2f>
 800523a:	4603      	mov	r3, r0
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <frq_point+0x224>)
 800523e:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8005240:	4b21      	ldr	r3, [pc, #132]	; (80052c8 <frq_point+0x220>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fb fa5d 	bl	8000704 <__aeabi_f2d>
 800524a:	a31b      	add	r3, pc, #108	; (adr r3, 80052b8 <frq_point+0x210>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffca 	bl	80001e8 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	f7fb faca 	bl	80007f4 <__aeabi_d2f>
 8005260:	4603      	mov	r3, r0
 8005262:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <frq_point+0x224>)
 8005264:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <frq_point+0x220>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fb fa4a 	bl	8000704 <__aeabi_f2d>
 8005270:	a311      	add	r3, pc, #68	; (adr r3, 80052b8 <frq_point+0x210>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	f7fa ffb7 	bl	80001e8 <__aeabi_dmul>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	f7fb fab7 	bl	80007f4 <__aeabi_d2f>
 8005286:	4603      	mov	r3, r0
 8005288:	4a10      	ldr	r2, [pc, #64]	; (80052cc <frq_point+0x224>)
 800528a:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 800528c:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <frq_point+0x220>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4618      	mov	r0, r3
 8005292:	f7fb fa37 	bl	8000704 <__aeabi_f2d>
 8005296:	a308      	add	r3, pc, #32	; (adr r3, 80052b8 <frq_point+0x210>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f7fa ffa4 	bl	80001e8 <__aeabi_dmul>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	f7fb faa4 	bl	80007f4 <__aeabi_d2f>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4a07      	ldr	r2, [pc, #28]	; (80052cc <frq_point+0x224>)
 80052b0:	60d3      	str	r3, [r2, #12]

}
 80052b2:	bf00      	nop
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	9999999a 	.word	0x9999999a
 80052bc:	3fc99999 	.word	0x3fc99999
 80052c0:	2000e2d0 	.word	0x2000e2d0
 80052c4:	2000c1a0 	.word	0x2000c1a0
 80052c8:	2000c180 	.word	0x2000c180
 80052cc:	2000c130 	.word	0x2000c130

080052d0 <ADSR_loop>:


	}


void ADSR_loop(void){
 80052d0:	b490      	push	{r4, r7}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
		uint8_t counter;
		uint8_t ok=1;
 80052d6:	2301      	movs	r3, #1
 80052d8:	71bb      	strb	r3, [r7, #6]
		uint8_t ADSR_out=0;
 80052da:	2300      	movs	r3, #0
 80052dc:	717b      	strb	r3, [r7, #5]
		uint8_t position=sampling_position;
 80052de:	4ba1      	ldr	r3, [pc, #644]	; (8005564 <ADSR_loop+0x294>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	713b      	strb	r3, [r7, #4]
		//position=0;

		for (counter=0;counter<4;counter++){
 80052e4:	2300      	movs	r3, #0
 80052e6:	71fb      	strb	r3, [r7, #7]
 80052e8:	e181      	b.n	80055ee <ADSR_loop+0x31e>
		    ok=1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	71bb      	strb	r3, [r7, #6]
	while(ok){	      // do one thing then exit
 80052ee:	e141      	b.n	8005574 <ADSR_loop+0x2a4>
	    ADSR[counter].buffer[position]=0;
 80052f0:	79fa      	ldrb	r2, [r7, #7]
 80052f2:	7939      	ldrb	r1, [r7, #4]
 80052f4:	489c      	ldr	r0, [pc, #624]	; (8005568 <ADSR_loop+0x298>)
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	440b      	add	r3, r1
 80052fe:	3304      	adds	r3, #4
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	4403      	add	r3, r0
 8005304:	2200      	movs	r2, #0
 8005306:	80da      	strh	r2, [r3, #6]
	    ADSR[counter].sustain_data=ADSR[counter].sustain<<4;
 8005308:	79fa      	ldrb	r2, [r7, #7]
 800530a:	4997      	ldr	r1, [pc, #604]	; (8005568 <ADSR_loop+0x298>)
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	440b      	add	r3, r1
 8005316:	3302      	adds	r3, #2
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	79fa      	ldrb	r2, [r7, #7]
 800531e:	b218      	sxth	r0, r3
 8005320:	4991      	ldr	r1, [pc, #580]	; (8005568 <ADSR_loop+0x298>)
 8005322:	4613      	mov	r3, r2
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	440b      	add	r3, r1
 800532c:	330a      	adds	r3, #10
 800532e:	4602      	mov	r2, r0
 8005330:	801a      	strh	r2, [r3, #0]
      if ( note[counter].position) {   ADSR[counter].attack_data=1000;     ADSR[counter].decay_data=1000;
 8005332:	79fb      	ldrb	r3, [r7, #7]
 8005334:	4a8d      	ldr	r2, [pc, #564]	; (800556c <ADSR_loop+0x29c>)
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	4413      	add	r3, r2
 800533a:	3304      	adds	r3, #4
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d030      	beq.n	80053a4 <ADSR_loop+0xd4>
 8005342:	79fa      	ldrb	r2, [r7, #7]
 8005344:	4988      	ldr	r1, [pc, #544]	; (8005568 <ADSR_loop+0x298>)
 8005346:	4613      	mov	r3, r2
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	440b      	add	r3, r1
 8005350:	3306      	adds	r3, #6
 8005352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	79fa      	ldrb	r2, [r7, #7]
 800535a:	4983      	ldr	r1, [pc, #524]	; (8005568 <ADSR_loop+0x298>)
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	440b      	add	r3, r1
 8005366:	3308      	adds	r3, #8
 8005368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800536c:	801a      	strh	r2, [r3, #0]
      ADSR[counter].release_data= ADSR[counter].sustain_data;       note[counter].position=0; }
 800536e:	79f9      	ldrb	r1, [r7, #7]
 8005370:	79fa      	ldrb	r2, [r7, #7]
 8005372:	487d      	ldr	r0, [pc, #500]	; (8005568 <ADSR_loop+0x298>)
 8005374:	460b      	mov	r3, r1
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a5b      	subs	r3, r3, r1
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	4403      	add	r3, r0
 800537e:	330a      	adds	r3, #10
 8005380:	f9b3 0000 	ldrsh.w	r0, [r3]
 8005384:	4978      	ldr	r1, [pc, #480]	; (8005568 <ADSR_loop+0x298>)
 8005386:	4613      	mov	r3, r2
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	440b      	add	r3, r1
 8005390:	330c      	adds	r3, #12
 8005392:	4602      	mov	r2, r0
 8005394:	801a      	strh	r2, [r3, #0]
 8005396:	79fb      	ldrb	r3, [r7, #7]
 8005398:	4a74      	ldr	r2, [pc, #464]	; (800556c <ADSR_loop+0x29c>)
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	4413      	add	r3, r2
 800539e:	3304      	adds	r3, #4
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]

      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 80053a4:	79fa      	ldrb	r2, [r7, #7]
 80053a6:	4970      	ldr	r1, [pc, #448]	; (8005568 <ADSR_loop+0x298>)
 80053a8:	4613      	mov	r3, r2
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	440b      	add	r3, r1
 80053b2:	3306      	adds	r3, #6
 80053b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	dd3e      	ble.n	800543a <ADSR_loop+0x16a>
 80053bc:	79fa      	ldrb	r2, [r7, #7]
 80053be:	496a      	ldr	r1, [pc, #424]	; (8005568 <ADSR_loop+0x298>)
 80053c0:	4613      	mov	r3, r2
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	1a9b      	subs	r3, r3, r2
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	440b      	add	r3, r1
 80053ca:	3306      	adds	r3, #6
 80053cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053d0:	b299      	uxth	r1, r3
 80053d2:	79fa      	ldrb	r2, [r7, #7]
 80053d4:	4864      	ldr	r0, [pc, #400]	; (8005568 <ADSR_loop+0x298>)
 80053d6:	4613      	mov	r3, r2
 80053d8:	011b      	lsls	r3, r3, #4
 80053da:	1a9b      	subs	r3, r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4403      	add	r3, r0
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	1acb      	subs	r3, r1, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	79fa      	ldrb	r2, [r7, #7]
 80053ee:	b218      	sxth	r0, r3
 80053f0:	495d      	ldr	r1, [pc, #372]	; (8005568 <ADSR_loop+0x298>)
 80053f2:	4613      	mov	r3, r2
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	1a9b      	subs	r3, r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	440b      	add	r3, r1
 80053fc:	3306      	adds	r3, #6
 80053fe:	4602      	mov	r2, r0
 8005400:	801a      	strh	r2, [r3, #0]
    ADSR[counter].buffer[position]=1000-ADSR[counter].attack_data;break;
 8005402:	79fa      	ldrb	r2, [r7, #7]
 8005404:	4958      	ldr	r1, [pc, #352]	; (8005568 <ADSR_loop+0x298>)
 8005406:	4613      	mov	r3, r2
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	440b      	add	r3, r1
 8005410:	3306      	adds	r3, #6
 8005412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005416:	b29b      	uxth	r3, r3
 8005418:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800541c:	b29b      	uxth	r3, r3
 800541e:	79fa      	ldrb	r2, [r7, #7]
 8005420:	7939      	ldrb	r1, [r7, #4]
 8005422:	b21c      	sxth	r4, r3
 8005424:	4850      	ldr	r0, [pc, #320]	; (8005568 <ADSR_loop+0x298>)
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	440b      	add	r3, r1
 800542e:	3304      	adds	r3, #4
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4403      	add	r3, r0
 8005434:	4622      	mov	r2, r4
 8005436:	80da      	strh	r2, [r3, #6]
 8005438:	e0a0      	b.n	800557c <ADSR_loop+0x2ac>
      }

     if (ADSR[counter].decay_data>=ADSR[counter].sustain_data)   { ADSR[counter].decay_data=ADSR[counter].decay_data-(ADSR[counter].decay);
 800543a:	79fa      	ldrb	r2, [r7, #7]
 800543c:	494a      	ldr	r1, [pc, #296]	; (8005568 <ADSR_loop+0x298>)
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	005b      	lsls	r3, r3, #1
 8005446:	440b      	add	r3, r1
 8005448:	3308      	adds	r3, #8
 800544a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800544e:	79fa      	ldrb	r2, [r7, #7]
 8005450:	4845      	ldr	r0, [pc, #276]	; (8005568 <ADSR_loop+0x298>)
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	4403      	add	r3, r0
 800545c:	330a      	adds	r3, #10
 800545e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005462:	4299      	cmp	r1, r3
 8005464:	db38      	blt.n	80054d8 <ADSR_loop+0x208>
 8005466:	79fa      	ldrb	r2, [r7, #7]
 8005468:	493f      	ldr	r1, [pc, #252]	; (8005568 <ADSR_loop+0x298>)
 800546a:	4613      	mov	r3, r2
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	440b      	add	r3, r1
 8005474:	3308      	adds	r3, #8
 8005476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800547a:	b299      	uxth	r1, r3
 800547c:	79fa      	ldrb	r2, [r7, #7]
 800547e:	483a      	ldr	r0, [pc, #232]	; (8005568 <ADSR_loop+0x298>)
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4403      	add	r3, r0
 800548a:	3301      	adds	r3, #1
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	1acb      	subs	r3, r1, r3
 8005492:	b29b      	uxth	r3, r3
 8005494:	79fa      	ldrb	r2, [r7, #7]
 8005496:	b218      	sxth	r0, r3
 8005498:	4933      	ldr	r1, [pc, #204]	; (8005568 <ADSR_loop+0x298>)
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	440b      	add	r3, r1
 80054a4:	3308      	adds	r3, #8
 80054a6:	4602      	mov	r2, r0
 80054a8:	801a      	strh	r2, [r3, #0]
    ADSR[counter].buffer[position]=ADSR[counter].decay_data;break;
 80054aa:	79f9      	ldrb	r1, [r7, #7]
 80054ac:	79fa      	ldrb	r2, [r7, #7]
 80054ae:	7938      	ldrb	r0, [r7, #4]
 80054b0:	4c2d      	ldr	r4, [pc, #180]	; (8005568 <ADSR_loop+0x298>)
 80054b2:	460b      	mov	r3, r1
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a5b      	subs	r3, r3, r1
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	4423      	add	r3, r4
 80054bc:	3308      	adds	r3, #8
 80054be:	f9b3 4000 	ldrsh.w	r4, [r3]
 80054c2:	4929      	ldr	r1, [pc, #164]	; (8005568 <ADSR_loop+0x298>)
 80054c4:	4613      	mov	r3, r2
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	1a9b      	subs	r3, r3, r2
 80054ca:	4403      	add	r3, r0
 80054cc:	3304      	adds	r3, #4
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	440b      	add	r3, r1
 80054d2:	4622      	mov	r2, r4
 80054d4:	80da      	strh	r2, [r3, #6]
 80054d6:	e051      	b.n	800557c <ADSR_loop+0x2ac>

      }
      if (ADSR[counter].release_data>0)  {  ADSR[counter].release_data=ADSR[counter].release_data-ADSR[counter].release;
 80054d8:	79fa      	ldrb	r2, [r7, #7]
 80054da:	4923      	ldr	r1, [pc, #140]	; (8005568 <ADSR_loop+0x298>)
 80054dc:	4613      	mov	r3, r2
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	440b      	add	r3, r1
 80054e6:	330c      	adds	r3, #12
 80054e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	dd3f      	ble.n	8005570 <ADSR_loop+0x2a0>
 80054f0:	79fa      	ldrb	r2, [r7, #7]
 80054f2:	491d      	ldr	r1, [pc, #116]	; (8005568 <ADSR_loop+0x298>)
 80054f4:	4613      	mov	r3, r2
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	440b      	add	r3, r1
 80054fe:	330c      	adds	r3, #12
 8005500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005504:	b299      	uxth	r1, r3
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	4817      	ldr	r0, [pc, #92]	; (8005568 <ADSR_loop+0x298>)
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4403      	add	r3, r0
 8005514:	3303      	adds	r3, #3
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	1acb      	subs	r3, r1, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	79fa      	ldrb	r2, [r7, #7]
 8005520:	b218      	sxth	r0, r3
 8005522:	4911      	ldr	r1, [pc, #68]	; (8005568 <ADSR_loop+0x298>)
 8005524:	4613      	mov	r3, r2
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	440b      	add	r3, r1
 800552e:	330c      	adds	r3, #12
 8005530:	4602      	mov	r2, r0
 8005532:	801a      	strh	r2, [r3, #0]
      ADSR[counter].buffer[position]=ADSR[counter].release_data;break;
 8005534:	79f9      	ldrb	r1, [r7, #7]
 8005536:	79fa      	ldrb	r2, [r7, #7]
 8005538:	7938      	ldrb	r0, [r7, #4]
 800553a:	4c0b      	ldr	r4, [pc, #44]	; (8005568 <ADSR_loop+0x298>)
 800553c:	460b      	mov	r3, r1
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	1a5b      	subs	r3, r3, r1
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	4423      	add	r3, r4
 8005546:	330c      	adds	r3, #12
 8005548:	f9b3 4000 	ldrsh.w	r4, [r3]
 800554c:	4906      	ldr	r1, [pc, #24]	; (8005568 <ADSR_loop+0x298>)
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	4403      	add	r3, r0
 8005556:	3304      	adds	r3, #4
 8005558:	005b      	lsls	r3, r3, #1
 800555a:	440b      	add	r3, r1
 800555c:	4622      	mov	r2, r4
 800555e:	80da      	strh	r2, [r3, #6]
 8005560:	e00c      	b.n	800557c <ADSR_loop+0x2ac>
 8005562:	bf00      	nop
 8005564:	2000e2d0 	.word	0x2000e2d0
 8005568:	2000d27c 	.word	0x2000d27c
 800556c:	20008e14 	.word	0x20008e14
      }
      ok=0;
 8005570:	2300      	movs	r3, #0
 8005572:	71bb      	strb	r3, [r7, #6]
	while(ok){	      // do one thing then exit
 8005574:	79bb      	ldrb	r3, [r7, #6]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f47f aeba 	bne.w	80052f0 <ADSR_loop+0x20>
	}
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
 800557c:	79fa      	ldrb	r2, [r7, #7]
 800557e:	7939      	ldrb	r1, [r7, #4]
 8005580:	4820      	ldr	r0, [pc, #128]	; (8005604 <ADSR_loop+0x334>)
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	440b      	add	r3, r1
 800558a:	3304      	adds	r3, #4
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4403      	add	r3, r0
 8005590:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005594:	2b00      	cmp	r3, #0
 8005596:	da0b      	bge.n	80055b0 <ADSR_loop+0x2e0>
 8005598:	79fa      	ldrb	r2, [r7, #7]
 800559a:	7939      	ldrb	r1, [r7, #4]
 800559c:	4819      	ldr	r0, [pc, #100]	; (8005604 <ADSR_loop+0x334>)
 800559e:	4613      	mov	r3, r2
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	440b      	add	r3, r1
 80055a6:	3304      	adds	r3, #4
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	4403      	add	r3, r0
 80055ac:	2200      	movs	r2, #0
 80055ae:	80da      	strh	r2, [r3, #6]
	if ( ADSR[counter].buffer[position]>1000)    ADSR[counter].buffer[position]=1000;
 80055b0:	79fa      	ldrb	r2, [r7, #7]
 80055b2:	7939      	ldrb	r1, [r7, #4]
 80055b4:	4813      	ldr	r0, [pc, #76]	; (8005604 <ADSR_loop+0x334>)
 80055b6:	4613      	mov	r3, r2
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	1a9b      	subs	r3, r3, r2
 80055bc:	440b      	add	r3, r1
 80055be:	3304      	adds	r3, #4
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4403      	add	r3, r0
 80055c4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80055c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055cc:	dd0c      	ble.n	80055e8 <ADSR_loop+0x318>
 80055ce:	79fa      	ldrb	r2, [r7, #7]
 80055d0:	7939      	ldrb	r1, [r7, #4]
 80055d2:	480c      	ldr	r0, [pc, #48]	; (8005604 <ADSR_loop+0x334>)
 80055d4:	4613      	mov	r3, r2
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	440b      	add	r3, r1
 80055dc:	3304      	adds	r3, #4
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4403      	add	r3, r0
 80055e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055e6:	80da      	strh	r2, [r3, #6]
		for (counter=0;counter<4;counter++){
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	3301      	adds	r3, #1
 80055ec:	71fb      	strb	r3, [r7, #7]
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	2b03      	cmp	r3, #3
 80055f2:	f67f ae7a 	bls.w	80052ea <ADSR_loop+0x1a>
  }




}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc90      	pop	{r4, r7}
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	2000d27c 	.word	0x2000d27c

08005608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800560a:	b0a7      	sub	sp, #156	; 0x9c
 800560c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800560e:	f001 fd29 	bl	8007064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005612:	f000 fc21 	bl	8005e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005616:	f000 ff9f 	bl	8006558 <MX_GPIO_Init>
  MX_DMA_Init();
 800561a:	f000 ff57 	bl	80064cc <MX_DMA_Init>
  MX_ADC1_Init();
 800561e:	f000 fc85 	bl	8005f2c <MX_ADC1_Init>
  MX_SPI2_Init();
 8005622:	f000 fd7d 	bl	8006120 <MX_SPI2_Init>
  MX_TIM3_Init();
 8005626:	f000 fe05 	bl	8006234 <MX_TIM3_Init>
  MX_TIM4_Init();
 800562a:	f000 fe85 	bl	8006338 <MX_TIM4_Init>
  MX_I2C2_Init();
 800562e:	f000 fd13 	bl	8006058 <MX_I2C2_Init>
  MX_SPI1_Init();
 8005632:	f000 fd3f 	bl	80060b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8005636:	f000 ff1f 	bl	8006478 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 800563a:	f000 fed3 	bl	80063e4 <MX_TIM10_Init>
  MX_TIM2_Init();
 800563e:	f000 fda5 	bl	800618c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 8005642:	f7fc fa27 	bl	8001a94 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8005646:	4bb2      	ldr	r3, [pc, #712]	; (8005910 <main+0x308>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4bb0      	ldr	r3, [pc, #704]	; (8005910 <main+0x308>)
 8005650:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 8005652:	4bb0      	ldr	r3, [pc, #704]	; (8005914 <main+0x30c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	4aae      	ldr	r2, [pc, #696]	; (8005914 <main+0x30c>)
 800565a:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  uint32_t  millis = HAL_GetTick();
 800565c:	f001 fd68 	bl	8007130 <HAL_GetTick>
 8005660:	67f8      	str	r0, [r7, #124]	; 0x7c


	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 8005662:	4bac      	ldr	r3, [pc, #688]	; (8005914 <main+0x30c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0307 	and.w	r3, r3, #7
 800566a:	2b06      	cmp	r3, #6
 800566c:	d101      	bne.n	8005672 <main+0x6a>
 800566e:	f7fc f931 	bl	80018d4 <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 8005672:	4ba9      	ldr	r3, [pc, #676]	; (8005918 <main+0x310>)
 8005674:	785b      	ldrb	r3, [r3, #1]
 8005676:	2b27      	cmp	r3, #39	; 0x27
 8005678:	d80e      	bhi.n	8005698 <main+0x90>
 800567a:	4ba8      	ldr	r3, [pc, #672]	; (800591c <main+0x314>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <main+0x90>
 8005682:	4ba6      	ldr	r3, [pc, #664]	; (800591c <main+0x314>)
 8005684:	2201      	movs	r2, #1
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	f001 f8ac 	bl	80067e4 <stop_start>
 800568c:	4ba3      	ldr	r3, [pc, #652]	; (800591c <main+0x314>)
 800568e:	2203      	movs	r2, #3
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	4ba1      	ldr	r3, [pc, #644]	; (8005918 <main+0x310>)
 8005694:	2232      	movs	r2, #50	; 0x32
 8005696:	705a      	strb	r2, [r3, #1]
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8005698:	4b9f      	ldr	r3, [pc, #636]	; (8005918 <main+0x310>)
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b27      	cmp	r3, #39	; 0x27
 800569e:	d80e      	bhi.n	80056be <main+0xb6>
 80056a0:	4b9e      	ldr	r3, [pc, #632]	; (800591c <main+0x314>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d10a      	bne.n	80056be <main+0xb6>
 80056a8:	4b9c      	ldr	r3, [pc, #624]	; (800591c <main+0x314>)
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
 80056ae:	f001 f899 	bl	80067e4 <stop_start>
 80056b2:	4b9a      	ldr	r3, [pc, #616]	; (800591c <main+0x314>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	4b97      	ldr	r3, [pc, #604]	; (8005918 <main+0x310>)
 80056ba:	2232      	movs	r2, #50	; 0x32
 80056bc:	705a      	strb	r2, [r3, #1]

	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 80056be:	4b95      	ldr	r3, [pc, #596]	; (8005914 <main+0x30c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 80056c6:	f040 8189 	bne.w	80059dc <main+0x3d4>

		    if (mem_count>(EPROM_limit-2)) mem_count=0; else mem_count++;
 80056ca:	4b95      	ldr	r3, [pc, #596]	; (8005920 <main+0x318>)
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 80056d2:	d903      	bls.n	80056dc <main+0xd4>
 80056d4:	4b92      	ldr	r3, [pc, #584]	; (8005920 <main+0x318>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	e005      	b.n	80056e8 <main+0xe0>
 80056dc:	4b90      	ldr	r3, [pc, #576]	; (8005920 <main+0x318>)
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	3301      	adds	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	4b8e      	ldr	r3, [pc, #568]	; (8005920 <main+0x318>)
 80056e6:	801a      	strh	r2, [r3, #0]
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 80056e8:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <main+0x318>)
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 80056f0:	d903      	bls.n	80056fa <main+0xf2>
 80056f2:	4b8b      	ldr	r3, [pc, #556]	; (8005920 <main+0x318>)
 80056f4:	f240 12cd 	movw	r2, #461	; 0x1cd
 80056f8:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 80056fa:	f7fb fde1 	bl	80012c0 <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 80056fe:	2300      	movs	r3, #0
 8005700:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			memcpy(potSource,&seq,46); // about 35
 8005704:	4a87      	ldr	r2, [pc, #540]	; (8005924 <main+0x31c>)
 8005706:	4b84      	ldr	r3, [pc, #528]	; (8005918 <main+0x310>)
 8005708:	4614      	mov	r4, r2
 800570a:	461d      	mov	r5, r3
 800570c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800570e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005714:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005718:	c407      	stmia	r4!, {r0, r1, r2}
 800571a:	8023      	strh	r3, [r4, #0]
			memcpy(potSource+476,&sampler,11);
 800571c:	4b82      	ldr	r3, [pc, #520]	; (8005928 <main+0x320>)
 800571e:	220b      	movs	r2, #11
 8005720:	4982      	ldr	r1, [pc, #520]	; (800592c <main+0x324>)
 8005722:	4618      	mov	r0, r3
 8005724:	f007 fdf0 	bl	800d308 <memcpy>
			for(i=0;i<10;i++){
 8005728:	4b81      	ldr	r3, [pc, #516]	; (8005930 <main+0x328>)
 800572a:	2200      	movs	r2, #0
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	e099      	b.n	8005864 <main+0x25c>
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 8005730:	4b7f      	ldr	r3, [pc, #508]	; (8005930 <main+0x328>)
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	339c      	adds	r3, #156	; 0x9c
 8005738:	4a7a      	ldr	r2, [pc, #488]	; (8005924 <main+0x31c>)
 800573a:	1898      	adds	r0, r3, r2
 800573c:	4b7c      	ldr	r3, [pc, #496]	; (8005930 <main+0x328>)
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	4a7c      	ldr	r2, [pc, #496]	; (8005934 <main+0x32c>)
 8005744:	4413      	add	r3, r2
 8005746:	2210      	movs	r2, #16
 8005748:	4619      	mov	r1, r3
 800574a:	f007 fddd 	bl	800d308 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 800574e:	4b78      	ldr	r3, [pc, #480]	; (8005930 <main+0x328>)
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	4613      	mov	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4413      	add	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	332e      	adds	r3, #46	; 0x2e
 800575e:	4a71      	ldr	r2, [pc, #452]	; (8005924 <main+0x31c>)
 8005760:	1898      	adds	r0, r3, r2
 8005762:	4b73      	ldr	r3, [pc, #460]	; (8005930 <main+0x328>)
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	4413      	add	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4a71      	ldr	r2, [pc, #452]	; (8005938 <main+0x330>)
 8005772:	4413      	add	r3, r2
 8005774:	2206      	movs	r2, #6
 8005776:	4619      	mov	r1, r3
 8005778:	f007 fdc6 	bl	800d308 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 800577c:	4b6c      	ldr	r3, [pc, #432]	; (8005930 <main+0x328>)
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	336a      	adds	r3, #106	; 0x6a
 800578a:	4a66      	ldr	r2, [pc, #408]	; (8005924 <main+0x31c>)
 800578c:	1898      	adds	r0, r3, r2
 800578e:	4b68      	ldr	r3, [pc, #416]	; (8005930 <main+0x328>)
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4a67      	ldr	r2, [pc, #412]	; (800593c <main+0x334>)
 800579e:	4413      	add	r3, r2
 80057a0:	2205      	movs	r2, #5
 80057a2:	4619      	mov	r1, r3
 80057a4:	f007 fdb0 	bl	800d308 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 80057a8:	4b61      	ldr	r3, [pc, #388]	; (8005930 <main+0x328>)
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80057ba:	4a5a      	ldr	r2, [pc, #360]	; (8005924 <main+0x31c>)
 80057bc:	1898      	adds	r0, r3, r2
 80057be:	4b5c      	ldr	r3, [pc, #368]	; (8005930 <main+0x328>)
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	232c      	movs	r3, #44	; 0x2c
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	4a5d      	ldr	r2, [pc, #372]	; (8005940 <main+0x338>)
 80057cc:	4413      	add	r3, r2
 80057ce:	2206      	movs	r2, #6
 80057d0:	4619      	mov	r1, r3
 80057d2:	f007 fd99 	bl	800d308 <memcpy>

				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 80057d6:	4b56      	ldr	r3, [pc, #344]	; (8005930 <main+0x328>)
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80057e8:	4a4e      	ldr	r2, [pc, #312]	; (8005924 <main+0x31c>)
 80057ea:	1898      	adds	r0, r3, r2
 80057ec:	4b50      	ldr	r3, [pc, #320]	; (8005930 <main+0x328>)
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	4a52      	ldr	r2, [pc, #328]	; (8005944 <main+0x33c>)
 80057fc:	4413      	add	r3, r2
 80057fe:	2206      	movs	r2, #6
 8005800:	4619      	mov	r1, r3
 8005802:	f007 fd81 	bl	800d308 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8005806:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <main+0x328>)
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005810:	4a44      	ldr	r2, [pc, #272]	; (8005924 <main+0x31c>)
 8005812:	441a      	add	r2, r3
 8005814:	4b46      	ldr	r3, [pc, #280]	; (8005930 <main+0x328>)
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	4619      	mov	r1, r3
 800581a:	460b      	mov	r3, r1
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4949      	ldr	r1, [pc, #292]	; (8005948 <main+0x340>)
 8005824:	440b      	add	r3, r1
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6013      	str	r3, [r2, #0]
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 800582a:	4b41      	ldr	r3, [pc, #260]	; (8005930 <main+0x328>)
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800583c:	4a39      	ldr	r2, [pc, #228]	; (8005924 <main+0x31c>)
 800583e:	1898      	adds	r0, r3, r2
 8005840:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <main+0x328>)
 8005842:	881b      	ldrh	r3, [r3, #0]
 8005844:	330a      	adds	r3, #10
 8005846:	222c      	movs	r2, #44	; 0x2c
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	4a3c      	ldr	r2, [pc, #240]	; (8005940 <main+0x338>)
 800584e:	4413      	add	r3, r2
 8005850:	2206      	movs	r2, #6
 8005852:	4619      	mov	r1, r3
 8005854:	f007 fd58 	bl	800d308 <memcpy>
			for(i=0;i<10;i++){
 8005858:	4b35      	ldr	r3, [pc, #212]	; (8005930 <main+0x328>)
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	4b33      	ldr	r3, [pc, #204]	; (8005930 <main+0x328>)
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	4b32      	ldr	r3, [pc, #200]	; (8005930 <main+0x328>)
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	2b09      	cmp	r3, #9
 800586a:	f67f af61 	bls.w	8005730 <main+0x128>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 800586e:	2300      	movs	r3, #0
 8005870:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8005874:	2300      	movs	r3, #0
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	222e      	movs	r2, #46	; 0x2e
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f007 fd50 	bl	800d324 <memset>
			 uint8_t mem_verify_list[50]={0};
 8005884:	2300      	movs	r3, #0
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
 8005888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800588c:	222e      	movs	r2, #46	; 0x2e
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f007 fd47 	bl	800d324 <memset>
			 uint8_t read_counter=0;
 8005896:	2300      	movs	r3, #0
 8005898:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 800589c:	4b20      	ldr	r3, [pc, #128]	; (8005920 <main+0x318>)
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	4b20      	ldr	r3, [pc, #128]	; (8005924 <main+0x31c>)
 80058a4:	4413      	add	r3, r2
 80058a6:	461c      	mov	r4, r3
 80058a8:	463e      	mov	r6, r7
 80058aa:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80058ae:	4635      	mov	r5, r6
 80058b0:	4623      	mov	r3, r4
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058bc:	3410      	adds	r4, #16
 80058be:	3610      	adds	r6, #16
 80058c0:	4564      	cmp	r4, ip
 80058c2:	d1f4      	bne.n	80058ae <main+0x2a6>
 80058c4:	4632      	mov	r2, r6
 80058c6:	4623      	mov	r3, r4
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 80058cc:	4b14      	ldr	r3, [pc, #80]	; (8005920 <main+0x318>)
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3301      	adds	r3, #1
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	b29a      	uxth	r2, r3
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <main+0x318>)
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	4413      	add	r3, r2
 80058e8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 80058ec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80058f0:	2364      	movs	r3, #100	; 0x64
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	2332      	movs	r3, #50	; 0x32
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2302      	movs	r3, #2
 8005900:	21a0      	movs	r1, #160	; 0xa0
 8005902:	4812      	ldr	r0, [pc, #72]	; (800594c <main+0x344>)
 8005904:	f003 fd9a 	bl	800943c <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8005908:	2300      	movs	r3, #0
 800590a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800590e:	e038      	b.n	8005982 <main+0x37a>
 8005910:	200098cc 	.word	0x200098cc
 8005914:	2000c128 	.word	0x2000c128
 8005918:	2000d314 	.word	0x2000d314
 800591c:	20011db8 	.word	0x20011db8
 8005920:	2000c126 	.word	0x2000c126
 8005924:	20009660 	.word	0x20009660
 8005928:	2000983c 	.word	0x2000983c
 800592c:	20008ed4 	.word	0x20008ed4
 8005930:	200098d0 	.word	0x200098d0
 8005934:	20008e14 	.word	0x20008e14
 8005938:	2000ced0 	.word	0x2000ced0
 800593c:	2000d27c 	.word	0x2000d27c
 8005940:	2000d344 	.word	0x2000d344
 8005944:	2000d178 	.word	0x2000d178
 8005948:	2000d1b4 	.word	0x2000d1b4
 800594c:	200122bc 	.word	0x200122bc

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005950:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005954:	3388      	adds	r3, #136	; 0x88
 8005956:	443b      	add	r3, r7
 8005958:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 800595c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005960:	3388      	adds	r3, #136	; 0x88
 8005962:	443b      	add	r3, r7
 8005964:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8005968:	429a      	cmp	r2, r3
 800596a:	d10f      	bne.n	800598c <main+0x384>
			     mem_count++;
 800596c:	4b6d      	ldr	r3, [pc, #436]	; (8005b24 <main+0x51c>)
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	3301      	adds	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	4b6b      	ldr	r3, [pc, #428]	; (8005b24 <main+0x51c>)
 8005976:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8005978:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800597c:	3301      	adds	r3, #1
 800597e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005982:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005986:	2b31      	cmp	r3, #49	; 0x31
 8005988:	d9e2      	bls.n	8005950 <main+0x348>
 800598a:	e000      	b.n	800598e <main+0x386>
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 800598c:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 800598e:	4b65      	ldr	r3, [pc, #404]	; (8005b24 <main+0x51c>)
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	4b64      	ldr	r3, [pc, #400]	; (8005b28 <main+0x520>)
 8005996:	5c9a      	ldrb	r2, [r3, r2]
 8005998:	4b64      	ldr	r3, [pc, #400]	; (8005b2c <main+0x524>)
 800599a:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 800599c:	4b61      	ldr	r3, [pc, #388]	; (8005b24 <main+0x51c>)
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	099b      	lsrs	r3, r3, #6
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3301      	adds	r3, #1
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	4b5d      	ldr	r3, [pc, #372]	; (8005b24 <main+0x51c>)
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	4413      	add	r3, r2
 80059b8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 80059bc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80059c0:	2364      	movs	r3, #100	; 0x64
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	2301      	movs	r3, #1
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	4b58      	ldr	r3, [pc, #352]	; (8005b2c <main+0x524>)
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2302      	movs	r3, #2
 80059ce:	21a0      	movs	r1, #160	; 0xa0
 80059d0:	4857      	ldr	r0, [pc, #348]	; (8005b30 <main+0x528>)
 80059d2:	f003 fc39 	bl	8009248 <HAL_I2C_Mem_Write>

			 // "&hi2c2"  actual register address  , write only when needed

		loop_counter2=0; //reset
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <main+0x52c>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 80059dc:	4b56      	ldr	r3, [pc, #344]	; (8005b38 <main+0x530>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8090 	beq.w	8005b06 <main+0x4fe>
		uint16_t mem_counter=0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		  memcpy(serial_source,&seq,36); // copy bits
 80059ec:	2224      	movs	r2, #36	; 0x24
 80059ee:	4953      	ldr	r1, [pc, #332]	; (8005b3c <main+0x534>)
 80059f0:	4853      	ldr	r0, [pc, #332]	; (8005b40 <main+0x538>)
 80059f2:	f007 fc89 	bl	800d308 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 80059f6:	4b53      	ldr	r3, [pc, #332]	; (8005b44 <main+0x53c>)
 80059f8:	4953      	ldr	r1, [pc, #332]	; (8005b48 <main+0x540>)
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	4618      	mov	r0, r3
 80059fe:	f007 fc83 	bl	800d308 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005a02:	2300      	movs	r3, #0
 8005a04:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005a08:	e02f      	b.n	8005a6a <main+0x462>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8005a0a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d811      	bhi.n	8005a36 <main+0x42e>
 8005a12:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	3360      	adds	r3, #96	; 0x60
 8005a1e:	4a48      	ldr	r2, [pc, #288]	; (8005b40 <main+0x538>)
 8005a20:	1898      	adds	r0, r3, r2
 8005a22:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a26:	3306      	adds	r3, #6
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4a48      	ldr	r2, [pc, #288]	; (8005b4c <main+0x544>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	2207      	movs	r2, #7
 8005a30:	4619      	mov	r1, r3
 8005a32:	f007 fc69 	bl	800d308 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8005a36:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	3324      	adds	r3, #36	; 0x24
 8005a44:	4a3e      	ldr	r2, [pc, #248]	; (8005b40 <main+0x538>)
 8005a46:	1898      	adds	r0, r3, r2
 8005a48:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4413      	add	r3, r2
 8005a52:	005b      	lsls	r3, r3, #1
 8005a54:	4a3e      	ldr	r2, [pc, #248]	; (8005b50 <main+0x548>)
 8005a56:	4413      	add	r3, r2
 8005a58:	2206      	movs	r2, #6
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f007 fc54 	bl	800d308 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005a60:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a64:	3301      	adds	r3, #1
 8005a66:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005a6a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d9cb      	bls.n	8005a0a <main+0x402>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005a72:	e005      	b.n	8005a80 <main+0x478>
			  serial_up++;
 8005a74:	4b37      	ldr	r3, [pc, #220]	; (8005b54 <main+0x54c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	4b35      	ldr	r3, [pc, #212]	; (8005b54 <main+0x54c>)
 8005a7e:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005a80:	4b34      	ldr	r3, [pc, #208]	; (8005b54 <main+0x54c>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b34      	ldr	r3, [pc, #208]	; (8005b58 <main+0x550>)
 8005a88:	5c9a      	ldrb	r2, [r3, r2]
 8005a8a:	4b32      	ldr	r3, [pc, #200]	; (8005b54 <main+0x54c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <main+0x538>)
 8005a92:	5c5b      	ldrb	r3, [r3, r1]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d103      	bne.n	8005aa0 <main+0x498>
 8005a98:	4b2e      	ldr	r3, [pc, #184]	; (8005b54 <main+0x54c>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2ba0      	cmp	r3, #160	; 0xa0
 8005a9e:	d9e9      	bls.n	8005a74 <main+0x46c>
		  }

		  serial_send[6]=0;
 8005aa0:	4b2e      	ldr	r3, [pc, #184]	; (8005b5c <main+0x554>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8005aa6:	4b25      	ldr	r3, [pc, #148]	; (8005b3c <main+0x534>)
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	4b2c      	ldr	r3, [pc, #176]	; (8005b5c <main+0x554>)
 8005aac:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8005aae:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <main+0x54c>)
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	4b2a      	ldr	r3, [pc, #168]	; (8005b5c <main+0x554>)
 8005ab4:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 8005ab6:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <main+0x54c>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	4b20      	ldr	r3, [pc, #128]	; (8005b40 <main+0x538>)
 8005abe:	5c9a      	ldrb	r2, [r3, r2]
 8005ac0:	4b26      	ldr	r3, [pc, #152]	; (8005b5c <main+0x554>)
 8005ac2:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <main+0x54c>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <main+0x54c>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <main+0x538>)
 8005ad2:	5c59      	ldrb	r1, [r3, r1]
 8005ad4:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <main+0x550>)
 8005ad6:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <main+0x54c>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2ba1      	cmp	r3, #161	; 0xa1
 8005ade:	d903      	bls.n	8005ae8 <main+0x4e0>
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <main+0x54c>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e005      	b.n	8005af4 <main+0x4ec>
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <main+0x54c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <main+0x54c>)
 8005af2:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8005af4:	2364      	movs	r3, #100	; 0x64
 8005af6:	2208      	movs	r2, #8
 8005af8:	4918      	ldr	r1, [pc, #96]	; (8005b5c <main+0x554>)
 8005afa:	4819      	ldr	r0, [pc, #100]	; (8005b60 <main+0x558>)
 8005afc:	f007 f81d 	bl	800cb3a <HAL_UART_Transmit>
		  serial_tosend=0;
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <main+0x530>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8005b06:	4b17      	ldr	r3, [pc, #92]	; (8005b64 <main+0x55c>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <main+0x50a>
 8005b0e:	f7fe f9cb 	bl	8003ea8 <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <main+0x560>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d842      	bhi.n	8005ba0 <main+0x598>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <main+0x564>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	801a      	strh	r2, [r3, #0]
 8005b20:	e02e      	b.n	8005b80 <main+0x578>
 8005b22:	bf00      	nop
 8005b24:	2000c126 	.word	0x2000c126
 8005b28:	20009660 	.word	0x20009660
 8005b2c:	2000c12c 	.word	0x2000c12c
 8005b30:	200122bc 	.word	0x200122bc
 8005b34:	2000c128 	.word	0x2000c128
 8005b38:	200104fd 	.word	0x200104fd
 8005b3c:	2000d314 	.word	0x2000d314
 8005b40:	200102fc 	.word	0x200102fc
 8005b44:	2001035c 	.word	0x2001035c
 8005b48:	2000975c 	.word	0x2000975c
 8005b4c:	20008e14 	.word	0x20008e14
 8005b50:	2000d178 	.word	0x2000d178
 8005b54:	200104fc 	.word	0x200104fc
 8005b58:	200103fc 	.word	0x200103fc
 8005b5c:	20008efc 	.word	0x20008efc
 8005b60:	20012600 	.word	0x20012600
 8005b64:	2000cac2 	.word	0x2000cac2
 8005b68:	2000c11b 	.word	0x2000c11b
 8005b6c:	200098d0 	.word	0x200098d0
 8005b70:	f7fe f888 	bl	8003c84 <display_init>
 8005b74:	4ba3      	ldr	r3, [pc, #652]	; (8005e04 <main+0x7fc>)
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	4ba1      	ldr	r3, [pc, #644]	; (8005e04 <main+0x7fc>)
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	4ba0      	ldr	r3, [pc, #640]	; (8005e04 <main+0x7fc>)
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	2b05      	cmp	r3, #5
 8005b86:	d9f3      	bls.n	8005b70 <main+0x568>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8005b88:	4b9f      	ldr	r3, [pc, #636]	; (8005e08 <main+0x800>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b06      	cmp	r3, #6
 8005b8e:	d107      	bne.n	8005ba0 <main+0x598>
 8005b90:	489e      	ldr	r0, [pc, #632]	; (8005e0c <main+0x804>)
 8005b92:	f005 fe7f 	bl	800b894 <HAL_TIM_Base_Start_IT>
 8005b96:	489d      	ldr	r0, [pc, #628]	; (8005e0c <main+0x804>)
 8005b98:	f005 fe22 	bl	800b7e0 <HAL_TIM_Base_Start>
 8005b9c:	f7fe f8c8 	bl	8003d30 <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8005ba0:	4b99      	ldr	r3, [pc, #612]	; (8005e08 <main+0x800>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b05      	cmp	r3, #5
 8005ba6:	d91f      	bls.n	8005be8 <main+0x5e0>

			if(sampler.sample_save_enable>10){
 8005ba8:	4b99      	ldr	r3, [pc, #612]	; (8005e10 <main+0x808>)
 8005baa:	7c1b      	ldrb	r3, [r3, #16]
 8005bac:	2b0a      	cmp	r3, #10
 8005bae:	d917      	bls.n	8005be0 <main+0x5d8>

			    uint16_t sample_size=sizeof(RAM);
 8005bb0:	f648 330e 	movw	r3, #35598	; 0x8b0e
 8005bb4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			    		uint8_t* ram_ptr=&RAM[0];
 8005bb8:	4b96      	ldr	r3, [pc, #600]	; (8005e14 <main+0x80c>)
 8005bba:	677b      	str	r3, [r7, #116]	; 0x74

			    				sample_save(sampler.sample_save,ram_ptr, sample_size);  // write sample no 255
 8005bbc:	4b94      	ldr	r3, [pc, #592]	; (8005e10 <main+0x808>)
 8005bbe:	7adb      	ldrb	r3, [r3, #11]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005bc6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fe fd69 	bl	80046a0 <sample_save>
			    sampler.sample_save_enable=0;
 8005bce:	4b90      	ldr	r3, [pc, #576]	; (8005e10 <main+0x808>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	741a      	strb	r2, [r3, #16]
			    sampler.sample_save=0;   // reset position jus tin case
 8005bd4:	4b8e      	ldr	r3, [pc, #568]	; (8005e10 <main+0x808>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	72da      	strb	r2, [r3, #11]
			    sampler.RAM_free=0; //
 8005bda:	4b8d      	ldr	r3, [pc, #564]	; (8005e10 <main+0x808>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	749a      	strb	r2, [r3, #18]


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8005be0:	f7fe fb38 	bl	8004254 <menu3_fill>
 8005be4:	f7fe fa42 	bl	800406c <encoder2>
		}


		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 8005be8:	4b8b      	ldr	r3, [pc, #556]	; (8005e18 <main+0x810>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d147      	bne.n	8005c84 <main+0x67c>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8005bf4:	4889      	ldr	r0, [pc, #548]	; (8005e1c <main+0x814>)
 8005bf6:	f002 f853 	bl	8007ca0 <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8005bfa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8005c04:	2101      	movs	r1, #1
 8005c06:	4885      	ldr	r0, [pc, #532]	; (8005e1c <main+0x814>)
 8005c08:	f001 fbba 	bl	8007380 <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4883      	ldr	r0, [pc, #524]	; (8005e1c <main+0x814>)
 8005c10:	f002 f95c 	bl	8007ecc <HAL_ADCEx_InjectedGetValue>
 8005c14:	4603      	mov	r3, r0
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8005c1c:	2102      	movs	r1, #2
 8005c1e:	487f      	ldr	r0, [pc, #508]	; (8005e1c <main+0x814>)
 8005c20:	f002 f954 	bl	8007ecc <HAL_ADCEx_InjectedGetValue>
 8005c24:	4603      	mov	r3, r0
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	487b      	ldr	r0, [pc, #492]	; (8005e1c <main+0x814>)
 8005c30:	f002 f94c 	bl	8007ecc <HAL_ADCEx_InjectedGetValue>
 8005c34:	4603      	mov	r3, r0
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8005c3c:	4877      	ldr	r0, [pc, #476]	; (8005e1c <main+0x814>)
 8005c3e:	f002 f8f9 	bl	8007e34 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8005c42:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005c46:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005c4a:	330f      	adds	r3, #15
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	4b73      	ldr	r3, [pc, #460]	; (8005e20 <main+0x818>)
 8005c54:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8005c56:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005c5a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005c5e:	330f      	adds	r3, #15
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	4b6e      	ldr	r3, [pc, #440]	; (8005e20 <main+0x818>)
 8005c68:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8005c6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005c6e:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005c72:	330f      	adds	r3, #15
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	4b69      	ldr	r3, [pc, #420]	; (8005e20 <main+0x818>)
 8005c7c:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8005c7e:	4b69      	ldr	r3, [pc, #420]	; (8005e24 <main+0x81c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8005c84:	4b68      	ldr	r3, [pc, #416]	; (8005e28 <main+0x820>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	d106      	bne.n	8005c9a <main+0x692>
 8005c8c:	4b67      	ldr	r3, [pc, #412]	; (8005e2c <main+0x824>)
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d102      	bne.n	8005c9a <main+0x692>
 8005c94:	4b65      	ldr	r3, [pc, #404]	; (8005e2c <main+0x824>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8005c9a:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <main+0x820>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005caa:	4861      	ldr	r0, [pc, #388]	; (8005e30 <main+0x828>)
 8005cac:	f003 f956 	bl	8008f5c <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8005cb0:	4b60      	ldr	r3, [pc, #384]	; (8005e34 <main+0x82c>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d06a      	beq.n	8005d8e <main+0x786>

		    if (adc_playback_position>1020) adc_playback_position=0;  // nudge
 8005cb8:	4b5f      	ldr	r3, [pc, #380]	; (8005e38 <main+0x830>)
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8005cc0:	d902      	bls.n	8005cc8 <main+0x6c0>
 8005cc2:	4b5d      	ldr	r3, [pc, #372]	; (8005e38 <main+0x830>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	801a      	strh	r2, [r3, #0]

		//    adc_playback_position=(adc_playback_position+512)&1023;
			uint16_t    adc_page=0; ;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8005cce:	4b59      	ldr	r3, [pc, #356]	; (8005e34 <main+0x82c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d102      	bne.n	8005cdc <main+0x6d4>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==2)	  	{	adc_page=1536; }
 8005cdc:	4b55      	ldr	r3, [pc, #340]	; (8005e34 <main+0x82c>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d103      	bne.n	8005cec <main+0x6e4>
 8005ce4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005ce8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82



			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8005cec:	4b45      	ldr	r3, [pc, #276]	; (8005e04 <main+0x7fc>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e038      	b.n	8005d66 <main+0x75e>
				adc_convert_count=(i*3)+adc_page;
 8005cf4:	4b43      	ldr	r3, [pc, #268]	; (8005e04 <main+0x7fc>)
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	0052      	lsls	r2, r2, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005d04:	4413      	add	r3, r2
 8005d06:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 8005d0a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005d0e:	4a4b      	ldr	r2, [pc, #300]	; (8005e3c <main+0x834>)
 8005d10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005d14:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4948      	ldr	r1, [pc, #288]	; (8005e3c <main+0x834>)
 8005d1c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d20:	4413      	add	r3, r2
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005d28:	3302      	adds	r3, #2
 8005d2a:	4944      	ldr	r1, [pc, #272]	; (8005e3c <main+0x834>)
 8005d2c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005d30:	4413      	add	r3, r2
 8005d32:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 8005d36:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005d3a:	4a41      	ldr	r2, [pc, #260]	; (8005e40 <main+0x838>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	085b      	lsrs	r3, r3, #1
 8005d42:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				input_holder[i]=adc_convert_temp<<4;
 8005d46:	4b2f      	ldr	r3, [pc, #188]	; (8005e04 <main+0x7fc>)
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	b299      	uxth	r1, r3
 8005d54:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <main+0x83c>)
 8005d56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i=0;i<512;i++){
 8005d5a:	4b2a      	ldr	r3, [pc, #168]	; (8005e04 <main+0x7fc>)
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	4b28      	ldr	r3, [pc, #160]	; (8005e04 <main+0x7fc>)
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	4b27      	ldr	r3, [pc, #156]	; (8005e04 <main+0x7fc>)
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d6e:	d3c1      	bcc.n	8005cf4 <main+0x6ec>
				// maybe start with signed

				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler.RAM_free=1;  loop_counter2=111;   sampler_ram_record(); }  //stop loop counter2
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <main+0x808>)
 8005d72:	7b9b      	ldrb	r3, [r3, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <main+0x780>
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <main+0x808>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	749a      	strb	r2, [r3, #18]
 8005d7e:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <main+0x810>)
 8005d80:	226f      	movs	r2, #111	; 0x6f
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f7fe fed6 	bl	8004b34 <sampler_ram_record>

			adc_flag=0;
 8005d88:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <main+0x82c>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <main+0x840>)
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d98:	d90a      	bls.n	8005db0 <main+0x7a8>
 8005d9a:	4b2c      	ldr	r3, [pc, #176]	; (8005e4c <main+0x844>)
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005da2:	d105      	bne.n	8005db0 <main+0x7a8>
 8005da4:	4b2a      	ldr	r3, [pc, #168]	; (8005e50 <main+0x848>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8005daa:	e001      	b.n	8005db0 <main+0x7a8>

			sampling();
 8005dac:	f7fc f9b0 	bl	8002110 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 8005db0:	4b27      	ldr	r3, [pc, #156]	; (8005e50 <main+0x848>)
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f9      	bne.n	8005dac <main+0x7a4>

	  	}   // should trigger this after adc reads also reset sample_point here

		if((millis-millis_stored)>5) {   // run gfx_line
 8005db8:	4b26      	ldr	r3, [pc, #152]	; (8005e54 <main+0x84c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	f67f ac40 	bls.w	8005646 <main+0x3e>

		  LCD_Info_feedback();
 8005dc6:	f7fe fb07 	bl	80043d8 <LCD_Info_feedback>
		    uint8_t up_counter2=0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					while ((up_counter2<8) && (init > 5) )								{
 8005dd0:	e00c      	b.n	8005dec <main+0x7e4>

					gfx_line_fill();   // just run 8 times between sampling , dont need more
 8005dd2:	f7fe f87b 	bl	8003ecc <gfx_line_fill>
					up_counter2++;
 8005dd6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005dda:	3301      	adds	r3, #1
 8005ddc:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					loop_counter++;
 8005de0:	4b10      	ldr	r3, [pc, #64]	; (8005e24 <main+0x81c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	4b0e      	ldr	r3, [pc, #56]	; (8005e24 <main+0x81c>)
 8005dea:	701a      	strb	r2, [r3, #0]
					while ((up_counter2<8) && (init > 5) )								{
 8005dec:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	d803      	bhi.n	8005dfc <main+0x7f4>
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <main+0x800>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	d8ea      	bhi.n	8005dd2 <main+0x7ca>
					}   millis_stored=millis;
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <main+0x84c>)
 8005dfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e00:	6013      	str	r3, [r2, #0]
  {
 8005e02:	e420      	b.n	8005646 <main+0x3e>
 8005e04:	200098d0 	.word	0x200098d0
 8005e08:	2000c11b 	.word	0x2000c11b
 8005e0c:	200125b8 	.word	0x200125b8
 8005e10:	20008ed4 	.word	0x20008ed4
 8005e14:	200001b0 	.word	0x200001b0
 8005e18:	2000c128 	.word	0x2000c128
 8005e1c:	20012214 	.word	0x20012214
 8005e20:	20008e04 	.word	0x20008e04
 8005e24:	200098cc 	.word	0x200098cc
 8005e28:	2000d314 	.word	0x2000d314
 8005e2c:	2000c112 	.word	0x2000c112
 8005e30:	40020800 	.word	0x40020800
 8005e34:	2000cec4 	.word	0x2000cec4
 8005e38:	2001220c 	.word	0x2001220c
 8005e3c:	2000a8e4 	.word	0x2000a8e4
 8005e40:	aaaaaaab 	.word	0xaaaaaaab
 8005e44:	2000cac4 	.word	0x2000cac4
 8005e48:	2000a8d8 	.word	0x2000a8d8
 8005e4c:	2000a8de 	.word	0x2000a8de
 8005e50:	20008e0e 	.word	0x20008e0e
 8005e54:	20011dbc 	.word	0x20011dbc

08005e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b094      	sub	sp, #80	; 0x50
 8005e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e5e:	f107 0320 	add.w	r3, r7, #32
 8005e62:	2230      	movs	r2, #48	; 0x30
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f007 fa5c 	bl	800d324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e6c:	f107 030c 	add.w	r3, r7, #12
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
 8005e80:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <SystemClock_Config+0xcc>)
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <SystemClock_Config+0xcc>)
 8005e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8c:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <SystemClock_Config+0xcc>)
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <SystemClock_Config+0xd0>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <SystemClock_Config+0xd0>)
 8005ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b1f      	ldr	r3, [pc, #124]	; (8005f28 <SystemClock_Config+0xd0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005ec8:	2308      	movs	r3, #8
 8005eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8005ecc:	2364      	movs	r3, #100	; 0x64
 8005ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ed8:	f107 0320 	add.w	r3, r7, #32
 8005edc:	4618      	mov	r0, r3
 8005ede:	f004 f82f 	bl	8009f40 <HAL_RCC_OscConfig>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005ee8:	f000 fc92 	bl	8006810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005eec:	230f      	movs	r3, #15
 8005eee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005f04:	f107 030c 	add.w	r3, r7, #12
 8005f08:	2103      	movs	r1, #3
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f004 fa90 	bl	800a430 <HAL_RCC_ClockConfig>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005f16:	f000 fc7b 	bl	8006810 <Error_Handler>
  }
}
 8005f1a:	bf00      	nop
 8005f1c:	3750      	adds	r7, #80	; 0x50
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40007000 	.word	0x40007000

08005f2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	; 0x30
 8005f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f32:	f107 0320 	add.w	r3, r7, #32
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
 8005f3a:	605a      	str	r2, [r3, #4]
 8005f3c:	609a      	str	r2, [r3, #8]
 8005f3e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005f40:	463b      	mov	r3, r7
 8005f42:	2220      	movs	r2, #32
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f007 f9ec 	bl	800d324 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005f4c:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f4e:	4a3f      	ldr	r2, [pc, #252]	; (800604c <MX_ADC1_Init+0x120>)
 8005f50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8005f52:	4b3d      	ldr	r3, [pc, #244]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005f60:	4b39      	ldr	r3, [pc, #228]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005f66:	4b38      	ldr	r3, [pc, #224]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f68:	2201      	movs	r2, #1
 8005f6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f6c:	4b36      	ldr	r3, [pc, #216]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f74:	4b34      	ldr	r3, [pc, #208]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f7a:	4b33      	ldr	r3, [pc, #204]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f7c:	4a34      	ldr	r2, [pc, #208]	; (8006050 <MX_ADC1_Init+0x124>)
 8005f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f80:	4b31      	ldr	r3, [pc, #196]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005f86:	4b30      	ldr	r3, [pc, #192]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005f8c:	4b2e      	ldr	r3, [pc, #184]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8005f94:	4b2c      	ldr	r3, [pc, #176]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f9a:	482b      	ldr	r0, [pc, #172]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005f9c:	f001 f8f8 	bl	8007190 <HAL_ADC_Init>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8005fa6:	f000 fc33 	bl	8006810 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005faa:	2309      	movs	r3, #9
 8005fac:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005fb2:	2306      	movs	r3, #6
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005fb6:	f107 0320 	add.w	r3, r7, #32
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4822      	ldr	r0, [pc, #136]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005fbe:	f001 fbbf 	bl	8007740 <HAL_ADC_ConfigChannel>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8005fc8:	f000 fc22 	bl	8006810 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <MX_ADC1_Init+0x128>)
 8005fe2:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4814      	ldr	r0, [pc, #80]	; (8006048 <MX_ADC1_Init+0x11c>)
 8005ff6:	f001 ffa1 	bl	8007f3c <HAL_ADCEx_InjectedConfigChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8006000:	f000 fc06 	bl	8006810 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8006004:	2302      	movs	r3, #2
 8006006:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8006008:	2302      	movs	r3, #2
 800600a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800600c:	463b      	mov	r3, r7
 800600e:	4619      	mov	r1, r3
 8006010:	480d      	ldr	r0, [pc, #52]	; (8006048 <MX_ADC1_Init+0x11c>)
 8006012:	f001 ff93 	bl	8007f3c <HAL_ADCEx_InjectedConfigChannel>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800601c:	f000 fbf8 	bl	8006810 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 8006020:	2308      	movs	r3, #8
 8006022:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8006024:	2303      	movs	r3, #3
 8006026:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006028:	2300      	movs	r3, #0
 800602a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800602c:	463b      	mov	r3, r7
 800602e:	4619      	mov	r1, r3
 8006030:	4805      	ldr	r0, [pc, #20]	; (8006048 <MX_ADC1_Init+0x11c>)
 8006032:	f001 ff83 	bl	8007f3c <HAL_ADCEx_InjectedConfigChannel>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 800603c:	f000 fbe8 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006040:	bf00      	nop
 8006042:	3730      	adds	r7, #48	; 0x30
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20012214 	.word	0x20012214
 800604c:	40012000 	.word	0x40012000
 8006050:	0f000001 	.word	0x0f000001
 8006054:	000f0001 	.word	0x000f0001

08006058 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800605c:	4b12      	ldr	r3, [pc, #72]	; (80060a8 <MX_I2C2_Init+0x50>)
 800605e:	4a13      	ldr	r2, [pc, #76]	; (80060ac <MX_I2C2_Init+0x54>)
 8006060:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <MX_I2C2_Init+0x50>)
 8006064:	4a12      	ldr	r2, [pc, #72]	; (80060b0 <MX_I2C2_Init+0x58>)
 8006066:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <MX_I2C2_Init+0x50>)
 800606a:	2200      	movs	r2, #0
 800606c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <MX_I2C2_Init+0x50>)
 8006070:	2200      	movs	r2, #0
 8006072:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <MX_I2C2_Init+0x50>)
 8006076:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800607a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <MX_I2C2_Init+0x50>)
 800607e:	2200      	movs	r2, #0
 8006080:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <MX_I2C2_Init+0x50>)
 8006084:	2200      	movs	r2, #0
 8006086:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006088:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <MX_I2C2_Init+0x50>)
 800608a:	2200      	movs	r2, #0
 800608c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <MX_I2C2_Init+0x50>)
 8006090:	2200      	movs	r2, #0
 8006092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006094:	4804      	ldr	r0, [pc, #16]	; (80060a8 <MX_I2C2_Init+0x50>)
 8006096:	f002 ff93 	bl	8008fc0 <HAL_I2C_Init>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80060a0:	f000 fbb6 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80060a4:	bf00      	nop
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	200122bc 	.word	0x200122bc
 80060ac:	40005800 	.word	0x40005800
 80060b0:	000186a0 	.word	0x000186a0

080060b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80060b8:	4b17      	ldr	r3, [pc, #92]	; (8006118 <MX_SPI1_Init+0x64>)
 80060ba:	4a18      	ldr	r2, [pc, #96]	; (800611c <MX_SPI1_Init+0x68>)
 80060bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80060be:	4b16      	ldr	r3, [pc, #88]	; (8006118 <MX_SPI1_Init+0x64>)
 80060c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80060c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <MX_SPI1_Init+0x64>)
 80060c8:	2200      	movs	r2, #0
 80060ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80060cc:	4b12      	ldr	r3, [pc, #72]	; (8006118 <MX_SPI1_Init+0x64>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <MX_SPI1_Init+0x64>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80060d8:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <MX_SPI1_Init+0x64>)
 80060da:	2200      	movs	r2, #0
 80060dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <MX_SPI1_Init+0x64>)
 80060e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <MX_SPI1_Init+0x64>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060ec:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <MX_SPI1_Init+0x64>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <MX_SPI1_Init+0x64>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f8:	4b07      	ldr	r3, [pc, #28]	; (8006118 <MX_SPI1_Init+0x64>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <MX_SPI1_Init+0x64>)
 8006100:	220a      	movs	r2, #10
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006104:	4804      	ldr	r0, [pc, #16]	; (8006118 <MX_SPI1_Init+0x64>)
 8006106:	f004 fb73 	bl	800a7f0 <HAL_SPI_Init>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006110:	f000 fb7e 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006114:	bf00      	nop
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20012310 	.word	0x20012310
 800611c:	40013000 	.word	0x40013000

08006120 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006124:	4b17      	ldr	r3, [pc, #92]	; (8006184 <MX_SPI2_Init+0x64>)
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <MX_SPI2_Init+0x68>)
 8006128:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800612a:	4b16      	ldr	r3, [pc, #88]	; (8006184 <MX_SPI2_Init+0x64>)
 800612c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006130:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <MX_SPI2_Init+0x64>)
 8006134:	2200      	movs	r2, #0
 8006136:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006138:	4b12      	ldr	r3, [pc, #72]	; (8006184 <MX_SPI2_Init+0x64>)
 800613a:	2200      	movs	r2, #0
 800613c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <MX_SPI2_Init+0x64>)
 8006140:	2200      	movs	r2, #0
 8006142:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006144:	4b0f      	ldr	r3, [pc, #60]	; (8006184 <MX_SPI2_Init+0x64>)
 8006146:	2200      	movs	r2, #0
 8006148:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800614a:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <MX_SPI2_Init+0x64>)
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8006152:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <MX_SPI2_Init+0x64>)
 8006154:	2230      	movs	r2, #48	; 0x30
 8006156:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006158:	4b0a      	ldr	r3, [pc, #40]	; (8006184 <MX_SPI2_Init+0x64>)
 800615a:	2200      	movs	r2, #0
 800615c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <MX_SPI2_Init+0x64>)
 8006160:	2200      	movs	r2, #0
 8006162:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <MX_SPI2_Init+0x64>)
 8006166:	2200      	movs	r2, #0
 8006168:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800616a:	4b06      	ldr	r3, [pc, #24]	; (8006184 <MX_SPI2_Init+0x64>)
 800616c:	220a      	movs	r2, #10
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006170:	4804      	ldr	r0, [pc, #16]	; (8006184 <MX_SPI2_Init+0x64>)
 8006172:	f004 fb3d 	bl	800a7f0 <HAL_SPI_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d001      	beq.n	8006180 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800617c:	f000 fb48 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006180:	bf00      	nop
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20012368 	.word	0x20012368
 8006188:	40003800 	.word	0x40003800

0800618c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006192:	f107 030c 	add.w	r3, r7, #12
 8006196:	2224      	movs	r2, #36	; 0x24
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f007 f8c2 	bl	800d324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80061b0:	4b1f      	ldr	r3, [pc, #124]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061b6:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061b8:	2200      	movs	r2, #0
 80061ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80061bc:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061be:	f04f 32ff 	mov.w	r2, #4294967295
 80061c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80061c4:	4b1a      	ldr	r3, [pc, #104]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061cc:	4b18      	ldr	r3, [pc, #96]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80061d6:	2302      	movs	r3, #2
 80061d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80061e2:	2302      	movs	r3, #2
 80061e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80061e6:	2302      	movs	r3, #2
 80061e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80061ea:	2301      	movs	r3, #1
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80061ee:	2300      	movs	r3, #0
 80061f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 80061f2:	2302      	movs	r3, #2
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80061f6:	f107 030c 	add.w	r3, r7, #12
 80061fa:	4619      	mov	r1, r3
 80061fc:	480c      	ldr	r0, [pc, #48]	; (8006230 <MX_TIM2_Init+0xa4>)
 80061fe:	f005 fd3d 	bl	800bc7c <HAL_TIM_Encoder_Init>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8006208:	f000 fb02 	bl	8006810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800620c:	2300      	movs	r3, #0
 800620e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006210:	2300      	movs	r3, #0
 8006212:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006214:	1d3b      	adds	r3, r7, #4
 8006216:	4619      	mov	r1, r3
 8006218:	4805      	ldr	r0, [pc, #20]	; (8006230 <MX_TIM2_Init+0xa4>)
 800621a:	f006 fbb7 	bl	800c98c <HAL_TIMEx_MasterConfigSynchronization>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8006224:	f000 faf4 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006228:	bf00      	nop
 800622a:	3730      	adds	r7, #48	; 0x30
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	200124e0 	.word	0x200124e0

08006234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08e      	sub	sp, #56	; 0x38
 8006238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800623a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	605a      	str	r2, [r3, #4]
 8006244:	609a      	str	r2, [r3, #8]
 8006246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006248:	f107 0320 	add.w	r3, r7, #32
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006252:	1d3b      	adds	r3, r7, #4
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	609a      	str	r2, [r3, #8]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	611a      	str	r2, [r3, #16]
 8006260:	615a      	str	r2, [r3, #20]
 8006262:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006264:	4b32      	ldr	r3, [pc, #200]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006266:	4a33      	ldr	r2, [pc, #204]	; (8006334 <MX_TIM3_Init+0x100>)
 8006268:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800626a:	4b31      	ldr	r3, [pc, #196]	; (8006330 <MX_TIM3_Init+0xfc>)
 800626c:	2200      	movs	r2, #0
 800626e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006270:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2808;
 8006276:	4b2e      	ldr	r3, [pc, #184]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006278:	f640 22f8 	movw	r2, #2808	; 0xaf8
 800627c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800627e:	4b2c      	ldr	r3, [pc, #176]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006280:	2200      	movs	r2, #0
 8006282:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006284:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006286:	2280      	movs	r2, #128	; 0x80
 8006288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800628a:	4829      	ldr	r0, [pc, #164]	; (8006330 <MX_TIM3_Init+0xfc>)
 800628c:	f005 fa58 	bl	800b740 <HAL_TIM_Base_Init>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8006296:	f000 fabb 	bl	8006810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800629a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800629e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80062a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062a4:	4619      	mov	r1, r3
 80062a6:	4822      	ldr	r0, [pc, #136]	; (8006330 <MX_TIM3_Init+0xfc>)
 80062a8:	f005 ffb4 	bl	800c214 <HAL_TIM_ConfigClockSource>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80062b2:	f000 faad 	bl	8006810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80062b6:	481e      	ldr	r0, [pc, #120]	; (8006330 <MX_TIM3_Init+0xfc>)
 80062b8:	f005 fbd6 	bl	800ba68 <HAL_TIM_PWM_Init>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80062c2:	f000 faa5 	bl	8006810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062c6:	2300      	movs	r3, #0
 80062c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80062ce:	f107 0320 	add.w	r3, r7, #32
 80062d2:	4619      	mov	r1, r3
 80062d4:	4816      	ldr	r0, [pc, #88]	; (8006330 <MX_TIM3_Init+0xfc>)
 80062d6:	f006 fb59 	bl	800c98c <HAL_TIMEx_MasterConfigSynchronization>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80062e0:	f000 fa96 	bl	8006810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062e4:	2360      	movs	r3, #96	; 0x60
 80062e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80062f0:	2304      	movs	r3, #4
 80062f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	2200      	movs	r2, #0
 80062f8:	4619      	mov	r1, r3
 80062fa:	480d      	ldr	r0, [pc, #52]	; (8006330 <MX_TIM3_Init+0xfc>)
 80062fc:	f005 fec8 	bl	800c090 <HAL_TIM_PWM_ConfigChannel>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8006306:	f000 fa83 	bl	8006810 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800630a:	1d3b      	adds	r3, r7, #4
 800630c:	2204      	movs	r2, #4
 800630e:	4619      	mov	r1, r3
 8006310:	4807      	ldr	r0, [pc, #28]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006312:	f005 febd 	bl	800c090 <HAL_TIM_PWM_ConfigChannel>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800631c:	f000 fa78 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006320:	4803      	ldr	r0, [pc, #12]	; (8006330 <MX_TIM3_Init+0xfc>)
 8006322:	f000 fd67 	bl	8006df4 <HAL_TIM_MspPostInit>

}
 8006326:	bf00      	nop
 8006328:	3738      	adds	r7, #56	; 0x38
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	20012528 	.word	0x20012528
 8006334:	40000400 	.word	0x40000400

08006338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08c      	sub	sp, #48	; 0x30
 800633c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	2224      	movs	r2, #36	; 0x24
 8006344:	2100      	movs	r1, #0
 8006346:	4618      	mov	r0, r3
 8006348:	f006 ffec 	bl	800d324 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006354:	4b21      	ldr	r3, [pc, #132]	; (80063dc <MX_TIM4_Init+0xa4>)
 8006356:	4a22      	ldr	r2, [pc, #136]	; (80063e0 <MX_TIM4_Init+0xa8>)
 8006358:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <MX_TIM4_Init+0xa4>)
 800635c:	2200      	movs	r2, #0
 800635e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006360:	4b1e      	ldr	r3, [pc, #120]	; (80063dc <MX_TIM4_Init+0xa4>)
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006366:	4b1d      	ldr	r3, [pc, #116]	; (80063dc <MX_TIM4_Init+0xa4>)
 8006368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800636c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800636e:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <MX_TIM4_Init+0xa4>)
 8006370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006374:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006376:	4b19      	ldr	r3, [pc, #100]	; (80063dc <MX_TIM4_Init+0xa4>)
 8006378:	2200      	movs	r2, #0
 800637a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800637c:	2302      	movs	r3, #2
 800637e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8006380:	2302      	movs	r3, #2
 8006382:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006384:	2301      	movs	r3, #1
 8006386:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006388:	2300      	movs	r3, #0
 800638a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 800638c:	2304      	movs	r3, #4
 800638e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006390:	2302      	movs	r3, #2
 8006392:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006394:	2301      	movs	r3, #1
 8006396:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006398:	2300      	movs	r3, #0
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 800639c:	2304      	movs	r3, #4
 800639e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	4619      	mov	r1, r3
 80063a6:	480d      	ldr	r0, [pc, #52]	; (80063dc <MX_TIM4_Init+0xa4>)
 80063a8:	f005 fc68 	bl	800bc7c <HAL_TIM_Encoder_Init>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80063b2:	f000 fa2d 	bl	8006810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063b6:	2300      	movs	r3, #0
 80063b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4806      	ldr	r0, [pc, #24]	; (80063dc <MX_TIM4_Init+0xa4>)
 80063c4:	f006 fae2 	bl	800c98c <HAL_TIMEx_MasterConfigSynchronization>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80063ce:	f000 fa1f 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80063d2:	bf00      	nop
 80063d4:	3730      	adds	r7, #48	; 0x30
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20012570 	.word	0x20012570
 80063e0:	40000800 	.word	0x40000800

080063e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	605a      	str	r2, [r3, #4]
 80063f2:	609a      	str	r2, [r3, #8]
 80063f4:	60da      	str	r2, [r3, #12]
 80063f6:	611a      	str	r2, [r3, #16]
 80063f8:	615a      	str	r2, [r3, #20]
 80063fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80063fc:	4b1c      	ldr	r3, [pc, #112]	; (8006470 <MX_TIM10_Init+0x8c>)
 80063fe:	4a1d      	ldr	r2, [pc, #116]	; (8006474 <MX_TIM10_Init+0x90>)
 8006400:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8006402:	4b1b      	ldr	r3, [pc, #108]	; (8006470 <MX_TIM10_Init+0x8c>)
 8006404:	2204      	movs	r2, #4
 8006406:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <MX_TIM10_Init+0x8c>)
 800640a:	2200      	movs	r2, #0
 800640c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 800640e:	4b18      	ldr	r3, [pc, #96]	; (8006470 <MX_TIM10_Init+0x8c>)
 8006410:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006414:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006416:	4b16      	ldr	r3, [pc, #88]	; (8006470 <MX_TIM10_Init+0x8c>)
 8006418:	2200      	movs	r2, #0
 800641a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800641c:	4b14      	ldr	r3, [pc, #80]	; (8006470 <MX_TIM10_Init+0x8c>)
 800641e:	2280      	movs	r2, #128	; 0x80
 8006420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006422:	4813      	ldr	r0, [pc, #76]	; (8006470 <MX_TIM10_Init+0x8c>)
 8006424:	f005 f98c 	bl	800b740 <HAL_TIM_Base_Init>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800642e:	f000 f9ef 	bl	8006810 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 8006432:	480f      	ldr	r0, [pc, #60]	; (8006470 <MX_TIM10_Init+0x8c>)
 8006434:	f005 fabf 	bl	800b9b6 <HAL_TIM_OC_Init>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800643e:	f000 f9e7 	bl	8006810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006452:	1d3b      	adds	r3, r7, #4
 8006454:	2200      	movs	r2, #0
 8006456:	4619      	mov	r1, r3
 8006458:	4805      	ldr	r0, [pc, #20]	; (8006470 <MX_TIM10_Init+0x8c>)
 800645a:	f005 fdbd 	bl	800bfd8 <HAL_TIM_OC_ConfigChannel>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006464:	f000 f9d4 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006468:	bf00      	nop
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200125b8 	.word	0x200125b8
 8006474:	40014400 	.word	0x40014400

08006478 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800647c:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 800647e:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <MX_USART1_UART_Init+0x50>)
 8006480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006482:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 8006484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800648a:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 800648c:	2200      	movs	r2, #0
 800648e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 8006492:	2200      	movs	r2, #0
 8006494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 8006498:	2200      	movs	r2, #0
 800649a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800649c:	4b09      	ldr	r3, [pc, #36]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 800649e:	2208      	movs	r2, #8
 80064a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064a8:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <MX_USART1_UART_Init+0x4c>)
 80064b0:	f006 faee 	bl	800ca90 <HAL_HalfDuplex_Init>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80064ba:	f000 f9a9 	bl	8006810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80064be:	bf00      	nop
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20012600 	.word	0x20012600
 80064c8:	40011000 	.word	0x40011000

080064cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <MX_DMA_Init+0x88>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	4a1e      	ldr	r2, [pc, #120]	; (8006554 <MX_DMA_Init+0x88>)
 80064dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80064e0:	6313      	str	r3, [r2, #48]	; 0x30
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <MX_DMA_Init+0x88>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4b18      	ldr	r3, [pc, #96]	; (8006554 <MX_DMA_Init+0x88>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <MX_DMA_Init+0x88>)
 80064f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064fc:	6313      	str	r3, [r2, #48]	; 0x30
 80064fe:	4b15      	ldr	r3, [pc, #84]	; (8006554 <MX_DMA_Init+0x88>)
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800650a:	2200      	movs	r2, #0
 800650c:	2105      	movs	r1, #5
 800650e:	200f      	movs	r0, #15
 8006510:	f001 ff89 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8006514:	200f      	movs	r0, #15
 8006516:	f001 ffa2 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800651a:	2200      	movs	r2, #0
 800651c:	2100      	movs	r1, #0
 800651e:	2038      	movs	r0, #56	; 0x38
 8006520:	f001 ff81 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006524:	2038      	movs	r0, #56	; 0x38
 8006526:	f001 ff9a 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800652a:	2200      	movs	r2, #0
 800652c:	2100      	movs	r1, #0
 800652e:	203a      	movs	r0, #58	; 0x3a
 8006530:	f001 ff79 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006534:	203a      	movs	r0, #58	; 0x3a
 8006536:	f001 ff92 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 800653a:	2200      	movs	r2, #0
 800653c:	2102      	movs	r1, #2
 800653e:	203c      	movs	r0, #60	; 0x3c
 8006540:	f001 ff71 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8006544:	203c      	movs	r0, #60	; 0x3c
 8006546:	f001 ff8a 	bl	800845e <HAL_NVIC_EnableIRQ>

}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800

08006558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800655e:	f107 030c 	add.w	r3, r7, #12
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	605a      	str	r2, [r3, #4]
 8006568:	609a      	str	r2, [r3, #8]
 800656a:	60da      	str	r2, [r3, #12]
 800656c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	4b3c      	ldr	r3, [pc, #240]	; (8006664 <MX_GPIO_Init+0x10c>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	4a3b      	ldr	r2, [pc, #236]	; (8006664 <MX_GPIO_Init+0x10c>)
 8006578:	f043 0301 	orr.w	r3, r3, #1
 800657c:	6313      	str	r3, [r2, #48]	; 0x30
 800657e:	4b39      	ldr	r3, [pc, #228]	; (8006664 <MX_GPIO_Init+0x10c>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	4b35      	ldr	r3, [pc, #212]	; (8006664 <MX_GPIO_Init+0x10c>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	4a34      	ldr	r2, [pc, #208]	; (8006664 <MX_GPIO_Init+0x10c>)
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	6313      	str	r3, [r2, #48]	; 0x30
 800659a:	4b32      	ldr	r3, [pc, #200]	; (8006664 <MX_GPIO_Init+0x10c>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065a6:	2300      	movs	r3, #0
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	4b2e      	ldr	r3, [pc, #184]	; (8006664 <MX_GPIO_Init+0x10c>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ae:	4a2d      	ldr	r2, [pc, #180]	; (8006664 <MX_GPIO_Init+0x10c>)
 80065b0:	f043 0304 	orr.w	r3, r3, #4
 80065b4:	6313      	str	r3, [r2, #48]	; 0x30
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <MX_GPIO_Init+0x10c>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	603b      	str	r3, [r7, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80065c2:	2200      	movs	r2, #0
 80065c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065c8:	4827      	ldr	r0, [pc, #156]	; (8006668 <MX_GPIO_Init+0x110>)
 80065ca:	f002 fcc7 	bl	8008f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80065ce:	2201      	movs	r2, #1
 80065d0:	2110      	movs	r1, #16
 80065d2:	4826      	ldr	r0, [pc, #152]	; (800666c <MX_GPIO_Init+0x114>)
 80065d4:	f002 fcc2 	bl	8008f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : encoder2_Pin encoder1_Pin */
  GPIO_InitStruct.Pin = encoder2_Pin|encoder1_Pin;
 80065d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80065de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80065e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065e4:	2301      	movs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e8:	f107 030c 	add.w	r3, r7, #12
 80065ec:	4619      	mov	r1, r3
 80065ee:	481f      	ldr	r0, [pc, #124]	; (800666c <MX_GPIO_Init+0x114>)
 80065f0:	f002 fb30 	bl	8008c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80065f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065fa:	2301      	movs	r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8006606:	f107 030c 	add.w	r3, r7, #12
 800660a:	4619      	mov	r1, r3
 800660c:	4816      	ldr	r0, [pc, #88]	; (8006668 <MX_GPIO_Init+0x110>)
 800660e:	f002 fb21 	bl	8008c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : record_pin_Pin PB2 */
  GPIO_InitStruct.Pin = record_pin_Pin|GPIO_PIN_2;
 8006612:	f241 0304 	movw	r3, #4100	; 0x1004
 8006616:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006618:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800661c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800661e:	2301      	movs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	4619      	mov	r1, r3
 8006628:	4811      	ldr	r0, [pc, #68]	; (8006670 <MX_GPIO_Init+0x118>)
 800662a:	f002 fb13 	bl	8008c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 800662e:	2310      	movs	r3, #16
 8006630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006632:	2301      	movs	r3, #1
 8006634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663a:	2303      	movs	r3, #3
 800663c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 800663e:	f107 030c 	add.w	r3, r7, #12
 8006642:	4619      	mov	r1, r3
 8006644:	4809      	ldr	r0, [pc, #36]	; (800666c <MX_GPIO_Init+0x114>)
 8006646:	f002 fb05 	bl	8008c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 800664a:	2200      	movs	r2, #0
 800664c:	2104      	movs	r1, #4
 800664e:	2028      	movs	r0, #40	; 0x28
 8006650:	f001 fee9 	bl	8008426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006654:	2028      	movs	r0, #40	; 0x28
 8006656:	f001 ff02 	bl	800845e <HAL_NVIC_EnableIRQ>

}
 800665a:	bf00      	nop
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40023800 	.word	0x40023800
 8006668:	40020800 	.word	0x40020800
 800666c:	40020000 	.word	0x40020000
 8006670:	40020400 	.word	0x40020400

08006674 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 800667c:	4b04      	ldr	r3, [pc, #16]	; (8006690 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]

	}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	2000cec4 	.word	0x2000cec4

08006694 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 800669c:	4b07      	ldr	r3, [pc, #28]	; (80066bc <HAL_ADC_ConvCpltCallback+0x28>)
 800669e:	2202      	movs	r2, #2
 80066a0:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 80066a2:	4807      	ldr	r0, [pc, #28]	; (80066c0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80066a4:	f000 ffe8 	bl	8007678 <HAL_ADC_Stop_DMA>
 80066a8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80066ac:	4905      	ldr	r1, [pc, #20]	; (80066c4 <HAL_ADC_ConvCpltCallback+0x30>)
 80066ae:	4804      	ldr	r0, [pc, #16]	; (80066c0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80066b0:	f000 fef2 	bl	8007498 <HAL_ADC_Start_DMA>

	}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	2000cec4 	.word	0x2000cec4
 80066c0:	20012214 	.word	0x20012214
 80066c4:	2000a8e4 	.word	0x2000a8e4

080066c8 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a10      	ldr	r2, [pc, #64]	; (8006718 <HAL_SPI_TxRxHalfCpltCallback+0x50>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d118      	bne.n	800670c <HAL_SPI_TxRxHalfCpltCallback+0x44>

				if  ((flash_read_block2[10]+   flash_read_block2[11]+  flash_read_block2[12]+  flash_read_block2[13])== 1020                  )
 80066da:	4b10      	ldr	r3, [pc, #64]	; (800671c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80066dc:	7a9b      	ldrb	r3, [r3, #10]
 80066de:	461a      	mov	r2, r3
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80066e2:	7adb      	ldrb	r3, [r3, #11]
 80066e4:	4413      	add	r3, r2
 80066e6:	4a0d      	ldr	r2, [pc, #52]	; (800671c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80066e8:	7b12      	ldrb	r2, [r2, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	4a0b      	ldr	r2, [pc, #44]	; (800671c <HAL_SPI_TxRxHalfCpltCallback+0x54>)
 80066ee:	7b52      	ldrb	r2, [r2, #13]
 80066f0:	4413      	add	r3, r2
 80066f2:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 80066f6:	d109      	bne.n	800670c <HAL_SPI_TxRxHalfCpltCallback+0x44>

				    {
				    error_count++;
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3301      	adds	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	4b07      	ldr	r3, [pc, #28]	; (8006720 <HAL_SPI_TxRxHalfCpltCallback+0x58>)
 8006704:	801a      	strh	r2, [r3, #0]
		//	memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice

						flash_flag=1;}
 8006706:	4b07      	ldr	r3, [pc, #28]	; (8006724 <HAL_SPI_TxRxHalfCpltCallback+0x5c>)
 8006708:	2201      	movs	r2, #1
 800670a:	701a      	strb	r2, [r3, #0]


	}		}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40013000 	.word	0x40013000
 800671c:	200119a8 	.word	0x200119a8
 8006720:	2000cece 	.word	0x2000cece
 8006724:	20008f04 	.word	0x20008f04

08006728 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a07      	ldr	r2, [pc, #28]	; (8006754 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d107      	bne.n	800674a <HAL_SPI_TxRxCpltCallback+0x22>


		       flash_flag=2;
 800673a:	4b07      	ldr	r3, [pc, #28]	; (8006758 <HAL_SPI_TxRxCpltCallback+0x30>)
 800673c:	2202      	movs	r2, #2
 800673e:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 8006740:	2201      	movs	r2, #1
 8006742:	2110      	movs	r1, #16
 8006744:	4805      	ldr	r0, [pc, #20]	; (800675c <HAL_SPI_TxRxCpltCallback+0x34>)
 8006746:	f002 fc09 	bl	8008f5c <HAL_GPIO_WritePin>
		   }
		}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40013000 	.word	0x40013000
 8006758:	20008f04 	.word	0x20008f04
 800675c:	40020000 	.word	0x40020000

08006760 <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a07      	ldr	r2, [pc, #28]	; (800678c <HAL_SPI_ErrorCallback+0x2c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d106      	bne.n	8006780 <HAL_SPI_ErrorCallback+0x20>
error_count++;
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <HAL_SPI_ErrorCallback+0x30>)
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	3301      	adds	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <HAL_SPI_ErrorCallback+0x30>)
 800677e:	801a      	strh	r2, [r3, #0]

		   }
	}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	40013000 	.word	0x40013000
 8006790:	2000cece 	.word	0x2000cece

08006794 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	4603      	mov	r3, r0
 80067b0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b8:	d102      	bne.n	80067c0 <HAL_GPIO_EXTI_Callback+0x18>
   sampler.record_enable=1;
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <HAL_GPIO_EXTI_Callback+0x34>)
 80067bc:	2201      	movs	r2, #1
 80067be:	739a      	strb	r2, [r3, #14]
  }

  if(GPIO_Pin == encoder1_Pin) {
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c6:	d102      	bne.n	80067ce <HAL_GPIO_EXTI_Callback+0x26>
  //page_skip=1;
  record_output=1;
 80067c8:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
  //record_output=1;
 //     page_skip=1;
  }


}
 80067ce:	bf00      	nop
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20008ed4 	.word	0x20008ed4
 80067e0:	20011dc5 	.word	0x20011dc5

080067e4 <stop_start>:



//NVIC_DisableIRQ(TIM3_IRQn);   //  disables all tim irq
void stop_start	(void)             {
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  //  if (TIM3==htim ->Instance)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 80067e8:	4b07      	ldr	r3, [pc, #28]	; (8006808 <stop_start+0x24>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d102      	bne.n	80067f6 <stop_start+0x12>
 80067f0:	4806      	ldr	r0, [pc, #24]	; (800680c <stop_start+0x28>)
 80067f2:	f005 f8b1 	bl	800b958 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 80067f6:	4b04      	ldr	r3, [pc, #16]	; (8006808 <stop_start+0x24>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d102      	bne.n	8006804 <stop_start+0x20>
 80067fe:	4803      	ldr	r0, [pc, #12]	; (800680c <stop_start+0x28>)
 8006800:	f005 f848 	bl	800b894 <HAL_TIM_Base_Start_IT>

}
 8006804:	bf00      	nop
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20011db8 	.word	0x20011db8
 800680c:	20012528 	.word	0x20012528

08006810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006814:	b672      	cpsid	i
}
 8006816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006818:	e7fe      	b.n	8006818 <Error_Handler+0x8>
	...

0800681c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006822:	2300      	movs	r3, #0
 8006824:	607b      	str	r3, [r7, #4]
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <HAL_MspInit+0x4c>)
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	4a0f      	ldr	r2, [pc, #60]	; (8006868 <HAL_MspInit+0x4c>)
 800682c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006830:	6453      	str	r3, [r2, #68]	; 0x44
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <HAL_MspInit+0x4c>)
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <HAL_MspInit+0x4c>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a08      	ldr	r2, [pc, #32]	; (8006868 <HAL_MspInit+0x4c>)
 8006848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_MspInit+0x4c>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40023800 	.word	0x40023800

0800686c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	; 0x28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	60da      	str	r2, [r3, #12]
 8006882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a3c      	ldr	r2, [pc, #240]	; (800697c <HAL_ADC_MspInit+0x110>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d171      	bne.n	8006972 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	4b3b      	ldr	r3, [pc, #236]	; (8006980 <HAL_ADC_MspInit+0x114>)
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	4a3a      	ldr	r2, [pc, #232]	; (8006980 <HAL_ADC_MspInit+0x114>)
 8006898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800689c:	6453      	str	r3, [r2, #68]	; 0x44
 800689e:	4b38      	ldr	r3, [pc, #224]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a6:	613b      	str	r3, [r7, #16]
 80068a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068aa:	2300      	movs	r3, #0
 80068ac:	60fb      	str	r3, [r7, #12]
 80068ae:	4b34      	ldr	r3, [pc, #208]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	4a33      	ldr	r2, [pc, #204]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	4b2d      	ldr	r3, [pc, #180]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	4a2c      	ldr	r2, [pc, #176]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068d0:	f043 0302 	orr.w	r3, r3, #2
 80068d4:	6313      	str	r3, [r2, #48]	; 0x30
 80068d6:	4b2a      	ldr	r3, [pc, #168]	; (8006980 <HAL_ADC_MspInit+0x114>)
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	f003 0302 	and.w	r3, r3, #2
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 80068e2:	2305      	movs	r3, #5
 80068e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068e6:	2303      	movs	r3, #3
 80068e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ee:	f107 0314 	add.w	r3, r7, #20
 80068f2:	4619      	mov	r1, r3
 80068f4:	4823      	ldr	r0, [pc, #140]	; (8006984 <HAL_ADC_MspInit+0x118>)
 80068f6:	f002 f9ad 	bl	8008c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80068fa:	2303      	movs	r3, #3
 80068fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068fe:	2303      	movs	r3, #3
 8006900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006906:	f107 0314 	add.w	r3, r7, #20
 800690a:	4619      	mov	r1, r3
 800690c:	481e      	ldr	r0, [pc, #120]	; (8006988 <HAL_ADC_MspInit+0x11c>)
 800690e:	f002 f9a1 	bl	8008c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8006912:	4b1e      	ldr	r3, [pc, #120]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_ADC_MspInit+0x124>)
 8006916:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_ADC_MspInit+0x120>)
 800691a:	2200      	movs	r2, #0
 800691c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800691e:	4b1b      	ldr	r3, [pc, #108]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006920:	2200      	movs	r2, #0
 8006922:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006924:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006926:	2200      	movs	r2, #0
 8006928:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800692a:	4b18      	ldr	r3, [pc, #96]	; (800698c <HAL_ADC_MspInit+0x120>)
 800692c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006932:	4b16      	ldr	r3, [pc, #88]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_ADC_MspInit+0x120>)
 800693c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006940:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006948:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <HAL_ADC_MspInit+0x120>)
 800694c:	2200      	movs	r2, #0
 800694e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006950:	4b0e      	ldr	r3, [pc, #56]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006952:	2200      	movs	r2, #0
 8006954:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006956:	480d      	ldr	r0, [pc, #52]	; (800698c <HAL_ADC_MspInit+0x120>)
 8006958:	f001 fd9c 	bl	8008494 <HAL_DMA_Init>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006962:	f7ff ff55 	bl	8006810 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a08      	ldr	r2, [pc, #32]	; (800698c <HAL_ADC_MspInit+0x120>)
 800696a:	639a      	str	r2, [r3, #56]	; 0x38
 800696c:	4a07      	ldr	r2, [pc, #28]	; (800698c <HAL_ADC_MspInit+0x120>)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006972:	bf00      	nop
 8006974:	3728      	adds	r7, #40	; 0x28
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40012000 	.word	0x40012000
 8006980:	40023800 	.word	0x40023800
 8006984:	40020000 	.word	0x40020000
 8006988:	40020400 	.word	0x40020400
 800698c:	2001225c 	.word	0x2001225c
 8006990:	40026470 	.word	0x40026470

08006994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	; 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800699c:	f107 0314 	add.w	r3, r7, #20
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a22      	ldr	r2, [pc, #136]	; (8006a3c <HAL_I2C_MspInit+0xa8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d13d      	bne.n	8006a32 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <HAL_I2C_MspInit+0xac>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	4a20      	ldr	r2, [pc, #128]	; (8006a40 <HAL_I2C_MspInit+0xac>)
 80069c0:	f043 0302 	orr.w	r3, r3, #2
 80069c4:	6313      	str	r3, [r2, #48]	; 0x30
 80069c6:	4b1e      	ldr	r3, [pc, #120]	; (8006a40 <HAL_I2C_MspInit+0xac>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	613b      	str	r3, [r7, #16]
 80069d0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069d8:	2312      	movs	r3, #18
 80069da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e0:	2303      	movs	r3, #3
 80069e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80069e4:	2309      	movs	r3, #9
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4619      	mov	r1, r3
 80069ee:	4815      	ldr	r0, [pc, #84]	; (8006a44 <HAL_I2C_MspInit+0xb0>)
 80069f0:	f002 f930 	bl	8008c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80069f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069fa:	2312      	movs	r3, #18
 80069fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a02:	2303      	movs	r3, #3
 8006a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006a06:	2304      	movs	r3, #4
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a0a:	f107 0314 	add.w	r3, r7, #20
 8006a0e:	4619      	mov	r1, r3
 8006a10:	480c      	ldr	r0, [pc, #48]	; (8006a44 <HAL_I2C_MspInit+0xb0>)
 8006a12:	f002 f91f 	bl	8008c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_I2C_MspInit+0xac>)
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	4a08      	ldr	r2, [pc, #32]	; (8006a40 <HAL_I2C_MspInit+0xac>)
 8006a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a24:	6413      	str	r3, [r2, #64]	; 0x40
 8006a26:	4b06      	ldr	r3, [pc, #24]	; (8006a40 <HAL_I2C_MspInit+0xac>)
 8006a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006a32:	bf00      	nop
 8006a34:	3728      	adds	r7, #40	; 0x28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40005800 	.word	0x40005800
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40020400 	.word	0x40020400

08006a48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08c      	sub	sp, #48	; 0x30
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a50:	f107 031c 	add.w	r3, r7, #28
 8006a54:	2200      	movs	r2, #0
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	605a      	str	r2, [r3, #4]
 8006a5a:	609a      	str	r2, [r3, #8]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a77      	ldr	r2, [pc, #476]	; (8006c44 <HAL_SPI_MspInit+0x1fc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	f040 8089 	bne.w	8006b7e <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	4b75      	ldr	r3, [pc, #468]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a74:	4a74      	ldr	r2, [pc, #464]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8006a7c:	4b72      	ldr	r3, [pc, #456]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	4b6e      	ldr	r3, [pc, #440]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	4a6d      	ldr	r2, [pc, #436]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006a92:	f043 0301 	orr.w	r3, r3, #1
 8006a96:	6313      	str	r3, [r2, #48]	; 0x30
 8006a98:	4b6b      	ldr	r3, [pc, #428]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006aa4:	23e0      	movs	r3, #224	; 0xe0
 8006aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006ab4:	2305      	movs	r3, #5
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab8:	f107 031c 	add.w	r3, r7, #28
 8006abc:	4619      	mov	r1, r3
 8006abe:	4863      	ldr	r0, [pc, #396]	; (8006c4c <HAL_SPI_MspInit+0x204>)
 8006ac0:	f002 f8c8 	bl	8008c54 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006ac4:	4b62      	ldr	r3, [pc, #392]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006ac6:	4a63      	ldr	r2, [pc, #396]	; (8006c54 <HAL_SPI_MspInit+0x20c>)
 8006ac8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8006aca:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006acc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006ad0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ad2:	4b5f      	ldr	r3, [pc, #380]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ad8:	4b5d      	ldr	r3, [pc, #372]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006ade:	4b5c      	ldr	r3, [pc, #368]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006ae0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ae4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ae6:	4b5a      	ldr	r3, [pc, #360]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006aec:	4b58      	ldr	r3, [pc, #352]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006af2:	4b57      	ldr	r3, [pc, #348]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006af8:	4b55      	ldr	r3, [pc, #340]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006afe:	4b54      	ldr	r3, [pc, #336]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006b04:	4852      	ldr	r0, [pc, #328]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006b06:	f001 fcc5 	bl	8008494 <HAL_DMA_Init>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006b10:	f7ff fe7e 	bl	8006810 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a4e      	ldr	r2, [pc, #312]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006b18:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b1a:	4a4d      	ldr	r2, [pc, #308]	; (8006c50 <HAL_SPI_MspInit+0x208>)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8006b20:	4b4d      	ldr	r3, [pc, #308]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b22:	4a4e      	ldr	r2, [pc, #312]	; (8006c5c <HAL_SPI_MspInit+0x214>)
 8006b24:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8006b26:	4b4c      	ldr	r3, [pc, #304]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006b2c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b2e:	4b4a      	ldr	r3, [pc, #296]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b30:	2240      	movs	r2, #64	; 0x40
 8006b32:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b34:	4b48      	ldr	r3, [pc, #288]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b3a:	4b47      	ldr	r3, [pc, #284]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b40:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b42:	4b45      	ldr	r3, [pc, #276]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b48:	4b43      	ldr	r3, [pc, #268]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006b4e:	4b42      	ldr	r3, [pc, #264]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006b54:	4b40      	ldr	r3, [pc, #256]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b5a:	4b3f      	ldr	r3, [pc, #252]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006b60:	483d      	ldr	r0, [pc, #244]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b62:	f001 fc97 	bl	8008494 <HAL_DMA_Init>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006b6c:	f7ff fe50 	bl	8006810 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a39      	ldr	r2, [pc, #228]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b74:	649a      	str	r2, [r3, #72]	; 0x48
 8006b76:	4a38      	ldr	r2, [pc, #224]	; (8006c58 <HAL_SPI_MspInit+0x210>)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006b7c:	e05e      	b.n	8006c3c <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a37      	ldr	r2, [pc, #220]	; (8006c60 <HAL_SPI_MspInit+0x218>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d159      	bne.n	8006c3c <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006b88:	2300      	movs	r3, #0
 8006b8a:	613b      	str	r3, [r7, #16]
 8006b8c:	4b2e      	ldr	r3, [pc, #184]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	4a2d      	ldr	r2, [pc, #180]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b96:	6413      	str	r3, [r2, #64]	; 0x40
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba0:	613b      	str	r3, [r7, #16]
 8006ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bac:	4a26      	ldr	r2, [pc, #152]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006bae:	f043 0302 	orr.w	r3, r3, #2
 8006bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb4:	4b24      	ldr	r3, [pc, #144]	; (8006c48 <HAL_SPI_MspInit+0x200>)
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006bc0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006bd2:	2305      	movs	r3, #5
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bd6:	f107 031c 	add.w	r3, r7, #28
 8006bda:	4619      	mov	r1, r3
 8006bdc:	4821      	ldr	r0, [pc, #132]	; (8006c64 <HAL_SPI_MspInit+0x21c>)
 8006bde:	f002 f839 	bl	8008c54 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006be4:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <HAL_SPI_MspInit+0x224>)
 8006be6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006be8:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006bee:	4b1e      	ldr	r3, [pc, #120]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006bf0:	2240      	movs	r2, #64	; 0x40
 8006bf2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006bf4:	4b1c      	ldr	r3, [pc, #112]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c00:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c02:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c08:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006c0e:	4b16      	ldr	r3, [pc, #88]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c14:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c16:	2200      	movs	r2, #0
 8006c18:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006c20:	4811      	ldr	r0, [pc, #68]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c22:	f001 fc37 	bl	8008494 <HAL_DMA_Init>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d001      	beq.n	8006c30 <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 8006c2c:	f7ff fdf0 	bl	8006810 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a0d      	ldr	r2, [pc, #52]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c34:	649a      	str	r2, [r3, #72]	; 0x48
 8006c36:	4a0c      	ldr	r2, [pc, #48]	; (8006c68 <HAL_SPI_MspInit+0x220>)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006c3c:	bf00      	nop
 8006c3e:	3730      	adds	r7, #48	; 0x30
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	40013000 	.word	0x40013000
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	40020000 	.word	0x40020000
 8006c50:	200123c0 	.word	0x200123c0
 8006c54:	40026410 	.word	0x40026410
 8006c58:	20012420 	.word	0x20012420
 8006c5c:	40026440 	.word	0x40026440
 8006c60:	40003800 	.word	0x40003800
 8006c64:	40020400 	.word	0x40020400
 8006c68:	20012480 	.word	0x20012480
 8006c6c:	40026070 	.word	0x40026070

08006c70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08c      	sub	sp, #48	; 0x30
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c78:	f107 031c 	add.w	r3, r7, #28
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	609a      	str	r2, [r3, #8]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d12d      	bne.n	8006cee <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c92:	2300      	movs	r3, #0
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	4b30      	ldr	r3, [pc, #192]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	4a2f      	ldr	r2, [pc, #188]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ca2:	4b2d      	ldr	r3, [pc, #180]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	61bb      	str	r3, [r7, #24]
 8006cac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	4b29      	ldr	r3, [pc, #164]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4a28      	ldr	r2, [pc, #160]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8006cca:	f248 0302 	movw	r3, #32770	; 0x8002
 8006cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ce0:	f107 031c 	add.w	r3, r7, #28
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	481d      	ldr	r0, [pc, #116]	; (8006d5c <HAL_TIM_Encoder_MspInit+0xec>)
 8006ce8:	f001 ffb4 	bl	8008c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006cec:	e030      	b.n	8006d50 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1b      	ldr	r2, [pc, #108]	; (8006d60 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d12b      	bne.n	8006d50 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	4a15      	ldr	r2, [pc, #84]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006d02:	f043 0304 	orr.w	r3, r3, #4
 8006d06:	6413      	str	r3, [r2, #64]	; 0x40
 8006d08:	4b13      	ldr	r3, [pc, #76]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d14:	2300      	movs	r3, #0
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	4a0e      	ldr	r2, [pc, #56]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006d1e:	f043 0302 	orr.w	r3, r3, #2
 8006d22:	6313      	str	r3, [r2, #48]	; 0x30
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d30:	23c0      	movs	r3, #192	; 0xc0
 8006d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d34:	2302      	movs	r3, #2
 8006d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006d40:	2302      	movs	r3, #2
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d44:	f107 031c 	add.w	r3, r7, #28
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4806      	ldr	r0, [pc, #24]	; (8006d64 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006d4c:	f001 ff82 	bl	8008c54 <HAL_GPIO_Init>
}
 8006d50:	bf00      	nop
 8006d52:	3730      	adds	r7, #48	; 0x30
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40020000 	.word	0x40020000
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40020400 	.word	0x40020400

08006d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a1c      	ldr	r2, [pc, #112]	; (8006de8 <HAL_TIM_Base_MspInit+0x80>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d116      	bne.n	8006da8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	4b1b      	ldr	r3, [pc, #108]	; (8006dec <HAL_TIM_Base_MspInit+0x84>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <HAL_TIM_Base_MspInit+0x84>)
 8006d84:	f043 0302 	orr.w	r3, r3, #2
 8006d88:	6413      	str	r3, [r2, #64]	; 0x40
 8006d8a:	4b18      	ldr	r3, [pc, #96]	; (8006dec <HAL_TIM_Base_MspInit+0x84>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8006d96:	2200      	movs	r2, #0
 8006d98:	2101      	movs	r1, #1
 8006d9a:	201d      	movs	r0, #29
 8006d9c:	f001 fb43 	bl	8008426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006da0:	201d      	movs	r0, #29
 8006da2:	f001 fb5c 	bl	800845e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006da6:	e01a      	b.n	8006dde <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a10      	ldr	r2, [pc, #64]	; (8006df0 <HAL_TIM_Base_MspInit+0x88>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d115      	bne.n	8006dde <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <HAL_TIM_Base_MspInit+0x84>)
 8006db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dba:	4a0c      	ldr	r2, [pc, #48]	; (8006dec <HAL_TIM_Base_MspInit+0x84>)
 8006dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	; (8006dec <HAL_TIM_Base_MspInit+0x84>)
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	60bb      	str	r3, [r7, #8]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2103      	movs	r1, #3
 8006dd2:	2019      	movs	r0, #25
 8006dd4:	f001 fb27 	bl	8008426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006dd8:	2019      	movs	r0, #25
 8006dda:	f001 fb40 	bl	800845e <HAL_NVIC_EnableIRQ>
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40023800 	.word	0x40023800
 8006df0:	40014400 	.word	0x40014400

08006df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	605a      	str	r2, [r3, #4]
 8006e06:	609a      	str	r2, [r3, #8]
 8006e08:	60da      	str	r2, [r3, #12]
 8006e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a12      	ldr	r2, [pc, #72]	; (8006e5c <HAL_TIM_MspPostInit+0x68>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d11d      	bne.n	8006e52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_TIM_MspPostInit+0x6c>)
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	4a10      	ldr	r2, [pc, #64]	; (8006e60 <HAL_TIM_MspPostInit+0x6c>)
 8006e20:	f043 0302 	orr.w	r3, r3, #2
 8006e24:	6313      	str	r3, [r2, #48]	; 0x30
 8006e26:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <HAL_TIM_MspPostInit+0x6c>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006e32:	2330      	movs	r3, #48	; 0x30
 8006e34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e36:	2302      	movs	r3, #2
 8006e38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006e42:	2302      	movs	r3, #2
 8006e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e46:	f107 030c 	add.w	r3, r7, #12
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4805      	ldr	r0, [pc, #20]	; (8006e64 <HAL_TIM_MspPostInit+0x70>)
 8006e4e:	f001 ff01 	bl	8008c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006e52:	bf00      	nop
 8006e54:	3720      	adds	r7, #32
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40000400 	.word	0x40000400
 8006e60:	40023800 	.word	0x40023800
 8006e64:	40020400 	.word	0x40020400

08006e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a19      	ldr	r2, [pc, #100]	; (8006eec <HAL_UART_MspInit+0x84>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d12c      	bne.n	8006ee4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e92:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006e94:	f043 0310 	orr.w	r3, r3, #16
 8006e98:	6453      	str	r3, [r2, #68]	; 0x44
 8006e9a:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006ed4:	2307      	movs	r3, #7
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	4619      	mov	r1, r3
 8006ede:	4805      	ldr	r0, [pc, #20]	; (8006ef4 <HAL_UART_MspInit+0x8c>)
 8006ee0:	f001 feb8 	bl	8008c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006ee4:	bf00      	nop
 8006ee6:	3728      	adds	r7, #40	; 0x28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40011000 	.word	0x40011000
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40020000 	.word	0x40020000

08006ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006efc:	e7fe      	b.n	8006efc <NMI_Handler+0x4>

08006efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006efe:	b480      	push	{r7}
 8006f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f02:	e7fe      	b.n	8006f02 <HardFault_Handler+0x4>

08006f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f08:	e7fe      	b.n	8006f08 <MemManage_Handler+0x4>

08006f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f0e:	e7fe      	b.n	8006f0e <BusFault_Handler+0x4>

08006f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f14:	e7fe      	b.n	8006f14 <UsageFault_Handler+0x4>

08006f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006f16:	b480      	push	{r7}
 8006f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006f1a:	bf00      	nop
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f28:	bf00      	nop
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006f32:	b480      	push	{r7}
 8006f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006f36:	bf00      	nop
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006f44:	f000 f8e0 	bl	8007108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006f48:	bf00      	nop
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006f50:	4802      	ldr	r0, [pc, #8]	; (8006f5c <DMA1_Stream4_IRQHandler+0x10>)
 8006f52:	f001 fc15 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006f56:	bf00      	nop
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20012480 	.word	0x20012480

08006f60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8006f64:	4802      	ldr	r0, [pc, #8]	; (8006f70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006f66:	f004 ff2f 	bl	800bdc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006f6a:	bf00      	nop
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	200125b8 	.word	0x200125b8

08006f74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006f78:	4802      	ldr	r0, [pc, #8]	; (8006f84 <TIM3_IRQHandler+0x10>)
 8006f7a:	f004 ff25 	bl	800bdc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006f7e:	bf00      	nop
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20012528 	.word	0x20012528

08006f88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 8006f8c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006f90:	f001 fffe 	bl	8008f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(encoder2_Pin);
 8006f94:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f98:	f001 fffa 	bl	8008f90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8006f9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006fa0:	f001 fff6 	bl	8008f90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006fa4:	bf00      	nop
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006fac:	4802      	ldr	r0, [pc, #8]	; (8006fb8 <DMA2_Stream0_IRQHandler+0x10>)
 8006fae:	f001 fbe7 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006fb2:	bf00      	nop
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200123c0 	.word	0x200123c0

08006fbc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006fc0:	4802      	ldr	r0, [pc, #8]	; (8006fcc <DMA2_Stream2_IRQHandler+0x10>)
 8006fc2:	f001 fbdd 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006fc6:	bf00      	nop
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20012420 	.word	0x20012420

08006fd0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006fd4:	4802      	ldr	r0, [pc, #8]	; (8006fe0 <DMA2_Stream4_IRQHandler+0x10>)
 8006fd6:	f001 fbd3 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006fda:	bf00      	nop
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	2001225c 	.word	0x2001225c

08006fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fe8:	4b08      	ldr	r3, [pc, #32]	; (800700c <SystemInit+0x28>)
 8006fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fee:	4a07      	ldr	r2, [pc, #28]	; (800700c <SystemInit+0x28>)
 8006ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <SystemInit+0x28>)
 8006ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8007000:	bf00      	nop
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	e000ed00 	.word	0xe000ed00

08007010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007048 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007014:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007016:	e003      	b.n	8007020 <LoopCopyDataInit>

08007018 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800701a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800701c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800701e:	3104      	adds	r1, #4

08007020 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007020:	480b      	ldr	r0, [pc, #44]	; (8007050 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007024:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007026:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007028:	d3f6      	bcc.n	8007018 <CopyDataInit>
  ldr  r2, =_sbss
 800702a:	4a0b      	ldr	r2, [pc, #44]	; (8007058 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800702c:	e002      	b.n	8007034 <LoopFillZerobss>

0800702e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800702e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007030:	f842 3b04 	str.w	r3, [r2], #4

08007034 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007034:	4b09      	ldr	r3, [pc, #36]	; (800705c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007036:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007038:	d3f9      	bcc.n	800702e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800703a:	f7ff ffd3 	bl	8006fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800703e:	f006 f93f 	bl	800d2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007042:	f7fe fae1 	bl	8005608 <main>
  bx  lr    
 8007046:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007048:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800704c:	0800f958 	.word	0x0800f958
  ldr  r0, =_sdata
 8007050:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007054:	20008f78 	.word	0x20008f78
  ldr  r2, =_sbss
 8007058:	20008f78 	.word	0x20008f78
  ldr  r3, = _ebss
 800705c:	20012648 	.word	0x20012648

08007060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007060:	e7fe      	b.n	8007060 <ADC_IRQHandler>
	...

08007064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007068:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <HAL_Init+0x40>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a0d      	ldr	r2, [pc, #52]	; (80070a4 <HAL_Init+0x40>)
 800706e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007072:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_Init+0x40>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a0a      	ldr	r2, [pc, #40]	; (80070a4 <HAL_Init+0x40>)
 800707a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800707e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007080:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <HAL_Init+0x40>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a07      	ldr	r2, [pc, #28]	; (80070a4 <HAL_Init+0x40>)
 8007086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800708c:	2003      	movs	r0, #3
 800708e:	f001 f9bf 	bl	8008410 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007092:	2000      	movs	r0, #0
 8007094:	f000 f808 	bl	80070a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007098:	f7ff fbc0 	bl	800681c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40023c00 	.word	0x40023c00

080070a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <HAL_InitTick+0x54>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_InitTick+0x58>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	4619      	mov	r1, r3
 80070ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070be:	fbb3 f3f1 	udiv	r3, r3, r1
 80070c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 f9d7 	bl	800847a <HAL_SYSTICK_Config>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e00e      	b.n	80070f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b0f      	cmp	r3, #15
 80070da:	d80a      	bhi.n	80070f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070dc:	2200      	movs	r2, #0
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	f001 f99f 	bl	8008426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070e8:	4a06      	ldr	r2, [pc, #24]	; (8007104 <HAL_InitTick+0x5c>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e000      	b.n	80070f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3708      	adds	r7, #8
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20008f08 	.word	0x20008f08
 8007100:	20008f10 	.word	0x20008f10
 8007104:	20008f0c 	.word	0x20008f0c

08007108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007108:	b480      	push	{r7}
 800710a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <HAL_IncTick+0x20>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <HAL_IncTick+0x24>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4413      	add	r3, r2
 8007118:	4a04      	ldr	r2, [pc, #16]	; (800712c <HAL_IncTick+0x24>)
 800711a:	6013      	str	r3, [r2, #0]
}
 800711c:	bf00      	nop
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20008f10 	.word	0x20008f10
 800712c:	20012644 	.word	0x20012644

08007130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007130:	b480      	push	{r7}
 8007132:	af00      	add	r7, sp, #0
  return uwTick;
 8007134:	4b03      	ldr	r3, [pc, #12]	; (8007144 <HAL_GetTick+0x14>)
 8007136:	681b      	ldr	r3, [r3, #0]
}
 8007138:	4618      	mov	r0, r3
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20012644 	.word	0x20012644

08007148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007150:	f7ff ffee 	bl	8007130 <HAL_GetTick>
 8007154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007160:	d005      	beq.n	800716e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <HAL_Delay+0x44>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800716e:	bf00      	nop
 8007170:	f7ff ffde 	bl	8007130 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	429a      	cmp	r2, r3
 800717e:	d8f7      	bhi.n	8007170 <HAL_Delay+0x28>
  {
  }
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20008f10 	.word	0x20008f10

08007190 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e033      	b.n	800720e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7ff fb5c 	bl	800686c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d118      	bne.n	8007200 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071d6:	f023 0302 	bic.w	r3, r3, #2
 80071da:	f043 0202 	orr.w	r2, r3, #2
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fbde 	bl	80079a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f023 0303 	bic.w	r3, r3, #3
 80071f6:	f043 0201 	orr.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
 80071fe:	e001      	b.n	8007204 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_ADC_Start+0x1a>
 800722e:	2302      	movs	r3, #2
 8007230:	e097      	b.n	8007362 <HAL_ADC_Start+0x14a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d018      	beq.n	800727a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007258:	4b45      	ldr	r3, [pc, #276]	; (8007370 <HAL_ADC_Start+0x158>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a45      	ldr	r2, [pc, #276]	; (8007374 <HAL_ADC_Start+0x15c>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	0c9a      	lsrs	r2, r3, #18
 8007264:	4613      	mov	r3, r2
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	4413      	add	r3, r2
 800726a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800726c:	e002      	b.n	8007274 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	3b01      	subs	r3, #1
 8007272:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f9      	bne.n	800726e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b01      	cmp	r3, #1
 8007286:	d15f      	bne.n	8007348 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c6:	d106      	bne.n	80072d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	f023 0206 	bic.w	r2, r3, #6
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	645a      	str	r2, [r3, #68]	; 0x44
 80072d4:	e002      	b.n	80072dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <HAL_ADC_Start+0x160>)
 80072e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80072f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10f      	bne.n	800731e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d129      	bne.n	8007360 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689a      	ldr	r2, [r3, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	e020      	b.n	8007360 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a16      	ldr	r2, [pc, #88]	; (800737c <HAL_ADC_Start+0x164>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d11b      	bne.n	8007360 <HAL_ADC_Start+0x148>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d114      	bne.n	8007360 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007344:	609a      	str	r2, [r3, #8]
 8007346:	e00b      	b.n	8007360 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	f043 0210 	orr.w	r2, r3, #16
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007358:	f043 0201 	orr.w	r2, r3, #1
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20008f08 	.word	0x20008f08
 8007374:	431bde83 	.word	0x431bde83
 8007378:	40012300 	.word	0x40012300
 800737c:	40012000 	.word	0x40012000

08007380 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739c:	d113      	bne.n	80073c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80073a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ac:	d10b      	bne.n	80073c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0220 	orr.w	r2, r3, #32
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e063      	b.n	800748e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80073c6:	f7ff feb3 	bl	8007130 <HAL_GetTick>
 80073ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80073cc:	e021      	b.n	8007412 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d4:	d01d      	beq.n	8007412 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d007      	beq.n	80073ec <HAL_ADC_PollForConversion+0x6c>
 80073dc:	f7ff fea8 	bl	8007130 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d212      	bcs.n	8007412 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d00b      	beq.n	8007412 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f043 0204 	orr.w	r2, r3, #4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e03d      	b.n	800748e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b02      	cmp	r3, #2
 800741e:	d1d6      	bne.n	80073ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f06f 0212 	mvn.w	r2, #18
 8007428:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d123      	bne.n	800748c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007448:	2b00      	cmp	r3, #0
 800744a:	d11f      	bne.n	800748c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007452:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	d111      	bne.n	800748c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f043 0201 	orr.w	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_ADC_Start_DMA+0x1e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0ce      	b.n	8007654 <HAL_ADC_Start_DMA+0x1bc>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d018      	beq.n	80074fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0201 	orr.w	r2, r2, #1
 80074da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074dc:	4b5f      	ldr	r3, [pc, #380]	; (800765c <HAL_ADC_Start_DMA+0x1c4>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a5f      	ldr	r2, [pc, #380]	; (8007660 <HAL_ADC_Start_DMA+0x1c8>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	0c9a      	lsrs	r2, r3, #18
 80074e8:	4613      	mov	r3, r2
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	4413      	add	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80074f0:	e002      	b.n	80074f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f9      	bne.n	80074f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750c:	d107      	bne.n	800751e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800751c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b01      	cmp	r3, #1
 800752a:	f040 8086 	bne.w	800763a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007536:	f023 0301 	bic.w	r3, r3, #1
 800753a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007558:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756c:	d106      	bne.n	800757c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f023 0206 	bic.w	r2, r3, #6
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	645a      	str	r2, [r3, #68]	; 0x44
 800757a:	e002      	b.n	8007582 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800758a:	4b36      	ldr	r3, [pc, #216]	; (8007664 <HAL_ADC_Start_DMA+0x1cc>)
 800758c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	4a35      	ldr	r2, [pc, #212]	; (8007668 <HAL_ADC_Start_DMA+0x1d0>)
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	4a34      	ldr	r2, [pc, #208]	; (800766c <HAL_ADC_Start_DMA+0x1d4>)
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	4a33      	ldr	r2, [pc, #204]	; (8007670 <HAL_ADC_Start_DMA+0x1d8>)
 80075a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80075ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80075be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	334c      	adds	r3, #76	; 0x4c
 80075da:	4619      	mov	r1, r3
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f001 f806 	bl	80085f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10f      	bne.n	8007610 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d129      	bne.n	8007652 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800760c:	609a      	str	r2, [r3, #8]
 800760e:	e020      	b.n	8007652 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a17      	ldr	r2, [pc, #92]	; (8007674 <HAL_ADC_Start_DMA+0x1dc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d11b      	bne.n	8007652 <HAL_ADC_Start_DMA+0x1ba>
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d114      	bne.n	8007652 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007636:	609a      	str	r2, [r3, #8]
 8007638:	e00b      	b.n	8007652 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f043 0210 	orr.w	r2, r3, #16
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764a:	f043 0201 	orr.w	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20008f08 	.word	0x20008f08
 8007660:	431bde83 	.word	0x431bde83
 8007664:	40012300 	.word	0x40012300
 8007668:	08007b9d 	.word	0x08007b9d
 800766c:	08007c57 	.word	0x08007c57
 8007670:	08007c73 	.word	0x08007c73
 8007674:	40012000 	.word	0x40012000

08007678 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_ADC_Stop_DMA+0x1a>
 800768e:	2302      	movs	r3, #2
 8007690:	e048      	b.n	8007724 <HAL_ADC_Stop_DMA+0xac>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0201 	bic.w	r2, r2, #1
 80076a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d130      	bne.n	800771a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689a      	ldr	r2, [r3, #8]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076c6:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d10f      	bne.n	80076f6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 ffe0 	bl	80086a0 <HAL_DMA_Abort>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685a      	ldr	r2, [r3, #4]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007704:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	f043 0201 	orr.w	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_ADC_ConfigChannel+0x1c>
 8007758:	2302      	movs	r3, #2
 800775a:	e113      	b.n	8007984 <HAL_ADC_ConfigChannel+0x244>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b09      	cmp	r3, #9
 800776a:	d925      	bls.n	80077b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68d9      	ldr	r1, [r3, #12]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	461a      	mov	r2, r3
 800777a:	4613      	mov	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4413      	add	r3, r2
 8007780:	3b1e      	subs	r3, #30
 8007782:	2207      	movs	r2, #7
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	43da      	mvns	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	400a      	ands	r2, r1
 8007790:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68d9      	ldr	r1, [r3, #12]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	4618      	mov	r0, r3
 80077a4:	4603      	mov	r3, r0
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	4403      	add	r3, r0
 80077aa:	3b1e      	subs	r3, #30
 80077ac:	409a      	lsls	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	e022      	b.n	80077fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6919      	ldr	r1, [r3, #16]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	4613      	mov	r3, r2
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	4413      	add	r3, r2
 80077cc:	2207      	movs	r2, #7
 80077ce:	fa02 f303 	lsl.w	r3, r2, r3
 80077d2:	43da      	mvns	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	400a      	ands	r2, r1
 80077da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6919      	ldr	r1, [r3, #16]
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4618      	mov	r0, r3
 80077ee:	4603      	mov	r3, r0
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4403      	add	r3, r0
 80077f4:	409a      	lsls	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	2b06      	cmp	r3, #6
 8007804:	d824      	bhi.n	8007850 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	3b05      	subs	r3, #5
 8007818:	221f      	movs	r2, #31
 800781a:	fa02 f303 	lsl.w	r3, r2, r3
 800781e:	43da      	mvns	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	400a      	ands	r2, r1
 8007826:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	4618      	mov	r0, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	3b05      	subs	r3, #5
 8007842:	fa00 f203 	lsl.w	r2, r0, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	635a      	str	r2, [r3, #52]	; 0x34
 800784e:	e04c      	b.n	80078ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b0c      	cmp	r3, #12
 8007856:	d824      	bhi.n	80078a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	3b23      	subs	r3, #35	; 0x23
 800786a:	221f      	movs	r2, #31
 800786c:	fa02 f303 	lsl.w	r3, r2, r3
 8007870:	43da      	mvns	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	400a      	ands	r2, r1
 8007878:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	4618      	mov	r0, r3
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	3b23      	subs	r3, #35	; 0x23
 8007894:	fa00 f203 	lsl.w	r2, r0, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	631a      	str	r2, [r3, #48]	; 0x30
 80078a0:	e023      	b.n	80078ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	3b41      	subs	r3, #65	; 0x41
 80078b4:	221f      	movs	r2, #31
 80078b6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ba:	43da      	mvns	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	400a      	ands	r2, r1
 80078c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4618      	mov	r0, r3
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	3b41      	subs	r3, #65	; 0x41
 80078de:	fa00 f203 	lsl.w	r2, r0, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078ea:	4b29      	ldr	r3, [pc, #164]	; (8007990 <HAL_ADC_ConfigChannel+0x250>)
 80078ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a28      	ldr	r2, [pc, #160]	; (8007994 <HAL_ADC_ConfigChannel+0x254>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d10f      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x1d8>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b12      	cmp	r3, #18
 80078fe:	d10b      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <HAL_ADC_ConfigChannel+0x254>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d12b      	bne.n	800797a <HAL_ADC_ConfigChannel+0x23a>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a1c      	ldr	r2, [pc, #112]	; (8007998 <HAL_ADC_ConfigChannel+0x258>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <HAL_ADC_ConfigChannel+0x1f4>
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b11      	cmp	r3, #17
 8007932:	d122      	bne.n	800797a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a11      	ldr	r2, [pc, #68]	; (8007998 <HAL_ADC_ConfigChannel+0x258>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d111      	bne.n	800797a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007956:	4b11      	ldr	r3, [pc, #68]	; (800799c <HAL_ADC_ConfigChannel+0x25c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a11      	ldr	r2, [pc, #68]	; (80079a0 <HAL_ADC_ConfigChannel+0x260>)
 800795c:	fba2 2303 	umull	r2, r3, r2, r3
 8007960:	0c9a      	lsrs	r2, r3, #18
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800796c:	e002      	b.n	8007974 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	3b01      	subs	r3, #1
 8007972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f9      	bne.n	800796e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40012300 	.word	0x40012300
 8007994:	40012000 	.word	0x40012000
 8007998:	10000012 	.word	0x10000012
 800799c:	20008f08 	.word	0x20008f08
 80079a0:	431bde83 	.word	0x431bde83

080079a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80079ac:	4b79      	ldr	r3, [pc, #484]	; (8007b94 <ADC_Init+0x1f0>)
 80079ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	431a      	orrs	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6859      	ldr	r1, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	021a      	lsls	r2, r3, #8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80079fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6859      	ldr	r1, [r3, #4]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6899      	ldr	r1, [r3, #8]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a36:	4a58      	ldr	r2, [pc, #352]	; (8007b98 <ADC_Init+0x1f4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d022      	beq.n	8007a82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689a      	ldr	r2, [r3, #8]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6899      	ldr	r1, [r3, #8]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007a6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6899      	ldr	r1, [r3, #8]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	609a      	str	r2, [r3, #8]
 8007a80:	e00f      	b.n	8007aa2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007a90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007aa0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0202 	bic.w	r2, r2, #2
 8007ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6899      	ldr	r1, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7e1b      	ldrb	r3, [r3, #24]
 8007abc:	005a      	lsls	r2, r3, #1
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01b      	beq.n	8007b08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ade:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007aee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6859      	ldr	r1, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	3b01      	subs	r3, #1
 8007afc:	035a      	lsls	r2, r3, #13
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	605a      	str	r2, [r3, #4]
 8007b06:	e007      	b.n	8007b18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	051a      	lsls	r2, r3, #20
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007b4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6899      	ldr	r1, [r3, #8]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b5a:	025a      	lsls	r2, r3, #9
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6899      	ldr	r1, [r3, #8]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	029a      	lsls	r2, r3, #10
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	609a      	str	r2, [r3, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40012300 	.word	0x40012300
 8007b98:	0f000001 	.word	0x0f000001

08007b9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d13c      	bne.n	8007c30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d12b      	bne.n	8007c28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d127      	bne.n	8007c28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d006      	beq.n	8007bf4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d119      	bne.n	8007c28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0220 	bic.w	r2, r2, #32
 8007c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	f043 0201 	orr.w	r2, r3, #1
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f7fe fd33 	bl	8006694 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007c2e:	e00e      	b.n	8007c4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff fd75 	bl	800772c <HAL_ADC_ErrorCallback>
}
 8007c42:	e004      	b.n	8007c4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b084      	sub	sp, #16
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f7fe fd05 	bl	8006674 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2240      	movs	r2, #64	; 0x40
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	f043 0204 	orr.w	r2, r3, #4
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fd4a 	bl	800772c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d101      	bne.n	8007cc2 <HAL_ADCEx_InjectedStart+0x22>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e0aa      	b.n	8007e18 <HAL_ADCEx_InjectedStart+0x178>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d018      	beq.n	8007d0a <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f042 0201 	orr.w	r2, r2, #1
 8007ce6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007ce8:	4b4e      	ldr	r3, [pc, #312]	; (8007e24 <HAL_ADCEx_InjectedStart+0x184>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a4e      	ldr	r2, [pc, #312]	; (8007e28 <HAL_ADCEx_InjectedStart+0x188>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	0c9a      	lsrs	r2, r3, #18
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	005b      	lsls	r3, r3, #1
 8007cf8:	4413      	add	r3, r2
 8007cfa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007cfc:	e002      	b.n	8007d04 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f9      	bne.n	8007cfe <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d172      	bne.n	8007dfe <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d20:	f023 0301 	bic.w	r3, r3, #1
 8007d24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d102      	bne.n	8007d3e <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f06f 0204 	mvn.w	r2, #4
 8007d4e:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d50:	4b36      	ldr	r3, [pc, #216]	; (8007e2c <HAL_ADCEx_InjectedStart+0x18c>)
 8007d52:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d124      	bne.n	8007daa <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf0c      	ite	eq
 8007d6e:	2301      	moveq	r3, #1
 8007d70:	2300      	movne	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bf0c      	ite	eq
 8007d84:	2301      	moveq	r3, #1
 8007d86:	2300      	movne	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d041      	beq.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d03e      	beq.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007da6:	609a      	str	r2, [r3, #8]
 8007da8:	e035      	b.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bf0c      	ite	eq
 8007dce:	2301      	moveq	r3, #1
 8007dd0:	2300      	movne	r3, #0
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <HAL_ADCEx_InjectedStart+0x190>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d11a      	bne.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d017      	beq.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d014      	beq.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	e00b      	b.n	8007e16 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	f043 0210 	orr.w	r2, r3, #16
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	f043 0201 	orr.w	r2, r3, #1
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	371c      	adds	r7, #28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20008f08 	.word	0x20008f08
 8007e28:	431bde83 	.word	0x431bde83
 8007e2c:	40012300 	.word	0x40012300
 8007e30:	40012000 	.word	0x40012000

08007e34 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d101      	bne.n	8007e4e <HAL_ADCEx_InjectedStop+0x1a>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e037      	b.n	8007ebe <HAL_ADCEx_InjectedStop+0x8a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d120      	bne.n	8007ea4 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d119      	bne.n	8007ea4 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689a      	ldr	r2, [r3, #8]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f022 0201 	bic.w	r2, r2, #1
 8007e7e:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d112      	bne.n	8007eb4 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	f043 0201 	orr.w	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007ea2:	e007      	b.n	8007eb4 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea8:	f043 0220 	orr.w	r2, r3, #32
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f06f 0204 	mvn.w	r2, #4
 8007ee2:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d81f      	bhi.n	8007f2c <HAL_ADCEx_InjectedGetValue+0x60>
 8007eec:	a201      	add	r2, pc, #4	; (adr r2, 8007ef4 <HAL_ADCEx_InjectedGetValue+0x28>)
 8007eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef2:	bf00      	nop
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f19 	.word	0x08007f19
 8007efc:	08007f0f 	.word	0x08007f0f
 8007f00:	08007f05 	.word	0x08007f05
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f0a:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007f0c:	e00f      	b.n	8007f2e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f14:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8007f16:	e00a      	b.n	8007f2e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007f20:	e005      	b.n	8007f2e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f28:	60fb      	str	r3, [r7, #12]
    }
    break;
 8007f2a:	e000      	b.n	8007f2e <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8007f2c:	bf00      	nop
  }
  return tmp;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e17e      	b.n	8008252 <HAL_ADCEx_InjectedConfigChannel+0x316>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b09      	cmp	r3, #9
 8007f62:	d925      	bls.n	8007fb0 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68d9      	ldr	r1, [r3, #12]
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	4613      	mov	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4413      	add	r3, r2
 8007f78:	3b1e      	subs	r3, #30
 8007f7a:	2207      	movs	r2, #7
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43da      	mvns	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	400a      	ands	r2, r1
 8007f88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68d9      	ldr	r1, [r3, #12]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689a      	ldr	r2, [r3, #8]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	4403      	add	r3, r0
 8007fa2:	3b1e      	subs	r3, #30
 8007fa4:	409a      	lsls	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	e022      	b.n	8007ff6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6919      	ldr	r1, [r3, #16]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	005b      	lsls	r3, r3, #1
 8007fc2:	4413      	add	r3, r2
 8007fc4:	2207      	movs	r2, #7
 8007fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fca:	43da      	mvns	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	400a      	ands	r2, r1
 8007fd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6919      	ldr	r1, [r3, #16]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	4403      	add	r3, r0
 8007fec:	409a      	lsls	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008004:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	3b01      	subs	r3, #1
 8008012:	051a      	lsls	r2, r3, #20
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	b2db      	uxtb	r3, r3
 8008032:	3303      	adds	r3, #3
 8008034:	b2db      	uxtb	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	221f      	movs	r2, #31
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	43da      	mvns	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	400a      	ands	r2, r1
 800804c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	4618      	mov	r0, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	b2da      	uxtb	r2, r3
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	b2db      	uxtb	r3, r3
 800806c:	3303      	adds	r3, #3
 800806e:	b2db      	uxtb	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	fa00 f203 	lsl.w	r2, r0, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	4a75      	ldr	r2, [pc, #468]	; (8008260 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d022      	beq.n	80080d4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	689a      	ldr	r2, [r3, #8]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800809c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6899      	ldr	r1, [r3, #8]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	699a      	ldr	r2, [r3, #24]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689a      	ldr	r2, [r3, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80080be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6899      	ldr	r1, [r3, #8]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	69da      	ldr	r2, [r3, #28]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	609a      	str	r2, [r3, #8]
 80080d2:	e00f      	b.n	80080f4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80080e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80080f2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	7d5b      	ldrb	r3, [r3, #21]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d008      	beq.n	800810e <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800810a:	605a      	str	r2, [r3, #4]
 800810c:	e007      	b.n	800811e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800811c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	7d1b      	ldrb	r3, [r3, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d008      	beq.n	8008138 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	685a      	ldr	r2, [r3, #4]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008134:	605a      	str	r2, [r3, #4]
 8008136:	e007      	b.n	8008148 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008146:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d02e      	beq.n	80081ae <HAL_ADCEx_InjectedConfigChannel+0x272>
 8008150:	2b03      	cmp	r3, #3
 8008152:	d840      	bhi.n	80081d6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8008154:	2b01      	cmp	r3, #1
 8008156:	d002      	beq.n	800815e <HAL_ADCEx_InjectedConfigChannel+0x222>
 8008158:	2b02      	cmp	r3, #2
 800815a:	d014      	beq.n	8008186 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 800815c:	e03b      	b.n	80081d6 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800816c:	f023 030f 	bic.w	r3, r3, #15
 8008170:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6959      	ldr	r1, [r3, #20]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	430a      	orrs	r2, r1
 8008182:	615a      	str	r2, [r3, #20]
      break;
 8008184:	e03b      	b.n	80081fe <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6812      	ldr	r2, [r2, #0]
 8008190:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008194:	f023 030f 	bic.w	r3, r3, #15
 8008198:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6999      	ldr	r1, [r3, #24]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68da      	ldr	r2, [r3, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	619a      	str	r2, [r3, #24]
      break;
 80081ac:	e027      	b.n	80081fe <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80081bc:	f023 030f 	bic.w	r3, r3, #15
 80081c0:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69d9      	ldr	r1, [r3, #28]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	430a      	orrs	r2, r1
 80081d2:	61da      	str	r2, [r3, #28]
      break;
 80081d4:	e013      	b.n	80081fe <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80081e4:	f023 030f 	bic.w	r3, r3, #15
 80081e8:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6a19      	ldr	r1, [r3, #32]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	621a      	str	r2, [r3, #32]
      break;
 80081fc:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081fe:	4b19      	ldr	r3, [pc, #100]	; (8008264 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8008200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a18      	ldr	r2, [pc, #96]	; (8008268 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d109      	bne.n	8008220 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b12      	cmp	r3, #18
 8008212:	d105      	bne.n	8008220 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a10      	ldr	r2, [pc, #64]	; (8008268 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d10e      	bne.n	8008248 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a0f      	ldr	r2, [pc, #60]	; (800826c <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <HAL_ADCEx_InjectedConfigChannel+0x300>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b11      	cmp	r3, #17
 800823a:	d105      	bne.n	8008248 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	000f0001 	.word	0x000f0001
 8008264:	40012300 	.word	0x40012300
 8008268:	40012000 	.word	0x40012000
 800826c:	10000012 	.word	0x10000012

08008270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008280:	4b0c      	ldr	r3, [pc, #48]	; (80082b4 <__NVIC_SetPriorityGrouping+0x44>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800828c:	4013      	ands	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800829c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082a2:	4a04      	ldr	r2, [pc, #16]	; (80082b4 <__NVIC_SetPriorityGrouping+0x44>)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	60d3      	str	r3, [r2, #12]
}
 80082a8:	bf00      	nop
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	e000ed00 	.word	0xe000ed00

080082b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082bc:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <__NVIC_GetPriorityGrouping+0x18>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	0a1b      	lsrs	r3, r3, #8
 80082c2:	f003 0307 	and.w	r3, r3, #7
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	e000ed00 	.word	0xe000ed00

080082d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	db0b      	blt.n	80082fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	f003 021f 	and.w	r2, r3, #31
 80082ec:	4907      	ldr	r1, [pc, #28]	; (800830c <__NVIC_EnableIRQ+0x38>)
 80082ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f2:	095b      	lsrs	r3, r3, #5
 80082f4:	2001      	movs	r0, #1
 80082f6:	fa00 f202 	lsl.w	r2, r0, r2
 80082fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	e000e100 	.word	0xe000e100

08008310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	6039      	str	r1, [r7, #0]
 800831a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800831c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008320:	2b00      	cmp	r3, #0
 8008322:	db0a      	blt.n	800833a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	490c      	ldr	r1, [pc, #48]	; (800835c <__NVIC_SetPriority+0x4c>)
 800832a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800832e:	0112      	lsls	r2, r2, #4
 8008330:	b2d2      	uxtb	r2, r2
 8008332:	440b      	add	r3, r1
 8008334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008338:	e00a      	b.n	8008350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	b2da      	uxtb	r2, r3
 800833e:	4908      	ldr	r1, [pc, #32]	; (8008360 <__NVIC_SetPriority+0x50>)
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	f003 030f 	and.w	r3, r3, #15
 8008346:	3b04      	subs	r3, #4
 8008348:	0112      	lsls	r2, r2, #4
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	440b      	add	r3, r1
 800834e:	761a      	strb	r2, [r3, #24]
}
 8008350:	bf00      	nop
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	e000e100 	.word	0xe000e100
 8008360:	e000ed00 	.word	0xe000ed00

08008364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008364:	b480      	push	{r7}
 8008366:	b089      	sub	sp, #36	; 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	f1c3 0307 	rsb	r3, r3, #7
 800837e:	2b04      	cmp	r3, #4
 8008380:	bf28      	it	cs
 8008382:	2304      	movcs	r3, #4
 8008384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	3304      	adds	r3, #4
 800838a:	2b06      	cmp	r3, #6
 800838c:	d902      	bls.n	8008394 <NVIC_EncodePriority+0x30>
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	3b03      	subs	r3, #3
 8008392:	e000      	b.n	8008396 <NVIC_EncodePriority+0x32>
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	fa02 f303 	lsl.w	r3, r2, r3
 80083a2:	43da      	mvns	r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	401a      	ands	r2, r3
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083ac:	f04f 31ff 	mov.w	r1, #4294967295
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	fa01 f303 	lsl.w	r3, r1, r3
 80083b6:	43d9      	mvns	r1, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083bc:	4313      	orrs	r3, r2
         );
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3724      	adds	r7, #36	; 0x24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
	...

080083cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083dc:	d301      	bcc.n	80083e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083de:	2301      	movs	r3, #1
 80083e0:	e00f      	b.n	8008402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083e2:	4a0a      	ldr	r2, [pc, #40]	; (800840c <SysTick_Config+0x40>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083ea:	210f      	movs	r1, #15
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	f7ff ff8e 	bl	8008310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083f4:	4b05      	ldr	r3, [pc, #20]	; (800840c <SysTick_Config+0x40>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80083fa:	4b04      	ldr	r3, [pc, #16]	; (800840c <SysTick_Config+0x40>)
 80083fc:	2207      	movs	r2, #7
 80083fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	e000e010 	.word	0xe000e010

08008410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ff29 	bl	8008270 <__NVIC_SetPriorityGrouping>
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008426:	b580      	push	{r7, lr}
 8008428:	b086      	sub	sp, #24
 800842a:	af00      	add	r7, sp, #0
 800842c:	4603      	mov	r3, r0
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
 8008432:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008434:	2300      	movs	r3, #0
 8008436:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008438:	f7ff ff3e 	bl	80082b8 <__NVIC_GetPriorityGrouping>
 800843c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7ff ff8e 	bl	8008364 <NVIC_EncodePriority>
 8008448:	4602      	mov	r2, r0
 800844a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844e:	4611      	mov	r1, r2
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff ff5d 	bl	8008310 <__NVIC_SetPriority>
}
 8008456:	bf00      	nop
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	4603      	mov	r3, r0
 8008466:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff ff31 	bl	80082d4 <__NVIC_EnableIRQ>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7ff ffa2 	bl	80083cc <SysTick_Config>
 8008488:	4603      	mov	r3, r0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80084a0:	f7fe fe46 	bl	8007130 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d101      	bne.n	80084b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e099      	b.n	80085e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084d0:	e00f      	b.n	80084f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084d2:	f7fe fe2d 	bl	8007130 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b05      	cmp	r3, #5
 80084de:	d908      	bls.n	80084f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2203      	movs	r2, #3
 80084ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e078      	b.n	80085e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e8      	bne.n	80084d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4b38      	ldr	r3, [pc, #224]	; (80085ec <HAL_DMA_Init+0x158>)
 800850c:	4013      	ands	r3, r2
 800850e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800851e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800852a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	2b04      	cmp	r3, #4
 800854a:	d107      	bne.n	800855c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	4313      	orrs	r3, r2
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4313      	orrs	r3, r2
 800855a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	f023 0307 	bic.w	r3, r3, #7
 8008572:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	697a      	ldr	r2, [r7, #20]
 800857a:	4313      	orrs	r3, r2
 800857c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	2b04      	cmp	r3, #4
 8008584:	d117      	bne.n	80085b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	4313      	orrs	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00e      	beq.n	80085b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fadf 	bl	8008b5c <DMA_CheckFifoParam>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2240      	movs	r2, #64	; 0x40
 80085a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085b2:	2301      	movs	r3, #1
 80085b4:	e016      	b.n	80085e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa96 	bl	8008af0 <DMA_CalcBaseAndBitshift>
 80085c4:	4603      	mov	r3, r0
 80085c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085cc:	223f      	movs	r2, #63	; 0x3f
 80085ce:	409a      	lsls	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	f010803f 	.word	0xf010803f

080085f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008606:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <HAL_DMA_Start_IT+0x26>
 8008612:	2302      	movs	r3, #2
 8008614:	e040      	b.n	8008698 <HAL_DMA_Start_IT+0xa8>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b01      	cmp	r3, #1
 8008628:	d12f      	bne.n	800868a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2202      	movs	r2, #2
 800862e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f000 fa28 	bl	8008a94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008648:	223f      	movs	r2, #63	; 0x3f
 800864a:	409a      	lsls	r2, r3
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0216 	orr.w	r2, r2, #22
 800865e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0208 	orr.w	r2, r2, #8
 8008676:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	e005      	b.n	8008696 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008692:	2302      	movs	r3, #2
 8008694:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008696:	7dfb      	ldrb	r3, [r7, #23]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80086ae:	f7fe fd3f 	bl	8007130 <HAL_GetTick>
 80086b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d008      	beq.n	80086d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2280      	movs	r2, #128	; 0x80
 80086c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e052      	b.n	8008778 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0216 	bic.w	r2, r2, #22
 80086e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695a      	ldr	r2, [r3, #20]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d103      	bne.n	8008702 <HAL_DMA_Abort+0x62>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0208 	bic.w	r2, r2, #8
 8008710:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008722:	e013      	b.n	800874c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008724:	f7fe fd04 	bl	8007130 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b05      	cmp	r3, #5
 8008730:	d90c      	bls.n	800874c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2220      	movs	r2, #32
 8008736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2203      	movs	r2, #3
 800873c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e015      	b.n	8008778 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e4      	bne.n	8008724 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875e:	223f      	movs	r2, #63	; 0x3f
 8008760:	409a      	lsls	r2, r3
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800878c:	4b8e      	ldr	r3, [pc, #568]	; (80089c8 <HAL_DMA_IRQHandler+0x248>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a8e      	ldr	r2, [pc, #568]	; (80089cc <HAL_DMA_IRQHandler+0x24c>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	0a9b      	lsrs	r3, r3, #10
 8008798:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800879e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087aa:	2208      	movs	r2, #8
 80087ac:	409a      	lsls	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4013      	ands	r3, r2
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01a      	beq.n	80087ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d013      	beq.n	80087ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0204 	bic.w	r2, r2, #4
 80087d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d8:	2208      	movs	r2, #8
 80087da:	409a      	lsls	r2, r3
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e4:	f043 0201 	orr.w	r2, r3, #1
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f0:	2201      	movs	r2, #1
 80087f2:	409a      	lsls	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d012      	beq.n	8008822 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00b      	beq.n	8008822 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	2201      	movs	r2, #1
 8008810:	409a      	lsls	r2, r3
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f043 0202 	orr.w	r2, r3, #2
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008826:	2204      	movs	r2, #4
 8008828:	409a      	lsls	r2, r3
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4013      	ands	r3, r2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d012      	beq.n	8008858 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00b      	beq.n	8008858 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008844:	2204      	movs	r2, #4
 8008846:	409a      	lsls	r2, r3
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	f043 0204 	orr.w	r2, r3, #4
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	2210      	movs	r2, #16
 800885e:	409a      	lsls	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4013      	ands	r3, r2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d043      	beq.n	80088f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d03c      	beq.n	80088f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887a:	2210      	movs	r2, #16
 800887c:	409a      	lsls	r2, r3
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d018      	beq.n	80088c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800889a:	2b00      	cmp	r3, #0
 800889c:	d108      	bne.n	80088b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d024      	beq.n	80088f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	e01f      	b.n	80088f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01b      	beq.n	80088f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
 80088c0:	e016      	b.n	80088f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d107      	bne.n	80088e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f022 0208 	bic.w	r2, r2, #8
 80088de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088f4:	2220      	movs	r2, #32
 80088f6:	409a      	lsls	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 808f 	beq.w	8008a20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b00      	cmp	r3, #0
 800890e:	f000 8087 	beq.w	8008a20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008916:	2220      	movs	r2, #32
 8008918:	409a      	lsls	r2, r3
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b05      	cmp	r3, #5
 8008928:	d136      	bne.n	8008998 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0216 	bic.w	r2, r2, #22
 8008938:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695a      	ldr	r2, [r3, #20]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008948:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d103      	bne.n	800895a <HAL_DMA_IRQHandler+0x1da>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008956:	2b00      	cmp	r3, #0
 8008958:	d007      	beq.n	800896a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f022 0208 	bic.w	r2, r2, #8
 8008968:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800896e:	223f      	movs	r2, #63	; 0x3f
 8008970:	409a      	lsls	r2, r3
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898a:	2b00      	cmp	r3, #0
 800898c:	d07e      	beq.n	8008a8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
        }
        return;
 8008996:	e079      	b.n	8008a8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01d      	beq.n	80089e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10d      	bne.n	80089d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d031      	beq.n	8008a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
 80089c4:	e02c      	b.n	8008a20 <HAL_DMA_IRQHandler+0x2a0>
 80089c6:	bf00      	nop
 80089c8:	20008f08 	.word	0x20008f08
 80089cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d023      	beq.n	8008a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	4798      	blx	r3
 80089e0:	e01e      	b.n	8008a20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10f      	bne.n	8008a10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0210 	bic.w	r2, r2, #16
 80089fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d032      	beq.n	8008a8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d022      	beq.n	8008a7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2205      	movs	r2, #5
 8008a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0201 	bic.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	60bb      	str	r3, [r7, #8]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d307      	bcc.n	8008a68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1f2      	bne.n	8008a4c <HAL_DMA_IRQHandler+0x2cc>
 8008a66:	e000      	b.n	8008a6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008a68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d005      	beq.n	8008a8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	e000      	b.n	8008a8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8008a8c:	bf00      	nop
    }
  }
}
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ab0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d108      	bne.n	8008ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008ad2:	e007      	b.n	8008ae4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	60da      	str	r2, [r3, #12]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	3b10      	subs	r3, #16
 8008b00:	4a14      	ldr	r2, [pc, #80]	; (8008b54 <DMA_CalcBaseAndBitshift+0x64>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b0a:	4a13      	ldr	r2, [pc, #76]	; (8008b58 <DMA_CalcBaseAndBitshift+0x68>)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b03      	cmp	r3, #3
 8008b1c:	d909      	bls.n	8008b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	1d1a      	adds	r2, r3, #4
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8008b30:	e007      	b.n	8008b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	aaaaaaab 	.word	0xaaaaaaab
 8008b58:	0800f038 	.word	0x0800f038

08008b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d11f      	bne.n	8008bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d856      	bhi.n	8008c2a <DMA_CheckFifoParam+0xce>
 8008b7c:	a201      	add	r2, pc, #4	; (adr r2, 8008b84 <DMA_CheckFifoParam+0x28>)
 8008b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b82:	bf00      	nop
 8008b84:	08008b95 	.word	0x08008b95
 8008b88:	08008ba7 	.word	0x08008ba7
 8008b8c:	08008b95 	.word	0x08008b95
 8008b90:	08008c2b 	.word	0x08008c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d046      	beq.n	8008c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ba4:	e043      	b.n	8008c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bae:	d140      	bne.n	8008c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bb4:	e03d      	b.n	8008c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bbe:	d121      	bne.n	8008c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d837      	bhi.n	8008c36 <DMA_CheckFifoParam+0xda>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <DMA_CheckFifoParam+0x70>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008be3 	.word	0x08008be3
 8008bd4:	08008bdd 	.word	0x08008bdd
 8008bd8:	08008bf5 	.word	0x08008bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
      break;
 8008be0:	e030      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d025      	beq.n	8008c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bf2:	e022      	b.n	8008c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bfc:	d11f      	bne.n	8008c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c02:	e01c      	b.n	8008c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d903      	bls.n	8008c12 <DMA_CheckFifoParam+0xb6>
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d003      	beq.n	8008c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c10:	e018      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	73fb      	strb	r3, [r7, #15]
      break;
 8008c16:	e015      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00e      	beq.n	8008c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
      break;
 8008c28:	e00b      	b.n	8008c42 <DMA_CheckFifoParam+0xe6>
      break;
 8008c2a:	bf00      	nop
 8008c2c:	e00a      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      break;
 8008c2e:	bf00      	nop
 8008c30:	e008      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      break;
 8008c32:	bf00      	nop
 8008c34:	e006      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      break;
 8008c36:	bf00      	nop
 8008c38:	e004      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      break;
 8008c3a:	bf00      	nop
 8008c3c:	e002      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8008c3e:	bf00      	nop
 8008c40:	e000      	b.n	8008c44 <DMA_CheckFifoParam+0xe8>
      break;
 8008c42:	bf00      	nop
    }
  } 
  
  return status; 
 8008c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop

08008c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b089      	sub	sp, #36	; 0x24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	e159      	b.n	8008f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c70:	2201      	movs	r2, #1
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	fa02 f303 	lsl.w	r3, r2, r3
 8008c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	4013      	ands	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	f040 8148 	bne.w	8008f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	f003 0303 	and.w	r3, r3, #3
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d005      	beq.n	8008ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d130      	bne.n	8008d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	2203      	movs	r2, #3
 8008cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	69ba      	ldr	r2, [r7, #24]
 8008cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cdc:	2201      	movs	r2, #1
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	091b      	lsrs	r3, r3, #4
 8008cf2:	f003 0201 	and.w	r2, r3, #1
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d017      	beq.n	8008d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	2203      	movs	r2, #3
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f003 0303 	and.w	r3, r3, #3
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d123      	bne.n	8008d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	08da      	lsrs	r2, r3, #3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3208      	adds	r2, #8
 8008d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	220f      	movs	r2, #15
 8008d68:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6c:	43db      	mvns	r3, r3
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	4013      	ands	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	691a      	ldr	r2, [r3, #16]
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	08da      	lsrs	r2, r3, #3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	3208      	adds	r2, #8
 8008d92:	69b9      	ldr	r1, [r7, #24]
 8008d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	2203      	movs	r2, #3
 8008da4:	fa02 f303 	lsl.w	r3, r2, r3
 8008da8:	43db      	mvns	r3, r3
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	4013      	ands	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f003 0203 	and.w	r2, r3, #3
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80a2 	beq.w	8008f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	4b57      	ldr	r3, [pc, #348]	; (8008f3c <HAL_GPIO_Init+0x2e8>)
 8008de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de2:	4a56      	ldr	r2, [pc, #344]	; (8008f3c <HAL_GPIO_Init+0x2e8>)
 8008de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de8:	6453      	str	r3, [r2, #68]	; 0x44
 8008dea:	4b54      	ldr	r3, [pc, #336]	; (8008f3c <HAL_GPIO_Init+0x2e8>)
 8008dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008df6:	4a52      	ldr	r2, [pc, #328]	; (8008f40 <HAL_GPIO_Init+0x2ec>)
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	089b      	lsrs	r3, r3, #2
 8008dfc:	3302      	adds	r3, #2
 8008dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	220f      	movs	r2, #15
 8008e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e12:	43db      	mvns	r3, r3
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	4013      	ands	r3, r2
 8008e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a49      	ldr	r2, [pc, #292]	; (8008f44 <HAL_GPIO_Init+0x2f0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d019      	beq.n	8008e56 <HAL_GPIO_Init+0x202>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a48      	ldr	r2, [pc, #288]	; (8008f48 <HAL_GPIO_Init+0x2f4>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d013      	beq.n	8008e52 <HAL_GPIO_Init+0x1fe>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a47      	ldr	r2, [pc, #284]	; (8008f4c <HAL_GPIO_Init+0x2f8>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d00d      	beq.n	8008e4e <HAL_GPIO_Init+0x1fa>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a46      	ldr	r2, [pc, #280]	; (8008f50 <HAL_GPIO_Init+0x2fc>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d007      	beq.n	8008e4a <HAL_GPIO_Init+0x1f6>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a45      	ldr	r2, [pc, #276]	; (8008f54 <HAL_GPIO_Init+0x300>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d101      	bne.n	8008e46 <HAL_GPIO_Init+0x1f2>
 8008e42:	2304      	movs	r3, #4
 8008e44:	e008      	b.n	8008e58 <HAL_GPIO_Init+0x204>
 8008e46:	2307      	movs	r3, #7
 8008e48:	e006      	b.n	8008e58 <HAL_GPIO_Init+0x204>
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e004      	b.n	8008e58 <HAL_GPIO_Init+0x204>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e002      	b.n	8008e58 <HAL_GPIO_Init+0x204>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <HAL_GPIO_Init+0x204>
 8008e56:	2300      	movs	r3, #0
 8008e58:	69fa      	ldr	r2, [r7, #28]
 8008e5a:	f002 0203 	and.w	r2, r2, #3
 8008e5e:	0092      	lsls	r2, r2, #2
 8008e60:	4093      	lsls	r3, r2
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e68:	4935      	ldr	r1, [pc, #212]	; (8008f40 <HAL_GPIO_Init+0x2ec>)
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	089b      	lsrs	r3, r3, #2
 8008e6e:	3302      	adds	r3, #2
 8008e70:	69ba      	ldr	r2, [r7, #24]
 8008e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e76:	4b38      	ldr	r3, [pc, #224]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	43db      	mvns	r3, r3
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	4013      	ands	r3, r2
 8008e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d003      	beq.n	8008e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e9a:	4a2f      	ldr	r2, [pc, #188]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ea0:	4b2d      	ldr	r3, [pc, #180]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	43db      	mvns	r3, r3
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	4013      	ands	r3, r2
 8008eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ec4:	4a24      	ldr	r2, [pc, #144]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008eca:	4b23      	ldr	r3, [pc, #140]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	43db      	mvns	r3, r3
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008eee:	4a1a      	ldr	r2, [pc, #104]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ef4:	4b18      	ldr	r3, [pc, #96]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	69ba      	ldr	r2, [r7, #24]
 8008f00:	4013      	ands	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f18:	4a0f      	ldr	r2, [pc, #60]	; (8008f58 <HAL_GPIO_Init+0x304>)
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	3301      	adds	r3, #1
 8008f22:	61fb      	str	r3, [r7, #28]
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	2b0f      	cmp	r3, #15
 8008f28:	f67f aea2 	bls.w	8008c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	3724      	adds	r7, #36	; 0x24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40023800 	.word	0x40023800
 8008f40:	40013800 	.word	0x40013800
 8008f44:	40020000 	.word	0x40020000
 8008f48:	40020400 	.word	0x40020400
 8008f4c:	40020800 	.word	0x40020800
 8008f50:	40020c00 	.word	0x40020c00
 8008f54:	40021000 	.word	0x40021000
 8008f58:	40013c00 	.word	0x40013c00

08008f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	807b      	strh	r3, [r7, #2]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f6c:	787b      	ldrb	r3, [r7, #1]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d003      	beq.n	8008f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f72:	887a      	ldrh	r2, [r7, #2]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f78:	e003      	b.n	8008f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f7a:	887b      	ldrh	r3, [r7, #2]
 8008f7c:	041a      	lsls	r2, r3, #16
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	619a      	str	r2, [r3, #24]
}
 8008f82:	bf00      	nop
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
	...

08008f90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008f9c:	695a      	ldr	r2, [r3, #20]
 8008f9e:	88fb      	ldrh	r3, [r7, #6]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d006      	beq.n	8008fb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fa6:	4a05      	ldr	r2, [pc, #20]	; (8008fbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fa8:	88fb      	ldrh	r3, [r7, #6]
 8008faa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fac:	88fb      	ldrh	r3, [r7, #6]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fd fbfa 	bl	80067a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40013c00 	.word	0x40013c00

08008fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d101      	bne.n	8008fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e12b      	b.n	800922a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d106      	bne.n	8008fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fd fcd4 	bl	8006994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2224      	movs	r2, #36	; 0x24
 8008ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f022 0201 	bic.w	r2, r2, #1
 8009002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009024:	f001 fbbc 	bl	800a7a0 <HAL_RCC_GetPCLK1Freq>
 8009028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4a81      	ldr	r2, [pc, #516]	; (8009234 <HAL_I2C_Init+0x274>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d807      	bhi.n	8009044 <HAL_I2C_Init+0x84>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4a80      	ldr	r2, [pc, #512]	; (8009238 <HAL_I2C_Init+0x278>)
 8009038:	4293      	cmp	r3, r2
 800903a:	bf94      	ite	ls
 800903c:	2301      	movls	r3, #1
 800903e:	2300      	movhi	r3, #0
 8009040:	b2db      	uxtb	r3, r3
 8009042:	e006      	b.n	8009052 <HAL_I2C_Init+0x92>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a7d      	ldr	r2, [pc, #500]	; (800923c <HAL_I2C_Init+0x27c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	bf94      	ite	ls
 800904c:	2301      	movls	r3, #1
 800904e:	2300      	movhi	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e0e7      	b.n	800922a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4a78      	ldr	r2, [pc, #480]	; (8009240 <HAL_I2C_Init+0x280>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0c9b      	lsrs	r3, r3, #18
 8009064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68ba      	ldr	r2, [r7, #8]
 8009076:	430a      	orrs	r2, r1
 8009078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	4a6a      	ldr	r2, [pc, #424]	; (8009234 <HAL_I2C_Init+0x274>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d802      	bhi.n	8009094 <HAL_I2C_Init+0xd4>
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	3301      	adds	r3, #1
 8009092:	e009      	b.n	80090a8 <HAL_I2C_Init+0xe8>
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800909a:	fb02 f303 	mul.w	r3, r2, r3
 800909e:	4a69      	ldr	r2, [pc, #420]	; (8009244 <HAL_I2C_Init+0x284>)
 80090a0:	fba2 2303 	umull	r2, r3, r2, r3
 80090a4:	099b      	lsrs	r3, r3, #6
 80090a6:	3301      	adds	r3, #1
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6812      	ldr	r2, [r2, #0]
 80090ac:	430b      	orrs	r3, r1
 80090ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80090ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	495c      	ldr	r1, [pc, #368]	; (8009234 <HAL_I2C_Init+0x274>)
 80090c4:	428b      	cmp	r3, r1
 80090c6:	d819      	bhi.n	80090fc <HAL_I2C_Init+0x13c>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	1e59      	subs	r1, r3, #1
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80090d6:	1c59      	adds	r1, r3, #1
 80090d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80090dc:	400b      	ands	r3, r1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00a      	beq.n	80090f8 <HAL_I2C_Init+0x138>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1e59      	subs	r1, r3, #1
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80090f0:	3301      	adds	r3, #1
 80090f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090f6:	e051      	b.n	800919c <HAL_I2C_Init+0x1dc>
 80090f8:	2304      	movs	r3, #4
 80090fa:	e04f      	b.n	800919c <HAL_I2C_Init+0x1dc>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d111      	bne.n	8009128 <HAL_I2C_Init+0x168>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1e58      	subs	r0, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	440b      	add	r3, r1
 8009112:	fbb0 f3f3 	udiv	r3, r0, r3
 8009116:	3301      	adds	r3, #1
 8009118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	e012      	b.n	800914e <HAL_I2C_Init+0x18e>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	1e58      	subs	r0, r3, #1
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6859      	ldr	r1, [r3, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	0099      	lsls	r1, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	fbb0 f3f3 	udiv	r3, r0, r3
 800913e:	3301      	adds	r3, #1
 8009140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009144:	2b00      	cmp	r3, #0
 8009146:	bf0c      	ite	eq
 8009148:	2301      	moveq	r3, #1
 800914a:	2300      	movne	r3, #0
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <HAL_I2C_Init+0x196>
 8009152:	2301      	movs	r3, #1
 8009154:	e022      	b.n	800919c <HAL_I2C_Init+0x1dc>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10e      	bne.n	800917c <HAL_I2C_Init+0x1bc>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1e58      	subs	r0, r3, #1
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6859      	ldr	r1, [r3, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	440b      	add	r3, r1
 800916c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009170:	3301      	adds	r3, #1
 8009172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800917a:	e00f      	b.n	800919c <HAL_I2C_Init+0x1dc>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	1e58      	subs	r0, r3, #1
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6859      	ldr	r1, [r3, #4]
 8009184:	460b      	mov	r3, r1
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	0099      	lsls	r1, r3, #2
 800918c:	440b      	add	r3, r1
 800918e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009192:	3301      	adds	r3, #1
 8009194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	6809      	ldr	r1, [r1, #0]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	69da      	ldr	r2, [r3, #28]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	430a      	orrs	r2, r1
 80091be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80091ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6911      	ldr	r1, [r2, #16]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	68d2      	ldr	r2, [r2, #12]
 80091d6:	4311      	orrs	r1, r2
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6812      	ldr	r2, [r2, #0]
 80091dc:	430b      	orrs	r3, r1
 80091de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	695a      	ldr	r2, [r3, #20]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	699b      	ldr	r3, [r3, #24]
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2220      	movs	r2, #32
 8009216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	000186a0 	.word	0x000186a0
 8009238:	001e847f 	.word	0x001e847f
 800923c:	003d08ff 	.word	0x003d08ff
 8009240:	431bde83 	.word	0x431bde83
 8009244:	10624dd3 	.word	0x10624dd3

08009248 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	4608      	mov	r0, r1
 8009252:	4611      	mov	r1, r2
 8009254:	461a      	mov	r2, r3
 8009256:	4603      	mov	r3, r0
 8009258:	817b      	strh	r3, [r7, #10]
 800925a:	460b      	mov	r3, r1
 800925c:	813b      	strh	r3, [r7, #8]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009262:	f7fd ff65 	bl	8007130 <HAL_GetTick>
 8009266:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b20      	cmp	r3, #32
 8009272:	f040 80d9 	bne.w	8009428 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	2319      	movs	r3, #25
 800927c:	2201      	movs	r2, #1
 800927e:	496d      	ldr	r1, [pc, #436]	; (8009434 <HAL_I2C_Mem_Write+0x1ec>)
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 fc7f 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800928c:	2302      	movs	r3, #2
 800928e:	e0cc      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_I2C_Mem_Write+0x56>
 800929a:	2302      	movs	r3, #2
 800929c:	e0c5      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d007      	beq.n	80092c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0201 	orr.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2221      	movs	r2, #33	; 0x21
 80092d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2240      	movs	r2, #64	; 0x40
 80092e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6a3a      	ldr	r2, [r7, #32]
 80092ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4a4d      	ldr	r2, [pc, #308]	; (8009438 <HAL_I2C_Mem_Write+0x1f0>)
 8009304:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009306:	88f8      	ldrh	r0, [r7, #6]
 8009308:	893a      	ldrh	r2, [r7, #8]
 800930a:	8979      	ldrh	r1, [r7, #10]
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4603      	mov	r3, r0
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f000 fab6 	bl	8009888 <I2C_RequestMemoryWrite>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d052      	beq.n	80093c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	e081      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fd00 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00d      	beq.n	8009352 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933a:	2b04      	cmp	r3, #4
 800933c:	d107      	bne.n	800934e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800934c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e06b      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009378:	b29b      	uxth	r3, r3
 800937a:	3b01      	subs	r3, #1
 800937c:	b29a      	uxth	r2, r3
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b04      	cmp	r3, #4
 800938e:	d11b      	bne.n	80093c8 <HAL_I2C_Mem_Write+0x180>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009394:	2b00      	cmp	r3, #0
 8009396:	d017      	beq.n	80093c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093be:	b29b      	uxth	r3, r3
 80093c0:	3b01      	subs	r3, #1
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1aa      	bne.n	8009326 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093d4:	68f8      	ldr	r0, [r7, #12]
 80093d6:	f000 fcec 	bl	8009db2 <I2C_WaitOnBTFFlagUntilTimeout>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e4:	2b04      	cmp	r3, #4
 80093e6:	d107      	bne.n	80093f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e016      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800940a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	e000      	b.n	800942a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009428:	2302      	movs	r3, #2
  }
}
 800942a:	4618      	mov	r0, r3
 800942c:	3718      	adds	r7, #24
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	00100002 	.word	0x00100002
 8009438:	ffff0000 	.word	0xffff0000

0800943c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b08c      	sub	sp, #48	; 0x30
 8009440:	af02      	add	r7, sp, #8
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	4608      	mov	r0, r1
 8009446:	4611      	mov	r1, r2
 8009448:	461a      	mov	r2, r3
 800944a:	4603      	mov	r3, r0
 800944c:	817b      	strh	r3, [r7, #10]
 800944e:	460b      	mov	r3, r1
 8009450:	813b      	strh	r3, [r7, #8]
 8009452:	4613      	mov	r3, r2
 8009454:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009456:	f7fd fe6b 	bl	8007130 <HAL_GetTick>
 800945a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b20      	cmp	r3, #32
 8009466:	f040 8208 	bne.w	800987a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800946a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	2319      	movs	r3, #25
 8009470:	2201      	movs	r2, #1
 8009472:	497b      	ldr	r1, [pc, #492]	; (8009660 <HAL_I2C_Mem_Read+0x224>)
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 fb85 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009480:	2302      	movs	r3, #2
 8009482:	e1fb      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800948a:	2b01      	cmp	r3, #1
 800948c:	d101      	bne.n	8009492 <HAL_I2C_Mem_Read+0x56>
 800948e:	2302      	movs	r3, #2
 8009490:	e1f4      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d007      	beq.n	80094b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f042 0201 	orr.w	r2, r2, #1
 80094b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2222      	movs	r2, #34	; 0x22
 80094cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2240      	movs	r2, #64	; 0x40
 80094d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80094e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	4a5b      	ldr	r2, [pc, #364]	; (8009664 <HAL_I2C_Mem_Read+0x228>)
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094fa:	88f8      	ldrh	r0, [r7, #6]
 80094fc:	893a      	ldrh	r2, [r7, #8]
 80094fe:	8979      	ldrh	r1, [r7, #10]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f000 fa52 	bl	80099b4 <I2C_RequestMemoryRead>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e1b0      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d113      	bne.n	800954a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009522:	2300      	movs	r3, #0
 8009524:	623b      	str	r3, [r7, #32]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	623b      	str	r3, [r7, #32]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	623b      	str	r3, [r7, #32]
 8009536:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	e184      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954e:	2b01      	cmp	r3, #1
 8009550:	d11b      	bne.n	800958a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009562:	2300      	movs	r3, #0
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	61fb      	str	r3, [r7, #28]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	61fb      	str	r3, [r7, #28]
 8009576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e164      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800958e:	2b02      	cmp	r3, #2
 8009590:	d11b      	bne.n	80095ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b2:	2300      	movs	r3, #0
 80095b4:	61bb      	str	r3, [r7, #24]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	e144      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80095e0:	e138      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	f200 80f1 	bhi.w	80097ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d123      	bne.n	800963c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fc1b 	bl	8009e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e139      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691a      	ldr	r2, [r3, #16]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009624:	3b01      	subs	r3, #1
 8009626:	b29a      	uxth	r2, r3
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009630:	b29b      	uxth	r3, r3
 8009632:	3b01      	subs	r3, #1
 8009634:	b29a      	uxth	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	855a      	strh	r2, [r3, #42]	; 0x2a
 800963a:	e10b      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009640:	2b02      	cmp	r3, #2
 8009642:	d14e      	bne.n	80096e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	2200      	movs	r2, #0
 800964c:	4906      	ldr	r1, [pc, #24]	; (8009668 <HAL_I2C_Mem_Read+0x22c>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 fa98 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d008      	beq.n	800966c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e10e      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
 800965e:	bf00      	nop
 8009660:	00100002 	.word	0x00100002
 8009664:	ffff0000 	.word	0xffff0000
 8009668:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800967a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096e0:	e0b8      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	2200      	movs	r2, #0
 80096ea:	4966      	ldr	r1, [pc, #408]	; (8009884 <HAL_I2C_Mem_Read+0x448>)
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fa49 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e0bf      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800970a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	b2d2      	uxtb	r2, r2
 8009718:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	1c5a      	adds	r2, r3, #1
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009728:	3b01      	subs	r3, #1
 800972a:	b29a      	uxth	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009734:	b29b      	uxth	r3, r3
 8009736:	3b01      	subs	r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800973e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	2200      	movs	r2, #0
 8009746:	494f      	ldr	r1, [pc, #316]	; (8009884 <HAL_I2C_Mem_Read+0x448>)
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 fa1b 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e091      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009784:	3b01      	subs	r3, #1
 8009786:	b29a      	uxth	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009790:	b29b      	uxth	r3, r3
 8009792:	3b01      	subs	r3, #1
 8009794:	b29a      	uxth	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691a      	ldr	r2, [r3, #16]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	b2d2      	uxtb	r2, r2
 80097a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	1c5a      	adds	r2, r3, #1
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	3b01      	subs	r3, #1
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097cc:	e042      	b.n	8009854 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fb2e 	bl	8009e34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e04c      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	b2d2      	uxtb	r2, r2
 80097ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800980a:	b29b      	uxth	r3, r3
 800980c:	3b01      	subs	r3, #1
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	f003 0304 	and.w	r3, r3, #4
 800981e:	2b04      	cmp	r3, #4
 8009820:	d118      	bne.n	8009854 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	691a      	ldr	r2, [r3, #16]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	b2d2      	uxtb	r2, r2
 800982e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983e:	3b01      	subs	r3, #1
 8009840:	b29a      	uxth	r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984a:	b29b      	uxth	r3, r3
 800984c:	3b01      	subs	r3, #1
 800984e:	b29a      	uxth	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009858:	2b00      	cmp	r3, #0
 800985a:	f47f aec2 	bne.w	80095e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	e000      	b.n	800987c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800987a:	2302      	movs	r3, #2
  }
}
 800987c:	4618      	mov	r0, r3
 800987e:	3728      	adds	r7, #40	; 0x28
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	00010004 	.word	0x00010004

08009888 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b088      	sub	sp, #32
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	4608      	mov	r0, r1
 8009892:	4611      	mov	r1, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4603      	mov	r3, r0
 8009898:	817b      	strh	r3, [r7, #10]
 800989a:	460b      	mov	r3, r1
 800989c:	813b      	strh	r3, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 f960 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00d      	beq.n	80098e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d8:	d103      	bne.n	80098e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098e2:	2303      	movs	r3, #3
 80098e4:	e05f      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098e6:	897b      	ldrh	r3, [r7, #10]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	461a      	mov	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	6a3a      	ldr	r2, [r7, #32]
 80098fa:	492d      	ldr	r1, [pc, #180]	; (80099b0 <I2C_RequestMemoryWrite+0x128>)
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f998 	bl	8009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e04c      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800990c:	2300      	movs	r3, #0
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	617b      	str	r3, [r7, #20]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009924:	6a39      	ldr	r1, [r7, #32]
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fa02 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00d      	beq.n	800994e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	2b04      	cmp	r3, #4
 8009938:	d107      	bne.n	800994a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009948:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e02b      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	2b01      	cmp	r3, #1
 8009952:	d105      	bne.n	8009960 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009954:	893b      	ldrh	r3, [r7, #8]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	611a      	str	r2, [r3, #16]
 800995e:	e021      	b.n	80099a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009960:	893b      	ldrh	r3, [r7, #8]
 8009962:	0a1b      	lsrs	r3, r3, #8
 8009964:	b29b      	uxth	r3, r3
 8009966:	b2da      	uxtb	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800996e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009970:	6a39      	ldr	r1, [r7, #32]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f9dc 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00d      	beq.n	800999a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	2b04      	cmp	r3, #4
 8009984:	d107      	bne.n	8009996 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009994:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e005      	b.n	80099a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800999a:	893b      	ldrh	r3, [r7, #8]
 800999c:	b2da      	uxtb	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	00010002 	.word	0x00010002

080099b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af02      	add	r7, sp, #8
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	461a      	mov	r2, r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	817b      	strh	r3, [r7, #10]
 80099c6:	460b      	mov	r3, r1
 80099c8:	813b      	strh	r3, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 f8c2 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00d      	beq.n	8009a22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a14:	d103      	bne.n	8009a1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	e0aa      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a22:	897b      	ldrh	r3, [r7, #10]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	6a3a      	ldr	r2, [r7, #32]
 8009a36:	4952      	ldr	r1, [pc, #328]	; (8009b80 <I2C_RequestMemoryRead+0x1cc>)
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f8fa 	bl	8009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009a44:	2301      	movs	r3, #1
 8009a46:	e097      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a48:	2300      	movs	r3, #0
 8009a4a:	617b      	str	r3, [r7, #20]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	617b      	str	r3, [r7, #20]
 8009a5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a60:	6a39      	ldr	r1, [r7, #32]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f964 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00d      	beq.n	8009a8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d107      	bne.n	8009a86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e076      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a8a:	88fb      	ldrh	r3, [r7, #6]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d105      	bne.n	8009a9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a90:	893b      	ldrh	r3, [r7, #8]
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	611a      	str	r2, [r3, #16]
 8009a9a:	e021      	b.n	8009ae0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a9c:	893b      	ldrh	r3, [r7, #8]
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aac:	6a39      	ldr	r1, [r7, #32]
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 f93e 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d00d      	beq.n	8009ad6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abe:	2b04      	cmp	r3, #4
 8009ac0:	d107      	bne.n	8009ad2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e050      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ad6:	893b      	ldrh	r3, [r7, #8]
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae2:	6a39      	ldr	r1, [r7, #32]
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f923 	bl	8009d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00d      	beq.n	8009b0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	d107      	bne.n	8009b08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e035      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f82b 	bl	8009b84 <I2C_WaitOnFlagUntilTimeout>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00d      	beq.n	8009b50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b42:	d103      	bne.n	8009b4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	e013      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b50:	897b      	ldrh	r3, [r7, #10]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f043 0301 	orr.w	r3, r3, #1
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	6a3a      	ldr	r2, [r7, #32]
 8009b64:	4906      	ldr	r1, [pc, #24]	; (8009b80 <I2C_RequestMemoryRead+0x1cc>)
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 f863 	bl	8009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3718      	adds	r7, #24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	00010002 	.word	0x00010002

08009b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4613      	mov	r3, r2
 8009b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009b94:	e025      	b.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9c:	d021      	beq.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9e:	f7fd fac7 	bl	8007130 <HAL_GetTick>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d302      	bcc.n	8009bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d116      	bne.n	8009be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	f043 0220 	orr.w	r2, r3, #32
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e023      	b.n	8009c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	0c1b      	lsrs	r3, r3, #16
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d10d      	bne.n	8009c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	43da      	mvns	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf0c      	ite	eq
 8009bfe:	2301      	moveq	r3, #1
 8009c00:	2300      	movne	r3, #0
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	e00c      	b.n	8009c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	43da      	mvns	r2, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	4013      	ands	r3, r2
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	bf0c      	ite	eq
 8009c1a:	2301      	moveq	r3, #1
 8009c1c:	2300      	movne	r3, #0
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	461a      	mov	r2, r3
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d0b6      	beq.n	8009b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b084      	sub	sp, #16
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c40:	e051      	b.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	695b      	ldr	r3, [r3, #20]
 8009c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c50:	d123      	bne.n	8009c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2220      	movs	r2, #32
 8009c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c86:	f043 0204 	orr.w	r2, r3, #4
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e046      	b.n	8009d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca0:	d021      	beq.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca2:	f7fd fa45 	bl	8007130 <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	1ad3      	subs	r3, r2, r3
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d302      	bcc.n	8009cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d116      	bne.n	8009ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2220      	movs	r2, #32
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	f043 0220 	orr.w	r2, r3, #32
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e020      	b.n	8009d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	0c1b      	lsrs	r3, r3, #16
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d10c      	bne.n	8009d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	43da      	mvns	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bf14      	ite	ne
 8009d02:	2301      	movne	r3, #1
 8009d04:	2300      	moveq	r3, #0
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	e00b      	b.n	8009d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	43da      	mvns	r2, r3
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	4013      	ands	r3, r2
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bf14      	ite	ne
 8009d1c:	2301      	movne	r3, #1
 8009d1e:	2300      	moveq	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d18d      	bne.n	8009c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d3c:	e02d      	b.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f000 f8ce 	bl	8009ee0 <I2C_IsAcknowledgeFailed>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e02d      	b.n	8009daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d54:	d021      	beq.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d56:	f7fd f9eb 	bl	8007130 <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	68ba      	ldr	r2, [r7, #8]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d302      	bcc.n	8009d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d116      	bne.n	8009d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2220      	movs	r2, #32
 8009d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f043 0220 	orr.w	r2, r3, #32
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e007      	b.n	8009daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009da4:	2b80      	cmp	r3, #128	; 0x80
 8009da6:	d1ca      	bne.n	8009d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009dbe:	e02d      	b.n	8009e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f000 f88d 	bl	8009ee0 <I2C_IsAcknowledgeFailed>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e02d      	b.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d021      	beq.n	8009e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd8:	f7fd f9aa 	bl	8007130 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d302      	bcc.n	8009dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d116      	bne.n	8009e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e08:	f043 0220 	orr.w	r2, r3, #32
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e007      	b.n	8009e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	695b      	ldr	r3, [r3, #20]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d1ca      	bne.n	8009dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e40:	e042      	b.n	8009ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	f003 0310 	and.w	r3, r3, #16
 8009e4c:	2b10      	cmp	r3, #16
 8009e4e:	d119      	bne.n	8009e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0210 	mvn.w	r2, #16
 8009e58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2220      	movs	r2, #32
 8009e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e029      	b.n	8009ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e84:	f7fd f954 	bl	8007130 <HAL_GetTick>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d116      	bne.n	8009ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2220      	movs	r2, #32
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb4:	f043 0220 	orr.w	r2, r3, #32
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e007      	b.n	8009ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed2:	2b40      	cmp	r3, #64	; 0x40
 8009ed4:	d1b5      	bne.n	8009e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ef6:	d11b      	bne.n	8009f30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1c:	f043 0204 	orr.w	r2, r3, #4
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e000      	b.n	8009f32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	370c      	adds	r7, #12
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
	...

08009f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e267      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0301 	and.w	r3, r3, #1
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d075      	beq.n	800a04a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f5e:	4b88      	ldr	r3, [pc, #544]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f003 030c 	and.w	r3, r3, #12
 8009f66:	2b04      	cmp	r3, #4
 8009f68:	d00c      	beq.n	8009f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f6a:	4b85      	ldr	r3, [pc, #532]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d112      	bne.n	8009f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f76:	4b82      	ldr	r3, [pc, #520]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f82:	d10b      	bne.n	8009f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f84:	4b7e      	ldr	r3, [pc, #504]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d05b      	beq.n	800a048 <HAL_RCC_OscConfig+0x108>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d157      	bne.n	800a048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e242      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa4:	d106      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x74>
 8009fa6:	4b76      	ldr	r3, [pc, #472]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a75      	ldr	r2, [pc, #468]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	e01d      	b.n	8009ff0 <HAL_RCC_OscConfig+0xb0>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fbc:	d10c      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x98>
 8009fbe:	4b70      	ldr	r3, [pc, #448]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a6f      	ldr	r2, [pc, #444]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4b6d      	ldr	r3, [pc, #436]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a6c      	ldr	r2, [pc, #432]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	e00b      	b.n	8009ff0 <HAL_RCC_OscConfig+0xb0>
 8009fd8:	4b69      	ldr	r3, [pc, #420]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a68      	ldr	r2, [pc, #416]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	4b66      	ldr	r3, [pc, #408]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a65      	ldr	r2, [pc, #404]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 8009fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d013      	beq.n	800a020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ff8:	f7fd f89a 	bl	8007130 <HAL_GetTick>
 8009ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ffe:	e008      	b.n	800a012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a000:	f7fd f896 	bl	8007130 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b64      	cmp	r3, #100	; 0x64
 800a00c:	d901      	bls.n	800a012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e207      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a012:	4b5b      	ldr	r3, [pc, #364]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d0f0      	beq.n	800a000 <HAL_RCC_OscConfig+0xc0>
 800a01e:	e014      	b.n	800a04a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a020:	f7fd f886 	bl	8007130 <HAL_GetTick>
 800a024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a026:	e008      	b.n	800a03a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a028:	f7fd f882 	bl	8007130 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b64      	cmp	r3, #100	; 0x64
 800a034:	d901      	bls.n	800a03a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e1f3      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a03a:	4b51      	ldr	r3, [pc, #324]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1f0      	bne.n	800a028 <HAL_RCC_OscConfig+0xe8>
 800a046:	e000      	b.n	800a04a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b00      	cmp	r3, #0
 800a054:	d063      	beq.n	800a11e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a056:	4b4a      	ldr	r3, [pc, #296]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f003 030c 	and.w	r3, r3, #12
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a062:	4b47      	ldr	r3, [pc, #284]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a06a:	2b08      	cmp	r3, #8
 800a06c:	d11c      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a06e:	4b44      	ldr	r3, [pc, #272]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d116      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a07a:	4b41      	ldr	r3, [pc, #260]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d005      	beq.n	800a092 <HAL_RCC_OscConfig+0x152>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d001      	beq.n	800a092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e1c7      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a092:	4b3b      	ldr	r3, [pc, #236]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4937      	ldr	r1, [pc, #220]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0a6:	e03a      	b.n	800a11e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d020      	beq.n	800a0f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0b0:	4b34      	ldr	r3, [pc, #208]	; (800a184 <HAL_RCC_OscConfig+0x244>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b6:	f7fd f83b 	bl	8007130 <HAL_GetTick>
 800a0ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0bc:	e008      	b.n	800a0d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0be:	f7fd f837 	bl	8007130 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d901      	bls.n	800a0d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e1a8      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0d0:	4b2b      	ldr	r3, [pc, #172]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0302 	and.w	r3, r3, #2
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d0f0      	beq.n	800a0be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0dc:	4b28      	ldr	r3, [pc, #160]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	4925      	ldr	r1, [pc, #148]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	600b      	str	r3, [r1, #0]
 800a0f0:	e015      	b.n	800a11e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0f2:	4b24      	ldr	r3, [pc, #144]	; (800a184 <HAL_RCC_OscConfig+0x244>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f8:	f7fd f81a 	bl	8007130 <HAL_GetTick>
 800a0fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0fe:	e008      	b.n	800a112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a100:	f7fd f816 	bl	8007130 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d901      	bls.n	800a112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a10e:	2303      	movs	r3, #3
 800a110:	e187      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a112:	4b1b      	ldr	r3, [pc, #108]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1f0      	bne.n	800a100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d036      	beq.n	800a198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d016      	beq.n	800a160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <HAL_RCC_OscConfig+0x248>)
 800a134:	2201      	movs	r2, #1
 800a136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a138:	f7fc fffa 	bl	8007130 <HAL_GetTick>
 800a13c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a13e:	e008      	b.n	800a152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a140:	f7fc fff6 	bl	8007130 <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e167      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a152:	4b0b      	ldr	r3, [pc, #44]	; (800a180 <HAL_RCC_OscConfig+0x240>)
 800a154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f0      	beq.n	800a140 <HAL_RCC_OscConfig+0x200>
 800a15e:	e01b      	b.n	800a198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a160:	4b09      	ldr	r3, [pc, #36]	; (800a188 <HAL_RCC_OscConfig+0x248>)
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a166:	f7fc ffe3 	bl	8007130 <HAL_GetTick>
 800a16a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a16c:	e00e      	b.n	800a18c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a16e:	f7fc ffdf 	bl	8007130 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d907      	bls.n	800a18c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a17c:	2303      	movs	r3, #3
 800a17e:	e150      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
 800a180:	40023800 	.word	0x40023800
 800a184:	42470000 	.word	0x42470000
 800a188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a18c:	4b88      	ldr	r3, [pc, #544]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ea      	bne.n	800a16e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0304 	and.w	r3, r3, #4
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 8097 	beq.w	800a2d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1aa:	4b81      	ldr	r3, [pc, #516]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10f      	bne.n	800a1d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	4b7d      	ldr	r3, [pc, #500]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	4a7c      	ldr	r2, [pc, #496]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c6:	4b7a      	ldr	r3, [pc, #488]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1ce:	60bb      	str	r3, [r7, #8]
 800a1d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1d6:	4b77      	ldr	r3, [pc, #476]	; (800a3b4 <HAL_RCC_OscConfig+0x474>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d118      	bne.n	800a214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a1e2:	4b74      	ldr	r3, [pc, #464]	; (800a3b4 <HAL_RCC_OscConfig+0x474>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a73      	ldr	r2, [pc, #460]	; (800a3b4 <HAL_RCC_OscConfig+0x474>)
 800a1e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1ee:	f7fc ff9f 	bl	8007130 <HAL_GetTick>
 800a1f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1f4:	e008      	b.n	800a208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1f6:	f7fc ff9b 	bl	8007130 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	2b02      	cmp	r3, #2
 800a202:	d901      	bls.n	800a208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a204:	2303      	movs	r3, #3
 800a206:	e10c      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a208:	4b6a      	ldr	r3, [pc, #424]	; (800a3b4 <HAL_RCC_OscConfig+0x474>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0f0      	beq.n	800a1f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d106      	bne.n	800a22a <HAL_RCC_OscConfig+0x2ea>
 800a21c:	4b64      	ldr	r3, [pc, #400]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a220:	4a63      	ldr	r2, [pc, #396]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	6713      	str	r3, [r2, #112]	; 0x70
 800a228:	e01c      	b.n	800a264 <HAL_RCC_OscConfig+0x324>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	2b05      	cmp	r3, #5
 800a230:	d10c      	bne.n	800a24c <HAL_RCC_OscConfig+0x30c>
 800a232:	4b5f      	ldr	r3, [pc, #380]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a236:	4a5e      	ldr	r2, [pc, #376]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a238:	f043 0304 	orr.w	r3, r3, #4
 800a23c:	6713      	str	r3, [r2, #112]	; 0x70
 800a23e:	4b5c      	ldr	r3, [pc, #368]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	4a5b      	ldr	r2, [pc, #364]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a244:	f043 0301 	orr.w	r3, r3, #1
 800a248:	6713      	str	r3, [r2, #112]	; 0x70
 800a24a:	e00b      	b.n	800a264 <HAL_RCC_OscConfig+0x324>
 800a24c:	4b58      	ldr	r3, [pc, #352]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a24e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a250:	4a57      	ldr	r2, [pc, #348]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a252:	f023 0301 	bic.w	r3, r3, #1
 800a256:	6713      	str	r3, [r2, #112]	; 0x70
 800a258:	4b55      	ldr	r3, [pc, #340]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	4a54      	ldr	r2, [pc, #336]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a25e:	f023 0304 	bic.w	r3, r3, #4
 800a262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d015      	beq.n	800a298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a26c:	f7fc ff60 	bl	8007130 <HAL_GetTick>
 800a270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a272:	e00a      	b.n	800a28a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a274:	f7fc ff5c 	bl	8007130 <HAL_GetTick>
 800a278:	4602      	mov	r2, r0
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a282:	4293      	cmp	r3, r2
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e0cb      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a28a:	4b49      	ldr	r3, [pc, #292]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0ee      	beq.n	800a274 <HAL_RCC_OscConfig+0x334>
 800a296:	e014      	b.n	800a2c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a298:	f7fc ff4a 	bl	8007130 <HAL_GetTick>
 800a29c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a29e:	e00a      	b.n	800a2b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2a0:	f7fc ff46 	bl	8007130 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d901      	bls.n	800a2b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	e0b5      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2b6:	4b3e      	ldr	r3, [pc, #248]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1ee      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d105      	bne.n	800a2d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2c8:	4b39      	ldr	r3, [pc, #228]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	4a38      	ldr	r2, [pc, #224]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a2ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 80a1 	beq.w	800a420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a2de:	4b34      	ldr	r3, [pc, #208]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 030c 	and.w	r3, r3, #12
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d05c      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d141      	bne.n	800a376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2f2:	4b31      	ldr	r3, [pc, #196]	; (800a3b8 <HAL_RCC_OscConfig+0x478>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2f8:	f7fc ff1a 	bl	8007130 <HAL_GetTick>
 800a2fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2fe:	e008      	b.n	800a312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a300:	f7fc ff16 	bl	8007130 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e087      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a312:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1f0      	bne.n	800a300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	69da      	ldr	r2, [r3, #28]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	431a      	orrs	r2, r3
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	019b      	lsls	r3, r3, #6
 800a32e:	431a      	orrs	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	3b01      	subs	r3, #1
 800a338:	041b      	lsls	r3, r3, #16
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	061b      	lsls	r3, r3, #24
 800a342:	491b      	ldr	r1, [pc, #108]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a344:	4313      	orrs	r3, r2
 800a346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a348:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <HAL_RCC_OscConfig+0x478>)
 800a34a:	2201      	movs	r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a34e:	f7fc feef 	bl	8007130 <HAL_GetTick>
 800a352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a354:	e008      	b.n	800a368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a356:	f7fc feeb 	bl	8007130 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e05c      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a368:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <HAL_RCC_OscConfig+0x416>
 800a374:	e054      	b.n	800a420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a376:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <HAL_RCC_OscConfig+0x478>)
 800a378:	2200      	movs	r2, #0
 800a37a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a37c:	f7fc fed8 	bl	8007130 <HAL_GetTick>
 800a380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a382:	e008      	b.n	800a396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a384:	f7fc fed4 	bl	8007130 <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e045      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a396:	4b06      	ldr	r3, [pc, #24]	; (800a3b0 <HAL_RCC_OscConfig+0x470>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f0      	bne.n	800a384 <HAL_RCC_OscConfig+0x444>
 800a3a2:	e03d      	b.n	800a420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d107      	bne.n	800a3bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e038      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
 800a3b0:	40023800 	.word	0x40023800
 800a3b4:	40007000 	.word	0x40007000
 800a3b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a3bc:	4b1b      	ldr	r3, [pc, #108]	; (800a42c <HAL_RCC_OscConfig+0x4ec>)
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	699b      	ldr	r3, [r3, #24]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d028      	beq.n	800a41c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d121      	bne.n	800a41c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d11a      	bne.n	800a41c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d111      	bne.n	800a41c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a402:	085b      	lsrs	r3, r3, #1
 800a404:	3b01      	subs	r3, #1
 800a406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a408:	429a      	cmp	r2, r3
 800a40a:	d107      	bne.n	800a41c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a418:	429a      	cmp	r2, r3
 800a41a:	d001      	beq.n	800a420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	40023800 	.word	0x40023800

0800a430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	e0cc      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a444:	4b68      	ldr	r3, [pc, #416]	; (800a5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	683a      	ldr	r2, [r7, #0]
 800a44e:	429a      	cmp	r2, r3
 800a450:	d90c      	bls.n	800a46c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a452:	4b65      	ldr	r3, [pc, #404]	; (800a5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	b2d2      	uxtb	r2, r2
 800a458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a45a:	4b63      	ldr	r3, [pc, #396]	; (800a5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	429a      	cmp	r2, r3
 800a466:	d001      	beq.n	800a46c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e0b8      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d020      	beq.n	800a4ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 0304 	and.w	r3, r3, #4
 800a480:	2b00      	cmp	r3, #0
 800a482:	d005      	beq.n	800a490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a484:	4b59      	ldr	r3, [pc, #356]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	4a58      	ldr	r2, [pc, #352]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a48a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a48e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a49c:	4b53      	ldr	r3, [pc, #332]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	4a52      	ldr	r2, [pc, #328]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a4a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a4a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4a8:	4b50      	ldr	r3, [pc, #320]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	494d      	ldr	r1, [pc, #308]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 0301 	and.w	r3, r3, #1
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d044      	beq.n	800a550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d107      	bne.n	800a4de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ce:	4b47      	ldr	r3, [pc, #284]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d119      	bne.n	800a50e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e07f      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d003      	beq.n	800a4ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	d107      	bne.n	800a4fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4ee:	4b3f      	ldr	r3, [pc, #252]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d109      	bne.n	800a50e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e06f      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4fe:	4b3b      	ldr	r3, [pc, #236]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e067      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a50e:	4b37      	ldr	r3, [pc, #220]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f023 0203 	bic.w	r2, r3, #3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	4934      	ldr	r1, [pc, #208]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a520:	f7fc fe06 	bl	8007130 <HAL_GetTick>
 800a524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a526:	e00a      	b.n	800a53e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a528:	f7fc fe02 	bl	8007130 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	f241 3288 	movw	r2, #5000	; 0x1388
 800a536:	4293      	cmp	r3, r2
 800a538:	d901      	bls.n	800a53e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e04f      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a53e:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 020c 	and.w	r2, r3, #12
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d1eb      	bne.n	800a528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a550:	4b25      	ldr	r3, [pc, #148]	; (800a5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0307 	and.w	r3, r3, #7
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d20c      	bcs.n	800a578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a55e:	4b22      	ldr	r3, [pc, #136]	; (800a5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	b2d2      	uxtb	r2, r2
 800a564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a566:	4b20      	ldr	r3, [pc, #128]	; (800a5e8 <HAL_RCC_ClockConfig+0x1b8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	429a      	cmp	r2, r3
 800a572:	d001      	beq.n	800a578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	e032      	b.n	800a5de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a584:	4b19      	ldr	r3, [pc, #100]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	4916      	ldr	r1, [pc, #88]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a592:	4313      	orrs	r3, r2
 800a594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0308 	and.w	r3, r3, #8
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d009      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5a2:	4b12      	ldr	r3, [pc, #72]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	00db      	lsls	r3, r3, #3
 800a5b0:	490e      	ldr	r1, [pc, #56]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a5b6:	f000 f821 	bl	800a5fc <HAL_RCC_GetSysClockFreq>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <HAL_RCC_ClockConfig+0x1bc>)
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	091b      	lsrs	r3, r3, #4
 800a5c2:	f003 030f 	and.w	r3, r3, #15
 800a5c6:	490a      	ldr	r1, [pc, #40]	; (800a5f0 <HAL_RCC_ClockConfig+0x1c0>)
 800a5c8:	5ccb      	ldrb	r3, [r1, r3]
 800a5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ce:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <HAL_RCC_ClockConfig+0x1c4>)
 800a5d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a5d2:	4b09      	ldr	r3, [pc, #36]	; (800a5f8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fc fd66 	bl	80070a8 <HAL_InitTick>

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	40023c00 	.word	0x40023c00
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	0800f020 	.word	0x0800f020
 800a5f4:	20008f08 	.word	0x20008f08
 800a5f8:	20008f0c 	.word	0x20008f0c

0800a5fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a600:	b090      	sub	sp, #64	; 0x40
 800a602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a604:	2300      	movs	r3, #0
 800a606:	637b      	str	r3, [r7, #52]	; 0x34
 800a608:	2300      	movs	r3, #0
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60c:	2300      	movs	r3, #0
 800a60e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a610:	2300      	movs	r3, #0
 800a612:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a614:	4b59      	ldr	r3, [pc, #356]	; (800a77c <HAL_RCC_GetSysClockFreq+0x180>)
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f003 030c 	and.w	r3, r3, #12
 800a61c:	2b08      	cmp	r3, #8
 800a61e:	d00d      	beq.n	800a63c <HAL_RCC_GetSysClockFreq+0x40>
 800a620:	2b08      	cmp	r3, #8
 800a622:	f200 80a1 	bhi.w	800a768 <HAL_RCC_GetSysClockFreq+0x16c>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <HAL_RCC_GetSysClockFreq+0x34>
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d003      	beq.n	800a636 <HAL_RCC_GetSysClockFreq+0x3a>
 800a62e:	e09b      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a630:	4b53      	ldr	r3, [pc, #332]	; (800a780 <HAL_RCC_GetSysClockFreq+0x184>)
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a634:	e09b      	b.n	800a76e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a636:	4b53      	ldr	r3, [pc, #332]	; (800a784 <HAL_RCC_GetSysClockFreq+0x188>)
 800a638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a63a:	e098      	b.n	800a76e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a63c:	4b4f      	ldr	r3, [pc, #316]	; (800a77c <HAL_RCC_GetSysClockFreq+0x180>)
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a644:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a646:	4b4d      	ldr	r3, [pc, #308]	; (800a77c <HAL_RCC_GetSysClockFreq+0x180>)
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d028      	beq.n	800a6a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a652:	4b4a      	ldr	r3, [pc, #296]	; (800a77c <HAL_RCC_GetSysClockFreq+0x180>)
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	099b      	lsrs	r3, r3, #6
 800a658:	2200      	movs	r2, #0
 800a65a:	623b      	str	r3, [r7, #32]
 800a65c:	627a      	str	r2, [r7, #36]	; 0x24
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a664:	2100      	movs	r1, #0
 800a666:	4b47      	ldr	r3, [pc, #284]	; (800a784 <HAL_RCC_GetSysClockFreq+0x188>)
 800a668:	fb03 f201 	mul.w	r2, r3, r1
 800a66c:	2300      	movs	r3, #0
 800a66e:	fb00 f303 	mul.w	r3, r0, r3
 800a672:	4413      	add	r3, r2
 800a674:	4a43      	ldr	r2, [pc, #268]	; (800a784 <HAL_RCC_GetSysClockFreq+0x188>)
 800a676:	fba0 1202 	umull	r1, r2, r0, r2
 800a67a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a67c:	460a      	mov	r2, r1
 800a67e:	62ba      	str	r2, [r7, #40]	; 0x28
 800a680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a682:	4413      	add	r3, r2
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a688:	2200      	movs	r2, #0
 800a68a:	61bb      	str	r3, [r7, #24]
 800a68c:	61fa      	str	r2, [r7, #28]
 800a68e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a692:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a696:	f7f6 f8fd 	bl	8000894 <__aeabi_uldivmod>
 800a69a:	4602      	mov	r2, r0
 800a69c:	460b      	mov	r3, r1
 800a69e:	4613      	mov	r3, r2
 800a6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6a2:	e053      	b.n	800a74c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6a4:	4b35      	ldr	r3, [pc, #212]	; (800a77c <HAL_RCC_GetSysClockFreq+0x180>)
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	099b      	lsrs	r3, r3, #6
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	617a      	str	r2, [r7, #20]
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a6b6:	f04f 0b00 	mov.w	fp, #0
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	465b      	mov	r3, fp
 800a6be:	f04f 0000 	mov.w	r0, #0
 800a6c2:	f04f 0100 	mov.w	r1, #0
 800a6c6:	0159      	lsls	r1, r3, #5
 800a6c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a6cc:	0150      	lsls	r0, r2, #5
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	ebb2 080a 	subs.w	r8, r2, sl
 800a6d6:	eb63 090b 	sbc.w	r9, r3, fp
 800a6da:	f04f 0200 	mov.w	r2, #0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a6e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a6ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a6ee:	ebb2 0408 	subs.w	r4, r2, r8
 800a6f2:	eb63 0509 	sbc.w	r5, r3, r9
 800a6f6:	f04f 0200 	mov.w	r2, #0
 800a6fa:	f04f 0300 	mov.w	r3, #0
 800a6fe:	00eb      	lsls	r3, r5, #3
 800a700:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a704:	00e2      	lsls	r2, r4, #3
 800a706:	4614      	mov	r4, r2
 800a708:	461d      	mov	r5, r3
 800a70a:	eb14 030a 	adds.w	r3, r4, sl
 800a70e:	603b      	str	r3, [r7, #0]
 800a710:	eb45 030b 	adc.w	r3, r5, fp
 800a714:	607b      	str	r3, [r7, #4]
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	f04f 0300 	mov.w	r3, #0
 800a71e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a722:	4629      	mov	r1, r5
 800a724:	028b      	lsls	r3, r1, #10
 800a726:	4621      	mov	r1, r4
 800a728:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a72c:	4621      	mov	r1, r4
 800a72e:	028a      	lsls	r2, r1, #10
 800a730:	4610      	mov	r0, r2
 800a732:	4619      	mov	r1, r3
 800a734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a736:	2200      	movs	r2, #0
 800a738:	60bb      	str	r3, [r7, #8]
 800a73a:	60fa      	str	r2, [r7, #12]
 800a73c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a740:	f7f6 f8a8 	bl	8000894 <__aeabi_uldivmod>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4613      	mov	r3, r2
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a74c:	4b0b      	ldr	r3, [pc, #44]	; (800a77c <HAL_RCC_GetSysClockFreq+0x180>)
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	0c1b      	lsrs	r3, r3, #16
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	3301      	adds	r3, #1
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a75c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a760:	fbb2 f3f3 	udiv	r3, r2, r3
 800a764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a766:	e002      	b.n	800a76e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <HAL_RCC_GetSysClockFreq+0x184>)
 800a76a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a76c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a770:	4618      	mov	r0, r3
 800a772:	3740      	adds	r7, #64	; 0x40
 800a774:	46bd      	mov	sp, r7
 800a776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a77a:	bf00      	nop
 800a77c:	40023800 	.word	0x40023800
 800a780:	00f42400 	.word	0x00f42400
 800a784:	017d7840 	.word	0x017d7840

0800a788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a788:	b480      	push	{r7}
 800a78a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a78c:	4b03      	ldr	r3, [pc, #12]	; (800a79c <HAL_RCC_GetHCLKFreq+0x14>)
 800a78e:	681b      	ldr	r3, [r3, #0]
}
 800a790:	4618      	mov	r0, r3
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20008f08 	.word	0x20008f08

0800a7a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7a4:	f7ff fff0 	bl	800a788 <HAL_RCC_GetHCLKFreq>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	0a9b      	lsrs	r3, r3, #10
 800a7b0:	f003 0307 	and.w	r3, r3, #7
 800a7b4:	4903      	ldr	r1, [pc, #12]	; (800a7c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7b6:	5ccb      	ldrb	r3, [r1, r3]
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	40023800 	.word	0x40023800
 800a7c4:	0800f030 	.word	0x0800f030

0800a7c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a7cc:	f7ff ffdc 	bl	800a788 <HAL_RCC_GetHCLKFreq>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4b05      	ldr	r3, [pc, #20]	; (800a7e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	0b5b      	lsrs	r3, r3, #13
 800a7d8:	f003 0307 	and.w	r3, r3, #7
 800a7dc:	4903      	ldr	r1, [pc, #12]	; (800a7ec <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7de:	5ccb      	ldrb	r3, [r1, r3]
 800a7e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	40023800 	.word	0x40023800
 800a7ec:	0800f030 	.word	0x0800f030

0800a7f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	e07b      	b.n	800a8fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	d108      	bne.n	800a81c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a812:	d009      	beq.n	800a828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	61da      	str	r2, [r3, #28]
 800a81a:	e005      	b.n	800a828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d106      	bne.n	800a848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7fc f900 	bl	8006a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a85e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a870:	431a      	orrs	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a87a:	431a      	orrs	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	f003 0302 	and.w	r3, r3, #2
 800a884:	431a      	orrs	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	431a      	orrs	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	699b      	ldr	r3, [r3, #24]
 800a894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a898:	431a      	orrs	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a1b      	ldr	r3, [r3, #32]
 800a8a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ac:	ea42 0103 	orr.w	r1, r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	0c1b      	lsrs	r3, r3, #16
 800a8c6:	f003 0104 	and.w	r1, r3, #4
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	f003 0210 	and.w	r2, r3, #16
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	69da      	ldr	r2, [r3, #28]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b088      	sub	sp, #32
 800a906:	af00      	add	r7, sp, #0
 800a908:	60f8      	str	r0, [r7, #12]
 800a90a:	60b9      	str	r1, [r7, #8]
 800a90c:	603b      	str	r3, [r7, #0]
 800a90e:	4613      	mov	r3, r2
 800a910:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d101      	bne.n	800a924 <HAL_SPI_Transmit+0x22>
 800a920:	2302      	movs	r3, #2
 800a922:	e126      	b.n	800ab72 <HAL_SPI_Transmit+0x270>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a92c:	f7fc fc00 	bl	8007130 <HAL_GetTick>
 800a930:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a932:	88fb      	ldrh	r3, [r7, #6]
 800a934:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d002      	beq.n	800a948 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a942:	2302      	movs	r3, #2
 800a944:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a946:	e10b      	b.n	800ab60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_SPI_Transmit+0x52>
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a954:	2301      	movs	r3, #1
 800a956:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a958:	e102      	b.n	800ab60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2203      	movs	r2, #3
 800a95e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	88fa      	ldrh	r2, [r7, #6]
 800a972:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	88fa      	ldrh	r2, [r7, #6]
 800a978:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a0:	d10f      	bne.n	800a9c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9cc:	2b40      	cmp	r3, #64	; 0x40
 800a9ce:	d007      	beq.n	800a9e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e8:	d14b      	bne.n	800aa82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <HAL_SPI_Transmit+0xf6>
 800a9f2:	8afb      	ldrh	r3, [r7, #22]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d13e      	bne.n	800aa76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fc:	881a      	ldrh	r2, [r3, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa08:	1c9a      	adds	r2, r3, #2
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800aa1c:	e02b      	b.n	800aa76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f003 0302 	and.w	r3, r3, #2
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d112      	bne.n	800aa52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa30:	881a      	ldrh	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3c:	1c9a      	adds	r2, r3, #2
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	86da      	strh	r2, [r3, #54]	; 0x36
 800aa50:	e011      	b.n	800aa76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa52:	f7fc fb6d 	bl	8007130 <HAL_GetTick>
 800aa56:	4602      	mov	r2, r0
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d803      	bhi.n	800aa6a <HAL_SPI_Transmit+0x168>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa68:	d102      	bne.n	800aa70 <HAL_SPI_Transmit+0x16e>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d102      	bne.n	800aa76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aa74:	e074      	b.n	800ab60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1ce      	bne.n	800aa1e <HAL_SPI_Transmit+0x11c>
 800aa80:	e04c      	b.n	800ab1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <HAL_SPI_Transmit+0x18e>
 800aa8a:	8afb      	ldrh	r3, [r7, #22]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d140      	bne.n	800ab12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	330c      	adds	r3, #12
 800aa9a:	7812      	ldrb	r2, [r2, #0]
 800aa9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aab6:	e02c      	b.n	800ab12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d113      	bne.n	800aaee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	330c      	adds	r3, #12
 800aad0:	7812      	ldrb	r2, [r2, #0]
 800aad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	3b01      	subs	r3, #1
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	86da      	strh	r2, [r3, #54]	; 0x36
 800aaec:	e011      	b.n	800ab12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aaee:	f7fc fb1f 	bl	8007130 <HAL_GetTick>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	1ad3      	subs	r3, r2, r3
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d803      	bhi.n	800ab06 <HAL_SPI_Transmit+0x204>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab04:	d102      	bne.n	800ab0c <HAL_SPI_Transmit+0x20a>
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d102      	bne.n	800ab12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ab10:	e026      	b.n	800ab60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1cd      	bne.n	800aab8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab1c:	69ba      	ldr	r2, [r7, #24]
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 fdcb 	bl	800b6bc <SPI_EndRxTxTransaction>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2220      	movs	r2, #32
 800ab30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	613b      	str	r3, [r7, #16]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	613b      	str	r3, [r7, #16]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	613b      	str	r3, [r7, #16]
 800ab4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	77fb      	strb	r3, [r7, #31]
 800ab5c:	e000      	b.n	800ab60 <HAL_SPI_Transmit+0x25e>
  }

error:
 800ab5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab70:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3720      	adds	r7, #32
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b08c      	sub	sp, #48	; 0x30
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	607a      	str	r2, [r7, #4]
 800ab86:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_SPI_TransmitReceive+0x26>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e18a      	b.n	800aeb6 <HAL_SPI_TransmitReceive+0x33c>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aba8:	f7fc fac2 	bl	8007130 <HAL_GetTick>
 800abac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800abbe:	887b      	ldrh	r3, [r7, #2]
 800abc0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800abc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d00f      	beq.n	800abea <HAL_SPI_TransmitReceive+0x70>
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abd0:	d107      	bne.n	800abe2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d103      	bne.n	800abe2 <HAL_SPI_TransmitReceive+0x68>
 800abda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d003      	beq.n	800abea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800abe2:	2302      	movs	r3, #2
 800abe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800abe8:	e15b      	b.n	800aea2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d005      	beq.n	800abfc <HAL_SPI_TransmitReceive+0x82>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <HAL_SPI_TransmitReceive+0x82>
 800abf6:	887b      	ldrh	r3, [r7, #2]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800abfc:	2301      	movs	r3, #1
 800abfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac02:	e14e      	b.n	800aea2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d003      	beq.n	800ac18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2205      	movs	r2, #5
 800ac14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	887a      	ldrh	r2, [r7, #2]
 800ac28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	887a      	ldrh	r2, [r7, #2]
 800ac2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	887a      	ldrh	r2, [r7, #2]
 800ac3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	887a      	ldrh	r2, [r7, #2]
 800ac40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac58:	2b40      	cmp	r3, #64	; 0x40
 800ac5a:	d007      	beq.n	800ac6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac74:	d178      	bne.n	800ad68 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <HAL_SPI_TransmitReceive+0x10a>
 800ac7e:	8b7b      	ldrh	r3, [r7, #26]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d166      	bne.n	800ad52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac88:	881a      	ldrh	r2, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	1c9a      	adds	r2, r3, #2
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	3b01      	subs	r3, #1
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aca8:	e053      	b.n	800ad52 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	f003 0302 	and.w	r3, r3, #2
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d11b      	bne.n	800acf0 <HAL_SPI_TransmitReceive+0x176>
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d016      	beq.n	800acf0 <HAL_SPI_TransmitReceive+0x176>
 800acc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d113      	bne.n	800acf0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800accc:	881a      	ldrh	r2, [r3, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd8:	1c9a      	adds	r2, r3, #2
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d119      	bne.n	800ad32 <HAL_SPI_TransmitReceive+0x1b8>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d014      	beq.n	800ad32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	b292      	uxth	r2, r2
 800ad14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1a:	1c9a      	adds	r2, r3, #2
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	3b01      	subs	r3, #1
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad32:	f7fc f9fd 	bl	8007130 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d807      	bhi.n	800ad52 <HAL_SPI_TransmitReceive+0x1d8>
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d003      	beq.n	800ad52 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad50:	e0a7      	b.n	800aea2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1a6      	bne.n	800acaa <HAL_SPI_TransmitReceive+0x130>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1a1      	bne.n	800acaa <HAL_SPI_TransmitReceive+0x130>
 800ad66:	e07c      	b.n	800ae62 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_SPI_TransmitReceive+0x1fc>
 800ad70:	8b7b      	ldrh	r3, [r7, #26]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d16b      	bne.n	800ae4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	330c      	adds	r3, #12
 800ad80:	7812      	ldrb	r2, [r2, #0]
 800ad82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad9c:	e057      	b.n	800ae4e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 0302 	and.w	r3, r3, #2
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d11c      	bne.n	800ade6 <HAL_SPI_TransmitReceive+0x26c>
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d017      	beq.n	800ade6 <HAL_SPI_TransmitReceive+0x26c>
 800adb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d114      	bne.n	800ade6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	7812      	ldrb	r2, [r2, #0]
 800adc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adce:	1c5a      	adds	r2, r3, #1
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800add8:	b29b      	uxth	r3, r3
 800adda:	3b01      	subs	r3, #1
 800addc:	b29a      	uxth	r2, r3
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b01      	cmp	r3, #1
 800adf2:	d119      	bne.n	800ae28 <HAL_SPI_TransmitReceive+0x2ae>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d014      	beq.n	800ae28 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68da      	ldr	r2, [r3, #12]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae24:	2301      	movs	r3, #1
 800ae26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae28:	f7fc f982 	bl	8007130 <HAL_GetTick>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d803      	bhi.n	800ae40 <HAL_SPI_TransmitReceive+0x2c6>
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3e:	d102      	bne.n	800ae46 <HAL_SPI_TransmitReceive+0x2cc>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d103      	bne.n	800ae4e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ae4c:	e029      	b.n	800aea2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1a2      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x224>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d19d      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fc28 	bl	800b6bc <SPI_EndRxTxTransaction>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d006      	beq.n	800ae80 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ae7e:	e010      	b.n	800aea2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10b      	bne.n	800aea0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae88:	2300      	movs	r3, #0
 800ae8a:	617b      	str	r3, [r7, #20]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	617b      	str	r3, [r7, #20]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	e000      	b.n	800aea2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aea0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aeb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3730      	adds	r7, #48	; 0x30
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b086      	sub	sp, #24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d101      	bne.n	800aee0 <HAL_SPI_Transmit_DMA+0x20>
 800aedc:	2302      	movs	r3, #2
 800aede:	e09b      	b.n	800b018 <HAL_SPI_Transmit_DMA+0x158>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d002      	beq.n	800aefa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800aef4:	2302      	movs	r3, #2
 800aef6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aef8:	e089      	b.n	800b00e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <HAL_SPI_Transmit_DMA+0x46>
 800af00:	88fb      	ldrh	r3, [r7, #6]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	75fb      	strb	r3, [r7, #23]
    goto error;
 800af0a:	e080      	b.n	800b00e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2203      	movs	r2, #3
 800af10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2200      	movs	r2, #0
 800af18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	88fa      	ldrh	r2, [r7, #6]
 800af24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	88fa      	ldrh	r2, [r7, #6]
 800af2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af52:	d10f      	bne.n	800af74 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af72:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af78:	4a29      	ldr	r2, [pc, #164]	; (800b020 <HAL_SPI_Transmit_DMA+0x160>)
 800af7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af80:	4a28      	ldr	r2, [pc, #160]	; (800b024 <HAL_SPI_Transmit_DMA+0x164>)
 800af82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af88:	4a27      	ldr	r2, [pc, #156]	; (800b028 <HAL_SPI_Transmit_DMA+0x168>)
 800af8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af90:	2200      	movs	r2, #0
 800af92:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9c:	4619      	mov	r1, r3
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afaa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800afac:	f7fd fb20 	bl	80085f0 <HAL_DMA_Start_IT>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d00c      	beq.n	800afd0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afba:	f043 0210 	orr.w	r2, r3, #16
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800afce:	e01e      	b.n	800b00e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d007      	beq.n	800afee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f042 0220 	orr.w	r2, r2, #32
 800affc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	685a      	ldr	r2, [r3, #4]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f042 0202 	orr.w	r2, r2, #2
 800b00c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	0800b44d 	.word	0x0800b44d
 800b024:	0800b26d 	.word	0x0800b26d
 800b028:	0800b4a1 	.word	0x0800b4a1

0800b02c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	60f8      	str	r0, [r7, #12]
 800b034:	60b9      	str	r1, [r7, #8]
 800b036:	607a      	str	r2, [r7, #4]
 800b038:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b044:	2b01      	cmp	r3, #1
 800b046:	d101      	bne.n	800b04c <HAL_SPI_TransmitReceive_DMA+0x20>
 800b048:	2302      	movs	r3, #2
 800b04a:	e0e3      	b.n	800b214 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b05a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b062:	7dbb      	ldrb	r3, [r7, #22]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d00d      	beq.n	800b084 <HAL_SPI_TransmitReceive_DMA+0x58>
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b06e:	d106      	bne.n	800b07e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <HAL_SPI_TransmitReceive_DMA+0x52>
 800b078:	7dbb      	ldrb	r3, [r7, #22]
 800b07a:	2b04      	cmp	r3, #4
 800b07c:	d002      	beq.n	800b084 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b07e:	2302      	movs	r3, #2
 800b080:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b082:	e0c2      	b.n	800b20a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d005      	beq.n	800b096 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d002      	beq.n	800b096 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b090:	887b      	ldrh	r3, [r7, #2]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d102      	bne.n	800b09c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b09a:	e0b6      	b.n	800b20a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b04      	cmp	r3, #4
 800b0a6:	d003      	beq.n	800b0b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2205      	movs	r2, #5
 800b0ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	887a      	ldrh	r2, [r7, #2]
 800b0c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	887a      	ldrh	r2, [r7, #2]
 800b0c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	887a      	ldrh	r2, [r7, #2]
 800b0d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	887a      	ldrh	r2, [r7, #2]
 800b0d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d108      	bne.n	800b104 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f6:	4a49      	ldr	r2, [pc, #292]	; (800b21c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800b0f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0fe:	4a48      	ldr	r2, [pc, #288]	; (800b220 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800b100:	63da      	str	r2, [r3, #60]	; 0x3c
 800b102:	e007      	b.n	800b114 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b108:	4a46      	ldr	r2, [pc, #280]	; (800b224 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800b10a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b110:	4a45      	ldr	r2, [pc, #276]	; (800b228 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800b112:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b118:	4a44      	ldr	r2, [pc, #272]	; (800b22c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800b11a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b120:	2200      	movs	r2, #0
 800b122:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	330c      	adds	r3, #12
 800b12e:	4619      	mov	r1, r3
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b134:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b13a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b13c:	f7fd fa58 	bl	80085f0 <HAL_DMA_Start_IT>
 800b140:	4603      	mov	r3, r0
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00c      	beq.n	800b160 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b14a:	f043 0210 	orr.w	r2, r3, #16
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b15e:	e054      	b.n	800b20a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f042 0201 	orr.w	r2, r2, #1
 800b16e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b174:	2200      	movs	r2, #0
 800b176:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b17c:	2200      	movs	r2, #0
 800b17e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b184:	2200      	movs	r2, #0
 800b186:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b18c:	2200      	movs	r2, #0
 800b18e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b198:	4619      	mov	r1, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	330c      	adds	r3, #12
 800b1a0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b1a8:	f7fd fa22 	bl	80085f0 <HAL_DMA_Start_IT>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00c      	beq.n	800b1cc <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b6:	f043 0210 	orr.w	r2, r3, #16
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b1ca:	e01e      	b.n	800b20a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d6:	2b40      	cmp	r3, #64	; 0x40
 800b1d8:	d007      	beq.n	800b1ea <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1e8:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f042 0220 	orr.w	r2, r2, #32
 800b1f8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f042 0202 	orr.w	r2, r2, #2
 800b208:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3718      	adds	r7, #24
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0800b469 	.word	0x0800b469
 800b220:	0800b315 	.word	0x0800b315
 800b224:	0800b485 	.word	0x0800b485
 800b228:	0800b3bd 	.word	0x0800b3bd
 800b22c:	0800b4a1 	.word	0x0800b4a1

0800b230 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b238:	bf00      	nop
 800b23a:	370c      	adds	r7, #12
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b256:	4770      	bx	lr

0800b258 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b260:	bf00      	nop
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b27a:	f7fb ff59 	bl	8007130 <HAL_GetTick>
 800b27e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b28e:	d03b      	beq.n	800b308 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0220 	bic.w	r2, r2, #32
 800b29e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f022 0202 	bic.w	r2, r2, #2
 800b2ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	2164      	movs	r1, #100	; 0x64
 800b2b4:	6978      	ldr	r0, [r7, #20]
 800b2b6:	f000 fa01 	bl	800b6bc <SPI_EndRxTxTransaction>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d005      	beq.n	800b2cc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c4:	f043 0220 	orr.w	r2, r3, #32
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10a      	bne.n	800b2ea <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	60fb      	str	r3, [r7, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b300:	6978      	ldr	r0, [r7, #20]
 800b302:	f7fb fa2d 	bl	8006760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b306:	e002      	b.n	800b30e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b308:	6978      	ldr	r0, [r7, #20]
 800b30a:	f7fb fa43 	bl	8006794 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b320:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b322:	f7fb ff05 	bl	8007130 <HAL_GetTick>
 800b326:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b336:	d03b      	beq.n	800b3b0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f022 0220 	bic.w	r2, r2, #32
 800b346:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d10d      	bne.n	800b36c <SPI_DMAReceiveCplt+0x58>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b358:	d108      	bne.n	800b36c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f022 0203 	bic.w	r2, r2, #3
 800b368:	605a      	str	r2, [r3, #4]
 800b36a:	e007      	b.n	800b37c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	2164      	movs	r1, #100	; 0x64
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 f935 	bl	800b5f0 <SPI_EndRxTransaction>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d002      	beq.n	800b392 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2220      	movs	r2, #32
 800b390:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d003      	beq.n	800b3b0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f7fb f9d9 	bl	8006760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b3ae:	e002      	b.n	800b3b6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	f7ff ff3d 	bl	800b230 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3ca:	f7fb feb1 	bl	8007130 <HAL_GetTick>
 800b3ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3de:	d02f      	beq.n	800b440 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f022 0220 	bic.w	r2, r2, #32
 800b3ee:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	2164      	movs	r1, #100	; 0x64
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 f961 	bl	800b6bc <SPI_EndRxTxTransaction>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d005      	beq.n	800b40c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b404:	f043 0220 	orr.w	r2, r3, #32
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0203 	bic.w	r2, r2, #3
 800b41a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f7fb f991 	bl	8006760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b43e:	e002      	b.n	800b446 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7fb f971 	bl	8006728 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b446:	3710      	adds	r7, #16
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b458:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f7ff fef2 	bl	800b244 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b460:	bf00      	nop
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b474:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff feee 	bl	800b258 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b47c:	bf00      	nop
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b490:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7fb f918 	bl	80066c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b498:	bf00      	nop
 800b49a:	3710      	adds	r7, #16
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f022 0203 	bic.w	r2, r2, #3
 800b4bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c2:	f043 0210 	orr.w	r2, r3, #16
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7fb f944 	bl	8006760 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b4d8:	bf00      	nop
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	603b      	str	r3, [r7, #0]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b4f0:	f7fb fe1e 	bl	8007130 <HAL_GetTick>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b500:	f7fb fe16 	bl	8007130 <HAL_GetTick>
 800b504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b506:	4b39      	ldr	r3, [pc, #228]	; (800b5ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	015b      	lsls	r3, r3, #5
 800b50c:	0d1b      	lsrs	r3, r3, #20
 800b50e:	69fa      	ldr	r2, [r7, #28]
 800b510:	fb02 f303 	mul.w	r3, r2, r3
 800b514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b516:	e054      	b.n	800b5c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51e:	d050      	beq.n	800b5c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b520:	f7fb fe06 	bl	8007130 <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	69fa      	ldr	r2, [r7, #28]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d902      	bls.n	800b536 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d13d      	bne.n	800b5b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b54e:	d111      	bne.n	800b574 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b558:	d004      	beq.n	800b564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b562:	d107      	bne.n	800b574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b57c:	d10f      	bne.n	800b59e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b58c:	601a      	str	r2, [r3, #0]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b59c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e017      	b.n	800b5e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689a      	ldr	r2, [r3, #8]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	bf0c      	ite	eq
 800b5d2:	2301      	moveq	r3, #1
 800b5d4:	2300      	movne	r3, #0
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	461a      	mov	r2, r3
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d19b      	bne.n	800b518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3720      	adds	r7, #32
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20008f08 	.word	0x20008f08

0800b5f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b604:	d111      	bne.n	800b62a <SPI_EndRxTransaction+0x3a>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b60e:	d004      	beq.n	800b61a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b618:	d107      	bne.n	800b62a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b628:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b632:	d12a      	bne.n	800b68a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b63c:	d012      	beq.n	800b664 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2200      	movs	r2, #0
 800b646:	2180      	movs	r1, #128	; 0x80
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7ff ff49 	bl	800b4e0 <SPI_WaitFlagStateUntilTimeout>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d02d      	beq.n	800b6b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b658:	f043 0220 	orr.w	r2, r3, #32
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b660:	2303      	movs	r3, #3
 800b662:	e026      	b.n	800b6b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2200      	movs	r2, #0
 800b66c:	2101      	movs	r1, #1
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f7ff ff36 	bl	800b4e0 <SPI_WaitFlagStateUntilTimeout>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01a      	beq.n	800b6b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67e:	f043 0220 	orr.w	r2, r3, #32
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e013      	b.n	800b6b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	2200      	movs	r2, #0
 800b692:	2101      	movs	r1, #1
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff ff23 	bl	800b4e0 <SPI_WaitFlagStateUntilTimeout>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d007      	beq.n	800b6b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a4:	f043 0220 	orr.w	r2, r3, #32
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e000      	b.n	800b6b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b6c8:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <SPI_EndRxTxTransaction+0x7c>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a1b      	ldr	r2, [pc, #108]	; (800b73c <SPI_EndRxTxTransaction+0x80>)
 800b6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d2:	0d5b      	lsrs	r3, r3, #21
 800b6d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b6d8:	fb02 f303 	mul.w	r3, r2, r3
 800b6dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6e6:	d112      	bne.n	800b70e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	9300      	str	r3, [sp, #0]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2180      	movs	r1, #128	; 0x80
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff fef4 	bl	800b4e0 <SPI_WaitFlagStateUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d016      	beq.n	800b72c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b702:	f043 0220 	orr.w	r2, r3, #32
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e00f      	b.n	800b72e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00a      	beq.n	800b72a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	3b01      	subs	r3, #1
 800b718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b724:	2b80      	cmp	r3, #128	; 0x80
 800b726:	d0f2      	beq.n	800b70e <SPI_EndRxTxTransaction+0x52>
 800b728:	e000      	b.n	800b72c <SPI_EndRxTxTransaction+0x70>
        break;
 800b72a:	bf00      	nop
  }

  return HAL_OK;
 800b72c:	2300      	movs	r3, #0
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3718      	adds	r7, #24
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20008f08 	.word	0x20008f08
 800b73c:	165e9f81 	.word	0x165e9f81

0800b740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e041      	b.n	800b7d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d106      	bne.n	800b76c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7fb fafe 	bl	8006d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4619      	mov	r1, r3
 800b77e:	4610      	mov	r0, r2
 800b780:	f000 fe38 	bl	800c3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2201      	movs	r2, #1
 800b790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7d4:	2300      	movs	r3, #0
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
	...

0800b7e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d001      	beq.n	800b7f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e03c      	b.n	800b872 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2202      	movs	r2, #2
 800b7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a1e      	ldr	r2, [pc, #120]	; (800b880 <HAL_TIM_Base_Start+0xa0>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d018      	beq.n	800b83c <HAL_TIM_Base_Start+0x5c>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b812:	d013      	beq.n	800b83c <HAL_TIM_Base_Start+0x5c>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a1a      	ldr	r2, [pc, #104]	; (800b884 <HAL_TIM_Base_Start+0xa4>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d00e      	beq.n	800b83c <HAL_TIM_Base_Start+0x5c>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a19      	ldr	r2, [pc, #100]	; (800b888 <HAL_TIM_Base_Start+0xa8>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d009      	beq.n	800b83c <HAL_TIM_Base_Start+0x5c>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	4a17      	ldr	r2, [pc, #92]	; (800b88c <HAL_TIM_Base_Start+0xac>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d004      	beq.n	800b83c <HAL_TIM_Base_Start+0x5c>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a16      	ldr	r2, [pc, #88]	; (800b890 <HAL_TIM_Base_Start+0xb0>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d111      	bne.n	800b860 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f003 0307 	and.w	r3, r3, #7
 800b846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2b06      	cmp	r3, #6
 800b84c:	d010      	beq.n	800b870 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f042 0201 	orr.w	r2, r2, #1
 800b85c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b85e:	e007      	b.n	800b870 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f042 0201 	orr.w	r2, r2, #1
 800b86e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	40010000 	.word	0x40010000
 800b884:	40000400 	.word	0x40000400
 800b888:	40000800 	.word	0x40000800
 800b88c:	40000c00 	.word	0x40000c00
 800b890:	40014000 	.word	0x40014000

0800b894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d001      	beq.n	800b8ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e044      	b.n	800b936 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0201 	orr.w	r2, r2, #1
 800b8c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a1e      	ldr	r2, [pc, #120]	; (800b944 <HAL_TIM_Base_Start_IT+0xb0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d018      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x6c>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8d6:	d013      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x6c>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a1a      	ldr	r2, [pc, #104]	; (800b948 <HAL_TIM_Base_Start_IT+0xb4>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d00e      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x6c>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a19      	ldr	r2, [pc, #100]	; (800b94c <HAL_TIM_Base_Start_IT+0xb8>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d009      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x6c>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a17      	ldr	r2, [pc, #92]	; (800b950 <HAL_TIM_Base_Start_IT+0xbc>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d004      	beq.n	800b900 <HAL_TIM_Base_Start_IT+0x6c>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a16      	ldr	r2, [pc, #88]	; (800b954 <HAL_TIM_Base_Start_IT+0xc0>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d111      	bne.n	800b924 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f003 0307 	and.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2b06      	cmp	r3, #6
 800b910:	d010      	beq.n	800b934 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0201 	orr.w	r2, r2, #1
 800b920:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b922:	e007      	b.n	800b934 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f042 0201 	orr.w	r2, r2, #1
 800b932:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	40010000 	.word	0x40010000
 800b948:	40000400 	.word	0x40000400
 800b94c:	40000800 	.word	0x40000800
 800b950:	40000c00 	.word	0x40000c00
 800b954:	40014000 	.word	0x40014000

0800b958 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	68da      	ldr	r2, [r3, #12]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f022 0201 	bic.w	r2, r2, #1
 800b96e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6a1a      	ldr	r2, [r3, #32]
 800b976:	f241 1311 	movw	r3, #4369	; 0x1111
 800b97a:	4013      	ands	r3, r2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10f      	bne.n	800b9a0 <HAL_TIM_Base_Stop_IT+0x48>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	6a1a      	ldr	r2, [r3, #32]
 800b986:	f240 4344 	movw	r3, #1092	; 0x444
 800b98a:	4013      	ands	r3, r2
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d107      	bne.n	800b9a0 <HAL_TIM_Base_Stop_IT+0x48>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f022 0201 	bic.w	r2, r2, #1
 800b99e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e041      	b.n	800ba4c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d106      	bne.n	800b9e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f839 	bl	800ba54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f000 fcfd 	bl	800c3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2201      	movs	r2, #1
 800ba36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d101      	bne.n	800ba7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e041      	b.n	800bafe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d106      	bne.n	800ba94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 f839 	bl	800bb06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2202      	movs	r2, #2
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f000 fca4 	bl	800c3f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2201      	movs	r2, #1
 800bad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bb0e:	bf00      	nop
 800bb10:	370c      	adds	r7, #12
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
	...

0800bb1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d109      	bne.n	800bb40 <HAL_TIM_PWM_Start+0x24>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	bf14      	ite	ne
 800bb38:	2301      	movne	r3, #1
 800bb3a:	2300      	moveq	r3, #0
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	e022      	b.n	800bb86 <HAL_TIM_PWM_Start+0x6a>
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d109      	bne.n	800bb5a <HAL_TIM_PWM_Start+0x3e>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	bf14      	ite	ne
 800bb52:	2301      	movne	r3, #1
 800bb54:	2300      	moveq	r3, #0
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	e015      	b.n	800bb86 <HAL_TIM_PWM_Start+0x6a>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b08      	cmp	r3, #8
 800bb5e:	d109      	bne.n	800bb74 <HAL_TIM_PWM_Start+0x58>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	bf14      	ite	ne
 800bb6c:	2301      	movne	r3, #1
 800bb6e:	2300      	moveq	r3, #0
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	e008      	b.n	800bb86 <HAL_TIM_PWM_Start+0x6a>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	bf14      	ite	ne
 800bb80:	2301      	movne	r3, #1
 800bb82:	2300      	moveq	r3, #0
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e068      	b.n	800bc60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d104      	bne.n	800bb9e <HAL_TIM_PWM_Start+0x82>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb9c:	e013      	b.n	800bbc6 <HAL_TIM_PWM_Start+0xaa>
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d104      	bne.n	800bbae <HAL_TIM_PWM_Start+0x92>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbac:	e00b      	b.n	800bbc6 <HAL_TIM_PWM_Start+0xaa>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d104      	bne.n	800bbbe <HAL_TIM_PWM_Start+0xa2>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbbc:	e003      	b.n	800bbc6 <HAL_TIM_PWM_Start+0xaa>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	6839      	ldr	r1, [r7, #0]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 feb6 	bl	800c940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a23      	ldr	r2, [pc, #140]	; (800bc68 <HAL_TIM_PWM_Start+0x14c>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d107      	bne.n	800bbee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bbec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	4a1d      	ldr	r2, [pc, #116]	; (800bc68 <HAL_TIM_PWM_Start+0x14c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d018      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x10e>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc00:	d013      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x10e>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4a19      	ldr	r2, [pc, #100]	; (800bc6c <HAL_TIM_PWM_Start+0x150>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d00e      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x10e>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a17      	ldr	r2, [pc, #92]	; (800bc70 <HAL_TIM_PWM_Start+0x154>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d009      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x10e>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a16      	ldr	r2, [pc, #88]	; (800bc74 <HAL_TIM_PWM_Start+0x158>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d004      	beq.n	800bc2a <HAL_TIM_PWM_Start+0x10e>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4a14      	ldr	r2, [pc, #80]	; (800bc78 <HAL_TIM_PWM_Start+0x15c>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d111      	bne.n	800bc4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b06      	cmp	r3, #6
 800bc3a:	d010      	beq.n	800bc5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f042 0201 	orr.w	r2, r2, #1
 800bc4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4c:	e007      	b.n	800bc5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f042 0201 	orr.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	40010000 	.word	0x40010000
 800bc6c:	40000400 	.word	0x40000400
 800bc70:	40000800 	.word	0x40000800
 800bc74:	40000c00 	.word	0x40000c00
 800bc78:	40014000 	.word	0x40014000

0800bc7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e097      	b.n	800bdc0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d106      	bne.n	800bcaa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7fa ffe3 	bl	8006c70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2202      	movs	r2, #2
 800bcae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	6812      	ldr	r2, [r2, #0]
 800bcbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcc0:	f023 0307 	bic.w	r3, r3, #7
 800bcc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	3304      	adds	r3, #4
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	f000 fb8f 	bl	800c3f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6a1b      	ldr	r3, [r3, #32]
 800bcec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcfe:	f023 0303 	bic.w	r3, r3, #3
 800bd02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	689a      	ldr	r2, [r3, #8]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	021b      	lsls	r3, r3, #8
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	693a      	ldr	r2, [r7, #16]
 800bd12:	4313      	orrs	r3, r2
 800bd14:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bd1c:	f023 030c 	bic.w	r3, r3, #12
 800bd20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68da      	ldr	r2, [r3, #12]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	693a      	ldr	r2, [r7, #16]
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	011a      	lsls	r2, r3, #4
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	031b      	lsls	r3, r3, #12
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	693a      	ldr	r2, [r7, #16]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bd5a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bd62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	685a      	ldr	r2, [r3, #4]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	011b      	lsls	r3, r3, #4
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	697a      	ldr	r2, [r7, #20]
 800bd7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2201      	movs	r2, #1
 800bdaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3718      	adds	r7, #24
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	f003 0302 	and.w	r3, r3, #2
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d122      	bne.n	800be24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f003 0302 	and.w	r3, r3, #2
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	d11b      	bne.n	800be24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f06f 0202 	mvn.w	r2, #2
 800bdf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	f003 0303 	and.w	r3, r3, #3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d003      	beq.n	800be12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fad3 	bl	800c3b6 <HAL_TIM_IC_CaptureCallback>
 800be10:	e005      	b.n	800be1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fac5 	bl	800c3a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fad6 	bl	800c3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	691b      	ldr	r3, [r3, #16]
 800be2a:	f003 0304 	and.w	r3, r3, #4
 800be2e:	2b04      	cmp	r3, #4
 800be30:	d122      	bne.n	800be78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b04      	cmp	r3, #4
 800be3e:	d11b      	bne.n	800be78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f06f 0204 	mvn.w	r2, #4
 800be48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2202      	movs	r2, #2
 800be4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	699b      	ldr	r3, [r3, #24]
 800be56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 faa9 	bl	800c3b6 <HAL_TIM_IC_CaptureCallback>
 800be64:	e005      	b.n	800be72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f000 fa9b 	bl	800c3a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 faac 	bl	800c3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	f003 0308 	and.w	r3, r3, #8
 800be82:	2b08      	cmp	r3, #8
 800be84:	d122      	bne.n	800becc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	f003 0308 	and.w	r3, r3, #8
 800be90:	2b08      	cmp	r3, #8
 800be92:	d11b      	bne.n	800becc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f06f 0208 	mvn.w	r2, #8
 800be9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2204      	movs	r2, #4
 800bea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	69db      	ldr	r3, [r3, #28]
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d003      	beq.n	800beba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 fa7f 	bl	800c3b6 <HAL_TIM_IC_CaptureCallback>
 800beb8:	e005      	b.n	800bec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fa71 	bl	800c3a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 fa82 	bl	800c3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	f003 0310 	and.w	r3, r3, #16
 800bed6:	2b10      	cmp	r3, #16
 800bed8:	d122      	bne.n	800bf20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f003 0310 	and.w	r3, r3, #16
 800bee4:	2b10      	cmp	r3, #16
 800bee6:	d11b      	bne.n	800bf20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f06f 0210 	mvn.w	r2, #16
 800bef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2208      	movs	r2, #8
 800bef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	69db      	ldr	r3, [r3, #28]
 800befe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fa55 	bl	800c3b6 <HAL_TIM_IC_CaptureCallback>
 800bf0c:	e005      	b.n	800bf1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa47 	bl	800c3a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fa58 	bl	800c3ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d10e      	bne.n	800bf4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	f003 0301 	and.w	r3, r3, #1
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d107      	bne.n	800bf4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f06f 0201 	mvn.w	r2, #1
 800bf44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7f5 fc4a 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf56:	2b80      	cmp	r3, #128	; 0x80
 800bf58:	d10e      	bne.n	800bf78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf64:	2b80      	cmp	r3, #128	; 0x80
 800bf66:	d107      	bne.n	800bf78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f000 fd82 	bl	800ca7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf82:	2b40      	cmp	r3, #64	; 0x40
 800bf84:	d10e      	bne.n	800bfa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf90:	2b40      	cmp	r3, #64	; 0x40
 800bf92:	d107      	bne.n	800bfa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fa1d 	bl	800c3de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	f003 0320 	and.w	r3, r3, #32
 800bfae:	2b20      	cmp	r3, #32
 800bfb0:	d10e      	bne.n	800bfd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f003 0320 	and.w	r3, r3, #32
 800bfbc:	2b20      	cmp	r3, #32
 800bfbe:	d107      	bne.n	800bfd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f06f 0220 	mvn.w	r2, #32
 800bfc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fd4c 	bl	800ca68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	d101      	bne.n	800bff6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800bff2:	2302      	movs	r3, #2
 800bff4:	e048      	b.n	800c088 <HAL_TIM_OC_ConfigChannel+0xb0>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2201      	movs	r2, #1
 800bffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2b0c      	cmp	r3, #12
 800c002:	d839      	bhi.n	800c078 <HAL_TIM_OC_ConfigChannel+0xa0>
 800c004:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <HAL_TIM_OC_ConfigChannel+0x34>)
 800c006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00a:	bf00      	nop
 800c00c:	0800c041 	.word	0x0800c041
 800c010:	0800c079 	.word	0x0800c079
 800c014:	0800c079 	.word	0x0800c079
 800c018:	0800c079 	.word	0x0800c079
 800c01c:	0800c04f 	.word	0x0800c04f
 800c020:	0800c079 	.word	0x0800c079
 800c024:	0800c079 	.word	0x0800c079
 800c028:	0800c079 	.word	0x0800c079
 800c02c:	0800c05d 	.word	0x0800c05d
 800c030:	0800c079 	.word	0x0800c079
 800c034:	0800c079 	.word	0x0800c079
 800c038:	0800c079 	.word	0x0800c079
 800c03c:	0800c06b 	.word	0x0800c06b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68b9      	ldr	r1, [r7, #8]
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fa54 	bl	800c4f4 <TIM_OC1_SetConfig>
      break;
 800c04c:	e017      	b.n	800c07e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	4618      	mov	r0, r3
 800c056:	f000 fab3 	bl	800c5c0 <TIM_OC2_SetConfig>
      break;
 800c05a:	e010      	b.n	800c07e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68b9      	ldr	r1, [r7, #8]
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fb18 	bl	800c698 <TIM_OC3_SetConfig>
      break;
 800c068:	e009      	b.n	800c07e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	4618      	mov	r0, r3
 800c072:	f000 fb7b 	bl	800c76c <TIM_OC4_SetConfig>
      break;
 800c076:	e002      	b.n	800c07e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	75fb      	strb	r3, [r7, #23]
      break;
 800c07c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c086:	7dfb      	ldrb	r3, [r7, #23]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d101      	bne.n	800c0ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0aa:	2302      	movs	r3, #2
 800c0ac:	e0ae      	b.n	800c20c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b0c      	cmp	r3, #12
 800c0ba:	f200 809f 	bhi.w	800c1fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c0be:	a201      	add	r2, pc, #4	; (adr r2, 800c0c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c4:	0800c0f9 	.word	0x0800c0f9
 800c0c8:	0800c1fd 	.word	0x0800c1fd
 800c0cc:	0800c1fd 	.word	0x0800c1fd
 800c0d0:	0800c1fd 	.word	0x0800c1fd
 800c0d4:	0800c139 	.word	0x0800c139
 800c0d8:	0800c1fd 	.word	0x0800c1fd
 800c0dc:	0800c1fd 	.word	0x0800c1fd
 800c0e0:	0800c1fd 	.word	0x0800c1fd
 800c0e4:	0800c17b 	.word	0x0800c17b
 800c0e8:	0800c1fd 	.word	0x0800c1fd
 800c0ec:	0800c1fd 	.word	0x0800c1fd
 800c0f0:	0800c1fd 	.word	0x0800c1fd
 800c0f4:	0800c1bb 	.word	0x0800c1bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68b9      	ldr	r1, [r7, #8]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 f9f8 	bl	800c4f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	699a      	ldr	r2, [r3, #24]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f042 0208 	orr.w	r2, r2, #8
 800c112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f022 0204 	bic.w	r2, r2, #4
 800c122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6999      	ldr	r1, [r3, #24]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	691a      	ldr	r2, [r3, #16]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	619a      	str	r2, [r3, #24]
      break;
 800c136:	e064      	b.n	800c202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68b9      	ldr	r1, [r7, #8]
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 fa3e 	bl	800c5c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	699a      	ldr	r2, [r3, #24]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	699a      	ldr	r2, [r3, #24]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6999      	ldr	r1, [r3, #24]
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	021a      	lsls	r2, r3, #8
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	619a      	str	r2, [r3, #24]
      break;
 800c178:	e043      	b.n	800c202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68b9      	ldr	r1, [r7, #8]
 800c180:	4618      	mov	r0, r3
 800c182:	f000 fa89 	bl	800c698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	69da      	ldr	r2, [r3, #28]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f042 0208 	orr.w	r2, r2, #8
 800c194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f022 0204 	bic.w	r2, r2, #4
 800c1a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	69d9      	ldr	r1, [r3, #28]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	691a      	ldr	r2, [r3, #16]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	430a      	orrs	r2, r1
 800c1b6:	61da      	str	r2, [r3, #28]
      break;
 800c1b8:	e023      	b.n	800c202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f000 fad3 	bl	800c76c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69da      	ldr	r2, [r3, #28]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	69da      	ldr	r2, [r3, #28]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	69d9      	ldr	r1, [r3, #28]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	021a      	lsls	r2, r3, #8
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	430a      	orrs	r2, r1
 800c1f8:	61da      	str	r2, [r3, #28]
      break;
 800c1fa:	e002      	b.n	800c202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	75fb      	strb	r3, [r7, #23]
      break;
 800c200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c20a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3718      	adds	r7, #24
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d101      	bne.n	800c230 <HAL_TIM_ConfigClockSource+0x1c>
 800c22c:	2302      	movs	r3, #2
 800c22e:	e0b4      	b.n	800c39a <HAL_TIM_ConfigClockSource+0x186>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c24e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c268:	d03e      	beq.n	800c2e8 <HAL_TIM_ConfigClockSource+0xd4>
 800c26a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c26e:	f200 8087 	bhi.w	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c276:	f000 8086 	beq.w	800c386 <HAL_TIM_ConfigClockSource+0x172>
 800c27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c27e:	d87f      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c280:	2b70      	cmp	r3, #112	; 0x70
 800c282:	d01a      	beq.n	800c2ba <HAL_TIM_ConfigClockSource+0xa6>
 800c284:	2b70      	cmp	r3, #112	; 0x70
 800c286:	d87b      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c288:	2b60      	cmp	r3, #96	; 0x60
 800c28a:	d050      	beq.n	800c32e <HAL_TIM_ConfigClockSource+0x11a>
 800c28c:	2b60      	cmp	r3, #96	; 0x60
 800c28e:	d877      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c290:	2b50      	cmp	r3, #80	; 0x50
 800c292:	d03c      	beq.n	800c30e <HAL_TIM_ConfigClockSource+0xfa>
 800c294:	2b50      	cmp	r3, #80	; 0x50
 800c296:	d873      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c298:	2b40      	cmp	r3, #64	; 0x40
 800c29a:	d058      	beq.n	800c34e <HAL_TIM_ConfigClockSource+0x13a>
 800c29c:	2b40      	cmp	r3, #64	; 0x40
 800c29e:	d86f      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c2a0:	2b30      	cmp	r3, #48	; 0x30
 800c2a2:	d064      	beq.n	800c36e <HAL_TIM_ConfigClockSource+0x15a>
 800c2a4:	2b30      	cmp	r3, #48	; 0x30
 800c2a6:	d86b      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c2a8:	2b20      	cmp	r3, #32
 800c2aa:	d060      	beq.n	800c36e <HAL_TIM_ConfigClockSource+0x15a>
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	d867      	bhi.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d05c      	beq.n	800c36e <HAL_TIM_ConfigClockSource+0x15a>
 800c2b4:	2b10      	cmp	r3, #16
 800c2b6:	d05a      	beq.n	800c36e <HAL_TIM_ConfigClockSource+0x15a>
 800c2b8:	e062      	b.n	800c380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6818      	ldr	r0, [r3, #0]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	6899      	ldr	r1, [r3, #8]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	685a      	ldr	r2, [r3, #4]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f000 fb19 	bl	800c900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c2dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68ba      	ldr	r2, [r7, #8]
 800c2e4:	609a      	str	r2, [r3, #8]
      break;
 800c2e6:	e04f      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6818      	ldr	r0, [r3, #0]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	6899      	ldr	r1, [r3, #8]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685a      	ldr	r2, [r3, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	f000 fb02 	bl	800c900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	689a      	ldr	r2, [r3, #8]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c30a:	609a      	str	r2, [r3, #8]
      break;
 800c30c:	e03c      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6818      	ldr	r0, [r3, #0]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	6859      	ldr	r1, [r3, #4]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f000 fa76 	bl	800c80c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2150      	movs	r1, #80	; 0x50
 800c326:	4618      	mov	r0, r3
 800c328:	f000 facf 	bl	800c8ca <TIM_ITRx_SetConfig>
      break;
 800c32c:	e02c      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	6859      	ldr	r1, [r3, #4]
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	461a      	mov	r2, r3
 800c33c:	f000 fa95 	bl	800c86a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2160      	movs	r1, #96	; 0x60
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fabf 	bl	800c8ca <TIM_ITRx_SetConfig>
      break;
 800c34c:	e01c      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6818      	ldr	r0, [r3, #0]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6859      	ldr	r1, [r3, #4]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	461a      	mov	r2, r3
 800c35c:	f000 fa56 	bl	800c80c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2140      	movs	r1, #64	; 0x40
 800c366:	4618      	mov	r0, r3
 800c368:	f000 faaf 	bl	800c8ca <TIM_ITRx_SetConfig>
      break;
 800c36c:	e00c      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f000 faa6 	bl	800c8ca <TIM_ITRx_SetConfig>
      break;
 800c37e:	e003      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	73fb      	strb	r3, [r7, #15]
      break;
 800c384:	e000      	b.n	800c388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c398:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr

0800c3b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b083      	sub	sp, #12
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3be:	bf00      	nop
 800c3c0:	370c      	adds	r7, #12
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b083      	sub	sp, #12
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3d2:	bf00      	nop
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b083      	sub	sp, #12
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3e6:	bf00      	nop
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a34      	ldr	r2, [pc, #208]	; (800c4d8 <TIM_Base_SetConfig+0xe4>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00f      	beq.n	800c42c <TIM_Base_SetConfig+0x38>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c412:	d00b      	beq.n	800c42c <TIM_Base_SetConfig+0x38>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a31      	ldr	r2, [pc, #196]	; (800c4dc <TIM_Base_SetConfig+0xe8>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d007      	beq.n	800c42c <TIM_Base_SetConfig+0x38>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a30      	ldr	r2, [pc, #192]	; (800c4e0 <TIM_Base_SetConfig+0xec>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d003      	beq.n	800c42c <TIM_Base_SetConfig+0x38>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a2f      	ldr	r2, [pc, #188]	; (800c4e4 <TIM_Base_SetConfig+0xf0>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d108      	bne.n	800c43e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a25      	ldr	r2, [pc, #148]	; (800c4d8 <TIM_Base_SetConfig+0xe4>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d01b      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c44c:	d017      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	4a22      	ldr	r2, [pc, #136]	; (800c4dc <TIM_Base_SetConfig+0xe8>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d013      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4a21      	ldr	r2, [pc, #132]	; (800c4e0 <TIM_Base_SetConfig+0xec>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d00f      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a20      	ldr	r2, [pc, #128]	; (800c4e4 <TIM_Base_SetConfig+0xf0>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d00b      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a1f      	ldr	r2, [pc, #124]	; (800c4e8 <TIM_Base_SetConfig+0xf4>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d007      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a1e      	ldr	r2, [pc, #120]	; (800c4ec <TIM_Base_SetConfig+0xf8>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d003      	beq.n	800c47e <TIM_Base_SetConfig+0x8a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a1d      	ldr	r2, [pc, #116]	; (800c4f0 <TIM_Base_SetConfig+0xfc>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d108      	bne.n	800c490 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	689a      	ldr	r2, [r3, #8]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a08      	ldr	r2, [pc, #32]	; (800c4d8 <TIM_Base_SetConfig+0xe4>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d103      	bne.n	800c4c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	691a      	ldr	r2, [r3, #16]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	615a      	str	r2, [r3, #20]
}
 800c4ca:	bf00      	nop
 800c4cc:	3714      	adds	r7, #20
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop
 800c4d8:	40010000 	.word	0x40010000
 800c4dc:	40000400 	.word	0x40000400
 800c4e0:	40000800 	.word	0x40000800
 800c4e4:	40000c00 	.word	0x40000c00
 800c4e8:	40014000 	.word	0x40014000
 800c4ec:	40014400 	.word	0x40014400
 800c4f0:	40014800 	.word	0x40014800

0800c4f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	f023 0201 	bic.w	r2, r3, #1
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6a1b      	ldr	r3, [r3, #32]
 800c50e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f023 0303 	bic.w	r3, r3, #3
 800c52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4313      	orrs	r3, r2
 800c534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f023 0302 	bic.w	r3, r3, #2
 800c53c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a1c      	ldr	r2, [pc, #112]	; (800c5bc <TIM_OC1_SetConfig+0xc8>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d10c      	bne.n	800c56a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f023 0308 	bic.w	r3, r3, #8
 800c556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f023 0304 	bic.w	r3, r3, #4
 800c568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a13      	ldr	r2, [pc, #76]	; (800c5bc <TIM_OC1_SetConfig+0xc8>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d111      	bne.n	800c596 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	4313      	orrs	r3, r2
 800c58a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4313      	orrs	r3, r2
 800c594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	621a      	str	r2, [r3, #32]
}
 800c5b0:	bf00      	nop
 800c5b2:	371c      	adds	r7, #28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	40010000 	.word	0x40010000

0800c5c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b087      	sub	sp, #28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	f023 0210 	bic.w	r2, r3, #16
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	021b      	lsls	r3, r3, #8
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	4313      	orrs	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f023 0320 	bic.w	r3, r3, #32
 800c60a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	011b      	lsls	r3, r3, #4
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	4313      	orrs	r3, r2
 800c616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <TIM_OC2_SetConfig+0xd4>)
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d10d      	bne.n	800c63c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	011b      	lsls	r3, r3, #4
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	4313      	orrs	r3, r2
 800c632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c63a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a15      	ldr	r2, [pc, #84]	; (800c694 <TIM_OC2_SetConfig+0xd4>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d113      	bne.n	800c66c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c64a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c652:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	693a      	ldr	r2, [r7, #16]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	699b      	ldr	r3, [r3, #24]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	693a      	ldr	r2, [r7, #16]
 800c668:	4313      	orrs	r3, r2
 800c66a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	693a      	ldr	r2, [r7, #16]
 800c670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	621a      	str	r2, [r3, #32]
}
 800c686:	bf00      	nop
 800c688:	371c      	adds	r7, #28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	40010000 	.word	0x40010000

0800c698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c698:	b480      	push	{r7}
 800c69a:	b087      	sub	sp, #28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	69db      	ldr	r3, [r3, #28]
 800c6be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0303 	bic.w	r3, r3, #3
 800c6ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	021b      	lsls	r3, r3, #8
 800c6e8:	697a      	ldr	r2, [r7, #20]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a1d      	ldr	r2, [pc, #116]	; (800c768 <TIM_OC3_SetConfig+0xd0>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d10d      	bne.n	800c712 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	021b      	lsls	r3, r3, #8
 800c704:	697a      	ldr	r2, [r7, #20]
 800c706:	4313      	orrs	r3, r2
 800c708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a14      	ldr	r2, [pc, #80]	; (800c768 <TIM_OC3_SetConfig+0xd0>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d113      	bne.n	800c742 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	011b      	lsls	r3, r3, #4
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	4313      	orrs	r3, r2
 800c734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	011b      	lsls	r3, r3, #4
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	4313      	orrs	r3, r2
 800c740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	693a      	ldr	r2, [r7, #16]
 800c746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	621a      	str	r2, [r3, #32]
}
 800c75c:	bf00      	nop
 800c75e:	371c      	adds	r7, #28
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	40010000 	.word	0x40010000

0800c76c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c79a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c7a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	021b      	lsls	r3, r3, #8
 800c7aa:	68fa      	ldr	r2, [r7, #12]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	031b      	lsls	r3, r3, #12
 800c7be:	693a      	ldr	r2, [r7, #16]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a10      	ldr	r2, [pc, #64]	; (800c808 <TIM_OC4_SetConfig+0x9c>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d109      	bne.n	800c7e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	019b      	lsls	r3, r3, #6
 800c7da:	697a      	ldr	r2, [r7, #20]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	40010000 	.word	0x40010000

0800c80c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b087      	sub	sp, #28
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	6a1b      	ldr	r3, [r3, #32]
 800c81c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	f023 0201 	bic.w	r2, r3, #1
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	4313      	orrs	r3, r2
 800c840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f023 030a 	bic.w	r3, r3, #10
 800c848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	4313      	orrs	r3, r2
 800c850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	621a      	str	r2, [r3, #32]
}
 800c85e:	bf00      	nop
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr

0800c86a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b087      	sub	sp, #28
 800c86e:	af00      	add	r7, sp, #0
 800c870:	60f8      	str	r0, [r7, #12]
 800c872:	60b9      	str	r1, [r7, #8]
 800c874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	f023 0210 	bic.w	r2, r3, #16
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	031b      	lsls	r3, r3, #12
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	011b      	lsls	r3, r3, #4
 800c8ac:	693a      	ldr	r2, [r7, #16]
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	693a      	ldr	r2, [r7, #16]
 800c8bc:	621a      	str	r2, [r3, #32]
}
 800c8be:	bf00      	nop
 800c8c0:	371c      	adds	r7, #28
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b085      	sub	sp, #20
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8e2:	683a      	ldr	r2, [r7, #0]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	f043 0307 	orr.w	r3, r3, #7
 800c8ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	609a      	str	r2, [r3, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c91a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	021a      	lsls	r2, r3, #8
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	431a      	orrs	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	4313      	orrs	r3, r2
 800c928:	697a      	ldr	r2, [r7, #20]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	697a      	ldr	r2, [r7, #20]
 800c932:	609a      	str	r2, [r3, #8]
}
 800c934:	bf00      	nop
 800c936:	371c      	adds	r7, #28
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	f003 031f 	and.w	r3, r3, #31
 800c952:	2201      	movs	r2, #1
 800c954:	fa02 f303 	lsl.w	r3, r2, r3
 800c958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6a1a      	ldr	r2, [r3, #32]
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	43db      	mvns	r3, r3
 800c962:	401a      	ands	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6a1a      	ldr	r2, [r3, #32]
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f003 031f 	and.w	r3, r3, #31
 800c972:	6879      	ldr	r1, [r7, #4]
 800c974:	fa01 f303 	lsl.w	r3, r1, r3
 800c978:	431a      	orrs	r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	621a      	str	r2, [r3, #32]
}
 800c97e:	bf00      	nop
 800c980:	371c      	adds	r7, #28
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
	...

0800c98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d101      	bne.n	800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e050      	b.n	800ca46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a1c      	ldr	r2, [pc, #112]	; (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d018      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9f0:	d013      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a18      	ldr	r2, [pc, #96]	; (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d00e      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a16      	ldr	r2, [pc, #88]	; (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d009      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a15      	ldr	r2, [pc, #84]	; (800ca60 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d004      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a13      	ldr	r2, [pc, #76]	; (800ca64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d10c      	bne.n	800ca34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	40010000 	.word	0x40010000
 800ca58:	40000400 	.word	0x40000400
 800ca5c:	40000800 	.word	0x40000800
 800ca60:	40000c00 	.word	0x40000c00
 800ca64:	40014000 	.word	0x40014000

0800ca68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca70:	bf00      	nop
 800ca72:	370c      	adds	r7, #12
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	e047      	b.n	800cb32 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7fa f9d6 	bl	8006e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2224      	movs	r2, #36	; 0x24
 800cac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68da      	ldr	r2, [r3, #12]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cad2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f931 	bl	800cd3c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	691a      	ldr	r2, [r3, #16]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cae8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	695a      	ldr	r2, [r3, #20]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800caf8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	695a      	ldr	r2, [r3, #20]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f042 0208 	orr.w	r2, r2, #8
 800cb08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2220      	movs	r2, #32
 800cb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2220      	movs	r2, #32
 800cb2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3708      	adds	r7, #8
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}

0800cb3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb3a:	b580      	push	{r7, lr}
 800cb3c:	b08a      	sub	sp, #40	; 0x28
 800cb3e:	af02      	add	r7, sp, #8
 800cb40:	60f8      	str	r0, [r7, #12]
 800cb42:	60b9      	str	r1, [r7, #8]
 800cb44:	603b      	str	r3, [r7, #0]
 800cb46:	4613      	mov	r3, r2
 800cb48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b20      	cmp	r3, #32
 800cb58:	d17c      	bne.n	800cc54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d002      	beq.n	800cb66 <HAL_UART_Transmit+0x2c>
 800cb60:	88fb      	ldrh	r3, [r7, #6]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e075      	b.n	800cc56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d101      	bne.n	800cb78 <HAL_UART_Transmit+0x3e>
 800cb74:	2302      	movs	r3, #2
 800cb76:	e06e      	b.n	800cc56 <HAL_UART_Transmit+0x11c>
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2221      	movs	r2, #33	; 0x21
 800cb8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cb8e:	f7fa facf 	bl	8007130 <HAL_GetTick>
 800cb92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	88fa      	ldrh	r2, [r7, #6]
 800cb98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	88fa      	ldrh	r2, [r7, #6]
 800cb9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cba8:	d108      	bne.n	800cbbc <HAL_UART_Transmit+0x82>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d104      	bne.n	800cbbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	61bb      	str	r3, [r7, #24]
 800cbba:	e003      	b.n	800cbc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cbcc:	e02a      	b.n	800cc24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	2180      	movs	r1, #128	; 0x80
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 f840 	bl	800cc5e <UART_WaitOnFlagUntilTimeout>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e036      	b.n	800cc56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10b      	bne.n	800cc06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	3302      	adds	r3, #2
 800cc02:	61bb      	str	r3, [r7, #24]
 800cc04:	e007      	b.n	800cc16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	781a      	ldrb	r2, [r3, #0]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	3301      	adds	r3, #1
 800cc14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1cf      	bne.n	800cbce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	9300      	str	r3, [sp, #0]
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2200      	movs	r2, #0
 800cc36:	2140      	movs	r1, #64	; 0x40
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f000 f810 	bl	800cc5e <UART_WaitOnFlagUntilTimeout>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cc44:	2303      	movs	r3, #3
 800cc46:	e006      	b.n	800cc56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2220      	movs	r2, #32
 800cc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	e000      	b.n	800cc56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cc54:	2302      	movs	r3, #2
  }
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3720      	adds	r7, #32
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b090      	sub	sp, #64	; 0x40
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	603b      	str	r3, [r7, #0]
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc6e:	e050      	b.n	800cd12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc76:	d04c      	beq.n	800cd12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cc78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d007      	beq.n	800cc8e <UART_WaitOnFlagUntilTimeout+0x30>
 800cc7e:	f7fa fa57 	bl	8007130 <HAL_GetTick>
 800cc82:	4602      	mov	r2, r0
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d241      	bcs.n	800cd12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	330c      	adds	r3, #12
 800cc94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc98:	e853 3f00 	ldrex	r3, [r3]
 800cc9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	330c      	adds	r3, #12
 800ccac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccae:	637a      	str	r2, [r7, #52]	; 0x34
 800ccb0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ccb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccb6:	e841 2300 	strex	r3, r2, [r1]
 800ccba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1e5      	bne.n	800cc8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3314      	adds	r3, #20
 800ccc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	e853 3f00 	ldrex	r3, [r3]
 800ccd0:	613b      	str	r3, [r7, #16]
   return(result);
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	f023 0301 	bic.w	r3, r3, #1
 800ccd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3314      	adds	r3, #20
 800cce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cce2:	623a      	str	r2, [r7, #32]
 800cce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	69f9      	ldr	r1, [r7, #28]
 800cce8:	6a3a      	ldr	r2, [r7, #32]
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e5      	bne.n	800ccc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2220      	movs	r2, #32
 800ccfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2220      	movs	r2, #32
 800cd02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e00f      	b.n	800cd32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681a      	ldr	r2, [r3, #0]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	bf0c      	ite	eq
 800cd22:	2301      	moveq	r3, #1
 800cd24:	2300      	movne	r3, #0
 800cd26:	b2db      	uxtb	r3, r3
 800cd28:	461a      	mov	r2, r3
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d09f      	beq.n	800cc70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3740      	adds	r7, #64	; 0x40
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd40:	b0c0      	sub	sp, #256	; 0x100
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd58:	68d9      	ldr	r1, [r3, #12]
 800cd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	ea40 0301 	orr.w	r3, r0, r1
 800cd64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cd66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd6a:	689a      	ldr	r2, [r3, #8]
 800cd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd70:	691b      	ldr	r3, [r3, #16]
 800cd72:	431a      	orrs	r2, r3
 800cd74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd78:	695b      	ldr	r3, [r3, #20]
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd80:	69db      	ldr	r3, [r3, #28]
 800cd82:	4313      	orrs	r3, r2
 800cd84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cd94:	f021 010c 	bic.w	r1, r1, #12
 800cd98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cda2:	430b      	orrs	r3, r1
 800cda4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cda6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cdb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdb6:	6999      	ldr	r1, [r3, #24]
 800cdb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	ea40 0301 	orr.w	r3, r0, r1
 800cdc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cdc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	4b8f      	ldr	r3, [pc, #572]	; (800d008 <UART_SetConfig+0x2cc>)
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d005      	beq.n	800cddc <UART_SetConfig+0xa0>
 800cdd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	4b8d      	ldr	r3, [pc, #564]	; (800d00c <UART_SetConfig+0x2d0>)
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d104      	bne.n	800cde6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cddc:	f7fd fcf4 	bl	800a7c8 <HAL_RCC_GetPCLK2Freq>
 800cde0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cde4:	e003      	b.n	800cdee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cde6:	f7fd fcdb 	bl	800a7a0 <HAL_RCC_GetPCLK1Freq>
 800cdea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cdee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cdf8:	f040 810c 	bne.w	800d014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cdfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce00:	2200      	movs	r2, #0
 800ce02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ce06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ce0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ce0e:	4622      	mov	r2, r4
 800ce10:	462b      	mov	r3, r5
 800ce12:	1891      	adds	r1, r2, r2
 800ce14:	65b9      	str	r1, [r7, #88]	; 0x58
 800ce16:	415b      	adcs	r3, r3
 800ce18:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ce1e:	4621      	mov	r1, r4
 800ce20:	eb12 0801 	adds.w	r8, r2, r1
 800ce24:	4629      	mov	r1, r5
 800ce26:	eb43 0901 	adc.w	r9, r3, r1
 800ce2a:	f04f 0200 	mov.w	r2, #0
 800ce2e:	f04f 0300 	mov.w	r3, #0
 800ce32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ce36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ce3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ce3e:	4690      	mov	r8, r2
 800ce40:	4699      	mov	r9, r3
 800ce42:	4623      	mov	r3, r4
 800ce44:	eb18 0303 	adds.w	r3, r8, r3
 800ce48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	eb49 0303 	adc.w	r3, r9, r3
 800ce52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ce56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ce62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ce66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	18db      	adds	r3, r3, r3
 800ce6e:	653b      	str	r3, [r7, #80]	; 0x50
 800ce70:	4613      	mov	r3, r2
 800ce72:	eb42 0303 	adc.w	r3, r2, r3
 800ce76:	657b      	str	r3, [r7, #84]	; 0x54
 800ce78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ce7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ce80:	f7f3 fd08 	bl	8000894 <__aeabi_uldivmod>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4b61      	ldr	r3, [pc, #388]	; (800d010 <UART_SetConfig+0x2d4>)
 800ce8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ce8e:	095b      	lsrs	r3, r3, #5
 800ce90:	011c      	lsls	r4, r3, #4
 800ce92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce96:	2200      	movs	r2, #0
 800ce98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ce9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cea4:	4642      	mov	r2, r8
 800cea6:	464b      	mov	r3, r9
 800cea8:	1891      	adds	r1, r2, r2
 800ceaa:	64b9      	str	r1, [r7, #72]	; 0x48
 800ceac:	415b      	adcs	r3, r3
 800ceae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ceb4:	4641      	mov	r1, r8
 800ceb6:	eb12 0a01 	adds.w	sl, r2, r1
 800ceba:	4649      	mov	r1, r9
 800cebc:	eb43 0b01 	adc.w	fp, r3, r1
 800cec0:	f04f 0200 	mov.w	r2, #0
 800cec4:	f04f 0300 	mov.w	r3, #0
 800cec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ced0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ced4:	4692      	mov	sl, r2
 800ced6:	469b      	mov	fp, r3
 800ced8:	4643      	mov	r3, r8
 800ceda:	eb1a 0303 	adds.w	r3, sl, r3
 800cede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cee2:	464b      	mov	r3, r9
 800cee4:	eb4b 0303 	adc.w	r3, fp, r3
 800cee8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ceec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cef8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cefc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cf00:	460b      	mov	r3, r1
 800cf02:	18db      	adds	r3, r3, r3
 800cf04:	643b      	str	r3, [r7, #64]	; 0x40
 800cf06:	4613      	mov	r3, r2
 800cf08:	eb42 0303 	adc.w	r3, r2, r3
 800cf0c:	647b      	str	r3, [r7, #68]	; 0x44
 800cf0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cf12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cf16:	f7f3 fcbd 	bl	8000894 <__aeabi_uldivmod>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4611      	mov	r1, r2
 800cf20:	4b3b      	ldr	r3, [pc, #236]	; (800d010 <UART_SetConfig+0x2d4>)
 800cf22:	fba3 2301 	umull	r2, r3, r3, r1
 800cf26:	095b      	lsrs	r3, r3, #5
 800cf28:	2264      	movs	r2, #100	; 0x64
 800cf2a:	fb02 f303 	mul.w	r3, r2, r3
 800cf2e:	1acb      	subs	r3, r1, r3
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cf36:	4b36      	ldr	r3, [pc, #216]	; (800d010 <UART_SetConfig+0x2d4>)
 800cf38:	fba3 2302 	umull	r2, r3, r3, r2
 800cf3c:	095b      	lsrs	r3, r3, #5
 800cf3e:	005b      	lsls	r3, r3, #1
 800cf40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf44:	441c      	add	r4, r3
 800cf46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cf54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	1891      	adds	r1, r2, r2
 800cf5e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cf60:	415b      	adcs	r3, r3
 800cf62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cf68:	4641      	mov	r1, r8
 800cf6a:	1851      	adds	r1, r2, r1
 800cf6c:	6339      	str	r1, [r7, #48]	; 0x30
 800cf6e:	4649      	mov	r1, r9
 800cf70:	414b      	adcs	r3, r1
 800cf72:	637b      	str	r3, [r7, #52]	; 0x34
 800cf74:	f04f 0200 	mov.w	r2, #0
 800cf78:	f04f 0300 	mov.w	r3, #0
 800cf7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cf80:	4659      	mov	r1, fp
 800cf82:	00cb      	lsls	r3, r1, #3
 800cf84:	4651      	mov	r1, sl
 800cf86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf8a:	4651      	mov	r1, sl
 800cf8c:	00ca      	lsls	r2, r1, #3
 800cf8e:	4610      	mov	r0, r2
 800cf90:	4619      	mov	r1, r3
 800cf92:	4603      	mov	r3, r0
 800cf94:	4642      	mov	r2, r8
 800cf96:	189b      	adds	r3, r3, r2
 800cf98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf9c:	464b      	mov	r3, r9
 800cf9e:	460a      	mov	r2, r1
 800cfa0:	eb42 0303 	adc.w	r3, r2, r3
 800cfa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cfa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cfb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cfb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	18db      	adds	r3, r3, r3
 800cfc0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	eb42 0303 	adc.w	r3, r2, r3
 800cfc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cfce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cfd2:	f7f3 fc5f 	bl	8000894 <__aeabi_uldivmod>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4b0d      	ldr	r3, [pc, #52]	; (800d010 <UART_SetConfig+0x2d4>)
 800cfdc:	fba3 1302 	umull	r1, r3, r3, r2
 800cfe0:	095b      	lsrs	r3, r3, #5
 800cfe2:	2164      	movs	r1, #100	; 0x64
 800cfe4:	fb01 f303 	mul.w	r3, r1, r3
 800cfe8:	1ad3      	subs	r3, r2, r3
 800cfea:	00db      	lsls	r3, r3, #3
 800cfec:	3332      	adds	r3, #50	; 0x32
 800cfee:	4a08      	ldr	r2, [pc, #32]	; (800d010 <UART_SetConfig+0x2d4>)
 800cff0:	fba2 2303 	umull	r2, r3, r2, r3
 800cff4:	095b      	lsrs	r3, r3, #5
 800cff6:	f003 0207 	and.w	r2, r3, #7
 800cffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	4422      	add	r2, r4
 800d002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d004:	e105      	b.n	800d212 <UART_SetConfig+0x4d6>
 800d006:	bf00      	nop
 800d008:	40011000 	.word	0x40011000
 800d00c:	40011400 	.word	0x40011400
 800d010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d018:	2200      	movs	r2, #0
 800d01a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d01e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d026:	4642      	mov	r2, r8
 800d028:	464b      	mov	r3, r9
 800d02a:	1891      	adds	r1, r2, r2
 800d02c:	6239      	str	r1, [r7, #32]
 800d02e:	415b      	adcs	r3, r3
 800d030:	627b      	str	r3, [r7, #36]	; 0x24
 800d032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d036:	4641      	mov	r1, r8
 800d038:	1854      	adds	r4, r2, r1
 800d03a:	4649      	mov	r1, r9
 800d03c:	eb43 0501 	adc.w	r5, r3, r1
 800d040:	f04f 0200 	mov.w	r2, #0
 800d044:	f04f 0300 	mov.w	r3, #0
 800d048:	00eb      	lsls	r3, r5, #3
 800d04a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d04e:	00e2      	lsls	r2, r4, #3
 800d050:	4614      	mov	r4, r2
 800d052:	461d      	mov	r5, r3
 800d054:	4643      	mov	r3, r8
 800d056:	18e3      	adds	r3, r4, r3
 800d058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d05c:	464b      	mov	r3, r9
 800d05e:	eb45 0303 	adc.w	r3, r5, r3
 800d062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d076:	f04f 0200 	mov.w	r2, #0
 800d07a:	f04f 0300 	mov.w	r3, #0
 800d07e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d082:	4629      	mov	r1, r5
 800d084:	008b      	lsls	r3, r1, #2
 800d086:	4621      	mov	r1, r4
 800d088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d08c:	4621      	mov	r1, r4
 800d08e:	008a      	lsls	r2, r1, #2
 800d090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d094:	f7f3 fbfe 	bl	8000894 <__aeabi_uldivmod>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4b60      	ldr	r3, [pc, #384]	; (800d220 <UART_SetConfig+0x4e4>)
 800d09e:	fba3 2302 	umull	r2, r3, r3, r2
 800d0a2:	095b      	lsrs	r3, r3, #5
 800d0a4:	011c      	lsls	r4, r3, #4
 800d0a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d0b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	1891      	adds	r1, r2, r2
 800d0be:	61b9      	str	r1, [r7, #24]
 800d0c0:	415b      	adcs	r3, r3
 800d0c2:	61fb      	str	r3, [r7, #28]
 800d0c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d0c8:	4641      	mov	r1, r8
 800d0ca:	1851      	adds	r1, r2, r1
 800d0cc:	6139      	str	r1, [r7, #16]
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	414b      	adcs	r3, r1
 800d0d2:	617b      	str	r3, [r7, #20]
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	f04f 0300 	mov.w	r3, #0
 800d0dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d0e0:	4659      	mov	r1, fp
 800d0e2:	00cb      	lsls	r3, r1, #3
 800d0e4:	4651      	mov	r1, sl
 800d0e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0ea:	4651      	mov	r1, sl
 800d0ec:	00ca      	lsls	r2, r1, #3
 800d0ee:	4610      	mov	r0, r2
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	189b      	adds	r3, r3, r2
 800d0f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d0fc:	464b      	mov	r3, r9
 800d0fe:	460a      	mov	r2, r1
 800d100:	eb42 0303 	adc.w	r3, r2, r3
 800d104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	67bb      	str	r3, [r7, #120]	; 0x78
 800d112:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d114:	f04f 0200 	mov.w	r2, #0
 800d118:	f04f 0300 	mov.w	r3, #0
 800d11c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d120:	4649      	mov	r1, r9
 800d122:	008b      	lsls	r3, r1, #2
 800d124:	4641      	mov	r1, r8
 800d126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d12a:	4641      	mov	r1, r8
 800d12c:	008a      	lsls	r2, r1, #2
 800d12e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d132:	f7f3 fbaf 	bl	8000894 <__aeabi_uldivmod>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4b39      	ldr	r3, [pc, #228]	; (800d220 <UART_SetConfig+0x4e4>)
 800d13c:	fba3 1302 	umull	r1, r3, r3, r2
 800d140:	095b      	lsrs	r3, r3, #5
 800d142:	2164      	movs	r1, #100	; 0x64
 800d144:	fb01 f303 	mul.w	r3, r1, r3
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	011b      	lsls	r3, r3, #4
 800d14c:	3332      	adds	r3, #50	; 0x32
 800d14e:	4a34      	ldr	r2, [pc, #208]	; (800d220 <UART_SetConfig+0x4e4>)
 800d150:	fba2 2303 	umull	r2, r3, r2, r3
 800d154:	095b      	lsrs	r3, r3, #5
 800d156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d15a:	441c      	add	r4, r3
 800d15c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d160:	2200      	movs	r2, #0
 800d162:	673b      	str	r3, [r7, #112]	; 0x70
 800d164:	677a      	str	r2, [r7, #116]	; 0x74
 800d166:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d16a:	4642      	mov	r2, r8
 800d16c:	464b      	mov	r3, r9
 800d16e:	1891      	adds	r1, r2, r2
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	415b      	adcs	r3, r3
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d17a:	4641      	mov	r1, r8
 800d17c:	1851      	adds	r1, r2, r1
 800d17e:	6039      	str	r1, [r7, #0]
 800d180:	4649      	mov	r1, r9
 800d182:	414b      	adcs	r3, r1
 800d184:	607b      	str	r3, [r7, #4]
 800d186:	f04f 0200 	mov.w	r2, #0
 800d18a:	f04f 0300 	mov.w	r3, #0
 800d18e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d192:	4659      	mov	r1, fp
 800d194:	00cb      	lsls	r3, r1, #3
 800d196:	4651      	mov	r1, sl
 800d198:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d19c:	4651      	mov	r1, sl
 800d19e:	00ca      	lsls	r2, r1, #3
 800d1a0:	4610      	mov	r0, r2
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	4642      	mov	r2, r8
 800d1a8:	189b      	adds	r3, r3, r2
 800d1aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1ac:	464b      	mov	r3, r9
 800d1ae:	460a      	mov	r2, r1
 800d1b0:	eb42 0303 	adc.w	r3, r2, r3
 800d1b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	663b      	str	r3, [r7, #96]	; 0x60
 800d1c0:	667a      	str	r2, [r7, #100]	; 0x64
 800d1c2:	f04f 0200 	mov.w	r2, #0
 800d1c6:	f04f 0300 	mov.w	r3, #0
 800d1ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	008b      	lsls	r3, r1, #2
 800d1d2:	4641      	mov	r1, r8
 800d1d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d1d8:	4641      	mov	r1, r8
 800d1da:	008a      	lsls	r2, r1, #2
 800d1dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d1e0:	f7f3 fb58 	bl	8000894 <__aeabi_uldivmod>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4b0d      	ldr	r3, [pc, #52]	; (800d220 <UART_SetConfig+0x4e4>)
 800d1ea:	fba3 1302 	umull	r1, r3, r3, r2
 800d1ee:	095b      	lsrs	r3, r3, #5
 800d1f0:	2164      	movs	r1, #100	; 0x64
 800d1f2:	fb01 f303 	mul.w	r3, r1, r3
 800d1f6:	1ad3      	subs	r3, r2, r3
 800d1f8:	011b      	lsls	r3, r3, #4
 800d1fa:	3332      	adds	r3, #50	; 0x32
 800d1fc:	4a08      	ldr	r2, [pc, #32]	; (800d220 <UART_SetConfig+0x4e4>)
 800d1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d202:	095b      	lsrs	r3, r3, #5
 800d204:	f003 020f 	and.w	r2, r3, #15
 800d208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4422      	add	r2, r4
 800d210:	609a      	str	r2, [r3, #8]
}
 800d212:	bf00      	nop
 800d214:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d218:	46bd      	mov	sp, r7
 800d21a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d21e:	bf00      	nop
 800d220:	51eb851f 	.word	0x51eb851f

0800d224 <arm_sin_f32>:
 800d224:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d2a0 <arm_sin_f32+0x7c>
 800d228:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d22c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d234:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d238:	d42c      	bmi.n	800d294 <arm_sin_f32+0x70>
 800d23a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d23e:	eddf 6a19 	vldr	s13, [pc, #100]	; 800d2a4 <arm_sin_f32+0x80>
 800d242:	4a19      	ldr	r2, [pc, #100]	; (800d2a8 <arm_sin_f32+0x84>)
 800d244:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d248:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d24c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d250:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d258:	bfa8      	it	ge
 800d25a:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800d25e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d262:	ee17 3a10 	vmov	r3, s14
 800d266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26a:	ee07 3a10 	vmov	s14, r3
 800d26e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d272:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d276:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d27a:	edd1 6a01 	vldr	s13, [r1, #4]
 800d27e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d282:	ed91 0a00 	vldr	s0, [r1]
 800d286:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d28a:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d28e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d292:	4770      	bx	lr
 800d294:	ee17 3a90 	vmov	r3, s15
 800d298:	3b01      	subs	r3, #1
 800d29a:	ee07 3a90 	vmov	s15, r3
 800d29e:	e7cc      	b.n	800d23a <arm_sin_f32+0x16>
 800d2a0:	3e22f983 	.word	0x3e22f983
 800d2a4:	44000000 	.word	0x44000000
 800d2a8:	0800f040 	.word	0x0800f040

0800d2ac <atoi>:
 800d2ac:	220a      	movs	r2, #10
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	f000 b8d6 	b.w	800d460 <strtol>

0800d2b4 <__errno>:
 800d2b4:	4b01      	ldr	r3, [pc, #4]	; (800d2bc <__errno+0x8>)
 800d2b6:	6818      	ldr	r0, [r3, #0]
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	20008f14 	.word	0x20008f14

0800d2c0 <__libc_init_array>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	4d0d      	ldr	r5, [pc, #52]	; (800d2f8 <__libc_init_array+0x38>)
 800d2c4:	4c0d      	ldr	r4, [pc, #52]	; (800d2fc <__libc_init_array+0x3c>)
 800d2c6:	1b64      	subs	r4, r4, r5
 800d2c8:	10a4      	asrs	r4, r4, #2
 800d2ca:	2600      	movs	r6, #0
 800d2cc:	42a6      	cmp	r6, r4
 800d2ce:	d109      	bne.n	800d2e4 <__libc_init_array+0x24>
 800d2d0:	4d0b      	ldr	r5, [pc, #44]	; (800d300 <__libc_init_array+0x40>)
 800d2d2:	4c0c      	ldr	r4, [pc, #48]	; (800d304 <__libc_init_array+0x44>)
 800d2d4:	f000 f8ce 	bl	800d474 <_init>
 800d2d8:	1b64      	subs	r4, r4, r5
 800d2da:	10a4      	asrs	r4, r4, #2
 800d2dc:	2600      	movs	r6, #0
 800d2de:	42a6      	cmp	r6, r4
 800d2e0:	d105      	bne.n	800d2ee <__libc_init_array+0x2e>
 800d2e2:	bd70      	pop	{r4, r5, r6, pc}
 800d2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e8:	4798      	blx	r3
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	e7ee      	b.n	800d2cc <__libc_init_array+0xc>
 800d2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2f2:	4798      	blx	r3
 800d2f4:	3601      	adds	r6, #1
 800d2f6:	e7f2      	b.n	800d2de <__libc_init_array+0x1e>
 800d2f8:	0800f950 	.word	0x0800f950
 800d2fc:	0800f950 	.word	0x0800f950
 800d300:	0800f950 	.word	0x0800f950
 800d304:	0800f954 	.word	0x0800f954

0800d308 <memcpy>:
 800d308:	440a      	add	r2, r1
 800d30a:	4291      	cmp	r1, r2
 800d30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d310:	d100      	bne.n	800d314 <memcpy+0xc>
 800d312:	4770      	bx	lr
 800d314:	b510      	push	{r4, lr}
 800d316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d31e:	4291      	cmp	r1, r2
 800d320:	d1f9      	bne.n	800d316 <memcpy+0xe>
 800d322:	bd10      	pop	{r4, pc}

0800d324 <memset>:
 800d324:	4402      	add	r2, r0
 800d326:	4603      	mov	r3, r0
 800d328:	4293      	cmp	r3, r2
 800d32a:	d100      	bne.n	800d32e <memset+0xa>
 800d32c:	4770      	bx	lr
 800d32e:	f803 1b01 	strb.w	r1, [r3], #1
 800d332:	e7f9      	b.n	800d328 <memset+0x4>

0800d334 <strncmp>:
 800d334:	b510      	push	{r4, lr}
 800d336:	b17a      	cbz	r2, 800d358 <strncmp+0x24>
 800d338:	4603      	mov	r3, r0
 800d33a:	3901      	subs	r1, #1
 800d33c:	1884      	adds	r4, r0, r2
 800d33e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d342:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d346:	4290      	cmp	r0, r2
 800d348:	d101      	bne.n	800d34e <strncmp+0x1a>
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	d101      	bne.n	800d352 <strncmp+0x1e>
 800d34e:	1a80      	subs	r0, r0, r2
 800d350:	bd10      	pop	{r4, pc}
 800d352:	2800      	cmp	r0, #0
 800d354:	d1f3      	bne.n	800d33e <strncmp+0xa>
 800d356:	e7fa      	b.n	800d34e <strncmp+0x1a>
 800d358:	4610      	mov	r0, r2
 800d35a:	e7f9      	b.n	800d350 <strncmp+0x1c>

0800d35c <_strtol_l.constprop.0>:
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d362:	d001      	beq.n	800d368 <_strtol_l.constprop.0+0xc>
 800d364:	2b24      	cmp	r3, #36	; 0x24
 800d366:	d906      	bls.n	800d376 <_strtol_l.constprop.0+0x1a>
 800d368:	f7ff ffa4 	bl	800d2b4 <__errno>
 800d36c:	2316      	movs	r3, #22
 800d36e:	6003      	str	r3, [r0, #0]
 800d370:	2000      	movs	r0, #0
 800d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d376:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d45c <_strtol_l.constprop.0+0x100>
 800d37a:	460d      	mov	r5, r1
 800d37c:	462e      	mov	r6, r5
 800d37e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d382:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d386:	f017 0708 	ands.w	r7, r7, #8
 800d38a:	d1f7      	bne.n	800d37c <_strtol_l.constprop.0+0x20>
 800d38c:	2c2d      	cmp	r4, #45	; 0x2d
 800d38e:	d132      	bne.n	800d3f6 <_strtol_l.constprop.0+0x9a>
 800d390:	782c      	ldrb	r4, [r5, #0]
 800d392:	2701      	movs	r7, #1
 800d394:	1cb5      	adds	r5, r6, #2
 800d396:	2b00      	cmp	r3, #0
 800d398:	d05b      	beq.n	800d452 <_strtol_l.constprop.0+0xf6>
 800d39a:	2b10      	cmp	r3, #16
 800d39c:	d109      	bne.n	800d3b2 <_strtol_l.constprop.0+0x56>
 800d39e:	2c30      	cmp	r4, #48	; 0x30
 800d3a0:	d107      	bne.n	800d3b2 <_strtol_l.constprop.0+0x56>
 800d3a2:	782c      	ldrb	r4, [r5, #0]
 800d3a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d3a8:	2c58      	cmp	r4, #88	; 0x58
 800d3aa:	d14d      	bne.n	800d448 <_strtol_l.constprop.0+0xec>
 800d3ac:	786c      	ldrb	r4, [r5, #1]
 800d3ae:	2310      	movs	r3, #16
 800d3b0:	3502      	adds	r5, #2
 800d3b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d3b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3ba:	f04f 0c00 	mov.w	ip, #0
 800d3be:	fbb8 f9f3 	udiv	r9, r8, r3
 800d3c2:	4666      	mov	r6, ip
 800d3c4:	fb03 8a19 	mls	sl, r3, r9, r8
 800d3c8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d3cc:	f1be 0f09 	cmp.w	lr, #9
 800d3d0:	d816      	bhi.n	800d400 <_strtol_l.constprop.0+0xa4>
 800d3d2:	4674      	mov	r4, lr
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	dd24      	ble.n	800d422 <_strtol_l.constprop.0+0xc6>
 800d3d8:	f1bc 0f00 	cmp.w	ip, #0
 800d3dc:	db1e      	blt.n	800d41c <_strtol_l.constprop.0+0xc0>
 800d3de:	45b1      	cmp	r9, r6
 800d3e0:	d31c      	bcc.n	800d41c <_strtol_l.constprop.0+0xc0>
 800d3e2:	d101      	bne.n	800d3e8 <_strtol_l.constprop.0+0x8c>
 800d3e4:	45a2      	cmp	sl, r4
 800d3e6:	db19      	blt.n	800d41c <_strtol_l.constprop.0+0xc0>
 800d3e8:	fb06 4603 	mla	r6, r6, r3, r4
 800d3ec:	f04f 0c01 	mov.w	ip, #1
 800d3f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3f4:	e7e8      	b.n	800d3c8 <_strtol_l.constprop.0+0x6c>
 800d3f6:	2c2b      	cmp	r4, #43	; 0x2b
 800d3f8:	bf04      	itt	eq
 800d3fa:	782c      	ldrbeq	r4, [r5, #0]
 800d3fc:	1cb5      	addeq	r5, r6, #2
 800d3fe:	e7ca      	b.n	800d396 <_strtol_l.constprop.0+0x3a>
 800d400:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d404:	f1be 0f19 	cmp.w	lr, #25
 800d408:	d801      	bhi.n	800d40e <_strtol_l.constprop.0+0xb2>
 800d40a:	3c37      	subs	r4, #55	; 0x37
 800d40c:	e7e2      	b.n	800d3d4 <_strtol_l.constprop.0+0x78>
 800d40e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d412:	f1be 0f19 	cmp.w	lr, #25
 800d416:	d804      	bhi.n	800d422 <_strtol_l.constprop.0+0xc6>
 800d418:	3c57      	subs	r4, #87	; 0x57
 800d41a:	e7db      	b.n	800d3d4 <_strtol_l.constprop.0+0x78>
 800d41c:	f04f 3cff 	mov.w	ip, #4294967295
 800d420:	e7e6      	b.n	800d3f0 <_strtol_l.constprop.0+0x94>
 800d422:	f1bc 0f00 	cmp.w	ip, #0
 800d426:	da05      	bge.n	800d434 <_strtol_l.constprop.0+0xd8>
 800d428:	2322      	movs	r3, #34	; 0x22
 800d42a:	6003      	str	r3, [r0, #0]
 800d42c:	4646      	mov	r6, r8
 800d42e:	b942      	cbnz	r2, 800d442 <_strtol_l.constprop.0+0xe6>
 800d430:	4630      	mov	r0, r6
 800d432:	e79e      	b.n	800d372 <_strtol_l.constprop.0+0x16>
 800d434:	b107      	cbz	r7, 800d438 <_strtol_l.constprop.0+0xdc>
 800d436:	4276      	negs	r6, r6
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d0f9      	beq.n	800d430 <_strtol_l.constprop.0+0xd4>
 800d43c:	f1bc 0f00 	cmp.w	ip, #0
 800d440:	d000      	beq.n	800d444 <_strtol_l.constprop.0+0xe8>
 800d442:	1e69      	subs	r1, r5, #1
 800d444:	6011      	str	r1, [r2, #0]
 800d446:	e7f3      	b.n	800d430 <_strtol_l.constprop.0+0xd4>
 800d448:	2430      	movs	r4, #48	; 0x30
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1b1      	bne.n	800d3b2 <_strtol_l.constprop.0+0x56>
 800d44e:	2308      	movs	r3, #8
 800d450:	e7af      	b.n	800d3b2 <_strtol_l.constprop.0+0x56>
 800d452:	2c30      	cmp	r4, #48	; 0x30
 800d454:	d0a5      	beq.n	800d3a2 <_strtol_l.constprop.0+0x46>
 800d456:	230a      	movs	r3, #10
 800d458:	e7ab      	b.n	800d3b2 <_strtol_l.constprop.0+0x56>
 800d45a:	bf00      	nop
 800d45c:	0800f845 	.word	0x0800f845

0800d460 <strtol>:
 800d460:	4613      	mov	r3, r2
 800d462:	460a      	mov	r2, r1
 800d464:	4601      	mov	r1, r0
 800d466:	4802      	ldr	r0, [pc, #8]	; (800d470 <strtol+0x10>)
 800d468:	6800      	ldr	r0, [r0, #0]
 800d46a:	f7ff bf77 	b.w	800d35c <_strtol_l.constprop.0>
 800d46e:	bf00      	nop
 800d470:	20008f14 	.word	0x20008f14

0800d474 <_init>:
 800d474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d476:	bf00      	nop
 800d478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d47a:	bc08      	pop	{r3}
 800d47c:	469e      	mov	lr, r3
 800d47e:	4770      	bx	lr

0800d480 <_fini>:
 800d480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d482:	bf00      	nop
 800d484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d486:	bc08      	pop	{r3}
 800d488:	469e      	mov	lr, r3
 800d48a:	4770      	bx	lr
