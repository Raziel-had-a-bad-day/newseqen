
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079a8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001064  08007b40  08007b40  00017b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba4  08008ba4  000205f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bac  08008bac  000205f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005f0  20000000  08008bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016dc  200005f0  080091a4  000205f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  080091a4  00021ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f7e  00000000  00000000  00020620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224a  00000000  00000000  0003259e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  00035820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001753e  00000000  00000000  00036770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f26  00000000  00000000  0004dcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000952d4  00000000  00000000  0005fbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  000f4ea8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c0  00000000  00000000  000f4f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  000f9628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200005f0 	.word	0x200005f0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b28 	.word	0x08007b28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200005f4 	.word	0x200005f4
 80001d4:	08007b28 	.word	0x08007b28

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__gedf2>:
 80007a4:	f04f 3cff 	mov.w	ip, #4294967295
 80007a8:	e006      	b.n	80007b8 <__cmpdf2+0x4>
 80007aa:	bf00      	nop

080007ac <__ledf2>:
 80007ac:	f04f 0c01 	mov.w	ip, #1
 80007b0:	e002      	b.n	80007b8 <__cmpdf2+0x4>
 80007b2:	bf00      	nop

080007b4 <__cmpdf2>:
 80007b4:	f04f 0c01 	mov.w	ip, #1
 80007b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007c8:	bf18      	it	ne
 80007ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007ce:	d01b      	beq.n	8000808 <__cmpdf2+0x54>
 80007d0:	b001      	add	sp, #4
 80007d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007d6:	bf0c      	ite	eq
 80007d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007dc:	ea91 0f03 	teqne	r1, r3
 80007e0:	bf02      	ittt	eq
 80007e2:	ea90 0f02 	teqeq	r0, r2
 80007e6:	2000      	moveq	r0, #0
 80007e8:	4770      	bxeq	lr
 80007ea:	f110 0f00 	cmn.w	r0, #0
 80007ee:	ea91 0f03 	teq	r1, r3
 80007f2:	bf58      	it	pl
 80007f4:	4299      	cmppl	r1, r3
 80007f6:	bf08      	it	eq
 80007f8:	4290      	cmpeq	r0, r2
 80007fa:	bf2c      	ite	cs
 80007fc:	17d8      	asrcs	r0, r3, #31
 80007fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000802:	f040 0001 	orr.w	r0, r0, #1
 8000806:	4770      	bx	lr
 8000808:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d102      	bne.n	8000818 <__cmpdf2+0x64>
 8000812:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000816:	d107      	bne.n	8000828 <__cmpdf2+0x74>
 8000818:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800081c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000820:	d1d6      	bne.n	80007d0 <__cmpdf2+0x1c>
 8000822:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000826:	d0d3      	beq.n	80007d0 <__cmpdf2+0x1c>
 8000828:	f85d 0b04 	ldr.w	r0, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <__aeabi_cdrcmple>:
 8000830:	4684      	mov	ip, r0
 8000832:	4610      	mov	r0, r2
 8000834:	4662      	mov	r2, ip
 8000836:	468c      	mov	ip, r1
 8000838:	4619      	mov	r1, r3
 800083a:	4663      	mov	r3, ip
 800083c:	e000      	b.n	8000840 <__aeabi_cdcmpeq>
 800083e:	bf00      	nop

08000840 <__aeabi_cdcmpeq>:
 8000840:	b501      	push	{r0, lr}
 8000842:	f7ff ffb7 	bl	80007b4 <__cmpdf2>
 8000846:	2800      	cmp	r0, #0
 8000848:	bf48      	it	mi
 800084a:	f110 0f00 	cmnmi.w	r0, #0
 800084e:	bd01      	pop	{r0, pc}

08000850 <__aeabi_dcmpeq>:
 8000850:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000854:	f7ff fff4 	bl	8000840 <__aeabi_cdcmpeq>
 8000858:	bf0c      	ite	eq
 800085a:	2001      	moveq	r0, #1
 800085c:	2000      	movne	r0, #0
 800085e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000862:	bf00      	nop

08000864 <__aeabi_dcmplt>:
 8000864:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000868:	f7ff ffea 	bl	8000840 <__aeabi_cdcmpeq>
 800086c:	bf34      	ite	cc
 800086e:	2001      	movcc	r0, #1
 8000870:	2000      	movcs	r0, #0
 8000872:	f85d fb08 	ldr.w	pc, [sp], #8
 8000876:	bf00      	nop

08000878 <__aeabi_dcmple>:
 8000878:	f84d ed08 	str.w	lr, [sp, #-8]!
 800087c:	f7ff ffe0 	bl	8000840 <__aeabi_cdcmpeq>
 8000880:	bf94      	ite	ls
 8000882:	2001      	movls	r0, #1
 8000884:	2000      	movhi	r0, #0
 8000886:	f85d fb08 	ldr.w	pc, [sp], #8
 800088a:	bf00      	nop

0800088c <__aeabi_dcmpge>:
 800088c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000890:	f7ff ffce 	bl	8000830 <__aeabi_cdrcmple>
 8000894:	bf94      	ite	ls
 8000896:	2001      	movls	r0, #1
 8000898:	2000      	movhi	r0, #0
 800089a:	f85d fb08 	ldr.w	pc, [sp], #8
 800089e:	bf00      	nop

080008a0 <__aeabi_dcmpgt>:
 80008a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a4:	f7ff ffc4 	bl	8000830 <__aeabi_cdrcmple>
 80008a8:	bf34      	ite	cc
 80008aa:	2001      	movcc	r0, #1
 80008ac:	2000      	movcs	r0, #0
 80008ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b2:	bf00      	nop

080008b4 <__aeabi_d2f>:
 80008b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008bc:	bf24      	itt	cs
 80008be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008c6:	d90d      	bls.n	80008e4 <__aeabi_d2f+0x30>
 80008c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008dc:	bf08      	it	eq
 80008de:	f020 0001 	biceq.w	r0, r0, #1
 80008e2:	4770      	bx	lr
 80008e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008e8:	d121      	bne.n	800092e <__aeabi_d2f+0x7a>
 80008ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ee:	bfbc      	itt	lt
 80008f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008f4:	4770      	bxlt	lr
 80008f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008fe:	f1c2 0218 	rsb	r2, r2, #24
 8000902:	f1c2 0c20 	rsb	ip, r2, #32
 8000906:	fa10 f30c 	lsls.w	r3, r0, ip
 800090a:	fa20 f002 	lsr.w	r0, r0, r2
 800090e:	bf18      	it	ne
 8000910:	f040 0001 	orrne.w	r0, r0, #1
 8000914:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000918:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800091c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000920:	ea40 000c 	orr.w	r0, r0, ip
 8000924:	fa23 f302 	lsr.w	r3, r3, r2
 8000928:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800092c:	e7cc      	b.n	80008c8 <__aeabi_d2f+0x14>
 800092e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000932:	d107      	bne.n	8000944 <__aeabi_d2f+0x90>
 8000934:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000938:	bf1e      	ittt	ne
 800093a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800093e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000942:	4770      	bxne	lr
 8000944:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000948:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800094c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <__aeabi_uldivmod>:
 8000954:	b953      	cbnz	r3, 800096c <__aeabi_uldivmod+0x18>
 8000956:	b94a      	cbnz	r2, 800096c <__aeabi_uldivmod+0x18>
 8000958:	2900      	cmp	r1, #0
 800095a:	bf08      	it	eq
 800095c:	2800      	cmpeq	r0, #0
 800095e:	bf1c      	itt	ne
 8000960:	f04f 31ff 	movne.w	r1, #4294967295
 8000964:	f04f 30ff 	movne.w	r0, #4294967295
 8000968:	f000 b974 	b.w	8000c54 <__aeabi_idiv0>
 800096c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000970:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000974:	f000 f806 	bl	8000984 <__udivmoddi4>
 8000978:	f8dd e004 	ldr.w	lr, [sp, #4]
 800097c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000980:	b004      	add	sp, #16
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9d08      	ldr	r5, [sp, #32]
 800098a:	4604      	mov	r4, r0
 800098c:	468e      	mov	lr, r1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14d      	bne.n	8000a2e <__udivmoddi4+0xaa>
 8000992:	428a      	cmp	r2, r1
 8000994:	4694      	mov	ip, r2
 8000996:	d969      	bls.n	8000a6c <__udivmoddi4+0xe8>
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	b152      	cbz	r2, 80009b4 <__udivmoddi4+0x30>
 800099e:	fa01 f302 	lsl.w	r3, r1, r2
 80009a2:	f1c2 0120 	rsb	r1, r2, #32
 80009a6:	fa20 f101 	lsr.w	r1, r0, r1
 80009aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ae:	ea41 0e03 	orr.w	lr, r1, r3
 80009b2:	4094      	lsls	r4, r2
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	0c21      	lsrs	r1, r4, #16
 80009ba:	fbbe f6f8 	udiv	r6, lr, r8
 80009be:	fa1f f78c 	uxth.w	r7, ip
 80009c2:	fb08 e316 	mls	r3, r8, r6, lr
 80009c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ca:	fb06 f107 	mul.w	r1, r6, r7
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d90a      	bls.n	80009e8 <__udivmoddi4+0x64>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f106 30ff 	add.w	r0, r6, #4294967295
 80009da:	f080 811f 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009de:	4299      	cmp	r1, r3
 80009e0:	f240 811c 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e4:	3e02      	subs	r6, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1a5b      	subs	r3, r3, r1
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3310 	mls	r3, r8, r0, r3
 80009f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f8:	fb00 f707 	mul.w	r7, r0, r7
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x92>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a08:	f080 810a 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	f240 8107 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b11d      	cbz	r5, 8000a28 <__udivmoddi4+0xa4>
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	2300      	movs	r3, #0
 8000a24:	e9c5 4300 	strd	r4, r3, [r5]
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	f000 80ef 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f683 	clz	r6, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	469e      	mov	lr, r3
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0e0      	beq.n	8000a28 <__udivmoddi4+0xa4>
 8000a66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a6a:	e7dd      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8092 	bne.w	8000b9e <__udivmoddi4+0x21a>
 8000a7a:	eba1 010c 	sub.w	r1, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2601      	movs	r6, #1
 8000a88:	0c20      	lsrs	r0, r4, #16
 8000a8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab8:	fb07 1110 	mls	r1, r7, r0, r1
 8000abc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4608      	mov	r0, r1
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79c      	b.n	8000a1e <__udivmoddi4+0x9a>
 8000ae4:	f1c6 0720 	rsb	r7, r6, #32
 8000ae8:	40b3      	lsls	r3, r6
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa01 f306 	lsl.w	r3, r1, r6
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40f9      	lsrs	r1, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f306 	lsl.w	r3, r0, r6
 8000b06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 1118 	mls	r1, r9, r8, r1
 8000b14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4461      	add	r1, ip
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b44:	fb09 1110 	mls	r1, r9, r0, r1
 8000b48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	458e      	cmp	lr, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	458e      	cmp	lr, r1
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba1 010e 	sub.w	r1, r1, lr
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb61 010e 	sbc.w	r1, r1, lr
 8000b86:	fa01 f707 	lsl.w	r7, r1, r7
 8000b8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b8e:	40f1      	lsrs	r1, r6
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c5 7100 	strd	r7, r1, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4301      	orrs	r1, r0
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	429e      	cmp	r6, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	b289      	uxth	r1, r1
 8000be8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bec:	fb07 3316 	mls	r3, r7, r6, r3
 8000bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3e02      	subs	r6, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e705      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e3      	b.n	80009e8 <__udivmoddi4+0x64>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6f8      	b.n	8000a16 <__udivmoddi4+0x92>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4646      	mov	r6, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4461      	add	r1, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0aa      	sub	sp, #168	; 0xa8
 8000c5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5e:	f002 fdff 	bl	8003860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c62:	f000 fb01 	bl	8001268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c66:	f000 fd79 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6a:	f000 fd57 	bl	800171c <MX_DMA_Init>
  MX_ADC1_Init();
 8000c6e:	f000 fb65 	bl	800133c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000c72:	f000 fbff 	bl	8001474 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000c76:	f000 fc87 	bl	8001588 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c7a:	f000 fcfb 	bl	8001674 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000c7e:	f000 fbcb 	bl	8001418 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000c82:	f000 fc2d 	bl	80014e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8000c86:	4ba2      	ldr	r3, [pc, #648]	; (8000f10 <main+0x2b8>)
 8000c88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90



//LL_SPI_Enable(SPI2);

  HAL_SPI_Init(&hspi2);
 8000c8c:	48a1      	ldr	r0, [pc, #644]	; (8000f14 <main+0x2bc>)
 8000c8e:	f005 fd23 	bl	80066d8 <HAL_SPI_Init>
  // lcd_init(); // keep this late or have issues
//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
//TIM1->CCER=0;
HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8000c92:	48a1      	ldr	r0, [pc, #644]	; (8000f18 <main+0x2c0>)
 8000c94:	f005 ffb3 	bl	8006bfe <HAL_TIM_Base_Start_IT>
TIM3->CCER=0;
 8000c98:	4ba0      	ldr	r3, [pc, #640]	; (8000f1c <main+0x2c4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
HAL_TIM_Base_Start(&htim2);
 8000c9e:	48a0      	ldr	r0, [pc, #640]	; (8000f20 <main+0x2c8>)
 8000ca0:	f005 ff89 	bl	8006bb6 <HAL_TIM_Base_Start>
HAL_TIM_Base_Start(&htim4);
 8000ca4:	489f      	ldr	r0, [pc, #636]	; (8000f24 <main+0x2cc>)
 8000ca6:	f005 ff86 	bl	8006bb6 <HAL_TIM_Base_Start>
//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000caa:	2108      	movs	r1, #8
 8000cac:	489a      	ldr	r0, [pc, #616]	; (8000f18 <main+0x2c0>)
 8000cae:	f005 ffff 	bl	8006cb0 <HAL_TIM_PWM_Start>
//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
TIM2->CNT=32000;
 8000cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cb6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
HAL_ADC_Start(&hadc1);
 8000cbc:	489a      	ldr	r0, [pc, #616]	; (8000f28 <main+0x2d0>)
 8000cbe:	f002 fea9 	bl	8003a14 <HAL_ADC_Start>
HAL_ADC_Start_DMA(&hadc1, adc_source, 3); //dma start ,needs this and adc start
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	4999      	ldr	r1, [pc, #612]	; (8000f2c <main+0x2d4>)
 8000cc6:	4898      	ldr	r0, [pc, #608]	; (8000f28 <main+0x2d0>)
 8000cc8:	f002 ff4a 	bl	8003b60 <HAL_ADC_Start_DMA>


HAL_I2C_MspInit(&hi2c2);
 8000ccc:	4898      	ldr	r0, [pc, #608]	; (8000f30 <main+0x2d8>)
 8000cce:	f002 fbc9 	bl	8003464 <HAL_I2C_MspInit>
} // reads stored values for potvalues
*/

uint8_t potSource2[65];
uint8_t potSource3[65];
HAL_I2C_Mem_Read(&hi2c2, 160, (1<<6), 2,&potSource, 64,1000);		// all good
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2340      	movs	r3, #64	; 0x40
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	4b95      	ldr	r3, [pc, #596]	; (8000f34 <main+0x2dc>)
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	2240      	movs	r2, #64	; 0x40
 8000ce4:	21a0      	movs	r1, #160	; 0xa0
 8000ce6:	4892      	ldr	r0, [pc, #584]	; (8000f30 <main+0x2d8>)
 8000ce8:	f004 fb3a 	bl	8005360 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (2<<6), 2,&potSource2,64,1000);
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	21a0      	movs	r1, #160	; 0xa0
 8000d02:	488b      	ldr	r0, [pc, #556]	; (8000f30 <main+0x2d8>)
 8000d04:	f004 fb2c 	bl	8005360 <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c2, 160, (3<<6), 2,&potSource3,64,1000);
 8000d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0c:	9302      	str	r3, [sp, #8]
 8000d0e:	2340      	movs	r3, #64	; 0x40
 8000d10:	9301      	str	r3, [sp, #4]
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	9300      	str	r3, [sp, #0]
 8000d16:	2302      	movs	r3, #2
 8000d18:	22c0      	movs	r2, #192	; 0xc0
 8000d1a:	21a0      	movs	r1, #160	; 0xa0
 8000d1c:	4884      	ldr	r0, [pc, #528]	; (8000f30 <main+0x2d8>)
 8000d1e:	f004 fb1f 	bl	8005360 <HAL_I2C_Mem_Read>

for(i=0;i<1024;i++){
 8000d22:	4b85      	ldr	r3, [pc, #532]	; (8000f38 <main+0x2e0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	801a      	strh	r2, [r3, #0]
 8000d28:	e024      	b.n	8000d74 <main+0x11c>
//	gfx_ram[i]=gfx_char[((i>>5)&7)+((i>>8)<<3)]; // test input fill  8*128 v+h just normal characters
	gfx_ram[i&63] [i>>6]  =gfx_char[8+(i&7)+(((i>>3)*8)&63)];
 8000d2a:	4b83      	ldr	r3, [pc, #524]	; (8000f38 <main+0x2e0>)
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	f103 0208 	add.w	r2, r3, #8
 8000d36:	4b80      	ldr	r3, [pc, #512]	; (8000f38 <main+0x2e0>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d44:	441a      	add	r2, r3
 8000d46:	4b7c      	ldr	r3, [pc, #496]	; (8000f38 <main+0x2e0>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d4e:	497a      	ldr	r1, [pc, #488]	; (8000f38 <main+0x2e0>)
 8000d50:	8809      	ldrh	r1, [r1, #0]
 8000d52:	0989      	lsrs	r1, r1, #6
 8000d54:	b289      	uxth	r1, r1
 8000d56:	4608      	mov	r0, r1
 8000d58:	4978      	ldr	r1, [pc, #480]	; (8000f3c <main+0x2e4>)
 8000d5a:	5c89      	ldrb	r1, [r1, r2]
 8000d5c:	4a78      	ldr	r2, [pc, #480]	; (8000f40 <main+0x2e8>)
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	4413      	add	r3, r2
 8000d62:	4403      	add	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	701a      	strb	r2, [r3, #0]
for(i=0;i<1024;i++){
 8000d68:	4b73      	ldr	r3, [pc, #460]	; (8000f38 <main+0x2e0>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <main+0x2e0>)
 8000d72:	801a      	strh	r2, [r3, #0]
 8000d74:	4b70      	ldr	r3, [pc, #448]	; (8000f38 <main+0x2e0>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7c:	d3d5      	bcc.n	8000d2a <main+0xd2>
//gfx_ram[i&63] [i>>6]  =250;
}

for(i=0;i<64;i++){
 8000d7e:	4b6e      	ldr	r3, [pc, #440]	; (8000f38 <main+0x2e0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	801a      	strh	r2, [r3, #0]
 8000d84:	e011      	b.n	8000daa <main+0x152>
	potSource[i+64]=potSource2[i];  //load up from eeprom
 8000d86:	4b6c      	ldr	r3, [pc, #432]	; (8000f38 <main+0x2e0>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b6a      	ldr	r3, [pc, #424]	; (8000f38 <main+0x2e0>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	3340      	adds	r3, #64	; 0x40
 8000d92:	3298      	adds	r2, #152	; 0x98
 8000d94:	443a      	add	r2, r7
 8000d96:	f812 1c50 	ldrb.w	r1, [r2, #-80]
 8000d9a:	4a66      	ldr	r2, [pc, #408]	; (8000f34 <main+0x2dc>)
 8000d9c:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000d9e:	4b66      	ldr	r3, [pc, #408]	; (8000f38 <main+0x2e0>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b64      	ldr	r3, [pc, #400]	; (8000f38 <main+0x2e0>)
 8000da8:	801a      	strh	r2, [r3, #0]
 8000daa:	4b63      	ldr	r3, [pc, #396]	; (8000f38 <main+0x2e0>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	2b3f      	cmp	r3, #63	; 0x3f
 8000db0:	d9e9      	bls.n	8000d86 <main+0x12e>
}

for(i=0;i<64;i++){
 8000db2:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <main+0x2e0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	801a      	strh	r2, [r3, #0]
 8000db8:	e011      	b.n	8000dde <main+0x186>
	potSource[i+128]=potSource3[i];
 8000dba:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <main+0x2e0>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <main+0x2e0>)
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	3380      	adds	r3, #128	; 0x80
 8000dc6:	3298      	adds	r2, #152	; 0x98
 8000dc8:	443a      	add	r2, r7
 8000dca:	f812 1c94 	ldrb.w	r1, [r2, #-148]
 8000dce:	4a59      	ldr	r2, [pc, #356]	; (8000f34 <main+0x2dc>)
 8000dd0:	54d1      	strb	r1, [r2, r3]
for(i=0;i<64;i++){
 8000dd2:	4b59      	ldr	r3, [pc, #356]	; (8000f38 <main+0x2e0>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b57      	ldr	r3, [pc, #348]	; (8000f38 <main+0x2e0>)
 8000ddc:	801a      	strh	r2, [r3, #0]
 8000dde:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <main+0x2e0>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b3f      	cmp	r3, #63	; 0x3f
 8000de4:	d9e9      	bls.n	8000dba <main+0x162>
}

for(i=0;i<180;i++){
 8000de6:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <main+0x2e0>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	801a      	strh	r2, [r3, #0]
 8000dec:	e010      	b.n	8000e10 <main+0x1b8>
	potValues[i]=potSource[i]>>4;
 8000dee:	4b52      	ldr	r3, [pc, #328]	; (8000f38 <main+0x2e0>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b4f      	ldr	r3, [pc, #316]	; (8000f34 <main+0x2dc>)
 8000df6:	5c9b      	ldrb	r3, [r3, r2]
 8000df8:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <main+0x2e0>)
 8000dfa:	8812      	ldrh	r2, [r2, #0]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	b2d9      	uxtb	r1, r3
 8000e00:	4b50      	ldr	r3, [pc, #320]	; (8000f44 <main+0x2ec>)
 8000e02:	5499      	strb	r1, [r3, r2]
for(i=0;i<180;i++){
 8000e04:	4b4c      	ldr	r3, [pc, #304]	; (8000f38 <main+0x2e0>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <main+0x2e0>)
 8000e0e:	801a      	strh	r2, [r3, #0]
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <main+0x2e0>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	2bb3      	cmp	r3, #179	; 0xb3
 8000e16:	d9ea      	bls.n	8000dee <main+0x196>
}

float tempo_hold;  // calculate tempo look up
for (i=0;i<161;i++) {
 8000e18:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <main+0x2e0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
 8000e1e:	e049      	b.n	8000eb4 <main+0x25c>

tempo_hold=(i+180)*0.0166666666;
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <main+0x2e0>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	33b4      	adds	r3, #180	; 0xb4
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc52 	bl	80006d0 <__aeabi_i2d>
 8000e2c:	a334      	add	r3, pc, #208	; (adr r3, 8000f00 <main+0x2a8>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff f9d1 	bl	80001d8 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff fd39 	bl	80008b4 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_hold=	1/tempo_hold;
 8000e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000e4c:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8000e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e54:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
tempo_hold=	tempo_hold*2187.6*4;      // change for the sake of note length
 8000e58:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e5c:	f7ff fc4a 	bl	80006f4 <__aeabi_f2d>
 8000e60:	a329      	add	r3, pc, #164	; (adr r3, 8000f08 <main+0x2b0>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff f9b7 	bl	80001d8 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	4b34      	ldr	r3, [pc, #208]	; (8000f48 <main+0x2f0>)
 8000e78:	f7ff f9ae 	bl	80001d8 <__aeabi_dmul>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fd16 	bl	80008b4 <__aeabi_d2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

tempo_lut[i]=tempo_hold;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <main+0x2e0>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9c:	ee17 3a90 	vmov	r3, s15
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <main+0x2f4>)
 8000ea4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
for (i=0;i<161;i++) {
 8000ea8:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <main+0x2e0>)
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <main+0x2e0>)
 8000eb2:	801a      	strh	r2, [r3, #0]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <main+0x2e0>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	2ba0      	cmp	r3, #160	; 0xa0
 8000eba:	d9b1      	bls.n	8000e20 <main+0x1c8>
}
isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <main+0x2f8>)
 8000ebe:	f240 223b 	movw	r2, #571	; 0x23b
 8000ec2:	801a      	strh	r2, [r3, #0]

noteTiming=24;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <main+0x2fc>)
 8000ec6:	2218      	movs	r2, #24
 8000ec8:	701a      	strb	r2, [r3, #0]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <main+0x2e0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	801a      	strh	r2, [r3, #0]
 8000ed0:	e00b      	b.n	8000eea <main+0x292>
	spell[i]=67;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <main+0x2e0>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <main+0x300>)
 8000eda:	2143      	movs	r1, #67	; 0x43
 8000edc:	5499      	strb	r1, [r3, r2]
for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <main+0x2e0>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <main+0x2e0>)
 8000ee8:	801a      	strh	r2, [r3, #0]
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <main+0x2e0>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ef2:	d3ee      	bcc.n	8000ed2 <main+0x27a>

}

display_fill();
 8000ef4:	f000 ffc4 	bl	8001e80 <display_fill>
// build display, enc_lut2, works good

for (i=0;i<512;i++)	{gfx_char[i]=gfx_char[i];
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <main+0x2e0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	801a      	strh	r2, [r3, #0]
 8000efe:	e03d      	b.n	8000f7c <main+0x324>
 8000f00:	0febdd13 	.word	0x0febdd13
 8000f04:	3f911111 	.word	0x3f911111
 8000f08:	33333333 	.word	0x33333333
 8000f0c:	40a11733 	.word	0x40a11733
 8000f10:	0800d2f0 	.word	0x0800d2f0
 8000f14:	20000708 	.word	0x20000708
 8000f18:	200007a0 	.word	0x200007a0
 8000f1c:	40000400 	.word	0x40000400
 8000f20:	20000760 	.word	0x20000760
 8000f24:	200007e0 	.word	0x200007e0
 8000f28:	2000060c 	.word	0x2000060c
 8000f2c:	2000134c 	.word	0x2000134c
 8000f30:	200006b4 	.word	0x200006b4
 8000f34:	200009a4 	.word	0x200009a4
 8000f38:	20000b00 	.word	0x20000b00
 8000f3c:	200001d4 	.word	0x200001d4
 8000f40:	20001870 	.word	0x20001870
 8000f44:	200008a4 	.word	0x200008a4
 8000f48:	40100000 	.word	0x40100000
 8000f4c:	2000172c 	.word	0x2000172c
 8000f50:	20000aac 	.word	0x20000aac
 8000f54:	20000aa4 	.word	0x20000aa4
 8000f58:	20000024 	.word	0x20000024
 8000f5c:	4b79      	ldr	r3, [pc, #484]	; (8001144 <main+0x4ec>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	4619      	mov	r1, r3
 8000f62:	4b78      	ldr	r3, [pc, #480]	; (8001144 <main+0x4ec>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b77      	ldr	r3, [pc, #476]	; (8001148 <main+0x4f0>)
 8000f6a:	5c59      	ldrb	r1, [r3, r1]
 8000f6c:	4b76      	ldr	r3, [pc, #472]	; (8001148 <main+0x4f0>)
 8000f6e:	5499      	strb	r1, [r3, r2]
 8000f70:	4b74      	ldr	r3, [pc, #464]	; (8001144 <main+0x4ec>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b72      	ldr	r3, [pc, #456]	; (8001144 <main+0x4ec>)
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	4b71      	ldr	r3, [pc, #452]	; (8001144 <main+0x4ec>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f84:	d3ea      	bcc.n	8000f5c <main+0x304>
}    //font replace




uint8_t lut_temp2=0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
uint8_t lut_temp3=0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
for (i=0;i<256;i++){
 8000f92:	4b6c      	ldr	r3, [pc, #432]	; (8001144 <main+0x4ec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	801a      	strh	r2, [r3, #0]
 8000f98:	e027      	b.n	8000fea <main+0x392>

	if (disp_lut [i>>4] [i&15] <95) lut_temp2=lut_temp2+1;
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <main+0x4ec>)
 8000f9c:	881b      	ldrh	r3, [r3, #0]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b67      	ldr	r3, [pc, #412]	; (8001144 <main+0x4ec>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4967      	ldr	r1, [pc, #412]	; (800114c <main+0x4f4>)
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fb6:	2b5e      	cmp	r3, #94	; 0x5e
 8000fb8:	d805      	bhi.n	8000fc6 <main+0x36e>
 8000fba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000fc4:	e00b      	b.n	8000fde <main+0x386>

	else {enc2_lut[lut_temp3] =i;  lut_temp3++;}
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <main+0x4ec>)
 8000fc8:	881a      	ldrh	r2, [r3, #0]
 8000fca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000fce:	b2d1      	uxtb	r1, r2
 8000fd0:	4a5f      	ldr	r2, [pc, #380]	; (8001150 <main+0x4f8>)
 8000fd2:	54d1      	strb	r1, [r2, r3]
 8000fd4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
for (i=0;i<256;i++){
 8000fde:	4b59      	ldr	r3, [pc, #356]	; (8001144 <main+0x4ec>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	4b57      	ldr	r3, [pc, #348]	; (8001144 <main+0x4ec>)
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	4b56      	ldr	r3, [pc, #344]	; (8001144 <main+0x4ec>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2bff      	cmp	r3, #255	; 0xff
 8000ff0:	d9d3      	bls.n	8000f9a <main+0x342>
}


menuSelect=0;
 8000ff2:	4b58      	ldr	r3, [pc, #352]	; (8001154 <main+0x4fc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
// fill up sample
firstbarLoop=0;
 8000ff8:	4b57      	ldr	r3, [pc, #348]	; (8001158 <main+0x500>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <main+0x504>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b55      	ldr	r3, [pc, #340]	; (800115c <main+0x504>)
 8001008:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;//
 800100a:	4b55      	ldr	r3, [pc, #340]	; (8001160 <main+0x508>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	4a53      	ldr	r2, [pc, #332]	; (8001160 <main+0x508>)
 8001012:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick
 8001014:	4b52      	ldr	r3, [pc, #328]	; (8001160 <main+0x508>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	2b06      	cmp	r3, #6
 800101e:	d101      	bne.n	8001024 <main+0x3cc>
 8001020:	f000 fc60 	bl	80018e4 <analoginputloopb>
if (loop_counter2==9096) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour
 8001024:	4b4e      	ldr	r3, [pc, #312]	; (8001160 <main+0x508>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f242 3288 	movw	r2, #9096	; 0x2388
 800102c:	4293      	cmp	r3, r2
 800102e:	d137      	bne.n	80010a0 <main+0x448>

	mem_buf=potSource[mem_count];
 8001030:	4b4c      	ldr	r3, [pc, #304]	; (8001164 <main+0x50c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <main+0x510>)
 8001038:	5c9a      	ldrb	r2, [r3, r2]
 800103a:	4b4c      	ldr	r3, [pc, #304]	; (800116c <main+0x514>)
 800103c:	701a      	strb	r2, [r3, #0]
	// read values from stored
	HAL_I2C_Mem_Write(&hi2c2, 160, ((1+(mem_count>>6))<<6)+(mem_count&63), 2, &mem_buf, 1, 1000);
 800103e:	4b49      	ldr	r3, [pc, #292]	; (8001164 <main+0x50c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	099b      	lsrs	r3, r3, #6
 8001044:	b2db      	uxtb	r3, r3
 8001046:	b29b      	uxth	r3, r3
 8001048:	3301      	adds	r3, #1
 800104a:	b29b      	uxth	r3, r3
 800104c:	019b      	lsls	r3, r3, #6
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b44      	ldr	r3, [pc, #272]	; (8001164 <main+0x50c>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800105a:	b29b      	uxth	r3, r3
 800105c:	4413      	add	r3, r2
 800105e:	b29a      	uxth	r2, r3
 8001060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	4b40      	ldr	r3, [pc, #256]	; (800116c <main+0x514>)
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2302      	movs	r3, #2
 8001070:	21a0      	movs	r1, #160	; 0xa0
 8001072:	483f      	ldr	r0, [pc, #252]	; (8001170 <main+0x518>)
 8001074:	f004 f87a 	bl	800516c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001078:	2005      	movs	r0, #5
 800107a:	f002 fc63 	bl	8003944 <HAL_Delay>
	if (mem_count==255) mem_count=0; else mem_count++;  // write to first
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <main+0x50c>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2bff      	cmp	r3, #255	; 0xff
 8001084:	d103      	bne.n	800108e <main+0x436>
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <main+0x50c>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e005      	b.n	800109a <main+0x442>
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <main+0x50c>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <main+0x50c>)
 8001098:	701a      	strb	r2, [r3, #0]
	loop_counter2=0; //reset
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <main+0x508>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

}


	  if (disp_end==1)	 {  // displaybuffer after each full screen update on spi
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <main+0x51c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d12e      	bne.n	8001106 <main+0x4ae>

		  { if (loop_counter3)  enc2_tempc=enc2_dir; else enc2_dir=enc2_tempc; }    //hold enc till finished , this to clean up characters for now ,works ok
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <main+0x520>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <main+0x466>
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <main+0x524>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b31      	ldr	r3, [pc, #196]	; (8001180 <main+0x528>)
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e004      	b.n	80010c8 <main+0x470>
 80010be:	4b30      	ldr	r3, [pc, #192]	; (8001180 <main+0x528>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b2d      	ldr	r3, [pc, #180]	; (800117c <main+0x524>)
 80010c6:	801a      	strh	r2, [r3, #0]
		  loop_counter3=!loop_counter3;  //blinker flips on each full page refresh
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <main+0x520>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bf0c      	ite	eq
 80010d0:	2301      	moveq	r3, #1
 80010d2:	2300      	movne	r3, #0
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b27      	ldr	r3, [pc, #156]	; (8001178 <main+0x520>)
 80010da:	701a      	strb	r2, [r3, #0]

		  for (i=0;i<16;i++) {   displayBuffer();}
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <main+0x4ec>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <main+0x49c>
 80010e4:	f000 ff00 	bl	8001ee8 <displayBuffer>
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <main+0x4ec>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <main+0x4ec>)
 80010f2:	801a      	strh	r2, [r3, #0]
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <main+0x4ec>)
 80010f6:	881b      	ldrh	r3, [r3, #0]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d9f3      	bls.n	80010e4 <main+0x48c>
		  enc2_dir=enc2_tempc;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <main+0x528>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <main+0x524>)
 8001104:	801a      	strh	r2, [r3, #0]

	  }


	  if (init<6)
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <main+0x52c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d810      	bhi.n	8001130 <main+0x4d8>
{
	  for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <main+0x4ec>)
 8001110:	2200      	movs	r2, #0
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	e007      	b.n	8001126 <main+0x4ce>
 8001116:	f000 fcdf 	bl	8001ad8 <display_init>
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <main+0x4ec>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	b29a      	uxth	r2, r3
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <main+0x4ec>)
 8001124:	801a      	strh	r2, [r3, #0]
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <main+0x4ec>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d9f3      	bls.n	8001116 <main+0x4be>
 800112e:	e001      	b.n	8001134 <main+0x4dc>
} else {display_update(); }  // send spi line data every loop cycle , self contained, single 8pixel line 18*256steps
 8001130:	f000 fdda 	bl	8001ce8 <display_update>

	  ///////////////////////////////////////////////////////////////////////////////

	  if (loop_counter & 255)	{ // grab adc readings + 3ms , 32 step
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <main+0x504>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d044      	beq.n	80011c6 <main+0x56e>
	  	for (i=0;i<3;i++) {
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <main+0x4ec>)
 800113e:	2200      	movs	r2, #0
 8001140:	801a      	strh	r2, [r3, #0]
 8001142:	e039      	b.n	80011b8 <main+0x560>
 8001144:	20000b00 	.word	0x20000b00
 8001148:	200001d4 	.word	0x200001d4
 800114c:	08007c08 	.word	0x08007c08
 8001150:	20000820 	.word	0x20000820
 8001154:	20000aa5 	.word	0x20000aa5
 8001158:	20000aaa 	.word	0x20000aaa
 800115c:	20000afc 	.word	0x20000afc
 8001160:	200013d0 	.word	0x200013d0
 8001164:	200013cf 	.word	0x200013cf
 8001168:	200009a4 	.word	0x200009a4
 800116c:	200013d4 	.word	0x200013d4
 8001170:	200006b4 	.word	0x200006b4
 8001174:	20001cc2 	.word	0x20001cc2
 8001178:	20001cc3 	.word	0x20001cc3
 800117c:	200013ba 	.word	0x200013ba
 8001180:	20001cc4 	.word	0x20001cc4
 8001184:	200013c9 	.word	0x200013c9

	  	adc_values[2-i]= (adc_source[i]>>7) &31;
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <main+0x5e4>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <main+0x5e8>)
 8001190:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001194:	09db      	lsrs	r3, r3, #7
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <main+0x5e4>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	f1c3 0302 	rsb	r3, r3, #2
 80011a2:	f002 021f 	and.w	r2, r2, #31
 80011a6:	b2d1      	uxtb	r1, r2
 80011a8:	4a26      	ldr	r2, [pc, #152]	; (8001244 <main+0x5ec>)
 80011aa:	54d1      	strb	r1, [r2, r3]
	  	for (i=0;i<3;i++) {
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <main+0x5e4>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <main+0x5e4>)
 80011b6:	801a      	strh	r2, [r3, #0]
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <main+0x5e4>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d9e3      	bls.n	8001188 <main+0x530>
	  }
	  	loop_counter=0;
 80011c0:	4b21      	ldr	r3, [pc, #132]	; (8001248 <main+0x5f0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
	  }

	  if ((seq_pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <main+0x5f4>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b07      	cmp	r3, #7
 80011cc:	d106      	bne.n	80011dc <main+0x584>
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <main+0x5f8>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <main+0x584>
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <main+0x5f8>)
 80011d8:	2201      	movs	r2, #1
 80011da:	801a      	strh	r2, [r3, #0]
	   if (promValue<64) promValue=promValue+1 ; else promValue=0;  // fetch eeprom   nogo
	  	  if ((promValues[promValue] ) !=(potValues[promValue]))  EEPROM.write(promValue,(potValues[promValue]));   //  not too happy can totally kill speed  will have to put elsewhere
	  	  promValues[promValue] =potValues[promValue];
	  	   */

	  	     HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq_pos & 1)); // easy skip ?
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <main+0x5f4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ec:	4819      	ldr	r0, [pc, #100]	; (8001254 <main+0x5fc>)
 80011ee:	f003 fe5f 	bl	8004eb0 <HAL_GPIO_WritePin>
	  	    // very inconsistent

	  if (sample_point>511) sample_pointD=0; // loop when zero cross , good but limited, works ok
 80011f2:	4b19      	ldr	r3, [pc, #100]	; (8001258 <main+0x600>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fc:	d302      	bcc.n	8001204 <main+0x5ac>
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <main+0x604>)
 8001200:	2200      	movs	r2, #0
 8001202:	801a      	strh	r2, [r3, #0]
	  if (sample_point<511)  sample_pointD=512;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <main+0x600>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800120e:	d803      	bhi.n	8001218 <main+0x5c0>
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <main+0x604>)
 8001212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001216:	801a      	strh	r2, [r3, #0]


	  if (sample_pointB!=sample_pointD) bank_write=1; // set start of buffer ,grab , works ok
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <main+0x608>)
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <main+0x604>)
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d002      	beq.n	800122a <main+0x5d2>
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <main+0x60c>)
 8001226:	2201      	movs	r2, #1
 8001228:	801a      	strh	r2, [r3, #0]
	  if (bank_write){
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <main+0x60c>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	f43f aee5 	beq.w	8000ffe <main+0x3a6>

	  	sampling();
 8001234:	f000 ff84 	bl	8002140 <sampling>
	  loop_counter++ ;
 8001238:	e6e1      	b.n	8000ffe <main+0x3a6>
 800123a:	bf00      	nop
 800123c:	20000b00 	.word	0x20000b00
 8001240:	2000134c 	.word	0x2000134c
 8001244:	200001cc 	.word	0x200001cc
 8001248:	20000afc 	.word	0x20000afc
 800124c:	20000ad8 	.word	0x20000ad8
 8001250:	200013c0 	.word	0x200013c0
 8001254:	40020800 	.word	0x40020800
 8001258:	20001306 	.word	0x20001306
 800125c:	2000130a 	.word	0x2000130a
 8001260:	20000afe 	.word	0x20000afe
 8001264:	200001d2 	.word	0x200001d2

08001268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b094      	sub	sp, #80	; 0x50
 800126c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	2230      	movs	r2, #48	; 0x30
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f006 fc4e 	bl	8007b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b28      	ldr	r3, [pc, #160]	; (8001334 <SystemClock_Config+0xcc>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a27      	ldr	r2, [pc, #156]	; (8001334 <SystemClock_Config+0xcc>)
 8001296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <SystemClock_Config+0xcc>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a8:	2300      	movs	r3, #0
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <SystemClock_Config+0xd0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a21      	ldr	r2, [pc, #132]	; (8001338 <SystemClock_Config+0xd0>)
 80012b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <SystemClock_Config+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2310      	movs	r3, #16
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d8:	2308      	movs	r3, #8
 80012da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80012dc:	2364      	movs	r3, #100	; 0x64
 80012de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012e4:	2304      	movs	r3, #4
 80012e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	f107 0320 	add.w	r3, r7, #32
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fdb9 	bl	8005e64 <HAL_RCC_OscConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012f8:	f002 f80e 	bl	8003318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fc:	230f      	movs	r3, #15
 80012fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001312:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2103      	movs	r1, #3
 800131a:	4618      	mov	r0, r3
 800131c:	f005 f810 	bl	8006340 <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001326:	f001 fff7 	bl	8003318 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	3750      	adds	r7, #80	; 0x50
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40007000 	.word	0x40007000

0800133c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	463b      	mov	r3, r7
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_ADC1_Init+0xd0>)
 8001350:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <MX_ADC1_Init+0xd4>)
 8001352:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_ADC1_Init+0xd0>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <MX_ADC1_Init+0xd0>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <MX_ADC1_Init+0xd0>)
 8001362:	2201      	movs	r2, #1
 8001364:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001366:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_ADC1_Init+0xd0>)
 8001368:	2201      	movs	r2, #1
 800136a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <MX_ADC1_Init+0xd0>)
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <MX_ADC1_Init+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_ADC1_Init+0xd0>)
 800137c:	4a25      	ldr	r2, [pc, #148]	; (8001414 <MX_ADC1_Init+0xd8>)
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <MX_ADC1_Init+0xd0>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_ADC1_Init+0xd0>)
 8001388:	2203      	movs	r2, #3
 800138a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800138c:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_ADC1_Init+0xd0>)
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001394:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_ADC1_Init+0xd0>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800139a:	481c      	ldr	r0, [pc, #112]	; (800140c <MX_ADC1_Init+0xd0>)
 800139c:	f002 faf6 	bl	800398c <HAL_ADC_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f001 ffb7 	bl	8003318 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013aa:	2303      	movs	r3, #3
 80013ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013ae:	2301      	movs	r3, #1
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013b2:	2307      	movs	r3, #7
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b6:	463b      	mov	r3, r7
 80013b8:	4619      	mov	r1, r3
 80013ba:	4814      	ldr	r0, [pc, #80]	; (800140c <MX_ADC1_Init+0xd0>)
 80013bc:	f002 fcc2 	bl	8003d44 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013c6:	f001 ffa7 	bl	8003318 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d2:	463b      	mov	r3, r7
 80013d4:	4619      	mov	r1, r3
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_ADC1_Init+0xd0>)
 80013d8:	f002 fcb4 	bl	8003d44 <HAL_ADC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80013e2:	f001 ff99 	bl	8003318 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013e6:	2305      	movs	r3, #5
 80013e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80013ea:	2303      	movs	r3, #3
 80013ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <MX_ADC1_Init+0xd0>)
 80013f4:	f002 fca6 	bl	8003d44 <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80013fe:	f001 ff8b 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000060c 	.word	0x2000060c
 8001410:	40012000 	.word	0x40012000
 8001414:	0f000001 	.word	0x0f000001

08001418 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C2_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	; (800146c <MX_I2C2_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C2_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <MX_I2C2_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C2_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	; (8001468 <MX_I2C2_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <MX_I2C2_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <MX_I2C2_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <MX_I2C2_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <MX_I2C2_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <MX_I2C2_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_I2C2_Init+0x50>)
 8001456:	f003 fd45 	bl	8004ee4 <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001460:	f001 ff5a 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200006b4 	.word	0x200006b4
 800146c:	40005800 	.word	0x40005800
 8001470:	00061a80 	.word	0x00061a80

08001474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_SPI2_Init+0x64>)
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <MX_SPI2_Init+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_SPI2_Init+0x64>)
 8001480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_SPI2_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <MX_SPI2_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_SPI2_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <MX_SPI2_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014a8:	2230      	movs	r2, #48	; 0x30
 80014aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014c0:	220a      	movs	r2, #10
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_SPI2_Init+0x64>)
 80014c6:	f005 f907 	bl	80066d8 <HAL_SPI_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014d0:	f001 ff22 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000708 	.word	0x20000708
 80014dc:	40003800 	.word	0x40003800

080014e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fb12 	bl	8007b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <MX_TIM2_Init+0xa4>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001504:	4b1f      	ldr	r3, [pc, #124]	; (8001584 <MX_TIM2_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150a:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <MX_TIM2_Init+0xa4>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_TIM2_Init+0xa4>)
 8001512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_TIM2_Init+0xa4>)
 800151a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <MX_TIM2_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001526:	2301      	movs	r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800152a:	2302      	movs	r3, #2
 800152c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800152e:	2301      	movs	r3, #1
 8001530:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800153e:	2301      	movs	r3, #1
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <MX_TIM2_Init+0xa4>)
 8001552:	f005 fbdf 	bl	8006d14 <HAL_TIM_Encoder_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800155c:	f001 fedc 	bl	8003318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_TIM2_Init+0xa4>)
 800156e:	f006 f9e9 	bl	8007944 <HAL_TIMEx_MasterConfigSynchronization>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001578:	f001 fece 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	3730      	adds	r7, #48	; 0x30
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000760 	.word	0x20000760

08001588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 0320 	add.w	r3, r7, #32
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015b8:	4b2c      	ldr	r3, [pc, #176]	; (800166c <MX_TIM3_Init+0xe4>)
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <MX_TIM3_Init+0xe4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <MX_TIM3_Init+0xe4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2857;
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_TIM3_Init+0xe4>)
 80015cc:	f640 3229 	movw	r2, #2857	; 0xb29
 80015d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_TIM3_Init+0xe4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <MX_TIM3_Init+0xe4>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015de:	4823      	ldr	r0, [pc, #140]	; (800166c <MX_TIM3_Init+0xe4>)
 80015e0:	f005 fabe 	bl	8006b60 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015ea:	f001 fe95 	bl	8003318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f8:	4619      	mov	r1, r3
 80015fa:	481c      	ldr	r0, [pc, #112]	; (800166c <MX_TIM3_Init+0xe4>)
 80015fc:	f005 fdea 	bl	80071d4 <HAL_TIM_ConfigClockSource>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001606:	f001 fe87 	bl	8003318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <MX_TIM3_Init+0xe4>)
 800160c:	f005 fb1b 	bl	8006c46 <HAL_TIM_PWM_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001616:	f001 fe7f 	bl	8003318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001622:	f107 0320 	add.w	r3, r7, #32
 8001626:	4619      	mov	r1, r3
 8001628:	4810      	ldr	r0, [pc, #64]	; (800166c <MX_TIM3_Init+0xe4>)
 800162a:	f006 f98b 	bl	8007944 <HAL_TIMEx_MasterConfigSynchronization>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001634:	f001 fe70 	bl	8003318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001638:	2370      	movs	r3, #112	; 0x70
 800163a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2208      	movs	r2, #8
 800164c:	4619      	mov	r1, r3
 800164e:	4807      	ldr	r0, [pc, #28]	; (800166c <MX_TIM3_Init+0xe4>)
 8001650:	f005 fcfa 	bl	8007048 <HAL_TIM_PWM_ConfigChannel>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800165a:	f001 fe5d 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <MX_TIM3_Init+0xe4>)
 8001660:	f002 f846 	bl	80036f0 <HAL_TIM_MspPostInit>

}
 8001664:	bf00      	nop
 8001666:	3738      	adds	r7, #56	; 0x38
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200007a0 	.word	0x200007a0
 8001670:	40000400 	.word	0x40000400

08001674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fa48 	bl	8007b18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <MX_TIM4_Init+0xa0>)
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <MX_TIM4_Init+0xa4>)
 8001694:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001696:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <MX_TIM4_Init+0xa0>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <MX_TIM4_Init+0xa0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <MX_TIM4_Init+0xa0>)
 80016a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_TIM4_Init+0xa0>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_TIM4_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80016ba:	2302      	movs	r3, #2
 80016bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016ce:	2301      	movs	r3, #1
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 80016d6:	2308      	movs	r3, #8
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	4619      	mov	r1, r3
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_TIM4_Init+0xa0>)
 80016e2:	f005 fb17 	bl	8006d14 <HAL_TIM_Encoder_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80016ec:	f001 fe14 	bl	8003318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM4_Init+0xa0>)
 80016fe:	f006 f921 	bl	8007944 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001708:	f001 fe06 	bl	8003318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200007e0 	.word	0x200007e0
 8001718:	40000800 	.word	0x40000800

0800171c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_DMA_Init+0x3c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <MX_DMA_Init+0x3c>)
 800172c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_DMA_Init+0x3c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2038      	movs	r0, #56	; 0x38
 8001744:	f002 fe89 	bl	800445a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001748:	2038      	movs	r0, #56	; 0x38
 800174a:	f002 fea2 	bl	8004492 <HAL_NVIC_EnableIRQ>

}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <MX_GPIO_Init+0x9c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <MX_GPIO_Init+0x9c>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <MX_GPIO_Init+0x9c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <MX_GPIO_Init+0x9c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <MX_GPIO_Init+0x9c>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <MX_GPIO_Init+0x9c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_GPIO_Init+0x9c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <MX_GPIO_Init+0x9c>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_GPIO_Init+0x9c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017cc:	480b      	ldr	r0, [pc, #44]	; (80017fc <MX_GPIO_Init+0xa0>)
 80017ce:	f003 fb6f 	bl	8004eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4804      	ldr	r0, [pc, #16]	; (80017fc <MX_GPIO_Init+0xa0>)
 80017ec:	f003 f9dc 	bl	8004ba8 <HAL_GPIO_Init>

}
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020800 	.word	0x40020800

08001800 <SPI_command>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */
void SPI_command(void){
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <SPI_command+0x68>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d128      	bne.n	8001860 <SPI_command+0x60>
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <SPI_command+0x6c>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d124      	bne.n	8001860 <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <SPI_command+0x70>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	0a1b      	lsrs	r3, r3, #8
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <SPI_command+0x2a>
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <SPI_command+0x74>)
 8001824:	22f8      	movs	r2, #248	; 0xf8
 8001826:	701a      	strb	r2, [r3, #0]
 8001828:	e002      	b.n	8001830 <SPI_command+0x30>
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <SPI_command+0x74>)
 800182c:	22fa      	movs	r2, #250	; 0xfa
 800182e:	701a      	strb	r2, [r3, #0]
/*		bsrr_long=spi_byte<<16; // top byte for command 24-16, then 2 bytes of data 16-0
		spi_hold=(spi_hold&255);
		bsrr_long=bsrr_long+((spi_hold>>4)<<12); // 4 bits to top
		bsrr_long=bsrr_long+((spi_hold&15)<<4);	// 4 bits to top
*/
	spi_store[0]=spi_byte&255;
 8001830:	4b10      	ldr	r3, [pc, #64]	; (8001874 <SPI_command+0x74>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <SPI_command+0x70>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	b29b      	uxth	r3, r3
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	b2db      	uxtb	r3, r3
 8001842:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <SPI_command+0x70>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	b2db      	uxtb	r3, r3
 800184c:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good
 800184e:	4639      	mov	r1, r7
 8001850:	2364      	movs	r3, #100	; 0x64
 8001852:	2203      	movs	r2, #3
 8001854:	4808      	ldr	r0, [pc, #32]	; (8001878 <SPI_command+0x78>)
 8001856:	f004 ffa3 	bl	80067a0 <HAL_SPI_Transmit>


//HAL_Delay(10);
	spi_enable=1; }
 800185a:	4b03      	ldr	r3, [pc, #12]	; (8001868 <SPI_command+0x68>)
 800185c:	2201      	movs	r2, #1
 800185e:	801a      	strh	r2, [r3, #0]
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200013c2 	.word	0x200013c2
 800186c:	200013c8 	.word	0x200013c8
 8001870:	200013c6 	.word	0x200013c6
 8001874:	200013c4 	.word	0x200013c4
 8001878:	20000708 	.word	0x20000708

0800187c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable

{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

	sample_point=sample_point & 1023;// this is 1
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188e:	b29a      	uxth	r2, r3
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001892:	801a      	strh	r2, [r3, #0]
	play_hold=play_sample[sample_point]; // this is 2
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800189e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018a4:	801a      	strh	r2, [r3, #0]

		if(TIM3==htim->Instance)			// nothing here is consistent
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10b      	bne.n	80018c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
{


TIM3->CCR3=play_hold ;  // keep readin sample storage
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x60>)
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018b8:	63da      	str	r2, [r3, #60]	; 0x3c


//if (bs_count==255
	//	)  { bs_count=0; menu_store=(menuSelect>>2); } else bs_count++; // menu select, higher count just spills over  159 chamge to 128 2*64
//}
sample_point++; //this needs to be here or too fast and wrong sample rate
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018c6:	801a      	strh	r2, [r3, #0]

}

}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20001306 	.word	0x20001306
 80018d8:	20000b04 	.word	0x20000b04
 80018dc:	20001308 	.word	0x20001308
 80018e0:	40000400 	.word	0x40000400

080018e4 <analoginputloopb>:
		HAL_ADC_Stop(&hadc1);
for (i=0;i<3;i++){ adc_values[i]= (adc_values[i]>>8) &15; } // reduce value to 4 bit

}

void analoginputloopb(void){  //works fine still
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0


	//menuSelect = (7 - (adc_values[0] >>2))<<1;		//x *16  main menu select
	//menuSelect = (15 - (adc_values[0] >>1));		//x *7  main menu select
	//menuSelectX=(31 - adc_values[1])>>1;  // Y select inside page
	menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 80018ea:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <analoginputloopb+0x1b0>)
 80018ec:	789b      	ldrb	r3, [r3, #2]
 80018ee:	091b      	lsrs	r3, r3, #4
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <analoginputloopb+0x1b4>)
 80018f4:	701a      	strb	r2, [r3, #0]
		menuSelectX=cursor_menu[2]&15;  // Y select inside page
 80018f6:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <analoginputloopb+0x1b0>)
 80018f8:	789b      	ldrb	r3, [r3, #2]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <analoginputloopb+0x1b8>)
 8001902:	701a      	strb	r2, [r3, #0]
	//	counterVarB = menuSelectX + menuSelect; // select mem page 10*8  and location pointer  77
//		if (adc_values[1]>15)	menu_holder=disp_lut [(menuSelect)	+1] [31-adc_values[1]]; // change back to 0-15
//	else menu_holder=disp_lut [(menuSelect)	] [15-adc_values[1]];  // grab disp lut value for pointer if valid then write for now

		//menu_holder=disp_lut [(menuSelect)	] [(15-adc_values[1])];   // value from disp lut
		menu_holder=disp_lut [menuSelect] [menuSelectX];   // value from disp lut
 8001904:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <analoginputloopb+0x1b4>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	4b64      	ldr	r3, [pc, #400]	; (8001a9c <analoginputloopb+0x1b8>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	4a63      	ldr	r2, [pc, #396]	; (8001aa0 <analoginputloopb+0x1bc>)
 8001912:	0103      	lsls	r3, r0, #4
 8001914:	440b      	add	r3, r1
 8001916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800191a:	80fb      	strh	r3, [r7, #6]
		cursor_menu[1]=0;
 800191c:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <analoginputloopb+0x1b0>)
 800191e:	2200      	movs	r2, #0
 8001920:	705a      	strb	r2, [r3, #1]
		//cursor_menu[2]=cursor_lookup[enc2_dir];
		// cursor_menu[2]=cursor_lookup[enc2_dir]; //needed for correct line sequence ,obsolete
		cursor_menu[2]=enc2_dir;
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <analoginputloopb+0x1c0>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <analoginputloopb+0x1b0>)
 800192c:	709a      	strb	r2, [r3, #2]
		
		//cursor_menu[2]=(16-adc_values[1]);



		if (menu_holder>127)	counterVarB=menu_holder-128; //  points to actual potvalues location from dsip_lut when value is higher than 127 , works ok problem with menu display
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	2b7f      	cmp	r3, #127	; 0x7f
 8001932:	d904      	bls.n	800193e <analoginputloopb+0x5a>
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	3b80      	subs	r3, #128	; 0x80
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <analoginputloopb+0x1c4>)
 800193c:	801a      	strh	r2, [r3, #0]
				enc_dir=potSource[counterVarB];
 800193e:	4b5a      	ldr	r3, [pc, #360]	; (8001aa8 <analoginputloopb+0x1c4>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b59      	ldr	r3, [pc, #356]	; (8001aac <analoginputloopb+0x1c8>)
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <analoginputloopb+0x1cc>)
 800194c:	801a      	strh	r2, [r3, #0]

	enc_temp=(TIM2->CNT)>>1;  // read counter tim2 ,divider ok
 800194e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	085b      	lsrs	r3, r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b56      	ldr	r3, [pc, #344]	; (8001ab4 <analoginputloopb+0x1d0>)
 800195a:	801a      	strh	r2, [r3, #0]
	enc2_temp=(TIM4->CNT)>>1;  // read counter tim4
 800195c:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <analoginputloopb+0x1d4>)
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	085b      	lsrs	r3, r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b55      	ldr	r3, [pc, #340]	; (8001abc <analoginputloopb+0x1d8>)
 8001966:	801a      	strh	r2, [r3, #0]
	enc2_temp=enc2_temp&255; // fix overflow ?
 8001968:	4b54      	ldr	r3, [pc, #336]	; (8001abc <analoginputloopb+0x1d8>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <analoginputloopb+0x1d8>)
 8001972:	801a      	strh	r2, [r3, #0]
	if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 8001974:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <analoginputloopb+0x1d0>)
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	4b51      	ldr	r3, [pc, #324]	; (8001ac0 <analoginputloopb+0x1dc>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d911      	bls.n	80019a4 <analoginputloopb+0xc0>
 8001980:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <analoginputloopb+0x1cc>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b46      	ldr	r3, [pc, #280]	; (8001aa4 <analoginputloopb+0x1c0>)
 800198a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198e:	111b      	asrs	r3, r3, #4
 8001990:	b21b      	sxth	r3, r3
 8001992:	4619      	mov	r1, r3
 8001994:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <analoginputloopb+0x1e0>)
 8001996:	5c5b      	ldrb	r3, [r3, r1]
 8001998:	b29b      	uxth	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	4b43      	ldr	r3, [pc, #268]	; (8001ab0 <analoginputloopb+0x1cc>)
 80019a2:	801a      	strh	r2, [r3, #0]
	if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+(disp_multi[enc2_dir>>4]);   // start settle timer , will do 2 times per turn always, wire opposite
 80019a4:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <analoginputloopb+0x1d0>)
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <analoginputloopb+0x1dc>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d211      	bcs.n	80019d4 <analoginputloopb+0xf0>
 80019b0:	4b3c      	ldr	r3, [pc, #240]	; (8001aa4 <analoginputloopb+0x1c0>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	111b      	asrs	r3, r3, #4
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <analoginputloopb+0x1e0>)
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <analoginputloopb+0x1cc>)
 80019c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <analoginputloopb+0x1cc>)
 80019d2:	801a      	strh	r2, [r3, #0]
	//if (enc_temp<enc_tempB)	 enc_dir++;


enc2_temp=enc2_lut[enc2_temp];  // force alternative values for , seems to work ok
 80019d4:	4b39      	ldr	r3, [pc, #228]	; (8001abc <analoginputloopb+0x1d8>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <analoginputloopb+0x1e4>)
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b36      	ldr	r3, [pc, #216]	; (8001abc <analoginputloopb+0x1d8>)
 80019e2:	801a      	strh	r2, [r3, #0]

	if (enc_dir>160) enc_dir=160;
 80019e4:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <analoginputloopb+0x1cc>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	2ba0      	cmp	r3, #160	; 0xa0
 80019ec:	dd02      	ble.n	80019f4 <analoginputloopb+0x110>
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <analoginputloopb+0x1cc>)
 80019f0:	22a0      	movs	r2, #160	; 0xa0
 80019f2:	801a      	strh	r2, [r3, #0]
			if (enc_dir<0) enc_dir=0;
 80019f4:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <analoginputloopb+0x1cc>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	da02      	bge.n	8001a04 <analoginputloopb+0x120>
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <analoginputloopb+0x1cc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	801a      	strh	r2, [r3, #0]
			//if (enc2_temp<16) enc_dir=(enc_dir<<2) & 127; // faster for notes on first row

			potSource[counterVarB]=enc_dir;
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <analoginputloopb+0x1cc>)
 8001a06:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <analoginputloopb+0x1c4>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	b2c9      	uxtb	r1, r1
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <analoginputloopb+0x1c8>)
 8001a14:	5499      	strb	r1, [r3, r2]
					enc_dir=0;
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <analoginputloopb+0x1cc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	801a      	strh	r2, [r3, #0]
			enc_tempB=enc_temp;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <analoginputloopb+0x1d0>)
 8001a1e:	881a      	ldrh	r2, [r3, #0]
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <analoginputloopb+0x1dc>)
 8001a22:	801a      	strh	r2, [r3, #0]



			//if  (enc2_temp>enc2_tempB)	 enc2_dir++;   // start settle timer , will do 2 times per turn always
			//if (enc2_temp<enc2_tempB)	 enc2_dir--;
			enc2_dir=enc2_temp; //temp to try source data
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <analoginputloopb+0x1d8>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	b21a      	sxth	r2, r3
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <analoginputloopb+0x1c0>)
 8001a2c:	801a      	strh	r2, [r3, #0]
			if (enc2_dir>127) menu_page[1]=127; else menu_page[1]=0;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <analoginputloopb+0x1c0>)
 8001a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a34:	2b7f      	cmp	r3, #127	; 0x7f
 8001a36:	dd03      	ble.n	8001a40 <analoginputloopb+0x15c>
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <analoginputloopb+0x1e8>)
 8001a3a:	227f      	movs	r2, #127	; 0x7f
 8001a3c:	705a      	strb	r2, [r3, #1]
 8001a3e:	e002      	b.n	8001a46 <analoginputloopb+0x162>
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <analoginputloopb+0x1e8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	705a      	strb	r2, [r3, #1]
			//if (enc2_dir>255) {menu_page[1]=0;display_fill();}

					if ((enc2_temp>127) && (enc2_tempB<=127)) display_fill();
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <analoginputloopb+0x1d8>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a4c:	d905      	bls.n	8001a5a <analoginputloopb+0x176>
 8001a4e:	4b20      	ldr	r3, [pc, #128]	; (8001ad0 <analoginputloopb+0x1ec>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	2b7f      	cmp	r3, #127	; 0x7f
 8001a54:	d801      	bhi.n	8001a5a <analoginputloopb+0x176>
 8001a56:	f000 fa13 	bl	8001e80 <display_fill>
					if ((enc2_temp<=127) && (enc2_tempB>127)) display_fill();
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <analoginputloopb+0x1d8>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a60:	d805      	bhi.n	8001a6e <analoginputloopb+0x18a>
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <analoginputloopb+0x1ec>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b7f      	cmp	r3, #127	; 0x7f
 8001a68:	d901      	bls.n	8001a6e <analoginputloopb+0x18a>
 8001a6a:	f000 fa09 	bl	8001e80 <display_fill>

			enc2_tempB=enc2_temp; // to effective as counter not getting reset
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <analoginputloopb+0x1d8>)
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <analoginputloopb+0x1ec>)
 8001a74:	801a      	strh	r2, [r3, #0]


potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <analoginputloopb+0x1c4>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <analoginputloopb+0x1c8>)
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <analoginputloopb+0x1c4>)
 8001a82:	8812      	ldrh	r2, [r2, #0]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b2d9      	uxtb	r1, r3
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <analoginputloopb+0x1f0>)
 8001a8a:	5499      	strb	r1, [r3, r2]

//potValues[counterVarB]=potSource[counterVarB] & 15 ;  // reduce values for now ,use original for others



}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	200013cc 	.word	0x200013cc
 8001a98:	20000aa5 	.word	0x20000aa5
 8001a9c:	20000aa6 	.word	0x20000aa6
 8001aa0:	08007c08 	.word	0x08007c08
 8001aa4:	200013ba 	.word	0x200013ba
 8001aa8:	20000aa8 	.word	0x20000aa8
 8001aac:	200009a4 	.word	0x200009a4
 8001ab0:	200013bc 	.word	0x200013bc
 8001ab4:	200013b2 	.word	0x200013b2
 8001ab8:	40000800 	.word	0x40000800
 8001abc:	200013b6 	.word	0x200013b6
 8001ac0:	200013b4 	.word	0x200013b4
 8001ac4:	200005d8 	.word	0x200005d8
 8001ac8:	20000820 	.word	0x20000820
 8001acc:	200013d8 	.word	0x200013d8
 8001ad0:	200013b8 	.word	0x200013b8
 8001ad4:	200008a4 	.word	0x200008a4

08001ad8 <display_init>:
void display_init(void){
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);


		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd
 8001ade:	4b78      	ldr	r3, [pc, #480]	; (8001cc0 <display_init+0x1e8>)
 8001ae0:	1d3c      	adds	r4, r7, #4
 8001ae2:	461d      	mov	r5, r3
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8001af0:	4b74      	ldr	r3, [pc, #464]	; (8001cc4 <display_init+0x1ec>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f040 80de 	bne.w	8001cb6 <display_init+0x1de>

if ((enc2_dir>63) && (menu_page[2]==0))  {init=4;menu_page[2]=1;}  //restart page draw for second page , might need home pos init
 8001afa:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <display_init+0x1f0>)
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	2b3f      	cmp	r3, #63	; 0x3f
 8001b02:	dd09      	ble.n	8001b18 <display_init+0x40>
 8001b04:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <display_init+0x1f4>)
 8001b06:	789b      	ldrb	r3, [r3, #2]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <display_init+0x40>
 8001b0c:	4b70      	ldr	r3, [pc, #448]	; (8001cd0 <display_init+0x1f8>)
 8001b0e:	2204      	movs	r2, #4
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	4b6e      	ldr	r3, [pc, #440]	; (8001ccc <display_init+0x1f4>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	709a      	strb	r2, [r3, #2]
if  ((init==76) && (menu_page[2]==1)) menu_page[2]=2; //after drawing second page and finish
 8001b18:	4b6d      	ldr	r3, [pc, #436]	; (8001cd0 <display_init+0x1f8>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b4c      	cmp	r3, #76	; 0x4c
 8001b1e:	d106      	bne.n	8001b2e <display_init+0x56>
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <display_init+0x1f4>)
 8001b22:	789b      	ldrb	r3, [r3, #2]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d102      	bne.n	8001b2e <display_init+0x56>
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <display_init+0x1f4>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	709a      	strb	r2, [r3, #2]
if ((enc2_dir<63) && (menu_page[2]==2))  {init=4;menu_page[2]=0;}
 8001b2e:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <display_init+0x1f0>)
 8001b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b34:	2b3e      	cmp	r3, #62	; 0x3e
 8001b36:	dc09      	bgt.n	8001b4c <display_init+0x74>
 8001b38:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <display_init+0x1f4>)
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d105      	bne.n	8001b4c <display_init+0x74>
 8001b40:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <display_init+0x1f8>)
 8001b42:	2204      	movs	r2, #4
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <display_init+0x1f4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	709a      	strb	r2, [r3, #2]

switch(init){     //Remember every line advances +char on display
 8001b4c:	4b60      	ldr	r3, [pc, #384]	; (8001cd0 <display_init+0x1f8>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3b4d      	subs	r3, #77	; 0x4d
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d879      	bhi.n	8001c4a <display_init+0x172>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <display_init+0x84>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b7d 	.word	0x08001b7d
 8001b60:	08001bad 	.word	0x08001bad
 8001b64:	08001bb5 	.word	0x08001bb5
 8001b68:	08001bd1 	.word	0x08001bd1
 8001b6c:	08001be5 	.word	0x08001be5
 8001b70:	08001bf3 	.word	0x08001bf3
 8001b74:	08001c09 	.word	0x08001c09
 8001b78:	08001c1d 	.word	0x08001c1d

case 77: spi_hold=384+(init_b>>1);init=init+((init_b&1)*2);break; // no delay ,jump to either blink sets
 8001b7c:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <display_init+0x1fc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <display_init+0x200>)
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <display_init+0x1fc>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <display_init+0x1f8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b4a      	ldr	r3, [pc, #296]	; (8001cd0 <display_init+0x1f8>)
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e05f      	b.n	8001c6c <display_init+0x194>

case 78: spi_hold=10;break; //write one set then jump
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <display_init+0x200>)
 8001bae:	220a      	movs	r2, #10
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	e05b      	b.n	8001c6c <display_init+0x194>
case 79: spi_hold=spell[(init_b&62)+1];init=81;break;
 8001bb4:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <display_init+0x1fc>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a47      	ldr	r2, [pc, #284]	; (8001cdc <display_init+0x204>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <display_init+0x200>)
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <display_init+0x1f8>)
 8001bca:	2251      	movs	r2, #81	; 0x51
 8001bcc:	701a      	strb	r2, [r3, #0]
 8001bce:	e04d      	b.n	8001c6c <display_init+0x194>
case 80: spi_hold=spell[init_b&62];break; // or write other set then jump
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <display_init+0x1fc>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001bd8:	4a40      	ldr	r2, [pc, #256]	; (8001cdc <display_init+0x204>)
 8001bda:	5cd3      	ldrb	r3, [r2, r3]
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <display_init+0x200>)
 8001be0:	801a      	strh	r2, [r3, #0]
 8001be2:	e043      	b.n	8001c6c <display_init+0x194>
case 81: spi_hold=10;init=81;break;
 8001be4:	4b3c      	ldr	r3, [pc, #240]	; (8001cd8 <display_init+0x200>)
 8001be6:	220a      	movs	r2, #10
 8001be8:	801a      	strh	r2, [r3, #0]
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <display_init+0x1f8>)
 8001bec:	2251      	movs	r2, #81	; 0x51
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e03c      	b.n	8001c6c <display_init+0x194>


case 82: spi_hold=384+(init_b>>1);break;  // finish writes
 8001bf2:	4b38      	ldr	r3, [pc, #224]	; (8001cd4 <display_init+0x1fc>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	085b      	lsrs	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <display_init+0x200>)
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	e031      	b.n	8001c6c <display_init+0x194>
case 83: spi_hold=spell[init_b&62];break;
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <display_init+0x1fc>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001c10:	4a32      	ldr	r2, [pc, #200]	; (8001cdc <display_init+0x204>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <display_init+0x200>)
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	e027      	b.n	8001c6c <display_init+0x194>
case 84 : spi_hold=spell[(init_b&62)+1];init_b=cursor_menu[2]&63;displayBuffer ();init=76; break; //update cursor and displaybuffer
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <display_init+0x1fc>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a2d      	ldr	r2, [pc, #180]	; (8001cdc <display_init+0x204>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <display_init+0x200>)
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	4b2b      	ldr	r3, [pc, #172]	; (8001ce0 <display_init+0x208>)
 8001c32:	789b      	ldrb	r3, [r3, #2]
 8001c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <display_init+0x1fc>)
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	f000 f953 	bl	8001ee8 <displayBuffer>
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <display_init+0x1f8>)
 8001c44:	224c      	movs	r2, #76	; 0x4c
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e010      	b.n	8001c6c <display_init+0x194>
default : init_b=init-6;displayBuffer ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <display_init+0x1f8>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	3b06      	subs	r3, #6
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <display_init+0x1fc>)
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	f000 f947 	bl	8001ee8 <displayBuffer>
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <display_init+0x1fc>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <display_init+0x204>)
 8001c62:	5c9b      	ldrb	r3, [r3, r2]
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <display_init+0x200>)
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	bf00      	nop
}


if (init<6)	{HAL_Delay(30);spi_hold=disp[init] ;  init_b=cursor_menu[2]; } //delay needs to go
 8001c6c:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <display_init+0x1f8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d80f      	bhi.n	8001c94 <display_init+0x1bc>
 8001c74:	201e      	movs	r0, #30
 8001c76:	f001 fe65 	bl	8003944 <HAL_Delay>
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <display_init+0x1f8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	3328      	adds	r3, #40	; 0x28
 8001c82:	443b      	add	r3, r7
 8001c84:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <display_init+0x200>)
 8001c8a:	801a      	strh	r2, [r3, #0]
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <display_init+0x208>)
 8001c8e:	789a      	ldrb	r2, [r3, #2]
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <display_init+0x1fc>)
 8001c92:	701a      	strb	r2, [r3, #0]

init++;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <display_init+0x1f8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <display_init+0x1f8>)
 8001c9e:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <display_init+0x1ec>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	f7ff fdab 	bl	8001800 <SPI_command>
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <display_init+0x1ec>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <display_init+0x20c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]

		 }

*/

}
 8001cb6:	bf00      	nop
 8001cb8:	3728      	adds	r7, #40	; 0x28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	08007b40 	.word	0x08007b40
 8001cc4:	200013c8 	.word	0x200013c8
 8001cc8:	200013ba 	.word	0x200013ba
 8001ccc:	200013d8 	.word	0x200013d8
 8001cd0:	200013c9 	.word	0x200013c9
 8001cd4:	200013ca 	.word	0x200013ca
 8001cd8:	200013c6 	.word	0x200013c6
 8001cdc:	20000024 	.word	0x20000024
 8001ce0:	200013cc 	.word	0x200013cc
 8001ce4:	200013c2 	.word	0x200013c2

08001ce8 <display_update>:



}

void display_update(void){				//spi display updater code , all gfx , works pretty ok n doesn't need to be running always 18x 128 ,constant scanning
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

	uint8_t spi_store[5];

switch (gfx_skip) { // 1-17  one row
 8001cee:	4b5d      	ldr	r3, [pc, #372]	; (8001e64 <display_update+0x17c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d035      	beq.n	8001d62 <display_update+0x7a>
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	dc3d      	bgt.n	8001d76 <display_update+0x8e>
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <display_update+0x1c>
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d020      	beq.n	8001d44 <display_update+0x5c>
 8001d02:	e038      	b.n	8001d76 <display_update+0x8e>


case 1 : {spi_hold=((gfx_counter[0])&31)+384;gfx_counter[4]=(gfx_counter[0]>>5);  gfx_counter[0]=(gfx_counter[0]+1)&63 ;gfx_skip++;break ;}  // count up positions
 8001d04:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <display_update+0x180>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <display_update+0x184>)
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <display_update+0x180>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <display_update+0x180>)
 8001d22:	811a      	strh	r2, [r3, #8]
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <display_update+0x180>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	4b4d      	ldr	r3, [pc, #308]	; (8001e68 <display_update+0x180>)
 8001d34:	801a      	strh	r2, [r3, #0]
 8001d36:	4b4b      	ldr	r3, [pc, #300]	; (8001e64 <display_update+0x17c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b49      	ldr	r3, [pc, #292]	; (8001e64 <display_update+0x17c>)
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e028      	b.n	8001d96 <display_update+0xae>
case 2  : {	spi_hold=384+(gfx_counter[4]*8);gfx_skip++;break ;  }
 8001d44:	4b48      	ldr	r3, [pc, #288]	; (8001e68 <display_update+0x180>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	3330      	adds	r3, #48	; 0x30
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <display_update+0x184>)
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <display_update+0x17c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <display_update+0x17c>)
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e019      	b.n	8001d96 <display_update+0xae>
case 3   : gfx_counter[3]=0; gfx_skip++;break;
 8001d62:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <display_update+0x180>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	80da      	strh	r2, [r3, #6]
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <display_update+0x17c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <display_update+0x17c>)
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e00f      	b.n	8001d96 <display_update+0xae>
//case 18 : gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;break;  //not ideal
default :  gfx_counter[3]=(gfx_counter[3]+1)&15;gfx_skip++;break;
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <display_update+0x180>)
 8001d78:	88db      	ldrh	r3, [r3, #6]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <display_update+0x180>)
 8001d86:	80da      	strh	r2, [r3, #6]
 8001d88:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <display_update+0x17c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <display_update+0x17c>)
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	bf00      	nop

}


if ((gfx_skip==2) || (gfx_skip==3) || (gfx_skip==1)) spi_hold=spi_hold; else spi_hold=gfx_ram[gfx_counter[2]] [gfx_counter[3]] ; // write command or data
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <display_update+0x17c>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d007      	beq.n	8001dae <display_update+0xc6>
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <display_update+0x17c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d003      	beq.n	8001dae <display_update+0xc6>
 8001da6:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <display_update+0x17c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d104      	bne.n	8001db8 <display_update+0xd0>
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <display_update+0x184>)
 8001db0:	881a      	ldrh	r2, [r3, #0]
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <display_update+0x184>)
 8001db4:	801a      	strh	r2, [r3, #0]
 8001db6:	e00d      	b.n	8001dd4 <display_update+0xec>
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <display_update+0x180>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	; (8001e68 <display_update+0x180>)
 8001dc0:	88db      	ldrh	r3, [r3, #6]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <display_update+0x188>)
 8001dc6:	0103      	lsls	r3, r0, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <display_update+0x184>)
 8001dd2:	801a      	strh	r2, [r3, #0]

if (gfx_skip==19)  {gfx_counter[2]=(gfx_counter[2]+1) &63; gfx_counter[3]=0;gfx_skip=1;}   // fixed last doubled char
 8001dd4:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <display_update+0x17c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b13      	cmp	r3, #19
 8001dda:	d10e      	bne.n	8001dfa <display_update+0x112>
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <display_update+0x180>)
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	3301      	adds	r3, #1
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <display_update+0x180>)
 8001dec:	809a      	strh	r2, [r3, #4]
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <display_update+0x180>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	80da      	strh	r2, [r3, #6]
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <display_update+0x17c>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]

		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <display_update+0x184>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <display_update+0x126>
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <display_update+0x18c>)
 8001e08:	22f8      	movs	r2, #248	; 0xf8
 8001e0a:	701a      	strb	r2, [r3, #0]
 8001e0c:	e002      	b.n	8001e14 <display_update+0x12c>
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <display_update+0x18c>)
 8001e10:	22fa      	movs	r2, #250	; 0xfa
 8001e12:	701a      	strb	r2, [r3, #0]

		spi_store[0]=spi_byte&255;
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <display_update+0x18c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	703b      	strb	r3, [r7, #0]
		spi_store[1]=((spi_hold>>4)<<4)&255;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <display_update+0x184>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	707b      	strb	r3, [r7, #1]
		spi_store[2]=((spi_hold&15)<<4)&255;
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <display_update+0x184>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	70bb      	strb	r3, [r7, #2]

	// send this to spi for now
			HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3, 100);  // working good ,blocking
 8001e32:	4639      	mov	r1, r7
 8001e34:	2364      	movs	r3, #100	; 0x64
 8001e36:	2203      	movs	r2, #3
 8001e38:	480f      	ldr	r0, [pc, #60]	; (8001e78 <display_update+0x190>)
 8001e3a:	f004 fcb1 	bl	80067a0 <HAL_SPI_Transmit>


disp_end=gfx_skip+gfx_counter[2]+gfx_counter[3];			// vsynch for displaybuffer
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <display_update+0x180>)
 8001e40:	889b      	ldrh	r3, [r3, #4]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <display_update+0x17c>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <display_update+0x180>)
 8001e4e:	88db      	ldrh	r3, [r3, #6]
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <display_update+0x194>)
 8001e58:	701a      	strb	r2, [r3, #0]


}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200005d4 	.word	0x200005d4
 8001e68:	20001cb4 	.word	0x20001cb4
 8001e6c:	200013c6 	.word	0x200013c6
 8001e70:	20001870 	.word	0x20001870
 8001e74:	200013c4 	.word	0x200013c4
 8001e78:	20000708 	.word	0x20000708
 8001e7c:	20001cc2 	.word	0x20001cc2

08001e80 <display_fill>:
void display_fill(void)  {     // full update of gfx memory
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
loop_counter3=1;
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <display_fill+0x58>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001e8a:	4b14      	ldr	r3, [pc, #80]	; (8001edc <display_fill+0x5c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	801a      	strh	r2, [r3, #0]
 8001e90:	e013      	b.n	8001eba <display_fill+0x3a>

enc2_dir=(n>>4)+menu_page[1];
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <display_fill+0x5c>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <display_fill+0x60>)
 8001e9c:	785b      	ldrb	r3, [r3, #1]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <display_fill+0x64>)
 8001ea8:	801a      	strh	r2, [r3, #0]

displayBuffer();
 8001eaa:	f000 f81d 	bl	8001ee8 <displayBuffer>
for (n=0;n<2048;n++)	{ //fills up gfx ram or not
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <display_fill+0x5c>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <display_fill+0x5c>)
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <display_fill+0x5c>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ec2:	d3e6      	bcc.n	8001e92 <display_fill+0x12>
}
enc2_dir=menu_page[1]*2;  // end clean
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <display_fill+0x60>)
 8001ec6:	785b      	ldrb	r3, [r3, #1]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	4b04      	ldr	r3, [pc, #16]	; (8001ee4 <display_fill+0x64>)
 8001ed2:	801a      	strh	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20001cc3 	.word	0x20001cc3
 8001edc:	20000ade 	.word	0x20000ade
 8001ee0:	200013d8 	.word	0x200013d8
 8001ee4:	200013ba 	.word	0x200013ba

08001ee8 <displayBuffer>:

	// if(store_c>239) {lcd_feedback(); }

}
*/
void displayBuffer (void){        //  in a constant state of flux
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0

	if (disp_stepper==0) init_b=enc2_dir; else init_b=111+disp_stepper;  // fetch values for last line or cursor
 8001eee:	4b85      	ldr	r3, [pc, #532]	; (8002104 <displayBuffer+0x21c>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <displayBuffer+0x1c>
 8001ef6:	4b84      	ldr	r3, [pc, #528]	; (8002108 <displayBuffer+0x220>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b83      	ldr	r3, [pc, #524]	; (800210c <displayBuffer+0x224>)
 8001f00:	701a      	strb	r2, [r3, #0]
 8001f02:	e005      	b.n	8001f10 <displayBuffer+0x28>
 8001f04:	4b7f      	ldr	r3, [pc, #508]	; (8002104 <displayBuffer+0x21c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	336f      	adds	r3, #111	; 0x6f
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	4b7f      	ldr	r3, [pc, #508]	; (800210c <displayBuffer+0x224>)
 8001f0e:	701a      	strb	r2, [r3, #0]

	uint8_t d_count;
uint8_t init_x=((init_b>>4)<<3);    // normal x8 , try other 64 x16
 8001f10:	4b7e      	ldr	r3, [pc, #504]	; (800210c <displayBuffer+0x224>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	71bb      	strb	r3, [r7, #6]
uint8_t init_x2=init_x&63;
 8001f1c:	79bb      	ldrb	r3, [r7, #6]
 8001f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f22:	717b      	strb	r3, [r7, #5]
uint8_t init_y=init_b&15;
 8001f24:	4b79      	ldr	r3, [pc, #484]	; (800210c <displayBuffer+0x224>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	713b      	strb	r3, [r7, #4]
 // use this to set feedback pointer for now
// just to point the lfo number



if (disp_stepper==0) store_c= disp_lut [init_b>>4]  [init_y] ;  else if (disp_stepper<9)
 8001f2e:	4b75      	ldr	r3, [pc, #468]	; (8002104 <displayBuffer+0x21c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10d      	bne.n	8001f52 <displayBuffer+0x6a>
 8001f36:	4b75      	ldr	r3, [pc, #468]	; (800210c <displayBuffer+0x224>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	793b      	ldrb	r3, [r7, #4]
 8001f42:	4973      	ldr	r1, [pc, #460]	; (8002110 <displayBuffer+0x228>)
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001f4c:	4b71      	ldr	r3, [pc, #452]	; (8002114 <displayBuffer+0x22c>)
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	e023      	b.n	8001f9a <displayBuffer+0xb2>
 8001f52:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <displayBuffer+0x21c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d817      	bhi.n	8001f8a <displayBuffer+0xa2>

{	feedback_line[disp_stepper]=menuList[disp_stepper+feedback_pointer];  // feedback data
 8001f5a:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <displayBuffer+0x21c>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b6d      	ldr	r3, [pc, #436]	; (8002118 <displayBuffer+0x230>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	4a6d      	ldr	r2, [pc, #436]	; (800211c <displayBuffer+0x234>)
 8001f68:	5cd1      	ldrb	r1, [r2, r3]
 8001f6a:	4b66      	ldr	r3, [pc, #408]	; (8002104 <displayBuffer+0x21c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	b289      	uxth	r1, r1
 8001f72:	4b6b      	ldr	r3, [pc, #428]	; (8002120 <displayBuffer+0x238>)
 8001f74:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	store_c=feedback_line[disp_stepper];//gets potvalues pointer from menus or feedback line
 8001f78:	4b62      	ldr	r3, [pc, #392]	; (8002104 <displayBuffer+0x21c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b68      	ldr	r3, [pc, #416]	; (8002120 <displayBuffer+0x238>)
 8001f80:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f84:	4b63      	ldr	r3, [pc, #396]	; (8002114 <displayBuffer+0x22c>)
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	e007      	b.n	8001f9a <displayBuffer+0xb2>
}
else store_c=feedback_line[disp_stepper];
 8001f8a:	4b5e      	ldr	r3, [pc, #376]	; (8002104 <displayBuffer+0x21c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b63      	ldr	r3, [pc, #396]	; (8002120 <displayBuffer+0x238>)
 8001f92:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <displayBuffer+0x22c>)
 8001f98:	801a      	strh	r2, [r3, #0]


if (disp_stepper==0) {lcd_out3=potSource[store_c-128]; feedback_pointer=(enc2_dir>>4)<<3; feedback_line[10]=((enc2_dir&15)>>1)+48; }    // feedback related
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <displayBuffer+0x21c>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11e      	bne.n	8001fe0 <displayBuffer+0xf8>
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <displayBuffer+0x22c>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	3b80      	subs	r3, #128	; 0x80
 8001fa8:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <displayBuffer+0x23c>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b5e      	ldr	r3, [pc, #376]	; (8002128 <displayBuffer+0x240>)
 8001fb0:	801a      	strh	r2, [r3, #0]
 8001fb2:	4b55      	ldr	r3, [pc, #340]	; (8002108 <displayBuffer+0x220>)
 8001fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb8:	111b      	asrs	r3, r3, #4
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b55      	ldr	r3, [pc, #340]	; (8002118 <displayBuffer+0x230>)
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	4b50      	ldr	r3, [pc, #320]	; (8002108 <displayBuffer+0x220>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	105b      	asrs	r3, r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3330      	adds	r3, #48	; 0x30
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b50      	ldr	r3, [pc, #320]	; (8002120 <displayBuffer+0x238>)
 8001fde:	829a      	strh	r2, [r3, #20]





	 if (store_c==64) store_c=47;
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <displayBuffer+0x22c>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	2b40      	cmp	r3, #64	; 0x40
 8001fe6:	d102      	bne.n	8001fee <displayBuffer+0x106>
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	; (8002114 <displayBuffer+0x22c>)
 8001fea:	222f      	movs	r2, #47	; 0x2f
 8001fec:	801a      	strh	r2, [r3, #0]
	if ((store_c>127)&& (store_c<255))  {store_c= potValues[store_c&127]+48;}		// sets data or stored
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <displayBuffer+0x22c>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff4:	d90e      	bls.n	8002014 <displayBuffer+0x12c>
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <displayBuffer+0x22c>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	2bfe      	cmp	r3, #254	; 0xfe
 8001ffc:	d80a      	bhi.n	8002014 <displayBuffer+0x12c>
 8001ffe:	4b45      	ldr	r3, [pc, #276]	; (8002114 <displayBuffer+0x22c>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002006:	4a49      	ldr	r2, [pc, #292]	; (800212c <displayBuffer+0x244>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	b29b      	uxth	r3, r3
 800200c:	3330      	adds	r3, #48	; 0x30
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <displayBuffer+0x22c>)
 8002012:	801a      	strh	r2, [r3, #0]
	if (store_c>254){store_c= potValues[store_c-128]+48;}
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <displayBuffer+0x22c>)
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	2bfe      	cmp	r3, #254	; 0xfe
 800201a:	d909      	bls.n	8002030 <displayBuffer+0x148>
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <displayBuffer+0x22c>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	3b80      	subs	r3, #128	; 0x80
 8002022:	4a42      	ldr	r2, [pc, #264]	; (800212c <displayBuffer+0x244>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	b29b      	uxth	r3, r3
 8002028:	3330      	adds	r3, #48	; 0x30
 800202a:	b29a      	uxth	r2, r3
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <displayBuffer+0x22c>)
 800202e:	801a      	strh	r2, [r3, #0]

store_c=store_c-47; store_c = store_c &127;	  // spell no longer ?, store_c changes
 8002030:	4b38      	ldr	r3, [pc, #224]	; (8002114 <displayBuffer+0x22c>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	3b2f      	subs	r3, #47	; 0x2f
 8002036:	b29a      	uxth	r2, r3
 8002038:	4b36      	ldr	r3, [pc, #216]	; (8002114 <displayBuffer+0x22c>)
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <displayBuffer+0x22c>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b33      	ldr	r3, [pc, #204]	; (8002114 <displayBuffer+0x22c>)
 8002048:	801a      	strh	r2, [r3, #0]

store_x=(store_c*8);  // i line characters , might shrink it nad use extr for other  visuals
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <displayBuffer+0x22c>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	807b      	strh	r3, [r7, #2]


if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <displayBuffer+0x248>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11f      	bne.n	800209a <displayBuffer+0x1b2>
 800205a:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <displayBuffer+0x21c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11b      	bne.n	800209a <displayBuffer+0x1b2>
	for (d_count=0;d_count<7;d_count++){
 8002062:	2300      	movs	r3, #0
 8002064:	71fb      	strb	r3, [r7, #7]
 8002066:	e014      	b.n	8002092 <displayBuffer+0x1aa>
						gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]^127; //write character to ram ,should be elsewhere
 8002068:	79fa      	ldrb	r2, [r7, #7]
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	4413      	add	r3, r2
 800206e:	4a31      	ldr	r2, [pc, #196]	; (8002134 <displayBuffer+0x24c>)
 8002070:	5cd1      	ldrb	r1, [r2, r3]
 8002072:	79fa      	ldrb	r2, [r7, #7]
 8002074:	797b      	ldrb	r3, [r7, #5]
 8002076:	441a      	add	r2, r3
 8002078:	793b      	ldrb	r3, [r7, #4]
 800207a:	f081 017f 	eor.w	r1, r1, #127	; 0x7f
 800207e:	b2c8      	uxtb	r0, r1
 8002080:	492d      	ldr	r1, [pc, #180]	; (8002138 <displayBuffer+0x250>)
 8002082:	0112      	lsls	r2, r2, #4
 8002084:	440a      	add	r2, r1
 8002086:	4413      	add	r3, r2
 8002088:	4602      	mov	r2, r0
 800208a:	701a      	strb	r2, [r3, #0]
	for (d_count=0;d_count<7;d_count++){
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	3301      	adds	r3, #1
 8002090:	71fb      	strb	r3, [r7, #7]
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b06      	cmp	r3, #6
 8002096:	d9e7      	bls.n	8002068 <displayBuffer+0x180>
if (( !loop_counter3) && (disp_stepper==0))     // blinker for cursor character only
 8002098:	e017      	b.n	80020ca <displayBuffer+0x1e2>
	}
else for (d_count=0;d_count<7;d_count++){
 800209a:	2300      	movs	r3, #0
 800209c:	71fb      	strb	r3, [r7, #7]
 800209e:	e011      	b.n	80020c4 <displayBuffer+0x1dc>
	gfx_ram[d_count+init_x2] [init_y] = gfx_char[d_count+store_x]; //write character to ram ,should be elsewhere
 80020a0:	79fa      	ldrb	r2, [r7, #7]
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	18d1      	adds	r1, r2, r3
 80020a6:	79fa      	ldrb	r2, [r7, #7]
 80020a8:	797b      	ldrb	r3, [r7, #5]
 80020aa:	441a      	add	r2, r3
 80020ac:	793b      	ldrb	r3, [r7, #4]
 80020ae:	4821      	ldr	r0, [pc, #132]	; (8002134 <displayBuffer+0x24c>)
 80020b0:	5c40      	ldrb	r0, [r0, r1]
 80020b2:	4921      	ldr	r1, [pc, #132]	; (8002138 <displayBuffer+0x250>)
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	440a      	add	r2, r1
 80020b8:	4413      	add	r3, r2
 80020ba:	4602      	mov	r2, r0
 80020bc:	701a      	strb	r2, [r3, #0]
else for (d_count=0;d_count<7;d_count++){
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	3301      	adds	r3, #1
 80020c2:	71fb      	strb	r3, [r7, #7]
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d9ea      	bls.n	80020a0 <displayBuffer+0x1b8>
}


gfx_ram[7+init_x2] [init_y] = 0; // last line is blank between rows
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	1dda      	adds	r2, r3, #7
 80020ce:	793b      	ldrb	r3, [r7, #4]
 80020d0:	4919      	ldr	r1, [pc, #100]	; (8002138 <displayBuffer+0x250>)
 80020d2:	0112      	lsls	r2, r2, #4
 80020d4:	440a      	add	r2, r1
 80020d6:	4413      	add	r3, r2
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <displayBuffer+0x21c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b0f      	cmp	r3, #15
 80020e2:	d103      	bne.n	80020ec <displayBuffer+0x204>
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <displayBuffer+0x21c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

}
 80020ea:	e005      	b.n	80020f8 <displayBuffer+0x210>
if (disp_stepper==15) disp_stepper=0; else disp_stepper++;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <displayBuffer+0x21c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <displayBuffer+0x21c>)
 80020f6:	701a      	strb	r2, [r3, #0]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	200005e1 	.word	0x200005e1
 8002108:	200013ba 	.word	0x200013ba
 800210c:	200013ca 	.word	0x200013ca
 8002110:	08007c08 	.word	0x08007c08
 8002114:	20000adc 	.word	0x20000adc
 8002118:	200008a1 	.word	0x200008a1
 800211c:	08007e48 	.word	0x08007e48
 8002120:	20000000 	.word	0x20000000
 8002124:	200009a4 	.word	0x200009a4
 8002128:	20001cc0 	.word	0x20001cc0
 800212c:	200008a4 	.word	0x200008a4
 8002130:	20001cc3 	.word	0x20001cc3
 8002134:	200001d4 	.word	0x200001d4
 8002138:	20001870 	.word	0x20001870
 800213c:	00000000 	.word	0x00000000

08002140 <sampling>:
spell[148+n]=spell[108+n];
}
}


void sampling(void){						// 18 ms of data
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
uint8_t mask_i;
uint8_t mask_k;
uint8_t adsr_mult[5];
//adc_read();
//uint16_t isr_tempo=isrMask; // get tempo value
sample_pointB=sample_pointD;
 800214a:	4b93      	ldr	r3, [pc, #588]	; (8002398 <sampling+0x258>)
 800214c:	881a      	ldrh	r2, [r3, #0]
 800214e:	4b93      	ldr	r3, [pc, #588]	; (800239c <sampling+0x25c>)
 8002150:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002152:	2300      	movs	r3, #0
 8002154:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002158:	f102 0214 	add.w	r2, r2, #20
 800215c:	8013      	strh	r3, [r2, #0]
static unsigned short tempo_end=0;   // last count before note start
uint16_t i_total;
uint16_t tempo_mod=tempo_lut[potSource[109]];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800215e:	4b90      	ldr	r3, [pc, #576]	; (80023a0 <sampling+0x260>)
 8002160:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8002164:	461a      	mov	r2, r3
 8002166:	4b8f      	ldr	r3, [pc, #572]	; (80023a4 <sampling+0x264>)
 8002168:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800216c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002170:	f102 020a 	add.w	r2, r2, #10
 8002174:	8013      	strh	r3, [r2, #0]

uint8_t l;			// 35.002khz(0.02857ms) sample, 1 sample is temp count (16x=0.00045712) , *16=1 note ,at 300 (437bpm),(1/(0.00002857*tempo count*16)=1beat in s
float freq_temp;	// (1/(bpm/60)) /0.00045712=tempo count ie 1093.8 for 120bpm
float freq2_temp;
float freq_adder;
float tempo_sync=16384/((tempo_mod*4)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 8002176:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800217a:	f103 030a 	add.w	r3, r3, #10
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	da00      	bge.n	8002186 <sampling+0x46>
 8002184:	337f      	adds	r3, #127	; 0x7f
 8002186:	11db      	asrs	r3, r3, #7
 8002188:	461a      	mov	r2, r3
 800218a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800218e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800219e:	f103 0304 	add.w	r3, r3, #4
 80021a2:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  //
 80021a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021aa:	f103 0304 	add.w	r3, r3, #4
 80021ae:	ed93 7a00 	vldr	s14, [r3]
 80021b2:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80023a8 <sampling+0x268>
 80021b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80021be:	f103 0304 	add.w	r3, r3, #4
 80021c2:	edc3 7a00 	vstr	s15, [r3]

//lcd_out3=(lfo_accu[0][0]-8195) *0.01; // still goes to 15

//lcd_out3=adc_values[2]; // 3 digit read out , works ok
//lcd_out3=lcd_out3+180;
potSource[150]=(lcd_out3/100)*16;
 80021c6:	4b79      	ldr	r3, [pc, #484]	; (80023ac <sampling+0x26c>)
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	4a79      	ldr	r2, [pc, #484]	; (80023b0 <sampling+0x270>)
 80021cc:	fba2 2303 	umull	r2, r3, r2, r3
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b71      	ldr	r3, [pc, #452]	; (80023a0 <sampling+0x260>)
 80021dc:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
potSource[151]=((lcd_out3 %100)/10)*16;		 // 0-160 to 0-10
 80021e0:	4b72      	ldr	r3, [pc, #456]	; (80023ac <sampling+0x26c>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	4a72      	ldr	r2, [pc, #456]	; (80023b0 <sampling+0x270>)
 80021e6:	fba2 1203 	umull	r1, r2, r2, r3
 80021ea:	0952      	lsrs	r2, r2, #5
 80021ec:	2164      	movs	r1, #100	; 0x64
 80021ee:	fb01 f202 	mul.w	r2, r1, r2
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4a6f      	ldr	r2, [pc, #444]	; (80023b4 <sampling+0x274>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	b29b      	uxth	r3, r3
 8002200:	b2db      	uxtb	r3, r3
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <sampling+0x260>)
 8002208:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
potSource[152]=(lcd_out3%10)*16;
 800220c:	4b67      	ldr	r3, [pc, #412]	; (80023ac <sampling+0x26c>)
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	4b68      	ldr	r3, [pc, #416]	; (80023b4 <sampling+0x274>)
 8002212:	fba3 1302 	umull	r1, r3, r3, r2
 8002216:	08d9      	lsrs	r1, r3, #3
 8002218:	460b      	mov	r3, r1
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	b29b      	uxth	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <sampling+0x260>)
 800222c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98


unsigned short  sine_zero;  // zero cross
note_holdA=0;
 8002230:	4b61      	ldr	r3, [pc, #388]	; (80023b8 <sampling+0x278>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]

uint8_t note_patterns[8]={1,4,2,2,1,4,2,1,4,2,1,4,4};   // creating beats
 8002236:	4a61      	ldr	r2, [pc, #388]	; (80023bc <sampling+0x27c>)
 8002238:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800223c:	f103 031c 	add.w	r3, r3, #28
 8002240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002244:	e883 0003 	stmia.w	r3, {r0, r1}
uint8_t note_lenght=5-note_patterns[seq_pos&7] ; // note length modifier , higher faster
 8002248:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <sampling+0x280>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8002254:	f103 0318 	add.w	r3, r3, #24
 8002258:	443b      	add	r3, r7
 800225a:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800225e:	f1c3 0305 	rsb	r3, r3, #5
 8002262:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002266:	f102 0203 	add.w	r2, r2, #3
 800226a:	7013      	strb	r3, [r2, #0]
//tempo_mod=tempo_mod-63+(lfo_out[1]>>7);
//if (tempo_mod<450) tempo_mod=((tempo_mod-200)>>1) +200; // more res lower
uint8_t note_plain;
int8_t ring_mod=0;
 800226c:	2300      	movs	r3, #0
 800226e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002272:	f102 0202 	add.w	r2, r2, #2
 8002276:	7013      	strb	r3, [r2, #0]
//sample_Accu2=0;
//printf ("crap");
// some good phasin and delays here
uint8_t cross_fade[2];
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002278:	4b52      	ldr	r3, [pc, #328]	; (80023c4 <sampling+0x284>)
 800227a:	f507 5480 	add.w	r4, r7, #4096	; 0x1000
 800227e:	f104 0404 	add.w	r4, r4, #4
 8002282:	461d      	mov	r5, r3
 8002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	7023      	strb	r3, [r4, #0]
adc_values[2]=adc_values[1];   // this temp until pot 3 is fixed
 800228c:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <sampling+0x288>)
 800228e:	785a      	ldrb	r2, [r3, #1]
 8002290:	4b4d      	ldr	r3, [pc, #308]	; (80023c8 <sampling+0x288>)
 8002292:	709a      	strb	r2, [r3, #2]
if(adc_values[2]&16)	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader
 8002294:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <sampling+0x288>)
 8002296:	789b      	ldrb	r3, [r3, #2]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <sampling+0x194>
 80022a0:	4b49      	ldr	r3, [pc, #292]	; (80023c8 <sampling+0x288>)
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	f003 030f 	and.w	r3, r3, #15
 80022a8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80022ac:	f103 0318 	add.w	r3, r3, #24
 80022b0:	443b      	add	r3, r7
 80022b2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80022b6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022c0:	f102 0219 	add.w	r2, r2, #25
 80022c4:	7013      	strb	r3, [r2, #0]
 80022c6:	237f      	movs	r3, #127	; 0x7f
 80022c8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022cc:	f102 021a 	add.w	r2, r2, #26
 80022d0:	7013      	strb	r3, [r2, #0]
 80022d2:	e015      	b.n	8002300 <sampling+0x1c0>
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <sampling+0x288>)
 80022d6:	789b      	ldrb	r3, [r3, #2]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80022e0:	f103 0318 	add.w	r3, r3, #24
 80022e4:	443b      	add	r3, r7
 80022e6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80022ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022ee:	f102 021a 	add.w	r2, r2, #26
 80022f2:	7013      	strb	r3, [r2, #0]
 80022f4:	237f      	movs	r3, #127	; 0x7f
 80022f6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80022fa:	f102 0219 	add.w	r2, r2, #25
 80022fe:	7013      	strb	r3, [r2, #0]
// doing lfo calc here as it is slow only for now


///////////////////////////////////////////////////////////////

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <sampling+0x28c>)
 8002302:	2200      	movs	r2, #0
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	e361      	b.n	80029cc <sampling+0x88c>

	i_total=i+sample_pointB;
 8002308:	4b30      	ldr	r3, [pc, #192]	; (80023cc <sampling+0x28c>)
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <sampling+0x25c>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	4413      	add	r3, r2
 8002312:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002316:	f102 021a 	add.w	r2, r2, #26
 800231a:	8013      	strh	r3, [r2, #0]
i_frac=i>>6;
 800231c:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <sampling+0x28c>)
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	b29b      	uxth	r3, r3
 8002324:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002328:	f102 0219 	add.w	r2, r2, #25
 800232c:	7013      	strb	r3, [r2, #0]
	note_plain=potValues[seq_pos & 7 ];
 800232e:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <sampling+0x280>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <sampling+0x290>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800233e:	f102 0215 	add.w	r2, r2, #21
 8002342:	7013      	strb	r3, [r2, #0]
potValues[i&255]=potSource[i&255]>>4; //just to update values 
 8002344:	4b21      	ldr	r3, [pc, #132]	; (80023cc <sampling+0x28c>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <sampling+0x260>)
 800234c:	5cd2      	ldrb	r2, [r2, r3]
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <sampling+0x28c>)
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	0912      	lsrs	r2, r2, #4
 8002356:	b2d1      	uxtb	r1, r2
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <sampling+0x290>)
 800235a:	54d1      	strb	r1, [r2, r3]
	if (tempo_count>=tempo_mod) { next_isr=(next_isr+note_lenght) & 4095;tempo_count=0;adsr();  }  else {tempo_count++; }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <sampling+0x294>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002364:	f102 020a 	add.w	r2, r2, #10
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d836      	bhi.n	80023dc <sampling+0x29c>
 800236e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002372:	f103 0303 	add.w	r3, r3, #3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	b29a      	uxth	r2, r3
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <sampling+0x298>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <sampling+0x298>)
 800238a:	801a      	strh	r2, [r3, #0]
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <sampling+0x294>)
 800238e:	2200      	movs	r2, #0
 8002390:	801a      	strh	r2, [r3, #0]
 8002392:	f000 fe55 	bl	8003040 <adsr>
 8002396:	e027      	b.n	80023e8 <sampling+0x2a8>
 8002398:	2000130a 	.word	0x2000130a
 800239c:	20000afe 	.word	0x20000afe
 80023a0:	200009a4 	.word	0x200009a4
 80023a4:	2000172c 	.word	0x2000172c
 80023a8:	42a00000 	.word	0x42a00000
 80023ac:	20001cc0 	.word	0x20001cc0
 80023b0:	51eb851f 	.word	0x51eb851f
 80023b4:	cccccccd 	.word	0xcccccccd
 80023b8:	20001377 	.word	0x20001377
 80023bc:	08007b64 	.word	0x08007b64
 80023c0:	20000ad8 	.word	0x20000ad8
 80023c4:	08007b6c 	.word	0x08007b6c
 80023c8:	200001cc 	.word	0x200001cc
 80023cc:	20000b00 	.word	0x20000b00
 80023d0:	200008a4 	.word	0x200008a4
 80023d4:	200013be 	.word	0x200013be
 80023d8:	2000136a 	.word	0x2000136a
 80023dc:	4b83      	ldr	r3, [pc, #524]	; (80025ec <sampling+0x4ac>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b81      	ldr	r3, [pc, #516]	; (80025ec <sampling+0x4ac>)
 80023e6:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400 
	tempo_start=0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80023ee:	f102 0214 	add.w	r2, r2, #20
 80023f2:	8013      	strh	r3, [r2, #0]
	if ((next_isr>>4) != (seq_pos)) { 					// next note step 140ms
 80023f4:	4b7e      	ldr	r3, [pc, #504]	; (80025f0 <sampling+0x4b0>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <sampling+0x4b4>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	429a      	cmp	r2, r3
 8002404:	d00c      	beq.n	8002420 <sampling+0x2e0>
		seq_pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002406:	4b7a      	ldr	r3, [pc, #488]	; (80025f0 <sampling+0x4b0>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	b29b      	uxth	r3, r3
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b78      	ldr	r3, [pc, #480]	; (80025f4 <sampling+0x4b4>)
 8002412:	701a      	strb	r2, [r3, #0]
		tempo_start=1;
 8002414:	2301      	movs	r3, #1
 8002416:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800241a:	f102 0214 	add.w	r2, r2, #20
 800241e:	8013      	strh	r3, [r2, #0]

}


	if(tempo_start  )    // Calculates only on note change, gotta change seq_pos somehow
 8002420:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002424:	f103 0314 	add.w	r3, r3, #20
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8139 	beq.w	80026a2 <sampling+0x562>
	{
	//printf("\n");//	ITM_SendChar( 65 );   //  Send ASCII code 65 = ’A’
	//printf("%d" ,note_channel[10]);


		potValues[32]=adc_values[0]>>1; //assigned pots to start of loopers 0-16,works
 8002430:	4b71      	ldr	r3, [pc, #452]	; (80025f8 <sampling+0x4b8>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	085b      	lsrs	r3, r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b70      	ldr	r3, [pc, #448]	; (80025fc <sampling+0x4bc>)
 800243a:	f883 2020 	strb.w	r2, [r3, #32]
		potValues[33]=adc_values[1]>>1;
 800243e:	4b6e      	ldr	r3, [pc, #440]	; (80025f8 <sampling+0x4b8>)
 8002440:	785b      	ldrb	r3, [r3, #1]
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <sampling+0x4bc>)
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		seq_loop[2]=((potValues[32]+(seq_pos&7))&15); // calc  8 note loop positions sets looping point in sequence
 800244c:	4b6b      	ldr	r3, [pc, #428]	; (80025fc <sampling+0x4bc>)
 800244e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002452:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <sampling+0x4b4>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4413      	add	r3, r2
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b66      	ldr	r3, [pc, #408]	; (8002600 <sampling+0x4c0>)
 8002468:	709a      	strb	r2, [r3, #2]
		
		//seq_loop[3]=(potValues[33]+(( seq_pos&31 ) >>2)) & 15;  // quater speed
			seq_loop[3]=((potValues[33]+(seq_pos&15))&15); //sets looping point in sequence this is full 16 note
 800246a:	4b64      	ldr	r3, [pc, #400]	; (80025fc <sampling+0x4bc>)
 800246c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8002470:	4b60      	ldr	r3, [pc, #384]	; (80025f4 <sampling+0x4b4>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4413      	add	r3, r2
 8002476:	b2db      	uxtb	r3, r3
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	b2da      	uxtb	r2, r3
 800247e:	4b60      	ldr	r3, [pc, #384]	; (8002600 <sampling+0x4c0>)
 8002480:	70da      	strb	r2, [r3, #3]
		
			seq_loop[4]=((potValues[32]+(seq_pos&7))&15);
 8002482:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <sampling+0x4bc>)
 8002484:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <sampling+0x4b4>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	b2db      	uxtb	r3, r3
 8002492:	4413      	add	r3, r2
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b58      	ldr	r3, [pc, #352]	; (8002600 <sampling+0x4c0>)
 800249e:	711a      	strb	r2, [r3, #4]
			
		//seq_loop[4]=((potValues[32]+((seq_pos&15)>>1))&15); // half speed

		note_channel[2]=potValues[80+seq_loop[2]]+potValues[72];  //loop 8 notes from pos and x times
 80024a0:	4b57      	ldr	r3, [pc, #348]	; (8002600 <sampling+0x4c0>)
 80024a2:	789b      	ldrb	r3, [r3, #2]
 80024a4:	3350      	adds	r3, #80	; 0x50
 80024a6:	4a55      	ldr	r2, [pc, #340]	; (80025fc <sampling+0x4bc>)
 80024a8:	5cd3      	ldrb	r3, [r2, r3]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b53      	ldr	r3, [pc, #332]	; (80025fc <sampling+0x4bc>)
 80024ae:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <sampling+0x4c4>)
 80024ba:	809a      	strh	r2, [r3, #4]
		note_channel[3]=potValues[seq_loop[3]];  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80024bc:	4b50      	ldr	r3, [pc, #320]	; (8002600 <sampling+0x4c0>)
 80024be:	78db      	ldrb	r3, [r3, #3]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b4e      	ldr	r3, [pc, #312]	; (80025fc <sampling+0x4bc>)
 80024c4:	5c9b      	ldrb	r3, [r3, r2]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <sampling+0x4c4>)
 80024ca:	80da      	strh	r2, [r3, #6]
	if (note_channel[3]) note_channel[3]=note_channel[3]+potValues[73]; // stay at zero for off
 80024cc:	4b4d      	ldr	r3, [pc, #308]	; (8002604 <sampling+0x4c4>)
 80024ce:	88db      	ldrh	r3, [r3, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d009      	beq.n	80024e8 <sampling+0x3a8>
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <sampling+0x4c4>)
 80024d6:	88da      	ldrh	r2, [r3, #6]
 80024d8:	4b48      	ldr	r3, [pc, #288]	; (80025fc <sampling+0x4bc>)
 80024da:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b47      	ldr	r3, [pc, #284]	; (8002604 <sampling+0x4c4>)
 80024e6:	80da      	strh	r2, [r3, #6]
	//note_channel[3]=(note_channel[3]-4)+(lfo_out[2]>>11);
	
	if (((seq_pos&7)==0) && (adsr_toggle[6]==2))		{adsr_retrigger[6]=1; } else adsr_retrigger[6]=0; // delete
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <sampling+0x4b4>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <sampling+0x3c4>
 80024f4:	4b44      	ldr	r3, [pc, #272]	; (8002608 <sampling+0x4c8>)
 80024f6:	799b      	ldrb	r3, [r3, #6]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d103      	bne.n	8002504 <sampling+0x3c4>
 80024fc:	4b43      	ldr	r3, [pc, #268]	; (800260c <sampling+0x4cc>)
 80024fe:	2201      	movs	r2, #1
 8002500:	819a      	strh	r2, [r3, #12]
 8002502:	e002      	b.n	800250a <sampling+0x3ca>
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <sampling+0x4cc>)
 8002506:	2200      	movs	r2, #0
 8002508:	819a      	strh	r2, [r3, #12]


	note_channel[5]=potValues[80+(seq_pos&15)];  // sample
 800250a:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <sampling+0x4b4>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	3350      	adds	r3, #80	; 0x50
 8002514:	4a39      	ldr	r2, [pc, #228]	; (80025fc <sampling+0x4bc>)
 8002516:	5cd3      	ldrb	r3, [r2, r3]
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <sampling+0x4c4>)
 800251c:	815a      	strh	r2, [r3, #10]


	if ((note_channel[5]) && (adsr_toggle[5]==2)) {note_holdB=note_channel[5]; one_shot=0;}  // grab note when on ,one shot also , also delete
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <sampling+0x4c4>)
 8002520:	895b      	ldrh	r3, [r3, #10]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <sampling+0x3fe>
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <sampling+0x4c8>)
 8002528:	795b      	ldrb	r3, [r3, #5]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <sampling+0x3fe>
 800252e:	4b35      	ldr	r3, [pc, #212]	; (8002604 <sampling+0x4c4>)
 8002530:	895b      	ldrh	r3, [r3, #10]
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b36      	ldr	r3, [pc, #216]	; (8002610 <sampling+0x4d0>)
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	4b36      	ldr	r3, [pc, #216]	; (8002614 <sampling+0x4d4>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]

	
	note_holdB=potValues[80+seq_loop[2]]+(potValues[74]);  // 
 800253e:	4b30      	ldr	r3, [pc, #192]	; (8002600 <sampling+0x4c0>)
 8002540:	789b      	ldrb	r3, [r3, #2]
 8002542:	3350      	adds	r3, #80	; 0x50
 8002544:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <sampling+0x4bc>)
 8002546:	5cd2      	ldrb	r2, [r2, r3]
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <sampling+0x4bc>)
 800254a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800254e:	4413      	add	r3, r2
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <sampling+0x4d0>)
 8002554:	701a      	strb	r2, [r3, #0]
	
	note_holdB=(note_holdB-4)+(lfo_out[2][i_frac]>>11);  //no go with float
 8002556:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800255a:	f103 0319 	add.w	r3, r3, #25
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4a2d      	ldr	r2, [pc, #180]	; (8002618 <sampling+0x4d8>)
 8002562:	3314      	adds	r3, #20
 8002564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002568:	0adb      	lsrs	r3, r3, #11
 800256a:	b29b      	uxth	r3, r3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <sampling+0x4d0>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	3b04      	subs	r3, #4
 8002578:	b2da      	uxtb	r2, r3
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <sampling+0x4d0>)
 800257c:	701a      	strb	r2, [r3, #0]



	note_holdB=MajorNote[note_holdB];
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <sampling+0x4d0>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <sampling+0x4dc>)
 8002586:	5c9a      	ldrb	r2, [r3, r2]
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <sampling+0x4d0>)
 800258a:	701a      	strb	r2, [r3, #0]

	sine_adder=sine_lut[note_holdB];	//sets freq ,1.0594  * 16536 =17518  ,
 800258c:	4b20      	ldr	r3, [pc, #128]	; (8002610 <sampling+0x4d0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461a      	mov	r2, r3
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <sampling+0x4e0>)
 8002594:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <sampling+0x4e4>)
 800259a:	801a      	strh	r2, [r3, #0]
	sine_adder= (sine_adder*1200)>>10;  // modify different sample size , just need single cycle length and thats it
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <sampling+0x4e4>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	129b      	asrs	r3, r3, #10
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <sampling+0x4e4>)
 80025b0:	801a      	strh	r2, [r3, #0]
		mask_result =0;
 80025b2:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <sampling+0x4e8>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	801a      	strh	r2, [r3, #0]


		sample_Accu[0]=0; // reset to 0 mani sample hold
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <sampling+0x4ec>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
		sample_Accu[1]=0; // reset to 0 mani sample hold
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <sampling+0x4ec>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	605a      	str	r2, [r3, #4]
		sample_Accu[2]=0; // reset to 0 mani sample hold
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <sampling+0x4ec>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
		sample_Accu[3]=0; // reset to 0 mani sample hold
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <sampling+0x4ec>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	60da      	str	r2, [r3, #12]
		sample_Accu[4]=0; // reset to 0 mani sample hold
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <sampling+0x4ec>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
		sample_Accu[5]=0; // reset to 0 mani sample hold
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <sampling+0x4ec>)
 80025d8:	2200      	movs	r2, #0
 80025da:	615a      	str	r2, [r3, #20]
	for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 80025dc:	2300      	movs	r3, #0
 80025de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80025e2:	f102 0217 	add.w	r2, r2, #23
 80025e6:	7013      	strb	r3, [r2, #0]
 80025e8:	e054      	b.n	8002694 <sampling+0x554>
 80025ea:	bf00      	nop
 80025ec:	200013be 	.word	0x200013be
 80025f0:	2000136a 	.word	0x2000136a
 80025f4:	20000ad8 	.word	0x20000ad8
 80025f8:	200001cc 	.word	0x200001cc
 80025fc:	200008a4 	.word	0x200008a4
 8002600:	200013dc 	.word	0x200013dc
 8002604:	2000130c 	.word	0x2000130c
 8002608:	2000136c 	.word	0x2000136c
 800260c:	20001354 	.word	0x20001354
 8002610:	20001378 	.word	0x20001378
 8002614:	200013b0 	.word	0x200013b0
 8002618:	20001664 	.word	0x20001664
 800261c:	08007b88 	.word	0x08007b88
 8002620:	20000168 	.word	0x20000168
 8002624:	20000ada 	.word	0x20000ada
 8002628:	2000134a 	.word	0x2000134a
 800262c:	20000ae0 	.word	0x20000ae0

		if (note_channel[mask_i]) {tune_Accu=sample_Noteadd[MajorNote[note_channel[mask_i]]];   note_tuned[mask_i]=(tune_Accu);}
 8002630:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002634:	f103 0317 	add.w	r3, r3, #23
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4a62      	ldr	r2, [pc, #392]	; (80027c4 <sampling+0x684>)
 800263c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01c      	beq.n	800267e <sampling+0x53e>
 8002644:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002648:	f103 0317 	add.w	r3, r3, #23
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	4a5d      	ldr	r2, [pc, #372]	; (80027c4 <sampling+0x684>)
 8002650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002654:	461a      	mov	r2, r3
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <sampling+0x688>)
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	461a      	mov	r2, r3
 800265c:	4b5b      	ldr	r3, [pc, #364]	; (80027cc <sampling+0x68c>)
 800265e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002662:	461a      	mov	r2, r3
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <sampling+0x690>)
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	4b59      	ldr	r3, [pc, #356]	; (80027d0 <sampling+0x690>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002670:	f103 0317 	add.w	r3, r3, #23
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b291      	uxth	r1, r2
 8002678:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <sampling+0x694>)
 800267a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (mask_i=0;mask_i<5;mask_i++)	{							// calc detune , slow ,also creates notes
 800267e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002682:	f103 0317 	add.w	r3, r3, #23
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800268e:	f102 0217 	add.w	r2, r2, #23
 8002692:	7013      	strb	r3, [r2, #0]
 8002694:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002698:	f103 0317 	add.w	r3, r3, #23
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d9c6      	bls.n	8002630 <sampling+0x4f0>

  // calc freq 1/isr or 1/16 per note ,need for pitch bend and so on , change depending on decay

// lfo section

	if ((i&63)==0) {   // calculate lfo maybe 8 times for now , seems to fill up
 80026a2:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <sampling+0x698>)
 80026a4:	881b      	ldrh	r3, [r3, #0]
 80026a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 8188 	bne.w	80029c0 <sampling+0x880>
freq_temp=0;
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026b8:	f102 0210 	add.w	r2, r2, #16
 80026bc:	6013      	str	r3, [r2, #0]
freq2_temp=0;
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80026c6:	f102 020c 	add.w	r2, r2, #12
 80026ca:	6013      	str	r3, [r2, #0]
//uint8_t i_frac2=(i_frac+7)&7;  //previous value can change shape  , not  bad effect

		for (l=0;l<10;l++){   //current lfo setup , messy
 80026cc:	2300      	movs	r3, #0
 80026ce:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80026d2:	f102 0213 	add.w	r2, r2, #19
 80026d6:	7013      	strb	r3, [r2, #0]
 80026d8:	e127      	b.n	800292a <sampling+0x7ea>

			freq_temp=potSource[130+l];
 80026da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80026de:	f103 0313 	add.w	r3, r3, #19
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	3382      	adds	r3, #130	; 0x82
 80026e6:	4a3d      	ldr	r2, [pc, #244]	; (80027dc <sampling+0x69c>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80026f6:	f103 0310 	add.w	r3, r3, #16
 80026fa:	edc3 7a00 	vstr	s15, [r3]
			freq2_temp=freq_temp*tempo_sync ; //correction to one note per cycle ,fixed
 80026fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002702:	f103 0310 	add.w	r3, r3, #16
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800270e:	f103 0304 	add.w	r3, r3, #4
 8002712:	edd3 7a00 	vldr	s15, [r3]
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800271e:	f103 030c 	add.w	r3, r3, #12
 8002722:	edc3 7a00 	vstr	s15, [r3]

			freq_temp=lfo_accu[l][i_frac]+ freq2_temp;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8002726:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800272a:	f103 0313 	add.w	r3, r3, #19
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002734:	f103 0319 	add.w	r3, r3, #25
 8002738:	7819      	ldrb	r1, [r3, #0]
 800273a:	4829      	ldr	r0, [pc, #164]	; (80027e0 <sampling+0x6a0>)
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	440b      	add	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4403      	add	r3, r0
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002752:	f103 030c 	add.w	r3, r3, #12
 8002756:	ed93 7a00 	vldr	s14, [r3]
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002762:	f103 0310 	add.w	r3, r3, #16
 8002766:	edc3 7a00 	vstr	s15, [r3]


//			if ((tempo_count<50) && ((next_isr&15)==15)) freq_temp=0;   // trying retrigger
		if (freq_temp>16384) lfo_accu[l][i_frac]=freq_temp-16384; else lfo_accu[l][i_frac]=freq_temp; // write back value
 800276a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800276e:	f103 0310 	add.w	r3, r3, #16
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80027e4 <sampling+0x6a4>
 800277a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	dd31      	ble.n	80027e8 <sampling+0x6a8>
 8002784:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002788:	f103 0313 	add.w	r3, r3, #19
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002792:	f103 0319 	add.w	r3, r3, #25
 8002796:	7819      	ldrb	r1, [r3, #0]
 8002798:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800279c:	f103 0310 	add.w	r3, r3, #16
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80027e4 <sampling+0x6a4>
 80027a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <sampling+0x6a0>)
 80027ae:	4613      	mov	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4413      	add	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	440b      	add	r3, r1
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	edc3 7a00 	vstr	s15, [r3]
 80027c0:	e02a      	b.n	8002818 <sampling+0x6d8>
 80027c2:	bf00      	nop
 80027c4:	2000130c 	.word	0x2000130c
 80027c8:	08007b88 	.word	0x08007b88
 80027cc:	08007ba4 	.word	0x08007ba4
 80027d0:	20000ad4 	.word	0x20000ad4
 80027d4:	20000abc 	.word	0x20000abc
 80027d8:	20000b00 	.word	0x20000b00
 80027dc:	200009a4 	.word	0x200009a4
 80027e0:	200014d4 	.word	0x200014d4
 80027e4:	46800000 	.word	0x46800000
 80027e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80027ec:	f103 0313 	add.w	r3, r3, #19
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80027f6:	f103 0319 	add.w	r3, r3, #25
 80027fa:	7819      	ldrb	r1, [r3, #0]
 80027fc:	487c      	ldr	r0, [pc, #496]	; (80029f0 <sampling+0x8b0>)
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	440b      	add	r3, r1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4403      	add	r3, r0
 800280c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002810:	f102 0210 	add.w	r2, r2, #16
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	601a      	str	r2, [r3, #0]
		freq_temp=lfo_accu[l][i_frac]; // 0-255 limit + above zero
 8002818:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800281c:	f103 0313 	add.w	r3, r3, #19
 8002820:	781a      	ldrb	r2, [r3, #0]
 8002822:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002826:	f103 0319 	add.w	r3, r3, #25
 800282a:	7819      	ldrb	r1, [r3, #0]
 800282c:	4870      	ldr	r0, [pc, #448]	; (80029f0 <sampling+0x8b0>)
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	440b      	add	r3, r1
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4403      	add	r3, r0
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002842:	f102 0210 	add.w	r2, r2, #16
 8002846:	6013      	str	r3, [r2, #0]
		freq_temp=freq_temp*0.000383495;  // 0-255 , chang this for depth
 8002848:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800284c:	f103 0310 	add.w	r3, r3, #16
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	f7fd ff4f 	bl	80006f4 <__aeabi_f2d>
 8002856:	a362      	add	r3, pc, #392	; (adr r3, 80029e0 <sampling+0x8a0>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fd fcbc 	bl	80001d8 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe f824 	bl	80008b4 <__aeabi_d2f>
 800286c:	4603      	mov	r3, r0
 800286e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002872:	f102 0210 	add.w	r2, r2, #16
 8002876:	6013      	str	r3, [r2, #0]
		freq2_temp =arm_sin_f32(freq_temp); // seems to be working ok till here , not doing right here now
 8002878:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800287c:	f103 0310 	add.w	r3, r3, #16
 8002880:	ed93 0a00 	vldr	s0, [r3]
 8002884:	f005 f8e0 	bl	8007a48 <arm_sin_f32>
 8002888:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800288c:	f103 030c 	add.w	r3, r3, #12
 8002890:	ed83 0a00 	vstr	s0, [r3]
		freq_temp=freq2_temp*potSource[140+l]*51;   // not working  proper something with angles i think
 8002894:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002898:	f103 0313 	add.w	r3, r3, #19
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	338c      	adds	r3, #140	; 0x8c
 80028a0:	4a54      	ldr	r2, [pc, #336]	; (80029f4 <sampling+0x8b4>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	ee07 3a90 	vmov	s15, r3
 80028a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028b0:	f103 030c 	add.w	r3, r3, #12
 80028b4:	edd3 7a00 	vldr	s15, [r3]
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80029f8 <sampling+0x8b8>
 80028c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028c8:	f103 0310 	add.w	r3, r3, #16
 80028cc:	edc3 7a00 	vstr	s15, [r3]

		lfo_out[l] [i_frac]=freq_temp+8195; // ok now
 80028d0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028d4:	f103 0310 	add.w	r3, r3, #16
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80029fc <sampling+0x8bc>
 80028e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80028e8:	f103 0313 	add.w	r3, r3, #19
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80028f2:	f103 0319 	add.w	r3, r3, #25
 80028f6:	7819      	ldrb	r1, [r3, #0]
 80028f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
 8002900:	b29c      	uxth	r4, r3
 8002902:	483f      	ldr	r0, [pc, #252]	; (8002a00 <sampling+0x8c0>)
 8002904:	4613      	mov	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	440b      	add	r3, r1
 800290e:	4622      	mov	r2, r4
 8002910:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (l=0;l<10;l++){   //current lfo setup , messy
 8002914:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002918:	f103 0313 	add.w	r3, r3, #19
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002924:	f102 0213 	add.w	r2, r2, #19
 8002928:	7013      	strb	r3, [r2, #0]
 800292a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800292e:	f103 0313 	add.w	r3, r3, #19
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b09      	cmp	r3, #9
 8002936:	f67f aed0 	bls.w	80026da <sampling+0x59a>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch


			freq_pointer[0] [i_frac]=lfo_out [0][i_frac]*0.00006435; // problem was selecting accu instead of out , good now
 800293a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800293e:	f103 0319 	add.w	r3, r3, #25
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4a2e      	ldr	r2, [pc, #184]	; (8002a00 <sampling+0x8c0>)
 8002946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fd fec0 	bl	80006d0 <__aeabi_i2d>
 8002950:	a325      	add	r3, pc, #148	; (adr r3, 80029e8 <sampling+0x8a8>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fc3f 	bl	80001d8 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8002962:	f101 0119 	add.w	r1, r1, #25
 8002966:	780c      	ldrb	r4, [r1, #0]
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	f7fd ffa2 	bl	80008b4 <__aeabi_d2f>
 8002970:	4602      	mov	r2, r0
 8002972:	4924      	ldr	r1, [pc, #144]	; (8002a04 <sampling+0x8c4>)
 8002974:	00a3      	lsls	r3, r4, #2
 8002976:	440b      	add	r3, r1
 8002978:	601a      	str	r2, [r3, #0]
		freq_pointer[2] [i_frac] =lfo_out [3][i_frac]*0.00006435;; // filter lfos
 800297a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800297e:	f103 0319 	add.w	r3, r3, #25
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <sampling+0x8c0>)
 8002986:	331e      	adds	r3, #30
 8002988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fe9f 	bl	80006d0 <__aeabi_i2d>
 8002992:	a315      	add	r3, pc, #84	; (adr r3, 80029e8 <sampling+0x8a8>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fc1e 	bl	80001d8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80029a4:	f101 0119 	add.w	r1, r1, #25
 80029a8:	780c      	ldrb	r4, [r1, #0]
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fd ff81 	bl	80008b4 <__aeabi_d2f>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4913      	ldr	r1, [pc, #76]	; (8002a04 <sampling+0x8c4>)
 80029b6:	f104 0312 	add.w	r3, r4, #18
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	601a      	str	r2, [r3, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <sampling+0x8c8>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <sampling+0x8c8>)
 80029ca:	801a      	strh	r2, [r3, #0]
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <sampling+0x8c8>)
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d4:	f4ff ac98 	bcc.w	8002308 <sampling+0x1c8>
// filter loop
int32_t play_holder1[512];    // data banks
int32_t play_holder2[512];


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <sampling+0x8c8>)
 80029da:	2200      	movs	r2, #0
 80029dc:	801a      	strh	r2, [r3, #0]
 80029de:	e0f7      	b.n	8002bd0 <sampling+0xa90>
 80029e0:	7bb1a72c 	.word	0x7bb1a72c
 80029e4:	3f3921fa 	.word	0x3f3921fa
 80029e8:	94fd52a7 	.word	0x94fd52a7
 80029ec:	3f10de74 	.word	0x3f10de74
 80029f0:	200014d4 	.word	0x200014d4
 80029f4:	200009a4 	.word	0x200009a4
 80029f8:	424c0000 	.word	0x424c0000
 80029fc:	46000c00 	.word	0x46000c00
 8002a00:	20001664 	.word	0x20001664
 8002a04:	20001444 	.word	0x20001444
 8002a08:	20000b00 	.word	0x20000b00
	i_total=i+sample_pointB;
 8002a0c:	4b9c      	ldr	r3, [pc, #624]	; (8002c80 <sampling+0xb40>)
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	4b9c      	ldr	r3, [pc, #624]	; (8002c84 <sampling+0xb44>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a1a:	f102 021a 	add.w	r2, r2, #26
 8002a1e:	8013      	strh	r3, [r2, #0]
i_frac=i>>6;
 8002a20:	4b97      	ldr	r3, [pc, #604]	; (8002c80 <sampling+0xb40>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	099b      	lsrs	r3, r3, #6
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a2c:	f102 0219 	add.w	r2, r2, #25
 8002a30:	7013      	strb	r3, [r2, #0]
// every step   1,110,928   >>20  ,per note
// New oscillators , sync, trigger input , waveshape ,zero cross
	sample_accus[0] = sample_accus[0] + note_tuned[0]; //careful with signed bit shift,better compare
 8002a32:	4b95      	ldr	r3, [pc, #596]	; (8002c88 <sampling+0xb48>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a95      	ldr	r2, [pc, #596]	; (8002c8c <sampling+0xb4c>)
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a92      	ldr	r2, [pc, #584]	; (8002c88 <sampling+0xb48>)
 8002a3e:	6013      	str	r3, [r2, #0]

	if (sample_accus[0]>524287) sample_accus[0] =-sample_accus[0] ; // faster >  than &  ,strange
 8002a40:	4b91      	ldr	r3, [pc, #580]	; (8002c88 <sampling+0xb48>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a48:	db04      	blt.n	8002a54 <sampling+0x914>
 8002a4a:	4b8f      	ldr	r3, [pc, #572]	; (8002c88 <sampling+0xb48>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	425b      	negs	r3, r3
 8002a50:	4a8d      	ldr	r2, [pc, #564]	; (8002c88 <sampling+0xb48>)
 8002a52:	6013      	str	r3, [r2, #0]



	sample_accus[1] = sample_accus[1] + note_tuned[1];  // normal adder full volume
 8002a54:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <sampling+0xb48>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a8c      	ldr	r2, [pc, #560]	; (8002c8c <sampling+0xb4c>)
 8002a5a:	8852      	ldrh	r2, [r2, #2]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	4a8a      	ldr	r2, [pc, #552]	; (8002c88 <sampling+0xb48>)
 8002a60:	6053      	str	r3, [r2, #4]
		//	if (!(note_channel[0]))   sample_accus[1] =0;  // turn off with vel now , maybe use mask
			if (sample_accus[1]>524287) sample_accus[1] =-sample_accus[1] ; // faster >  than &  ,strange
 8002a62:	4b89      	ldr	r3, [pc, #548]	; (8002c88 <sampling+0xb48>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a6a:	db04      	blt.n	8002a76 <sampling+0x936>
 8002a6c:	4b86      	ldr	r3, [pc, #536]	; (8002c88 <sampling+0xb48>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	425b      	negs	r3, r3
 8002a72:	4a85      	ldr	r2, [pc, #532]	; (8002c88 <sampling+0xb48>)
 8002a74:	6053      	str	r3, [r2, #4]

			sample_accus[2] = sample_accus[2] + note_tuned[2];
 8002a76:	4b84      	ldr	r3, [pc, #528]	; (8002c88 <sampling+0xb48>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a84      	ldr	r2, [pc, #528]	; (8002c8c <sampling+0xb4c>)
 8002a7c:	8892      	ldrh	r2, [r2, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a81      	ldr	r2, [pc, #516]	; (8002c88 <sampling+0xb48>)
 8002a82:	6093      	str	r3, [r2, #8]
			//		if (!(note_channel[0]))   sample_accus[2] =0;  // turn off with vel now , maybe use mask
					if (sample_accus[2]>524287) sample_accus[2] =-sample_accus[2] ; // faster >  than &  ,strange
 8002a84:	4b80      	ldr	r3, [pc, #512]	; (8002c88 <sampling+0xb48>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a8c:	db04      	blt.n	8002a98 <sampling+0x958>
 8002a8e:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <sampling+0xb48>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	425b      	negs	r3, r3
 8002a94:	4a7c      	ldr	r2, [pc, #496]	; (8002c88 <sampling+0xb48>)
 8002a96:	6093      	str	r3, [r2, #8]

					sample_accus[3] = sample_accus[3] + note_tuned[3]; // bouncing somewhere
 8002a98:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <sampling+0xb48>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a7b      	ldr	r2, [pc, #492]	; (8002c8c <sampling+0xb4c>)
 8002a9e:	88d2      	ldrh	r2, [r2, #6]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a79      	ldr	r2, [pc, #484]	; (8002c88 <sampling+0xb48>)
 8002aa4:	60d3      	str	r3, [r2, #12]
					//sample_accus[3] = sample_accus[3] +4000;
					//	if (!(note_channel[0]))   sample_accus[3] =0;  // turn off with vel now , maybe use mask
							if (sample_accus[3]>524287) sample_accus[3] =-sample_accus[3] ; // faster >  than &  ,strange
 8002aa6:	4b78      	ldr	r3, [pc, #480]	; (8002c88 <sampling+0xb48>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aae:	db04      	blt.n	8002aba <sampling+0x97a>
 8002ab0:	4b75      	ldr	r3, [pc, #468]	; (8002c88 <sampling+0xb48>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	4a74      	ldr	r2, [pc, #464]	; (8002c88 <sampling+0xb48>)
 8002ab8:	60d3      	str	r3, [r2, #12]

							sample_accus[4] = sample_accus[4] + note_tuned[4];
 8002aba:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <sampling+0xb48>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	4a73      	ldr	r2, [pc, #460]	; (8002c8c <sampling+0xb4c>)
 8002ac0:	8912      	ldrh	r2, [r2, #8]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	4a70      	ldr	r2, [pc, #448]	; (8002c88 <sampling+0xb48>)
 8002ac6:	6113      	str	r3, [r2, #16]
								//	if (!(note_channel[4]))   sample_accus[4] =0;  // turn off with vel now , maybe use mask
									if (sample_accus[4]>524287) sample_accus[4] =-sample_accus[4] ; // faster >  than &  ,strange
 8002ac8:	4b6f      	ldr	r3, [pc, #444]	; (8002c88 <sampling+0xb48>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ad0:	db04      	blt.n	8002adc <sampling+0x99c>
 8002ad2:	4b6d      	ldr	r3, [pc, #436]	; (8002c88 <sampling+0xb48>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	425b      	negs	r3, r3
 8002ad8:	4a6b      	ldr	r2, [pc, #428]	; (8002c88 <sampling+0xb48>)
 8002ada:	6113      	str	r3, [r2, #16]

									sample_Accu[2] = 0;sample_Accu[0] =0;sample_Accu[3] =0; //all zeroed
 8002adc:	4b6c      	ldr	r3, [pc, #432]	; (8002c90 <sampling+0xb50>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	4b6b      	ldr	r3, [pc, #428]	; (8002c90 <sampling+0xb50>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <sampling+0xb50>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
									//if (sample_accus[2]<0) sample_Accu[2]=+sample_accus[2]; else sample_Accu[2]=sample_accus[2]; // convert to triangle ?
									sample_Accu[0]=sample_accus[2]>>7; // needs cut a bit
 8002aee:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <sampling+0xb48>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	11db      	asrs	r3, r3, #7
 8002af4:	4a66      	ldr	r2, [pc, #408]	; (8002c90 <sampling+0xb50>)
 8002af6:	6013      	str	r3, [r2, #0]

							sample_Accu[0] = ((sine_out+sample_Accu[0])*cross_fade[1]);   // sine input
 8002af8:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <sampling+0xb50>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <sampling+0xb54>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4413      	add	r3, r2
 8002b02:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b06:	f102 0219 	add.w	r2, r2, #25
 8002b0a:	7812      	ldrb	r2, [r2, #0]
 8002b0c:	fb02 f303 	mul.w	r3, r2, r3
 8002b10:	4a5f      	ldr	r2, [pc, #380]	; (8002c90 <sampling+0xb50>)
 8002b12:	6013      	str	r3, [r2, #0]

									//if (sample_accus[3]<0) sample_Accu[3]=+sample_accus[3]; else sample_Accu[3]=sample_accus[3]; // convert to triangle
									sample_Accu[3]=sample_accus[3];
 8002b14:	4b5c      	ldr	r3, [pc, #368]	; (8002c88 <sampling+0xb48>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a5d      	ldr	r2, [pc, #372]	; (8002c90 <sampling+0xb50>)
 8002b1a:	60d3      	str	r3, [r2, #12]
									sample_Accu[2] = (sample_Accu[3]*cross_fade[2]);			//27b, 2 out f2  might do a crossfade here using pot 3
 8002b1c:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <sampling+0xb50>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002b24:	f102 021a 	add.w	r2, r2, #26
 8002b28:	7812      	ldrb	r2, [r2, #0]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <sampling+0xb50>)
 8002b30:	6093      	str	r3, [r2, #8]
									//	sample_Accu[5] = sample_Accu[4]+ (sample_accus[4]*4);			// drum and envelope

	//	sample_Accu=sample_Accu-(1<<21);


if (sine_counterB==0) 	sine_temp2=sine_adder;
 8002b32:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <sampling+0xb58>)
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <sampling+0xa02>
 8002b3a:	4b58      	ldr	r3, [pc, #352]	; (8002c9c <sampling+0xb5c>)
 8002b3c:	881a      	ldrh	r2, [r3, #0]
 8002b3e:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <sampling+0xb60>)
 8002b40:	801a      	strh	r2, [r3, #0]

	sine_counterB=sine_counterB+sine_temp2 ;  // sine up counter per cycle , however sine adder nees to wait
 8002b42:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <sampling+0xb58>)
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	4b56      	ldr	r3, [pc, #344]	; (8002ca0 <sampling+0xb60>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	4b52      	ldr	r3, [pc, #328]	; (8002c98 <sampling+0xb58>)
 8002b50:	801a      	strh	r2, [r3, #0]
	if (sine_counterB>>7) sine_zero=0; else sine_zero=1;
 8002b52:	4b51      	ldr	r3, [pc, #324]	; (8002c98 <sampling+0xb58>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	09db      	lsrs	r3, r3, #7
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <sampling+0xa2c>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b64:	f102 0216 	add.w	r2, r2, #22
 8002b68:	8013      	strh	r3, [r2, #0]
 8002b6a:	e005      	b.n	8002b78 <sampling+0xa38>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002b72:	f102 0216 	add.w	r2, r2, #22
 8002b76:	8013      	strh	r3, [r2, #0]

if (sine_counterB>(sine_length<<5)) sine_counterB=0; //fixed for now
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <sampling+0xb58>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <sampling+0xb64>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	015b      	lsls	r3, r3, #5
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dd02      	ble.n	8002b8e <sampling+0xa4e>
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <sampling+0xb58>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
sine_count(); // calc sine
 8002b8e:	f000 fb57 	bl	8003240 <sine_count>
play_holder1[i]=sample_Accu[0];  // write to bank
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <sampling+0xb40>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	4619      	mov	r1, r3
 8002b98:	4b3d      	ldr	r3, [pc, #244]	; (8002c90 <sampling+0xb50>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002ba0:	f103 0318 	add.w	r3, r3, #24
 8002ba4:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002ba8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
play_holder2[i]=sample_Accu[2];
 8002bac:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <sampling+0xb40>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <sampling+0xb50>)
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bba:	4619      	mov	r1, r3
 8002bbc:	0083      	lsls	r3, r0, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f843 2c54 	str.w	r2, [r3, #-84]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <sampling+0xb40>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <sampling+0xb40>)
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <sampling+0xb40>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd8:	f4ff af18 	bcc.w	8002a0c <sampling+0x8cc>

} // end of osc , doing some sound


int32_t filter_Accu;
int32_t feedback_out=filter_out[3];
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <sampling+0xb68>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002be4:	f102 021c 	add.w	r2, r2, #28
 8002be8:	6013      	str	r3, [r2, #0]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <sampling+0xb40>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	e20e      	b.n	8003010 <sampling+0xed0>
	i_total=i+sample_pointB;
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <sampling+0xb40>)
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <sampling+0xb44>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c00:	f102 021a 	add.w	r2, r2, #26
 8002c04:	8013      	strh	r3, [r2, #0]
i_frac=i>>6;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <sampling+0xb40>)
 8002c08:	881b      	ldrh	r3, [r3, #0]
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c12:	f102 0219 	add.w	r2, r2, #25
 8002c16:	7013      	strb	r3, [r2, #0]
// filter 1


//if (feedback_out>0xFFFF) feedback_out=0xFFFF; else if (feedback_out<-65535) feedback_out=-65535;  // limiter to 16 bits

sample_Accu[1]=play_holder1[i];  // sine input
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <sampling+0xb40>)
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002c22:	f103 0318 	add.w	r3, r3, #24
 8002c26:	f6a3 0354 	subw	r3, r3, #2132	; 0x854
 8002c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2e:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <sampling+0xb50>)
 8002c30:	6053      	str	r3, [r2, #4]
freq_point[0]=freq_pointer[0] [i_frac];; // load up coeffs
 8002c32:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c36:	f103 0319 	add.w	r3, r3, #25
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <sampling+0xb6c>)
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <sampling+0xb70>)
 8002c46:	6013      	str	r3, [r2, #0]
//freq_point[1]=freq_pointer[1] [i_frac];
freq_point[2]=freq_pointer[2] [i_frac];  // ok , array was too short
 8002c48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002c4c:	f103 0319 	add.w	r3, r3, #25
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	4a16      	ldr	r2, [pc, #88]	; (8002cac <sampling+0xb6c>)
 8002c54:	3312      	adds	r3, #18
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <sampling+0xb70>)
 8002c5e:	6093      	str	r3, [r2, #8]
//freq_point[0]=0.5;  //was ok with this
	//	freq_point[2]=0.5;



if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8002c60:	4b13      	ldr	r3, [pc, #76]	; (8002cb0 <sampling+0xb70>)
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	dd1f      	ble.n	8002cb4 <sampling+0xb74>
 8002c74:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <sampling+0xb70>)
 8002c76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e026      	b.n	8002ccc <sampling+0xb8c>
 8002c7e:	bf00      	nop
 8002c80:	20000b00 	.word	0x20000b00
 8002c84:	20000afe 	.word	0x20000afe
 8002c88:	20001398 	.word	0x20001398
 8002c8c:	20000abc 	.word	0x20000abc
 8002c90:	20000ae0 	.word	0x20000ae0
 8002c94:	20000ab4 	.word	0x20000ab4
 8002c98:	20000ab0 	.word	0x20000ab0
 8002c9c:	20000ada 	.word	0x20000ada
 8002ca0:	20000ab8 	.word	0x20000ab8
 8002ca4:	20000166 	.word	0x20000166
 8002ca8:	2000137c 	.word	0x2000137c
 8002cac:	20001444 	.word	0x20001444
 8002cb0:	20001434 	.word	0x20001434
 8002cb4:	4bbb      	ldr	r3, [pc, #748]	; (8002fa4 <sampling+0xe64>)
 8002cb6:	edd3 7a00 	vldr	s15, [r3]
 8002cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	d503      	bpl.n	8002ccc <sampling+0xb8c>
 8002cc4:	4bb7      	ldr	r3, [pc, #732]	; (8002fa4 <sampling+0xe64>)
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
		//freq_point[0]=0.50;
		freq_point[1]=1-freq_point[0];
 8002ccc:	4bb5      	ldr	r3, [pc, #724]	; (8002fa4 <sampling+0xe64>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cda:	4bb2      	ldr	r3, [pc, #712]	; (8002fa4 <sampling+0xe64>)
 8002cdc:	edc3 7a01 	vstr	s15, [r3, #4]
		//filter_accus[1]=sample_Accu[1];
		filter_accus[1]=sample_Accu[1]+((filter_hold[0])*0.5);
 8002ce0:	4bb1      	ldr	r3, [pc, #708]	; (8002fa8 <sampling+0xe68>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fcf3 	bl	80006d0 <__aeabi_i2d>
 8002cea:	4604      	mov	r4, r0
 8002cec:	460d      	mov	r5, r1
 8002cee:	4baf      	ldr	r3, [pc, #700]	; (8002fac <sampling+0xe6c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fcfe 	bl	80006f4 <__aeabi_f2d>
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4bac      	ldr	r3, [pc, #688]	; (8002fb0 <sampling+0xe70>)
 8002cfe:	f7fd fa6b 	bl	80001d8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4620      	mov	r0, r4
 8002d08:	4629      	mov	r1, r5
 8002d0a:	f7fd fb95 	bl	8000438 <__adddf3>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd fdcd 	bl	80008b4 <__aeabi_d2f>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4aa5      	ldr	r2, [pc, #660]	; (8002fb4 <sampling+0xe74>)
 8002d1e:	6053      	str	r3, [r2, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);
 8002d20:	4ba4      	ldr	r3, [pc, #656]	; (8002fb4 <sampling+0xe74>)
 8002d22:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d26:	4b9f      	ldr	r3, [pc, #636]	; (8002fa4 <sampling+0xe64>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d30:	4ba0      	ldr	r3, [pc, #640]	; (8002fb4 <sampling+0xe74>)
 8002d32:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d36:	4b9b      	ldr	r3, [pc, #620]	; (8002fa4 <sampling+0xe64>)
 8002d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d44:	4b9b      	ldr	r3, [pc, #620]	; (8002fb4 <sampling+0xe74>)
 8002d46:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);
 8002d4a:	4b9a      	ldr	r3, [pc, #616]	; (8002fb4 <sampling+0xe74>)
 8002d4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d50:	4b94      	ldr	r3, [pc, #592]	; (8002fa4 <sampling+0xe64>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5a:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <sampling+0xe74>)
 8002d5c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d60:	4b90      	ldr	r3, [pc, #576]	; (8002fa4 <sampling+0xe64>)
 8002d62:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6e:	4b91      	ldr	r3, [pc, #580]	; (8002fb4 <sampling+0xe74>)
 8002d70:	edc3 7a03 	vstr	s15, [r3, #12]
		filter_accus[4]=(filter_accus[3]*freq_point[0])+(filter_accus[4]*freq_point[1]);
 8002d74:	4b8f      	ldr	r3, [pc, #572]	; (8002fb4 <sampling+0xe74>)
 8002d76:	ed93 7a03 	vldr	s14, [r3, #12]
 8002d7a:	4b8a      	ldr	r3, [pc, #552]	; (8002fa4 <sampling+0xe64>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d84:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <sampling+0xe74>)
 8002d86:	edd3 6a04 	vldr	s13, [r3, #16]
 8002d8a:	4b86      	ldr	r3, [pc, #536]	; (8002fa4 <sampling+0xe64>)
 8002d8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d98:	4b86      	ldr	r3, [pc, #536]	; (8002fb4 <sampling+0xe74>)
 8002d9a:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[0])+(filter_accus[5]*freq_point[1]);
 8002d9e:	4b85      	ldr	r3, [pc, #532]	; (8002fb4 <sampling+0xe74>)
 8002da0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002da4:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <sampling+0xe64>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dae:	4b81      	ldr	r3, [pc, #516]	; (8002fb4 <sampling+0xe74>)
 8002db0:	edd3 6a05 	vldr	s13, [r3, #20]
 8002db4:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <sampling+0xe64>)
 8002db6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <sampling+0xe74>)
 8002dc4:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_hold[0]=(filter_accus[5]+filter_accus[11])*0.5; //half sample , nice
 8002dc8:	4b7a      	ldr	r3, [pc, #488]	; (8002fb4 <sampling+0xe74>)
 8002dca:	ed93 7a05 	vldr	s14, [r3, #20]
 8002dce:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <sampling+0xe74>)
 8002dd0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002de0:	4b72      	ldr	r3, [pc, #456]	; (8002fac <sampling+0xe6c>)
 8002de2:	edc3 7a00 	vstr	s15, [r3]
		sample_Accu[0] =filter_accus[5]; // out
 8002de6:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <sampling+0xe74>)
 8002de8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df0:	ee17 2a90 	vmov	r2, s15
 8002df4:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <sampling+0xe68>)
 8002df6:	601a      	str	r2, [r3, #0]
		filter_accus[11]=filter_accus[5]; //write back new value
 8002df8:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <sampling+0xe74>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	4a6d      	ldr	r2, [pc, #436]	; (8002fb4 <sampling+0xe74>)
 8002dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
		//sample_Accu[0] =sample_Accu[1];

		//filter 2
		sample_Accu[3]=play_holder2[i] >>5; // this one is louder than sine
 8002e00:	4b6d      	ldr	r3, [pc, #436]	; (8002fb8 <sampling+0xe78>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002e10:	115b      	asrs	r3, r3, #5
 8002e12:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <sampling+0xe68>)
 8002e14:	60d3      	str	r3, [r2, #12]


				if (freq_point[2]>1) freq_point[2]=1;
 8002e16:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <sampling+0xe64>)
 8002e18:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e28:	dd03      	ble.n	8002e32 <sampling+0xcf2>
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <sampling+0xe64>)
 8002e2c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e30:	609a      	str	r2, [r3, #8]

				freq_point[3]=1-freq_point[2];
 8002e32:	4b5c      	ldr	r3, [pc, #368]	; (8002fa4 <sampling+0xe64>)
 8002e34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <sampling+0xe64>)
 8002e42:	edc3 7a03 	vstr	s15, [r3, #12]
				filter_accus[6]=sample_Accu[3];
 8002e46:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <sampling+0xe68>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e52:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <sampling+0xe74>)
 8002e54:	edc3 7a06 	vstr	s15, [r3, #24]
					filter_accus[6]= filter_accus[6]*adsr_level[3]; // add adsr envelope
 8002e58:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <sampling+0xe74>)
 8002e5a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e5e:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <sampling+0xe7c>)
 8002e60:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e68:	4b52      	ldr	r3, [pc, #328]	; (8002fb4 <sampling+0xe74>)
 8002e6a:	edc3 7a06 	vstr	s15, [r3, #24]

				filter_accus[7]=(filter_accus[6]*freq_point[2])+(filter_accus[7]*freq_point[3]);
 8002e6e:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <sampling+0xe74>)
 8002e70:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <sampling+0xe64>)
 8002e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e7e:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <sampling+0xe74>)
 8002e80:	edd3 6a07 	vldr	s13, [r3, #28]
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <sampling+0xe64>)
 8002e86:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e92:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <sampling+0xe74>)
 8002e94:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[2])+(filter_accus[8]*freq_point[3]);
 8002e98:	4b46      	ldr	r3, [pc, #280]	; (8002fb4 <sampling+0xe74>)
 8002e9a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <sampling+0xe64>)
 8002ea0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <sampling+0xe74>)
 8002eaa:	edd3 6a08 	vldr	s13, [r3, #32]
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <sampling+0xe64>)
 8002eb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <sampling+0xe74>)
 8002ebe:	edc3 7a08 	vstr	s15, [r3, #32]
				filter_accus[9]=(filter_accus[8]*freq_point[2])+(filter_accus[9]*freq_point[3]);
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <sampling+0xe74>)
 8002ec4:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <sampling+0xe64>)
 8002eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ece:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ed2:	4b38      	ldr	r3, [pc, #224]	; (8002fb4 <sampling+0xe74>)
 8002ed4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <sampling+0xe64>)
 8002eda:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <sampling+0xe74>)
 8002ee8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				filter_accus[10]=(filter_accus[9]*freq_point[2])+(filter_accus[10]*freq_point[3]);
 8002eec:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <sampling+0xe74>)
 8002eee:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002ef2:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <sampling+0xe64>)
 8002ef4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ef8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <sampling+0xe74>)
 8002efe:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <sampling+0xe64>)
 8002f04:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <sampling+0xe74>)
 8002f12:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_hold[1]=(filter_accus[10]+filter_accus[12])*0.5; //half sample
 8002f16:	4b27      	ldr	r3, [pc, #156]	; (8002fb4 <sampling+0xe74>)
 8002f18:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <sampling+0xe74>)
 8002f1e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002f22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <sampling+0xe6c>)
 8002f30:	edc3 7a01 	vstr	s15, [r3, #4]
				sample_Accu[2] =filter_accus[10]; //out
 8002f34:	4b1f      	ldr	r3, [pc, #124]	; (8002fb4 <sampling+0xe74>)
 8002f36:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f3e:	ee17 2a90 	vmov	r2, s15
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <sampling+0xe68>)
 8002f44:	609a      	str	r2, [r3, #8]
				filter_accus[12]=filter_accus[10]; //write back new value
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <sampling+0xe74>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	4a1a      	ldr	r2, [pc, #104]	; (8002fb4 <sampling+0xe74>)
 8002f4c:	6313      	str	r3, [r2, #48]	; 0x30


filter_Accu=0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002f54:	f102 020c 	add.w	r2, r2, #12
 8002f58:	6013      	str	r3, [r2, #0]
filter_Accu=(sample_Accu[0]+sample_Accu[2])>>8; //filter + drum out
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <sampling+0xe68>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <sampling+0xe68>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4413      	add	r3, r2
 8002f64:	121b      	asrs	r3, r3, #8
 8002f66:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002f6a:	f102 020c 	add.w	r2, r2, #12
 8002f6e:	6013      	str	r3, [r2, #0]


 if (one_shot!=199)   one_shot++;  //play one attack then stop
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <sampling+0xe80>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2bc7      	cmp	r3, #199	; 0xc7
 8002f76:	d005      	beq.n	8002f84 <sampling+0xe44>
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <sampling+0xe80>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b0f      	ldr	r3, [pc, #60]	; (8002fc0 <sampling+0xe80>)
 8002f82:	701a      	strb	r2, [r3, #0]

 if (filter_Accu>0xFFFF) filter_Accu=0xFFFF; else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
 8002f84:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002f88:	f103 030c 	add.w	r3, r3, #12
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f92:	db17      	blt.n	8002fc4 <sampling+0xe84>
 8002f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f98:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002f9c:	f102 020c 	add.w	r2, r2, #12
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	e01d      	b.n	8002fe0 <sampling+0xea0>
 8002fa4:	20001434 	.word	0x20001434
 8002fa8:	20000ae0 	.word	0x20000ae0
 8002fac:	20001420 	.word	0x20001420
 8002fb0:	3fe00000 	.word	0x3fe00000
 8002fb4:	200013e4 	.word	0x200013e4
 8002fb8:	20000b00 	.word	0x20000b00
 8002fbc:	20001c88 	.word	0x20001c88
 8002fc0:	200013b0 	.word	0x200013b0
 8002fc4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002fc8:	f103 030c 	add.w	r3, r3, #12
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fd2:	dc05      	bgt.n	8002fe0 <sampling+0xea0>
 8002fd4:	4b16      	ldr	r3, [pc, #88]	; (8003030 <sampling+0xef0>)
 8002fd6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002fda:	f102 020c 	add.w	r2, r2, #12
 8002fde:	6013      	str	r3, [r2, #0]


 play_sample[i_total]=(filter_Accu>>6)+1023;   // final output disable for now
 8002fe0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8002fe4:	f103 030c 	add.w	r3, r3, #12
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	119b      	asrs	r3, r3, #6
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002ff2:	f103 031a 	add.w	r3, r3, #26
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8002ffc:	b291      	uxth	r1, r2
 8002ffe:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <sampling+0xef4>)
 8003000:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <sampling+0xef8>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <sampling+0xef8>)
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <sampling+0xef8>)
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	f4ff adeb 	bcc.w	8002bf2 <sampling+0xab2>
} // end of filer




bank_write=0;
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <sampling+0xefc>)
 800301e:	2200      	movs	r2, #0
 8003020:	801a      	strh	r2, [r3, #0]
}
 8003022:	bf00      	nop
 8003024:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bdb0      	pop	{r4, r5, r7, pc}
 800302e:	bf00      	nop
 8003030:	ffff0001 	.word	0xffff0001
 8003034:	20000b04 	.word	0x20000b04
 8003038:	20000b00 	.word	0x20000b00
 800303c:	200001d2 	.word	0x200001d2

08003040 <adsr>:
}

potSource[28]=lfo_output[0]>>6;

}
void adsr(void){
 8003040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
	float note_attack;  //attack length 50/50 , just a default shape that is maybe interpolated , store values for both and position, time in isr 
	float note_sustain; //sustaing lenght and height 80/20 / 0-160 0-1-sustain-0  160 is 160 steps(10 notes) 80+80  0+(1/(attack/2))*(attack/2) 1-(1/(attack/2))*(attack/2)+sustain level 1/160*sustain at (1/sustain)*time
	//uint16_t adsr_countup[11];  //holds isr count on notes , 
	//float adsr_level[11]; //float for vol envelope  ,ps 20 21
	uint8_t ad;//counter    0-160-160-160 maybe change 1/10 dunno 
	float as_attack=potSource[20]*0.1; // for now all of them from this only
 8003048:	4b79      	ldr	r3, [pc, #484]	; (8003230 <adsr+0x1f0>)
 800304a:	7d1b      	ldrb	r3, [r3, #20]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fb3f 	bl	80006d0 <__aeabi_i2d>
 8003052:	a371      	add	r3, pc, #452	; (adr r3, 8003218 <adsr+0x1d8>)
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f7fd f8be 	bl	80001d8 <__aeabi_dmul>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fc26 	bl	80008b4 <__aeabi_d2f>
 8003068:	4603      	mov	r3, r0
 800306a:	60fb      	str	r3, [r7, #12]
	float as_sustain=potSource[21];
 800306c:	4b70      	ldr	r3, [pc, #448]	; (8003230 <adsr+0x1f0>)
 800306e:	7d5b      	ldrb	r3, [r3, #21]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003078:	edc7 7a02 	vstr	s15, [r7, #8]
	uint16_t as_temp; 
	
	
	
for (ad=0;ad<10;ad++){							// envelope generator ,needs to be faster 
 800307c:	2300      	movs	r3, #0
 800307e:	74fb      	strb	r3, [r7, #19]
 8003080:	e0bd      	b.n	80031fe <adsr+0x1be>
	as_temp =adsr_countup[ad]; //grab counter
 8003082:	7cfb      	ldrb	r3, [r7, #19]
 8003084:	4a6b      	ldr	r2, [pc, #428]	; (8003234 <adsr+0x1f4>)
 8003086:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800308a:	823b      	strh	r3, [r7, #16]
	
	if (note_channel[ad]) {as_temp=1;note_channel[ad]=0; } // reset on note & 1 isr length ,retrigger also clear not for later
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	4a6a      	ldr	r2, [pc, #424]	; (8003238 <adsr+0x1f8>)
 8003090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d006      	beq.n	80030a6 <adsr+0x66>
 8003098:	2301      	movs	r3, #1
 800309a:	823b      	strh	r3, [r7, #16]
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	4a66      	ldr	r2, [pc, #408]	; (8003238 <adsr+0x1f8>)
 80030a0:	2100      	movs	r1, #0
 80030a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (as_temp) {
 80030a6:	8a3b      	ldrh	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 80a5 	beq.w	80031f8 <adsr+0x1b8>
	if (as_temp<(as_attack))    note_attack=(1/as_attack)*as_temp; //count up attack ok 
 80030ae:	8a3b      	ldrh	r3, [r7, #16]
 80030b0:	ee07 3a90 	vmov	s15, r3
 80030b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80030bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c4:	dd0e      	ble.n	80030e4 <adsr+0xa4>
 80030c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	8a3b      	ldrh	r3, [r7, #16]
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e0:	edc7 7a05 	vstr	s15, [r7, #20]
	if (as_temp>=(as_attack))    note_attack=1-((1/as_attack)*(as_temp-as_attack)); //count down attack
 80030e4:	8a3b      	ldrh	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80030f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	d816      	bhi.n	800312a <adsr+0xea>
 80030fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003100:	edd7 7a03 	vldr	s15, [r7, #12]
 8003104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003108:	8a3b      	ldrh	r3, [r7, #16]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003112:	edd7 7a03 	vldr	s15, [r7, #12]
 8003116:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003126:	edc7 7a05 	vstr	s15, [r7, #20]
	if(note_attack<0) note_attack=0; // stop at 0
 800312a:	edd7 7a05 	vldr	s15, [r7, #20]
 800312e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003136:	d502      	bpl.n	800313e <adsr+0xfe>
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
	note_sustain=as_sustain*0.00625;
 800313e:	68b8      	ldr	r0, [r7, #8]
 8003140:	f7fd fad8 	bl	80006f4 <__aeabi_f2d>
 8003144:	a336      	add	r3, pc, #216	; (adr r3, 8003220 <adsr+0x1e0>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd f845 	bl	80001d8 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	f7fd fbad 	bl	80008b4 <__aeabi_d2f>
 800315a:	4603      	mov	r3, r0
 800315c:	607b      	str	r3, [r7, #4]
	if ((as_temp>=(as_attack)) && (note_sustain>note_attack)) note_attack=note_sustain; // change over to sustain level
 800315e:	8a3b      	ldrh	r3, [r7, #16]
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003168:	ed97 7a03 	vldr	s14, [r7, #12]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d80a      	bhi.n	800318c <adsr+0x14c>
 8003176:	ed97 7a01 	vldr	s14, [r7, #4]
 800317a:	edd7 7a05 	vldr	s15, [r7, #20]
 800317e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003186:	dd01      	ble.n	800318c <adsr+0x14c>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	617b      	str	r3, [r7, #20]
	
	if (as_temp>=(as_attack+(as_sustain*0.2))) {note_attack= 0;  as_temp=0; }else as_temp++; // no roll off for now just straight to 0 , shortened , also stops 
 800318c:	8a3b      	ldrh	r3, [r7, #16]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd fa9e 	bl	80006d0 <__aeabi_i2d>
 8003194:	4604      	mov	r4, r0
 8003196:	460d      	mov	r5, r1
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7fd faab 	bl	80006f4 <__aeabi_f2d>
 800319e:	4680      	mov	r8, r0
 80031a0:	4689      	mov	r9, r1
 80031a2:	68b8      	ldr	r0, [r7, #8]
 80031a4:	f7fd faa6 	bl	80006f4 <__aeabi_f2d>
 80031a8:	a31f      	add	r3, pc, #124	; (adr r3, 8003228 <adsr+0x1e8>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f7fd f813 	bl	80001d8 <__aeabi_dmul>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4640      	mov	r0, r8
 80031b8:	4649      	mov	r1, r9
 80031ba:	f7fd f93d 	bl	8000438 <__adddf3>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd fb61 	bl	800088c <__aeabi_dcmpge>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <adsr+0x19c>
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	2300      	movs	r3, #0
 80031d8:	823b      	strh	r3, [r7, #16]
 80031da:	e002      	b.n	80031e2 <adsr+0x1a2>
 80031dc:	8a3b      	ldrh	r3, [r7, #16]
 80031de:	3301      	adds	r3, #1
 80031e0:	823b      	strh	r3, [r7, #16]
	
	adsr_level[ad]=note_attack;
 80031e2:	7cfb      	ldrb	r3, [r7, #19]
 80031e4:	4a15      	ldr	r2, [pc, #84]	; (800323c <adsr+0x1fc>)
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	601a      	str	r2, [r3, #0]
	
	adsr_countup[ad]=as_temp; //write back new value
 80031ee:	7cfb      	ldrb	r3, [r7, #19]
 80031f0:	4910      	ldr	r1, [pc, #64]	; (8003234 <adsr+0x1f4>)
 80031f2:	8a3a      	ldrh	r2, [r7, #16]
 80031f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
for (ad=0;ad<10;ad++){							// envelope generator ,needs to be faster 
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	3301      	adds	r3, #1
 80031fc:	74fb      	strb	r3, [r7, #19]
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	2b09      	cmp	r3, #9
 8003202:	f67f af3e 	bls.w	8003082 <adsr+0x42>
	} 

}	
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003212:	bf00      	nop
 8003214:	f3af 8000 	nop.w
 8003218:	9999999a 	.word	0x9999999a
 800321c:	3fb99999 	.word	0x3fb99999
 8003220:	9999999a 	.word	0x9999999a
 8003224:	3f799999 	.word	0x3f799999
 8003228:	9999999a 	.word	0x9999999a
 800322c:	3fc99999 	.word	0x3fc99999
 8003230:	200009a4 	.word	0x200009a4
 8003234:	20001c70 	.word	0x20001c70
 8003238:	2000130c 	.word	0x2000130c
 800323c:	20001c88 	.word	0x20001c88

08003240 <sine_count>:
mask_result=mask_tempB &1;


}

void sine_count(void) {         // sine_out is the output 9  bit  , works
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
int32_t sine_tempA;
int32_t sine_tempB;
int8_t sine_frac;


sine_counter=(sine_counterB>>5);  // up countr controlled by counter
 8003246:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <sine_count+0xc4>)
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	b29a      	uxth	r2, r3
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <sine_count+0xc8>)
 8003250:	801a      	strh	r2, [r3, #0]
sine_frac=sine_counterB & 31;  // grab last 5 bits, actual position for linear interpol,fractional
 8003252:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <sine_count+0xc4>)
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b25b      	sxtb	r3, r3
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	73fb      	strb	r3, [r7, #15]

	if (sine_counter>sine_length) sine_counter = sine_length;		// seems to be faster than using a for loop to calculate both values
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <sine_count+0xc8>)
 8003260:	881a      	ldrh	r2, [r3, #0]
 8003262:	4b2a      	ldr	r3, [pc, #168]	; (800330c <sine_count+0xcc>)
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d903      	bls.n	8003272 <sine_count+0x32>
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <sine_count+0xcc>)
 800326c:	881a      	ldrh	r2, [r3, #0]
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <sine_count+0xc8>)
 8003270:	801a      	strh	r2, [r3, #0]

	sine_out = sine_block[sine_counter];  // 0- 40000
 8003272:	4b25      	ldr	r3, [pc, #148]	; (8003308 <sine_count+0xc8>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <sine_count+0xd0>)
 800327a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800327e:	461a      	mov	r2, r3
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <sine_count+0xd4>)
 8003282:	601a      	str	r2, [r3, #0]
	sine_tempA=sine_out; // grab first value , needs to be always plus
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <sine_count+0xd4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]
	sine_tempA=sine_tempA-20000; //convert to signed
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 8003290:	3b20      	subs	r3, #32
 8003292:	60bb      	str	r3, [r7, #8]

	sine_counter++;
 8003294:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <sine_count+0xc8>)
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <sine_count+0xc8>)
 800329e:	801a      	strh	r2, [r3, #0]
	if (sine_counter>=sine_length)  sine_counter=0; // set to sample length
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <sine_count+0xc8>)
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <sine_count+0xcc>)
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <sine_count+0x72>
 80032ac:	4b16      	ldr	r3, [pc, #88]	; (8003308 <sine_count+0xc8>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	801a      	strh	r2, [r3, #0]

			sine_out = sine_block[sine_counter];  // grab second value
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <sine_count+0xc8>)
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <sine_count+0xd0>)
 80032ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80032be:	461a      	mov	r2, r3
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <sine_count+0xd4>)
 80032c2:	601a      	str	r2, [r3, #0]
		
		sine_tempB=sine_out; // grab first value
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <sine_count+0xd4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB-20000;  // convert to signed and +256 to -256
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 80032d0:	3b20      	subs	r3, #32
 80032d2:	607b      	str	r3, [r7, #4]

			sine_tempB=	sine_tempB-sine_tempA;   // calculate fraction then add
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	607b      	str	r3, [r7, #4]
			sine_tempB=sine_tempB>>5; // div 32 or 32 upsample
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	115b      	asrs	r3, r3, #5
 80032e0:	607b      	str	r3, [r7, #4]

			sine_tempB=sine_tempB*sine_frac; // mult by steps , can overshoot !!
 80032e2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	607b      	str	r3, [r7, #4]

			sine_out=(sine_tempA+sine_tempB);   // add back to start value
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	4a07      	ldr	r2, [pc, #28]	; (8003314 <sine_count+0xd4>)
 80032f6:	6013      	str	r3, [r2, #0]
			//sine_tempA=sine_tempA; //needs

			//sine_out=sine_tempA;


}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	20000ab0 	.word	0x20000ab0
 8003308:	20000aae 	.word	0x20000aae
 800330c:	20000166 	.word	0x20000166
 8003310:	08007ecc 	.word	0x08007ecc
 8003314:	20000ab4 	.word	0x20000ab4

08003318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800331c:	b672      	cpsid	i
}
 800331e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003320:	e7fe      	b.n	8003320 <Error_Handler+0x8>
	...

08003324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_MspInit+0x4c>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	4a0f      	ldr	r2, [pc, #60]	; (8003370 <HAL_MspInit+0x4c>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	6453      	str	r3, [r2, #68]	; 0x44
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_MspInit+0x4c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a08      	ldr	r2, [pc, #32]	; (8003370 <HAL_MspInit+0x4c>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	; 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <HAL_ADC_MspInit+0xdc>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d157      	bne.n	8003446 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <HAL_ADC_MspInit+0xe0>)
 800339c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339e:	4a2d      	ldr	r2, [pc, #180]	; (8003454 <HAL_ADC_MspInit+0xe0>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6453      	str	r3, [r2, #68]	; 0x44
 80033a6:	4b2b      	ldr	r3, [pc, #172]	; (8003454 <HAL_ADC_MspInit+0xe0>)
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_ADC_MspInit+0xe0>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a26      	ldr	r2, [pc, #152]	; (8003454 <HAL_ADC_MspInit+0xe0>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b24      	ldr	r3, [pc, #144]	; (8003454 <HAL_ADC_MspInit+0xe0>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 80033ce:	2338      	movs	r3, #56	; 0x38
 80033d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d2:	2303      	movs	r3, #3
 80033d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	4619      	mov	r1, r3
 80033e0:	481d      	ldr	r0, [pc, #116]	; (8003458 <HAL_ADC_MspInit+0xe4>)
 80033e2:	f001 fbe1 	bl	8004ba8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80033e6:	4b1d      	ldr	r3, [pc, #116]	; (800345c <HAL_ADC_MspInit+0xe8>)
 80033e8:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <HAL_ADC_MspInit+0xec>)
 80033ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_ADC_MspInit+0xe8>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f2:	4b1a      	ldr	r3, [pc, #104]	; (800345c <HAL_ADC_MspInit+0xe8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_ADC_MspInit+0xe8>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033fe:	4b17      	ldr	r3, [pc, #92]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003404:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800340c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003414:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003418:	f44f 7280 	mov.w	r2, #256	; 0x100
 800341c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800341e:	4b0f      	ldr	r3, [pc, #60]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003420:	2200      	movs	r2, #0
 8003422:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003426:	2200      	movs	r2, #0
 8003428:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800342a:	480c      	ldr	r0, [pc, #48]	; (800345c <HAL_ADC_MspInit+0xe8>)
 800342c:	f001 f84c 	bl	80044c8 <HAL_DMA_Init>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003436:	f7ff ff6f 	bl	8003318 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_ADC_MspInit+0xe8>)
 800343e:	639a      	str	r2, [r3, #56]	; 0x38
 8003440:	4a06      	ldr	r2, [pc, #24]	; (800345c <HAL_ADC_MspInit+0xe8>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003446:	bf00      	nop
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40012000 	.word	0x40012000
 8003454:	40023800 	.word	0x40023800
 8003458:	40020000 	.word	0x40020000
 800345c:	20000654 	.word	0x20000654
 8003460:	40026410 	.word	0x40026410

08003464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08a      	sub	sp, #40	; 0x28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <HAL_I2C_MspInit+0xa8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d13d      	bne.n	8003502 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <HAL_I2C_MspInit+0xac>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a20      	ldr	r2, [pc, #128]	; (8003510 <HAL_I2C_MspInit+0xac>)
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_I2C_MspInit+0xac>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a8:	2312      	movs	r3, #18
 80034aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80034b4:	2309      	movs	r3, #9
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 0314 	add.w	r3, r7, #20
 80034bc:	4619      	mov	r1, r3
 80034be:	4815      	ldr	r0, [pc, #84]	; (8003514 <HAL_I2C_MspInit+0xb0>)
 80034c0:	f001 fb72 	bl	8004ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ca:	2312      	movs	r3, #18
 80034cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80034d6:	2304      	movs	r3, #4
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	4619      	mov	r1, r3
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <HAL_I2C_MspInit+0xb0>)
 80034e2:	f001 fb61 	bl	8004ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <HAL_I2C_MspInit+0xac>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a08      	ldr	r2, [pc, #32]	; (8003510 <HAL_I2C_MspInit+0xac>)
 80034f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_I2C_MspInit+0xac>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003502:	bf00      	nop
 8003504:	3728      	adds	r7, #40	; 0x28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40005800 	.word	0x40005800
 8003510:	40023800 	.word	0x40023800
 8003514:	40020400 	.word	0x40020400

08003518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08a      	sub	sp, #40	; 0x28
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_SPI_MspInit+0x84>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d12c      	bne.n	8003594 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_SPI_MspInit+0x88>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <HAL_SPI_MspInit+0x88>)
 8003544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003548:	6413      	str	r3, [r2, #64]	; 0x40
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_SPI_MspInit+0x88>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003552:	613b      	str	r3, [r7, #16]
 8003554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <HAL_SPI_MspInit+0x88>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	4a10      	ldr	r2, [pc, #64]	; (80035a0 <HAL_SPI_MspInit+0x88>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	6313      	str	r3, [r2, #48]	; 0x30
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <HAL_SPI_MspInit+0x88>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB15     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8003572:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003578:	2302      	movs	r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800357c:	2302      	movs	r3, #2
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003584:	2305      	movs	r3, #5
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	4805      	ldr	r0, [pc, #20]	; (80035a4 <HAL_SPI_MspInit+0x8c>)
 8003590:	f001 fb0a 	bl	8004ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003594:	bf00      	nop
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40003800 	.word	0x40003800
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40020400 	.word	0x40020400

080035a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	f107 031c 	add.w	r3, r7, #28
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d12d      	bne.n	8003626 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	4b29      	ldr	r3, [pc, #164]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b26      	ldr	r3, [pc, #152]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8003602:	f248 0302 	movw	r3, #32770	; 0x8002
 8003606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360c:	2301      	movs	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003614:	2301      	movs	r3, #1
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	481d      	ldr	r0, [pc, #116]	; (8003694 <HAL_TIM_Encoder_MspInit+0xec>)
 8003620:	f001 fac2 	bl	8004ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003624:	e030      	b.n	8003688 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <HAL_TIM_Encoder_MspInit+0xf0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d12b      	bne.n	8003688 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6413      	str	r3, [r2, #64]	; 0x40
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003656:	f043 0302 	orr.w	r3, r3, #2
 800365a:	6313      	str	r3, [r2, #48]	; 0x30
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <HAL_TIM_Encoder_MspInit+0xe8>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003668:	23c0      	movs	r3, #192	; 0xc0
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003670:	2301      	movs	r3, #1
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003678:	2302      	movs	r3, #2
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367c:	f107 031c 	add.w	r3, r7, #28
 8003680:	4619      	mov	r1, r3
 8003682:	4806      	ldr	r0, [pc, #24]	; (800369c <HAL_TIM_Encoder_MspInit+0xf4>)
 8003684:	f001 fa90 	bl	8004ba8 <HAL_GPIO_Init>
}
 8003688:	bf00      	nop
 800368a:	3730      	adds	r7, #48	; 0x30
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40023800 	.word	0x40023800
 8003694:	40020000 	.word	0x40020000
 8003698:	40000800 	.word	0x40000800
 800369c:	40020400 	.word	0x40020400

080036a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_TIM_Base_MspInit+0x48>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d115      	bne.n	80036de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <HAL_TIM_Base_MspInit+0x4c>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <HAL_TIM_Base_MspInit+0x4c>)
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	6413      	str	r3, [r2, #64]	; 0x40
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_TIM_Base_MspInit+0x4c>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2100      	movs	r1, #0
 80036d2:	201d      	movs	r0, #29
 80036d4:	f000 fec1 	bl	800445a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80036d8:	201d      	movs	r0, #29
 80036da:	f000 feda 	bl	8004492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40023800 	.word	0x40023800

080036f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a12      	ldr	r2, [pc, #72]	; (8003758 <HAL_TIM_MspPostInit+0x68>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d11d      	bne.n	800374e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_TIM_MspPostInit+0x6c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a10      	ldr	r2, [pc, #64]	; (800375c <HAL_TIM_MspPostInit+0x6c>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_TIM_MspPostInit+0x6c>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800372e:	2301      	movs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003732:	2302      	movs	r3, #2
 8003734:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800373e:	2302      	movs	r3, #2
 8003740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	4619      	mov	r1, r3
 8003748:	4805      	ldr	r0, [pc, #20]	; (8003760 <HAL_TIM_MspPostInit+0x70>)
 800374a:	f001 fa2d 	bl	8004ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800374e:	bf00      	nop
 8003750:	3720      	adds	r7, #32
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40000400 	.word	0x40000400
 800375c:	40023800 	.word	0x40023800
 8003760:	40020400 	.word	0x40020400

08003764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <NMI_Handler+0x4>

0800376a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800376e:	e7fe      	b.n	800376e <HardFault_Handler+0x4>

08003770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003774:	e7fe      	b.n	8003774 <MemManage_Handler+0x4>

08003776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003776:	b480      	push	{r7}
 8003778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800377a:	e7fe      	b.n	800377a <BusFault_Handler+0x4>

0800377c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003780:	e7fe      	b.n	8003780 <UsageFault_Handler+0x4>

08003782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b480      	push	{r7}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b0:	f000 f8a8 	bl	8003904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037bc:	4802      	ldr	r0, [pc, #8]	; (80037c8 <TIM3_IRQHandler+0x10>)
 80037be:	f003 fb3b 	bl	8006e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	200007a0 	.word	0x200007a0

080037cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037d0:	4802      	ldr	r0, [pc, #8]	; (80037dc <DMA2_Stream0_IRQHandler+0x10>)
 80037d2:	f000 ff7f 	bl	80046d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000654 	.word	0x20000654

080037e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <SystemInit+0x28>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <SystemInit+0x28>)
 80037ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SystemInit+0x28>)
 80037f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037fa:	609a      	str	r2, [r3, #8]
#endif
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800380c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003844 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003810:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003812:	e003      	b.n	800381c <LoopCopyDataInit>

08003814 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003816:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003818:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800381a:	3104      	adds	r1, #4

0800381c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800381c:	480b      	ldr	r0, [pc, #44]	; (800384c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003820:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003822:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003824:	d3f6      	bcc.n	8003814 <CopyDataInit>
  ldr  r2, =_sbss
 8003826:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003828:	e002      	b.n	8003830 <LoopFillZerobss>

0800382a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800382a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800382c:	f842 3b04 	str.w	r3, [r2], #4

08003830 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003832:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003834:	d3f9      	bcc.n	800382a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003836:	f7ff ffd3 	bl	80037e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800383a:	f004 f949 	bl	8007ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800383e:	f7fd fa0b 	bl	8000c58 <main>
  bx  lr    
 8003842:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003844:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003848:	08008bb4 	.word	0x08008bb4
  ldr  r0, =_sdata
 800384c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003850:	200005f0 	.word	0x200005f0
  ldr  r2, =_sbss
 8003854:	200005f0 	.word	0x200005f0
  ldr  r3, = _ebss
 8003858:	20001ccc 	.word	0x20001ccc

0800385c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800385c:	e7fe      	b.n	800385c <ADC_IRQHandler>
	...

08003860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_Init+0x40>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0d      	ldr	r2, [pc, #52]	; (80038a0 <HAL_Init+0x40>)
 800386a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800386e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_Init+0x40>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <HAL_Init+0x40>)
 8003876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800387a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800387c:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <HAL_Init+0x40>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a07      	ldr	r2, [pc, #28]	; (80038a0 <HAL_Init+0x40>)
 8003882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003888:	2003      	movs	r0, #3
 800388a:	f000 fddb 	bl	8004444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800388e:	2000      	movs	r0, #0
 8003890:	f000 f808 	bl	80038a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003894:	f7ff fd46 	bl	8003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023c00 	.word	0x40023c00

080038a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038ac:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_InitTick+0x54>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_InitTick+0x58>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	4619      	mov	r1, r3
 80038b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80038be:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fdf3 	bl	80044ae <HAL_SYSTICK_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e00e      	b.n	80038f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b0f      	cmp	r3, #15
 80038d6:	d80a      	bhi.n	80038ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038d8:	2200      	movs	r2, #0
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295
 80038e0:	f000 fdbb 	bl	800445a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <HAL_InitTick+0x5c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200005e4 	.word	0x200005e4
 80038fc:	200005ec 	.word	0x200005ec
 8003900:	200005e8 	.word	0x200005e8

08003904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003908:	4b06      	ldr	r3, [pc, #24]	; (8003924 <HAL_IncTick+0x20>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_IncTick+0x24>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4413      	add	r3, r2
 8003914:	4a04      	ldr	r2, [pc, #16]	; (8003928 <HAL_IncTick+0x24>)
 8003916:	6013      	str	r3, [r2, #0]
}
 8003918:	bf00      	nop
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	200005ec 	.word	0x200005ec
 8003928:	20001cc8 	.word	0x20001cc8

0800392c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return uwTick;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_GetTick+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20001cc8 	.word	0x20001cc8

08003944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7ff ffee 	bl	800392c <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d005      	beq.n	800396a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <HAL_Delay+0x44>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800396a:	bf00      	nop
 800396c:	f7ff ffde 	bl	800392c <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	429a      	cmp	r2, r3
 800397a:	d8f7      	bhi.n	800396c <HAL_Delay+0x28>
  {
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	200005ec 	.word	0x200005ec

0800398c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e033      	b.n	8003a0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fce2 	bl	8003374 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80039d2:	f023 0302 	bic.w	r3, r3, #2
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fae2 	bl	8003fa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f023 0303 	bic.w	r3, r3, #3
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40
 80039fa:	e001      	b.n	8003a00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Start+0x1a>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e08a      	b.n	8003b44 <HAL_ADC_Start+0x130>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d018      	beq.n	8003a76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a54:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_ADC_Start+0x13c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3e      	ldr	r2, [pc, #248]	; (8003b54 <HAL_ADC_Start+0x140>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	0c9a      	lsrs	r2, r3, #18
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a68:	e002      	b.n	8003a70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f9      	bne.n	8003a6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d15e      	bne.n	8003b42 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac2:	d106      	bne.n	8003ad2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac8:	f023 0206 	bic.w	r2, r3, #6
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	645a      	str	r2, [r3, #68]	; 0x44
 8003ad0:	e002      	b.n	8003ad8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <HAL_ADC_Start+0x144>)
 8003ae2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003aec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d11c      	bne.n	8003b42 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	e013      	b.n	8003b42 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <HAL_ADC_Start+0x148>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10e      	bne.n	8003b42 <HAL_ADC_Start+0x12e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d107      	bne.n	8003b42 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b40:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	200005e4 	.word	0x200005e4
 8003b54:	431bde83 	.word	0x431bde83
 8003b58:	40012300 	.word	0x40012300
 8003b5c:	40012000 	.word	0x40012000

08003b60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Start_DMA+0x1e>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e0b1      	b.n	8003ce2 <HAL_ADC_Start_DMA+0x182>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d018      	beq.n	8003bc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba4:	4b51      	ldr	r3, [pc, #324]	; (8003cec <HAL_ADC_Start_DMA+0x18c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <HAL_ADC_Start_DMA+0x190>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0c9a      	lsrs	r2, r3, #18
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bb8:	e002      	b.n	8003bc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f9      	bne.n	8003bba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	f040 8085 	bne.w	8003ce0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	f023 0206 	bic.w	r2, r3, #6
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	; 0x44
 8003c22:	e002      	b.n	8003c2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_ADC_Start_DMA+0x194>)
 8003c34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <HAL_ADC_Start_DMA+0x198>)
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	4a2e      	ldr	r2, [pc, #184]	; (8003cfc <HAL_ADC_Start_DMA+0x19c>)
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	4a2d      	ldr	r2, [pc, #180]	; (8003d00 <HAL_ADC_Start_DMA+0x1a0>)
 8003c4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	334c      	adds	r3, #76	; 0x4c
 8003c82:	4619      	mov	r1, r3
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f000 fccc 	bl	8004624 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10f      	bne.n	8003cb8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d11c      	bne.n	8003ce0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	e013      	b.n	8003ce0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a11      	ldr	r2, [pc, #68]	; (8003d04 <HAL_ADC_Start_DMA+0x1a4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_ADC_Start_DMA+0x180>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d107      	bne.n	8003ce0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cde:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	200005e4 	.word	0x200005e4
 8003cf0:	431bde83 	.word	0x431bde83
 8003cf4:	40012300 	.word	0x40012300
 8003cf8:	080041a1 	.word	0x080041a1
 8003cfc:	0800425b 	.word	0x0800425b
 8003d00:	08004277 	.word	0x08004277
 8003d04:	40012000 	.word	0x40012000

08003d08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x1c>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e113      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x244>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b09      	cmp	r3, #9
 8003d6e:	d925      	bls.n	8003dbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68d9      	ldr	r1, [r3, #12]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	3b1e      	subs	r3, #30
 8003d86:	2207      	movs	r2, #7
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	400a      	ands	r2, r1
 8003d94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4618      	mov	r0, r3
 8003da8:	4603      	mov	r3, r0
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4403      	add	r3, r0
 8003dae:	3b1e      	subs	r3, #30
 8003db0:	409a      	lsls	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	e022      	b.n	8003e02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6919      	ldr	r1, [r3, #16]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4613      	mov	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	4413      	add	r3, r2
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	400a      	ands	r2, r1
 8003dde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4618      	mov	r0, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4403      	add	r3, r0
 8003df8:	409a      	lsls	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d824      	bhi.n	8003e54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	3b05      	subs	r3, #5
 8003e1c:	221f      	movs	r2, #31
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43da      	mvns	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	400a      	ands	r2, r1
 8003e2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	4618      	mov	r0, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	3b05      	subs	r3, #5
 8003e46:	fa00 f203 	lsl.w	r2, r0, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	635a      	str	r2, [r3, #52]	; 0x34
 8003e52:	e04c      	b.n	8003eee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d824      	bhi.n	8003ea6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b23      	subs	r3, #35	; 0x23
 8003e6e:	221f      	movs	r2, #31
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43da      	mvns	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	3b23      	subs	r3, #35	; 0x23
 8003e98:	fa00 f203 	lsl.w	r2, r0, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea4:	e023      	b.n	8003eee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3b41      	subs	r3, #65	; 0x41
 8003eb8:	221f      	movs	r2, #31
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	3b41      	subs	r3, #65	; 0x41
 8003ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eee:	4b29      	ldr	r3, [pc, #164]	; (8003f94 <HAL_ADC_ConfigChannel+0x250>)
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <HAL_ADC_ConfigChannel+0x254>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10f      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x1d8>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b12      	cmp	r3, #18
 8003f02:	d10b      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <HAL_ADC_ConfigChannel+0x254>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d12b      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x23a>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	; (8003f9c <HAL_ADC_ConfigChannel+0x258>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <HAL_ADC_ConfigChannel+0x1f4>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b11      	cmp	r3, #17
 8003f36:	d122      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <HAL_ADC_ConfigChannel+0x258>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d111      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <HAL_ADC_ConfigChannel+0x25c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a11      	ldr	r2, [pc, #68]	; (8003fa4 <HAL_ADC_ConfigChannel+0x260>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0c9a      	lsrs	r2, r3, #18
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f70:	e002      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f9      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40012300 	.word	0x40012300
 8003f98:	40012000 	.word	0x40012000
 8003f9c:	10000012 	.word	0x10000012
 8003fa0:	200005e4 	.word	0x200005e4
 8003fa4:	431bde83 	.word	0x431bde83

08003fa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb0:	4b79      	ldr	r3, [pc, #484]	; (8004198 <ADC_Init+0x1f0>)
 8003fb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	021a      	lsls	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403a:	4a58      	ldr	r2, [pc, #352]	; (800419c <ADC_Init+0x1f4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800404e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6899      	ldr	r1, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	e00f      	b.n	80040a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0202 	bic.w	r2, r2, #2
 80040b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6899      	ldr	r1, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7e1b      	ldrb	r3, [r3, #24]
 80040c0:	005a      	lsls	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	3b01      	subs	r3, #1
 8004100:	035a      	lsls	r2, r3, #13
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	e007      	b.n	800411c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800411a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	3b01      	subs	r3, #1
 8004138:	051a      	lsls	r2, r3, #20
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6899      	ldr	r1, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800415e:	025a      	lsls	r2, r3, #9
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6899      	ldr	r1, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	029a      	lsls	r2, r3, #10
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
}
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40012300 	.word	0x40012300
 800419c:	0f000001 	.word	0x0f000001

080041a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d13c      	bne.n	8004234 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d12b      	bne.n	800422c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d127      	bne.n	800422c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d006      	beq.n	80041f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d119      	bne.n	800422c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0220 	bic.w	r2, r2, #32
 8004206:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f7ff fd6b 	bl	8003d08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004232:	e00e      	b.n	8004252 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7ff fd75 	bl	8003d30 <HAL_ADC_ErrorCallback>
}
 8004246:	e004      	b.n	8004252 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
}
 8004252:	bf00      	nop
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fd57 	bl	8003d1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2240      	movs	r2, #64	; 0x40
 8004288:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	f043 0204 	orr.w	r2, r3, #4
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fd4a 	bl	8003d30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042c0:	4013      	ands	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042d6:	4a04      	ldr	r2, [pc, #16]	; (80042e8 <__NVIC_SetPriorityGrouping+0x44>)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	60d3      	str	r3, [r2, #12]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <__NVIC_GetPriorityGrouping+0x18>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	f003 0307 	and.w	r3, r3, #7
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004316:	2b00      	cmp	r3, #0
 8004318:	db0b      	blt.n	8004332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4907      	ldr	r1, [pc, #28]	; (8004340 <__NVIC_EnableIRQ+0x38>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2001      	movs	r0, #1
 800432a:	fa00 f202 	lsl.w	r2, r0, r2
 800432e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	e000e100 	.word	0xe000e100

08004344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	6039      	str	r1, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	db0a      	blt.n	800436e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	490c      	ldr	r1, [pc, #48]	; (8004390 <__NVIC_SetPriority+0x4c>)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	440b      	add	r3, r1
 8004368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800436c:	e00a      	b.n	8004384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <__NVIC_SetPriority+0x50>)
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	3b04      	subs	r3, #4
 800437c:	0112      	lsls	r2, r2, #4
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	440b      	add	r3, r1
 8004382:	761a      	strb	r2, [r3, #24]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	; 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f1c3 0307 	rsb	r3, r3, #7
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf28      	it	cs
 80043b6:	2304      	movcs	r3, #4
 80043b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	3304      	adds	r3, #4
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d902      	bls.n	80043c8 <NVIC_EncodePriority+0x30>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	3b03      	subs	r3, #3
 80043c6:	e000      	b.n	80043ca <NVIC_EncodePriority+0x32>
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	401a      	ands	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043e0:	f04f 31ff 	mov.w	r1, #4294967295
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ea:	43d9      	mvns	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	4313      	orrs	r3, r2
         );
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3724      	adds	r7, #36	; 0x24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004410:	d301      	bcc.n	8004416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004416:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <SysTick_Config+0x40>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441e:	210f      	movs	r1, #15
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	f7ff ff8e 	bl	8004344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <SysTick_Config+0x40>)
 800442a:	2200      	movs	r2, #0
 800442c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SysTick_Config+0x40>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010

08004444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ff29 	bl	80042a4 <__NVIC_SetPriorityGrouping>
}
 8004452:	bf00      	nop
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	607a      	str	r2, [r7, #4]
 8004466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800446c:	f7ff ff3e 	bl	80042ec <__NVIC_GetPriorityGrouping>
 8004470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68b9      	ldr	r1, [r7, #8]
 8004476:	6978      	ldr	r0, [r7, #20]
 8004478:	f7ff ff8e 	bl	8004398 <NVIC_EncodePriority>
 800447c:	4602      	mov	r2, r0
 800447e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff ff5d 	bl	8004344 <__NVIC_SetPriority>
}
 800448a:	bf00      	nop
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	4603      	mov	r3, r0
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800449c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff31 	bl	8004308 <__NVIC_EnableIRQ>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff ffa2 	bl	8004400 <SysTick_Config>
 80044bc:	4603      	mov	r3, r0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7ff fa2a 	bl	800392c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e099      	b.n	8004618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004504:	e00f      	b.n	8004526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004506:	f7ff fa11 	bl	800392c <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b05      	cmp	r3, #5
 8004512:	d908      	bls.n	8004526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2203      	movs	r2, #3
 800451e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e078      	b.n	8004618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e8      	bne.n	8004506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_DMA_Init+0x158>)
 8004540:	4013      	ands	r3, r2
 8004542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800456a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b04      	cmp	r3, #4
 800457e:	d107      	bne.n	8004590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	4313      	orrs	r3, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f023 0307 	bic.w	r3, r3, #7
 80045a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d117      	bne.n	80045ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fa6f 	bl	8004ab0 <DMA_CheckFifoParam>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2240      	movs	r2, #64	; 0x40
 80045dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80045e6:	2301      	movs	r3, #1
 80045e8:	e016      	b.n	8004618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 fa26 	bl	8004a44 <DMA_CalcBaseAndBitshift>
 80045f8:	4603      	mov	r3, r0
 80045fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	223f      	movs	r2, #63	; 0x3f
 8004602:	409a      	lsls	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	f010803f 	.word	0xf010803f

08004624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_DMA_Start_IT+0x26>
 8004646:	2302      	movs	r3, #2
 8004648:	e040      	b.n	80046cc <HAL_DMA_Start_IT+0xa8>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d12f      	bne.n	80046be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f9b8 	bl	80049e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	223f      	movs	r2, #63	; 0x3f
 800467e:	409a      	lsls	r2, r3
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0216 	orr.w	r2, r2, #22
 8004692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e005      	b.n	80046ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
 80046c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046e0:	4b8e      	ldr	r3, [pc, #568]	; (800491c <HAL_DMA_IRQHandler+0x248>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a8e      	ldr	r2, [pc, #568]	; (8004920 <HAL_DMA_IRQHandler+0x24c>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	0a9b      	lsrs	r3, r3, #10
 80046ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fe:	2208      	movs	r2, #8
 8004700:	409a      	lsls	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d01a      	beq.n	8004740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	d013      	beq.n	8004740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0204 	bic.w	r2, r2, #4
 8004726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	2208      	movs	r2, #8
 800472e:	409a      	lsls	r2, r3
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	2201      	movs	r2, #1
 8004746:	409a      	lsls	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004762:	2201      	movs	r2, #1
 8004764:	409a      	lsls	r2, r3
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	f043 0202 	orr.w	r2, r3, #2
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	2204      	movs	r2, #4
 800477c:	409a      	lsls	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d012      	beq.n	80047ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004798:	2204      	movs	r2, #4
 800479a:	409a      	lsls	r2, r3
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	2210      	movs	r2, #16
 80047b2:	409a      	lsls	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4013      	ands	r3, r2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d043      	beq.n	8004844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d03c      	beq.n	8004844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	2210      	movs	r2, #16
 80047d0:	409a      	lsls	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d018      	beq.n	8004816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d024      	beq.n	8004844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	4798      	blx	r3
 8004802:	e01f      	b.n	8004844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
 8004814:	e016      	b.n	8004844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0208 	bic.w	r2, r2, #8
 8004832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	2220      	movs	r2, #32
 800484a:	409a      	lsls	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4013      	ands	r3, r2
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 808f 	beq.w	8004974 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8087 	beq.w	8004974 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486a:	2220      	movs	r2, #32
 800486c:	409a      	lsls	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b05      	cmp	r3, #5
 800487c:	d136      	bne.n	80048ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0216 	bic.w	r2, r2, #22
 800488c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800489c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <HAL_DMA_IRQHandler+0x1da>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0208 	bic.w	r2, r2, #8
 80048bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c2:	223f      	movs	r2, #63	; 0x3f
 80048c4:	409a      	lsls	r2, r3
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d07e      	beq.n	80049e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
        }
        return;
 80048ea:	e079      	b.n	80049e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01d      	beq.n	8004936 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10d      	bne.n	8004924 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490c:	2b00      	cmp	r3, #0
 800490e:	d031      	beq.n	8004974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	4798      	blx	r3
 8004918:	e02c      	b.n	8004974 <HAL_DMA_IRQHandler+0x2a0>
 800491a:	bf00      	nop
 800491c:	200005e4 	.word	0x200005e4
 8004920:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d023      	beq.n	8004974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
 8004934:	e01e      	b.n	8004974 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0210 	bic.w	r2, r2, #16
 8004952:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	2b00      	cmp	r3, #0
 800497a:	d032      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d022      	beq.n	80049ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2205      	movs	r2, #5
 800498c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d307      	bcc.n	80049bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f2      	bne.n	80049a0 <HAL_DMA_IRQHandler+0x2cc>
 80049ba:	e000      	b.n	80049be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049bc:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
 80049de:	e000      	b.n	80049e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049e0:	bf00      	nop
    }
  }
}
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d108      	bne.n	8004a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a26:	e007      	b.n	8004a38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	3b10      	subs	r3, #16
 8004a54:	4a14      	ldr	r2, [pc, #80]	; (8004aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <DMA_CalcBaseAndBitshift+0x68>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d909      	bls.n	8004a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	659a      	str	r2, [r3, #88]	; 0x58
 8004a84:	e007      	b.n	8004a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	aaaaaaab 	.word	0xaaaaaaab
 8004aac:	08008398 	.word	0x08008398

08004ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11f      	bne.n	8004b0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d856      	bhi.n	8004b7e <DMA_CheckFifoParam+0xce>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <DMA_CheckFifoParam+0x28>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004afb 	.word	0x08004afb
 8004ae0:	08004ae9 	.word	0x08004ae9
 8004ae4:	08004b7f 	.word	0x08004b7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d046      	beq.n	8004b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af8:	e043      	b.n	8004b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b02:	d140      	bne.n	8004b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b08:	e03d      	b.n	8004b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	d121      	bne.n	8004b58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d837      	bhi.n	8004b8a <DMA_CheckFifoParam+0xda>
 8004b1a:	a201      	add	r2, pc, #4	; (adr r2, 8004b20 <DMA_CheckFifoParam+0x70>)
 8004b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b20:	08004b31 	.word	0x08004b31
 8004b24:	08004b37 	.word	0x08004b37
 8004b28:	08004b31 	.word	0x08004b31
 8004b2c:	08004b49 	.word	0x08004b49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      break;
 8004b34:	e030      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d025      	beq.n	8004b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b46:	e022      	b.n	8004b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b50:	d11f      	bne.n	8004b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b56:	e01c      	b.n	8004b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d903      	bls.n	8004b66 <DMA_CheckFifoParam+0xb6>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d003      	beq.n	8004b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b64:	e018      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6a:	e015      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00e      	beq.n	8004b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e00b      	b.n	8004b96 <DMA_CheckFifoParam+0xe6>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e00a      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
 8004b84:	e008      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e006      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e004      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e002      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <DMA_CheckFifoParam+0xe8>
      break;
 8004b96:	bf00      	nop
    }
  } 
  
  return status; 
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b089      	sub	sp, #36	; 0x24
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	e159      	b.n	8004e78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	f040 8148 	bne.w	8004e72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d00b      	beq.n	8004c02 <HAL_GPIO_Init+0x5a>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d007      	beq.n	8004c02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bf6:	2b11      	cmp	r3, #17
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b12      	cmp	r3, #18
 8004c00:	d130      	bne.n	8004c64 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c38:	2201      	movs	r2, #1
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f003 0201 	and.w	r2, r3, #1
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d003      	beq.n	8004ca4 <HAL_GPIO_Init+0xfc>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b12      	cmp	r3, #18
 8004ca2:	d123      	bne.n	8004cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	08da      	lsrs	r2, r3, #3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3208      	adds	r2, #8
 8004cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	220f      	movs	r2, #15
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	08da      	lsrs	r2, r3, #3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3208      	adds	r2, #8
 8004ce6:	69b9      	ldr	r1, [r7, #24]
 8004ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f003 0203 	and.w	r2, r3, #3
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a2 	beq.w	8004e72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	4b57      	ldr	r3, [pc, #348]	; (8004e90 <HAL_GPIO_Init+0x2e8>)
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	4a56      	ldr	r2, [pc, #344]	; (8004e90 <HAL_GPIO_Init+0x2e8>)
 8004d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004d3e:	4b54      	ldr	r3, [pc, #336]	; (8004e90 <HAL_GPIO_Init+0x2e8>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4a:	4a52      	ldr	r2, [pc, #328]	; (8004e94 <HAL_GPIO_Init+0x2ec>)
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	089b      	lsrs	r3, r3, #2
 8004d50:	3302      	adds	r3, #2
 8004d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	220f      	movs	r2, #15
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a49      	ldr	r2, [pc, #292]	; (8004e98 <HAL_GPIO_Init+0x2f0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d019      	beq.n	8004daa <HAL_GPIO_Init+0x202>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a48      	ldr	r2, [pc, #288]	; (8004e9c <HAL_GPIO_Init+0x2f4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_GPIO_Init+0x1fe>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a47      	ldr	r2, [pc, #284]	; (8004ea0 <HAL_GPIO_Init+0x2f8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00d      	beq.n	8004da2 <HAL_GPIO_Init+0x1fa>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a46      	ldr	r2, [pc, #280]	; (8004ea4 <HAL_GPIO_Init+0x2fc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <HAL_GPIO_Init+0x1f6>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a45      	ldr	r2, [pc, #276]	; (8004ea8 <HAL_GPIO_Init+0x300>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <HAL_GPIO_Init+0x1f2>
 8004d96:	2304      	movs	r3, #4
 8004d98:	e008      	b.n	8004dac <HAL_GPIO_Init+0x204>
 8004d9a:	2307      	movs	r3, #7
 8004d9c:	e006      	b.n	8004dac <HAL_GPIO_Init+0x204>
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e004      	b.n	8004dac <HAL_GPIO_Init+0x204>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e002      	b.n	8004dac <HAL_GPIO_Init+0x204>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <HAL_GPIO_Init+0x204>
 8004daa:	2300      	movs	r3, #0
 8004dac:	69fa      	ldr	r2, [r7, #28]
 8004dae:	f002 0203 	and.w	r2, r2, #3
 8004db2:	0092      	lsls	r2, r2, #2
 8004db4:	4093      	lsls	r3, r2
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dbc:	4935      	ldr	r1, [pc, #212]	; (8004e94 <HAL_GPIO_Init+0x2ec>)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	089b      	lsrs	r3, r3, #2
 8004dc2:	3302      	adds	r3, #2
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dca:	4b38      	ldr	r3, [pc, #224]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dee:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e18:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e1e:	4b23      	ldr	r3, [pc, #140]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	43db      	mvns	r3, r3
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e42:	4a1a      	ldr	r2, [pc, #104]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e48:	4b18      	ldr	r3, [pc, #96]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4013      	ands	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e6c:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <HAL_GPIO_Init+0x304>)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3301      	adds	r3, #1
 8004e76:	61fb      	str	r3, [r7, #28]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	f67f aea2 	bls.w	8004bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	3724      	adds	r7, #36	; 0x24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40013800 	.word	0x40013800
 8004e98:	40020000 	.word	0x40020000
 8004e9c:	40020400 	.word	0x40020400
 8004ea0:	40020800 	.word	0x40020800
 8004ea4:	40020c00 	.word	0x40020c00
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	40013c00 	.word	0x40013c00

08004eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec0:	787b      	ldrb	r3, [r7, #1]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ecc:	e003      	b.n	8004ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ece:	887b      	ldrh	r3, [r7, #2]
 8004ed0:	041a      	lsls	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	619a      	str	r2, [r3, #24]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e12b      	b.n	800514e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fe faaa 	bl	8003464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	; 0x24
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f48:	f001 fbb2 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
 8004f4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	4a81      	ldr	r2, [pc, #516]	; (8005158 <HAL_I2C_Init+0x274>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d807      	bhi.n	8004f68 <HAL_I2C_Init+0x84>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a80      	ldr	r2, [pc, #512]	; (800515c <HAL_I2C_Init+0x278>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	bf94      	ite	ls
 8004f60:	2301      	movls	r3, #1
 8004f62:	2300      	movhi	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e006      	b.n	8004f76 <HAL_I2C_Init+0x92>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a7d      	ldr	r2, [pc, #500]	; (8005160 <HAL_I2C_Init+0x27c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	bf94      	ite	ls
 8004f70:	2301      	movls	r3, #1
 8004f72:	2300      	movhi	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e0e7      	b.n	800514e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a78      	ldr	r2, [pc, #480]	; (8005164 <HAL_I2C_Init+0x280>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0c9b      	lsrs	r3, r3, #18
 8004f88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <HAL_I2C_Init+0x274>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d802      	bhi.n	8004fb8 <HAL_I2C_Init+0xd4>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	e009      	b.n	8004fcc <HAL_I2C_Init+0xe8>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	4a69      	ldr	r2, [pc, #420]	; (8005168 <HAL_I2C_Init+0x284>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	099b      	lsrs	r3, r3, #6
 8004fca:	3301      	adds	r3, #1
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004fde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	495c      	ldr	r1, [pc, #368]	; (8005158 <HAL_I2C_Init+0x274>)
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	d819      	bhi.n	8005020 <HAL_I2C_Init+0x13c>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1e59      	subs	r1, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005000:	400b      	ands	r3, r1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_I2C_Init+0x138>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1e59      	subs	r1, r3, #1
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fbb1 f3f3 	udiv	r3, r1, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501a:	e051      	b.n	80050c0 <HAL_I2C_Init+0x1dc>
 800501c:	2304      	movs	r3, #4
 800501e:	e04f      	b.n	80050c0 <HAL_I2C_Init+0x1dc>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <HAL_I2C_Init+0x168>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1e58      	subs	r0, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6859      	ldr	r1, [r3, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	440b      	add	r3, r1
 8005036:	fbb0 f3f3 	udiv	r3, r0, r3
 800503a:	3301      	adds	r3, #1
 800503c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e012      	b.n	8005072 <HAL_I2C_Init+0x18e>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	1e58      	subs	r0, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	0099      	lsls	r1, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005062:	3301      	adds	r3, #1
 8005064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005068:	2b00      	cmp	r3, #0
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_I2C_Init+0x196>
 8005076:	2301      	movs	r3, #1
 8005078:	e022      	b.n	80050c0 <HAL_I2C_Init+0x1dc>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10e      	bne.n	80050a0 <HAL_I2C_Init+0x1bc>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1e58      	subs	r0, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6859      	ldr	r1, [r3, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	440b      	add	r3, r1
 8005090:	fbb0 f3f3 	udiv	r3, r0, r3
 8005094:	3301      	adds	r3, #1
 8005096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509e:	e00f      	b.n	80050c0 <HAL_I2C_Init+0x1dc>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	1e58      	subs	r0, r3, #1
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6859      	ldr	r1, [r3, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	0099      	lsls	r1, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80050b6:	3301      	adds	r3, #1
 80050b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	6809      	ldr	r1, [r1, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80050ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6911      	ldr	r1, [r2, #16]
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	4311      	orrs	r1, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6812      	ldr	r2, [r2, #0]
 8005100:	430b      	orrs	r3, r1
 8005102:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	000186a0 	.word	0x000186a0
 800515c:	001e847f 	.word	0x001e847f
 8005160:	003d08ff 	.word	0x003d08ff
 8005164:	431bde83 	.word	0x431bde83
 8005168:	10624dd3 	.word	0x10624dd3

0800516c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	461a      	mov	r2, r3
 800517a:	4603      	mov	r3, r0
 800517c:	817b      	strh	r3, [r7, #10]
 800517e:	460b      	mov	r3, r1
 8005180:	813b      	strh	r3, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005186:	f7fe fbd1 	bl	800392c <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 80d9 	bne.w	800534c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	2319      	movs	r3, #25
 80051a0:	2201      	movs	r2, #1
 80051a2:	496d      	ldr	r1, [pc, #436]	; (8005358 <HAL_I2C_Mem_Write+0x1ec>)
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fc7f 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051b0:	2302      	movs	r3, #2
 80051b2:	e0cc      	b.n	800534e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_I2C_Mem_Write+0x56>
 80051be:	2302      	movs	r3, #2
 80051c0:	e0c5      	b.n	800534e <HAL_I2C_Mem_Write+0x1e2>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d007      	beq.n	80051e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2221      	movs	r2, #33	; 0x21
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2240      	movs	r2, #64	; 0x40
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a3a      	ldr	r2, [r7, #32]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4a4d      	ldr	r2, [pc, #308]	; (800535c <HAL_I2C_Mem_Write+0x1f0>)
 8005228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800522a:	88f8      	ldrh	r0, [r7, #6]
 800522c:	893a      	ldrh	r2, [r7, #8]
 800522e:	8979      	ldrh	r1, [r7, #10]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4603      	mov	r3, r0
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fab6 	bl	80057ac <I2C_RequestMemoryWrite>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d052      	beq.n	80052ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e081      	b.n	800534e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fd00 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b04      	cmp	r3, #4
 8005260:	d107      	bne.n	8005272 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e06b      	b.n	800534e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	781a      	ldrb	r2, [r3, #0]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005290:	3b01      	subs	r3, #1
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d11b      	bne.n	80052ec <HAL_I2C_Mem_Write+0x180>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d017      	beq.n	80052ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1aa      	bne.n	800524a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 fcec 	bl	8005cd6 <I2C_WaitOnBTFFlagUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00d      	beq.n	8005320 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	2b04      	cmp	r3, #4
 800530a:	d107      	bne.n	800531c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800531a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e016      	b.n	800534e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800532e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	00100002 	.word	0x00100002
 800535c:	ffff0000 	.word	0xffff0000

08005360 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08c      	sub	sp, #48	; 0x30
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	4608      	mov	r0, r1
 800536a:	4611      	mov	r1, r2
 800536c:	461a      	mov	r2, r3
 800536e:	4603      	mov	r3, r0
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	460b      	mov	r3, r1
 8005374:	813b      	strh	r3, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800537a:	f7fe fad7 	bl	800392c <HAL_GetTick>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b20      	cmp	r3, #32
 800538a:	f040 8208 	bne.w	800579e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	2319      	movs	r3, #25
 8005394:	2201      	movs	r2, #1
 8005396:	497b      	ldr	r1, [pc, #492]	; (8005584 <HAL_I2C_Mem_Read+0x224>)
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fb85 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
 80053a6:	e1fb      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_I2C_Mem_Read+0x56>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e1f4      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d007      	beq.n	80053dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2222      	movs	r2, #34	; 0x22
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2240      	movs	r2, #64	; 0x40
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005406:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800540c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a5b      	ldr	r2, [pc, #364]	; (8005588 <HAL_I2C_Mem_Read+0x228>)
 800541c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800541e:	88f8      	ldrh	r0, [r7, #6]
 8005420:	893a      	ldrh	r2, [r7, #8]
 8005422:	8979      	ldrh	r1, [r7, #10]
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	4603      	mov	r3, r0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 fa52 	bl	80058d8 <I2C_RequestMemoryRead>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e1b0      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	e184      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005472:	2b01      	cmp	r3, #1
 8005474:	d11b      	bne.n	80054ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	61fb      	str	r3, [r7, #28]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e164      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d11b      	bne.n	80054ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	61bb      	str	r3, [r7, #24]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	e144      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005504:	e138      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	2b03      	cmp	r3, #3
 800550c:	f200 80f1 	bhi.w	80056f2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	2b01      	cmp	r3, #1
 8005516:	d123      	bne.n	8005560 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fc1b 	bl	8005d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e139      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	691a      	ldr	r2, [r3, #16]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005548:	3b01      	subs	r3, #1
 800554a:	b29a      	uxth	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800555e:	e10b      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005564:	2b02      	cmp	r3, #2
 8005566:	d14e      	bne.n	8005606 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2200      	movs	r2, #0
 8005570:	4906      	ldr	r1, [pc, #24]	; (800558c <HAL_I2C_Mem_Read+0x22c>)
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fa98 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d008      	beq.n	8005590 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e10e      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
 8005582:	bf00      	nop
 8005584:	00100002 	.word	0x00100002
 8005588:	ffff0000 	.word	0xffff0000
 800558c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691a      	ldr	r2, [r3, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005604:	e0b8      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2200      	movs	r2, #0
 800560e:	4966      	ldr	r1, [pc, #408]	; (80057a8 <HAL_I2C_Mem_Read+0x448>)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fa49 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0bf      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	3b01      	subs	r3, #1
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2200      	movs	r2, #0
 800566a:	494f      	ldr	r1, [pc, #316]	; (80057a8 <HAL_I2C_Mem_Read+0x448>)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 fa1b 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e091      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056f0:	e042      	b.n	8005778 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fb2e 	bl	8005d58 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e04c      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b04      	cmp	r3, #4
 8005744:	d118      	bne.n	8005778 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	b2d2      	uxtb	r2, r2
 8005752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	f47f aec2 	bne.w	8005506 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e000      	b.n	80057a0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3728      	adds	r7, #40	; 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	00010004 	.word	0x00010004

080057ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af02      	add	r7, sp, #8
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	4608      	mov	r0, r1
 80057b6:	4611      	mov	r1, r2
 80057b8:	461a      	mov	r2, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	817b      	strh	r3, [r7, #10]
 80057be:	460b      	mov	r3, r1
 80057c0:	813b      	strh	r3, [r7, #8]
 80057c2:	4613      	mov	r3, r2
 80057c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	2200      	movs	r2, #0
 80057de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f960 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fc:	d103      	bne.n	8005806 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e05f      	b.n	80058ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800580a:	897b      	ldrh	r3, [r7, #10]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005818:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	6a3a      	ldr	r2, [r7, #32]
 800581e:	492d      	ldr	r1, [pc, #180]	; (80058d4 <I2C_RequestMemoryWrite+0x128>)
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f998 	bl	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e04c      	b.n	80058ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	6a39      	ldr	r1, [r7, #32]
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fa02 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	2b04      	cmp	r3, #4
 800585c:	d107      	bne.n	800586e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800586c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e02b      	b.n	80058ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d105      	bne.n	8005884 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005878:	893b      	ldrh	r3, [r7, #8]
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	611a      	str	r2, [r3, #16]
 8005882:	e021      	b.n	80058c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005884:	893b      	ldrh	r3, [r7, #8]
 8005886:	0a1b      	lsrs	r3, r3, #8
 8005888:	b29b      	uxth	r3, r3
 800588a:	b2da      	uxtb	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	6a39      	ldr	r1, [r7, #32]
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 f9dc 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00d      	beq.n	80058be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d107      	bne.n	80058ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e005      	b.n	80058ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058be:	893b      	ldrh	r3, [r7, #8]
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	00010002 	.word	0x00010002

080058d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	817b      	strh	r3, [r7, #10]
 80058ea:	460b      	mov	r3, r1
 80058ec:	813b      	strh	r3, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005900:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005910:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	2200      	movs	r2, #0
 800591a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 f8c2 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005938:	d103      	bne.n	8005942 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0aa      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005946:	897b      	ldrh	r3, [r7, #10]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005954:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	6a3a      	ldr	r2, [r7, #32]
 800595a:	4952      	ldr	r1, [pc, #328]	; (8005aa4 <I2C_RequestMemoryRead+0x1cc>)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f8fa 	bl	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e097      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005984:	6a39      	ldr	r1, [r7, #32]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f964 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00d      	beq.n	80059ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	2b04      	cmp	r3, #4
 8005998:	d107      	bne.n	80059aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e076      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d105      	bne.n	80059c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059b4:	893b      	ldrh	r3, [r7, #8]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	611a      	str	r2, [r3, #16]
 80059be:	e021      	b.n	8005a04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059c0:	893b      	ldrh	r3, [r7, #8]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d0:	6a39      	ldr	r1, [r7, #32]
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f93e 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d107      	bne.n	80059f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e050      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059fa:	893b      	ldrh	r3, [r7, #8]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a06:	6a39      	ldr	r1, [r7, #32]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f923 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00d      	beq.n	8005a30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d107      	bne.n	8005a2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e035      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f82b 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00d      	beq.n	8005a74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a66:	d103      	bne.n	8005a70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e013      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a74:	897b      	ldrh	r3, [r7, #10]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	4906      	ldr	r1, [pc, #24]	; (8005aa4 <I2C_RequestMemoryRead+0x1cc>)
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 f863 	bl	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	00010002 	.word	0x00010002

08005aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab8:	e025      	b.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d021      	beq.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fd ff33 	bl	800392c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e023      	b.n	8005b4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10d      	bne.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	43da      	mvns	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	e00c      	b.n	8005b46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	43da      	mvns	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4013      	ands	r3, r2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d0b6      	beq.n	8005aba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b64:	e051      	b.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d123      	bne.n	8005bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e046      	b.n	8005c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d021      	beq.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fd feb1 	bl	800392c <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e020      	b.n	8005c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10c      	bne.n	8005c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e00b      	b.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	43da      	mvns	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d18d      	bne.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c60:	e02d      	b.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f8ce 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e02d      	b.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d021      	beq.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fd fe57 	bl	800392c <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e007      	b.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d1ca      	bne.n	8005c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ce2:	e02d      	b.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f88d 	bl	8005e04 <I2C_IsAcknowledgeFailed>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e02d      	b.n	8005d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d021      	beq.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cfc:	f7fd fe16 	bl	800392c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d302      	bcc.n	8005d12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d116      	bne.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e007      	b.n	8005d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d1ca      	bne.n	8005ce4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d64:	e042      	b.n	8005dec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0310 	and.w	r3, r3, #16
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d119      	bne.n	8005da8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f06f 0210 	mvn.w	r2, #16
 8005d7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e029      	b.n	8005dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da8:	f7fd fdc0 	bl	800392c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d116      	bne.n	8005dec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	f043 0220 	orr.w	r2, r3, #32
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e007      	b.n	8005dfc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b40      	cmp	r3, #64	; 0x40
 8005df8:	d1b5      	bne.n	8005d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d11b      	bne.n	8005e54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f043 0204 	orr.w	r2, r3, #4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e25e      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d075      	beq.n	8005f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e82:	4b88      	ldr	r3, [pc, #544]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e8e:	4b85      	ldr	r3, [pc, #532]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d112      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e9a:	4b82      	ldr	r3, [pc, #520]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea6:	d10b      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea8:	4b7e      	ldr	r3, [pc, #504]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05b      	beq.n	8005f6c <HAL_RCC_OscConfig+0x108>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d157      	bne.n	8005f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e239      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec8:	d106      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x74>
 8005eca:	4b76      	ldr	r3, [pc, #472]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a75      	ldr	r2, [pc, #468]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ed4:	6013      	str	r3, [r2, #0]
 8005ed6:	e01d      	b.n	8005f14 <HAL_RCC_OscConfig+0xb0>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ee0:	d10c      	bne.n	8005efc <HAL_RCC_OscConfig+0x98>
 8005ee2:	4b70      	ldr	r3, [pc, #448]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6f      	ldr	r2, [pc, #444]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	4b6d      	ldr	r3, [pc, #436]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a6c      	ldr	r2, [pc, #432]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e00b      	b.n	8005f14 <HAL_RCC_OscConfig+0xb0>
 8005efc:	4b69      	ldr	r3, [pc, #420]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a68      	ldr	r2, [pc, #416]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4b66      	ldr	r3, [pc, #408]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d013      	beq.n	8005f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1c:	f7fd fd06 	bl	800392c <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f24:	f7fd fd02 	bl	800392c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b64      	cmp	r3, #100	; 0x64
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e1fe      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f36:	4b5b      	ldr	r3, [pc, #364]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0xc0>
 8005f42:	e014      	b.n	8005f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f44:	f7fd fcf2 	bl	800392c <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f4c:	f7fd fcee 	bl	800392c <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	; 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e1ea      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f5e:	4b51      	ldr	r3, [pc, #324]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f0      	bne.n	8005f4c <HAL_RCC_OscConfig+0xe8>
 8005f6a:	e000      	b.n	8005f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d063      	beq.n	8006042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f7a:	4b4a      	ldr	r3, [pc, #296]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f86:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d11c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f92:	4b44      	ldr	r3, [pc, #272]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d116      	bne.n	8005fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f9e:	4b41      	ldr	r3, [pc, #260]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x152>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d001      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e1be      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb6:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4937      	ldr	r1, [pc, #220]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fca:	e03a      	b.n	8006042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d020      	beq.n	8006016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fd4:	4b34      	ldr	r3, [pc, #208]	; (80060a8 <HAL_RCC_OscConfig+0x244>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fd fca7 	bl	800392c <HAL_GetTick>
 8005fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe2:	f7fd fca3 	bl	800392c <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e19f      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff4:	4b2b      	ldr	r3, [pc, #172]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0f0      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	00db      	lsls	r3, r3, #3
 800600e:	4925      	ldr	r1, [pc, #148]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006010:	4313      	orrs	r3, r2
 8006012:	600b      	str	r3, [r1, #0]
 8006014:	e015      	b.n	8006042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006016:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <HAL_RCC_OscConfig+0x244>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fd fc86 	bl	800392c <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006024:	f7fd fc82 	bl	800392c <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e17e      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006036:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1f0      	bne.n	8006024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d036      	beq.n	80060bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d016      	beq.n	8006084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006056:	4b15      	ldr	r3, [pc, #84]	; (80060ac <HAL_RCC_OscConfig+0x248>)
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605c:	f7fd fc66 	bl	800392c <HAL_GetTick>
 8006060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006062:	e008      	b.n	8006076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006064:	f7fd fc62 	bl	800392c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b02      	cmp	r3, #2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e15e      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <HAL_RCC_OscConfig+0x240>)
 8006078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0f0      	beq.n	8006064 <HAL_RCC_OscConfig+0x200>
 8006082:	e01b      	b.n	80060bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <HAL_RCC_OscConfig+0x248>)
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608a:	f7fd fc4f 	bl	800392c <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006090:	e00e      	b.n	80060b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006092:	f7fd fc4b 	bl	800392c <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d907      	bls.n	80060b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e147      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
 80060a4:	40023800 	.word	0x40023800
 80060a8:	42470000 	.word	0x42470000
 80060ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b0:	4b88      	ldr	r3, [pc, #544]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1ea      	bne.n	8006092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0304 	and.w	r3, r3, #4
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8097 	beq.w	80061f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060ca:	2300      	movs	r3, #0
 80060cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ce:	4b81      	ldr	r3, [pc, #516]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10f      	bne.n	80060fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060da:	2300      	movs	r3, #0
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	4b7d      	ldr	r3, [pc, #500]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e2:	4a7c      	ldr	r2, [pc, #496]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e8:	6413      	str	r3, [r2, #64]	; 0x40
 80060ea:	4b7a      	ldr	r3, [pc, #488]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f2:	60bb      	str	r3, [r7, #8]
 80060f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f6:	2301      	movs	r3, #1
 80060f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fa:	4b77      	ldr	r3, [pc, #476]	; (80062d8 <HAL_RCC_OscConfig+0x474>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d118      	bne.n	8006138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006106:	4b74      	ldr	r3, [pc, #464]	; (80062d8 <HAL_RCC_OscConfig+0x474>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a73      	ldr	r2, [pc, #460]	; (80062d8 <HAL_RCC_OscConfig+0x474>)
 800610c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006112:	f7fd fc0b 	bl	800392c <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800611a:	f7fd fc07 	bl	800392c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e103      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612c:	4b6a      	ldr	r3, [pc, #424]	; (80062d8 <HAL_RCC_OscConfig+0x474>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d106      	bne.n	800614e <HAL_RCC_OscConfig+0x2ea>
 8006140:	4b64      	ldr	r3, [pc, #400]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	4a63      	ldr	r2, [pc, #396]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6713      	str	r3, [r2, #112]	; 0x70
 800614c:	e01c      	b.n	8006188 <HAL_RCC_OscConfig+0x324>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x30c>
 8006156:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a5e      	ldr	r2, [pc, #376]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	6713      	str	r3, [r2, #112]	; 0x70
 8006162:	4b5c      	ldr	r3, [pc, #368]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006166:	4a5b      	ldr	r2, [pc, #364]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	6713      	str	r3, [r2, #112]	; 0x70
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0x324>
 8006170:	4b58      	ldr	r3, [pc, #352]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a57      	ldr	r2, [pc, #348]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	4b55      	ldr	r3, [pc, #340]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	4a54      	ldr	r2, [pc, #336]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fd fbcc 	bl	800392c <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006196:	e00a      	b.n	80061ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006198:	f7fd fbc8 	bl	800392c <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e0c2      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ae:	4b49      	ldr	r3, [pc, #292]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ee      	beq.n	8006198 <HAL_RCC_OscConfig+0x334>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061bc:	f7fd fbb6 	bl	800392c <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fd fbb2 	bl	800392c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e0ac      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061da:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ee      	bne.n	80061c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d105      	bne.n	80061f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ec:	4b39      	ldr	r3, [pc, #228]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	4a38      	ldr	r2, [pc, #224]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80061f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8098 	beq.w	8006332 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006202:	4b34      	ldr	r3, [pc, #208]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 030c 	and.w	r3, r3, #12
 800620a:	2b08      	cmp	r3, #8
 800620c:	d05c      	beq.n	80062c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d141      	bne.n	800629a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006216:	4b31      	ldr	r3, [pc, #196]	; (80062dc <HAL_RCC_OscConfig+0x478>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fd fb86 	bl	800392c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006224:	f7fd fb82 	bl	800392c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e07e      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f0      	bne.n	8006224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69da      	ldr	r2, [r3, #28]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	019b      	lsls	r3, r3, #6
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	3b01      	subs	r3, #1
 800625c:	041b      	lsls	r3, r3, #16
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	061b      	lsls	r3, r3, #24
 8006266:	491b      	ldr	r1, [pc, #108]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800626c:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <HAL_RCC_OscConfig+0x478>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fd fb5b 	bl	800392c <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800627a:	f7fd fb57 	bl	800392c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e053      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCC_OscConfig+0x416>
 8006298:	e04b      	b.n	8006332 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <HAL_RCC_OscConfig+0x478>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fd fb44 	bl	800392c <HAL_GetTick>
 80062a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fd fb40 	bl	800392c <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e03c      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <HAL_RCC_OscConfig+0x470>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x444>
 80062c6:	e034      	b.n	8006332 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d107      	bne.n	80062e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e02f      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40007000 	.word	0x40007000
 80062dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062e0:	4b16      	ldr	r3, [pc, #88]	; (800633c <HAL_RCC_OscConfig+0x4d8>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d11c      	bne.n	800632e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d115      	bne.n	800632e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006308:	4013      	ands	r3, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800630e:	4293      	cmp	r3, r2
 8006310:	d10d      	bne.n	800632e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800631c:	429a      	cmp	r2, r3
 800631e:	d106      	bne.n	800632e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d001      	beq.n	8006332 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e000      	b.n	8006334 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	40023800 	.word	0x40023800

08006340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e0cc      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006354:	4b68      	ldr	r3, [pc, #416]	; (80064f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d90c      	bls.n	800637c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006362:	4b65      	ldr	r3, [pc, #404]	; (80064f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b63      	ldr	r3, [pc, #396]	; (80064f8 <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 030f 	and.w	r3, r3, #15
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0b8      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d020      	beq.n	80063ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006394:	4b59      	ldr	r3, [pc, #356]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a58      	ldr	r2, [pc, #352]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800639e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0308 	and.w	r3, r3, #8
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063ac:	4b53      	ldr	r3, [pc, #332]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	4a52      	ldr	r2, [pc, #328]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b8:	4b50      	ldr	r3, [pc, #320]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	494d      	ldr	r1, [pc, #308]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d044      	beq.n	8006460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d107      	bne.n	80063ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063de:	4b47      	ldr	r3, [pc, #284]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d119      	bne.n	800641e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e07f      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d003      	beq.n	80063fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d107      	bne.n	800640e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fe:	4b3f      	ldr	r3, [pc, #252]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e06f      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640e:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e067      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800641e:	4b37      	ldr	r3, [pc, #220]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f023 0203 	bic.w	r2, r3, #3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	4934      	ldr	r1, [pc, #208]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	4313      	orrs	r3, r2
 800642e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006430:	f7fd fa7c 	bl	800392c <HAL_GetTick>
 8006434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006436:	e00a      	b.n	800644e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006438:	f7fd fa78 	bl	800392c <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f241 3288 	movw	r2, #5000	; 0x1388
 8006446:	4293      	cmp	r3, r2
 8006448:	d901      	bls.n	800644e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800644a:	2303      	movs	r3, #3
 800644c:	e04f      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644e:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 020c 	and.w	r2, r3, #12
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	429a      	cmp	r2, r3
 800645e:	d1eb      	bne.n	8006438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006460:	4b25      	ldr	r3, [pc, #148]	; (80064f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d20c      	bcs.n	8006488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646e:	4b22      	ldr	r3, [pc, #136]	; (80064f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b20      	ldr	r3, [pc, #128]	; (80064f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e032      	b.n	80064ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006494:	4b19      	ldr	r3, [pc, #100]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	4916      	ldr	r1, [pc, #88]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	490e      	ldr	r1, [pc, #56]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064c6:	f000 f821 	bl	800650c <HAL_RCC_GetSysClockFreq>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <HAL_RCC_ClockConfig+0x1bc>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	091b      	lsrs	r3, r3, #4
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	490a      	ldr	r1, [pc, #40]	; (8006500 <HAL_RCC_ClockConfig+0x1c0>)
 80064d8:	5ccb      	ldrb	r3, [r1, r3]
 80064da:	fa22 f303 	lsr.w	r3, r2, r3
 80064de:	4a09      	ldr	r2, [pc, #36]	; (8006504 <HAL_RCC_ClockConfig+0x1c4>)
 80064e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064e2:	4b09      	ldr	r3, [pc, #36]	; (8006508 <HAL_RCC_ClockConfig+0x1c8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fd f9dc 	bl	80038a4 <HAL_InitTick>

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40023c00 	.word	0x40023c00
 80064fc:	40023800 	.word	0x40023800
 8006500:	08008380 	.word	0x08008380
 8006504:	200005e4 	.word	0x200005e4
 8006508:	200005e8 	.word	0x200005e8

0800650c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800650c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006510:	b090      	sub	sp, #64	; 0x40
 8006512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006514:	2300      	movs	r3, #0
 8006516:	637b      	str	r3, [r7, #52]	; 0x34
 8006518:	2300      	movs	r3, #0
 800651a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800651c:	2300      	movs	r3, #0
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006524:	4b59      	ldr	r3, [pc, #356]	; (800668c <HAL_RCC_GetSysClockFreq+0x180>)
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 030c 	and.w	r3, r3, #12
 800652c:	2b08      	cmp	r3, #8
 800652e:	d00d      	beq.n	800654c <HAL_RCC_GetSysClockFreq+0x40>
 8006530:	2b08      	cmp	r3, #8
 8006532:	f200 80a1 	bhi.w	8006678 <HAL_RCC_GetSysClockFreq+0x16c>
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x34>
 800653a:	2b04      	cmp	r3, #4
 800653c:	d003      	beq.n	8006546 <HAL_RCC_GetSysClockFreq+0x3a>
 800653e:	e09b      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4b53      	ldr	r3, [pc, #332]	; (8006690 <HAL_RCC_GetSysClockFreq+0x184>)
 8006542:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006544:	e09b      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006546:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HAL_RCC_GetSysClockFreq+0x188>)
 8006548:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800654a:	e098      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800654c:	4b4f      	ldr	r3, [pc, #316]	; (800668c <HAL_RCC_GetSysClockFreq+0x180>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006556:	4b4d      	ldr	r3, [pc, #308]	; (800668c <HAL_RCC_GetSysClockFreq+0x180>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d028      	beq.n	80065b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006562:	4b4a      	ldr	r3, [pc, #296]	; (800668c <HAL_RCC_GetSysClockFreq+0x180>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	2200      	movs	r2, #0
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	627a      	str	r2, [r7, #36]	; 0x24
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006574:	2100      	movs	r1, #0
 8006576:	4b47      	ldr	r3, [pc, #284]	; (8006694 <HAL_RCC_GetSysClockFreq+0x188>)
 8006578:	fb03 f201 	mul.w	r2, r3, r1
 800657c:	2300      	movs	r3, #0
 800657e:	fb00 f303 	mul.w	r3, r0, r3
 8006582:	4413      	add	r3, r2
 8006584:	4a43      	ldr	r2, [pc, #268]	; (8006694 <HAL_RCC_GetSysClockFreq+0x188>)
 8006586:	fba0 1202 	umull	r1, r2, r0, r2
 800658a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800658c:	460a      	mov	r2, r1
 800658e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006590:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006592:	4413      	add	r3, r2
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006598:	2200      	movs	r2, #0
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	61fa      	str	r2, [r7, #28]
 800659e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065a6:	f7fa f9d5 	bl	8000954 <__aeabi_uldivmod>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4613      	mov	r3, r2
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b2:	e053      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b4:	4b35      	ldr	r3, [pc, #212]	; (800668c <HAL_RCC_GetSysClockFreq+0x180>)
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	099b      	lsrs	r3, r3, #6
 80065ba:	2200      	movs	r2, #0
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	617a      	str	r2, [r7, #20]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065c6:	f04f 0b00 	mov.w	fp, #0
 80065ca:	4652      	mov	r2, sl
 80065cc:	465b      	mov	r3, fp
 80065ce:	f04f 0000 	mov.w	r0, #0
 80065d2:	f04f 0100 	mov.w	r1, #0
 80065d6:	0159      	lsls	r1, r3, #5
 80065d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065dc:	0150      	lsls	r0, r2, #5
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	ebb2 080a 	subs.w	r8, r2, sl
 80065e6:	eb63 090b 	sbc.w	r9, r3, fp
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065fe:	ebb2 0408 	subs.w	r4, r2, r8
 8006602:	eb63 0509 	sbc.w	r5, r3, r9
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	00eb      	lsls	r3, r5, #3
 8006610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006614:	00e2      	lsls	r2, r4, #3
 8006616:	4614      	mov	r4, r2
 8006618:	461d      	mov	r5, r3
 800661a:	eb14 030a 	adds.w	r3, r4, sl
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	eb45 030b 	adc.w	r3, r5, fp
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006632:	4629      	mov	r1, r5
 8006634:	028b      	lsls	r3, r1, #10
 8006636:	4621      	mov	r1, r4
 8006638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800663c:	4621      	mov	r1, r4
 800663e:	028a      	lsls	r2, r1, #10
 8006640:	4610      	mov	r0, r2
 8006642:	4619      	mov	r1, r3
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	2200      	movs	r2, #0
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	60fa      	str	r2, [r7, #12]
 800664c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006650:	f7fa f980 	bl	8000954 <__aeabi_uldivmod>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4613      	mov	r3, r2
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_GetSysClockFreq+0x180>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	3301      	adds	r3, #1
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800666c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006676:	e002      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetSysClockFreq+0x184>)
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800667c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006680:	4618      	mov	r0, r3
 8006682:	3740      	adds	r7, #64	; 0x40
 8006684:	46bd      	mov	sp, r7
 8006686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800
 8006690:	00f42400 	.word	0x00f42400
 8006694:	017d7840 	.word	0x017d7840

08006698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <HAL_RCC_GetHCLKFreq+0x14>)
 800669e:	681b      	ldr	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	200005e4 	.word	0x200005e4

080066b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066b4:	f7ff fff0 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0a9b      	lsrs	r3, r3, #10
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	4903      	ldr	r1, [pc, #12]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40023800 	.word	0x40023800
 80066d4:	08008390 	.word	0x08008390

080066d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e056      	b.n	8006798 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fc ff07 	bl	8003518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2202      	movs	r2, #2
 800670e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006720:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	431a      	orrs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	ea42 0103 	orr.w	r1, r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	0c1b      	lsrs	r3, r3, #16
 8006768:	f003 0104 	and.w	r1, r3, #4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69da      	ldr	r2, [r3, #28]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006786:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	603b      	str	r3, [r7, #0]
 80067ac:	4613      	mov	r3, r2
 80067ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_SPI_Transmit+0x22>
 80067be:	2302      	movs	r3, #2
 80067c0:	e11e      	b.n	8006a00 <HAL_SPI_Transmit+0x260>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067ca:	f7fd f8af 	bl	800392c <HAL_GetTick>
 80067ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067e0:	2302      	movs	r3, #2
 80067e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067e4:	e103      	b.n	80069ee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_Transmit+0x52>
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d102      	bne.n	80067f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067f6:	e0fa      	b.n	80069ee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2203      	movs	r2, #3
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	88fa      	ldrh	r2, [r7, #6]
 8006816:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683e:	d107      	bne.n	8006850 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800684e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d007      	beq.n	800686e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800686c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006876:	d14b      	bne.n	8006910 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <HAL_SPI_Transmit+0xe6>
 8006880:	8afb      	ldrh	r3, [r7, #22]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d13e      	bne.n	8006904 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	1c9a      	adds	r2, r3, #2
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068aa:	e02b      	b.n	8006904 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d112      	bne.n	80068e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	881a      	ldrh	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	1c9a      	adds	r2, r3, #2
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80068de:	e011      	b.n	8006904 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e0:	f7fd f824 	bl	800392c <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d803      	bhi.n	80068f8 <HAL_SPI_Transmit+0x158>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f6:	d102      	bne.n	80068fe <HAL_SPI_Transmit+0x15e>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006902:	e074      	b.n	80069ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1ce      	bne.n	80068ac <HAL_SPI_Transmit+0x10c>
 800690e:	e04c      	b.n	80069aa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <HAL_SPI_Transmit+0x17e>
 8006918:	8afb      	ldrh	r3, [r7, #22]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d140      	bne.n	80069a0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006944:	e02c      	b.n	80069a0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d113      	bne.n	800697c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	1c5a      	adds	r2, r3, #1
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	86da      	strh	r2, [r3, #54]	; 0x36
 800697a:	e011      	b.n	80069a0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800697c:	f7fc ffd6 	bl	800392c <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d803      	bhi.n	8006994 <HAL_SPI_Transmit+0x1f4>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d102      	bne.n	800699a <HAL_SPI_Transmit+0x1fa>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800699e:	e026      	b.n	80069ee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1cd      	bne.n	8006946 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f894 	bl	8006adc <SPI_EndRxTxTransaction>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e000      	b.n	80069ee <HAL_SPI_Transmit+0x24e>
  }

error:
 80069ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a18:	e04c      	b.n	8006ab4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a20:	d048      	beq.n	8006ab4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a22:	f7fc ff83 	bl	800392c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	683a      	ldr	r2, [r7, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d902      	bls.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d13d      	bne.n	8006ab4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a50:	d111      	bne.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d004      	beq.n	8006a66 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a64:	d107      	bne.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7e:	d10f      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e00f      	b.n	8006ad4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4013      	ands	r3, r2
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2301      	moveq	r3, #1
 8006ac6:	2300      	movne	r3, #0
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d1a3      	bne.n	8006a1a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <SPI_EndRxTxTransaction+0x7c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <SPI_EndRxTxTransaction+0x80>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0d5b      	lsrs	r3, r3, #21
 8006af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b06:	d112      	bne.n	8006b2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff ff78 	bl	8006a08 <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d0f2      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x52>
 8006b48:	e000      	b.n	8006b4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b4a:	bf00      	nop
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200005e4 	.word	0x200005e4
 8006b5c:	165e9f81 	.word	0x165e9f81

08006b60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e01d      	b.n	8006bae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fc fd8a 	bl	80036a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f000 fc04 	bl	80073ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b06      	cmp	r3, #6
 8006bd6:	d007      	beq.n	8006be8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 0307 	and.w	r3, r3, #7
 8006c20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b06      	cmp	r3, #6
 8006c26:	d007      	beq.n	8006c38 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e01d      	b.n	8006c94 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d106      	bne.n	8006c72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f815 	bl	8006c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f000 fb91 	bl	80073ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fe18 	bl	80078f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <HAL_TIM_PWM_Start+0x60>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d107      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b06      	cmp	r3, #6
 8006cf2:	d007      	beq.n	8006d04 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	40010000 	.word	0x40010000

08006d14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e083      	b.n	8006e30 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fc fc33 	bl	80035a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6812      	ldr	r2, [r2, #0]
 8006d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d58:	f023 0307 	bic.w	r3, r3, #7
 8006d5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f000 fb1f 	bl	80073ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d96:	f023 0303 	bic.w	r3, r3, #3
 8006d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	4313      	orrs	r3, r2
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006db4:	f023 030c 	bic.w	r3, r3, #12
 8006db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68da      	ldr	r2, [r3, #12]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	011a      	lsls	r2, r3, #4
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	031b      	lsls	r3, r3, #12
 8006de4:	4313      	orrs	r3, r2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006df2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	4313      	orrs	r3, r2
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d122      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d11b      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f06f 0202 	mvn.w	r2, #2
 8006e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa78 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006e80:	e005      	b.n	8006e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa6a 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa7b 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d122      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d11b      	bne.n	8006ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0204 	mvn.w	r2, #4
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa4e 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa40 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fa51 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	f003 0308 	and.w	r3, r3, #8
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d122      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d11b      	bne.n	8006f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0208 	mvn.w	r2, #8
 8006f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2204      	movs	r2, #4
 8006f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa24 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006f28:	e005      	b.n	8006f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa16 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fa27 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d122      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0310 	and.w	r3, r3, #16
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d11b      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f06f 0210 	mvn.w	r2, #16
 8006f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2208      	movs	r2, #8
 8006f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d003      	beq.n	8006f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f9fa 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006f7c:	e005      	b.n	8006f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9ec 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f9fd 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d10e      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0201 	mvn.w	r2, #1
 8006fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fa fc60 	bl	800187c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc6:	2b80      	cmp	r3, #128	; 0x80
 8006fc8:	d10e      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd4:	2b80      	cmp	r3, #128	; 0x80
 8006fd6:	d107      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fd26 	bl	8007a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff2:	2b40      	cmp	r3, #64	; 0x40
 8006ff4:	d10e      	bne.n	8007014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b40      	cmp	r3, #64	; 0x40
 8007002:	d107      	bne.n	8007014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f9c2 	bl	8007398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b20      	cmp	r3, #32
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b20      	cmp	r3, #32
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0220 	mvn.w	r2, #32
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fcf0 	bl	8007a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800705e:	2302      	movs	r3, #2
 8007060:	e0b4      	b.n	80071cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2202      	movs	r2, #2
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b0c      	cmp	r3, #12
 8007076:	f200 809f 	bhi.w	80071b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800707a:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	080070b5 	.word	0x080070b5
 8007084:	080071b9 	.word	0x080071b9
 8007088:	080071b9 	.word	0x080071b9
 800708c:	080071b9 	.word	0x080071b9
 8007090:	080070f5 	.word	0x080070f5
 8007094:	080071b9 	.word	0x080071b9
 8007098:	080071b9 	.word	0x080071b9
 800709c:	080071b9 	.word	0x080071b9
 80070a0:	08007137 	.word	0x08007137
 80070a4:	080071b9 	.word	0x080071b9
 80070a8:	080071b9 	.word	0x080071b9
 80070ac:	080071b9 	.word	0x080071b9
 80070b0:	08007177 	.word	0x08007177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 f9f6 	bl	80074ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699a      	ldr	r2, [r3, #24]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0208 	orr.w	r2, r2, #8
 80070ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0204 	bic.w	r2, r2, #4
 80070de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6999      	ldr	r1, [r3, #24]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	619a      	str	r2, [r3, #24]
      break;
 80070f2:	e062      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fa3c 	bl	8007578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800710e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6999      	ldr	r1, [r3, #24]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	021a      	lsls	r2, r3, #8
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	619a      	str	r2, [r3, #24]
      break;
 8007134:	e041      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	4618      	mov	r0, r3
 800713e:	f000 fa87 	bl	8007650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0208 	orr.w	r2, r2, #8
 8007150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69da      	ldr	r2, [r3, #28]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0204 	bic.w	r2, r2, #4
 8007160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69d9      	ldr	r1, [r3, #28]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	61da      	str	r2, [r3, #28]
      break;
 8007174:	e021      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68b9      	ldr	r1, [r7, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f000 fad1 	bl	8007724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69d9      	ldr	r1, [r3, #28]
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	021a      	lsls	r2, r3, #8
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	61da      	str	r2, [r3, #28]
      break;
 80071b6:	e000      	b.n	80071ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80071b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_TIM_ConfigClockSource+0x18>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e0b3      	b.n	8007354 <HAL_TIM_ConfigClockSource+0x180>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800720a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007212:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007224:	d03e      	beq.n	80072a4 <HAL_TIM_ConfigClockSource+0xd0>
 8007226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800722a:	f200 8087 	bhi.w	800733c <HAL_TIM_ConfigClockSource+0x168>
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007232:	f000 8085 	beq.w	8007340 <HAL_TIM_ConfigClockSource+0x16c>
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723a:	d87f      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 800723c:	2b70      	cmp	r3, #112	; 0x70
 800723e:	d01a      	beq.n	8007276 <HAL_TIM_ConfigClockSource+0xa2>
 8007240:	2b70      	cmp	r3, #112	; 0x70
 8007242:	d87b      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 8007244:	2b60      	cmp	r3, #96	; 0x60
 8007246:	d050      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0x116>
 8007248:	2b60      	cmp	r3, #96	; 0x60
 800724a:	d877      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 800724c:	2b50      	cmp	r3, #80	; 0x50
 800724e:	d03c      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0xf6>
 8007250:	2b50      	cmp	r3, #80	; 0x50
 8007252:	d873      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 8007254:	2b40      	cmp	r3, #64	; 0x40
 8007256:	d058      	beq.n	800730a <HAL_TIM_ConfigClockSource+0x136>
 8007258:	2b40      	cmp	r3, #64	; 0x40
 800725a:	d86f      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 800725c:	2b30      	cmp	r3, #48	; 0x30
 800725e:	d064      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x156>
 8007260:	2b30      	cmp	r3, #48	; 0x30
 8007262:	d86b      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 8007264:	2b20      	cmp	r3, #32
 8007266:	d060      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x156>
 8007268:	2b20      	cmp	r3, #32
 800726a:	d867      	bhi.n	800733c <HAL_TIM_ConfigClockSource+0x168>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d05c      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x156>
 8007270:	2b10      	cmp	r3, #16
 8007272:	d05a      	beq.n	800732a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007274:	e062      	b.n	800733c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6899      	ldr	r1, [r3, #8]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f000 fb17 	bl	80078b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007298:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	609a      	str	r2, [r3, #8]
      break;
 80072a2:	e04e      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6818      	ldr	r0, [r3, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	6899      	ldr	r1, [r3, #8]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f000 fb00 	bl	80078b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689a      	ldr	r2, [r3, #8]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072c6:	609a      	str	r2, [r3, #8]
      break;
 80072c8:	e03b      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6859      	ldr	r1, [r3, #4]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f000 fa74 	bl	80077c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2150      	movs	r1, #80	; 0x50
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 facd 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 80072e8:	e02b      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6818      	ldr	r0, [r3, #0]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6859      	ldr	r1, [r3, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f000 fa93 	bl	8007822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2160      	movs	r1, #96	; 0x60
 8007302:	4618      	mov	r0, r3
 8007304:	f000 fabd 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 8007308:	e01b      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6859      	ldr	r1, [r3, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	461a      	mov	r2, r3
 8007318:	f000 fa54 	bl	80077c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2140      	movs	r1, #64	; 0x40
 8007322:	4618      	mov	r0, r3
 8007324:	f000 faad 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 8007328:	e00b      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4619      	mov	r1, r3
 8007334:	4610      	mov	r0, r2
 8007336:	f000 faa4 	bl	8007882 <TIM_ITRx_SetConfig>
      break;
 800733a:	e002      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007340:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a34      	ldr	r2, [pc, #208]	; (8007490 <TIM_Base_SetConfig+0xe4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00f      	beq.n	80073e4 <TIM_Base_SetConfig+0x38>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ca:	d00b      	beq.n	80073e4 <TIM_Base_SetConfig+0x38>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a31      	ldr	r2, [pc, #196]	; (8007494 <TIM_Base_SetConfig+0xe8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d007      	beq.n	80073e4 <TIM_Base_SetConfig+0x38>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a30      	ldr	r2, [pc, #192]	; (8007498 <TIM_Base_SetConfig+0xec>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d003      	beq.n	80073e4 <TIM_Base_SetConfig+0x38>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a2f      	ldr	r2, [pc, #188]	; (800749c <TIM_Base_SetConfig+0xf0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d108      	bne.n	80073f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a25      	ldr	r2, [pc, #148]	; (8007490 <TIM_Base_SetConfig+0xe4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01b      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007404:	d017      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a22      	ldr	r2, [pc, #136]	; (8007494 <TIM_Base_SetConfig+0xe8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d013      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a21      	ldr	r2, [pc, #132]	; (8007498 <TIM_Base_SetConfig+0xec>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00f      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a20      	ldr	r2, [pc, #128]	; (800749c <TIM_Base_SetConfig+0xf0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00b      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <TIM_Base_SetConfig+0xf4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d007      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1e      	ldr	r2, [pc, #120]	; (80074a4 <TIM_Base_SetConfig+0xf8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d003      	beq.n	8007436 <TIM_Base_SetConfig+0x8a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1d      	ldr	r2, [pc, #116]	; (80074a8 <TIM_Base_SetConfig+0xfc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d108      	bne.n	8007448 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800743c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	4313      	orrs	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a08      	ldr	r2, [pc, #32]	; (8007490 <TIM_Base_SetConfig+0xe4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d103      	bne.n	800747c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	615a      	str	r2, [r3, #20]
}
 8007482:	bf00      	nop
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40010000 	.word	0x40010000
 8007494:	40000400 	.word	0x40000400
 8007498:	40000800 	.word	0x40000800
 800749c:	40000c00 	.word	0x40000c00
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800

080074ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f023 0201 	bic.w	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f023 0302 	bic.w	r3, r3, #2
 80074f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <TIM_OC1_SetConfig+0xc8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d10c      	bne.n	8007522 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f023 0308 	bic.w	r3, r3, #8
 800750e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f023 0304 	bic.w	r3, r3, #4
 8007520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <TIM_OC1_SetConfig+0xc8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d111      	bne.n	800754e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	621a      	str	r2, [r3, #32]
}
 8007568:	bf00      	nop
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr
 8007574:	40010000 	.word	0x40010000

08007578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	f023 0210 	bic.w	r2, r3, #16
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0320 	bic.w	r3, r3, #32
 80075c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	011b      	lsls	r3, r3, #4
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1e      	ldr	r2, [pc, #120]	; (800764c <TIM_OC2_SetConfig+0xd4>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10d      	bne.n	80075f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a15      	ldr	r2, [pc, #84]	; (800764c <TIM_OC2_SetConfig+0xd4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d113      	bne.n	8007624 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800760a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000

08007650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	021b      	lsls	r3, r3, #8
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <TIM_OC3_SetConfig+0xd0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d10d      	bne.n	80076ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a14      	ldr	r2, [pc, #80]	; (8007720 <TIM_OC3_SetConfig+0xd0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d113      	bne.n	80076fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	697a      	ldr	r2, [r7, #20]
 8007712:	621a      	str	r2, [r3, #32]
}
 8007714:	bf00      	nop
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	40010000 	.word	0x40010000

08007724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800775a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800776e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	031b      	lsls	r3, r3, #12
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a10      	ldr	r2, [pc, #64]	; (80077c0 <TIM_OC4_SetConfig+0x9c>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d109      	bne.n	8007798 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	019b      	lsls	r3, r3, #6
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	4313      	orrs	r3, r2
 8007796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	40010000 	.word	0x40010000

080077c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f023 0201 	bic.w	r2, r3, #1
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 030a 	bic.w	r3, r3, #10
 8007800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	621a      	str	r2, [r3, #32]
}
 8007816:	bf00      	nop
 8007818:	371c      	adds	r7, #28
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007822:	b480      	push	{r7}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0210 	bic.w	r2, r3, #16
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800784c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	031b      	lsls	r3, r3, #12
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800785e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	621a      	str	r2, [r3, #32]
}
 8007876:	bf00      	nop
 8007878:	371c      	adds	r7, #28
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007882:	b480      	push	{r7}
 8007884:	b085      	sub	sp, #20
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
 800788a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	f043 0307 	orr.w	r3, r3, #7
 80078a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	609a      	str	r2, [r3, #8]
}
 80078ac:	bf00      	nop
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	021a      	lsls	r2, r3, #8
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	431a      	orrs	r2, r3
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	4313      	orrs	r3, r2
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	609a      	str	r2, [r3, #8]
}
 80078ec:	bf00      	nop
 80078ee:	371c      	adds	r7, #28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2201      	movs	r2, #1
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6a1a      	ldr	r2, [r3, #32]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	43db      	mvns	r3, r3
 800791a:	401a      	ands	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	fa01 f303 	lsl.w	r3, r1, r3
 8007930:	431a      	orrs	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	621a      	str	r2, [r3, #32]
}
 8007936:	bf00      	nop
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007958:	2302      	movs	r3, #2
 800795a:	e050      	b.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2202      	movs	r2, #2
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007982:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1c      	ldr	r2, [pc, #112]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d018      	beq.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d013      	beq.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00e      	beq.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d009      	beq.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a15      	ldr	r2, [pc, #84]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d004      	beq.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d10c      	bne.n	80079ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	40010000 	.word	0x40010000
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40000800 	.word	0x40000800
 8007a18:	40000c00 	.word	0x40000c00
 8007a1c:	40014000 	.word	0x40014000

08007a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <arm_sin_f32>:
 8007a48:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007ac4 <arm_sin_f32+0x7c>
 8007a4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007a50:	ee20 7a07 	vmul.f32	s14, s0, s14
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007a5c:	d42c      	bmi.n	8007ab8 <arm_sin_f32+0x70>
 8007a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a62:	eddf 6a19 	vldr	s13, [pc, #100]	; 8007ac8 <arm_sin_f32+0x80>
 8007a66:	4a19      	ldr	r2, [pc, #100]	; (8007acc <arm_sin_f32+0x84>)
 8007a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007a70:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a74:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7c:	bfa8      	it	ge
 8007a7e:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8007a82:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8007a86:	ee17 3a10 	vmov	r3, s14
 8007a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a8e:	ee07 3a10 	vmov	s14, r3
 8007a92:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007a96:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007a9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a9e:	edd1 6a01 	vldr	s13, [r1, #4]
 8007aa2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007aa6:	ed91 0a00 	vldr	s0, [r1]
 8007aaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007aae:	ee27 0a00 	vmul.f32	s0, s14, s0
 8007ab2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007ab6:	4770      	bx	lr
 8007ab8:	ee17 3a90 	vmov	r3, s15
 8007abc:	3b01      	subs	r3, #1
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	e7cc      	b.n	8007a5e <arm_sin_f32+0x16>
 8007ac4:	3e22f983 	.word	0x3e22f983
 8007ac8:	44000000 	.word	0x44000000
 8007acc:	080083a0 	.word	0x080083a0

08007ad0 <__libc_init_array>:
 8007ad0:	b570      	push	{r4, r5, r6, lr}
 8007ad2:	4d0d      	ldr	r5, [pc, #52]	; (8007b08 <__libc_init_array+0x38>)
 8007ad4:	4c0d      	ldr	r4, [pc, #52]	; (8007b0c <__libc_init_array+0x3c>)
 8007ad6:	1b64      	subs	r4, r4, r5
 8007ad8:	10a4      	asrs	r4, r4, #2
 8007ada:	2600      	movs	r6, #0
 8007adc:	42a6      	cmp	r6, r4
 8007ade:	d109      	bne.n	8007af4 <__libc_init_array+0x24>
 8007ae0:	4d0b      	ldr	r5, [pc, #44]	; (8007b10 <__libc_init_array+0x40>)
 8007ae2:	4c0c      	ldr	r4, [pc, #48]	; (8007b14 <__libc_init_array+0x44>)
 8007ae4:	f000 f820 	bl	8007b28 <_init>
 8007ae8:	1b64      	subs	r4, r4, r5
 8007aea:	10a4      	asrs	r4, r4, #2
 8007aec:	2600      	movs	r6, #0
 8007aee:	42a6      	cmp	r6, r4
 8007af0:	d105      	bne.n	8007afe <__libc_init_array+0x2e>
 8007af2:	bd70      	pop	{r4, r5, r6, pc}
 8007af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af8:	4798      	blx	r3
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7ee      	b.n	8007adc <__libc_init_array+0xc>
 8007afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b02:	4798      	blx	r3
 8007b04:	3601      	adds	r6, #1
 8007b06:	e7f2      	b.n	8007aee <__libc_init_array+0x1e>
 8007b08:	08008bac 	.word	0x08008bac
 8007b0c:	08008bac 	.word	0x08008bac
 8007b10:	08008bac 	.word	0x08008bac
 8007b14:	08008bb0 	.word	0x08008bb0

08007b18 <memset>:
 8007b18:	4402      	add	r2, r0
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d100      	bne.n	8007b22 <memset+0xa>
 8007b20:	4770      	bx	lr
 8007b22:	f803 1b01 	strb.w	r1, [r3], #1
 8007b26:	e7f9      	b.n	8007b1c <memset+0x4>

08007b28 <_init>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	bf00      	nop
 8007b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2e:	bc08      	pop	{r3}
 8007b30:	469e      	mov	lr, r3
 8007b32:	4770      	bx	lr

08007b34 <_fini>:
 8007b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b36:	bf00      	nop
 8007b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3a:	bc08      	pop	{r3}
 8007b3c:	469e      	mov	lr, r3
 8007b3e:	4770      	bx	lr
