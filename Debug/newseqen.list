
newseqen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d560  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002604  0800d6f8  0800d6f8  0001d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcfc  0800fcfc  00028fc0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcfc  0800fcfc  0001fcfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd04  0800fd04  00028fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd04  0800fd04  0001fd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd08  0800fd08  0001fd08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00008fc0  20000000  0800fd0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009e50  20008fc0  08018ccc  00028fc0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e10  08018ccc  00032e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00028fc0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a03  00000000  00000000  00028ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002840  00000000  00000000  000419f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  00044238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d8  00000000  00000000  000456f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dc4  00000000  00000000  00046ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199ca  00000000  00000000  0005f894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f3f  00000000  00000000  0007925e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0011b19d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bd4  00000000  00000000  0011b260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  00120e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20008fc0 	.word	0x20008fc0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d6e0 	.word	0x0800d6e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20008fc4 	.word	0x20008fc4
 80001d4:	0800d6e0 	.word	0x0800d6e0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b974 	b.w	8000b94 <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9d08      	ldr	r5, [sp, #32]
 80008ca:	4604      	mov	r4, r0
 80008cc:	468e      	mov	lr, r1
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d14d      	bne.n	800096e <__udivmoddi4+0xaa>
 80008d2:	428a      	cmp	r2, r1
 80008d4:	4694      	mov	ip, r2
 80008d6:	d969      	bls.n	80009ac <__udivmoddi4+0xe8>
 80008d8:	fab2 f282 	clz	r2, r2
 80008dc:	b152      	cbz	r2, 80008f4 <__udivmoddi4+0x30>
 80008de:	fa01 f302 	lsl.w	r3, r1, r2
 80008e2:	f1c2 0120 	rsb	r1, r2, #32
 80008e6:	fa20 f101 	lsr.w	r1, r0, r1
 80008ea:	fa0c fc02 	lsl.w	ip, ip, r2
 80008ee:	ea41 0e03 	orr.w	lr, r1, r3
 80008f2:	4094      	lsls	r4, r2
 80008f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f8:	0c21      	lsrs	r1, r4, #16
 80008fa:	fbbe f6f8 	udiv	r6, lr, r8
 80008fe:	fa1f f78c 	uxth.w	r7, ip
 8000902:	fb08 e316 	mls	r3, r8, r6, lr
 8000906:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800090a:	fb06 f107 	mul.w	r1, r6, r7
 800090e:	4299      	cmp	r1, r3
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x64>
 8000912:	eb1c 0303 	adds.w	r3, ip, r3
 8000916:	f106 30ff 	add.w	r0, r6, #4294967295
 800091a:	f080 811f 	bcs.w	8000b5c <__udivmoddi4+0x298>
 800091e:	4299      	cmp	r1, r3
 8000920:	f240 811c 	bls.w	8000b5c <__udivmoddi4+0x298>
 8000924:	3e02      	subs	r6, #2
 8000926:	4463      	add	r3, ip
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	b2a4      	uxth	r4, r4
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3310 	mls	r3, r8, r0, r3
 8000934:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000938:	fb00 f707 	mul.w	r7, r0, r7
 800093c:	42a7      	cmp	r7, r4
 800093e:	d90a      	bls.n	8000956 <__udivmoddi4+0x92>
 8000940:	eb1c 0404 	adds.w	r4, ip, r4
 8000944:	f100 33ff 	add.w	r3, r0, #4294967295
 8000948:	f080 810a 	bcs.w	8000b60 <__udivmoddi4+0x29c>
 800094c:	42a7      	cmp	r7, r4
 800094e:	f240 8107 	bls.w	8000b60 <__udivmoddi4+0x29c>
 8000952:	4464      	add	r4, ip
 8000954:	3802      	subs	r0, #2
 8000956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095a:	1be4      	subs	r4, r4, r7
 800095c:	2600      	movs	r6, #0
 800095e:	b11d      	cbz	r5, 8000968 <__udivmoddi4+0xa4>
 8000960:	40d4      	lsrs	r4, r2
 8000962:	2300      	movs	r3, #0
 8000964:	e9c5 4300 	strd	r4, r3, [r5]
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	428b      	cmp	r3, r1
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0xc2>
 8000972:	2d00      	cmp	r5, #0
 8000974:	f000 80ef 	beq.w	8000b56 <__udivmoddi4+0x292>
 8000978:	2600      	movs	r6, #0
 800097a:	e9c5 0100 	strd	r0, r1, [r5]
 800097e:	4630      	mov	r0, r6
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	fab3 f683 	clz	r6, r3
 800098a:	2e00      	cmp	r6, #0
 800098c:	d14a      	bne.n	8000a24 <__udivmoddi4+0x160>
 800098e:	428b      	cmp	r3, r1
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xd4>
 8000992:	4282      	cmp	r2, r0
 8000994:	f200 80f9 	bhi.w	8000b8a <__udivmoddi4+0x2c6>
 8000998:	1a84      	subs	r4, r0, r2
 800099a:	eb61 0303 	sbc.w	r3, r1, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	469e      	mov	lr, r3
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d0e0      	beq.n	8000968 <__udivmoddi4+0xa4>
 80009a6:	e9c5 4e00 	strd	r4, lr, [r5]
 80009aa:	e7dd      	b.n	8000968 <__udivmoddi4+0xa4>
 80009ac:	b902      	cbnz	r2, 80009b0 <__udivmoddi4+0xec>
 80009ae:	deff      	udf	#255	; 0xff
 80009b0:	fab2 f282 	clz	r2, r2
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	f040 8092 	bne.w	8000ade <__udivmoddi4+0x21a>
 80009ba:	eba1 010c 	sub.w	r1, r1, ip
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2601      	movs	r6, #1
 80009c8:	0c20      	lsrs	r0, r4, #16
 80009ca:	fbb1 f3f7 	udiv	r3, r1, r7
 80009ce:	fb07 1113 	mls	r1, r7, r3, r1
 80009d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009d6:	fb0e f003 	mul.w	r0, lr, r3
 80009da:	4288      	cmp	r0, r1
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x12c>
 80009de:	eb1c 0101 	adds.w	r1, ip, r1
 80009e2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x12a>
 80009e8:	4288      	cmp	r0, r1
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2c0>
 80009ee:	4643      	mov	r3, r8
 80009f0:	1a09      	subs	r1, r1, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb1 f0f7 	udiv	r0, r1, r7
 80009f8:	fb07 1110 	mls	r1, r7, r0, r1
 80009fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x156>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x154>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2ca>
 8000a18:	4608      	mov	r0, r1
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a22:	e79c      	b.n	800095e <__udivmoddi4+0x9a>
 8000a24:	f1c6 0720 	rsb	r7, r6, #32
 8000a28:	40b3      	lsls	r3, r6
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa20 f407 	lsr.w	r4, r0, r7
 8000a36:	fa01 f306 	lsl.w	r3, r1, r6
 8000a3a:	431c      	orrs	r4, r3
 8000a3c:	40f9      	lsrs	r1, r7
 8000a3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a42:	fa00 f306 	lsl.w	r3, r0, r6
 8000a46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a4a:	0c20      	lsrs	r0, r4, #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fb09 1118 	mls	r1, r9, r8, r1
 8000a54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a58:	fb08 f00e 	mul.w	r0, r8, lr
 8000a5c:	4288      	cmp	r0, r1
 8000a5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b8>
 8000a64:	eb1c 0101 	adds.w	r1, ip, r1
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2bc>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2bc>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1a09      	subs	r1, r1, r0
 8000a7e:	b2a4      	uxth	r4, r4
 8000a80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a84:	fb09 1110 	mls	r1, r9, r0, r1
 8000a88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a90:	458e      	cmp	lr, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1e2>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2b4>
 8000a9e:	458e      	cmp	lr, r1
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2b4>
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aaa:	fba0 9402 	umull	r9, r4, r0, r2
 8000aae:	eba1 010e 	sub.w	r1, r1, lr
 8000ab2:	42a1      	cmp	r1, r4
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46a6      	mov	lr, r4
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x2a4>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x2a0>
 8000abc:	b15d      	cbz	r5, 8000ad6 <__udivmoddi4+0x212>
 8000abe:	ebb3 0208 	subs.w	r2, r3, r8
 8000ac2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ac6:	fa01 f707 	lsl.w	r7, r1, r7
 8000aca:	fa22 f306 	lsr.w	r3, r2, r6
 8000ace:	40f1      	lsrs	r1, r6
 8000ad0:	431f      	orrs	r7, r3
 8000ad2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ad6:	2600      	movs	r6, #0
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	f1c2 0320 	rsb	r3, r2, #32
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae8:	fa21 f303 	lsr.w	r3, r1, r3
 8000aec:	4091      	lsls	r1, r2
 8000aee:	4301      	orrs	r1, r0
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000afc:	fb07 3610 	mls	r6, r7, r0, r3
 8000b00:	0c0b      	lsrs	r3, r1, #16
 8000b02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b06:	fb00 f60e 	mul.w	r6, r0, lr
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x260>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b8>
 8000b1c:	429e      	cmp	r6, r3
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b8>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4463      	add	r3, ip
 8000b24:	1b9b      	subs	r3, r3, r6
 8000b26:	b289      	uxth	r1, r1
 8000b28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000b30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b34:	fb06 f30e 	mul.w	r3, r6, lr
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x28a>
 8000b3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b4a:	3e02      	subs	r6, #2
 8000b4c:	4461      	add	r1, ip
 8000b4e:	1ac9      	subs	r1, r1, r3
 8000b50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0x104>
 8000b56:	462e      	mov	r6, r5
 8000b58:	4628      	mov	r0, r5
 8000b5a:	e705      	b.n	8000968 <__udivmoddi4+0xa4>
 8000b5c:	4606      	mov	r6, r0
 8000b5e:	e6e3      	b.n	8000928 <__udivmoddi4+0x64>
 8000b60:	4618      	mov	r0, r3
 8000b62:	e6f8      	b.n	8000956 <__udivmoddi4+0x92>
 8000b64:	454b      	cmp	r3, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f8>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b70:	3801      	subs	r0, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f8>
 8000b74:	4646      	mov	r6, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x28a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1e2>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x260>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b8>
 8000b84:	3b02      	subs	r3, #2
 8000b86:	4461      	add	r1, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x12c>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e709      	b.n	80009a2 <__udivmoddi4+0xde>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x156>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <menu_vars>:
uint8_t*  menu_vars(char* menu_string,  uint8_t var_index   ){ // in comes name and index , out goes variable reference pointer
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]


	char menu_string2[8];
	//var_index=var_index&15;    //set var index ie  LFO[1].rate ,false
	uint8_t menu_countr=0; //  menu vars
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t *menu_vars_var1=NULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]

	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000bac:	4bbb      	ldr	r3, [pc, #748]	; (8000e9c <menu_vars+0x304>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e01d      	b.n	8000bf0 <menu_vars+0x58>

		memcpy(menu_string2, menu_titles_final[i], 8);  // copy title list
 8000bb4:	4bb9      	ldr	r3, [pc, #740]	; (8000e9c <menu_vars+0x304>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4bb9      	ldr	r3, [pc, #740]	; (8000ea0 <menu_vars+0x308>)
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	6810      	ldr	r0, [r2, #0]
 8000bc6:	6851      	ldr	r1, [r2, #4]
 8000bc8:	c303      	stmia	r3!, {r0, r1}
		if ((strncmp(menu_string, menu_string2, 8)) == 0) {
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2208      	movs	r2, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f00c fce4 	bl	800d5a0 <strncmp>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <menu_vars+0x4c>
			menu_countr = i;
 8000bde:	4baf      	ldr	r3, [pc, #700]	; (8000e9c <menu_vars+0x304>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i <menu_lookup_count; i++) {      // find menu location
 8000be4:	4bad      	ldr	r3, [pc, #692]	; (8000e9c <menu_vars+0x304>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4bab      	ldr	r3, [pc, #684]	; (8000e9c <menu_vars+0x304>)
 8000bee:	801a      	strh	r2, [r3, #0]
 8000bf0:	4baa      	ldr	r3, [pc, #680]	; (8000e9c <menu_vars+0x304>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2b41      	cmp	r3, #65	; 0x41
 8000bf6:	d9dd      	bls.n	8000bb4 <menu_vars+0x1c>

		}
	}
	menu_vars_ref=menu_countr ;
 8000bf8:	4aaa      	ldr	r2, [pc, #680]	; (8000ea4 <menu_vars+0x30c>)
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	7013      	strb	r3, [r2, #0]
	if (var_index>menu_vars_index_limit[menu_countr]) var_index=menu_vars_index_limit[menu_countr];   // make sure it stays right
 8000bfe:	7dfb      	ldrb	r3, [r7, #23]
 8000c00:	4aa9      	ldr	r2, [pc, #676]	; (8000ea8 <menu_vars+0x310>)
 8000c02:	5cd3      	ldrb	r3, [r2, r3]
 8000c04:	78fa      	ldrb	r2, [r7, #3]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d903      	bls.n	8000c12 <menu_vars+0x7a>
 8000c0a:	7dfb      	ldrb	r3, [r7, #23]
 8000c0c:	4aa6      	ldr	r2, [pc, #664]	; (8000ea8 <menu_vars+0x310>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	70fb      	strb	r3, [r7, #3]

	switch(menu_countr){
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
 8000c14:	2b40      	cmp	r3, #64	; 0x40
 8000c16:	f200 8250 	bhi.w	80010ba <menu_vars+0x522>
 8000c1a:	a201      	add	r2, pc, #4	; (adr r2, 8000c20 <menu_vars+0x88>)
 8000c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c20:	08000d25 	.word	0x08000d25
 8000c24:	08000d2b 	.word	0x08000d2b
 8000c28:	08000d3d 	.word	0x08000d3d
 8000c2c:	08000d51 	.word	0x08000d51
 8000c30:	08000d65 	.word	0x08000d65
 8000c34:	08000d79 	.word	0x08000d79
 8000c38:	08000d8b 	.word	0x08000d8b
 8000c3c:	08000d91 	.word	0x08000d91
 8000c40:	08000da3 	.word	0x08000da3
 8000c44:	08000db7 	.word	0x08000db7
 8000c48:	08000dcb 	.word	0x08000dcb
 8000c4c:	08000ddf 	.word	0x08000ddf
 8000c50:	08000de5 	.word	0x08000de5
 8000c54:	08000df1 	.word	0x08000df1
 8000c58:	08000dff 	.word	0x08000dff
 8000c5c:	08000e0d 	.word	0x08000e0d
 8000c60:	08000e1b 	.word	0x08000e1b
 8000c64:	08000e29 	.word	0x08000e29
 8000c68:	08000e37 	.word	0x08000e37
 8000c6c:	08000e45 	.word	0x08000e45
 8000c70:	08000e53 	.word	0x08000e53
 8000c74:	08000e61 	.word	0x08000e61
 8000c78:	08000e67 	.word	0x08000e67
 8000c7c:	08000e6d 	.word	0x08000e6d
 8000c80:	08000e73 	.word	0x08000e73
 8000c84:	08000e7f 	.word	0x08000e7f
 8000c88:	08000e8d 	.word	0x08000e8d
 8000c8c:	08000ec5 	.word	0x08000ec5
 8000c90:	08000ed1 	.word	0x08000ed1
 8000c94:	08000edf 	.word	0x08000edf
 8000c98:	08000eed 	.word	0x08000eed
 8000c9c:	08000efb 	.word	0x08000efb
 8000ca0:	08000f09 	.word	0x08000f09
 8000ca4:	08000f17 	.word	0x08000f17
 8000ca8:	08000f25 	.word	0x08000f25
 8000cac:	08000f33 	.word	0x08000f33
 8000cb0:	08000f45 	.word	0x08000f45
 8000cb4:	08000f55 	.word	0x08000f55
 8000cb8:	08000f67 	.word	0x08000f67
 8000cbc:	08000f79 	.word	0x08000f79
 8000cc0:	08000f8b 	.word	0x08000f8b
 8000cc4:	08000f9d 	.word	0x08000f9d
 8000cc8:	08000fb1 	.word	0x08000fb1
 8000ccc:	08000fc5 	.word	0x08000fc5
 8000cd0:	08000fd9 	.word	0x08000fd9
 8000cd4:	08000fe5 	.word	0x08000fe5
 8000cd8:	08000feb 	.word	0x08000feb
 8000cdc:	08000ff1 	.word	0x08000ff1
 8000ce0:	08000ff7 	.word	0x08000ff7
 8000ce4:	08001001 	.word	0x08001001
 8000ce8:	08001013 	.word	0x08001013
 8000cec:	08001027 	.word	0x08001027
 8000cf0:	0800103b 	.word	0x0800103b
 8000cf4:	0800104f 	.word	0x0800104f
 8000cf8:	08001059 	.word	0x08001059
 8000cfc:	0800105f 	.word	0x0800105f
 8000d00:	08001065 	.word	0x08001065
 8000d04:	0800106b 	.word	0x0800106b
 8000d08:	08001071 	.word	0x08001071
 8000d0c:	08001077 	.word	0x08001077
 8000d10:	08001083 	.word	0x08001083
 8000d14:	08001089 	.word	0x08001089
 8000d18:	0800108f 	.word	0x0800108f
 8000d1c:	0800109f 	.word	0x0800109f
 8000d20:	080010ad 	.word	0x080010ad
	case 0:     menu_vars_var1= NULL; break;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e1ca      	b.n	80010c0 <menu_vars+0x528>
	case 1:     menu_vars_var1= &LFO[var_index].rate   ; break;
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4a5d      	ldr	r2, [pc, #372]	; (8000eac <menu_vars+0x314>)
 8000d36:	4413      	add	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	e1c1      	b.n	80010c0 <menu_vars+0x528>
	case 2:     menu_vars_var1= &LFO[var_index].depth    ; break;
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4413      	add	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4a59      	ldr	r2, [pc, #356]	; (8000eac <menu_vars+0x314>)
 8000d48:	4413      	add	r3, r2
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	e1b7      	b.n	80010c0 <menu_vars+0x528>
	case 3:     menu_vars_var1= &LFO[var_index].delay    ; break;
 8000d50:	78fa      	ldrb	r2, [r7, #3]
 8000d52:	4613      	mov	r3, r2
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	4413      	add	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4a54      	ldr	r2, [pc, #336]	; (8000eac <menu_vars+0x314>)
 8000d5c:	4413      	add	r3, r2
 8000d5e:	3304      	adds	r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	e1ad      	b.n	80010c0 <menu_vars+0x528>
	case 4:     menu_vars_var1= &LFO[var_index].offset    ; break;
 8000d64:	78fa      	ldrb	r2, [r7, #3]
 8000d66:	4613      	mov	r3, r2
 8000d68:	011b      	lsls	r3, r3, #4
 8000d6a:	4413      	add	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4a4f      	ldr	r2, [pc, #316]	; (8000eac <menu_vars+0x314>)
 8000d70:	4413      	add	r3, r2
 8000d72:	3303      	adds	r3, #3
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e1a3      	b.n	80010c0 <menu_vars+0x528>
	case 5:     menu_vars_var1= &patch[var_index].target    ; break;  // velocity etc
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	222c      	movs	r2, #44	; 0x2c
 8000d7c:	fb02 f303 	mul.w	r3, r2, r3
 8000d80:	4a4b      	ldr	r2, [pc, #300]	; (8000eb0 <menu_vars+0x318>)
 8000d82:	4413      	add	r3, r2
 8000d84:	3301      	adds	r3, #1
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	e19a      	b.n	80010c0 <menu_vars+0x528>
	case 6:     menu_vars_var1= NULL   ; break;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	e197      	b.n	80010c0 <menu_vars+0x528>
	case 7:     menu_vars_var1= &ADSR[var_index].attack    ; break;
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	4613      	mov	r3, r2
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4a46      	ldr	r2, [pc, #280]	; (8000eb4 <menu_vars+0x31c>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	e18e      	b.n	80010c0 <menu_vars+0x528>
	case 8:     menu_vars_var1= &ADSR[var_index].decay    ; break;
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	4613      	mov	r3, r2
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	1a9b      	subs	r3, r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <menu_vars+0x31c>)
 8000dae:	4413      	add	r3, r2
 8000db0:	3301      	adds	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	e184      	b.n	80010c0 <menu_vars+0x528>
	case 9:     menu_vars_var1= &ADSR[var_index].sustain    ; break;
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	4613      	mov	r3, r2
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4a3c      	ldr	r2, [pc, #240]	; (8000eb4 <menu_vars+0x31c>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	e17a      	b.n	80010c0 <menu_vars+0x528>
	case 10:     menu_vars_var1= &ADSR[var_index].release    ; break;
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	1a9b      	subs	r3, r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <menu_vars+0x31c>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3303      	adds	r3, #3
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	e170      	b.n	80010c0 <menu_vars+0x528>
	case 11:     menu_vars_var1= NULL  ; break;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	e16d      	b.n	80010c0 <menu_vars+0x528>
	case 12:     menu_vars_var1= &note[var_index].osc    ; break;
 8000de4:	78fb      	ldrb	r3, [r7, #3]
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <menu_vars+0x320>)
 8000dea:	4413      	add	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	e167      	b.n	80010c0 <menu_vars+0x528>
	case 13:     menu_vars_var1= &note[var_index].osc2    ; break;
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <menu_vars+0x320>)
 8000df6:	4413      	add	r3, r2
 8000df8:	3301      	adds	r3, #1
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	e160      	b.n	80010c0 <menu_vars+0x528>
	case 14:     menu_vars_var1= &note[var_index].pitch    ; break;
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <menu_vars+0x320>)
 8000e04:	4413      	add	r3, r2
 8000e06:	3302      	adds	r3, #2
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	e159      	b.n	80010c0 <menu_vars+0x528>
	case 15:     menu_vars_var1= &note[var_index].duration    ; break;
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <menu_vars+0x320>)
 8000e12:	4413      	add	r3, r2
 8000e14:	3303      	adds	r3, #3
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	e152      	b.n	80010c0 <menu_vars+0x528>
	case 16:     menu_vars_var1= &note[var_index].position    ; break;
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <menu_vars+0x320>)
 8000e20:	4413      	add	r3, r2
 8000e22:	3304      	adds	r3, #4
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	e14b      	b.n	80010c0 <menu_vars+0x528>
	case 17:     menu_vars_var1= &note[var_index].transpose    ; break;
 8000e28:	78fb      	ldrb	r3, [r7, #3]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4a22      	ldr	r2, [pc, #136]	; (8000eb8 <menu_vars+0x320>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	3305      	adds	r3, #5
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	e144      	b.n	80010c0 <menu_vars+0x528>
	case 18:     menu_vars_var1= &note[var_index].timeshift    ; break;
 8000e36:	78fb      	ldrb	r3, [r7, #3]
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <menu_vars+0x320>)
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3306      	adds	r3, #6
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	e13d      	b.n	80010c0 <menu_vars+0x528>
	case 19:     menu_vars_var1= &note[var_index].velocity   ; break; // 16 bit
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <menu_vars+0x320>)
 8000e4a:	4413      	add	r3, r2
 8000e4c:	3307      	adds	r3, #7
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e136      	b.n	80010c0 <menu_vars+0x528>
	case 20:     menu_vars_var1= &note[var_index].detune    ; break;
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	3308      	adds	r3, #8
 8000e58:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <menu_vars+0x320>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	e12f      	b.n	80010c0 <menu_vars+0x528>
	case 21:     menu_vars_var1= NULL   ; break;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	e12c      	b.n	80010c0 <menu_vars+0x528>
	case 22:     menu_vars_var1= &seq.pos    ; break;
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <menu_vars+0x324>)
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	e129      	b.n	80010c0 <menu_vars+0x528>
	case 23:     menu_vars_var1= &seq.tempo    ; break;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <menu_vars+0x328>)
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	e126      	b.n	80010c0 <menu_vars+0x528>
	case 24:     menu_vars_var1= &seq.notes1[var_index]   ; break;
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <menu_vars+0x324>)
 8000e76:	4413      	add	r3, r2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	e120      	b.n	80010c0 <menu_vars+0x528>
	case 25:     menu_vars_var1= &seq.notes2[var_index]   ; break;
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	3310      	adds	r3, #16
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <menu_vars+0x324>)
 8000e84:	4413      	add	r3, r2
 8000e86:	3303      	adds	r3, #3
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	e119      	b.n	80010c0 <menu_vars+0x528>
	case 26:     menu_vars_var1= &seq.loop [var_index]    ; break;
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	3320      	adds	r3, #32
 8000e90:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <menu_vars+0x324>)
 8000e92:	4413      	add	r3, r2
 8000e94:	3304      	adds	r3, #4
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e112      	b.n	80010c0 <menu_vars+0x528>
 8000e9a:	bf00      	nop
 8000e9c:	200096b2 	.word	0x200096b2
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	200108d9 	.word	0x200108d9
 8000ea8:	0800ee1c 	.word	0x0800ee1c
 8000eac:	2000ccb0 	.word	0x2000ccb0
 8000eb0:	2000d124 	.word	0x2000d124
 8000eb4:	2000d05c 	.word	0x2000d05c
 8000eb8:	20008e1c 	.word	0x20008e1c
 8000ebc:	2000d0f4 	.word	0x2000d0f4
 8000ec0:	2000d0f5 	.word	0x2000d0f5
	case 27: 	menu_vars_var1=&filter[var_index].cutoff_1 ;break;
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4a80      	ldr	r2, [pc, #512]	; (80010cc <menu_vars+0x534>)
 8000eca:	4413      	add	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	e0f7      	b.n	80010c0 <menu_vars+0x528>
	case 28: 	menu_vars_var1=&filter[var_index].cutoff_2 ;break;  // fine tune
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4a7d      	ldr	r2, [pc, #500]	; (80010cc <menu_vars+0x534>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	3301      	adds	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	e0f0      	b.n	80010c0 <menu_vars+0x528>
	case 29: 	menu_vars_var1=&filter[var_index].resonance ;break;
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4a7a      	ldr	r2, [pc, #488]	; (80010cc <menu_vars+0x534>)
 8000ee4:	4413      	add	r3, r2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	e0e9      	b.n	80010c0 <menu_vars+0x528>
	case 30: 	menu_vars_var1=&filter[var_index].q_level  ;break;
 8000eec:	78fb      	ldrb	r3, [r7, #3]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4a76      	ldr	r2, [pc, #472]	; (80010cc <menu_vars+0x534>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e0e2      	b.n	80010c0 <menu_vars+0x528>
	case 31: 	menu_vars_var1=&filter[var_index].level;break;
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	4a73      	ldr	r2, [pc, #460]	; (80010cc <menu_vars+0x534>)
 8000f00:	4413      	add	r3, r2
 8000f02:	3304      	adds	r3, #4
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e0db      	b.n	80010c0 <menu_vars+0x528>
	case 32: 	menu_vars_var1=&filter[var_index].feedback ;break;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4a6f      	ldr	r2, [pc, #444]	; (80010cc <menu_vars+0x534>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	3307      	adds	r3, #7
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	e0d4      	b.n	80010c0 <menu_vars+0x528>
	case 33: 	menu_vars_var1=&filter[var_index].out_mix ;break;
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	4a6c      	ldr	r2, [pc, #432]	; (80010cc <menu_vars+0x534>)
 8000f1c:	4413      	add	r3, r2
 8000f1e:	3306      	adds	r3, #6
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	e0cd      	b.n	80010c0 <menu_vars+0x528>
	case 34: 	menu_vars_var1=&filter[var_index].poles ;break;
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4a68      	ldr	r2, [pc, #416]	; (80010cc <menu_vars+0x534>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	3305      	adds	r3, #5
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	e0c6      	b.n	80010c0 <menu_vars+0x528>
	case 35:     menu_vars_var1= &patch[var_index].target_index    ; break;     // select note
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	222c      	movs	r2, #44	; 0x2c
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <menu_vars+0x538>)
 8000f3c:	4413      	add	r3, r2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	e0bd      	b.n	80010c0 <menu_vars+0x528>
	case 36: 	menu_vars_var1=&patch[var_index].input1 ;break;
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	222c      	movs	r2, #44	; 0x2c
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	4a60      	ldr	r2, [pc, #384]	; (80010d0 <menu_vars+0x538>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	e0b5      	b.n	80010c0 <menu_vars+0x528>
	case 37: 	menu_vars_var1=&patch[var_index].input2 ;break;
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	222c      	movs	r2, #44	; 0x2c
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	4a5c      	ldr	r2, [pc, #368]	; (80010d0 <menu_vars+0x538>)
 8000f5e:	4413      	add	r3, r2
 8000f60:	3303      	adds	r3, #3
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	e0ac      	b.n	80010c0 <menu_vars+0x528>
	case 38: 	menu_vars_var1=&patch[var_index].in_mix ;break;
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	222c      	movs	r2, #44	; 0x2c
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	4a58      	ldr	r2, [pc, #352]	; (80010d0 <menu_vars+0x538>)
 8000f70:	4413      	add	r3, r2
 8000f72:	3304      	adds	r3, #4
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	e0a3      	b.n	80010c0 <menu_vars+0x528>
	case 39: 	menu_vars_var1=&patch[var_index].in_offset ;break;
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	fb02 f303 	mul.w	r3, r2, r3
 8000f80:	4a53      	ldr	r2, [pc, #332]	; (80010d0 <menu_vars+0x538>)
 8000f82:	4413      	add	r3, r2
 8000f84:	3305      	adds	r3, #5
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e09a      	b.n	80010c0 <menu_vars+0x528>
	case 40:     menu_vars_var1= &LFO_slave1[var_index].rate   ; break;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4a4f      	ldr	r2, [pc, #316]	; (80010d4 <menu_vars+0x53c>)
 8000f96:	4413      	add	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	e091      	b.n	80010c0 <menu_vars+0x528>
	case 41:     menu_vars_var1= &LFO_slave1[var_index].depth    ; break;
 8000f9c:	78fa      	ldrb	r2, [r7, #3]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <menu_vars+0x53c>)
 8000fa8:	4413      	add	r3, r2
 8000faa:	3301      	adds	r3, #1
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	e087      	b.n	80010c0 <menu_vars+0x528>
	case 42:     menu_vars_var1= &LFO_slave1[var_index].delay    ; break;
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4a46      	ldr	r2, [pc, #280]	; (80010d4 <menu_vars+0x53c>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	e07d      	b.n	80010c0 <menu_vars+0x528>
	case 43:     menu_vars_var1= &LFO_slave1[var_index].offset    ; break;
 8000fc4:	78fa      	ldrb	r2, [r7, #3]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4a41      	ldr	r2, [pc, #260]	; (80010d4 <menu_vars+0x53c>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e073      	b.n	80010c0 <menu_vars+0x528>
	case 44: 	menu_vars_var1=&sampler.offset2[var_index] ;break;
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	3310      	adds	r3, #16
 8000fdc:	4a3e      	ldr	r2, [pc, #248]	; (80010d8 <menu_vars+0x540>)
 8000fde:	4413      	add	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e06d      	b.n	80010c0 <menu_vars+0x528>
	case 45: 	menu_vars_var1=&sampler.RAM_offset ;break;
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <menu_vars+0x544>)
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	e06a      	b.n	80010c0 <menu_vars+0x528>
	case 46: 	menu_vars_var1=&sampler.end_MSB ;break;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <menu_vars+0x548>)
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	e067      	b.n	80010c0 <menu_vars+0x528>
	case 47: 	menu_vars_var1=&sampler.end_LSB ;break;
 8000ff0:	4b3c      	ldr	r3, [pc, #240]	; (80010e4 <menu_vars+0x54c>)
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	e064      	b.n	80010c0 <menu_vars+0x528>
	case 48: 	menu_vars_var1=&sampler.offset[var_index] ;break;
 8000ff6:	78fb      	ldrb	r3, [r7, #3]
 8000ff8:	4a37      	ldr	r2, [pc, #220]	; (80010d8 <menu_vars+0x540>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	e05f      	b.n	80010c0 <menu_vars+0x528>
	case 49:     menu_vars_var1= &LFO_square[var_index].rate   ; break;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <menu_vars+0x550>)
 800100c:	4413      	add	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	e056      	b.n	80010c0 <menu_vars+0x528>
	case 50:     menu_vars_var1= &LFO_square[var_index].depth    ; break;
 8001012:	78fa      	ldrb	r2, [r7, #3]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <menu_vars+0x550>)
 800101e:	4413      	add	r3, r2
 8001020:	3301      	adds	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	e04c      	b.n	80010c0 <menu_vars+0x528>
	case 51:     menu_vars_var1= &LFO_square[var_index].offset    ; break;
 8001026:	78fa      	ldrb	r2, [r7, #3]
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4a2d      	ldr	r2, [pc, #180]	; (80010e8 <menu_vars+0x550>)
 8001032:	4413      	add	r3, r2
 8001034:	3302      	adds	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	e042      	b.n	80010c0 <menu_vars+0x528>
	case 52:     menu_vars_var1= &LFO_square[var_index].delay    ; break;
 800103a:	78fa      	ldrb	r2, [r7, #3]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <menu_vars+0x550>)
 8001046:	4413      	add	r3, r2
 8001048:	3303      	adds	r3, #3
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	e038      	b.n	80010c0 <menu_vars+0x528>
	case 53:     menu_vars_var1= &LCD_Info[var_index]    ; break; // send as char
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	4a26      	ldr	r2, [pc, #152]	; (80010ec <menu_vars+0x554>)
 8001052:	4413      	add	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	e033      	b.n	80010c0 <menu_vars+0x528>
	case 54: 	menu_vars_var1=&sampler.trigger_1 ;break;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <menu_vars+0x558>)
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	e030      	b.n	80010c0 <menu_vars+0x528>
	case 55: 	menu_vars_var1=&sampler.trigger_2 ;break;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <menu_vars+0x55c>)
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	e02d      	b.n	80010c0 <menu_vars+0x528>
	case 56: 	menu_vars_var1=&sampler.trigger_3 ;break;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <menu_vars+0x560>)
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	e02a      	b.n	80010c0 <menu_vars+0x528>
	case 57: 	menu_vars_var1=&sampler.trigger_4 ;break;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <menu_vars+0x564>)
 800106c:	613b      	str	r3, [r7, #16]
 800106e:	e027      	b.n	80010c0 <menu_vars+0x528>
	case 58: 	menu_vars_var1=&sampler.repeat  ;break;
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <menu_vars+0x568>)
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e024      	b.n	80010c0 <menu_vars+0x528>
	case 59: 	menu_vars_var1=&sampler.sample_select[var_index]  ;break;
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	3308      	adds	r3, #8
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <menu_vars+0x540>)
 800107c:	4413      	add	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	e01e      	b.n	80010c0 <menu_vars+0x528>
	case 60: 	menu_vars_var1=&sampler.sample_save  ;break;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <menu_vars+0x56c>)
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e01b      	b.n	80010c0 <menu_vars+0x528>
	case 61: 	menu_vars_var1=&sampler.sample_save_enable  ;break;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <menu_vars+0x570>)
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e018      	b.n	80010c0 <menu_vars+0x528>
	case 62:     menu_vars_var1= &note[var_index].slide_length    ; break;
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	3308      	adds	r3, #8
 8001094:	4a1d      	ldr	r2, [pc, #116]	; (800110c <menu_vars+0x574>)
 8001096:	4413      	add	r3, r2
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	e010      	b.n	80010c0 <menu_vars+0x528>
	case 63: 	menu_vars_var1=&sampler.Snotes1[var_index]  ;break;
 800109e:	78fb      	ldrb	r3, [r7, #3]
 80010a0:	3330      	adds	r3, #48	; 0x30
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <menu_vars+0x540>)
 80010a4:	4413      	add	r3, r2
 80010a6:	3304      	adds	r3, #4
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	e009      	b.n	80010c0 <menu_vars+0x528>
	case 64: 	menu_vars_var1=&sampler.Snotes2[var_index]  ;break;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	3340      	adds	r3, #64	; 0x40
 80010b0:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <menu_vars+0x540>)
 80010b2:	4413      	add	r3, r2
 80010b4:	3304      	adds	r3, #4
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	e002      	b.n	80010c0 <menu_vars+0x528>

	default :		menu_vars_var1= NULL   ; break;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	bf00      	nop

	}
    // copy back address  ,ok
	// return the result number for later reference
	//menu_vars_var= menu_vars_var1;
	return menu_vars_var1;
 80010c0:	693b      	ldr	r3, [r7, #16]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20008ebc 	.word	0x20008ebc
 80010d0:	2000d124 	.word	0x2000d124
 80010d4:	2000cf58 	.word	0x2000cf58
 80010d8:	20008edc 	.word	0x20008edc
 80010dc:	20008ef9 	.word	0x20008ef9
 80010e0:	20008efc 	.word	0x20008efc
 80010e4:	20008efd 	.word	0x20008efd
 80010e8:	2000cf94 	.word	0x2000cf94
 80010ec:	20011cf4 	.word	0x20011cf4
 80010f0:	20008ef4 	.word	0x20008ef4
 80010f4:	20008ef5 	.word	0x20008ef5
 80010f8:	20008ef6 	.word	0x20008ef6
 80010fc:	20008ef7 	.word	0x20008ef7
 8001100:	20008ef8 	.word	0x20008ef8
 8001104:	20008efe 	.word	0x20008efe
 8001108:	20008f04 	.word	0x20008f04
 800110c:	20008e1c 	.word	0x20008e1c

08001110 <menu_parser>:





void menu_parser(void){          // parse out menus , shouldn't have to run (in theory) once filled ,only for feedback pointer maybe
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

	    char menu_string[8]="xxxxxxxx";   // incoming string holder (single)
 8001116:	4a6b      	ldr	r2, [pc, #428]	; (80012c4 <menu_parser+0x1b4>)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001120:	e883 0003 	stmia.w	r3, {r0, r1}
	    char menu_string2[8]="hhhhhhhh";
 8001124:	4a68      	ldr	r2, [pc, #416]	; (80012c8 <menu_parser+0x1b8>)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800112c:	e883 0003 	stmia.w	r3, {r0, r1}
	    uint8_t string_counter=0;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
    	    uint16_t menu_searchsize=sizeof(default_menu)-8;   // this should fairly big always , leave gap at the end , atm 480
 8001134:	f640 6389 	movw	r3, #3721	; 0xe89
 8001138:	82bb      	strh	r3, [r7, #20]

	    if (string_search>menu_searchsize) {                    //this is ok
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <menu_parser+0x1bc>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	8aba      	ldrh	r2, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f0c0 80bb 	bcc.w	80012bc <menu_parser+0x1ac>
		    return;    }    // check if bigger than search area
	    //if (menu_counter>240)  return;
	    memcpy(menu_string,default_menu+string_search,8);    //copy 8 strings created menu array
 8001146:	4b61      	ldr	r3, [pc, #388]	; (80012cc <menu_parser+0x1bc>)
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	461a      	mov	r2, r3
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <menu_parser+0x1c0>)
 800114e:	441a      	add	r2, r3
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	6810      	ldr	r0, [r2, #0]
 8001156:	6851      	ldr	r1, [r2, #4]
 8001158:	c303      	stmia	r3!, {r0, r1}
	    ////////////////////////////
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
 800115e:	e092      	b.n	8001286 <menu_parser+0x176>

		    memcpy(menu_string2,menu_titles_final[string_counter],8);
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <menu_parser+0x1c4>)
 8001164:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	6810      	ldr	r0, [r2, #0]
 800116c:	6851      	ldr	r1, [r2, #4]
 800116e:	c303      	stmia	r3!, {r0, r1}
		    if  ((strncmp(menu_string,menu_string2,8))==0) 								// compare and if true pass var,seq
 8001170:	1d39      	adds	r1, r7, #4
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2208      	movs	r2, #8
 8001178:	4618      	mov	r0, r3
 800117a:	f00c fa11 	bl	800d5a0 <strncmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d17d      	bne.n	8001280 <menu_parser+0x170>
		    {

			    if ((menu_counter>111 )&&(menu_counter<128 )) menu_counter=menu_counter+16;   // skip to second page
 8001184:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <menu_parser+0x1c8>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2b6f      	cmp	r3, #111	; 0x6f
 800118a:	d909      	bls.n	80011a0 <menu_parser+0x90>
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <menu_parser+0x1c8>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	2b7f      	cmp	r3, #127	; 0x7f
 8001192:	d805      	bhi.n	80011a0 <menu_parser+0x90>
 8001194:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <menu_parser+0x1c8>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	3310      	adds	r3, #16
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b4e      	ldr	r3, [pc, #312]	; (80012d8 <menu_parser+0x1c8>)
 800119e:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>239)&&(menu_counter<256 )) menu_counter=menu_counter+16; // skip
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <menu_parser+0x1c8>)
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	2bef      	cmp	r3, #239	; 0xef
 80011a6:	d909      	bls.n	80011bc <menu_parser+0xac>
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <menu_parser+0x1c8>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	2bff      	cmp	r3, #255	; 0xff
 80011ae:	d805      	bhi.n	80011bc <menu_parser+0xac>
 80011b0:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <menu_parser+0x1c8>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	3310      	adds	r3, #16
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <menu_parser+0x1c8>)
 80011ba:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>367)&&(menu_counter<384 )) menu_counter=menu_counter+16; // skip
 80011bc:	4b46      	ldr	r3, [pc, #280]	; (80012d8 <menu_parser+0x1c8>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 80011c4:	d30a      	bcc.n	80011dc <menu_parser+0xcc>
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <menu_parser+0x1c8>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80011ce:	d205      	bcs.n	80011dc <menu_parser+0xcc>
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <menu_parser+0x1c8>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	3310      	adds	r3, #16
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <menu_parser+0x1c8>)
 80011da:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>495)&&(menu_counter<512 )) menu_counter=menu_counter+16; // skip
 80011dc:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <menu_parser+0x1c8>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 80011e4:	d30a      	bcc.n	80011fc <menu_parser+0xec>
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <menu_parser+0x1c8>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011ee:	d205      	bcs.n	80011fc <menu_parser+0xec>
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <menu_parser+0x1c8>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	3310      	adds	r3, #16
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <menu_parser+0x1c8>)
 80011fa:	801a      	strh	r2, [r3, #0]
			    if((menu_counter>623)&&(menu_counter<640 )) menu_counter=menu_counter+16; // skip
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <menu_parser+0x1c8>)
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	f5b3 7f1c 	cmp.w	r3, #624	; 0x270
 8001204:	d30a      	bcc.n	800121c <menu_parser+0x10c>
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <menu_parser+0x1c8>)
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800120e:	d205      	bcs.n	800121c <menu_parser+0x10c>
 8001210:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <menu_parser+0x1c8>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	3310      	adds	r3, #16
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <menu_parser+0x1c8>)
 800121a:	801a      	strh	r2, [r3, #0]

			    menu_title_lut[menu_title_count]=  (string_counter <<16)+(menu_counter&1023);   // search result  and disp lcd position counter
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	041a      	lsls	r2, r3, #16
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <menu_parser+0x1c8>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001228:	18d1      	adds	r1, r2, r3
 800122a:	4b2c      	ldr	r3, [pc, #176]	; (80012dc <menu_parser+0x1cc>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <menu_parser+0x1d0>)
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    			    memcpy(menu_index_list+(menu_title_count*2),default_menu+string_search-2,2); // get array  index under ,LFO[1]  etc ,ok
 8001236:	4b29      	ldr	r3, [pc, #164]	; (80012dc <menu_parser+0x1cc>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	461a      	mov	r2, r3
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <menu_parser+0x1d4>)
 8001240:	18d0      	adds	r0, r2, r3
 8001242:	4b22      	ldr	r3, [pc, #136]	; (80012cc <menu_parser+0x1bc>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	3b02      	subs	r3, #2
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <menu_parser+0x1c0>)
 800124a:	4413      	add	r3, r2
 800124c:	2202      	movs	r2, #2
 800124e:	4619      	mov	r1, r3
 8001250:	f00c f990 	bl	800d574 <memcpy>
        			    menu_title_count++;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <menu_parser+0x1cc>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	3301      	adds	r3, #1
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <menu_parser+0x1cc>)
 800125e:	801a      	strh	r2, [r3, #0]
			    menu_counter++;
 8001260:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <menu_parser+0x1c8>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <menu_parser+0x1c8>)
 800126a:	801a      	strh	r2, [r3, #0]
			    space_check=0;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <menu_parser+0x1d8>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			    string_search=string_search+8;     // advance search position
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <menu_parser+0x1bc>)
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	3308      	adds	r3, #8
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <menu_parser+0x1bc>)
 800127c:	801a      	strh	r2, [r3, #0]
    			    return;}
 800127e:	e01e      	b.n	80012be <menu_parser+0x1ae>
	    for (string_counter=0;string_counter<menu_lookup_count;string_counter++){    	// test a single menu entry  , for now only the first record
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	3301      	adds	r3, #1
 8001284:	75fb      	strb	r3, [r7, #23]
 8001286:	7dfb      	ldrb	r3, [r7, #23]
 8001288:	2b41      	cmp	r3, #65	; 0x41
 800128a:	f67f af69 	bls.w	8001160 <menu_parser+0x50>
    	    }
        if (space_check>1)  menu_counter++;   //this is ok
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <menu_parser+0x1d8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d905      	bls.n	80012a2 <menu_parser+0x192>
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <menu_parser+0x1c8>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <menu_parser+0x1c8>)
 80012a0:	801a      	strh	r2, [r3, #0]
	    space_check++;  // count empty spaces or fill characters
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <menu_parser+0x1d8>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <menu_parser+0x1d8>)
 80012ac:	701a      	strb	r2, [r3, #0]
	    string_search++;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <menu_parser+0x1bc>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <menu_parser+0x1bc>)
 80012b8:	801a      	strh	r2, [r3, #0]
	    return;
 80012ba:	e000      	b.n	80012be <menu_parser+0x1ae>
		    return;    }    // check if bigger than search area
 80012bc:	bf00      	nop

    }
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	0800dc08 	.word	0x0800dc08
 80012c8:	0800dc10 	.word	0x0800dc10
 80012cc:	2000d494 	.word	0x2000d494
 80012d0:	0800df88 	.word	0x0800df88
 80012d4:	20000000 	.word	0x20000000
 80012d8:	2000d496 	.word	0x2000d496
 80012dc:	2000d49a 	.word	0x2000d49a
 80012e0:	2000d49c 	.word	0x2000d49c
 80012e4:	2000dc9c 	.word	0x2000dc9c
 80012e8:	2000d498 	.word	0x2000d498

080012ec <patch_target_parse>:

void patch_target_parse(void){    // records ptr for target options , works ok
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
uint8_t skip=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
		uint8_t counter;

for (counter=0;counter<20;counter++){
 80012f6:	2300      	movs	r3, #0
 80012f8:	75bb      	strb	r3, [r7, #22]
 80012fa:	e1b5      	b.n	8001668 <patch_target_parse+0x37c>

			uint16_t* output_hold;
			uint16_t* output_hold2;


			uint8_t input_hold=patch[counter].input1;
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	4a97      	ldr	r2, [pc, #604]	; (800155c <patch_target_parse+0x270>)
 8001300:	212c      	movs	r1, #44	; 0x2c
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	727b      	strb	r3, [r7, #9]
			uint8_t input_hold2=patch[counter].input2;
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	4a93      	ldr	r2, [pc, #588]	; (800155c <patch_target_parse+0x270>)
 8001310:	212c      	movs	r1, #44	; 0x2c
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	4413      	add	r3, r2
 8001318:	3303      	adds	r3, #3
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	723b      	strb	r3, [r7, #8]
			if (patch[counter].input1>=(menu_lookup_count))    patch[counter].input1=0;    // limit
 800131e:	7dbb      	ldrb	r3, [r7, #22]
 8001320:	4a8e      	ldr	r2, [pc, #568]	; (800155c <patch_target_parse+0x270>)
 8001322:	212c      	movs	r1, #44	; 0x2c
 8001324:	fb01 f303 	mul.w	r3, r1, r3
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b41      	cmp	r3, #65	; 0x41
 800132e:	d907      	bls.n	8001340 <patch_target_parse+0x54>
 8001330:	7dbb      	ldrb	r3, [r7, #22]
 8001332:	4a8a      	ldr	r2, [pc, #552]	; (800155c <patch_target_parse+0x270>)
 8001334:	212c      	movs	r1, #44	; 0x2c
 8001336:	fb01 f303 	mul.w	r3, r1, r3
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

			switch(input_hold&3){     // lfo now , can add adsr later
 8001340:	7a7b      	ldrb	r3, [r7, #9]
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	2b03      	cmp	r3, #3
 8001348:	d840      	bhi.n	80013cc <patch_target_parse+0xe0>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <patch_target_parse+0x64>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	08001361 	.word	0x08001361
 8001354:	0800137b 	.word	0x0800137b
 8001358:	08001397 	.word	0x08001397
 800135c:	080013b3 	.word	0x080013b3

						case 0:   output_hold=&LFO[input_hold>>2].out[0];break;
 8001360:	7a7b      	ldrb	r3, [r7, #9]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <patch_target_parse+0x274>)
 8001372:	4413      	add	r3, r2
 8001374:	3306      	adds	r3, #6
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e028      	b.n	80013cc <patch_target_parse+0xe0>
						case 1:   output_hold=&LFO[input_hold>>2].out_saw[0];break;
 800137a:	7a7b      	ldrb	r3, [r7, #9]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	4613      	mov	r3, r2
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	4a74      	ldr	r2, [pc, #464]	; (8001560 <patch_target_parse+0x274>)
 800138e:	4413      	add	r3, r2
 8001390:	3302      	adds	r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	e01a      	b.n	80013cc <patch_target_parse+0xe0>
						case 2:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
 8001396:	7a7b      	ldrb	r3, [r7, #9]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	b2db      	uxtb	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	4613      	mov	r3, r2
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	3328      	adds	r3, #40	; 0x28
 80013a8:	4a6d      	ldr	r2, [pc, #436]	; (8001560 <patch_target_parse+0x274>)
 80013aa:	4413      	add	r3, r2
 80013ac:	3306      	adds	r3, #6
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	e00c      	b.n	80013cc <patch_target_parse+0xe0>
						//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
						case 3:   output_hold=&LFO_square[input_hold>>2].out[0];break;
 80013b2:	7a7b      	ldrb	r3, [r7, #9]
 80013b4:	089b      	lsrs	r3, r3, #2
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4a68      	ldr	r2, [pc, #416]	; (8001564 <patch_target_parse+0x278>)
 80013c4:	4413      	add	r3, r2
 80013c6:	3304      	adds	r3, #4
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	bf00      	nop
			}
			if (patch[counter].input2>=(menu_lookup_count))    patch[counter].input2=0;    // limit
 80013cc:	7dbb      	ldrb	r3, [r7, #22]
 80013ce:	4a63      	ldr	r2, [pc, #396]	; (800155c <patch_target_parse+0x270>)
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	fb01 f303 	mul.w	r3, r1, r3
 80013d6:	4413      	add	r3, r2
 80013d8:	3303      	adds	r3, #3
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b41      	cmp	r3, #65	; 0x41
 80013de:	d908      	bls.n	80013f2 <patch_target_parse+0x106>
 80013e0:	7dbb      	ldrb	r3, [r7, #22]
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <patch_target_parse+0x270>)
 80013e4:	212c      	movs	r1, #44	; 0x2c
 80013e6:	fb01 f303 	mul.w	r3, r1, r3
 80013ea:	4413      	add	r3, r2
 80013ec:	3303      	adds	r3, #3
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

			switch(input_hold2&3){     // lfo now , can add adsr later
 80013f2:	7a3b      	ldrb	r3, [r7, #8]
 80013f4:	f003 0303 	and.w	r3, r3, #3
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d841      	bhi.n	8001480 <patch_target_parse+0x194>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <patch_target_parse+0x118>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001415 	.word	0x08001415
 8001408:	0800142f 	.word	0x0800142f
 800140c:	0800144b 	.word	0x0800144b
 8001410:	08001467 	.word	0x08001467

			case 0:   output_hold2=&LFO[input_hold2>>2].out[0];break;
 8001414:	7a3b      	ldrb	r3, [r7, #8]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4a4e      	ldr	r2, [pc, #312]	; (8001560 <patch_target_parse+0x274>)
 8001426:	4413      	add	r3, r2
 8001428:	3306      	adds	r3, #6
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e028      	b.n	8001480 <patch_target_parse+0x194>
			case 1:   output_hold2=&LFO[input_hold2>>2].out_saw[0];break;
 800142e:	7a3b      	ldrb	r3, [r7, #8]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	3318      	adds	r3, #24
 8001440:	4a47      	ldr	r2, [pc, #284]	; (8001560 <patch_target_parse+0x274>)
 8001442:	4413      	add	r3, r2
 8001444:	3302      	adds	r3, #2
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	e01a      	b.n	8001480 <patch_target_parse+0x194>
			case 2:   output_hold2=&LFO[input_hold2>>2].out_tri[0];break;
 800144a:	7a3b      	ldrb	r3, [r7, #8]
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	b2db      	uxtb	r3, r3
 8001450:	461a      	mov	r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	3328      	adds	r3, #40	; 0x28
 800145c:	4a40      	ldr	r2, [pc, #256]	; (8001560 <patch_target_parse+0x274>)
 800145e:	4413      	add	r3, r2
 8001460:	3306      	adds	r3, #6
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e00c      	b.n	8001480 <patch_target_parse+0x194>
			//case 3:   output_hold=&LFO[input_hold>>2].out_tri[0];break;
			case 3:   output_hold2=&LFO_square[input_hold2>>2].out[0];break;
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <patch_target_parse+0x278>)
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	bf00      	nop
			}

			if (patch[counter].input1==41) output_hold=&adc_values[1];   // same format as lfo
 8001480:	7dbb      	ldrb	r3, [r7, #22]
 8001482:	4a36      	ldr	r2, [pc, #216]	; (800155c <patch_target_parse+0x270>)
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b29      	cmp	r3, #41	; 0x29
 8001490:	d101      	bne.n	8001496 <patch_target_parse+0x1aa>
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <patch_target_parse+0x27c>)
 8001494:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==42) output_hold=&adc_values[2]; // do this for other single values
 8001496:	7dbb      	ldrb	r3, [r7, #22]
 8001498:	4a30      	ldr	r2, [pc, #192]	; (800155c <patch_target_parse+0x270>)
 800149a:	212c      	movs	r1, #44	; 0x2c
 800149c:	fb01 f303 	mul.w	r3, r1, r3
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b2a      	cmp	r3, #42	; 0x2a
 80014a6:	d101      	bne.n	80014ac <patch_target_parse+0x1c0>
 80014a8:	4b30      	ldr	r3, [pc, #192]	; (800156c <patch_target_parse+0x280>)
 80014aa:	613b      	str	r3, [r7, #16]
			if (patch[counter].input1==43) output_hold=&adc_values[0];
 80014ac:	7dbb      	ldrb	r3, [r7, #22]
 80014ae:	4a2b      	ldr	r2, [pc, #172]	; (800155c <patch_target_parse+0x270>)
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b2b      	cmp	r3, #43	; 0x2b
 80014bc:	d101      	bne.n	80014c2 <patch_target_parse+0x1d6>
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <patch_target_parse+0x284>)
 80014c0:	613b      	str	r3, [r7, #16]
			if (patch[counter].input2==41) output_hold2=&adc_values[1];   // waiting on 8 values
 80014c2:	7dbb      	ldrb	r3, [r7, #22]
 80014c4:	4a25      	ldr	r2, [pc, #148]	; (800155c <patch_target_parse+0x270>)
 80014c6:	212c      	movs	r1, #44	; 0x2c
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	3303      	adds	r3, #3
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b29      	cmp	r3, #41	; 0x29
 80014d4:	d101      	bne.n	80014da <patch_target_parse+0x1ee>
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <patch_target_parse+0x27c>)
 80014d8:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==42) output_hold2=&adc_values[2]; // do this for other single values
 80014da:	7dbb      	ldrb	r3, [r7, #22]
 80014dc:	4a1f      	ldr	r2, [pc, #124]	; (800155c <patch_target_parse+0x270>)
 80014de:	212c      	movs	r1, #44	; 0x2c
 80014e0:	fb01 f303 	mul.w	r3, r1, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	3303      	adds	r3, #3
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b2a      	cmp	r3, #42	; 0x2a
 80014ec:	d101      	bne.n	80014f2 <patch_target_parse+0x206>
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <patch_target_parse+0x280>)
 80014f0:	60fb      	str	r3, [r7, #12]
			if (patch[counter].input2==43) output_hold2=&adc_values[0];
 80014f2:	7dbb      	ldrb	r3, [r7, #22]
 80014f4:	4a19      	ldr	r2, [pc, #100]	; (800155c <patch_target_parse+0x270>)
 80014f6:	212c      	movs	r1, #44	; 0x2c
 80014f8:	fb01 f303 	mul.w	r3, r1, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	3303      	adds	r3, #3
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b2b      	cmp	r3, #43	; 0x2b
 8001504:	d101      	bne.n	800150a <patch_target_parse+0x21e>
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <patch_target_parse+0x284>)
 8001508:	60fb      	str	r3, [r7, #12]



			patch[counter].in1_ptr=output_hold;   // sets input pointer to first sample , default is lfo[0].out [0]
 800150a:	7dbb      	ldrb	r3, [r7, #22]
 800150c:	4a13      	ldr	r2, [pc, #76]	; (800155c <patch_target_parse+0x270>)
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3320      	adds	r3, #32
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	601a      	str	r2, [r3, #0]
			patch[counter].in2_ptr=output_hold2;
 800151c:	7dbb      	ldrb	r3, [r7, #22]
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <patch_target_parse+0x270>)
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3324      	adds	r3, #36	; 0x24
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]


			if (patch[counter].target) {  // test if above zero
 800152e:	7dbb      	ldrb	r3, [r7, #22]
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <patch_target_parse+0x270>)
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3301      	adds	r3, #1
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 808f 	beq.w	8001662 <patch_target_parse+0x376>
				uint8_t target_input=patch[counter].target; // copy to avoid messed up pointer
 8001544:	7dbb      	ldrb	r3, [r7, #22]
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <patch_target_parse+0x270>)
 8001548:	212c      	movs	r1, #44	; 0x2c
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	4413      	add	r3, r2
 8001550:	3301      	adds	r3, #1
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	e016      	b.n	800158a <patch_target_parse+0x29e>
 800155c:	2000d124 	.word	0x2000d124
 8001560:	2000ccb0 	.word	0x2000ccb0
 8001564:	2000cf94 	.word	0x2000cf94
 8001568:	20008e0e 	.word	0x20008e0e
 800156c:	20008e10 	.word	0x20008e10
 8001570:	20008e0c 	.word	0x20008e0c
					if (patch_skip_list[target_input]==1)  target_input++;
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	4a41      	ldr	r2, [pc, #260]	; (800167c <patch_target_parse+0x390>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d102      	bne.n	8001584 <patch_target_parse+0x298>
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	3301      	adds	r3, #1
 8001582:	72fb      	strb	r3, [r7, #11]
			for(skip=target_input ;skip<menu_lookup_count;skip++){
 8001584:	7dfb      	ldrb	r3, [r7, #23]
 8001586:	3301      	adds	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	2b41      	cmp	r3, #65	; 0x41
 800158e:	d9f1      	bls.n	8001574 <patch_target_parse+0x288>
				}  // test against list and skip option if on 1
				if (target_input>(menu_lookup_count-1)) target_input=menu_lookup_count-1;
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	2b41      	cmp	r3, #65	; 0x41
 8001594:	d901      	bls.n	800159a <patch_target_parse+0x2ae>
 8001596:	2341      	movs	r3, #65	; 0x41
 8001598:	72fb      	strb	r3, [r7, #11]
				if (target_input!=35)  {     // make target index is not selected
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	2b23      	cmp	r3, #35	; 0x23
 800159e:	d057      	beq.n	8001650 <patch_target_parse+0x364>
			patch[counter].target=target_input; // write back corrected value
 80015a0:	7dbb      	ldrb	r3, [r7, #22]
 80015a2:	4a37      	ldr	r2, [pc, #220]	; (8001680 <patch_target_parse+0x394>)
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3301      	adds	r3, #1
 80015ae:	7afa      	ldrb	r2, [r7, #11]
 80015b0:	701a      	strb	r2, [r3, #0]

			uint8_t target_index=patch[counter].target_index;
 80015b2:	7dbb      	ldrb	r3, [r7, #22]
 80015b4:	4a32      	ldr	r2, [pc, #200]	; (8001680 <patch_target_parse+0x394>)
 80015b6:	212c      	movs	r1, #44	; 0x2c
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	3302      	adds	r3, #2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	72bb      	strb	r3, [r7, #10]
			if (target_index>menu_vars_index_limit[target_index]  )   // test limit
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <patch_target_parse+0x398>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	7aba      	ldrb	r2, [r7, #10]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d903      	bls.n	80015d8 <patch_target_parse+0x2ec>
			{	target_index=menu_vars_index_limit[target_index]; }
 80015d0:	7abb      	ldrb	r3, [r7, #10]
 80015d2:	4a2c      	ldr	r2, [pc, #176]	; (8001684 <patch_target_parse+0x398>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	72bb      	strb	r3, [r7, #10]
			patch[counter].target_index=target_index;
 80015d8:	7dbb      	ldrb	r3, [r7, #22]
 80015da:	4a29      	ldr	r2, [pc, #164]	; (8001680 <patch_target_parse+0x394>)
 80015dc:	212c      	movs	r1, #44	; 0x2c
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	3302      	adds	r3, #2
 80015e6:	7aba      	ldrb	r2, [r7, #10]
 80015e8:	701a      	strb	r2, [r3, #0]
			uint8_t*  target_out_ptr= menu_vars(menu_titles_final[target_input] , target_index    );
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	4a26      	ldr	r2, [pc, #152]	; (8001688 <patch_target_parse+0x39c>)
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	7aba      	ldrb	r2, [r7, #10]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff face 	bl	8000b98 <menu_vars>
 80015fc:	6078      	str	r0, [r7, #4]
			if (target_out_ptr)           {patch[counter].out_ptr =target_out_ptr;     // write ptr
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d02e      	beq.n	8001662 <patch_target_parse+0x376>
 8001604:	7dbb      	ldrb	r3, [r7, #22]
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <patch_target_parse+0x394>)
 8001608:	212c      	movs	r1, #44	; 0x2c
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	331c      	adds	r3, #28
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
			patch[counter].divider=LFO_vars_divider[menu_vars_ref];
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <patch_target_parse+0x3a0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	7dbb      	ldrb	r3, [r7, #22]
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <patch_target_parse+0x3a4>)
 8001620:	5c50      	ldrb	r0, [r2, r1]
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <patch_target_parse+0x394>)
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3329      	adds	r3, #41	; 0x29
 800162e:	4602      	mov	r2, r0
 8001630:	701a      	strb	r2, [r3, #0]
			patch[counter].limiter=menu_vars_limiter[menu_vars_ref]; }      // writes limiter value for particular patch , deosnt save
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <patch_target_parse+0x3a0>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	7dbb      	ldrb	r3, [r7, #22]
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <patch_target_parse+0x3a8>)
 800163c:	5c50      	ldrb	r0, [r2, r1]
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <patch_target_parse+0x394>)
 8001640:	212c      	movs	r1, #44	; 0x2c
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3328      	adds	r3, #40	; 0x28
 800164a:	4602      	mov	r2, r0
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e008      	b.n	8001662 <patch_target_parse+0x376>
				}
				else patch[counter].target=0;  // write back 0 if failed
 8001650:	7dbb      	ldrb	r3, [r7, #22]
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <patch_target_parse+0x394>)
 8001654:	212c      	movs	r1, #44	; 0x2c
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	4413      	add	r3, r2
 800165c:	3301      	adds	r3, #1
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
for (counter=0;counter<20;counter++){
 8001662:	7dbb      	ldrb	r3, [r7, #22]
 8001664:	3301      	adds	r3, #1
 8001666:	75bb      	strb	r3, [r7, #22]
 8001668:	7dbb      	ldrb	r3, [r7, #22]
 800166a:	2b13      	cmp	r3, #19
 800166c:	f67f ae46 	bls.w	80012fc <patch_target_parse+0x10>
			}
		}
	}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	0800eea4 	.word	0x0800eea4
 8001680:	2000d124 	.word	0x2000d124
 8001684:	0800ee1c 	.word	0x0800ee1c
 8001688:	20000000 	.word	0x20000000
 800168c:	200108d9 	.word	0x200108d9
 8001690:	20012994 	.word	0x20012994
 8001694:	0800ee60 	.word	0x0800ee60

08001698 <patch_target_replace>:

		}
	}*/
}

	void patch_target_replace(void){					// sttaight value replace  ,ok
 8001698:	b490      	push	{r4, r7}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
	    uint8_t loop_position=sampling_position&7;    // 0-7 , this comes usually from 0-512 loop / 64
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <patch_target_replace+0x16c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	753b      	strb	r3, [r7, #20]
	    uint8_t counter;
	   uint8_t input_loop_position;
	   int32_t output_hold;
	   int32_t output_hold2;
	   uint8_t input_mix=0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	74fb      	strb	r3, [r7, #19]

	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80016ac:	2300      	movs	r3, #0
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	e09d      	b.n	80017ee <patch_target_replace+0x156>



		    if (patch[counter].target) {         // check first for enable
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	4a54      	ldr	r2, [pc, #336]	; (8001808 <patch_target_replace+0x170>)
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3301      	adds	r3, #1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8090 	beq.w	80017e8 <patch_target_replace+0x150>

			if ((patch[counter].input1>40) ||(patch[counter].input2>40) )input_loop_position=0;  else input_loop_position=loop_position;// hack
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <patch_target_replace+0x170>)
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b28      	cmp	r3, #40	; 0x28
 80016d8:	d809      	bhi.n	80016ee <patch_target_replace+0x56>
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	4a4a      	ldr	r2, [pc, #296]	; (8001808 <patch_target_replace+0x170>)
 80016de:	212c      	movs	r1, #44	; 0x2c
 80016e0:	fb01 f303 	mul.w	r3, r1, r3
 80016e4:	4413      	add	r3, r2
 80016e6:	3303      	adds	r3, #3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b28      	cmp	r3, #40	; 0x28
 80016ec:	d902      	bls.n	80016f4 <patch_target_replace+0x5c>
 80016ee:	2300      	movs	r3, #0
 80016f0:	75bb      	strb	r3, [r7, #22]
 80016f2:	e001      	b.n	80016f8 <patch_target_replace+0x60>
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	75bb      	strb	r3, [r7, #22]


				input_mix=patch[counter].in_mix;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4a43      	ldr	r2, [pc, #268]	; (8001808 <patch_target_replace+0x170>)
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	74fb      	strb	r3, [r7, #19]
				output_hold	      =*(patch[counter].in1_ptr+(input_loop_position));   //write output here
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	4a3e      	ldr	r2, [pc, #248]	; (8001808 <patch_target_replace+0x170>)
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3320      	adds	r3, #32
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
				output_hold2	      =*(patch[counter].in2_ptr+(input_loop_position));   //write output here
 8001724:	7dfb      	ldrb	r3, [r7, #23]
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <patch_target_replace+0x170>)
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3324      	adds	r3, #36	; 0x24
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	7dbb      	ldrb	r3, [r7, #22]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	60bb      	str	r3, [r7, #8]

				output_hold	=output_hold*(16-input_mix);   // bit messy  might just pre_calc
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	f1c3 0210 	rsb	r2, r3, #16
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	60fb      	str	r3, [r7, #12]
				output_hold2	=output_hold2*input_mix;
 800174c:	7cfa      	ldrb	r2, [r7, #19]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	60bb      	str	r3, [r7, #8]



				patch[counter].output[loop_position]	=((output_hold+output_hold2)>>4);
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	1119      	asrs	r1, r3, #4
 800175e:	7dfa      	ldrb	r2, [r7, #23]
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	b28c      	uxth	r4, r1
 8001764:	4928      	ldr	r1, [pc, #160]	; (8001808 <patch_target_replace+0x170>)
 8001766:	2016      	movs	r0, #22
 8001768:	fb00 f202 	mul.w	r2, r0, r2
 800176c:	4413      	add	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	440b      	add	r3, r1
 8001772:	4622      	mov	r2, r4
 8001774:	80da      	strh	r2, [r3, #6]


			    uint8_t  *ptr_to_modify =patch[counter].out_ptr;       // select address , not always 8 bit ,ok
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	4a23      	ldr	r2, [pc, #140]	; (8001808 <patch_target_replace+0x170>)
 800177a:	212c      	movs	r1, #44	; 0x2c
 800177c:	fb01 f303 	mul.w	r3, r1, r3
 8001780:	4413      	add	r3, r2
 8001782:	331c      	adds	r3, #28
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	607b      	str	r3, [r7, #4]
			    uint16_t lfo_out_temp=  (patch[counter].output [loop_position])>>8;  // 0-256,
 8001788:	7dfa      	ldrb	r2, [r7, #23]
 800178a:	7d3b      	ldrb	r3, [r7, #20]
 800178c:	491e      	ldr	r1, [pc, #120]	; (8001808 <patch_target_replace+0x170>)
 800178e:	2016      	movs	r0, #22
 8001790:	fb00 f202 	mul.w	r2, r0, r2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	88db      	ldrh	r3, [r3, #6]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	807b      	strh	r3, [r7, #2]
			    uint8_t lfo_mod1=ptr_to_modify; //ok
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	707b      	strb	r3, [r7, #1]

			    uint8_t  var_replaced =  lfo_out_temp >>patch[counter].divider;   // grab lfo out *    data to be modfied
 80017a4:	887b      	ldrh	r3, [r7, #2]
 80017a6:	7dfa      	ldrb	r2, [r7, #23]
 80017a8:	4917      	ldr	r1, [pc, #92]	; (8001808 <patch_target_replace+0x170>)
 80017aa:	202c      	movs	r0, #44	; 0x2c
 80017ac:	fb00 f202 	mul.w	r2, r0, r2
 80017b0:	440a      	add	r2, r1
 80017b2:	3229      	adds	r2, #41	; 0x29
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	4113      	asrs	r3, r2
 80017b8:	757b      	strb	r3, [r7, #21]

			    if (var_replaced>patch[counter].limiter) var_replaced=patch[counter].limiter;  // limit lfo output
 80017ba:	7dfb      	ldrb	r3, [r7, #23]
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <patch_target_replace+0x170>)
 80017be:	212c      	movs	r1, #44	; 0x2c
 80017c0:	fb01 f303 	mul.w	r3, r1, r3
 80017c4:	4413      	add	r3, r2
 80017c6:	3328      	adds	r3, #40	; 0x28
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	7d7a      	ldrb	r2, [r7, #21]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d908      	bls.n	80017e2 <patch_target_replace+0x14a>
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <patch_target_replace+0x170>)
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	3328      	adds	r3, #40	; 0x28
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	757b      	strb	r3, [r7, #21]

			    *ptr_to_modify =var_replaced;   // replace original value,ok
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7d7a      	ldrb	r2, [r7, #21]
 80017e6:	701a      	strb	r2, [r3, #0]
	    for (counter=0;counter<20;counter++){    // single phase inc half sine only !!!
 80017e8:	7dfb      	ldrb	r3, [r7, #23]
 80017ea:	3301      	adds	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b13      	cmp	r3, #19
 80017f2:	f67f af5e 	bls.w	80016b2 <patch_target_replace+0x1a>
		    }
	    }
    }
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc90      	pop	{r4, r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000e0b0 	.word	0x2000e0b0
 8001808:	2000d124 	.word	0x2000d124

0800180c <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)    // unreliable
	{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
		if(TIM10==htim->Instance){     // send spi to display , ok
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d118      	bne.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x44>
		    HAL_SPI_Transmit_DMA(&hspi2,spi_tx_block+block_counter,54);
 800181e:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001826:	4413      	add	r3, r2
 8001828:	2236      	movs	r2, #54	; 0x36
 800182a:	4619      	mov	r1, r3
 800182c:	482c      	ldr	r0, [pc, #176]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800182e:	f009 fc7d 	bl	800b12c <HAL_SPI_Transmit_DMA>
		    			if (block_counter<3456) block_counter=block_counter+54; else block_counter=0;
 8001832:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 800183a:	d206      	bcs.n	800184a <HAL_TIM_PeriodElapsedCallback+0x3e>
 800183c:	4b26      	ldr	r3, [pc, #152]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	3336      	adds	r3, #54	; 0x36
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	e002      	b.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x44>
 800184a:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800184c:	2200      	movs	r2, #0
 800184e:	801a      	strh	r2, [r3, #0]

		}
		if(TIM3==htim->Instance)			//
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d137      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
		    time_proc++;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001864:	801a      	strh	r2, [r3, #0]
			play_hold=play_sample[sample_point<<1]; // this is 2
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001870:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001876:	801a      	strh	r2, [r3, #0]
			play_hold2=play_sample[(sample_point<<1)+1];
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	b29b      	uxth	r3, r3
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	3301      	adds	r3, #1
 8001882:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001884:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800188a:	801a      	strh	r2, [r3, #0]
			if (sample_point>1022)    {bank_write=2;sample_point=0;} else sample_point++;
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001896:	4293      	cmp	r3, r2
 8001898:	d906      	bls.n	80018a8 <HAL_TIM_PeriodElapsedCallback+0x9c>
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800189c:	2202      	movs	r2, #2
 800189e:	801a      	strh	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	e006      	b.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0xaa>
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018aa:	881b      	ldrh	r3, [r3, #0]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018b4:	801a      	strh	r2, [r3, #0]

	TIM3->CCR1=play_hold ;  // keep readin sample storage
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018be:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=play_hold2 ;   // load up counter on ch2
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018c8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40014400 	.word	0x40014400
 80018d8:	20011ae4 	.word	0x20011ae4
 80018dc:	20010ae4 	.word	0x20010ae4
 80018e0:	20012b30 	.word	0x20012b30
 80018e4:	40000400 	.word	0x40000400
 80018e8:	2000ccac 	.word	0x2000ccac
 80018ec:	2000a6b8 	.word	0x2000a6b8
 80018f0:	200096b4 	.word	0x200096b4
 80018f4:	2000a6ba 	.word	0x2000a6ba
 80018f8:	2000a6bc 	.word	0x2000a6bc
 80018fc:	20008e16 	.word	0x20008e16

08001900 <analoginputloopb>:



    void analoginputloopb(void){  //works ,getting obsolete
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0


	    menuSelect = cursor_menu[2]>>4;		//x *7  main menu select
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <analoginputloopb+0xd0>)
 8001906:	889b      	ldrh	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <analoginputloopb+0xd4>)
 8001910:	701a      	strb	r2, [r3, #0]
		//    menuSelectX=cursor_menu[2]&15;  // Y select inside page
        		    cursor_menu[1]=0;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <analoginputloopb+0xd0>)
 8001914:	2200      	movs	r2, #0
 8001916:	805a      	strh	r2, [r3, #2]
   		    cursor_menu[2]=enc2_dir;
 8001918:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <analoginputloopb+0xd8>)
 800191a:	881a      	ldrh	r2, [r3, #0]
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <analoginputloopb+0xd0>)
 800191e:	809a      	strh	r2, [r3, #4]

	    enc_temp=(((TIM2->CNT)+32767)>>1)&65535		;  // read counter tim2 ,divider ok
 8001920:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800192a:	337f      	adds	r3, #127	; 0x7f
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	b29a      	uxth	r2, r3
 8001930:	4b2a      	ldr	r3, [pc, #168]	; (80019dc <analoginputloopb+0xdc>)
 8001932:	801a      	strh	r2, [r3, #0]
	 //   enc2_store[enc2_store_count]=(((TIM4->CNT)+32767)>>1)&65535;  // read counter tim4, noisy
	    enc2_temp=(((TIM4->CNT)+32767)>>1)&65535;
 8001934:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <analoginputloopb+0xe0>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800193c:	337f      	adds	r3, #127	; 0x7f
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <analoginputloopb+0xe4>)
 8001944:	801a      	strh	r2, [r3, #0]
	    enc2_store3=enc2_store2>>2;
	    enc2_temp=enc2_store3;
*/


	    if  (enc_temp>enc_tempB)	 enc_dir=enc_dir-1;   //menu itme value change
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <analoginputloopb+0xdc>)
 8001948:	881a      	ldrh	r2, [r3, #0]
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <analoginputloopb+0xe8>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d908      	bls.n	8001964 <analoginputloopb+0x64>
 8001952:	4b26      	ldr	r3, [pc, #152]	; (80019ec <analoginputloopb+0xec>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	b29b      	uxth	r3, r3
 800195a:	3b01      	subs	r3, #1
 800195c:	b29b      	uxth	r3, r3
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b22      	ldr	r3, [pc, #136]	; (80019ec <analoginputloopb+0xec>)
 8001962:	801a      	strh	r2, [r3, #0]
	    if  (enc_temp<enc_tempB)	 enc_dir=enc_dir+1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <analoginputloopb+0xdc>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <analoginputloopb+0xe8>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d208      	bcs.n	8001982 <analoginputloopb+0x82>
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <analoginputloopb+0xec>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	b29b      	uxth	r3, r3
 8001978:	3301      	adds	r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21a      	sxth	r2, r3
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <analoginputloopb+0xec>)
 8001980:	801a      	strh	r2, [r3, #0]


   //   if (enc2_temp>511) enc2_temp=511;  //mem overflow somewhere

      enc2_dir=65535-enc2_temp; //temp to try source data
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <analoginputloopb+0xe4>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	43db      	mvns	r3, r3
 8001988:	b29a      	uxth	r2, r3
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <analoginputloopb+0xd8>)
 800198c:	801a      	strh	r2, [r3, #0]


      if (enc_dir>32760) enc_dir=0;
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <analoginputloopb+0xec>)
 8001990:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001994:	f647 72f8 	movw	r2, #32760	; 0x7ff8
 8001998:	4293      	cmp	r3, r2
 800199a:	dd02      	ble.n	80019a2 <analoginputloopb+0xa2>
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <analoginputloopb+0xec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	801a      	strh	r2, [r3, #0]
			    if (enc_dir<0) enc_dir=16383;
 80019a2:	4b12      	ldr	r3, [pc, #72]	; (80019ec <analoginputloopb+0xec>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	da03      	bge.n	80019b4 <analoginputloopb+0xb4>
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <analoginputloopb+0xec>)
 80019ae:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80019b2:	801a      	strh	r2, [r3, #0]

			    enc_tempB=enc_temp;
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <analoginputloopb+0xdc>)
 80019b6:	881a      	ldrh	r2, [r3, #0]
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <analoginputloopb+0xe8>)
 80019ba:	801a      	strh	r2, [r3, #0]

					    enc2_tempB=enc2_temp; // to effective as counter not getting reset
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <analoginputloopb+0xe4>)
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <analoginputloopb+0xf0>)
 80019c2:	801a      	strh	r2, [r3, #0]


 //   potValues[counterVarB]=(potSource[counterVarB]>>4) & 15 ;  // reduce values for now ,use original for others , slow count


    }
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000bf00 	.word	0x2000bf00
 80019d4:	200096a8 	.word	0x200096a8
 80019d8:	2000beea 	.word	0x2000beea
 80019dc:	2000bee2 	.word	0x2000bee2
 80019e0:	40000800 	.word	0x40000800
 80019e4:	2000bee6 	.word	0x2000bee6
 80019e8:	2000bee4 	.word	0x2000bee4
 80019ec:	2000beec 	.word	0x2000beec
 80019f0:	2000bee8 	.word	0x2000bee8

080019f4 <note_reset>:


void note_reset (void){          // reset deafult values before modulation , in case it gets left  with no modulator
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

	note[0].velocity=255;note[1].velocity=255;note[2].velocity=255;note[3].velocity=255;note[4].velocity=255;note[5].velocity=255;note[6].velocity=255
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <note_reset+0xc4>)
 80019fa:	22ff      	movs	r2, #255	; 0xff
 80019fc:	71da      	strb	r2, [r3, #7]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <note_reset+0xc4>)
 8001a00:	22ff      	movs	r2, #255	; 0xff
 8001a02:	75da      	strb	r2, [r3, #23]
 8001a04:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <note_reset+0xc4>)
 8001a06:	22ff      	movs	r2, #255	; 0xff
 8001a08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <note_reset+0xc4>)
 8001a0e:	22ff      	movs	r2, #255	; 0xff
 8001a10:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <note_reset+0xc4>)
 8001a16:	22ff      	movs	r2, #255	; 0xff
 8001a18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <note_reset+0xc4>)
 8001a1e:	22ff      	movs	r2, #255	; 0xff
 8001a20:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <note_reset+0xc4>)
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
																;note[0].detune=0;note[1].detune=0;note[2].detune=0;note[3].detune=0;note[4].detune=0;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <note_reset+0xc4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	721a      	strb	r2, [r3, #8]
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <note_reset+0xc4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	761a      	strb	r2, [r3, #24]
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <note_reset+0xc4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <note_reset+0xc4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <note_reset+0xc4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	note[5].detune=0;note[6].detune=0;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <note_reset+0xc4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <note_reset+0xc4>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	filter[0].cutoff_1=0;filter[1].cutoff_1=0;filter[2].cutoff_1=0;filter[4].cutoff_1=0;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <note_reset+0xc8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <note_reset+0xc8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	721a      	strb	r2, [r3, #8]
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <note_reset+0xc8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	741a      	strb	r2, [r3, #16]
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <note_reset+0xc8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]
	filter[0].resonance=0;filter[1].resonance=0;filter[2].resonance=0;filter[3].resonance=0;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <note_reset+0xc8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	709a      	strb	r2, [r3, #2]
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <note_reset+0xc8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	729a      	strb	r2, [r3, #10]
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <note_reset+0xc8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	749a      	strb	r2, [r3, #18]
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <note_reset+0xc8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	769a      	strb	r2, [r3, #26]
	note[0].position=1;note[1].position=1;note[2].position=1;note[3].position=1;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <note_reset+0xc4>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	711a      	strb	r2, [r3, #4]
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <note_reset+0xc4>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	751a      	strb	r2, [r3, #20]
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <note_reset+0xc4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <note_reset+0xc4>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20008e1c 	.word	0x20008e1c
 8001abc:	20008ebc 	.word	0x20008ebc

08001ac0 <main_initial>:

void main_initial(void){
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	b0dd      	sub	sp, #372	; 0x174
 8001ac4:	af04      	add	r7, sp, #16
	const volatile uint8_t *userConfig=(const volatile uint8_t *)0x0800D2F0;
 8001ac6:	4ba4      	ldr	r3, [pc, #656]	; (8001d58 <main_initial+0x298>)
 8001ac8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154



	HAL_DMA_Init(&hdma_spi2_tx);
 8001acc:	48a3      	ldr	r0, [pc, #652]	; (8001d5c <main_initial+0x29c>)
 8001ace:	f006 fe17 	bl	8008700 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_rx);
 8001ad2:	48a3      	ldr	r0, [pc, #652]	; (8001d60 <main_initial+0x2a0>)
 8001ad4:	f006 fe14 	bl	8008700 <HAL_DMA_Init>
	HAL_DMA_Init(&hdma_spi1_tx);
 8001ad8:	48a2      	ldr	r0, [pc, #648]	; (8001d64 <main_initial+0x2a4>)
 8001ada:	f006 fe11 	bl	8008700 <HAL_DMA_Init>


	//LL_SPI_Enable(SPI2);

	  HAL_SPI_Init(&hspi2); // write to register hspi2
 8001ade:	48a2      	ldr	r0, [pc, #648]	; (8001d68 <main_initial+0x2a8>)
 8001ae0:	f008 ffbc 	bl	800aa5c <HAL_SPI_Init>
	  HAL_SPI_Init(&hspi1); // write to register hspi2
 8001ae4:	48a1      	ldr	r0, [pc, #644]	; (8001d6c <main_initial+0x2ac>)
 8001ae6:	f008 ffb9 	bl	800aa5c <HAL_SPI_Init>
	  // lcd_init(); // keep this late or have issues
	//HAL_TIM_Base_Start_IT(&htim1);  // This needs to work for irq   ,disbling tim1 made loop a lot faster
	//TIM1->CCER=0;
	HAL_TIM_Base_Start_IT(&htim3);  // This needs to work for irq
 8001aea:	48a1      	ldr	r0, [pc, #644]	; (8001d70 <main_initial+0x2b0>)
 8001aec:	f00a f808 	bl	800bb00 <HAL_TIM_Base_Start_IT>
	TIM3->CCER=0;
 8001af0:	4ba0      	ldr	r3, [pc, #640]	; (8001d74 <main_initial+0x2b4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
	HAL_TIM_Base_Start(&htim2);
 8001af6:	48a0      	ldr	r0, [pc, #640]	; (8001d78 <main_initial+0x2b8>)
 8001af8:	f009 ffa8 	bl	800ba4c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8001afc:	489f      	ldr	r0, [pc, #636]	; (8001d7c <main_initial+0x2bc>)
 8001afe:	f009 ffa5 	bl	800ba4c <HAL_TIM_Base_Start>
	//HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);  // they both work fine together
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001b02:	2100      	movs	r1, #0
 8001b04:	489a      	ldr	r0, [pc, #616]	; (8001d70 <main_initial+0x2b0>)
 8001b06:	f00a f93f 	bl	800bd88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	4898      	ldr	r0, [pc, #608]	; (8001d70 <main_initial+0x2b0>)
 8001b0e:	f00a f93b 	bl	800bd88 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_4,pData, 63);
	TIM2->CNT=32000;
 8001b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b16:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_ADC_Start(&hadc1);
 8001b1c:	4898      	ldr	r0, [pc, #608]	; (8001d80 <main_initial+0x2c0>)
 8001b1e:	f005 fcb1 	bl	8007484 <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, adc_source, 3072); //dma start ,needs this and adc start ,set sampling time to very long or it will fail
 8001b22:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001b26:	4997      	ldr	r1, [pc, #604]	; (8001d84 <main_initial+0x2c4>)
 8001b28:	4895      	ldr	r0, [pc, #596]	; (8001d80 <main_initial+0x2c0>)
 8001b2a:	f005 fdeb 	bl	8007704 <HAL_ADC_Start_DMA>



	HAL_I2C_MspInit(&hi2c2);
 8001b2e:	4896      	ldr	r0, [pc, #600]	; (8001d88 <main_initial+0x2c8>)
 8001b30:	f005 f866 	bl	8006c00 <HAL_I2C_MspInit>
	uint8_t	send_spi1[260]={0x02,0,1,0,128,129,130,131,132,133,134,135,136,137,138,250,0,0} ; //page program ,24bit(address)  +1-255 byte data  (page)
 8001b34:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b38:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001b3c:	4b93      	ldr	r3, [pc, #588]	; (8001d8c <main_initial+0x2cc>)
 8001b3e:	4634      	mov	r4, r6
 8001b40:	461d      	mov	r5, r3
 8001b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b46:	682b      	ldr	r3, [r5, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	8022      	strh	r2, [r4, #0]
 8001b4c:	3402      	adds	r4, #2
 8001b4e:	0c1b      	lsrs	r3, r3, #16
 8001b50:	7023      	strb	r3, [r4, #0]
 8001b52:	f106 0313 	add.w	r3, r6, #19
 8001b56:	22f1      	movs	r2, #241	; 0xf1
 8001b58:	2100      	movs	r1, #0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00b fd18 	bl	800d590 <memset>


	HAL_Delay(5);
 8001b60:	2005      	movs	r0, #5
 8001b62:	f005 fc27 	bl	80073b4 <HAL_Delay>



		//uint16_t sample_size=sizeof(RAM);

		uint16_t sample_size=32678;
 8001b66:	f647 73a6 	movw	r3, #32678	; 0x7fa6
 8001b6a:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152



		uint8_t* ram_ptr=&RAM[0];
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <main_initial+0x2d0>)
 8001b70:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

				sample_save(2,ram_ptr, sample_size);  // write sample no 255
 8001b74:	f8b7 3152 	ldrh.w	r3, [r7, #338]	; 0x152
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001b7e:	2002      	movs	r0, #2
 8001b80:	f003 fb86 	bl	8005290 <sample_save>
				send_spi1[0]=sampler_ram_clear_test(2);  // test written ok
 8001b84:	2002      	movs	r0, #2
 8001b86:	f003 fb2b 	bl	80051e0 <sampler_ram_clear_test>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b96:	701a      	strb	r2, [r3, #0]



	uint8_t potSource2[64]={0};    // { [0 ... 112] = 64 };
 8001b98:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b9c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	223c      	movs	r2, #60	; 0x3c
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00b fcf0 	bl	800d590 <memset>
	uint16_t mem_count2=0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
	uint16_t mem_counter=0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e

//flash_block_erase(0);



	flash_read_block2[0]=0x03; //read page 1
 8001bbc:	4b75      	ldr	r3, [pc, #468]	; (8001d94 <main_initial+0x2d4>)
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
		flash_read_block2[1]=255;			// last patch for now
 8001bc2:	4b74      	ldr	r3, [pc, #464]	; (8001d94 <main_initial+0x2d4>)
 8001bc4:	22ff      	movs	r2, #255	; 0xff
 8001bc6:	705a      	strb	r2, [r3, #1]
		flash_read_block2[2]=128;		// 1->127  = 32kbyte,but need 512 per step , only counts to 16383 ,    64*512
 8001bc8:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <main_initial+0x2d4>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	709a      	strb	r2, [r3, #2]
		flash_read_block2[3]=0;
 8001bce:	4b71      	ldr	r3, [pc, #452]	; (8001d94 <main_initial+0x2d4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);HAL_SPI_TransmitReceive_DMA(&hspi1,flash_read_block2,flash_read_block2,1028);HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	486f      	ldr	r0, [pc, #444]	; (8001d98 <main_initial+0x2d8>)
 8001bda:	f007 faf5 	bl	80091c8 <HAL_GPIO_WritePin>
 8001bde:	f240 4304 	movw	r3, #1028	; 0x404
 8001be2:	4a6c      	ldr	r2, [pc, #432]	; (8001d94 <main_initial+0x2d4>)
 8001be4:	496b      	ldr	r1, [pc, #428]	; (8001d94 <main_initial+0x2d4>)
 8001be6:	4861      	ldr	r0, [pc, #388]	; (8001d6c <main_initial+0x2ac>)
 8001be8:	f009 fb56 	bl	800b298 <HAL_SPI_TransmitReceive_DMA>
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	4869      	ldr	r0, [pc, #420]	; (8001d98 <main_initial+0x2d8>)
 8001bf2:	f007 fae9 	bl	80091c8 <HAL_GPIO_WritePin>



	HAL_I2C_Mem_Read (&hi2c2,160,64, 2 , potSource, 512,1000); //ok
 8001bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <main_initial+0x2dc>)
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2302      	movs	r3, #2
 8001c08:	2240      	movs	r2, #64	; 0x40
 8001c0a:	21a0      	movs	r1, #160	; 0xa0
 8001c0c:	485e      	ldr	r0, [pc, #376]	; (8001d88 <main_initial+0x2c8>)
 8001c0e:	f007 fd4b 	bl	80096a8 <HAL_I2C_Mem_Read>


		memcpy(&seq,potSource,46 );  // load from potSource  ,, causes problems with memory ,NEEDS TO BE CONTINUOS OR  WILL  GET CORRUPT
 8001c12:	222e      	movs	r2, #46	; 0x2e
 8001c14:	4961      	ldr	r1, [pc, #388]	; (8001d9c <main_initial+0x2dc>)
 8001c16:	4862      	ldr	r0, [pc, #392]	; (8001da0 <main_initial+0x2e0>)
 8001c18:	f00b fcac 	bl	800d574 <memcpy>
	    memcpy(&note,potSource+156,160 );   // this works but keep checking for fragmentation
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <main_initial+0x2e4>)
 8001c1e:	22a0      	movs	r2, #160	; 0xa0
 8001c20:	4619      	mov	r1, r3
 8001c22:	4861      	ldr	r0, [pc, #388]	; (8001da8 <main_initial+0x2e8>)
 8001c24:	f00b fca6 	bl	800d574 <memcpy>
	    memcpy(&sampler,potSource+476,21 );
 8001c28:	4b60      	ldr	r3, [pc, #384]	; (8001dac <main_initial+0x2ec>)
 8001c2a:	2215      	movs	r2, #21
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4860      	ldr	r0, [pc, #384]	; (8001db0 <main_initial+0x2f0>)
 8001c30:	f00b fca0 	bl	800d574 <memcpy>

	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001c3a:	e07f      	b.n	8001d3c <main_initial+0x27c>

			memcpy(&LFO[mem_counter],potSource+46+(mem_counter*6),6 );  // + 60 ,ok here
 8001c3c:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c40:	4613      	mov	r3, r2
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4a5a      	ldr	r2, [pc, #360]	; (8001db4 <main_initial+0x2f4>)
 8001c4a:	1898      	adds	r0, r3, r2
 8001c4c:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	332e      	adds	r3, #46	; 0x2e
 8001c5a:	4a50      	ldr	r2, [pc, #320]	; (8001d9c <main_initial+0x2dc>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2206      	movs	r2, #6
 8001c60:	4619      	mov	r1, r3
 8001c62:	f00b fc87 	bl	800d574 <memcpy>
			memcpy(&ADSR[mem_counter],potSource+106+(mem_counter*5),5 );  // +50  ,
 8001c66:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <main_initial+0x2f8>)
 8001c74:	1898      	adds	r0, r3, r2
 8001c76:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	336a      	adds	r3, #106	; 0x6a
 8001c82:	4a46      	ldr	r2, [pc, #280]	; (8001d9c <main_initial+0x2dc>)
 8001c84:	4413      	add	r3, r2
 8001c86:	2205      	movs	r2, #5
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f00b fc73 	bl	800d574 <memcpy>
			memcpy(&patch[mem_counter],potSource+316+(mem_counter*6),6 );
 8001c8e:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001c92:	222c      	movs	r2, #44	; 0x2c
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <main_initial+0x2fc>)
 8001c9a:	1898      	adds	r0, r3, r2
 8001c9c:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001cac:	4a3b      	ldr	r2, [pc, #236]	; (8001d9c <main_initial+0x2dc>)
 8001cae:	4413      	add	r3, r2
 8001cb0:	2206      	movs	r2, #6
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f00b fc5e 	bl	800d574 <memcpy>

			memcpy(&LFO_slave1[mem_counter],potSource+376+(mem_counter*6),6 );  // + 60 ,ok here
 8001cb8:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <main_initial+0x300>)
 8001cc6:	1898      	adds	r0, r3, r2
 8001cc8:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001cd8:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <main_initial+0x2dc>)
 8001cda:	4413      	add	r3, r2
 8001cdc:	2206      	movs	r2, #6
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f00b fc48 	bl	800d574 <memcpy>
			memcpy(&LFO_square[mem_counter],potSource+436+(mem_counter*4),4 );
 8001ce4:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <main_initial+0x304>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	f502 72da 	add.w	r2, r2, #436	; 0x1b4
 8001cfe:	4927      	ldr	r1, [pc, #156]	; (8001d9c <main_initial+0x2dc>)
 8001d00:	440a      	add	r2, r1
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	601a      	str	r2, [r3, #0]
			memcpy(&patch[mem_counter+10],potSource+512+(mem_counter*6),6 );
 8001d06:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d0a:	330a      	adds	r3, #10
 8001d0c:	222c      	movs	r2, #44	; 0x2c
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <main_initial+0x2fc>)
 8001d14:	1898      	adds	r0, r3, r2
 8001d16:	f8b7 215e 	ldrh.w	r2, [r7, #350]	; 0x15e
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d26:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <main_initial+0x2dc>)
 8001d28:	4413      	add	r3, r2
 8001d2a:	2206      	movs	r2, #6
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f00b fc21 	bl	800d574 <memcpy>
	    for(mem_counter=0;mem_counter<10;mem_counter++){
 8001d32:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d36:	3301      	adds	r3, #1
 8001d38:	f8a7 315e 	strh.w	r3, [r7, #350]	; 0x15e
 8001d3c:	f8b7 315e 	ldrh.w	r3, [r7, #350]	; 0x15e
 8001d40:	2b09      	cmp	r3, #9
 8001d42:	f67f af7b 	bls.w	8001c3c <main_initial+0x17c>


	    }


		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <main_initial+0x308>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	e094      	b.n	8001e78 <main_initial+0x3b8>

		for 	(n=0;n<18;n++){					// this is ok
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <main_initial+0x30c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	e086      	b.n	8001e64 <main_initial+0x3a4>
 8001d56:	bf00      	nop
 8001d58:	0800d2f0 	.word	0x0800d2f0
 8001d5c:	20012c48 	.word	0x20012c48
 8001d60:	20012b88 	.word	0x20012b88
 8001d64:	20012be8 	.word	0x20012be8
 8001d68:	20012b30 	.word	0x20012b30
 8001d6c:	20012ad8 	.word	0x20012ad8
 8001d70:	20012cf0 	.word	0x20012cf0
 8001d74:	40000400 	.word	0x40000400
 8001d78:	20012ca8 	.word	0x20012ca8
 8001d7c:	20012d38 	.word	0x20012d38
 8001d80:	200129dc 	.word	0x200129dc
 8001d84:	2000a6c4 	.word	0x2000a6c4
 8001d88:	20012a84 	.word	0x20012a84
 8001d8c:	0800dc18 	.word	0x0800dc18
 8001d90:	200001b8 	.word	0x200001b8
 8001d94:	20012174 	.word	0x20012174
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	20009440 	.word	0x20009440
 8001da0:	2000d0f4 	.word	0x2000d0f4
 8001da4:	200094dc 	.word	0x200094dc
 8001da8:	20008e1c 	.word	0x20008e1c
 8001dac:	2000961c 	.word	0x2000961c
 8001db0:	20008edc 	.word	0x20008edc
 8001db4:	2000ccb0 	.word	0x2000ccb0
 8001db8:	2000d05c 	.word	0x2000d05c
 8001dbc:	2000d124 	.word	0x2000d124
 8001dc0:	2000cf58 	.word	0x2000cf58
 8001dc4:	2000cf94 	.word	0x2000cf94
 8001dc8:	200096b2 	.word	0x200096b2
 8001dcc:	200096ac 	.word	0x200096ac
			if (n==0) gfx_ram[(i*18)+n] = 128+(i&31);   // half page
 8001dd0:	4ba3      	ldr	r3, [pc, #652]	; (8002060 <main_initial+0x5a0>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d114      	bne.n	8001e02 <main_initial+0x342>
 8001dd8:	4ba2      	ldr	r3, [pc, #648]	; (8002064 <main_initial+0x5a4>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f003 031f 	and.w	r3, r3, #31
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	4b9f      	ldr	r3, [pc, #636]	; (8002064 <main_initial+0x5a4>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	460b      	mov	r3, r1
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4619      	mov	r1, r3
 8001df4:	4b9a      	ldr	r3, [pc, #616]	; (8002060 <main_initial+0x5a0>)
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	440b      	add	r3, r1
 8001dfa:	3a80      	subs	r2, #128	; 0x80
 8001dfc:	b2d1      	uxtb	r1, r2
 8001dfe:	4a9a      	ldr	r2, [pc, #616]	; (8002068 <main_initial+0x5a8>)
 8001e00:	54d1      	strb	r1, [r2, r3]
			if (n==1) gfx_ram[(i*18)+n] = 128+((i>>5)*8);    // change x to 8
 8001e02:	4b97      	ldr	r3, [pc, #604]	; (8002060 <main_initial+0x5a0>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d114      	bne.n	8001e34 <main_initial+0x374>
 8001e0a:	4b96      	ldr	r3, [pc, #600]	; (8002064 <main_initial+0x5a4>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	3310      	adds	r3, #16
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b93      	ldr	r3, [pc, #588]	; (8002064 <main_initial+0x5a4>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4619      	mov	r1, r3
 8001e26:	4b8e      	ldr	r3, [pc, #568]	; (8002060 <main_initial+0x5a0>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	440b      	add	r3, r1
 8001e2c:	00d2      	lsls	r2, r2, #3
 8001e2e:	b2d1      	uxtb	r1, r2
 8001e30:	4a8d      	ldr	r2, [pc, #564]	; (8002068 <main_initial+0x5a8>)
 8001e32:	54d1      	strb	r1, [r2, r3]
			if (n>1)  gfx_ram[(i*18)+n] = 255;
 8001e34:	4b8a      	ldr	r3, [pc, #552]	; (8002060 <main_initial+0x5a0>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d90d      	bls.n	8001e58 <main_initial+0x398>
 8001e3c:	4b89      	ldr	r3, [pc, #548]	; (8002064 <main_initial+0x5a4>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	461a      	mov	r2, r3
 8001e42:	4613      	mov	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b84      	ldr	r3, [pc, #528]	; (8002060 <main_initial+0x5a0>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a85      	ldr	r2, [pc, #532]	; (8002068 <main_initial+0x5a8>)
 8001e54:	21ff      	movs	r1, #255	; 0xff
 8001e56:	54d1      	strb	r1, [r2, r3]
		for 	(n=0;n<18;n++){					// this is ok
 8001e58:	4b81      	ldr	r3, [pc, #516]	; (8002060 <main_initial+0x5a0>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b7f      	ldr	r3, [pc, #508]	; (8002060 <main_initial+0x5a0>)
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <main_initial+0x5a0>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b11      	cmp	r3, #17
 8001e6a:	d9b1      	bls.n	8001dd0 <main_initial+0x310>
		for(i=0;i<64;i++){       //   fill with characters also add lcd command ,ok
 8001e6c:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <main_initial+0x5a4>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <main_initial+0x5a4>)
 8001e76:	801a      	strh	r2, [r3, #0]
 8001e78:	4b7a      	ldr	r3, [pc, #488]	; (8002064 <main_initial+0x5a4>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7e:	f67f af66 	bls.w	8001d4e <main_initial+0x28e>

		}

		}
	seq.pos=0;
 8001e82:	4b7a      	ldr	r3, [pc, #488]	; (800206c <main_initial+0x5ac>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
	uint8_t counter;
	for (counter=0;counter<16;counter++){     // notes for sampler
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8001e8e:	e021      	b.n	8001ed4 <main_initial+0x414>

	sampler.Snotes1[counter]=seq.notes2[counter]&15;
 8001e90:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8001e94:	4a75      	ldr	r2, [pc, #468]	; (800206c <main_initial+0x5ac>)
 8001e96:	4413      	add	r3, r2
 8001e98:	7cda      	ldrb	r2, [r3, #19]
 8001e9a:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8001e9e:	f002 020f 	and.w	r2, r2, #15
 8001ea2:	b2d1      	uxtb	r1, r2
 8001ea4:	4a72      	ldr	r2, [pc, #456]	; (8002070 <main_initial+0x5b0>)
 8001ea6:	4413      	add	r3, r2
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	sampler.Snotes2[counter]=(seq.notes2[counter]>>4)&15;
 8001eae:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <main_initial+0x5ac>)
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7cda      	ldrb	r2, [r3, #19]
 8001eb8:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8001ebc:	0912      	lsrs	r2, r2, #4
 8001ebe:	b2d1      	uxtb	r1, r2
 8001ec0:	4a6b      	ldr	r2, [pc, #428]	; (8002070 <main_initial+0x5b0>)
 8001ec2:	4413      	add	r3, r2
 8001ec4:	460a      	mov	r2, r1
 8001ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	for (counter=0;counter<16;counter++){     // notes for sampler
 8001eca:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8001ed4:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d9d9      	bls.n	8001e90 <main_initial+0x3d0>
	}


	uint32_t  tempo_hold=1;  // calculate tempo look up
 8001edc:	2301      	movs	r3, #1
 8001ede:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144


	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001ee2:	4b60      	ldr	r3, [pc, #384]	; (8002064 <main_initial+0x5a4>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	e01a      	b.n	8001f20 <main_initial+0x460>
	  		tempo_hold=i;
 8001eea:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <main_initial+0x5a4>)
 8001eec:	881b      	ldrh	r3, [r3, #0]
 8001eee:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	  		tempo_hold=(60*seq_sample_rate)/(tempo_hold*16); //
 8001ef2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4a5e      	ldr	r2, [pc, #376]	; (8002074 <main_initial+0x5b4>)
 8001efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	  	tempo_lut[i]=tempo_hold;
 8001f02:	4b58      	ldr	r3, [pc, #352]	; (8002064 <main_initial+0x5a4>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001f0c:	b299      	uxth	r1, r3
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <main_initial+0x5b8>)
 8001f10:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  	for (i=1;i<256;i++) {     // change for 32khz   1-256 bpm
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <main_initial+0x5a4>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	4b51      	ldr	r3, [pc, #324]	; (8002064 <main_initial+0x5a4>)
 8001f1e:	801a      	strh	r2, [r3, #0]
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <main_initial+0x5a4>)
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	2bff      	cmp	r3, #255	; 0xff
 8001f26:	d9e0      	bls.n	8001eea <main_initial+0x42a>
	  	}

	//isrMask=571; // def tempo 571=180bpm , 20 ms /isrcount

		noteTiming=24;
 8001f28:	4b54      	ldr	r3, [pc, #336]	; (800207c <main_initial+0x5bc>)
 8001f2a:	2218      	movs	r2, #24
 8001f2c:	701a      	strb	r2, [r3, #0]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001f2e:	4b4d      	ldr	r3, [pc, #308]	; (8002064 <main_initial+0x5a4>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	801a      	strh	r2, [r3, #0]
 8001f34:	e00b      	b.n	8001f4e <main_initial+0x48e>
			spell[i]=67;
 8001f36:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <main_initial+0x5a4>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <main_initial+0x5c0>)
 8001f3e:	2143      	movs	r1, #67	; 0x43
 8001f40:	5499      	strb	r1, [r3, r2]
		for (i=0;i<320;i++)	{	// write C into whole section,useful ornot
 8001f42:	4b48      	ldr	r3, [pc, #288]	; (8002064 <main_initial+0x5a4>)
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <main_initial+0x5a4>)
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	4b45      	ldr	r3, [pc, #276]	; (8002064 <main_initial+0x5a4>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f56:	d3ee      	bcc.n	8001f36 <main_initial+0x476>

		}

		gfx_clear();
 8001f58:	f002 fd02 	bl	8004960 <gfx_clear>
	uint16_t pars_counter;

	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 8001f62:	e006      	b.n	8001f72 <main_initial+0x4b2>

			menu_parser();  // run it closer to default_menu size ,times, if default_menu is corrupt gfx breaks pretty bad
 8001f64:	f7ff f8d4 	bl	8001110 <menu_parser>
	for (pars_counter=0;pars_counter<menu_parser_limit;pars_counter++)	{   // fill up display data , needs to run a lot more though or wont finish string_search
 8001f68:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 8001f72:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8001f76:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001f7a:	d3f3      	bcc.n	8001f64 <main_initial+0x4a4>

		}
	for (i=0;i<16384;i++) {     // change for 32khz   1-256 bpm
 8001f7c:	4b39      	ldr	r3, [pc, #228]	; (8002064 <main_initial+0x5a4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	801a      	strh	r2, [r3, #0]
 8001f82:	e005      	b.n	8001f90 <main_initial+0x4d0>
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <main_initial+0x5a4>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <main_initial+0x5a4>)
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <main_initial+0x5a4>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f98:	d3f4      	bcc.n	8001f84 <main_initial+0x4c4>
//	RAM[i]=0;      disable for now
	}
	for (i=0;i<1024;i++) {     // change for 32khz   1-256 bpm
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <main_initial+0x5a4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	801a      	strh	r2, [r3, #0]
 8001fa0:	e005      	b.n	8001fae <main_initial+0x4ee>
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <main_initial+0x5a4>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <main_initial+0x5a4>)
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <main_initial+0x5a4>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d3f4      	bcc.n	8001fa2 <main_initial+0x4e2>

	}



		for (pars_counter=0;pars_counter<512;pars_counter++)	  default_menu3[pars_counter>>1]=64;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 8001fbe:	e00c      	b.n	8001fda <main_initial+0x51a>
 8001fc0:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <main_initial+0x5c4>)
 8001fcc:	2140      	movs	r1, #64	; 0x40
 8001fce:	5499      	strb	r1, [r3, r2]
 8001fd0:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 8001fda:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8001fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe2:	d3ed      	bcc.n	8001fc0 <main_initial+0x500>

		default_menu3_size = strlen(default_menu3);  // grab menu size , this is needed
 8001fe4:	4827      	ldr	r0, [pc, #156]	; (8002084 <main_initial+0x5c4>)
 8001fe6:	f7fe f8f7 	bl	80001d8 <strlen>
 8001fea:	4603      	mov	r3, r0
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <main_initial+0x5c8>)
 8001ff0:	801a      	strh	r2, [r3, #0]
			menu_title_count--;  //count back one
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <main_initial+0x5cc>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <main_initial+0x5cc>)
 8001ffc:	801a      	strh	r2, [r3, #0]
			display_clear ();
 8001ffe:	f002 fcf1 	bl	80049e4 <display_clear>
			for (pars_counter=0;pars_counter<menu_title_count;pars_counter++)	default_menu3 [menu_title_lut[pars_counter]&1023]=48;
 8002002:	2300      	movs	r3, #0
 8002004:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 8002008:	e00e      	b.n	8002028 <main_initial+0x568>
 800200a:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <main_initial+0x5d0>)
 8002010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <main_initial+0x5c4>)
 800201a:	2130      	movs	r1, #48	; 0x30
 800201c:	54d1      	strb	r1, [r2, r3]
 800201e:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8002022:	3301      	adds	r3, #1
 8002024:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <main_initial+0x5cc>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	f8b7 215a 	ldrh.w	r2, [r7, #346]	; 0x15a
 8002030:	429a      	cmp	r2, r3
 8002032:	d3ea      	bcc.n	800200a <main_initial+0x54a>
			note_reset();
 8002034:	f7ff fcde 	bl	80019f4 <note_reset>


			uint8_t find_set=0;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3159 	strb.w	r3, [r7, #345]	; 0x159
			uint8_t var_hold=0;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 8002044:	2300      	movs	r3, #0
 8002046:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 800204a:	e041      	b.n	80020d0 <main_initial+0x610>
			   var_hold=menu_vars_limiter[pars_counter];
 800204c:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8002050:	4a10      	ldr	r2, [pc, #64]	; (8002094 <main_initial+0x5d4>)
 8002052:	5cd3      	ldrb	r3, [r2, r3]
 8002054:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
			    find_set=0;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3159 	strb.w	r3, [r7, #345]	; 0x159
			   while ( var_hold >>= 1) {
 800205e:	e020      	b.n	80020a2 <main_initial+0x5e2>
 8002060:	200096ac 	.word	0x200096ac
 8002064:	200096b2 	.word	0x200096b2
 8002068:	2000c414 	.word	0x2000c414
 800206c:	2000d0f4 	.word	0x2000d0f4
 8002070:	20008edc 	.word	0x20008edc
 8002074:	00209d9c 	.word	0x00209d9c
 8002078:	2000c010 	.word	0x2000c010
 800207c:	2000943c 	.word	0x2000943c
 8002080:	20008cc8 	.word	0x20008cc8
 8002084:	20008fdc 	.word	0x20008fdc
 8002088:	2000e0aa 	.word	0x2000e0aa
 800208c:	2000d49a 	.word	0x2000d49a
 8002090:	2000d49c 	.word	0x2000d49c
 8002094:	0800ee60 	.word	0x0800ee60
			       find_set++;
 8002098:	f897 3159 	ldrb.w	r3, [r7, #345]	; 0x159
 800209c:	3301      	adds	r3, #1
 800209e:	f887 3159 	strb.w	r3, [r7, #345]	; 0x159
			   while ( var_hold >>= 1) {
 80020a2:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
 80020ac:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f1      	bne.n	8002098 <main_initial+0x5d8>
			    }

			    LFO_vars_divider[pars_counter]= 7-find_set;    // high set bit , use it to shift left from 255
 80020b4:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80020b8:	f897 2159 	ldrb.w	r2, [r7, #345]	; 0x159
 80020bc:	f1c2 0207 	rsb	r2, r2, #7
 80020c0:	b2d1      	uxtb	r1, r2
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <main_initial+0x630>)
 80020c4:	54d1      	strb	r1, [r2, r3]
			for (pars_counter=0;pars_counter<menu_lookup_count;pars_counter++){
 80020c6:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80020ca:	3301      	adds	r3, #1
 80020cc:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
 80020d0:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 80020d4:	2b41      	cmp	r3, #65	; 0x41
 80020d6:	d9b9      	bls.n	800204c <main_initial+0x58c>
			}

			menuSelect=0;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <main_initial+0x634>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
	// fill up sample
	firstbarLoop=0;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <main_initial+0x638>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	//sample_ram =  &RAM[0];    //  allocate half a second

}
 80020e4:	bf00      	nop
 80020e6:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20012994 	.word	0x20012994
 80020f4:	200096a8 	.word	0x200096a8
 80020f8:	200096a9 	.word	0x200096a9

080020fc <patch_lists>:
void sampler_save(void){


}

void patch_lists(void){   //   ok
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
    uint8_t  list_counter;
    uint8_t list_counter2=0;
 8002102:	2300      	movs	r3, #0
 8002104:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 8002106:	2300      	movs	r3, #0
 8002108:	71fb      	strb	r3, [r7, #7]
 800210a:	e02b      	b.n	8002164 <patch_lists+0x68>

	if ((patch[list_counter].input1&3)== 3   )    { LFO_sqr_list[list_counter2]   =  (patch[list_counter].target_index&7)+48;   // only writes sqr related  to list ,others left off
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	4a1a      	ldr	r2, [pc, #104]	; (8002178 <patch_lists+0x7c>)
 8002110:	212c      	movs	r1, #44	; 0x2c
 8002112:	fb01 f303 	mul.w	r3, r1, r3
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b03      	cmp	r3, #3
 8002120:	d11d      	bne.n	800215e <patch_lists+0x62>
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <patch_lists+0x7c>)
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3302      	adds	r3, #2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	b2da      	uxtb	r2, r3
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	3230      	adds	r2, #48	; 0x30
 800213c:	b2d1      	uxtb	r1, r2
 800213e:	4a0f      	ldr	r2, [pc, #60]	; (800217c <patch_lists+0x80>)
 8002140:	54d1      	strb	r1, [r2, r3]
	sqr_target_list[list_counter2] =  (patch[list_counter].target);   //just
 8002142:	79fa      	ldrb	r2, [r7, #7]
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <patch_lists+0x7c>)
 8002148:	202c      	movs	r0, #44	; 0x2c
 800214a:	fb00 f202 	mul.w	r2, r0, r2
 800214e:	440a      	add	r2, r1
 8002150:	3201      	adds	r2, #1
 8002152:	7811      	ldrb	r1, [r2, #0]
 8002154:	4a0a      	ldr	r2, [pc, #40]	; (8002180 <patch_lists+0x84>)
 8002156:	54d1      	strb	r1, [r2, r3]
	list_counter2++;
 8002158:	79bb      	ldrb	r3, [r7, #6]
 800215a:	3301      	adds	r3, #1
 800215c:	71bb      	strb	r3, [r7, #6]
    for (list_counter=0;list_counter<20;list_counter++){
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	3301      	adds	r3, #1
 8002162:	71fb      	strb	r3, [r7, #7]
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b13      	cmp	r3, #19
 8002168:	d9d0      	bls.n	800210c <patch_lists+0x10>
	}

    }

}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	2000d124 	.word	0x2000d124
 800217c:	20011ae8 	.word	0x20011ae8
 8002180:	20011d58 	.word	0x20011d58
 8002184:	00000000 	.word	0x00000000

08002188 <sampling>:

return  output;

}

void sampling(void){						// 330 atm or 8.5ms
 8002188:	b5b0      	push	{r4, r5, r7, lr}
 800218a:	b0e2      	sub	sp, #392	; 0x188
 800218c:	af00      	add	r7, sp, #0

//	if (time_proc>580) time_final=time_proc;

//time_proc=0;
	seq.swing=0;
 800218e:	4ba1      	ldr	r3, [pc, #644]	; (8002414 <sampling+0x28c>)
 8002190:	2200      	movs	r2, #0
 8002192:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	time_proc=0;
 8002196:	4ba0      	ldr	r3, [pc, #640]	; (8002418 <sampling+0x290>)
 8002198:	2200      	movs	r2, #0
 800219a:	801a      	strh	r2, [r3, #0]
	int32_t sample_accus[10] ={0,0,0,0,0,0,0,0,0,0};
 800219c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021a0:	2228      	movs	r2, #40	; 0x28
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f00b f9f3 	bl	800d590 <memset>
uint8_t mask_i;
int32_t sample_Accu[10] ={0,0,0,0,0,0,0,0,0,0};   // accu for sample output or lookup
 80021aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021ae:	2228      	movs	r2, #40	; 0x28
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00b f9ec 	bl	800d590 <memset>

int32_t sample_adc=0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
int32_t ram_temp=0;
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
uint16_t sample_counts_temp[40]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
 80021c4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80021c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021cc:	4618      	mov	r0, r3
 80021ce:	2350      	movs	r3, #80	; 0x50
 80021d0:	461a      	mov	r2, r3
 80021d2:	2100      	movs	r1, #0
 80021d4:	f00b f9dc 	bl	800d590 <memset>
 80021d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80021dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021e0:	2201      	movs	r2, #1
 80021e2:	801a      	strh	r2, [r3, #0]
 80021e4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80021e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ec:	2201      	movs	r2, #1
 80021ee:	805a      	strh	r2, [r3, #2]
 80021f0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80021f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021f8:	2201      	movs	r2, #1
 80021fa:	809a      	strh	r2, [r3, #4]
 80021fc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002200:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002204:	2201      	movs	r2, #1
 8002206:	80da      	strh	r2, [r3, #6]
 8002208:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800220c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002210:	2201      	movs	r2, #1
 8002212:	811a      	strh	r2, [r3, #8]
 8002214:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002218:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800221c:	2201      	movs	r2, #1
 800221e:	815a      	strh	r2, [r3, #10]
 8002220:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002224:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002228:	2201      	movs	r2, #1
 800222a:	819a      	strh	r2, [r3, #12]
 800222c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002230:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002234:	2201      	movs	r2, #1
 8002236:	81da      	strh	r2, [r3, #14]
 8002238:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800223c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002240:	2201      	movs	r2, #1
 8002242:	821a      	strh	r2, [r3, #16]
 8002244:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002248:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800224c:	2201      	movs	r2, #1
 800224e:	825a      	strh	r2, [r3, #18]
 8002250:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002254:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002258:	2201      	movs	r2, #1
 800225a:	829a      	strh	r2, [r3, #20]
 800225c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002260:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002264:	2201      	movs	r2, #1
 8002266:	82da      	strh	r2, [r3, #22]
 8002268:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800226c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002270:	2201      	movs	r2, #1
 8002272:	831a      	strh	r2, [r3, #24]
 8002274:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002278:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800227c:	2201      	movs	r2, #1
 800227e:	835a      	strh	r2, [r3, #26]
 8002280:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002284:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002288:	2201      	movs	r2, #1
 800228a:	839a      	strh	r2, [r3, #28]
 800228c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002290:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002294:	2201      	movs	r2, #1
 8002296:	83da      	strh	r2, [r3, #30]
 8002298:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800229c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022a0:	2201      	movs	r2, #1
 80022a2:	841a      	strh	r2, [r3, #32]
 80022a4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022ac:	2201      	movs	r2, #1
 80022ae:	845a      	strh	r2, [r3, #34]	; 0x22
 80022b0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022b8:	2201      	movs	r2, #1
 80022ba:	849a      	strh	r2, [r3, #36]	; 0x24
 80022bc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022c4:	2201      	movs	r2, #1
 80022c6:	84da      	strh	r2, [r3, #38]	; 0x26
 80022c8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022d0:	2201      	movs	r2, #1
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80022d4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022dc:	2201      	movs	r2, #1
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022e0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022e8:	2201      	movs	r2, #1
 80022ea:	859a      	strh	r2, [r3, #44]	; 0x2c
 80022ec:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80022f4:	2201      	movs	r2, #1
 80022f6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80022f8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80022fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002300:	2201      	movs	r2, #1
 8002302:	861a      	strh	r2, [r3, #48]	; 0x30
 8002304:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002308:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800230c:	2201      	movs	r2, #1
 800230e:	865a      	strh	r2, [r3, #50]	; 0x32
 8002310:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002314:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002318:	2201      	movs	r2, #1
 800231a:	869a      	strh	r2, [r3, #52]	; 0x34
 800231c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002320:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002324:	2201      	movs	r2, #1
 8002326:	86da      	strh	r2, [r3, #54]	; 0x36
 8002328:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800232c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002330:	2201      	movs	r2, #1
 8002332:	871a      	strh	r2, [r3, #56]	; 0x38
 8002334:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002338:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800233c:	2201      	movs	r2, #1
 800233e:	875a      	strh	r2, [r3, #58]	; 0x3a
 8002340:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002344:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002348:	2201      	movs	r2, #1
 800234a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800234c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002354:	2201      	movs	r2, #1
 8002356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002358:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800235c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002360:	2201      	movs	r2, #1
 8002362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8002366:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800236a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800236e:	2201      	movs	r2, #1
 8002370:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002374:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002378:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800237c:	2201      	movs	r2, #1
 800237e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002382:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002386:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800238a:	2201      	movs	r2, #1
 800238c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002390:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002394:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002398:	2201      	movs	r2, #1
 800239a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

int32_t sample_input=0;
 800239e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80023a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
tempo_lut[131]=1023;   // force to an even count on samples
 80023aa:	4b1c      	ldr	r3, [pc, #112]	; (800241c <sampling+0x294>)
 80023ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80023b0:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106

int32_t ram_synced=0;   // ram synced to sampler.seq_pos
 80023b4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80023b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
uint8_t soft_mute=0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
//if ((sampler.record_enable==0) && (flash_flag))   {  flash_page_read ((sampler.ram_seq)<<1 ); flash_flag=0;}

if (bank_write==2)  {sample_pointD=512;}  else sample_pointD=0;
 80023c6:	4b16      	ldr	r3, [pc, #88]	; (8002420 <sampling+0x298>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d104      	bne.n	80023d8 <sampling+0x250>
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <sampling+0x29c>)
 80023d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d4:	801a      	strh	r2, [r3, #0]
 80023d6:	e002      	b.n	80023de <sampling+0x256>
 80023d8:	4b12      	ldr	r3, [pc, #72]	; (8002424 <sampling+0x29c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	801a      	strh	r2, [r3, #0]

bank_write=0;
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <sampling+0x298>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	801a      	strh	r2, [r3, #0]
memcpy(notes_joined,seq.notes1,16);
 80023e4:	2210      	movs	r2, #16
 80023e6:	4910      	ldr	r1, [pc, #64]	; (8002428 <sampling+0x2a0>)
 80023e8:	4810      	ldr	r0, [pc, #64]	; (800242c <sampling+0x2a4>)
 80023ea:	f00b f8c3 	bl	800d574 <memcpy>
memcpy(notes_joined+16,seq.notes1,16);  //  only use notes 1
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <sampling+0x2a8>)
 80023f0:	2210      	movs	r2, #16
 80023f2:	490d      	ldr	r1, [pc, #52]	; (8002428 <sampling+0x2a0>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00b f8bd 	bl	800d574 <memcpy>
sample_pointB=sample_pointD;
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <sampling+0x29c>)
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <sampling+0x2ac>)
 8002400:	801a      	strh	r2, [r3, #0]
unsigned short tempo_start=0;  // enabled when i=isrMask;
 8002402:	2300      	movs	r3, #0
 8002404:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184

LCD_Info_notes();
 8002408:	f002 fe7a 	bl	8005100 <LCD_Info_notes>

uint8_t counter;
for (counter=0;counter<16;counter++){				// notes for sampler
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8002412:	e02f      	b.n	8002474 <sampling+0x2ec>
 8002414:	2000d0f4 	.word	0x2000d0f4
 8002418:	2000ccac 	.word	0x2000ccac
 800241c:	2000c010 	.word	0x2000c010
 8002420:	20008e16 	.word	0x20008e16
 8002424:	2000a6be 	.word	0x2000a6be
 8002428:	2000d0f6 	.word	0x2000d0f6
 800242c:	200108b8 	.word	0x200108b8
 8002430:	200108c8 	.word	0x200108c8
 8002434:	200096b0 	.word	0x200096b0
seq.notes2[counter]= (sampler.Snotes1[counter]&15)+ (sampler.Snotes2[counter]<<4);
 8002438:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800243c:	4a5b      	ldr	r2, [pc, #364]	; (80025ac <sampling+0x424>)
 800243e:	4413      	add	r3, r2
 8002440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	b2d9      	uxtb	r1, r3
 800244a:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800244e:	4a57      	ldr	r2, [pc, #348]	; (80025ac <sampling+0x424>)
 8002450:	4413      	add	r3, r2
 8002452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	b2da      	uxtb	r2, r3
 800245a:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800245e:	440a      	add	r2, r1
 8002460:	b2d1      	uxtb	r1, r2
 8002462:	4a53      	ldr	r2, [pc, #332]	; (80025b0 <sampling+0x428>)
 8002464:	4413      	add	r3, r2
 8002466:	460a      	mov	r2, r1
 8002468:	74da      	strb	r2, [r3, #19]
for (counter=0;counter<16;counter++){				// notes for sampler
 800246a:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800246e:	3301      	adds	r3, #1
 8002470:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
 8002474:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d9dd      	bls.n	8002438 <sampling+0x2b0>

}


uint16_t i_total;
uint16_t tempo_mod=tempo_lut[seq.tempo];  // set tempo,speed from lut 40-200bpm  ,changed to 4x for note lenght
 800247c:	4b4c      	ldr	r3, [pc, #304]	; (80025b0 <sampling+0x428>)
 800247e:	785b      	ldrb	r3, [r3, #1]
 8002480:	461a      	mov	r2, r3
 8002482:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <sampling+0x42c>)
 8002484:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002488:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a

tempo_sync=16384/((tempo_mod*16)/512) ; // 8000 at slowest 15.625 updates to lfo at 1 note 16384/15.625=1048.576+ per update  at setting 80
 800248c:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8002490:	2b00      	cmp	r3, #0
 8002492:	da00      	bge.n	8002496 <sampling+0x30e>
 8002494:	331f      	adds	r3, #31
 8002496:	115b      	asrs	r3, r3, #5
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800249e:	fb93 f3f2 	sdiv	r3, r3, r2
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <sampling+0x430>)
 80024ac:	edc3 7a00 	vstr	s15, [r3]
tempo_sync=tempo_sync/80;  // bit weird her , this is adsr !
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <sampling+0x430>)
 80024b2:	ed93 7a00 	vldr	s14, [r3]
 80024b6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80025bc <sampling+0x434>
 80024ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <sampling+0x430>)
 80024c0:	edc3 7a00 	vstr	s15, [r3]

if ((tempo_mod==511 )   && (sampler.ram_seq<=256)    && (seq.pos>>4)      )   { next_isr=0; tempo_count=0; }   //  this should sync  rough
 80024c4:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 80024c8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <sampling+0x36c>
 80024d0:	4b36      	ldr	r3, [pc, #216]	; (80025ac <sampling+0x424>)
 80024d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024da:	d80b      	bhi.n	80024f4 <sampling+0x36c>
 80024dc:	4b34      	ldr	r3, [pc, #208]	; (80025b0 <sampling+0x428>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <sampling+0x36c>
 80024e8:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <sampling+0x438>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <sampling+0x43c>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	801a      	strh	r2, [r3, #0]

seqpos_i=0; //reset
 80024f4:	4b34      	ldr	r3, [pc, #208]	; (80025c8 <sampling+0x440>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	801a      	strh	r2, [r3, #0]
	sampler.trigger_position=0;     // reset sample start here
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <sampling+0x424>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	849a      	strh	r2, [r3, #36]	; 0x24

uint8_t looper_dat[8]={1,3,7,15};
 8002500:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002504:	f5a3 7290 	sub.w	r2, r3, #288	; 0x120
 8002508:	4930      	ldr	r1, [pc, #192]	; (80025cc <sampling+0x444>)
 800250a:	4613      	mov	r3, r2
 800250c:	c903      	ldmia	r1, {r0, r1}
 800250e:	6018      	str	r0, [r3, #0]
 8002510:	3304      	adds	r3, #4
 8002512:	7019      	strb	r1, [r3, #0]
 8002514:	1d53      	adds	r3, r2, #5
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]
 800251a:	709a      	strb	r2, [r3, #2]
uint32_t lfo_tempo_hold;

if (tempo_mod_hold!=tempo_mod){					// lfo lut calculate only when changes tempo
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <sampling+0x448>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	f8b7 216a 	ldrh.w	r2, [r7, #362]	; 0x16a
 8002524:	429a      	cmp	r2, r3
 8002526:	d036      	beq.n	8002596 <sampling+0x40e>
		float lfo_tempo_calc=((1647099*4)/(tempo_mod)); // deafualt 1 note    12867  at 512
 8002528:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 800252c:	4a29      	ldr	r2, [pc, #164]	; (80025d4 <sampling+0x44c>)
 800252e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
						for (i=0;i<256;i++){								// 128 is 1 note
 800253e:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <sampling+0x450>)
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e023      	b.n	800258e <sampling+0x406>
	lfo_tempo_hold=(((i+1)*lfo_tempo_calc))/16;               //  at 64 its 12867
 8002546:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <sampling+0x450>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002554:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 8002558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002568:	ee17 3a90 	vmov	r3, s15
 800256c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	lfo_tempo_lut[i]= lfo_tempo_hold;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <sampling+0x450>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800257a:	b299      	uxth	r1, r3
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <sampling+0x454>)
 800257e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
						for (i=0;i<256;i++){								// 128 is 1 note
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <sampling+0x450>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <sampling+0x450>)
 800258c:	801a      	strh	r2, [r3, #0]
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <sampling+0x450>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2bff      	cmp	r3, #255	; 0xff
 8002594:	d9d7      	bls.n	8002546 <sampling+0x3be>
}}
tempo_mod_hold=tempo_mod;   // for lfo
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <sampling+0x448>)
 8002598:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 800259c:	8013      	strh	r3, [r2, #0]

//for (i=0;i<16;i++) {  note_toggler[i]=0; }
	//potSource[150]=(freq_point[0])*100; //0-2


patch_lists();
 800259e:	f7ff fdad 	bl	80020fc <patch_lists>
int32_t* osc_pointers[10];   // sample outs
uint8_t pars_counter;

//if (sampler.ram_seq>15871)  sampler.ram_seq=0;  //else sampler.ram_seq=sampler.ram_seq+1024;
//setup pointers for osc options
 for (pars_counter=0;pars_counter<5;pars_counter++)	{   // fill up pointers and reload vars
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 80025a8:	e0dd      	b.n	8002766 <sampling+0x5de>
 80025aa:	bf00      	nop
 80025ac:	20008edc 	.word	0x20008edc
 80025b0:	2000d0f4 	.word	0x2000d0f4
 80025b4:	2000c010 	.word	0x2000c010
 80025b8:	2000c89c 	.word	0x2000c89c
 80025bc:	42a00000 	.word	0x42a00000
 80025c0:	2000bec4 	.word	0x2000bec4
 80025c4:	2000bef0 	.word	0x2000bef0
 80025c8:	20011d6c 	.word	0x20011d6c
 80025cc:	0800dd1c 	.word	0x0800dd1c
 80025d0:	2000c410 	.word	0x2000c410
 80025d4:	006487ec 	.word	0x006487ec
 80025d8:	200096b2 	.word	0x200096b2
 80025dc:	2000c210 	.word	0x2000c210


		sample_accus[pars_counter]=sample_accus_hold[pars_counter];
 80025e0:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 80025e4:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80025e8:	4991      	ldr	r1, [pc, #580]	; (8002830 <sampling+0x6a8>)
 80025ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025f4:	443b      	add	r3, r7
 80025f6:	f843 2c90 	str.w	r2, [r3, #-144]
	 if (note[pars_counter].osc==0) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 80025fa:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80025fe:	4a8d      	ldr	r2, [pc, #564]	; (8002834 <sampling+0x6ac>)
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <sampling+0x498>
 800260a:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 800260e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002612:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002616:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800261a:	3114      	adds	r1, #20
 800261c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 	 	 	 if (note[pars_counter].osc==1) osc_pointers[pars_counter]=&sample_accus[pars_counter];   // saw
 8002620:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8002624:	4a83      	ldr	r2, [pc, #524]	; (8002834 <sampling+0x6ac>)
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10d      	bne.n	800264c <sampling+0x4c4>
 8002630:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8002634:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 8002638:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4419      	add	r1, r3
 8002640:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002644:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==2) osc_pointers[pars_counter]=&sample_Accu[pars_counter];		// tri
 800264c:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8002650:	4a78      	ldr	r2, [pc, #480]	; (8002834 <sampling+0x6ac>)
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4413      	add	r3, r2
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d10d      	bne.n	8002678 <sampling+0x4f0>
 800265c:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8002660:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 8002664:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4419      	add	r1, r3
 800266c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002670:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==3) { osc_pointers[pars_counter]=&sample_Accu[pars_counter+6];}   // sample_input
 8002678:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 800267c:	4a6d      	ldr	r2, [pc, #436]	; (8002834 <sampling+0x6ac>)
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4413      	add	r3, r2
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d10e      	bne.n	80026a6 <sampling+0x51e>
 8002688:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 800268c:	3306      	adds	r3, #6
 800268e:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 8002692:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4419      	add	r1, r3
 800269a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800269e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==4) { osc_pointers[pars_counter]=&sample_input;}  // sampleinput
 80026a6:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80026aa:	4a62      	ldr	r2, [pc, #392]	; (8002834 <sampling+0x6ac>)
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d109      	bne.n	80026ca <sampling+0x542>
 80026b6:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 80026ba:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026be:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026c2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80026c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==5) osc_pointers[pars_counter]=&sample_adc;   // sine
 80026ca:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80026ce:	4a59      	ldr	r2, [pc, #356]	; (8002834 <sampling+0x6ac>)
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	4413      	add	r3, r2
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d109      	bne.n	80026ee <sampling+0x566>
 80026da:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 80026de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80026e2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80026e6:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==6) osc_pointers[pars_counter]=&ram_temp ;   // non muted RAM , just loop
 80026ee:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 80026f2:	4a50      	ldr	r2, [pc, #320]	; (8002834 <sampling+0x6ac>)
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4413      	add	r3, r2
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d109      	bne.n	8002712 <sampling+0x58a>
 80026fe:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 8002702:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002706:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800270a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800270e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc==7) osc_pointers[pars_counter]=&ram_synced;   // trigger 0-16
 8002712:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8002716:	4a47      	ldr	r2, [pc, #284]	; (8002834 <sampling+0x6ac>)
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b07      	cmp	r3, #7
 8002720:	d109      	bne.n	8002736 <sampling+0x5ae>
 8002722:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 8002726:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800272a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800272e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 			if (note[pars_counter].osc>7) osc_pointers[pars_counter]=&sample_Accu[5];  // zero
 8002736:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 800273a:	4a3e      	ldr	r2, [pc, #248]	; (8002834 <sampling+0x6ac>)
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b07      	cmp	r3, #7
 8002744:	d90a      	bls.n	800275c <sampling+0x5d4>
 8002746:	f897 2182 	ldrb.w	r2, [r7, #386]	; 0x182
 800274a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800274e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002752:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002756:	3114      	adds	r1, #20
 8002758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 for (pars_counter=0;pars_counter<5;pars_counter++)	{   // fill up pointers and reload vars
 800275c:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 8002760:	3301      	adds	r3, #1
 8002762:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 8002766:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 800276a:	2b04      	cmp	r3, #4
 800276c:	f67f af38 	bls.w	80025e0 <sampling+0x458>


 }

note_holdA=0;
 8002770:	4b31      	ldr	r3, [pc, #196]	; (8002838 <sampling+0x6b0>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]

// some good phasin and delays here
uint8_t cross_fade[2]={0,0};
 8002776:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800277a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800277e:	2200      	movs	r2, #0
 8002780:	801a      	strh	r2, [r3, #0]
uint8_t fader[17]={0,1,5,11,19,28,39,51,64,76,88,99,108,116,122,126,127}; // sine curve for cross fade
 8002782:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002786:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800278a:	4a2c      	ldr	r2, [pc, #176]	; (800283c <sampling+0x6b4>)
 800278c:	461c      	mov	r4, r3
 800278e:	4615      	mov	r5, r2
 8002790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	7023      	strb	r3, [r4, #0]
//if(adc_values[2]&16)     	{cross_fade[1]=127-fader[adc_values[2]&15]; cross_fade[2]=127;}  else {cross_fade[2]=fader[adc_values[2]&15]; cross_fade[1]=127;} //calculate crossfader

// doing lfo calc here as it is slow only for now
////////////////////adsr/////////////////////////////////////////

isr_change=0;
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <sampling+0x6b8>)
 800279a:	2200      	movs	r2, #0
 800279c:	801a      	strh	r2, [r3, #0]
uint8_t seq_dat=(1<<(((adc_values[0]>>3))+1))-1;
 800279e:	4b29      	ldr	r3, [pc, #164]	; (8002844 <sampling+0x6bc>)
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	08db      	lsrs	r3, r3, #3
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	2201      	movs	r2, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
///////////////////////////////////////////////////////////////
uint8_t note_plain;


for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <sampling+0x6c0>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	801a      	strh	r2, [r3, #0]
 80027bc:	e25f      	b.n	8002c7e <sampling+0xaf6>

	i_total=i+sample_pointB;
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <sampling+0x6c0>)
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <sampling+0x6c4>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
	sampling_position=i>>6;   //   0-8 steps
 80027cc:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <sampling+0x6c0>)
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <sampling+0x6c8>)
 80027d8:	701a      	strb	r2, [r3, #0]
	sampling_position_b=(sampling_position+7)&7;
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <sampling+0x6c8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	3307      	adds	r3, #7
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <sampling+0x6cc>)
 80027ea:	701a      	strb	r2, [r3, #0]
	note_plain=seq.notes1[seq.pos & 7 ];
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <sampling+0x6d0>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <sampling+0x6d0>)
 80027f6:	4413      	add	r3, r2
 80027f8:	789b      	ldrb	r3, [r3, #2]
 80027fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
//potValues[i&255]=potSource[i&255]>>4; //just to update values

if (tempo_count>=tempo_mod) { next_isr=(next_isr+1)& 4095;tempo_count=0;isr_change=next_isr+1;  }  else {tempo_count++;  }  //trigger next note , actual next step for isrCount(future)  8ms,trying to fix slow down here  8000 too  much, adsr clears note info
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <sampling+0x6d4>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	f8b7 216a 	ldrh.w	r2, [r7, #362]	; 0x16a
 8002806:	429a      	cmp	r2, r3
 8002808:	d82c      	bhi.n	8002864 <sampling+0x6dc>
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <sampling+0x6d8>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	b29b      	uxth	r3, r3
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <sampling+0x6d8>)
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <sampling+0x6d4>)
 800281e:	2200      	movs	r2, #0
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <sampling+0x6d8>)
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <sampling+0x6b8>)
 800282c:	801a      	strh	r2, [r3, #0]
 800282e:	e01f      	b.n	8002870 <sampling+0x6e8>
 8002830:	2000bec8 	.word	0x2000bec8
 8002834:	20008e1c 	.word	0x20008e1c
 8002838:	2000bec6 	.word	0x2000bec6
 800283c:	0800dd24 	.word	0x0800dd24
 8002840:	200096a6 	.word	0x200096a6
 8002844:	20008e0c 	.word	0x20008e0c
 8002848:	200096b2 	.word	0x200096b2
 800284c:	200096b0 	.word	0x200096b0
 8002850:	2000e0b0 	.word	0x2000e0b0
 8002854:	2000e0b1 	.word	0x2000e0b1
 8002858:	2000d0f4 	.word	0x2000d0f4
 800285c:	2000bef0 	.word	0x2000bef0
 8002860:	2000bec4 	.word	0x2000bec4
 8002864:	4ba6      	ldr	r3, [pc, #664]	; (8002b00 <sampling+0x978>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	4ba4      	ldr	r3, [pc, #656]	; (8002b00 <sampling+0x978>)
 800286e:	801a      	strh	r2, [r3, #0]
// tempo_count is about 1000-400
	tempo_start=0;
 8002870:	2300      	movs	r3, #0
 8002872:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184


	if ((next_isr>>4) != (seq.pos)) { 					//     min 6400 cycles per seq.pos ,         next note step 140ms
 8002876:	4ba3      	ldr	r3, [pc, #652]	; (8002b04 <sampling+0x97c>)
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	b29a      	uxth	r2, r3
 800287e:	4ba2      	ldr	r3, [pc, #648]	; (8002b08 <sampling+0x980>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	429a      	cmp	r2, r3
 8002886:	d009      	beq.n	800289c <sampling+0x714>
		seq.pos=(next_isr>>4); // seq pos =256 max , isr = 1/16 of a note, note lenght is 1-4
 8002888:	4b9e      	ldr	r3, [pc, #632]	; (8002b04 <sampling+0x97c>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	b29b      	uxth	r3, r3
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b9d      	ldr	r3, [pc, #628]	; (8002b08 <sampling+0x980>)
 8002894:	701a      	strb	r2, [r3, #0]
		 tempo_start=1;
 8002896:	2301      	movs	r3, #1
 8002898:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
		    }


if (seq.tempo<60) {tempo_start=0; seq.pos=0;sampler.acurrent_sample=1;} // loop on single sample
 800289c:	4b9a      	ldr	r3, [pc, #616]	; (8002b08 <sampling+0x980>)
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	2b3b      	cmp	r3, #59	; 0x3b
 80028a2:	d809      	bhi.n	80028b8 <sampling+0x730>
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
 80028aa:	4b97      	ldr	r3, [pc, #604]	; (8002b08 <sampling+0x980>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
 80028b0:	4b96      	ldr	r3, [pc, #600]	; (8002b0c <sampling+0x984>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 	if(tempo_start  )    // Calculates only on note change, gotta change seq.pos somehow  , only activates when change in seq pos ie once in ten bankwrites ,rare
 80028b8:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 81cc 	beq.w	8002c5a <sampling+0xad2>
	{
		serial_tosend=1;
 80028c2:	4b93      	ldr	r3, [pc, #588]	; (8002b10 <sampling+0x988>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
		//note_reset();
		//note[1].timeshift=(adc_values[1])&31; //assigned pots to start of loopers 0-16,works
		seqpos_i=i+1;   //record postion
 80028c8:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <sampling+0x98c>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <sampling+0x990>)
 80028d2:	801a      	strh	r2, [r3, #0]


	//	note[2].timeshift=note[1].timeshift=note[3].timeshift=note[4].timeshift;
		uint8_t   loop_temp1[4];
		loop_temp1[0]=seq.pos&7;
 80028d4:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <sampling+0x980>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80028e2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80028e6:	701a      	strb	r2, [r3, #0]
	//	loop_temp1[3]=adc_values[0]>>2;




		seq.loop[0]=(note[0].timeshift+(seq.pos&note[0].slide_length))&31;
 80028e8:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <sampling+0x994>)
 80028ea:	799a      	ldrb	r2, [r3, #6]
 80028ec:	4b86      	ldr	r3, [pc, #536]	; (8002b08 <sampling+0x980>)
 80028ee:	7819      	ldrb	r1, [r3, #0]
 80028f0:	4b8a      	ldr	r3, [pc, #552]	; (8002b1c <sampling+0x994>)
 80028f2:	7a5b      	ldrb	r3, [r3, #9]
 80028f4:	400b      	ands	r3, r1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4b81      	ldr	r3, [pc, #516]	; (8002b08 <sampling+0x980>)
 8002904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		seq.loop[1]=(note[1].timeshift+(seq.pos&note[1].slide_length))&31;
 8002908:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <sampling+0x994>)
 800290a:	7d9a      	ldrb	r2, [r3, #22]
 800290c:	4b7e      	ldr	r3, [pc, #504]	; (8002b08 <sampling+0x980>)
 800290e:	7819      	ldrb	r1, [r3, #0]
 8002910:	4b82      	ldr	r3, [pc, #520]	; (8002b1c <sampling+0x994>)
 8002912:	7e5b      	ldrb	r3, [r3, #25]
 8002914:	400b      	ands	r3, r1
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4413      	add	r3, r2
 800291a:	b2db      	uxtb	r3, r3
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	b2da      	uxtb	r2, r3
 8002922:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <sampling+0x980>)
 8002924:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		seq.loop[2]=(note[2].timeshift+(seq.pos&note[2].slide_length))&31; // this is really handy with sync to notes
 8002928:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <sampling+0x994>)
 800292a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800292e:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <sampling+0x980>)
 8002930:	7819      	ldrb	r1, [r3, #0]
 8002932:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <sampling+0x994>)
 8002934:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002938:	400b      	ands	r3, r1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4413      	add	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <sampling+0x980>)
 8002948:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		seq.loop[3]=(note[3].timeshift+(seq.pos&note[3].slide_length))&31;
 800294c:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <sampling+0x994>)
 800294e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8002952:	4b6d      	ldr	r3, [pc, #436]	; (8002b08 <sampling+0x980>)
 8002954:	7819      	ldrb	r1, [r3, #0]
 8002956:	4b71      	ldr	r3, [pc, #452]	; (8002b1c <sampling+0x994>)
 8002958:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800295c:	400b      	ands	r3, r1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <sampling+0x980>)
 800296c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		seq.loop[4]=(note[4].timeshift+(seq.pos&note[4].slide_length))&15;  // use this for sample
 8002970:	4b6a      	ldr	r3, [pc, #424]	; (8002b1c <sampling+0x994>)
 8002972:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8002976:	4b64      	ldr	r3, [pc, #400]	; (8002b08 <sampling+0x980>)
 8002978:	7819      	ldrb	r1, [r3, #0]
 800297a:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <sampling+0x994>)
 800297c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002980:	400b      	ands	r3, r1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4413      	add	r3, r2
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b5e      	ldr	r3, [pc, #376]	; (8002b08 <sampling+0x980>)
 8002990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


		sampler.acurrent_sample=sampler.Snotes1 [seq.loop[4]]; // 0 is none
 8002994:	4b5c      	ldr	r3, [pc, #368]	; (8002b08 <sampling+0x980>)
 8002996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800299a:	461a      	mov	r2, r3
 800299c:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <sampling+0x984>)
 800299e:	4413      	add	r3, r2
 80029a0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <sampling+0x984>)
 80029a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		soft_mute=1;  // fade out  start on note change
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
			note[0].pitch=(notes_joined[seq.loop[0]])+(note[0].transpose);    // maybe join 1 and 2
 80029b0:	4b55      	ldr	r3, [pc, #340]	; (8002b08 <sampling+0x980>)
 80029b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <sampling+0x998>)
 80029ba:	5c9a      	ldrb	r2, [r3, r2]
 80029bc:	4b57      	ldr	r3, [pc, #348]	; (8002b1c <sampling+0x994>)
 80029be:	795b      	ldrb	r3, [r3, #5]
 80029c0:	4413      	add	r3, r2
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <sampling+0x994>)
 80029c6:	709a      	strb	r2, [r3, #2]
			//note[0].pitch=note[1].pitch+(note[0].transpose); // just double
			note[1].pitch=(notes_joined[seq.loop[1]])+(note[1].transpose);  //loop 8 notes from pos and x times
 80029c8:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <sampling+0x980>)
 80029ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ce:	461a      	mov	r2, r3
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <sampling+0x998>)
 80029d2:	5c9a      	ldrb	r2, [r3, r2]
 80029d4:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <sampling+0x994>)
 80029d6:	7d5b      	ldrb	r3, [r3, #21]
 80029d8:	4413      	add	r3, r2
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <sampling+0x994>)
 80029de:	749a      	strb	r2, [r3, #18]
			note[2].pitch=(notes_joined[seq.loop[2]])+(note[2].transpose);  //loop 8 notes from pos and x times
 80029e0:	4b49      	ldr	r3, [pc, #292]	; (8002b08 <sampling+0x980>)
 80029e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <sampling+0x998>)
 80029ea:	5c9a      	ldrb	r2, [r3, r2]
 80029ec:	4b4b      	ldr	r3, [pc, #300]	; (8002b1c <sampling+0x994>)
 80029ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029f2:	4413      	add	r3, r2
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <sampling+0x994>)
 80029f8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		note[3].pitch=(notes_joined[seq.loop[3]])+(note[3].transpose); ;  //loop 8 notes from pos and x times ,might disable normal adsr completely
 80029fc:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <sampling+0x980>)
 80029fe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002a02:	461a      	mov	r2, r3
 8002a04:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <sampling+0x998>)
 8002a06:	5c9a      	ldrb	r2, [r3, r2]
 8002a08:	4b44      	ldr	r3, [pc, #272]	; (8002b1c <sampling+0x994>)
 8002a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a0e:	4413      	add	r3, r2
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b42      	ldr	r3, [pc, #264]	; (8002b1c <sampling+0x994>)
 8002a14:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		note[4].position=1;    // should trigger always
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <sampling+0x994>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		// --------------------- sampler
		uint8_t pos_divide=15;
 8002a20:	230f      	movs	r3, #15
 8002a22:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
		if (sampler.repeat) pos_divide=15>>sampler.repeat;
 8002a26:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <sampling+0x984>)
 8002a28:	7f1b      	ldrb	r3, [r3, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <sampling+0x8b4>
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <sampling+0x984>)
 8002a30:	7f1b      	ldrb	r3, [r3, #28]
 8002a32:	461a      	mov	r2, r3
 8002a34:	230f      	movs	r3, #15
 8002a36:	4113      	asrs	r3, r2
 8002a38:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181

		if (sampler.trigger_1==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002a3c:	4b33      	ldr	r3, [pc, #204]	; (8002b0c <sampling+0x984>)
 8002a3e:	7e1b      	ldrb	r3, [r3, #24]
 8002a40:	4619      	mov	r1, r3
 8002a42:	4b31      	ldr	r3, [pc, #196]	; (8002b08 <sampling+0x980>)
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3301      	adds	r3, #1
 8002a50:	4299      	cmp	r1, r3
 8002a52:	d102      	bne.n	8002a5a <sampling+0x8d2>
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <sampling+0x984>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	849a      	strh	r2, [r3, #36]	; 0x24
		if (sampler.trigger_2==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <sampling+0x984>)
 8002a5c:	7e5b      	ldrb	r3, [r3, #25]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <sampling+0x980>)
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8002a68:	4013      	ands	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4299      	cmp	r1, r3
 8002a70:	d102      	bne.n	8002a78 <sampling+0x8f0>
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <sampling+0x984>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	849a      	strh	r2, [r3, #36]	; 0x24
		if (sampler.trigger_3==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <sampling+0x984>)
 8002a7a:	7e9b      	ldrb	r3, [r3, #26]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <sampling+0x980>)
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8002a86:	4013      	ands	r3, r2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	4299      	cmp	r1, r3
 8002a8e:	d102      	bne.n	8002a96 <sampling+0x90e>
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <sampling+0x984>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	849a      	strh	r2, [r3, #36]	; 0x24
		if (sampler.trigger_4==((seq.pos&pos_divide)+1))  sampler.trigger_position=1;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <sampling+0x984>)
 8002a98:	7edb      	ldrb	r3, [r3, #27]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <sampling+0x980>)
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4299      	cmp	r1, r3
 8002aac:	d102      	bne.n	8002ab4 <sampling+0x92c>
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <sampling+0x984>)
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	849a      	strh	r2, [r3, #36]	; 0x24
	//	if(sampler.trigger_position) note[3].position=sampling_position+1;

		patch_target_replace();
 8002ab4:	f7fe fdf0 	bl	8001698 <patch_target_replace>
		uint8_t detune_temp=0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
//		if(detune_temp>27) detune_temp=27;
		   //this is for sine skip mask

//	note[3].tuned=sine_lut[MajorNote[detune_temp]];	//sets freq ,1.0594  * 16536 =17518  ,
//	note[3].tuned= (note[3].tuned*1200)>>10;  // modify different sample size , just need single cycle length and thats it
		mask_result =0;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <sampling+0x99c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	801a      	strh	r2, [r3, #0]
		uint8_t note_number;
		for (mask_i=0;mask_i<4;mask_i++)	{							// calc detune , slow ,also creates notes
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8002aca:	e0c1      	b.n	8002c50 <sampling+0xac8>

			if  (note[mask_i].osc<3)  { if (seq.loop[mask_i]==0)  {note[mask_i].position=0;   } else  note[mask_i].position=sampling_position+1;    }   // disables trigger ?
 8002acc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002ad0:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <sampling+0x994>)
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d831      	bhi.n	8002b40 <sampling+0x9b8>
 8002adc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002ae0:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <sampling+0x980>)
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11d      	bne.n	8002b28 <sampling+0x9a0>
 8002aec:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <sampling+0x994>)
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e020      	b.n	8002b40 <sampling+0x9b8>
 8002afe:	bf00      	nop
 8002b00:	2000bef0 	.word	0x2000bef0
 8002b04:	2000bec4 	.word	0x2000bec4
 8002b08:	2000d0f4 	.word	0x2000d0f4
 8002b0c:	20008edc 	.word	0x20008edc
 8002b10:	20010add 	.word	0x20010add
 8002b14:	200096b2 	.word	0x200096b2
 8002b18:	20011d6c 	.word	0x20011d6c
 8002b1c:	20008e1c 	.word	0x20008e1c
 8002b20:	200108b8 	.word	0x200108b8
 8002b24:	2000a6c0 	.word	0x2000a6c0
 8002b28:	4bbb      	ldr	r3, [pc, #748]	; (8002e18 <sampling+0xc90>)
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002b30:	3201      	adds	r2, #1
 8002b32:	b2d1      	uxtb	r1, r2
 8002b34:	4ab9      	ldr	r2, [pc, #740]	; (8002e1c <sampling+0xc94>)
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	701a      	strb	r2, [r3, #0]

			// disable note on lowest , optional

		    detune_temp=note[mask_i].pitch+note[mask_i].detune;
 8002b40:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002b44:	4ab5      	ldr	r2, [pc, #724]	; (8002e1c <sampling+0xc94>)
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	4413      	add	r3, r2
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002b52:	49b2      	ldr	r1, [pc, #712]	; (8002e1c <sampling+0xc94>)
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	440b      	add	r3, r1
 8002b58:	3308      	adds	r3, #8
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180


		    if (detune_temp>pitch_limit ) detune_temp=pitch_limit;
 8002b62:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8002b66:	2b3c      	cmp	r3, #60	; 0x3c
 8002b68:	d902      	bls.n	8002b70 <sampling+0x9e8>
 8002b6a:	233c      	movs	r3, #60	; 0x3c
 8002b6c:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
		    if (detune_temp>30 )   note_number=MinorNote[detune_temp-31];    // for now
 8002b70:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8002b74:	2b1e      	cmp	r3, #30
 8002b76:	d907      	bls.n	8002b88 <sampling+0xa00>
 8002b78:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8002b7c:	3b1f      	subs	r3, #31
 8002b7e:	4aa8      	ldr	r2, [pc, #672]	; (8002e20 <sampling+0xc98>)
 8002b80:	5cd3      	ldrb	r3, [r2, r3]
 8002b82:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
 8002b86:	e005      	b.n	8002b94 <sampling+0xa0c>
		    else note_number=MajorNote[detune_temp];
 8002b88:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8002b8c:	4aa5      	ldr	r2, [pc, #660]	; (8002e24 <sampling+0xc9c>)
 8002b8e:	5cd3      	ldrb	r3, [r2, r3]
 8002b90:	f887 317f 	strb.w	r3, [r7, #383]	; 0x17f
		    float tune_temp=sample_Noteadd[note_number];
 8002b94:	f897 317f 	ldrb.w	r3, [r7, #383]	; 0x17f
 8002b98:	4aa3      	ldr	r2, [pc, #652]	; (8002e28 <sampling+0xca0>)
 8002b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba6:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
		    if ((note[mask_i].velocity)&&(note[mask_i].osc))	    LCD_Info[15+mask_i]=major_notes[note_number]; else LCD_Info[15+mask_i]=95;
 8002baa:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002bae:	4a9b      	ldr	r2, [pc, #620]	; (8002e1c <sampling+0xc94>)
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3307      	adds	r3, #7
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d011      	beq.n	8002be0 <sampling+0xa58>
 8002bbc:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002bc0:	4a96      	ldr	r2, [pc, #600]	; (8002e1c <sampling+0xc94>)
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4413      	add	r3, r2
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d009      	beq.n	8002be0 <sampling+0xa58>
 8002bcc:	f897 217f 	ldrb.w	r2, [r7, #383]	; 0x17f
 8002bd0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002bd4:	330f      	adds	r3, #15
 8002bd6:	4995      	ldr	r1, [pc, #596]	; (8002e2c <sampling+0xca4>)
 8002bd8:	5c89      	ldrb	r1, [r1, r2]
 8002bda:	4a95      	ldr	r2, [pc, #596]	; (8002e30 <sampling+0xca8>)
 8002bdc:	54d1      	strb	r1, [r2, r3]
 8002bde:	e005      	b.n	8002bec <sampling+0xa64>
 8002be0:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002be4:	330f      	adds	r3, #15
 8002be6:	4a92      	ldr	r2, [pc, #584]	; (8002e30 <sampling+0xca8>)
 8002be8:	215f      	movs	r1, #95	; 0x5f
 8002bea:	54d1      	strb	r1, [r2, r3]
		    //note[mask_i].tuned=sample_Noteadd[MajorNote[detune_temp]];   // put unit tune here


		    if (notes_joined[seq.loop[mask_i]] )		note[mask_i].tuned=tune_temp*0.99;	// this works
 8002bec:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002bf0:	4a90      	ldr	r2, [pc, #576]	; (8002e34 <sampling+0xcac>)
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4b8f      	ldr	r3, [pc, #572]	; (8002e38 <sampling+0xcb0>)
 8002bfc:	5c9b      	ldrb	r3, [r3, r2]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d019      	beq.n	8002c36 <sampling+0xaae>
 8002c02:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002c06:	f7fd fd7d 	bl	8000704 <__aeabi_f2d>
 8002c0a:	a381      	add	r3, pc, #516	; (adr r3, 8002e10 <sampling+0xc88>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	f7fd faea 	bl	80001e8 <__aeabi_dmul>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	f897 4187 	ldrb.w	r4, [r7, #391]	; 0x187
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f7fd fdc8 	bl	80007b4 <__aeabi_d2uiz>
 8002c24:	4603      	mov	r3, r0
 8002c26:	b299      	uxth	r1, r3
 8002c28:	4a7c      	ldr	r2, [pc, #496]	; (8002e1c <sampling+0xc94>)
 8002c2a:	0123      	lsls	r3, r4, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	330e      	adds	r3, #14
 8002c30:	460a      	mov	r2, r1
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	e007      	b.n	8002c46 <sampling+0xabe>
		    else note[mask_i].position=0;  // no retrigger on off note
 8002c36:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002c3a:	4a78      	ldr	r2, [pc, #480]	; (8002e1c <sampling+0xc94>)
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
		for (mask_i=0;mask_i<4;mask_i++)	{							// calc detune , slow ,also creates notes
 8002c46:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 8002c50:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	f67f af39 	bls.w	8002acc <sampling+0x944>
		//note_tuned[3]=2751;
	} // end of note calcualte



	if ((i&63)==0)
 8002c5a:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <sampling+0xcb4>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <sampling+0xaea>
	{
	    LFO_square_one_pulse();
 8002c66:	f000 ffe7 	bl	8003c38 <LFO_square_one_pulse>
	    ADSR_loop();   // change to sound instead of channel  , use 4 for sample
 8002c6a:	f001 fad1 	bl	8004210 <ADSR_loop>
		LFO_source_synced();
 8002c6e:	f001 f873 	bl	8003d58 <LFO_source_synced>
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,works fine, too much scope
 8002c72:	4b72      	ldr	r3, [pc, #456]	; (8002e3c <sampling+0xcb4>)
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <sampling+0xcb4>)
 8002c7c:	801a      	strh	r2, [r3, #0]
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <sampling+0xcb4>)
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c86:	f4ff ad9a 	bcc.w	80027be <sampling+0x636>
int32_t  sample_temp3;
int32_t  sample_temp4;
int32_t  sample_temp5;
int32_t  sample_temp6;

memcpy(&sample_counts_temp,sample_counts_holder,80);
 8002c8a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002c8e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c92:	4a6b      	ldr	r2, [pc, #428]	; (8002e40 <sampling+0xcb8>)
 8002c94:	4618      	mov	r0, r3
 8002c96:	4611      	mov	r1, r2
 8002c98:	2350      	movs	r3, #80	; 0x50
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f00a fc6a 	bl	800d574 <memcpy>

sample_counts_temp[30]=note[0].tuned;
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <sampling+0xc94>)
 8002ca2:	89da      	ldrh	r2, [r3, #14]
 8002ca4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002ca8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cac:	879a      	strh	r2, [r3, #60]	; 0x3c
sample_counts_temp[31]=note[1].tuned;
 8002cae:	4b5b      	ldr	r3, [pc, #364]	; (8002e1c <sampling+0xc94>)
 8002cb0:	8bda      	ldrh	r2, [r3, #30]
 8002cb2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cb6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cba:	87da      	strh	r2, [r3, #62]	; 0x3e
sample_counts_temp[32]=note[2].tuned;
 8002cbc:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <sampling+0xc94>)
 8002cbe:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002cc0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
sample_counts_temp[33]=note[3].tuned;
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <sampling+0xc94>)
 8002cce:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002cd0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002cd4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002cd8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
uint32_t*  sine_ptr_temp[5];


//tuned_list[0]=6397;
uint16_t accu_count[4];
memcpy(&accu_count,sample_accu_counter,8);  // copy counters
 8002cdc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002ce0:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8002ce4:	4a57      	ldr	r2, [pc, #348]	; (8002e44 <sampling+0xcbc>)
 8002ce6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cea:	e883 0003 	stmia.w	r3, {r0, r1}

memcpy(&sample_accus,sample_accus_hold,16);    // this is good
 8002cee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	4954      	ldr	r1, [pc, #336]	; (8002e48 <sampling+0xcc0>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00a fc3c 	bl	800d574 <memcpy>


uint8_t*  sample_block_ptr=&flash_read_block ;    // temporary only
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <sampling+0xcc4>)
 8002cfe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158


	//if((sampler.ram_seq&255)==0)	  sampler_1k_load(sample_flash_address);

	counter_16=counter_16+2;   // jump 512 bytes
 8002d02:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <sampling+0xcc8>)
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	3302      	adds	r3, #2
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	4b51      	ldr	r3, [pc, #324]	; (8002e50 <sampling+0xcc8>)
 8002d0c:	801a      	strh	r2, [r3, #0]
	//    if (sampler.ram_seq>14000) memcpy(&error_data,flash_read_block2,127);

	uint16_t*   ram_ptr=  &RAM	;  // pointer goes to LSB !!!!
 8002d0e:	4b51      	ldr	r3, [pc, #324]	; (8002e54 <sampling+0xccc>)
 8002d10:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	//uint16_t* sample_ptr= &flash_read_block;
	uint16_t* sample_ptr2= &flash_read_block2[4];
 8002d14:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <sampling+0xcd0>)
 8002d16:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150


	if(RAM_looper>=16383) RAM_looper=0;  // with 256 we have every 64 points along the sample for position
 8002d1a:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <sampling+0xcd4>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	f643 72fe 	movw	r2, #16382	; 0x3ffe
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d902      	bls.n	8002d2c <sampling+0xba4>
 8002d26:	4b4d      	ldr	r3, [pc, #308]	; (8002e5c <sampling+0xcd4>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	801a      	strh	r2, [r3, #0]
	int32_t   sample_adc_temp;
//	if ((sampler.ram_seq&255)==0)  ram_ptr=  &flash_read_block[128];
	uint16_t looper_point=0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
//	float pitch_counter=1;

//	ram_float=(1<<20) /(1.059463*ram_float);

	int16_t  flash_read_a=0;
 8002d32:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d36:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	801a      	strh	r2, [r3, #0]

	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <sampling+0xcb4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	801a      	strh	r2, [r3, #0]
 8002d44:	e03a      	b.n	8002dbc <sampling+0xc34>

					flash_read_a= *(sample_ptr2+i) - 32767;
 8002d46:	4b3d      	ldr	r3, [pc, #244]	; (8002e3c <sampling+0xcb4>)
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002d50:	4413      	add	r3, r2
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002d58:	3b7f      	subs	r3, #127	; 0x7f
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	b21a      	sxth	r2, r3
 8002d5e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d62:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8002d66:	801a      	strh	r2, [r3, #0]
					if ((flash_read_a==32767)   ||  (flash_read_a==-32767))   flash_read_a=0;    // stop clicks from FF bytes
 8002d68:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d6c:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8002d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d74:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d008      	beq.n	8002d8e <sampling+0xc06>
 8002d7c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d80:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8002d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d88:	4a35      	ldr	r2, [pc, #212]	; (8002e60 <sampling+0xcd8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d105      	bne.n	8002d9a <sampling+0xc12>
 8002d8e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002d92:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 8002d96:	2200      	movs	r2, #0
 8002d98:	801a      	strh	r2, [r3, #0]
					memcpy(&flash_read_block[i*2],&flash_read_a,2);   //
 8002d9a:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <sampling+0xcb4>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4a2a      	ldr	r2, [pc, #168]	; (8002e4c <sampling+0xcc4>)
 8002da2:	4413      	add	r3, r2
 8002da4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8002da8:	f5a2 72bf 	sub.w	r2, r2, #382	; 0x17e
 8002dac:	8812      	ldrh	r2, [r2, #0]
 8002dae:	801a      	strh	r2, [r3, #0]
	for (i=0;i<512;i++){    // convert to signed , also use this for double buffer (no bank switch) 512 *16 is enough
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <sampling+0xcb4>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b20      	ldr	r3, [pc, #128]	; (8002e3c <sampling+0xcb4>)
 8002dba:	801a      	strh	r2, [r3, #0]
 8002dbc:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <sampling+0xcb4>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d3bf      	bcc.n	8002d46 <sampling+0xbbe>

	}

///    downsample  is a no go without playback from RAM , leave it , work on loops etc
//	sine_count_sample();   //change playback rate
	int16_t* signed_ptr=&flash_read_block;
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <sampling+0xcc4>)
 8002dc8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	 if (LFO_square[0].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[60]=95;
 8002dcc:	4b25      	ldr	r3, [pc, #148]	; (8002e64 <sampling+0xcdc>)
 8002dce:	889b      	ldrh	r3, [r3, #4]
 8002dd0:	2b0a      	cmp	r3, #10
 8002dd2:	d904      	bls.n	8002dde <sampling+0xc56>
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <sampling+0xca8>)
 8002dd6:	225e      	movs	r2, #94	; 0x5e
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ddc:	e003      	b.n	8002de6 <sampling+0xc5e>
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <sampling+0xca8>)
 8002de0:	225f      	movs	r2, #95	; 0x5f
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 if (LFO_square[2].out[0]>10) LCD_Info[60]=94  ;  else LCD_Info[62]=95;
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <sampling+0xcdc>)
 8002de8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d904      	bls.n	8002df8 <sampling+0xc70>
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <sampling+0xca8>)
 8002df0:	225e      	movs	r2, #94	; 0x5e
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df6:	e003      	b.n	8002e00 <sampling+0xc78>
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <sampling+0xca8>)
 8002dfa:	225f      	movs	r2, #95	; 0x5f
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	 uint8_t sampler_adder_enable=1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <sampling+0xcb4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	e34c      	b.n	80034a8 <sampling+0x1320>
 8002e0e:	bf00      	nop
 8002e10:	7ae147ae 	.word	0x7ae147ae
 8002e14:	3fefae14 	.word	0x3fefae14
 8002e18:	2000e0b0 	.word	0x2000e0b0
 8002e1c:	20008e1c 	.word	0x20008e1c
 8002e20:	0800f34c 	.word	0x0800f34c
 8002e24:	0800f32c 	.word	0x0800f32c
 8002e28:	0800f36c 	.word	0x0800f36c
 8002e2c:	0800f2e8 	.word	0x0800f2e8
 8002e30:	20011cf4 	.word	0x20011cf4
 8002e34:	2000d0f4 	.word	0x2000d0f4
 8002e38:	200108b8 	.word	0x200108b8
 8002e3c:	200096b2 	.word	0x200096b2
 8002e40:	200093dc 	.word	0x200093dc
 8002e44:	2000942c 	.word	0x2000942c
 8002e48:	2000bec8 	.word	0x2000bec8
 8002e4c:	20011d74 	.word	0x20011d74
 8002e50:	20012578 	.word	0x20012578
 8002e54:	200001b8 	.word	0x200001b8
 8002e58:	20012178 	.word	0x20012178
 8002e5c:	2001258a 	.word	0x2001258a
 8002e60:	ffff8001 	.word	0xffff8001
 8002e64:	2000cf94 	.word	0x2000cf94
	i_total=i+sample_pointB;
 8002e68:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <sampling+0xda8>)
 8002e6a:	881a      	ldrh	r2, [r3, #0]
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <sampling+0xdac>)
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	4413      	add	r3, r2
 8002e72:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
	sampling_position=(i>>6);
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <sampling+0xda8>)
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <sampling+0xdb0>)
 8002e82:	701a      	strb	r2, [r3, #0]
	sampler_adder_enable=1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	sample_adc_temp=input_holder[((adc_playback_position++)&1023)>>1];
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <sampling+0xdb4>)
 8002e8c:	881b      	ldrh	r3, [r3, #0]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	b291      	uxth	r1, r2
 8002e92:	4a2a      	ldr	r2, [pc, #168]	; (8002f3c <sampling+0xdb4>)
 8002e94:	8011      	strh	r1, [r2, #0]
 8002e96:	105b      	asrs	r3, r3, #1
 8002e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <sampling+0xdb8>)
 8002e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	sample_adc_temp=(sample_adc_temp-32767)<<4;
 8002ea6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002eaa:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002eae:	3b7f      	subs	r3, #127	; 0x7f
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	sample_adc=(sample_adc_temp+sample_adc)>>1;
 8002eb6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002eba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002ebe:	4413      	add	r3, r2
 8002ec0:	105b      	asrs	r3, r3, #1
 8002ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	looper_point=(RAM_looper+(sampler.RAM_offset<<10))&16383;  // will use different data here
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <sampling+0xdbc>)
 8002ec8:	7f5b      	ldrb	r3, [r3, #29]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <sampling+0xdc0>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002edc:	f8a7 314e 	strh.w	r3, [r7, #334]	; 0x14e
	   ram_temp=*(ram_ptr+looper_point);    // works
 8002ee0:	f8b7 314e 	ldrh.w	r3, [r7, #334]	; 0x14e
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002eea:	4413      	add	r3, r2
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	ram_temp=(ram_temp-32767)<<4;
 8002ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ef6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002efa:	3b7f      	subs	r3, #127	; 0x7f
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	//ram_synced= *(ram_ptr+sampler.ram_seq);



	if (sampler.ram_seq<sampler.start_current) {sample_input=0;  ram_synced=32767;}
 8002f02:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <sampling+0xdbc>)
 8002f04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <sampling+0xdbc>)
 8002f0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d21c      	bcs.n	8002f4c <sampling+0xdc4>
 8002f12:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f16:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f26:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e02c      	b.n	8002f88 <sampling+0xe00>
 8002f2e:	bf00      	nop
 8002f30:	200096b2 	.word	0x200096b2
 8002f34:	200096b0 	.word	0x200096b0
 8002f38:	2000e0b0 	.word	0x2000e0b0
 8002f3c:	200129d6 	.word	0x200129d6
 8002f40:	2000c8a4 	.word	0x2000c8a4
 8002f44:	20008edc 	.word	0x20008edc
 8002f48:	2001258a 	.word	0x2001258a
	else 	{sample_input=*(signed_ptr+(sampler.ram_seq&255));ram_synced= *(ram_ptr+sampler.ram_seq);}
 8002f4c:	4bc2      	ldr	r3, [pc, #776]	; (8003258 <sampling+0x10d0>)
 8002f4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	461a      	mov	r2, r3
 8002f62:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	4bba      	ldr	r3, [pc, #744]	; (8003258 <sampling+0x10d0>)
 8002f6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8002f78:	4413      	add	r3, r2
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f86:	601a      	str	r2, [r3, #0]
	ram_synced=(ram_synced-32767)<<4;
 8002f88:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8002f96:	3b7f      	subs	r3, #127	; 0x7f
 8002f98:	011a      	lsls	r2, r3, #4
 8002f9a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002f9e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fa2:	601a      	str	r2, [r3, #0]


	sample_input=sample_input<<4;
 8002fa4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002fa8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	011a      	lsls	r2, r3, #4
 8002fb0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002fb4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fb8:	601a      	str	r2, [r3, #0]
	if (ram_sync_swap) sample_input=ram_synced;
 8002fba:	4ba8      	ldr	r3, [pc, #672]	; (800325c <sampling+0x10d4>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <sampling+0xe4e>
 8002fc2:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002fc6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002fd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fd4:	601a      	str	r2, [r3, #0]
	if  (sampler_mute)  sample_input=0;    // mute   , stops click on start
 8002fd6:	4ba2      	ldr	r3, [pc, #648]	; (8003260 <sampling+0x10d8>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <sampling+0xe62>
 8002fde:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002fe2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
	//	if	(((i&1)==1) &&   (sampler.ram_seq) && (ADSR[4].buffer[sampling_position]==0) )   sampler.ram_seq=0;  // stops


	//    if (sampler.ram_seq<(sampler.start+255))     {   if     (seq_pos>=i)   { sampler_adder_enable=0;sample_input=0; }}   // stop and mute
	//	if	(((i&1)==1) && sampler_adder_enable)  {  RAM_looper++;sampler.ram_seq=sampler.ram_seq+1;  } // half speed
		if	((i&1)==1)   {  RAM_looper++;sampler.ram_seq=sampler.ram_seq+1;  }
 8002fea:	4b9e      	ldr	r3, [pc, #632]	; (8003264 <sampling+0x10dc>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00d      	beq.n	8003012 <sampling+0xe8a>
 8002ff6:	4b9c      	ldr	r3, [pc, #624]	; (8003268 <sampling+0x10e0>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	4b9a      	ldr	r3, [pc, #616]	; (8003268 <sampling+0x10e0>)
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	4b95      	ldr	r3, [pc, #596]	; (8003258 <sampling+0x10d0>)
 8003004:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003008:	3301      	adds	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b92      	ldr	r3, [pc, #584]	; (8003258 <sampling+0x10d0>)
 800300e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	//	if	((i&1)==1)  {  RAM_looper++; } // half speed
//	if	(((i&1)==1) &&   (sampler.ram_seq==0) && (ADSR[4].buffer[sampling_position]) )    sampler.ram_seq=1;   // trigger by velocity


	if (i==seqpos_i) {sample_counts_temp[20]=sample_counts_temp[30]; 		//delay tuned changed till correct time
 8003012:	4b94      	ldr	r3, [pc, #592]	; (8003264 <sampling+0x10dc>)
 8003014:	881a      	ldrh	r2, [r3, #0]
 8003016:	4b95      	ldr	r3, [pc, #596]	; (800326c <sampling+0x10e4>)
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d129      	bne.n	8003072 <sampling+0xeea>
 800301e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003022:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003026:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8003028:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800302c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003030:	851a      	strh	r2, [r3, #40]	; 0x28
	sample_counts_temp[21]=sample_counts_temp[31];
 8003032:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003036:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800303a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800303c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003040:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003044:	855a      	strh	r2, [r3, #42]	; 0x2a
	sample_counts_temp[22]=sample_counts_temp[32];
 8003046:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800304a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800304e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003052:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003056:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800305a:	859a      	strh	r2, [r3, #44]	; 0x2c
	sample_counts_temp[23]=sample_counts_temp[33];
 800305c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003060:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003064:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003068:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800306c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003070:	85da      	strh	r2, [r3, #46]	; 0x2e
	}

	if ((i&63)==0)	{
 8003072:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <sampling+0x10dc>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 8095 	bne.w	80031aa <sampling+0x1022>

	    //  LFO_source_new(); // calculate lfo maybe 8 times for now
	   patch_target_replace();    // update values , not too bad
 8003080:	f7fe fb0a 	bl	8001698 <patch_target_replace>
float freq_temp=arm_sin_f32(filter[0].cutoff_1*0.006159)    ;   // need this for useful filter
 8003084:	4b7a      	ldr	r3, [pc, #488]	; (8003270 <sampling+0x10e8>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fb29 	bl	80006e0 <__aeabi_i2d>
 800308e:	a36e      	add	r3, pc, #440	; (adr r3, 8003248 <sampling+0x10c0>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd f8a8 	bl	80001e8 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fba8 	bl	80007f4 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	ee00 3a10 	vmov	s0, r3
 80030aa:	f00a f9f1 	bl	800d490 <arm_sin_f32>
 80030ae:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
	freq_pointer[0] [sampling_position]=1-freq_temp; // problem was selecting accu instead of out , good now
 80030b2:	4b70      	ldr	r3, [pc, #448]	; (8003274 <sampling+0x10ec>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030ba:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 80030be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c2:	4a6d      	ldr	r2, [pc, #436]	; (8003278 <sampling+0x10f0>)
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[1].cutoff_1*0.006)    ;
 80030cc:	4b68      	ldr	r3, [pc, #416]	; (8003270 <sampling+0x10e8>)
 80030ce:	7a1b      	ldrb	r3, [r3, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fb05 	bl	80006e0 <__aeabi_i2d>
 80030d6:	a35e      	add	r3, pc, #376	; (adr r3, 8003250 <sampling+0x10c8>)
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f7fd f884 	bl	80001e8 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fb84 	bl	80007f4 <__aeabi_d2f>
 80030ec:	4603      	mov	r3, r0
 80030ee:	ee00 3a10 	vmov	s0, r3
 80030f2:	f00a f9cd 	bl	800d490 <arm_sin_f32>
 80030f6:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
	freq_pointer[1] [sampling_position] =1-freq_temp ; // filter lfos
 80030fa:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <sampling+0x10ec>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003102:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	4a5b      	ldr	r2, [pc, #364]	; (8003278 <sampling+0x10f0>)
 800310c:	3309      	adds	r3, #9
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	edc3 7a00 	vstr	s15, [r3]
	freq_temp=arm_sin_f32(filter[2].cutoff_1*0.006)    ;
 8003116:	4b56      	ldr	r3, [pc, #344]	; (8003270 <sampling+0x10e8>)
 8003118:	7c1b      	ldrb	r3, [r3, #16]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fae0 	bl	80006e0 <__aeabi_i2d>
 8003120:	a34b      	add	r3, pc, #300	; (adr r3, 8003250 <sampling+0x10c8>)
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f7fd f85f 	bl	80001e8 <__aeabi_dmul>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	f7fd fb5f 	bl	80007f4 <__aeabi_d2f>
 8003136:	4603      	mov	r3, r0
 8003138:	ee00 3a10 	vmov	s0, r3
 800313c:	f00a f9a8 	bl	800d490 <arm_sin_f32>
 8003140:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
	freq_pointer[2] [sampling_position] =1-freq_temp ; // filter lfos
 8003144:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <sampling+0x10ec>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314c:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8003150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003154:	4a48      	ldr	r2, [pc, #288]	; (8003278 <sampling+0x10f0>)
 8003156:	3312      	adds	r3, #18
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	edc3 7a00 	vstr	s15, [r3]
	 freq_temp=arm_sin_f32(filter[3].cutoff_1*0.006)    ;
 8003160:	4b43      	ldr	r3, [pc, #268]	; (8003270 <sampling+0x10e8>)
 8003162:	7e1b      	ldrb	r3, [r3, #24]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fabb 	bl	80006e0 <__aeabi_i2d>
 800316a:	a339      	add	r3, pc, #228	; (adr r3, 8003250 <sampling+0x10c8>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f83a 	bl	80001e8 <__aeabi_dmul>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7fd fb3a 	bl	80007f4 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
 8003182:	ee00 3a10 	vmov	s0, r3
 8003186:	f00a f983 	bl	800d490 <arm_sin_f32>
 800318a:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
	freq_pointer[3] [sampling_position] =1-freq_temp ; // filter lfos
 800318e:	4b39      	ldr	r3, [pc, #228]	; (8003274 <sampling+0x10ec>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003196:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 800319a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319e:	4a36      	ldr	r2, [pc, #216]	; (8003278 <sampling+0x10f0>)
 80031a0:	331b      	adds	r3, #27
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	edc3 7a00 	vstr	s15, [r3]

	}

	if(ADSR[0].release)       note[0].velocity=ADSR[0].buffer[sampling_position]>>2;   // disables LFO on release set to 0
 80031aa:	4b34      	ldr	r3, [pc, #208]	; (800327c <sampling+0x10f4>)
 80031ac:	78db      	ldrb	r3, [r3, #3]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <sampling+0x1044>
 80031b2:	4b30      	ldr	r3, [pc, #192]	; (8003274 <sampling+0x10ec>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4a31      	ldr	r2, [pc, #196]	; (800327c <sampling+0x10f4>)
 80031b8:	3304      	adds	r3, #4
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80031c2:	109b      	asrs	r3, r3, #2
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <sampling+0x10f8>)
 80031ca:	71da      	strb	r2, [r3, #7]
	if(ADSR[1].release)       note[1].velocity=ADSR[1].buffer[sampling_position]>>2;
 80031cc:	4b2b      	ldr	r3, [pc, #172]	; (800327c <sampling+0x10f4>)
 80031ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <sampling+0x1068>
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <sampling+0x10ec>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	4a28      	ldr	r2, [pc, #160]	; (800327c <sampling+0x10f4>)
 80031dc:	3313      	adds	r3, #19
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80031e6:	109b      	asrs	r3, r3, #2
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <sampling+0x10f8>)
 80031ee:	75da      	strb	r2, [r3, #23]
	if(ADSR[2].release)       note[2].velocity=ADSR[2].buffer[sampling_position]>>2;
 80031f0:	4b22      	ldr	r3, [pc, #136]	; (800327c <sampling+0x10f4>)
 80031f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <sampling+0x108e>
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <sampling+0x10ec>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4a1f      	ldr	r2, [pc, #124]	; (800327c <sampling+0x10f4>)
 8003200:	3322      	adds	r3, #34	; 0x22
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800320a:	109b      	asrs	r3, r3, #2
 800320c:	b21b      	sxth	r3, r3
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <sampling+0x10f8>)
 8003212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if(ADSR[3].release)       note[3].velocity=ADSR[3].buffer[sampling_position]>>2;
 8003216:	4b19      	ldr	r3, [pc, #100]	; (800327c <sampling+0x10f4>)
 8003218:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <sampling+0x10b4>
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <sampling+0x10ec>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <sampling+0x10f4>)
 8003226:	3331      	adds	r3, #49	; 0x31
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003230:	109b      	asrs	r3, r3, #2
 8003232:	b21b      	sxth	r3, r3
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <sampling+0x10f8>)
 8003238:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	//if(ADSR[4].release)       note[4].velocity=ADSR[4].buffer[sampling_position]>>2;


	if (note[0].velocity)   sample_accus[0] = sample_accus[0] + sample_counts_temp[20];  else sample_accus[0]=200000;// normal adder full volume
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <sampling+0x10f8>)
 800323e:	79db      	ldrb	r3, [r3, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d02a      	beq.n	800329a <sampling+0x1112>
 8003244:	e01e      	b.n	8003284 <sampling+0x10fc>
 8003246:	bf00      	nop
 8003248:	f9378ee3 	.word	0xf9378ee3
 800324c:	3f793a2d 	.word	0x3f793a2d
 8003250:	bc6a7efa 	.word	0xbc6a7efa
 8003254:	3f789374 	.word	0x3f789374
 8003258:	20008edc 	.word	0x20008edc
 800325c:	200129d9 	.word	0x200129d9
 8003260:	200129d8 	.word	0x200129d8
 8003264:	200096b2 	.word	0x200096b2
 8003268:	2001258a 	.word	0x2001258a
 800326c:	20011d6c 	.word	0x20011d6c
 8003270:	20008ebc 	.word	0x20008ebc
 8003274:	2000e0b0 	.word	0x2000e0b0
 8003278:	2000bf80 	.word	0x2000bf80
 800327c:	2000d05c 	.word	0x2000d05c
 8003280:	20008e1c 	.word	0x20008e1c
 8003284:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003288:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800328c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8003290:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003298:	e002      	b.n	80032a0 <sampling+0x1118>
 800329a:	4b96      	ldr	r3, [pc, #600]	; (80034f4 <sampling+0x136c>)
 800329c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		sample_accus[1] = sample_accus[1] + sample_counts_temp[21];
 80032a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a4:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80032a8:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80032ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80032ae:	4413      	add	r3, r2
 80032b0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		sample_accus[2] = sample_accus[2] + sample_counts_temp[22]; // bouncing somewhere
 80032b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80032b8:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80032bc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80032c0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80032c2:	4413      	add	r3, r2
 80032c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
		sample_accus[3] = sample_accus[3] + sample_counts_temp[23];  // 6 cycles
 80032c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032cc:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 80032d0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80032d4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80032d6:	4413      	add	r3, r2
 80032d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

			if (sample_accus[0]>524287) {sample_accus[0] =-0-sample_accus[0] ; } // faster >  than &  ,strange,  or is even worse
 80032dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032e4:	db04      	blt.n	80032f0 <sampling+0x1168>
 80032e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ea:	425b      	negs	r3, r3
 80032ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			if (sample_accus[1]>524287) {sample_accus[1] =-0-sample_accus[1] ;}// faster >  than &  ,strange
 80032f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80032f8:	db04      	blt.n	8003304 <sampling+0x117c>
 80032fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032fe:	425b      	negs	r3, r3
 8003300:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
			if (sample_accus[2]>524287) {sample_accus[2] =-0-sample_accus[2] ;} //
 8003304:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800330c:	db04      	blt.n	8003318 <sampling+0x1190>
 800330e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003312:	425b      	negs	r3, r3
 8003314:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			if (sample_accus[3]>524287) {sample_accus[3] =-0-sample_accus[3] ;} //  6 cycles
 8003318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800331c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003320:	db04      	blt.n	800332c <sampling+0x11a4>
 8003322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003326:	425b      	negs	r3, r3
 8003328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

		//	if (note[0].velocity==0) sample_accus[0]=200000;



			sample_Accu[0]=(abs(sample_accus[0])-262144)<<1;
 800332c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003330:	2b00      	cmp	r3, #0
 8003332:	bfb8      	it	lt
 8003334:	425b      	neglt	r3, r3
 8003336:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			sample_Accu[1]=(abs(sample_accus[1])-262144)<<1;
 8003340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003344:	2b00      	cmp	r3, #0
 8003346:	bfb8      	it	lt
 8003348:	425b      	neglt	r3, r3
 800334a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			sample_Accu[2]=(abs(sample_accus[2])-262144)<<1;
 8003354:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	bfb8      	it	lt
 800335c:	425b      	neglt	r3, r3
 800335e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
			sample_Accu[3]=(abs(sample_accus[3])-262144)<<1;
 8003368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800336c:	2b00      	cmp	r3, #0
 800336e:	bfb8      	it	lt
 8003370:	425b      	neglt	r3, r3
 8003372:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc





			sample_temp1=(*osc_pointers[0])*note[0].velocity;
 800337c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8003380:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <sampling+0x1370>)
 800338a:	79d2      	ldrb	r2, [r2, #7]
 800338c:	fb02 f303 	mul.w	r3, r2, r3
 8003390:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		//	sample_temp1=(*osc_pointers[0])*note[0].velocity;// needs cut a bit  maybe some diff vol settings
					sample_temp2=(sample_temp1)>>2;
 8003394:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003398:	109b      	asrs	r3, r3, #2
 800339a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

							sample_temp1=(*osc_pointers[1])*note[1].velocity; // needs cut a bit  ,default 20bit
 800339e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a53      	ldr	r2, [pc, #332]	; (80034f8 <sampling+0x1370>)
 80033ac:	7dd2      	ldrb	r2, [r2, #23]
 80033ae:	fb02 f303 	mul.w	r3, r2, r3
 80033b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
					sample_temp3=sample_temp1>>2; // 20+8
 80033b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80033ba:	109b      	asrs	r3, r3, #2
 80033bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


							sample_temp1=(*osc_pointers[2])*note[2].velocity;      // needs some gain fine tune !
 80033c0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033c4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a4a      	ldr	r2, [pc, #296]	; (80034f8 <sampling+0x1370>)
 80033ce:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
					sample_temp4 =sample_temp1>>2;    // 64 default 20+8
 80033da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80033de:	109b      	asrs	r3, r3, #2
 80033e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

		//	{sample_Accu[9]=sample_input;sample_Accu[8]=sample_input;sample_Accu[7]=sample_input;sample_Accu[6]=sample_input;}
					//if (note[3].position) sample_Accu[9]=(ram_temp+sample_Accu[9])>>1; // bit hot , also  add avr

					sample_temp1=(*osc_pointers[3])*	note[3].velocity;  // sine out is 16bit, add 4 then 16+8
 80033e4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80033e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <sampling+0x1370>)
 80033f2:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
					   // no envelope for smple
					if (soft_mute)  sample_temp6=(*osc_pointers[4])* (256-(i>>1));  else     sample_temp6=(*osc_pointers[4])*note[4].velocity;   // not heavy
 80033fe:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 8003402:	2b00      	cmp	r3, #0
 8003404:	d010      	beq.n	8003428 <sampling+0x12a0>
 8003406:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800340a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3a      	ldr	r2, [pc, #232]	; (80034fc <sampling+0x1374>)
 8003414:	8812      	ldrh	r2, [r2, #0]
 8003416:	0852      	lsrs	r2, r2, #1
 8003418:	b292      	uxth	r2, r2
 800341a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8003426:	e00c      	b.n	8003442 <sampling+0x12ba>
 8003428:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800342c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a30      	ldr	r2, [pc, #192]	; (80034f8 <sampling+0x1370>)
 8003436:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

					sample_temp5 =sample_temp1>>2;
 8003442:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003446:	109b      	asrs	r3, r3, #2
 8003448:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	play_holder0[i]=sample_temp2;  // write to bank
 800344c:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <sampling+0x1374>)
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <sampling+0x1378>)
 8003454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003458:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder1[i]=sample_temp3;
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <sampling+0x1374>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	4619      	mov	r1, r3
 8003462:	4a28      	ldr	r2, [pc, #160]	; (8003504 <sampling+0x137c>)
 8003464:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003468:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder2[i]=sample_temp4;
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <sampling+0x1374>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	4a25      	ldr	r2, [pc, #148]	; (8003508 <sampling+0x1380>)
 8003474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003478:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder3[i]=sample_temp5;
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <sampling+0x1374>)
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	4a22      	ldr	r2, [pc, #136]	; (800350c <sampling+0x1384>)
 8003484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003488:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	play_holder4[i]=sample_temp6;  // clean output , samples
 800348c:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <sampling+0x1374>)
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	4619      	mov	r1, r3
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <sampling+0x1388>)
 8003494:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8003498:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators
 800349c:	4b17      	ldr	r3, [pc, #92]	; (80034fc <sampling+0x1374>)
 800349e:	881b      	ldrh	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	4b15      	ldr	r3, [pc, #84]	; (80034fc <sampling+0x1374>)
 80034a6:	801a      	strh	r2, [r3, #0]
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <sampling+0x1374>)
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b0:	f4ff acda 	bcc.w	8002e68 <sampling+0xce0>
	} // end of osc , doing some sound

				//		    if(note[3].position)		sine_counter[9]=sine_counter[9]+256;  // count up when on

    memcpy(&sample_accus_hold,sample_accus,16);
 80034b4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80034b8:	2210      	movs	r2, #16
 80034ba:	4619      	mov	r1, r3
 80034bc:	4815      	ldr	r0, [pc, #84]	; (8003514 <sampling+0x138c>)
 80034be:	f00a f859 	bl	800d574 <memcpy>
    memcpy(&sample_accu_counter,accu_count,8);   // copy back
 80034c2:	4915      	ldr	r1, [pc, #84]	; (8003518 <sampling+0x1390>)
 80034c4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80034c8:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 80034cc:	460b      	mov	r3, r1
 80034ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034d2:	e883 0003 	stmia.w	r3, {r0, r1}
    memcpy(&sample_counts_holder,sample_counts_temp,80);
 80034d6:	4a11      	ldr	r2, [pc, #68]	; (800351c <sampling+0x1394>)
 80034d8:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 80034dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	2350      	movs	r3, #80	; 0x50
 80034e6:	461a      	mov	r2, r3
 80034e8:	f00a f844 	bl	800d574 <memcpy>
    int32_t filter_Accu2;

    //uint16_t* click=&input_holder[0];


			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 80034ec:	4b03      	ldr	r3, [pc, #12]	; (80034fc <sampling+0x1374>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	e2c8      	b.n	8003a86 <sampling+0x18fe>
 80034f4:	00030d40 	.word	0x00030d40
 80034f8:	20008e1c 	.word	0x20008e1c
 80034fc:	200096b2 	.word	0x200096b2
 8003500:	2000f8b4 	.word	0x2000f8b4
 8003504:	2000e0b4 	.word	0x2000e0b4
 8003508:	2000e8b4 	.word	0x2000e8b4
 800350c:	2000f0b4 	.word	0x2000f0b4
 8003510:	200100b4 	.word	0x200100b4
 8003514:	2000bec8 	.word	0x2000bec8
 8003518:	2000942c 	.word	0x2000942c
 800351c:	200093dc 	.word	0x200093dc
				i_total=i+sample_pointB;
 8003520:	4bc2      	ldr	r3, [pc, #776]	; (800382c <sampling+0x16a4>)
 8003522:	881a      	ldrh	r2, [r3, #0]
 8003524:	4bc2      	ldr	r3, [pc, #776]	; (8003830 <sampling+0x16a8>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	4413      	add	r3, r2
 800352a:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144

			sampling_position=(i>>6);
 800352e:	4bbf      	ldr	r3, [pc, #764]	; (800382c <sampling+0x16a4>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	b29b      	uxth	r3, r3
 8003536:	b2da      	uxtb	r2, r3
 8003538:	4bbe      	ldr	r3, [pc, #760]	; (8003834 <sampling+0x16ac>)
 800353a:	701a      	strb	r2, [r3, #0]
			// filter 1


			phase_bank0[i&31]= sample_Accu[0]=play_holder0[i];
 800353c:	4bbb      	ldr	r3, [pc, #748]	; (800382c <sampling+0x16a4>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	4bbd      	ldr	r3, [pc, #756]	; (8003838 <sampling+0x16b0>)
 8003544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800354c:	4bb7      	ldr	r3, [pc, #732]	; (800382c <sampling+0x16a4>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003558:	49b8      	ldr	r1, [pc, #736]	; (800383c <sampling+0x16b4>)
 800355a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank1[i&31]=sample_Accu[1]=play_holder1[i] ; // saw
 800355e:	4bb3      	ldr	r3, [pc, #716]	; (800382c <sampling+0x16a4>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	461a      	mov	r2, r3
 8003564:	4bb6      	ldr	r3, [pc, #728]	; (8003840 <sampling+0x16b8>)
 8003566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800356e:	4baf      	ldr	r3, [pc, #700]	; (800382c <sampling+0x16a4>)
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800357a:	49b2      	ldr	r1, [pc, #712]	; (8003844 <sampling+0x16bc>)
 800357c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank2[i&31]=sample_Accu[2]=play_holder2[i];  // sine input
 8003580:	4baa      	ldr	r3, [pc, #680]	; (800382c <sampling+0x16a4>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4bb0      	ldr	r3, [pc, #704]	; (8003848 <sampling+0x16c0>)
 8003588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003590:	4ba6      	ldr	r3, [pc, #664]	; (800382c <sampling+0x16a4>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800359c:	49ab      	ldr	r1, [pc, #684]	; (800384c <sampling+0x16c4>)
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			phase_bank3[i&31]=sample_Accu[3]=play_holder3[i] ;
 80035a2:	4ba2      	ldr	r3, [pc, #648]	; (800382c <sampling+0x16a4>)
 80035a4:	881b      	ldrh	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	4ba9      	ldr	r3, [pc, #676]	; (8003850 <sampling+0x16c8>)
 80035aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80035b2:	4b9e      	ldr	r3, [pc, #632]	; (800382c <sampling+0x16a4>)
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80035be:	49a5      	ldr	r1, [pc, #660]	; (8003854 <sampling+0x16cc>)
 80035c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			sample_Accu[4]=play_holder4[i];
 80035c4:	4b99      	ldr	r3, [pc, #612]	; (800382c <sampling+0x16a4>)
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4ba3      	ldr	r3, [pc, #652]	; (8003858 <sampling+0x16d0>)
 80035cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

	if (filter[0].resonance)	sample_Accu[0]=(sample_Accu[0]>>1)+(phase_bank0[  ((i&31)+(31-(filter[0].resonance&31)))&31]>>1); // PHASER
 80035d4:	4ba1      	ldr	r3, [pc, #644]	; (800385c <sampling+0x16d4>)
 80035d6:	789b      	ldrb	r3, [r3, #2]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d012      	beq.n	8003602 <sampling+0x147a>
 80035dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035e0:	105a      	asrs	r2, r3, #1
 80035e2:	4b92      	ldr	r3, [pc, #584]	; (800382c <sampling+0x16a4>)
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	4619      	mov	r1, r3
 80035e8:	4b9c      	ldr	r3, [pc, #624]	; (800385c <sampling+0x16d4>)
 80035ea:	789b      	ldrb	r3, [r3, #2]
 80035ec:	1acb      	subs	r3, r1, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	4991      	ldr	r1, [pc, #580]	; (800383c <sampling+0x16b4>)
 80035f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035fa:	105b      	asrs	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	if (filter[1].resonance)	sample_Accu[1]=(sample_Accu[1]>>1)+(phase_bank1[  ((i&31)+(31-(filter[1].resonance&31)))&31]>>1);
 8003602:	4b96      	ldr	r3, [pc, #600]	; (800385c <sampling+0x16d4>)
 8003604:	7a9b      	ldrb	r3, [r3, #10]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d012      	beq.n	8003630 <sampling+0x14a8>
 800360a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800360e:	105a      	asrs	r2, r3, #1
 8003610:	4b86      	ldr	r3, [pc, #536]	; (800382c <sampling+0x16a4>)
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	4b91      	ldr	r3, [pc, #580]	; (800385c <sampling+0x16d4>)
 8003618:	7a9b      	ldrb	r3, [r3, #10]
 800361a:	1acb      	subs	r3, r1, r3
 800361c:	3b01      	subs	r3, #1
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	4988      	ldr	r1, [pc, #544]	; (8003844 <sampling+0x16bc>)
 8003624:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003628:	105b      	asrs	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	if (filter[2].resonance)	sample_Accu[2]=(sample_Accu[2]>>1)+(phase_bank2[  ((i&31)+(31-(filter[2].resonance&31)))&31]>>1);
 8003630:	4b8a      	ldr	r3, [pc, #552]	; (800385c <sampling+0x16d4>)
 8003632:	7c9b      	ldrb	r3, [r3, #18]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d012      	beq.n	800365e <sampling+0x14d6>
 8003638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800363c:	105a      	asrs	r2, r3, #1
 800363e:	4b7b      	ldr	r3, [pc, #492]	; (800382c <sampling+0x16a4>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	4b85      	ldr	r3, [pc, #532]	; (800385c <sampling+0x16d4>)
 8003646:	7c9b      	ldrb	r3, [r3, #18]
 8003648:	1acb      	subs	r3, r1, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	497e      	ldr	r1, [pc, #504]	; (800384c <sampling+0x16c4>)
 8003652:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003656:	105b      	asrs	r3, r3, #1
 8003658:	4413      	add	r3, r2
 800365a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (filter[3].resonance)	sample_Accu[3]=(sample_Accu[3]>>1)+(phase_bank3[  ((i&31)+(31-(filter[3].resonance&31)))&31]>>1);
 800365e:	4b7f      	ldr	r3, [pc, #508]	; (800385c <sampling+0x16d4>)
 8003660:	7e9b      	ldrb	r3, [r3, #26]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <sampling+0x1504>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	105a      	asrs	r2, r3, #1
 800366c:	4b6f      	ldr	r3, [pc, #444]	; (800382c <sampling+0x16a4>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	4619      	mov	r1, r3
 8003672:	4b7a      	ldr	r3, [pc, #488]	; (800385c <sampling+0x16d4>)
 8003674:	7e9b      	ldrb	r3, [r3, #26]
 8003676:	1acb      	subs	r3, r1, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	4975      	ldr	r1, [pc, #468]	; (8003854 <sampling+0x16cc>)
 8003680:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003684:	105b      	asrs	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	// this section is about 100 tmr cycles
			if ((i&63)==0){frq_point();
 800368c:	4b67      	ldr	r3, [pc, #412]	; (800382c <sampling+0x16a4>)
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <sampling+0x1514>
 8003698:	f000 fca6 	bl	8003fe8 <frq_point>


   // vol lfo


		filter_accus[1]=sample_Accu[0]; // saw
 800369c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036a0:	ee07 3a90 	vmov	s15, r3
 80036a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036a8:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <sampling+0x16d8>)
 80036aa:	edc3 7a01 	vstr	s15, [r3, #4]
		filter_accus[1]=filter_accus[1]-(filter_accus[3]*filter_res[0]);
 80036ae:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <sampling+0x16d8>)
 80036b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80036b4:	4b6a      	ldr	r3, [pc, #424]	; (8003860 <sampling+0x16d8>)
 80036b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80036ba:	4b6a      	ldr	r3, [pc, #424]	; (8003864 <sampling+0x16dc>)
 80036bc:	edd3 7a00 	vldr	s15, [r3]
 80036c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c8:	4b65      	ldr	r3, [pc, #404]	; (8003860 <sampling+0x16d8>)
 80036ca:	edc3 7a01 	vstr	s15, [r3, #4]

		filter_accus[2]=(filter_accus[1]*freq_point[0])+(filter_accus[2]*freq_point[1]);      //short=fast , adding makes it slower
 80036ce:	4b64      	ldr	r3, [pc, #400]	; (8003860 <sampling+0x16d8>)
 80036d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80036d4:	4b64      	ldr	r3, [pc, #400]	; (8003868 <sampling+0x16e0>)
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036de:	4b60      	ldr	r3, [pc, #384]	; (8003860 <sampling+0x16d8>)
 80036e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80036e4:	4b60      	ldr	r3, [pc, #384]	; (8003868 <sampling+0x16e0>)
 80036e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80036ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	4b5b      	ldr	r3, [pc, #364]	; (8003860 <sampling+0x16d8>)
 80036f4:	edc3 7a02 	vstr	s15, [r3, #8]
		filter_accus[3]=(filter_accus[2]*freq_point[0])+(filter_accus[3]*freq_point[1]);			// int32 after conversions is no quicker
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <sampling+0x16d8>)
 80036fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80036fe:	4b5a      	ldr	r3, [pc, #360]	; (8003868 <sampling+0x16e0>)
 8003700:	edd3 7a00 	vldr	s15, [r3]
 8003704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003708:	4b55      	ldr	r3, [pc, #340]	; (8003860 <sampling+0x16d8>)
 800370a:	edd3 6a03 	vldr	s13, [r3, #12]
 800370e:	4b56      	ldr	r3, [pc, #344]	; (8003868 <sampling+0x16e0>)
 8003710:	edd3 7a01 	vldr	s15, [r3, #4]
 8003714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <sampling+0x16d8>)
 800371e:	edc3 7a03 	vstr	s15, [r3, #12]
		sample_Accu[0]=filter_accus[3];
 8003722:	4b4f      	ldr	r3, [pc, #316]	; (8003860 <sampling+0x16d8>)
 8003724:	edd3 7a03 	vldr	s15, [r3, #12]
 8003728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800372c:	ee17 3a90 	vmov	r3, s15
 8003730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

	//	sample_Accu[3]=play_holder2[i] >>5;
		filter_accus[4]=sample_Accu[1];
 8003734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003740:	4b47      	ldr	r3, [pc, #284]	; (8003860 <sampling+0x16d8>)
 8003742:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[4]=filter_accus[4]-(filter_accus[6]*filter_res[1]);
 8003746:	4b46      	ldr	r3, [pc, #280]	; (8003860 <sampling+0x16d8>)
 8003748:	ed93 7a04 	vldr	s14, [r3, #16]
 800374c:	4b44      	ldr	r3, [pc, #272]	; (8003860 <sampling+0x16d8>)
 800374e:	edd3 6a06 	vldr	s13, [r3, #24]
 8003752:	4b44      	ldr	r3, [pc, #272]	; (8003864 <sampling+0x16dc>)
 8003754:	edd3 7a01 	vldr	s15, [r3, #4]
 8003758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003760:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <sampling+0x16d8>)
 8003762:	edc3 7a04 	vstr	s15, [r3, #16]
		filter_accus[5]=(filter_accus[4]*freq_point[2])+(filter_accus[5]*freq_point[3]);   // 30 cyles for 2 poles
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <sampling+0x16d8>)
 8003768:	ed93 7a04 	vldr	s14, [r3, #16]
 800376c:	4b3e      	ldr	r3, [pc, #248]	; (8003868 <sampling+0x16e0>)
 800376e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003776:	4b3a      	ldr	r3, [pc, #232]	; (8003860 <sampling+0x16d8>)
 8003778:	edd3 6a05 	vldr	s13, [r3, #20]
 800377c:	4b3a      	ldr	r3, [pc, #232]	; (8003868 <sampling+0x16e0>)
 800377e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <sampling+0x16d8>)
 800378c:	edc3 7a05 	vstr	s15, [r3, #20]
		filter_accus[6]=(filter_accus[5]*freq_point[2])+(filter_accus[6]*freq_point[3]);
 8003790:	4b33      	ldr	r3, [pc, #204]	; (8003860 <sampling+0x16d8>)
 8003792:	ed93 7a05 	vldr	s14, [r3, #20]
 8003796:	4b34      	ldr	r3, [pc, #208]	; (8003868 <sampling+0x16e0>)
 8003798:	edd3 7a02 	vldr	s15, [r3, #8]
 800379c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a0:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <sampling+0x16d8>)
 80037a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80037a6:	4b30      	ldr	r3, [pc, #192]	; (8003868 <sampling+0x16e0>)
 80037a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80037ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <sampling+0x16d8>)
 80037b6:	edc3 7a06 	vstr	s15, [r3, #24]
		sample_Accu[1]=filter_accus[6];
 80037ba:	4b29      	ldr	r3, [pc, #164]	; (8003860 <sampling+0x16d8>)
 80037bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80037c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c4:	ee17 3a90 	vmov	r3, s15
 80037c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

		filter_accus[7]=sample_Accu[2];
 80037cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <sampling+0x16d8>)
 80037da:	edc3 7a07 	vstr	s15, [r3, #28]
		filter_accus[7]=filter_accus[7]-(filter_accus[9]*filter_res[2]);  // resonance
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <sampling+0x16d8>)
 80037e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <sampling+0x16d8>)
 80037e6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <sampling+0x16dc>)
 80037ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80037f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <sampling+0x16d8>)
 80037fa:	edc3 7a07 	vstr	s15, [r3, #28]
				filter_accus[8]=(filter_accus[7]*freq_point[4])+(filter_accus[8]*freq_point[5]);   // 30 cyles for 2 poles
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <sampling+0x16d8>)
 8003800:	ed93 7a07 	vldr	s14, [r3, #28]
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <sampling+0x16e0>)
 8003806:	edd3 7a04 	vldr	s15, [r3, #16]
 800380a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800380e:	4b14      	ldr	r3, [pc, #80]	; (8003860 <sampling+0x16d8>)
 8003810:	edd3 6a08 	vldr	s13, [r3, #32]
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <sampling+0x16e0>)
 8003816:	edd3 7a05 	vldr	s15, [r3, #20]
 800381a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800381e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <sampling+0x16d8>)
 8003824:	edc3 7a08 	vstr	s15, [r3, #32]
 8003828:	e020      	b.n	800386c <sampling+0x16e4>
 800382a:	bf00      	nop
 800382c:	200096b2 	.word	0x200096b2
 8003830:	200096b0 	.word	0x200096b0
 8003834:	2000e0b0 	.word	0x2000e0b0
 8003838:	2000f8b4 	.word	0x2000f8b4
 800383c:	20011af4 	.word	0x20011af4
 8003840:	2000e0b4 	.word	0x2000e0b4
 8003844:	20011b74 	.word	0x20011b74
 8003848:	2000e8b4 	.word	0x2000e8b4
 800384c:	20011bf4 	.word	0x20011bf4
 8003850:	2000f0b4 	.word	0x2000f0b4
 8003854:	20011c74 	.word	0x20011c74
 8003858:	200100b4 	.word	0x200100b4
 800385c:	20008ebc 	.word	0x20008ebc
 8003860:	2000bf24 	.word	0x2000bf24
 8003864:	2000bf10 	.word	0x2000bf10
 8003868:	2000bf60 	.word	0x2000bf60
				filter_accus[9]=(filter_accus[8]*freq_point[4])+(filter_accus[9]*freq_point[5]);
 800386c:	4baf      	ldr	r3, [pc, #700]	; (8003b2c <sampling+0x19a4>)
 800386e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003872:	4baf      	ldr	r3, [pc, #700]	; (8003b30 <sampling+0x19a8>)
 8003874:	edd3 7a04 	vldr	s15, [r3, #16]
 8003878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387c:	4bab      	ldr	r3, [pc, #684]	; (8003b2c <sampling+0x19a4>)
 800387e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8003882:	4bab      	ldr	r3, [pc, #684]	; (8003b30 <sampling+0x19a8>)
 8003884:	edd3 7a05 	vldr	s15, [r3, #20]
 8003888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800388c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003890:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <sampling+0x19a4>)
 8003892:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				sample_Accu[2]=filter_accus[9];
 8003896:	4ba5      	ldr	r3, [pc, #660]	; (8003b2c <sampling+0x19a4>)
 8003898:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800389c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038a0:	ee17 3a90 	vmov	r3, s15
 80038a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

				filter_accus[10]=sample_Accu[3];
 80038a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038ac:	ee07 3a90 	vmov	s15, r3
 80038b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b4:	4b9d      	ldr	r3, [pc, #628]	; (8003b2c <sampling+0x19a4>)
 80038b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				filter_accus[10]=filter_accus[10]-(filter_accus[12]*filter_res[3]);
 80038ba:	4b9c      	ldr	r3, [pc, #624]	; (8003b2c <sampling+0x19a4>)
 80038bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80038c0:	4b9a      	ldr	r3, [pc, #616]	; (8003b2c <sampling+0x19a4>)
 80038c2:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80038c6:	4b9b      	ldr	r3, [pc, #620]	; (8003b34 <sampling+0x19ac>)
 80038c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80038cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d4:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <sampling+0x19a4>)
 80038d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						filter_accus[11]=(filter_accus[10]*freq_point[6])+(filter_accus[11]*freq_point[7]);   // 30 cyles for 2 poles
 80038da:	4b94      	ldr	r3, [pc, #592]	; (8003b2c <sampling+0x19a4>)
 80038dc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80038e0:	4b93      	ldr	r3, [pc, #588]	; (8003b30 <sampling+0x19a8>)
 80038e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80038e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ea:	4b90      	ldr	r3, [pc, #576]	; (8003b2c <sampling+0x19a4>)
 80038ec:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80038f0:	4b8f      	ldr	r3, [pc, #572]	; (8003b30 <sampling+0x19a8>)
 80038f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80038f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fe:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <sampling+0x19a4>)
 8003900:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						filter_accus[12]=(filter_accus[11]*freq_point[6])+(filter_accus[12]*freq_point[7]);
 8003904:	4b89      	ldr	r3, [pc, #548]	; (8003b2c <sampling+0x19a4>)
 8003906:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800390a:	4b89      	ldr	r3, [pc, #548]	; (8003b30 <sampling+0x19a8>)
 800390c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003914:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <sampling+0x19a4>)
 8003916:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800391a:	4b85      	ldr	r3, [pc, #532]	; (8003b30 <sampling+0x19a8>)
 800391c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003928:	4b80      	ldr	r3, [pc, #512]	; (8003b2c <sampling+0x19a4>)
 800392a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						sample_Accu[3]=filter_accus[12];
 800392e:	4b7f      	ldr	r3, [pc, #508]	; (8003b2c <sampling+0x19a4>)
 8003930:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003938:	ee17 3a90 	vmov	r3, s15
 800393c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	//	filter_accus[11]=filter_accus[5]; //write back new value
		//sample_Accu[0] =sample_Accu[1];

				//sample_Accu[0]=(sample_Accu[0]>>2)+(play_holder0[(i+550)&511]>>2);   // just need 7 samples for aphaser at 500 hz

		filter_Accu=filter_Accu2=0;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003946:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800394a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		//if  (record_output)  {
		filter_Accu = (sample_Accu[0]+sample_Accu[1]+sample_Accu[2]+sample_Accu[3] +sample_Accu[4])>>10 ;
 800394e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003956:	441a      	add	r2, r3
 8003958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800395c:	441a      	add	r2, r3
 800395e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003962:	441a      	add	r2, r3
 8003964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003968:	4413      	add	r3, r2
 800396a:	129b      	asrs	r3, r3, #10
 800396c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		filter_Accu =filter_Accu+32767;
 8003970:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003974:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8003978:	337f      	adds	r3, #127	; 0x7f
 800397a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

		  debug_value=filter_Accu;
 800397e:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <sampling+0x19b0>)
 8003980:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003984:	6013      	str	r3, [r2, #0]
		output_mix[(i&510)+1]=(filter_Accu>>8) &255;
 8003986:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800398a:	121a      	asrs	r2, r3, #8
 800398c:	4b6b      	ldr	r3, [pc, #428]	; (8003b3c <sampling+0x19b4>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003994:	3301      	adds	r3, #1
 8003996:	b2d1      	uxtb	r1, r2
 8003998:	4a69      	ldr	r2, [pc, #420]	; (8003b40 <sampling+0x19b8>)
 800399a:	54d1      	strb	r1, [r2, r3]
		output_mix[(i&510)]=filter_Accu&255;
 800399c:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <sampling+0x19b4>)
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80039a4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80039a8:	b2d1      	uxtb	r1, r2
 80039aa:	4a65      	ldr	r2, [pc, #404]	; (8003b40 <sampling+0x19b8>)
 80039ac:	54d1      	strb	r1, [r2, r3]


	//	}

		filter_Accu=(sample_Accu[0]+sample_Accu[1])>>16;
 80039ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039b6:	4413      	add	r3, r2
 80039b8:	141b      	asrs	r3, r3, #16
 80039ba:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174



		filter_Accu2=(sample_Accu[2]+sample_Accu[3]+sample_Accu[4])>>16; //filter + drum out
 80039be:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80039c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c6:	441a      	add	r2, r3
 80039c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039cc:	4413      	add	r3, r2
 80039ce:	141b      	asrs	r3, r3, #16
 80039d0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
		//filter_Accu=play_holder0[i];


		 if (one_shot!=199)   one_shot++;  //play one attack then stop
 80039d4:	4b5b      	ldr	r3, [pc, #364]	; (8003b44 <sampling+0x19bc>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2bc7      	cmp	r3, #199	; 0xc7
 80039da:	d005      	beq.n	80039e8 <sampling+0x1860>
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <sampling+0x19bc>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3301      	adds	r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	4b57      	ldr	r3, [pc, #348]	; (8003b44 <sampling+0x19bc>)
 80039e6:	701a      	strb	r2, [r3, #0]

		 //if (filter_Accu>0xFFFF) {filter_Accu=0xFFFF;clipping++;} else if (filter_Accu<-65535) filter_Accu=-65535;  // limiter to 16 bits
		 if (filter_Accu>0x3FF) {filter_Accu=0x3FF;clipping++;} else if (filter_Accu<-1023) filter_Accu=-1023;  // limiter to 11 bits
 80039e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	db0a      	blt.n	8003a08 <sampling+0x1880>
 80039f2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80039f6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80039fa:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <sampling+0x19c0>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b51      	ldr	r3, [pc, #324]	; (8003b48 <sampling+0x19c0>)
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e007      	b.n	8003a18 <sampling+0x1890>
 8003a08:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003a0c:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003a10:	dc02      	bgt.n	8003a18 <sampling+0x1890>
 8003a12:	4b4e      	ldr	r3, [pc, #312]	; (8003b4c <sampling+0x19c4>)
 8003a14:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
		 if (filter_Accu2>0x3FF) {filter_Accu2=0x3FF;clipping++;} else if (filter_Accu2<-1023) filter_Accu2=-1023;  // limiter to 11 bits
 8003a18:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a20:	db0a      	blt.n	8003a38 <sampling+0x18b0>
 8003a22:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003a26:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003a2a:	4b47      	ldr	r3, [pc, #284]	; (8003b48 <sampling+0x19c0>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b45      	ldr	r3, [pc, #276]	; (8003b48 <sampling+0x19c0>)
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e007      	b.n	8003a48 <sampling+0x18c0>
 8003a38:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a3c:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8003a40:	dc02      	bgt.n	8003a48 <sampling+0x18c0>
 8003a42:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <sampling+0x19c4>)
 8003a44:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170



		 play_sample[(i_total<<1)]=(filter_Accu)+1023;   // final output disable for now 2544
 8003a48:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003a58:	b291      	uxth	r1, r2
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	; (8003b50 <sampling+0x19c8>)
 8003a5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		 play_sample[(i_total<<1)+1]=(filter_Accu2)+1023;
 8003a60:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	f8b7 3144 	ldrh.w	r3, [r7, #324]	; 0x144
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8003a72:	b291      	uxth	r1, r2
 8003a74:	4a36      	ldr	r2, [pc, #216]	; (8003b50 <sampling+0x19c8>)
 8003a76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (i=0;i<512;i++) {    // this should write 512 bytes , or about 15ms buffer ,oscillators , filters and final out ,slow 133
 8003a7a:	4b30      	ldr	r3, [pc, #192]	; (8003b3c <sampling+0x19b4>)
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <sampling+0x19b4>)
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <sampling+0x19b4>)
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a8e:	f4ff ad47 	bcc.w	8003520 <sampling+0x1398>
		} // end of filer


		//time_final=time_proc;   // in samples

		if (bank_write)   error_count++;  // if bank write is high it means too much stall here
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <sampling+0x19cc>)
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <sampling+0x1920>
 8003a9a:	4b2f      	ldr	r3, [pc, #188]	; (8003b58 <sampling+0x19d0>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	4b2c      	ldr	r3, [pc, #176]	; (8003b58 <sampling+0x19d0>)
 8003aa6:	801a      	strh	r2, [r3, #0]
		time_final[0]=time_proc;
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <sampling+0x19d4>)
 8003aaa:	881a      	ldrh	r2, [r3, #0]
 8003aac:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <sampling+0x19d8>)
 8003aae:	801a      	strh	r2, [r3, #0]
		if  (record_output)  record_output_to_RAM();
 8003ab0:	4b2c      	ldr	r3, [pc, #176]	; (8003b64 <sampling+0x19dc>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <sampling+0x1936>
 8003aba:	f001 fec7 	bl	800584c <record_output_to_RAM>

		  ram_sync_swap=0;
 8003abe:	4b2a      	ldr	r3, [pc, #168]	; (8003b68 <sampling+0x19e0>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]

		if     (sampler.acurrent_sample)  {sampler.start=(sampler.offset[sampler.acurrent_sample-1])<<10;  sampler.start_current=sampler.start;}		 // this works , start is always off by 256 from note start
 8003ac4:	4b29      	ldr	r3, [pc, #164]	; (8003b6c <sampling+0x19e4>)
 8003ac6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <sampling+0x1966>
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <sampling+0x19e4>)
 8003ad0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <sampling+0x19e4>)
 8003ad8:	5cd3      	ldrb	r3, [r2, r3]
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <sampling+0x19e4>)
 8003ae2:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <sampling+0x19e4>)
 8003ae6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <sampling+0x19e4>)
 8003aea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e



		    if (note[4].position) {sampler.ram_seq=sampler.start-(seq_pos>>1); note[4].position=0;	}  // start from note offset
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <sampling+0x19e8>)
 8003af0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00f      	beq.n	8003b18 <sampling+0x1990>
 8003af8:	4b1c      	ldr	r3, [pc, #112]	; (8003b6c <sampling+0x19e4>)
 8003afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <sampling+0x19ec>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <sampling+0x19e4>)
 8003b0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <sampling+0x19e8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


		    if     (sampler.acurrent_sample==0)  sampler_mute=1;    else sampler_mute=0;
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <sampling+0x19e4>)
 8003b1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d12c      	bne.n	8003b7c <sampling+0x19f4>
 8003b22:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <sampling+0x19f0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
 8003b28:	e02b      	b.n	8003b82 <sampling+0x19fa>
 8003b2a:	bf00      	nop
 8003b2c:	2000bf24 	.word	0x2000bf24
 8003b30:	2000bf60 	.word	0x2000bf60
 8003b34:	2000bf10 	.word	0x2000bf10
 8003b38:	20011d70 	.word	0x20011d70
 8003b3c:	200096b2 	.word	0x200096b2
 8003b40:	20012590 	.word	0x20012590
 8003b44:	2000bee0 	.word	0x2000bee0
 8003b48:	200108b4 	.word	0x200108b4
 8003b4c:	fffffc01 	.word	0xfffffc01
 8003b50:	200096b4 	.word	0x200096b4
 8003b54:	20008e16 	.word	0x20008e16
 8003b58:	2000ccae 	.word	0x2000ccae
 8003b5c:	2000ccac 	.word	0x2000ccac
 8003b60:	2000cca8 	.word	0x2000cca8
 8003b64:	2001258d 	.word	0x2001258d
 8003b68:	200129d9 	.word	0x200129d9
 8003b6c:	20008edc 	.word	0x20008edc
 8003b70:	20008e1c 	.word	0x20008e1c
 8003b74:	200096aa 	.word	0x200096aa
 8003b78:	200129d8 	.word	0x200129d8
 8003b7c:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <sampling+0x1aa0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]

		if ((sampler.ram_seq)>=16128)     {sampler.ram_seq=sampler.start; }      // just for playback counter , maybe finishing early will cause it to stop
 8003b82:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <sampling+0x1aa4>)
 8003b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b88:	f5b3 5f7c 	cmp.w	r3, #16128	; 0x3f00
 8003b8c:	d304      	bcc.n	8003b98 <sampling+0x1a10>
 8003b8e:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <sampling+0x1aa4>)
 8003b90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <sampling+0x1aa4>)
 8003b94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	//	sampler.length=sampler.end-sampler.start;
		if  ((sampler.acurrent_sample)    &&  (sampler.sample_select[sampler.acurrent_sample-1]==0)   )     ram_sync_swap=1;   // swap to RAM  from sample on 0 select  ,this should be started after last
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <sampling+0x1aa4>)
 8003b9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <sampling+0x1a32>
 8003ba2:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <sampling+0x1aa4>)
 8003ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	4a20      	ldr	r2, [pc, #128]	; (8003c2c <sampling+0x1aa4>)
 8003bac:	4413      	add	r3, r2
 8003bae:	7a1b      	ldrb	r3, [r3, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d102      	bne.n	8003bba <sampling+0x1a32>
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <sampling+0x1aa8>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
	//	if(sampler.trigger_position )  { sampler.ram_seq=sampler.start;note[3].position=1; }   // starts here not perfect , figure out better



		if(counter_16>127) counter_16=0;
 8003bba:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <sampling+0x1aac>)
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8003bc0:	d902      	bls.n	8003bc8 <sampling+0x1a40>
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <sampling+0x1aac>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	801a      	strh	r2, [r3, #0]

			  uint32_t sample_flash_address=((sampler.sample_select[sampler.acurrent_sample] *128)<<8)+((counter_16) <<8);  // change this soemthing mroe friendly , also keep last 64k for menus ,wavs maybe just before as well
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <sampling+0x1aa4>)
 8003bca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <sampling+0x1aa4>)
 8003bd2:	4413      	add	r3, r2
 8003bd4:	7a1b      	ldrb	r3, [r3, #8]
 8003bd6:	01db      	lsls	r3, r3, #7
 8003bd8:	021a      	lsls	r2, r3, #8
 8003bda:	4b16      	ldr	r3, [pc, #88]	; (8003c34 <sampling+0x1aac>)
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	4413      	add	r3, r2
 8003be2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c


			  if  (sampler.acurrent_sample)    sample_flash_address=((sampler.sample_select[sampler.acurrent_sample-1] *128)<<8)+((sampler.ram_seq>>8)<<9);  //let see , limited now with a 1k jumps or 31
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <sampling+0x1aa4>)
 8003be8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d011      	beq.n	8003c14 <sampling+0x1a8c>
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <sampling+0x1aa4>)
 8003bf2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <sampling+0x1aa4>)
 8003bfa:	4413      	add	r3, r2
 8003bfc:	7a1b      	ldrb	r3, [r3, #8]
 8003bfe:	01db      	lsls	r3, r3, #7
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <sampling+0x1aa4>)
 8003c04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c08:	0a1b      	lsrs	r3, r3, #8
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	025b      	lsls	r3, r3, #9
 8003c0e:	4413      	add	r3, r2
 8003c10:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
		//	  else  sample_flash_address=((sampler.sample_select[0] *128)<<8)+((sampler.ram_seq>>8)<<9);

			  sampler_1k_load(sample_flash_address);
 8003c14:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 8003c18:	f001 fcb0 	bl	800557c <sampler_1k_load>

			//if ((restart_sample_flag==0 ) || (restart_sample_flag==1))		  sampler_1k_load(sample_flash_address);   // needs to be set to start bank after restart
		//bank_write=0;   /// total 320 sample time (39khz)
		}
 8003c1c:	bf00      	nop
 8003c1e:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bdb0      	pop	{r4, r5, r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200129d8 	.word	0x200129d8
 8003c2c:	20008edc 	.word	0x20008edc
 8003c30:	200129d9 	.word	0x200129d9
 8003c34:	20012578 	.word	0x20012578

08003c38 <LFO_square_one_pulse>:
    *(return_array + 2) = sine_tuned;
    return (sine_tempA);   // add back to start value -20k-20k  or about 16bit

    }

void LFO_square_one_pulse(void){   // sends one pulse synced to seq.pos , rate= pulse width in notes , delay = start position
 8003c38:	b490      	push	{r4, r7}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
       // uint16_t  temp_pulse=0;
	uint8_t seqpos = seq.pos>>3 ;
 8003c3e:	4b42      	ldr	r3, [pc, #264]	; (8003d48 <LFO_square_one_pulse+0x110>)
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	08db      	lsrs	r3, r3, #3
 8003c44:	717b      	strb	r3, [r7, #5]
     //   uint16_t counter_up; // starts at 0+delay
	//uint8_t pulse_high;
	uint8_t pulse_low;
	uint8_t seq_div=7;
 8003c46:	2307      	movs	r3, #7
 8003c48:	71fb      	strb	r3, [r7, #7]
	uint8_t lfo_c ;
	//uint16_t pulse_length;     // 1 note -32 ? with fractions  0-8 then 0-16 then 0-32 then 0-64 ,repeat
	uint8_t pulse_high;

	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	71bb      	strb	r3, [r7, #6]
 8003c4e:	e071      	b.n	8003d34 <LFO_square_one_pulse+0xfc>

	    pulse_low=LFO_square[lfo_c].rate;
 8003c50:	79ba      	ldrb	r2, [r7, #6]
 8003c52:	493e      	ldr	r1, [pc, #248]	; (8003d4c <LFO_square_one_pulse+0x114>)
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	713b      	strb	r3, [r7, #4]
	 //   if (LFO_square[lfo_c].delay<8) delay=LFO_square[lfo_c].delay;  else delay=7;
	    pulse_high=LFO_square[lfo_c].delay;
 8003c62:	79ba      	ldrb	r2, [r7, #6]
 8003c64:	4939      	ldr	r1, [pc, #228]	; (8003d4c <LFO_square_one_pulse+0x114>)
 8003c66:	4613      	mov	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3303      	adds	r3, #3
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	70fb      	strb	r3, [r7, #3]

	    if (pulse_low<64) 						 {seq_div=63;}  // This is the end
 8003c76:	793b      	ldrb	r3, [r7, #4]
 8003c78:	2b3f      	cmp	r3, #63	; 0x3f
 8003c7a:	d801      	bhi.n	8003c80 <LFO_square_one_pulse+0x48>
 8003c7c:	233f      	movs	r3, #63	; 0x3f
 8003c7e:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<32) 								 {seq_div=31;}
 8003c80:	793b      	ldrb	r3, [r7, #4]
 8003c82:	2b1f      	cmp	r3, #31
 8003c84:	d801      	bhi.n	8003c8a <LFO_square_one_pulse+0x52>
 8003c86:	231f      	movs	r3, #31
 8003c88:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<16) 								{ seq_div=15;}
 8003c8a:	793b      	ldrb	r3, [r7, #4]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d801      	bhi.n	8003c94 <LFO_square_one_pulse+0x5c>
 8003c90:	230f      	movs	r3, #15
 8003c92:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<8) 									 {seq_div=7;}
 8003c94:	793b      	ldrb	r3, [r7, #4]
 8003c96:	2b07      	cmp	r3, #7
 8003c98:	d801      	bhi.n	8003c9e <LFO_square_one_pulse+0x66>
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	71fb      	strb	r3, [r7, #7]
	    if  (pulse_low<4) 									 {seq_div=3;}
 8003c9e:	793b      	ldrb	r3, [r7, #4]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d801      	bhi.n	8003ca8 <LFO_square_one_pulse+0x70>
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	71fb      	strb	r3, [r7, #7]
	    //pulse_high=(pulse_high*seq_div)>>3;   // this is the start


	    if (((seqpos&seq_div)<=pulse_low)  &&	((seqpos&seq_div)>=pulse_high))	LFO_square[lfo_c].out[sampling_position]=((LFO_square[lfo_c].depth))<<8;  // high
 8003ca8:	797a      	ldrb	r2, [r7, #5]
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	793a      	ldrb	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d321      	bcc.n	8003cfa <LFO_square_one_pulse+0xc2>
 8003cb6:	797a      	ldrb	r2, [r7, #5]
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d81a      	bhi.n	8003cfa <LFO_square_one_pulse+0xc2>
 8003cc4:	79ba      	ldrb	r2, [r7, #6]
 8003cc6:	4921      	ldr	r1, [pc, #132]	; (8003d4c <LFO_square_one_pulse+0x114>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	79ba      	ldrb	r2, [r7, #6]
 8003cda:	491d      	ldr	r1, [pc, #116]	; (8003d50 <LFO_square_one_pulse+0x118>)
 8003cdc:	7809      	ldrb	r1, [r1, #0]
 8003cde:	460c      	mov	r4, r1
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	b298      	uxth	r0, r3
 8003ce4:	4919      	ldr	r1, [pc, #100]	; (8003d4c <LFO_square_one_pulse+0x114>)
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4423      	add	r3, r4
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	440b      	add	r3, r1
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	809a      	strh	r2, [r3, #4]
 8003cf8:	e019      	b.n	8003d2e <LFO_square_one_pulse+0xf6>
	    else LFO_square[lfo_c].out[sampling_position]=(LFO_square[lfo_c].offset)<<8;		//low
 8003cfa:	79ba      	ldrb	r2, [r7, #6]
 8003cfc:	4913      	ldr	r1, [pc, #76]	; (8003d4c <LFO_square_one_pulse+0x114>)
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3302      	adds	r3, #2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	79ba      	ldrb	r2, [r7, #6]
 8003d10:	490f      	ldr	r1, [pc, #60]	; (8003d50 <LFO_square_one_pulse+0x118>)
 8003d12:	7809      	ldrb	r1, [r1, #0]
 8003d14:	460c      	mov	r4, r1
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	b298      	uxth	r0, r3
 8003d1a:	490c      	ldr	r1, [pc, #48]	; (8003d4c <LFO_square_one_pulse+0x114>)
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4423      	add	r3, r4
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	440b      	add	r3, r1
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	809a      	strh	r2, [r3, #4]
	for (lfo_c=0;lfo_c<10;lfo_c++){
 8003d2e:	79bb      	ldrb	r3, [r7, #6]
 8003d30:	3301      	adds	r3, #1
 8003d32:	71bb      	strb	r3, [r7, #6]
 8003d34:	79bb      	ldrb	r3, [r7, #6]
 8003d36:	2b09      	cmp	r3, #9
 8003d38:	d98a      	bls.n	8003c50 <LFO_square_one_pulse+0x18>

	}
    }
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc90      	pop	{r4, r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	2000d0f4 	.word	0x2000d0f4
 8003d4c:	2000cf94 	.word	0x2000cf94
 8003d50:	2000e0b0 	.word	0x2000e0b0
 8003d54:	00000000 	.word	0x00000000

08003d58 <LFO_source_synced>:



	}

void LFO_source_synced(void){     // lfo , ok , half phase
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08d      	sub	sp, #52	; 0x34
 8003d5c:	af00      	add	r7, sp, #0


	float	freq_temp=0;
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
	float 	freq2_temp=0;
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t 	freq_saw=0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t lfo_c ;
	float offset=0;
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
	uint32_t lfo_accu_temp;
	int16_t  output_hold;
	int32_t freq_tri;
	uint32_t offset2;
	uint32_t freq_temp_saw;
	uint32_t delay_value=0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
	uint16_t rate;

	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003d7e:	e117      	b.n	8003fb0 <LFO_source_synced+0x258>

	rate= LFO[lfo_c].rate;
 8003d80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003d84:	4992      	ldr	r1, [pc, #584]	; (8003fd0 <LFO_source_synced+0x278>)
 8003d86:	4613      	mov	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	837b      	strh	r3, [r7, #26]
	if (rate>10) rate=10;
 8003d94:	8b7b      	ldrh	r3, [r7, #26]
 8003d96:	2b0a      	cmp	r3, #10
 8003d98:	d901      	bls.n	8003d9e <LFO_source_synced+0x46>
 8003d9a:	230a      	movs	r3, #10
 8003d9c:	837b      	strh	r3, [r7, #26]

	lfo_accu_temp=(next_isr&((1<<rate)-1))*(65535>>rate);   // calculate from next_isr
 8003d9e:	4b8d      	ldr	r3, [pc, #564]	; (8003fd4 <LFO_source_synced+0x27c>)
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
 8003da6:	2201      	movs	r2, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	400b      	ands	r3, r1
 8003db0:	8b7a      	ldrh	r2, [r7, #26]
 8003db2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db6:	fa41 f202 	asr.w	r2, r1, r2
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	60bb      	str	r3, [r7, #8]

	// if (lfo_c==0)     debug_value=lfo_accu_temp;

	 delay_value=8192*(LFO[lfo_c].delay&7);  //not ok
 8003dc0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003dc4:	4982      	ldr	r1, [pc, #520]	; (8003fd0 <LFO_source_synced+0x278>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	035b      	lsls	r3, r3, #13
 8003dda:	60fb      	str	r3, [r7, #12]

	 freq_temp=lfo_accu_temp*0.0000479376;
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f7fc fc6f 	bl	80006c0 <__aeabi_ui2d>
 8003de2:	a379      	add	r3, pc, #484	; (adr r3, 8003fc8 <LFO_source_synced+0x270>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc f9fe 	bl	80001e8 <__aeabi_dmul>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4610      	mov	r0, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7fc fcfe 	bl	80007f4 <__aeabi_d2f>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	617b      	str	r3, [r7, #20]

	 freq2_temp=arm_sin_f32(freq_temp);   // +10 cycles
 8003dfc:	ed97 0a05 	vldr	s0, [r7, #20]
 8003e00:	f009 fb46 	bl	800d490 <arm_sin_f32>
 8003e04:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	freq_temp=LFO[lfo_c].depth;
 8003e08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e0c:	4970      	ldr	r1, [pc, #448]	; (8003fd0 <LFO_source_synced+0x278>)
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3301      	adds	r3, #1
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e24:	edc7 7a05 	vstr	s15, [r7, #20]
	 freq_temp= (freq2_temp*freq_temp)*256;
 8003e28:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e34:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003fd8 <LFO_source_synced+0x280>
 8003e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e3c:	edc7 7a05 	vstr	s15, [r7, #20]

	 freq_temp_saw=(lfo_accu_temp+delay_value)&65535        ;// get lfo value plus rate , will try to get related to tempo for easier sync , at potS 80?/8192/8notes/ 1 bar
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	61fb      	str	r3, [r7, #28]

 		offset=(LFO[lfo_c].offset<<8); //  limit now for finetuning
 8003e4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003e4e:	4960      	ldr	r1, [pc, #384]	; (8003fd0 <LFO_source_synced+0x278>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3303      	adds	r3, #3
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e68:	edc7 7a04 	vstr	s15, [r7, #16]
			offset2=offset;
 8003e6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e74:	ee17 3a90 	vmov	r3, s15
 8003e78:	607b      	str	r3, [r7, #4]
 		freq2_temp=(freq_temp+offset);
 8003e7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if (freq2_temp>65534)  freq2_temp=65535;
 8003e8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003e8e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003fdc <LFO_source_synced+0x284>
 8003e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9a:	dd01      	ble.n	8003ea0 <LFO_source_synced+0x148>
 8003e9c:	4b50      	ldr	r3, [pc, #320]	; (8003fe0 <LFO_source_synced+0x288>)
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	//	if (freq2_temp<-32766) {  freq2_temp=-32767; }  // clip to 13bit -/+ 8000

						output_hold=freq2_temp;
 8003ea0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ea4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea8:	ee17 3a90 	vmov	r3, s15
 8003eac:	807b      	strh	r3, [r7, #2]
				if (freq_temp_saw>65534)  freq_temp_saw=65535;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d902      	bls.n	8003ebe <LFO_source_synced+0x166>
 8003eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ebc:	61fb      	str	r3, [r7, #28]
					//	lfo_accu_temp=lfo_accu_temp/6;
					freq_saw=((freq_temp_saw*LFO[lfo_c].depth)>>8)+offset2;   // 51 000  + offset
 8003ebe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ec2:	4943      	ldr	r1, [pc, #268]	; (8003fd0 <LFO_source_synced+0x278>)
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3301      	adds	r3, #1
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4413      	add	r3, r2
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28

					if (freq_saw>65534)  freq_saw=65535;   // clip
 8003ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d902      	bls.n	8003ef2 <LFO_source_synced+0x19a>
 8003eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
				//	freq_saw=65535-freq_saw;
					LFO[lfo_c].out[sampling_position]=output_hold; // sine out
 8003ef2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <LFO_source_synced+0x28c>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	461c      	mov	r4, r3
 8003efc:	8878      	ldrh	r0, [r7, #2]
 8003efe:	4934      	ldr	r1, [pc, #208]	; (8003fd0 <LFO_source_synced+0x278>)
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	4413      	add	r3, r2
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	4423      	add	r3, r4
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	440b      	add	r3, r1
 8003f0e:	4602      	mov	r2, r0
 8003f10:	80da      	strh	r2, [r3, #6]
				   LFO[lfo_c].out_saw[sampling_position]=freq_saw;    // saw 16 bit
 8003f12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f16:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <LFO_source_synced+0x28c>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	461c      	mov	r4, r3
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	b298      	uxth	r0, r3
 8003f20:	492b      	ldr	r1, [pc, #172]	; (8003fd0 <LFO_source_synced+0x278>)
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	4413      	add	r3, r2
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4423      	add	r3, r4
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	440b      	add	r3, r1
 8003f32:	4602      	mov	r2, r0
 8003f34:	805a      	strh	r2, [r3, #2]


				   if(freq_temp_saw<32768)   freq_tri=freq_temp_saw; else freq_tri=65536-freq_temp_saw;    // 0-32767
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3c:	d202      	bcs.n	8003f44 <LFO_source_synced+0x1ec>
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	623b      	str	r3, [r7, #32]
 8003f42:	e003      	b.n	8003f4c <LFO_source_synced+0x1f4>
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8003f4a:	623b      	str	r3, [r7, #32]
				   freq_tri=((freq_tri*LFO[lfo_c].depth)>>7)+offset2 ; // tri 16 bit
 8003f4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f50:	491f      	ldr	r1, [pc, #124]	; (8003fd0 <LFO_source_synced+0x278>)
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	11db      	asrs	r3, r3, #7
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	623b      	str	r3, [r7, #32]
				//   freq_tri=((freq_tri*255)>>7)+offset2 ; // tri 16 bit
				   if (freq_tri>65534)  freq_tri=65535;   // clip
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	dd02      	ble.n	8003f82 <LFO_source_synced+0x22a>
 8003f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f80:	623b      	str	r3, [r7, #32]
				  LFO[lfo_c].out_tri[sampling_position]=freq_tri;
 8003f82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <LFO_source_synced+0x28c>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	b298      	uxth	r0, r3
 8003f90:	490f      	ldr	r1, [pc, #60]	; (8003fd0 <LFO_source_synced+0x278>)
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	4413      	add	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4423      	add	r3, r4
 8003f9c:	3314      	adds	r3, #20
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	80da      	strh	r2, [r3, #6]
	for (lfo_c=0;lfo_c<10;lfo_c++){   //current lfo setup , needs sampling position 0-8  and tempo_sync
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003faa:	3301      	adds	r3, #1
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fb4:	2b09      	cmp	r3, #9
 8003fb6:	f67f aee3 	bls.w	8003d80 <LFO_source_synced+0x28>

		} // lfo gen : 0=f1 , 1=tempo,2=pitch



	}
 8003fba:	bf00      	nop
 8003fbc:	bf00      	nop
 8003fbe:	3734      	adds	r7, #52	; 0x34
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd90      	pop	{r4, r7, pc}
 8003fc4:	f3af 8000 	nop.w
 8003fc8:	64dc8498 	.word	0x64dc8498
 8003fcc:	3f092213 	.word	0x3f092213
 8003fd0:	2000ccb0 	.word	0x2000ccb0
 8003fd4:	2000bec4 	.word	0x2000bec4
 8003fd8:	43800000 	.word	0x43800000
 8003fdc:	477ffe00 	.word	0x477ffe00
 8003fe0:	477fff00 	.word	0x477fff00
 8003fe4:	2000e0b0 	.word	0x2000e0b0

08003fe8 <frq_point>:


void  frq_point(void){
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	freq_point[0]=freq_pointer[0] [sampling_position];; // load up coeffs
 8003fec:	4b84      	ldr	r3, [pc, #528]	; (8004200 <frq_point+0x218>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	4a84      	ldr	r2, [pc, #528]	; (8004204 <frq_point+0x21c>)
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a83      	ldr	r2, [pc, #524]	; (8004208 <frq_point+0x220>)
 8003ffa:	6013      	str	r3, [r2, #0]

			freq_point[2]=freq_pointer[1] [sampling_position];  // ok , array was too short
 8003ffc:	4b80      	ldr	r3, [pc, #512]	; (8004200 <frq_point+0x218>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	4a80      	ldr	r2, [pc, #512]	; (8004204 <frq_point+0x21c>)
 8004002:	3309      	adds	r3, #9
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a7f      	ldr	r2, [pc, #508]	; (8004208 <frq_point+0x220>)
 800400c:	6093      	str	r3, [r2, #8]
			freq_point[4]=freq_pointer[2] [sampling_position];  // ok , array was too short
 800400e:	4b7c      	ldr	r3, [pc, #496]	; (8004200 <frq_point+0x218>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	4a7c      	ldr	r2, [pc, #496]	; (8004204 <frq_point+0x21c>)
 8004014:	3312      	adds	r3, #18
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7a      	ldr	r2, [pc, #488]	; (8004208 <frq_point+0x220>)
 800401e:	6113      	str	r3, [r2, #16]
			freq_point[6]=freq_pointer[3] [sampling_position];  // ok , array was too short
 8004020:	4b77      	ldr	r3, [pc, #476]	; (8004200 <frq_point+0x218>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4a77      	ldr	r2, [pc, #476]	; (8004204 <frq_point+0x21c>)
 8004026:	331b      	adds	r3, #27
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a76      	ldr	r2, [pc, #472]	; (8004208 <frq_point+0x220>)
 8004030:	6193      	str	r3, [r2, #24]

			if (freq_point[0]>1) freq_point[0]=1; else if (freq_point[0]<0) freq_point[0]=0;// just in case
 8004032:	4b75      	ldr	r3, [pc, #468]	; (8004208 <frq_point+0x220>)
 8004034:	edd3 7a00 	vldr	s15, [r3]
 8004038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800403c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004044:	dd04      	ble.n	8004050 <frq_point+0x68>
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <frq_point+0x220>)
 8004048:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e00b      	b.n	8004068 <frq_point+0x80>
 8004050:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <frq_point+0x220>)
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d503      	bpl.n	8004068 <frq_point+0x80>
 8004060:	4b69      	ldr	r3, [pc, #420]	; (8004208 <frq_point+0x220>)
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
			if (freq_point[4]>1) freq_point[4]=1; else if (freq_point[4]<0) freq_point[4]=0;// just in case
 8004068:	4b67      	ldr	r3, [pc, #412]	; (8004208 <frq_point+0x220>)
 800406a:	edd3 7a04 	vldr	s15, [r3, #16]
 800406e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	dd04      	ble.n	8004086 <frq_point+0x9e>
 800407c:	4b62      	ldr	r3, [pc, #392]	; (8004208 <frq_point+0x220>)
 800407e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004082:	611a      	str	r2, [r3, #16]
 8004084:	e00b      	b.n	800409e <frq_point+0xb6>
 8004086:	4b60      	ldr	r3, [pc, #384]	; (8004208 <frq_point+0x220>)
 8004088:	edd3 7a04 	vldr	s15, [r3, #16]
 800408c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004094:	d503      	bpl.n	800409e <frq_point+0xb6>
 8004096:	4b5c      	ldr	r3, [pc, #368]	; (8004208 <frq_point+0x220>)
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
			if (freq_point[2]>1) freq_point[2]=1; else if (freq_point[2]<0) freq_point[2]=0;// just in case
 800409e:	4b5a      	ldr	r3, [pc, #360]	; (8004208 <frq_point+0x220>)
 80040a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80040a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b0:	dd04      	ble.n	80040bc <frq_point+0xd4>
 80040b2:	4b55      	ldr	r3, [pc, #340]	; (8004208 <frq_point+0x220>)
 80040b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040b8:	609a      	str	r2, [r3, #8]
 80040ba:	e00b      	b.n	80040d4 <frq_point+0xec>
 80040bc:	4b52      	ldr	r3, [pc, #328]	; (8004208 <frq_point+0x220>)
 80040be:	edd3 7a02 	vldr	s15, [r3, #8]
 80040c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	d503      	bpl.n	80040d4 <frq_point+0xec>
 80040cc:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <frq_point+0x220>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
			if (freq_point[6]>1) freq_point[6]=1; else if (freq_point[6]<0) freq_point[6]=0;// just in case
 80040d4:	4b4c      	ldr	r3, [pc, #304]	; (8004208 <frq_point+0x220>)
 80040d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80040da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040e6:	dd04      	ble.n	80040f2 <frq_point+0x10a>
 80040e8:	4b47      	ldr	r3, [pc, #284]	; (8004208 <frq_point+0x220>)
 80040ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80040ee:	619a      	str	r2, [r3, #24]
 80040f0:	e00b      	b.n	800410a <frq_point+0x122>
 80040f2:	4b45      	ldr	r3, [pc, #276]	; (8004208 <frq_point+0x220>)
 80040f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80040f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d503      	bpl.n	800410a <frq_point+0x122>
 8004102:	4b41      	ldr	r3, [pc, #260]	; (8004208 <frq_point+0x220>)
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	619a      	str	r2, [r3, #24]

			freq_point[1]=1-freq_point[0];
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <frq_point+0x220>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004118:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <frq_point+0x220>)
 800411a:	edc3 7a01 	vstr	s15, [r3, #4]
			freq_point[3]=1-freq_point[2];
 800411e:	4b3a      	ldr	r3, [pc, #232]	; (8004208 <frq_point+0x220>)
 8004120:	edd3 7a02 	vldr	s15, [r3, #8]
 8004124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <frq_point+0x220>)
 800412e:	edc3 7a03 	vstr	s15, [r3, #12]
			freq_point[5]=1-freq_point[4];
 8004132:	4b35      	ldr	r3, [pc, #212]	; (8004208 <frq_point+0x220>)
 8004134:	edd3 7a04 	vldr	s15, [r3, #16]
 8004138:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800413c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004140:	4b31      	ldr	r3, [pc, #196]	; (8004208 <frq_point+0x220>)
 8004142:	edc3 7a05 	vstr	s15, [r3, #20]
			freq_point[7]=1-freq_point[6];
 8004146:	4b30      	ldr	r3, [pc, #192]	; (8004208 <frq_point+0x220>)
 8004148:	edd3 7a06 	vldr	s15, [r3, #24]
 800414c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004154:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <frq_point+0x220>)
 8004156:	edc3 7a07 	vstr	s15, [r3, #28]

			filter_res[0]=freq_point[0]*0.2;
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <frq_point+0x220>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc fad0 	bl	8000704 <__aeabi_f2d>
 8004164:	a324      	add	r3, pc, #144	; (adr r3, 80041f8 <frq_point+0x210>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc f83d 	bl	80001e8 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f7fc fb3d 	bl	80007f4 <__aeabi_d2f>
 800417a:	4603      	mov	r3, r0
 800417c:	4a23      	ldr	r2, [pc, #140]	; (800420c <frq_point+0x224>)
 800417e:	6013      	str	r3, [r2, #0]
			filter_res[1]=freq_point[1]*0.2;
 8004180:	4b21      	ldr	r3, [pc, #132]	; (8004208 <frq_point+0x220>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4618      	mov	r0, r3
 8004186:	f7fc fabd 	bl	8000704 <__aeabi_f2d>
 800418a:	a31b      	add	r3, pc, #108	; (adr r3, 80041f8 <frq_point+0x210>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f7fc f82a 	bl	80001e8 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f7fc fb2a 	bl	80007f4 <__aeabi_d2f>
 80041a0:	4603      	mov	r3, r0
 80041a2:	4a1a      	ldr	r2, [pc, #104]	; (800420c <frq_point+0x224>)
 80041a4:	6053      	str	r3, [r2, #4]
			filter_res[2]=freq_point[2]*0.2;
 80041a6:	4b18      	ldr	r3, [pc, #96]	; (8004208 <frq_point+0x220>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc faaa 	bl	8000704 <__aeabi_f2d>
 80041b0:	a311      	add	r3, pc, #68	; (adr r3, 80041f8 <frq_point+0x210>)
 80041b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b6:	f7fc f817 	bl	80001e8 <__aeabi_dmul>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4610      	mov	r0, r2
 80041c0:	4619      	mov	r1, r3
 80041c2:	f7fc fb17 	bl	80007f4 <__aeabi_d2f>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4a10      	ldr	r2, [pc, #64]	; (800420c <frq_point+0x224>)
 80041ca:	6093      	str	r3, [r2, #8]
			filter_res[3]=freq_point[3]*0.2;
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <frq_point+0x220>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc fa97 	bl	8000704 <__aeabi_f2d>
 80041d6:	a308      	add	r3, pc, #32	; (adr r3, 80041f8 <frq_point+0x210>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fc f804 	bl	80001e8 <__aeabi_dmul>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4610      	mov	r0, r2
 80041e6:	4619      	mov	r1, r3
 80041e8:	f7fc fb04 	bl	80007f4 <__aeabi_d2f>
 80041ec:	4603      	mov	r3, r0
 80041ee:	4a07      	ldr	r2, [pc, #28]	; (800420c <frq_point+0x224>)
 80041f0:	60d3      	str	r3, [r2, #12]

}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	9999999a 	.word	0x9999999a
 80041fc:	3fc99999 	.word	0x3fc99999
 8004200:	2000e0b0 	.word	0x2000e0b0
 8004204:	2000bf80 	.word	0x2000bf80
 8004208:	2000bf60 	.word	0x2000bf60
 800420c:	2000bf10 	.word	0x2000bf10

08004210 <ADSR_loop>:


	}


void ADSR_loop(void){
 8004210:	b490      	push	{r4, r7}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
		uint8_t counter;
		uint8_t ok=1;
 8004216:	2301      	movs	r3, #1
 8004218:	71bb      	strb	r3, [r7, #6]
		uint8_t ADSR_out=0;
 800421a:	2300      	movs	r3, #0
 800421c:	717b      	strb	r3, [r7, #5]
		uint8_t position=sampling_position;
 800421e:	4ba1      	ldr	r3, [pc, #644]	; (80044a4 <ADSR_loop+0x294>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	713b      	strb	r3, [r7, #4]
		//position=0;

		for (counter=0;counter<4;counter++){
 8004224:	2300      	movs	r3, #0
 8004226:	71fb      	strb	r3, [r7, #7]
 8004228:	e181      	b.n	800452e <ADSR_loop+0x31e>
		    ok=1;
 800422a:	2301      	movs	r3, #1
 800422c:	71bb      	strb	r3, [r7, #6]
	while(ok){	      // do one thing then exit
 800422e:	e141      	b.n	80044b4 <ADSR_loop+0x2a4>
	    ADSR[counter].buffer[position]=0;
 8004230:	79fa      	ldrb	r2, [r7, #7]
 8004232:	7939      	ldrb	r1, [r7, #4]
 8004234:	489c      	ldr	r0, [pc, #624]	; (80044a8 <ADSR_loop+0x298>)
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	440b      	add	r3, r1
 800423e:	3304      	adds	r3, #4
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4403      	add	r3, r0
 8004244:	2200      	movs	r2, #0
 8004246:	80da      	strh	r2, [r3, #6]
	    ADSR[counter].sustain_data=ADSR[counter].sustain<<4;
 8004248:	79fa      	ldrb	r2, [r7, #7]
 800424a:	4997      	ldr	r1, [pc, #604]	; (80044a8 <ADSR_loop+0x298>)
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	440b      	add	r3, r1
 8004256:	3302      	adds	r3, #2
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	79fa      	ldrb	r2, [r7, #7]
 800425e:	b218      	sxth	r0, r3
 8004260:	4991      	ldr	r1, [pc, #580]	; (80044a8 <ADSR_loop+0x298>)
 8004262:	4613      	mov	r3, r2
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	440b      	add	r3, r1
 800426c:	330a      	adds	r3, #10
 800426e:	4602      	mov	r2, r0
 8004270:	801a      	strh	r2, [r3, #0]
      if ( note[counter].position) {   ADSR[counter].attack_data=1000;     ADSR[counter].decay_data=1000;
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	4a8d      	ldr	r2, [pc, #564]	; (80044ac <ADSR_loop+0x29c>)
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d030      	beq.n	80042e4 <ADSR_loop+0xd4>
 8004282:	79fa      	ldrb	r2, [r7, #7]
 8004284:	4988      	ldr	r1, [pc, #544]	; (80044a8 <ADSR_loop+0x298>)
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	440b      	add	r3, r1
 8004290:	3306      	adds	r3, #6
 8004292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	79fa      	ldrb	r2, [r7, #7]
 800429a:	4983      	ldr	r1, [pc, #524]	; (80044a8 <ADSR_loop+0x298>)
 800429c:	4613      	mov	r3, r2
 800429e:	011b      	lsls	r3, r3, #4
 80042a0:	1a9b      	subs	r3, r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	440b      	add	r3, r1
 80042a6:	3308      	adds	r3, #8
 80042a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042ac:	801a      	strh	r2, [r3, #0]
      ADSR[counter].release_data= ADSR[counter].sustain_data;       note[counter].position=0; }
 80042ae:	79f9      	ldrb	r1, [r7, #7]
 80042b0:	79fa      	ldrb	r2, [r7, #7]
 80042b2:	487d      	ldr	r0, [pc, #500]	; (80044a8 <ADSR_loop+0x298>)
 80042b4:	460b      	mov	r3, r1
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	1a5b      	subs	r3, r3, r1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	4403      	add	r3, r0
 80042be:	330a      	adds	r3, #10
 80042c0:	f9b3 0000 	ldrsh.w	r0, [r3]
 80042c4:	4978      	ldr	r1, [pc, #480]	; (80044a8 <ADSR_loop+0x298>)
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	440b      	add	r3, r1
 80042d0:	330c      	adds	r3, #12
 80042d2:	4602      	mov	r2, r0
 80042d4:	801a      	strh	r2, [r3, #0]
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	4a74      	ldr	r2, [pc, #464]	; (80044ac <ADSR_loop+0x29c>)
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	4413      	add	r3, r2
 80042de:	3304      	adds	r3, #4
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]

      if (ADSR[counter].attack_data>0) {   ADSR[counter].attack_data=ADSR[counter].attack_data-(ADSR[counter].attack<<2);
 80042e4:	79fa      	ldrb	r2, [r7, #7]
 80042e6:	4970      	ldr	r1, [pc, #448]	; (80044a8 <ADSR_loop+0x298>)
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	440b      	add	r3, r1
 80042f2:	3306      	adds	r3, #6
 80042f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dd3e      	ble.n	800437a <ADSR_loop+0x16a>
 80042fc:	79fa      	ldrb	r2, [r7, #7]
 80042fe:	496a      	ldr	r1, [pc, #424]	; (80044a8 <ADSR_loop+0x298>)
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	440b      	add	r3, r1
 800430a:	3306      	adds	r3, #6
 800430c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004310:	b299      	uxth	r1, r3
 8004312:	79fa      	ldrb	r2, [r7, #7]
 8004314:	4864      	ldr	r0, [pc, #400]	; (80044a8 <ADSR_loop+0x298>)
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4403      	add	r3, r0
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b29b      	uxth	r3, r3
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	b29b      	uxth	r3, r3
 8004328:	1acb      	subs	r3, r1, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	79fa      	ldrb	r2, [r7, #7]
 800432e:	b218      	sxth	r0, r3
 8004330:	495d      	ldr	r1, [pc, #372]	; (80044a8 <ADSR_loop+0x298>)
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	440b      	add	r3, r1
 800433c:	3306      	adds	r3, #6
 800433e:	4602      	mov	r2, r0
 8004340:	801a      	strh	r2, [r3, #0]
    ADSR[counter].buffer[position]=1000-ADSR[counter].attack_data;break;
 8004342:	79fa      	ldrb	r2, [r7, #7]
 8004344:	4958      	ldr	r1, [pc, #352]	; (80044a8 <ADSR_loop+0x298>)
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	440b      	add	r3, r1
 8004350:	3306      	adds	r3, #6
 8004352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800435c:	b29b      	uxth	r3, r3
 800435e:	79fa      	ldrb	r2, [r7, #7]
 8004360:	7939      	ldrb	r1, [r7, #4]
 8004362:	b21c      	sxth	r4, r3
 8004364:	4850      	ldr	r0, [pc, #320]	; (80044a8 <ADSR_loop+0x298>)
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	440b      	add	r3, r1
 800436e:	3304      	adds	r3, #4
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4403      	add	r3, r0
 8004374:	4622      	mov	r2, r4
 8004376:	80da      	strh	r2, [r3, #6]
 8004378:	e0a0      	b.n	80044bc <ADSR_loop+0x2ac>
      }

     if (ADSR[counter].decay_data>=ADSR[counter].sustain_data)   { ADSR[counter].decay_data=ADSR[counter].decay_data-(ADSR[counter].decay);
 800437a:	79fa      	ldrb	r2, [r7, #7]
 800437c:	494a      	ldr	r1, [pc, #296]	; (80044a8 <ADSR_loop+0x298>)
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	440b      	add	r3, r1
 8004388:	3308      	adds	r3, #8
 800438a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800438e:	79fa      	ldrb	r2, [r7, #7]
 8004390:	4845      	ldr	r0, [pc, #276]	; (80044a8 <ADSR_loop+0x298>)
 8004392:	4613      	mov	r3, r2
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	4403      	add	r3, r0
 800439c:	330a      	adds	r3, #10
 800439e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a2:	4299      	cmp	r1, r3
 80043a4:	db38      	blt.n	8004418 <ADSR_loop+0x208>
 80043a6:	79fa      	ldrb	r2, [r7, #7]
 80043a8:	493f      	ldr	r1, [pc, #252]	; (80044a8 <ADSR_loop+0x298>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	440b      	add	r3, r1
 80043b4:	3308      	adds	r3, #8
 80043b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ba:	b299      	uxth	r1, r3
 80043bc:	79fa      	ldrb	r2, [r7, #7]
 80043be:	483a      	ldr	r0, [pc, #232]	; (80044a8 <ADSR_loop+0x298>)
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4403      	add	r3, r0
 80043ca:	3301      	adds	r3, #1
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	1acb      	subs	r3, r1, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	79fa      	ldrb	r2, [r7, #7]
 80043d6:	b218      	sxth	r0, r3
 80043d8:	4933      	ldr	r1, [pc, #204]	; (80044a8 <ADSR_loop+0x298>)
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	440b      	add	r3, r1
 80043e4:	3308      	adds	r3, #8
 80043e6:	4602      	mov	r2, r0
 80043e8:	801a      	strh	r2, [r3, #0]
    ADSR[counter].buffer[position]=ADSR[counter].decay_data;break;
 80043ea:	79f9      	ldrb	r1, [r7, #7]
 80043ec:	79fa      	ldrb	r2, [r7, #7]
 80043ee:	7938      	ldrb	r0, [r7, #4]
 80043f0:	4c2d      	ldr	r4, [pc, #180]	; (80044a8 <ADSR_loop+0x298>)
 80043f2:	460b      	mov	r3, r1
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	1a5b      	subs	r3, r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4423      	add	r3, r4
 80043fc:	3308      	adds	r3, #8
 80043fe:	f9b3 4000 	ldrsh.w	r4, [r3]
 8004402:	4929      	ldr	r1, [pc, #164]	; (80044a8 <ADSR_loop+0x298>)
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	4403      	add	r3, r0
 800440c:	3304      	adds	r3, #4
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	440b      	add	r3, r1
 8004412:	4622      	mov	r2, r4
 8004414:	80da      	strh	r2, [r3, #6]
 8004416:	e051      	b.n	80044bc <ADSR_loop+0x2ac>

      }
      if (ADSR[counter].release_data>0)  {  ADSR[counter].release_data=ADSR[counter].release_data-ADSR[counter].release;
 8004418:	79fa      	ldrb	r2, [r7, #7]
 800441a:	4923      	ldr	r1, [pc, #140]	; (80044a8 <ADSR_loop+0x298>)
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	440b      	add	r3, r1
 8004426:	330c      	adds	r3, #12
 8004428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	dd3f      	ble.n	80044b0 <ADSR_loop+0x2a0>
 8004430:	79fa      	ldrb	r2, [r7, #7]
 8004432:	491d      	ldr	r1, [pc, #116]	; (80044a8 <ADSR_loop+0x298>)
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	440b      	add	r3, r1
 800443e:	330c      	adds	r3, #12
 8004440:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004444:	b299      	uxth	r1, r3
 8004446:	79fa      	ldrb	r2, [r7, #7]
 8004448:	4817      	ldr	r0, [pc, #92]	; (80044a8 <ADSR_loop+0x298>)
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4403      	add	r3, r0
 8004454:	3303      	adds	r3, #3
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b29b      	uxth	r3, r3
 800445a:	1acb      	subs	r3, r1, r3
 800445c:	b29b      	uxth	r3, r3
 800445e:	79fa      	ldrb	r2, [r7, #7]
 8004460:	b218      	sxth	r0, r3
 8004462:	4911      	ldr	r1, [pc, #68]	; (80044a8 <ADSR_loop+0x298>)
 8004464:	4613      	mov	r3, r2
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	1a9b      	subs	r3, r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	440b      	add	r3, r1
 800446e:	330c      	adds	r3, #12
 8004470:	4602      	mov	r2, r0
 8004472:	801a      	strh	r2, [r3, #0]
      ADSR[counter].buffer[position]=ADSR[counter].release_data;break;
 8004474:	79f9      	ldrb	r1, [r7, #7]
 8004476:	79fa      	ldrb	r2, [r7, #7]
 8004478:	7938      	ldrb	r0, [r7, #4]
 800447a:	4c0b      	ldr	r4, [pc, #44]	; (80044a8 <ADSR_loop+0x298>)
 800447c:	460b      	mov	r3, r1
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a5b      	subs	r3, r3, r1
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4423      	add	r3, r4
 8004486:	330c      	adds	r3, #12
 8004488:	f9b3 4000 	ldrsh.w	r4, [r3]
 800448c:	4906      	ldr	r1, [pc, #24]	; (80044a8 <ADSR_loop+0x298>)
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	4403      	add	r3, r0
 8004496:	3304      	adds	r3, #4
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	440b      	add	r3, r1
 800449c:	4622      	mov	r2, r4
 800449e:	80da      	strh	r2, [r3, #6]
 80044a0:	e00c      	b.n	80044bc <ADSR_loop+0x2ac>
 80044a2:	bf00      	nop
 80044a4:	2000e0b0 	.word	0x2000e0b0
 80044a8:	2000d05c 	.word	0x2000d05c
 80044ac:	20008e1c 	.word	0x20008e1c
      }
      ok=0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	71bb      	strb	r3, [r7, #6]
	while(ok){	      // do one thing then exit
 80044b4:	79bb      	ldrb	r3, [r7, #6]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f47f aeba 	bne.w	8004230 <ADSR_loop+0x20>
	}
	if ( ADSR[counter].buffer[position]<0)    ADSR[counter].buffer[position]=0;     // 0-127
 80044bc:	79fa      	ldrb	r2, [r7, #7]
 80044be:	7939      	ldrb	r1, [r7, #4]
 80044c0:	4820      	ldr	r0, [pc, #128]	; (8004544 <ADSR_loop+0x334>)
 80044c2:	4613      	mov	r3, r2
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	1a9b      	subs	r3, r3, r2
 80044c8:	440b      	add	r3, r1
 80044ca:	3304      	adds	r3, #4
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4403      	add	r3, r0
 80044d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da0b      	bge.n	80044f0 <ADSR_loop+0x2e0>
 80044d8:	79fa      	ldrb	r2, [r7, #7]
 80044da:	7939      	ldrb	r1, [r7, #4]
 80044dc:	4819      	ldr	r0, [pc, #100]	; (8004544 <ADSR_loop+0x334>)
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	440b      	add	r3, r1
 80044e6:	3304      	adds	r3, #4
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4403      	add	r3, r0
 80044ec:	2200      	movs	r2, #0
 80044ee:	80da      	strh	r2, [r3, #6]
	if ( ADSR[counter].buffer[position]>1023)    ADSR[counter].buffer[position]=1023;
 80044f0:	79fa      	ldrb	r2, [r7, #7]
 80044f2:	7939      	ldrb	r1, [r7, #4]
 80044f4:	4813      	ldr	r0, [pc, #76]	; (8004544 <ADSR_loop+0x334>)
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	440b      	add	r3, r1
 80044fe:	3304      	adds	r3, #4
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	4403      	add	r3, r0
 8004504:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450c:	db0c      	blt.n	8004528 <ADSR_loop+0x318>
 800450e:	79fa      	ldrb	r2, [r7, #7]
 8004510:	7939      	ldrb	r1, [r7, #4]
 8004512:	480c      	ldr	r0, [pc, #48]	; (8004544 <ADSR_loop+0x334>)
 8004514:	4613      	mov	r3, r2
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	440b      	add	r3, r1
 800451c:	3304      	adds	r3, #4
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4403      	add	r3, r0
 8004522:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8004526:	80da      	strh	r2, [r3, #6]
		for (counter=0;counter<4;counter++){
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	3301      	adds	r3, #1
 800452c:	71fb      	strb	r3, [r7, #7]
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	2b03      	cmp	r3, #3
 8004532:	f67f ae7a 	bls.w	800422a <ADSR_loop+0x1a>
  }




}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bc90      	pop	{r4, r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	2000d05c 	.word	0x2000d05c

08004548 <display_process>:
// disableplay related data

void display_process(void){							// keep data processing here
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0




}   // end o void
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <displayBuffer2>:


    void displayBuffer2 (void){       // only for feedback line now
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
														    //when scrolling maybe use this only until  settled
	uint16_t feedback_loc=(menu_title_lut[enc_out1]&896)+107;														// start 2*8 bit then squeeze in 20*6 bit characters
 800455e:	4b74      	ldr	r3, [pc, #464]	; (8004730 <displayBuffer2+0x1d8>)
 8004560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004564:	461a      	mov	r2, r3
 8004566:	4b73      	ldr	r3, [pc, #460]	; (8004734 <displayBuffer2+0x1dc>)
 8004568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8004572:	b29b      	uxth	r3, r3
 8004574:	336b      	adds	r3, #107	; 0x6b
 8004576:	80bb      	strh	r3, [r7, #4]

	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8004578:	4b6d      	ldr	r3, [pc, #436]	; (8004730 <displayBuffer2+0x1d8>)
 800457a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800457e:	461a      	mov	r2, r3
 8004580:	4b6c      	ldr	r3, [pc, #432]	; (8004734 <displayBuffer2+0x1dc>)
 8004582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	70fb      	strb	r3, [r7, #3]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4a6a      	ldr	r2, [pc, #424]	; (8004738 <displayBuffer2+0x1e0>)
 8004590:	4413      	add	r3, r2
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b69      	ldr	r3, [pc, #420]	; (800473c <displayBuffer2+0x1e4>)
 8004596:	6810      	ldr	r0, [r2, #0]
 8004598:	6851      	ldr	r1, [r2, #4]
 800459a:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 800459c:	4a68      	ldr	r2, [pc, #416]	; (8004740 <displayBuffer2+0x1e8>)
 800459e:	463b      	mov	r3, r7
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	4611      	mov	r1, r2
 80045a4:	8019      	strh	r1, [r3, #0]
 80045a6:	3302      	adds	r3, #2
 80045a8:	0c12      	lsrs	r2, r2, #16
 80045aa:	701a      	strb	r2, [r3, #0]
	// char temp_char2[]="________";
				 memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 80045ac:	4b60      	ldr	r3, [pc, #384]	; (8004730 <displayBuffer2+0x1d8>)
 80045ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b63      	ldr	r3, [pc, #396]	; (8004744 <displayBuffer2+0x1ec>)
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	803b      	strh	r3, [r7, #0]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 80045c0:	463b      	mov	r3, r7
 80045c2:	4618      	mov	r0, r3
 80045c4:	f008 ffa8 	bl	800d518 <atoi>
 80045c8:	4603      	mov	r3, r0
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	4b5e      	ldr	r3, [pc, #376]	; (8004748 <displayBuffer2+0x1f0>)
 80045ce:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 80045d0:	4b5d      	ldr	r3, [pc, #372]	; (8004748 <displayBuffer2+0x1f0>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	4859      	ldr	r0, [pc, #356]	; (800473c <displayBuffer2+0x1e4>)
 80045d8:	f7fc fade 	bl	8000b98 <menu_vars>
 80045dc:	4603      	mov	r3, r0
 80045de:	4a5b      	ldr	r2, [pc, #364]	; (800474c <displayBuffer2+0x1f4>)
 80045e0:	6013      	str	r3, [r2, #0]


	     memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+crap_hold9),8);   // copy feedback data for reading,ok
 80045e2:	88bb      	ldrh	r3, [r7, #4]
 80045e4:	3308      	adds	r3, #8
 80045e6:	4a5a      	ldr	r2, [pc, #360]	; (8004750 <displayBuffer2+0x1f8>)
 80045e8:	1898      	adds	r0, r3, r2
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4a52      	ldr	r2, [pc, #328]	; (8004738 <displayBuffer2+0x1e0>)
 80045f0:	4413      	add	r3, r2
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2208      	movs	r2, #8
 80045f6:	4619      	mov	r1, r3
 80045f8:	f008 ffbc 	bl	800d574 <memcpy>
	     memcpy(default_menu3+feedback_loc+17,potSource+380,3);  // lcd out
 80045fc:	88bb      	ldrh	r3, [r7, #4]
 80045fe:	3311      	adds	r3, #17
 8004600:	4a53      	ldr	r2, [pc, #332]	; (8004750 <displayBuffer2+0x1f8>)
 8004602:	4413      	add	r3, r2
 8004604:	4953      	ldr	r1, [pc, #332]	; (8004754 <displayBuffer2+0x1fc>)
 8004606:	2203      	movs	r2, #3
 8004608:	4618      	mov	r0, r3
 800460a:	f008 ffb3 	bl	800d574 <memcpy>
	     memcpy(default_menu3+feedback_loc+5,temp_char,2);
 800460e:	88bb      	ldrh	r3, [r7, #4]
 8004610:	3305      	adds	r3, #5
 8004612:	4a4f      	ldr	r2, [pc, #316]	; (8004750 <displayBuffer2+0x1f8>)
 8004614:	4413      	add	r3, r2
 8004616:	883a      	ldrh	r2, [r7, #0]
 8004618:	801a      	strh	r2, [r3, #0]

	     if (menu_vars_ref==5) target_display=1;
 800461a:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <displayBuffer2+0x200>)
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b05      	cmp	r3, #5
 8004620:	d102      	bne.n	8004628 <displayBuffer2+0xd0>
 8004622:	4b4e      	ldr	r3, [pc, #312]	; (800475c <displayBuffer2+0x204>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
	     if ((menu_vars_ref==36)|| (menu_vars_ref==37)) target_display=2;
 8004628:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <displayBuffer2+0x200>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b24      	cmp	r3, #36	; 0x24
 800462e:	d003      	beq.n	8004638 <displayBuffer2+0xe0>
 8004630:	4b49      	ldr	r3, [pc, #292]	; (8004758 <displayBuffer2+0x200>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b25      	cmp	r3, #37	; 0x25
 8004636:	d102      	bne.n	800463e <displayBuffer2+0xe6>
 8004638:	4b48      	ldr	r3, [pc, #288]	; (800475c <displayBuffer2+0x204>)
 800463a:	2202      	movs	r2, #2
 800463c:	701a      	strb	r2, [r3, #0]
	     if((48<menu_vars_ref)    && (menu_vars_ref<53)) target_display=3;
 800463e:	4b46      	ldr	r3, [pc, #280]	; (8004758 <displayBuffer2+0x200>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b30      	cmp	r3, #48	; 0x30
 8004644:	d906      	bls.n	8004654 <displayBuffer2+0xfc>
 8004646:	4b44      	ldr	r3, [pc, #272]	; (8004758 <displayBuffer2+0x200>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b34      	cmp	r3, #52	; 0x34
 800464c:	d802      	bhi.n	8004654 <displayBuffer2+0xfc>
 800464e:	4b43      	ldr	r3, [pc, #268]	; (800475c <displayBuffer2+0x204>)
 8004650:	2203      	movs	r2, #3
 8004652:	701a      	strb	r2, [r3, #0]
	 //    if((48<menu_vars_ref)    && (menu_vars_ref<53)) memcpy(LCD_Info+3, *(menu_titles_final+(*menu_vars_var)),8);  // send target for LFO_sqr  to LCD_Info


		 if (target_display)      // write LFO.target display , might use it for other things too
 8004654:	4b41      	ldr	r3, [pc, #260]	; (800475c <displayBuffer2+0x204>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d054      	beq.n	8004706 <displayBuffer2+0x1ae>
	     	{
	     		uint8_t target_tmp1=*menu_vars_var ;   // this can be put anywhere now
 800465c:	4b3b      	ldr	r3, [pc, #236]	; (800474c <displayBuffer2+0x1f4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	71fb      	strb	r3, [r7, #7]
	     		if (target_tmp1>=menu_lookup_count) target_tmp1=0;    // check in case
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	2b41      	cmp	r3, #65	; 0x41
 8004668:	d901      	bls.n	800466e <displayBuffer2+0x116>
 800466a:	2300      	movs	r3, #0
 800466c:	71fb      	strb	r3, [r7, #7]
	     		if (target_display==1) memcpy(default_menu3+feedback_loc+8, *(menu_titles_final+target_tmp1),8);  // copy info for LFO
 800466e:	4b3b      	ldr	r3, [pc, #236]	; (800475c <displayBuffer2+0x204>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d10c      	bne.n	8004690 <displayBuffer2+0x138>
 8004676:	88bb      	ldrh	r3, [r7, #4]
 8004678:	3308      	adds	r3, #8
 800467a:	4a35      	ldr	r2, [pc, #212]	; (8004750 <displayBuffer2+0x1f8>)
 800467c:	1898      	adds	r0, r3, r2
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4a2d      	ldr	r2, [pc, #180]	; (8004738 <displayBuffer2+0x1e0>)
 8004684:	4413      	add	r3, r2
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2208      	movs	r2, #8
 800468a:	4619      	mov	r1, r3
 800468c:	f008 ff72 	bl	800d574 <memcpy>
	     		if (target_display==2) memcpy(default_menu3+feedback_loc+8, *(patch_inputs+target_tmp1),8);  // Limited atm
 8004690:	4b32      	ldr	r3, [pc, #200]	; (800475c <displayBuffer2+0x204>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d10c      	bne.n	80046b2 <displayBuffer2+0x15a>
 8004698:	88bb      	ldrh	r3, [r7, #4]
 800469a:	3308      	adds	r3, #8
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <displayBuffer2+0x1f8>)
 800469e:	1898      	adds	r0, r3, r2
 80046a0:	79fb      	ldrb	r3, [r7, #7]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a2e      	ldr	r2, [pc, #184]	; (8004760 <displayBuffer2+0x208>)
 80046a6:	4413      	add	r3, r2
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	4619      	mov	r1, r3
 80046ae:	f008 ff61 	bl	800d574 <memcpy>
	     	//	if (target_display==3) memcpy(LCD_Info+3,  *(patch[].target+target_tmp1),8);  // Limited atm
	     		if  (target_display==3)   //  patch feedback works ok
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <displayBuffer2+0x204>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b03      	cmp	r3, #3
 80046b8:	d125      	bne.n	8004706 <displayBuffer2+0x1ae>
	     		    {    if (LFO_sqr_list[menu_index_in&7])   {memcpy(LCD_Info+3,  menu_titles_final[sqr_target_list[menu_index_in&7]],6);LCD_Info[10]=LFO_sqr_list[menu_index_in&7];
 80046ba:	4b23      	ldr	r3, [pc, #140]	; (8004748 <displayBuffer2+0x1f0>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	4a28      	ldr	r2, [pc, #160]	; (8004764 <displayBuffer2+0x20c>)
 80046c4:	5cd3      	ldrb	r3, [r2, r3]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d017      	beq.n	80046fa <displayBuffer2+0x1a2>
 80046ca:	4827      	ldr	r0, [pc, #156]	; (8004768 <displayBuffer2+0x210>)
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <displayBuffer2+0x1f0>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <displayBuffer2+0x214>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	461a      	mov	r2, r3
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <displayBuffer2+0x1e0>)
 80046dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e0:	2206      	movs	r2, #6
 80046e2:	4619      	mov	r1, r3
 80046e4:	f008 ff46 	bl	800d574 <memcpy>
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <displayBuffer2+0x1f0>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <displayBuffer2+0x20c>)
 80046f2:	5cd2      	ldrb	r2, [r2, r3]
 80046f4:	4b1e      	ldr	r3, [pc, #120]	; (8004770 <displayBuffer2+0x218>)
 80046f6:	729a      	strb	r2, [r3, #10]
 80046f8:	e005      	b.n	8004706 <displayBuffer2+0x1ae>

	     		    }  // ok
	     		 else memcpy(LCD_Info+3,"        ",8); //11
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <displayBuffer2+0x210>)
 80046fc:	2208      	movs	r2, #8
 80046fe:	491d      	ldr	r1, [pc, #116]	; (8004774 <displayBuffer2+0x21c>)
 8004700:	4618      	mov	r0, r3
 8004702:	f008 ff37 	bl	800d574 <memcpy>
	     		    }
	     	}

	     target_display=0;
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <displayBuffer2+0x204>)
 8004708:	2200      	movs	r2, #0
 800470a:	701a      	strb	r2, [r3, #0]





	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <displayBuffer2+0x220>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b11      	cmp	r3, #17
 8004712:	d103      	bne.n	800471c <displayBuffer2+0x1c4>
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <displayBuffer2+0x220>)
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]


    }    // displayBuffer2
 800471a:	e005      	b.n	8004728 <displayBuffer2+0x1d0>
	     if (disp_stepper==17) {disp_stepper=0;  }     else disp_stepper++;				// count to 16 also make sure full loop before skip lines
 800471c:	4b16      	ldr	r3, [pc, #88]	; (8004778 <displayBuffer2+0x220>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	b2da      	uxtb	r2, r3
 8004724:	4b14      	ldr	r3, [pc, #80]	; (8004778 <displayBuffer2+0x220>)
 8004726:	701a      	strb	r2, [r3, #0]
    }    // displayBuffer2
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20008f40 	.word	0x20008f40
 8004734:	2000d49c 	.word	0x2000d49c
 8004738:	20000000 	.word	0x20000000
 800473c:	2000e0a0 	.word	0x2000e0a0
 8004740:	0800dd44 	.word	0x0800dd44
 8004744:	2000dc9c 	.word	0x2000dc9c
 8004748:	2000e0a8 	.word	0x2000e0a8
 800474c:	2000e09c 	.word	0x2000e09c
 8004750:	20008fdc 	.word	0x20008fdc
 8004754:	200095bc 	.word	0x200095bc
 8004758:	200108d9 	.word	0x200108d9
 800475c:	2000e0af 	.word	0x2000e0af
 8004760:	20000108 	.word	0x20000108
 8004764:	20011ae8 	.word	0x20011ae8
 8004768:	20011cf7 	.word	0x20011cf7
 800476c:	20011d58 	.word	0x20011d58
 8004770:	20011cf4 	.word	0x20011cf4
 8004774:	0800dd38 	.word	0x0800dd38
 8004778:	20008e18 	.word	0x20008e18

0800477c <SPI_command>:

void SPI_command(void){
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
// pins are all good , SPI is always the problem!!!
if ((spi_enable==0)&& (spi_send==1)){				//if data sent and next byte is ready ,creates the actual bytes sent
 8004782:	4b18      	ldr	r3, [pc, #96]	; (80047e4 <SPI_command+0x68>)
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d128      	bne.n	80047dc <SPI_command+0x60>
 800478a:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <SPI_command+0x6c>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d124      	bne.n	80047dc <SPI_command+0x60>

uint8_t spi_store[5];

	//clk_pin=(i&1)^1;
		//bsrr_long=0;
		if (spi_hold>>8) spi_byte=248; else {spi_byte=250;}  //start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <SPI_command+0x70>)
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <SPI_command+0x2a>
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <SPI_command+0x74>)
 80047a0:	22f8      	movs	r2, #248	; 0xf8
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	e002      	b.n	80047ac <SPI_command+0x30>
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <SPI_command+0x74>)
 80047a8:	22fa      	movs	r2, #250	; 0xfa
 80047aa:	701a      	strb	r2, [r3, #0]

	spi_store[0]=spi_byte&255;
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <SPI_command+0x74>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	703b      	strb	r3, [r7, #0]
	spi_store[1]=((spi_hold>>4)<<4)&255;
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <SPI_command+0x70>)
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	707b      	strb	r3, [r7, #1]
	spi_store[2]=((spi_hold&15)<<4)&255;
 80047c0:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <SPI_command+0x70>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	70bb      	strb	r3, [r7, #2]

// send this to spi for now
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_store, 3,3
 80047ca:	4639      	mov	r1, r7
 80047cc:	2303      	movs	r3, #3
 80047ce:	2203      	movs	r2, #3
 80047d0:	4808      	ldr	r0, [pc, #32]	; (80047f4 <SPI_command+0x78>)
 80047d2:	f006 f9cc 	bl	800ab6e <HAL_SPI_Transmit>
			);  // working good


//HAL_Delay(10);
	spi_enable=1; }
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <SPI_command+0x68>)
 80047d8:	2201      	movs	r2, #1
 80047da:	801a      	strh	r2, [r3, #0]
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	2000bef4 	.word	0x2000bef4
 80047e8:	2000befa 	.word	0x2000befa
 80047ec:	2000bef8 	.word	0x2000bef8
 80047f0:	2000bef6 	.word	0x2000bef6
 80047f4:	20012b30 	.word	0x20012b30

080047f8 <display_init>:

void display_init(void){
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
	//uint8_t sp2_command=0xf8+(0<<1);
		 // uint16_t disp[]={  304,304,304,270,257,268,384,258,51,51,52,53,54,55,56,57,58,0};  // normal characters
		 uint16_t disp[]={  304,268,257,262,308,310,310,51,51,52,53,54,55,56,57,58,0};  // this should work for gd 310 is extended instruction
 80047fe:	4b22      	ldr	r3, [pc, #136]	; (8004888 <display_init+0x90>)
 8004800:	1d3c      	adds	r4, r7, #4
 8004802:	461d      	mov	r5, r3
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800480a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	8023      	strh	r3, [r4, #0]
		  if (spi_send==0){         // sets data byte
 8004810:	4b1e      	ldr	r3, [pc, #120]	; (800488c <display_init+0x94>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d132      	bne.n	800487e <display_init+0x86>

switch(init){     //Remember every line advances +char on display ,,all this is mostly unneeded

default : init_b=init-6;displayBuffer2 ();spi_hold=spell[init_b];break; //initial menu write either page ,skip after
 8004818:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <display_init+0x98>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b06      	subs	r3, #6
 8004820:	b29a      	uxth	r2, r3
 8004822:	4b1c      	ldr	r3, [pc, #112]	; (8004894 <display_init+0x9c>)
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	f7ff fe97 	bl	8004558 <displayBuffer2>
 800482a:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <display_init+0x9c>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <display_init+0xa0>)
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	b29a      	uxth	r2, r3
 8004836:	4b19      	ldr	r3, [pc, #100]	; (800489c <display_init+0xa4>)
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	bf00      	nop
}


if (init<6)	{HAL_Delay(3);spi_hold=disp[init]  ; } //delay needs to go
 800483c:	4b14      	ldr	r3, [pc, #80]	; (8004890 <display_init+0x98>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b05      	cmp	r3, #5
 8004842:	d80b      	bhi.n	800485c <display_init+0x64>
 8004844:	2003      	movs	r0, #3
 8004846:	f002 fdb5 	bl	80073b4 <HAL_Delay>
 800484a:	4b11      	ldr	r3, [pc, #68]	; (8004890 <display_init+0x98>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	3328      	adds	r3, #40	; 0x28
 8004852:	443b      	add	r3, r7
 8004854:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004858:	4b10      	ldr	r3, [pc, #64]	; (800489c <display_init+0xa4>)
 800485a:	801a      	strh	r2, [r3, #0]

init++;   // after 6 it quits the rest is not needed
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <display_init+0x98>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <display_init+0x98>)
 8004866:	701a      	strb	r2, [r3, #0]
spi_send=1;SPI_command();spi_send=0;spi_enable=0;
 8004868:	4b08      	ldr	r3, [pc, #32]	; (800488c <display_init+0x94>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	f7ff ff85 	bl	800477c <SPI_command>
 8004872:	4b06      	ldr	r3, [pc, #24]	; (800488c <display_init+0x94>)
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
 8004878:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <display_init+0xa8>)
 800487a:	2200      	movs	r2, #0
 800487c:	801a      	strh	r2, [r3, #0]


		  }

		//  if (init==5) display_fill();
}
 800487e:	bf00      	nop
 8004880:	3728      	adds	r7, #40	; 0x28
 8004882:	46bd      	mov	sp, r7
 8004884:	bdb0      	pop	{r4, r5, r7, pc}
 8004886:	bf00      	nop
 8004888:	0800dd48 	.word	0x0800dd48
 800488c:	2000befa 	.word	0x2000befa
 8004890:	2000befb 	.word	0x2000befb
 8004894:	2000befc 	.word	0x2000befc
 8004898:	20008cc8 	.word	0x20008cc8
 800489c:	2000bef8 	.word	0x2000bef8
 80048a0:	2000bef4 	.word	0x2000bef4

080048a4 <gfx_TX_block>:
			if (gfx_send_counter==1151 ) { gfx_send_counter=0; disp_end=1; gfx_send_counter2=0;    } else gfx_send_counter++; ;

			} HAL_SPI_Transmit_DMA(&hspi2,spi_store,54);  // ok

}
void gfx_TX_block(void){         // send spi to lcd from gfx ram , full page needed initially as it writes commands as well
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0


			uint8_t spi_store[3];
			uint8_t spi_store2=0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
			uint8_t spi_store3=0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	72bb      	strb	r3, [r7, #10]
			uint16_t  up_counter=0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	81bb      	strh	r3, [r7, #12]
			uint8_t line_counter=0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	72fb      	strb	r3, [r7, #11]

			gfx_send_counter=0;
 80048ba:	4b25      	ldr	r3, [pc, #148]	; (8004950 <gfx_TX_block+0xac>)
 80048bc:	2200      	movs	r2, #0
 80048be:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 80048c0:	2300      	movs	r3, #0
 80048c2:	81bb      	strh	r3, [r7, #12]
 80048c4:	e034      	b.n	8004930 <gfx_TX_block+0x8c>


			    spi_store3=gfx_ram[gfx_send_counter];
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <gfx_TX_block+0xac>)
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b21      	ldr	r3, [pc, #132]	; (8004954 <gfx_TX_block+0xb0>)
 80048ce:	5c9b      	ldrb	r3, [r3, r2]
 80048d0:	72bb      	strb	r3, [r7, #10]
			    if (line_counter>1) {spi_store2=250;					// 2ms delay between location commands , data is ok full speed
 80048d2:	7afb      	ldrb	r3, [r7, #11]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d902      	bls.n	80048de <gfx_TX_block+0x3a>
 80048d8:	23fa      	movs	r3, #250	; 0xfa
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e001      	b.n	80048e2 <gfx_TX_block+0x3e>
			}
			else {spi_store2=248;    }//start with msb ,dont forget flip around at end, 250 =data ,248= command if below 8bit
 80048de:	23f8      	movs	r3, #248	; 0xf8
 80048e0:	73fb      	strb	r3, [r7, #15]

					spi_store[0]=spi_store2;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	713b      	strb	r3, [r7, #4]
					spi_store[1]=((spi_store3>>4)<<4);
 80048e6:	7abb      	ldrb	r3, [r7, #10]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	717b      	strb	r3, [r7, #5]
					spi_store[2]=((spi_store3&15)<<4);
 80048f2:	7abb      	ldrb	r3, [r7, #10]
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	71bb      	strb	r3, [r7, #6]
					memcpy(spi_tx_block+up_counter,spi_store,3);
 80048fa:	89bb      	ldrh	r3, [r7, #12]
 80048fc:	4a16      	ldr	r2, [pc, #88]	; (8004958 <gfx_TX_block+0xb4>)
 80048fe:	4413      	add	r3, r2
 8004900:	461a      	mov	r2, r3
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	8819      	ldrh	r1, [r3, #0]
 8004906:	789b      	ldrb	r3, [r3, #2]
 8004908:	8011      	strh	r1, [r2, #0]
 800490a:	7093      	strb	r3, [r2, #2]
					if (line_counter==17 ) { line_counter=0;    } else line_counter++; //
 800490c:	7afb      	ldrb	r3, [r7, #11]
 800490e:	2b11      	cmp	r3, #17
 8004910:	d102      	bne.n	8004918 <gfx_TX_block+0x74>
 8004912:	2300      	movs	r3, #0
 8004914:	72fb      	strb	r3, [r7, #11]
 8004916:	e002      	b.n	800491e <gfx_TX_block+0x7a>
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	3301      	adds	r3, #1
 800491c:	72fb      	strb	r3, [r7, #11]
			 gfx_send_counter++; ;
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <gfx_TX_block+0xac>)
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <gfx_TX_block+0xac>)
 8004928:	801a      	strh	r2, [r3, #0]
			for (up_counter=0;up_counter<3456;up_counter=up_counter+3){     // no more than one line then needs pause
 800492a:	89bb      	ldrh	r3, [r7, #12]
 800492c:	3303      	adds	r3, #3
 800492e:	81bb      	strh	r3, [r7, #12]
 8004930:	89bb      	ldrh	r3, [r7, #12]
 8004932:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 8004936:	d3c6      	bcc.n	80048c6 <gfx_TX_block+0x22>

			} ;  // ok
			gfx_send_counter=0; disp_end=1;
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <gfx_TX_block+0xac>)
 800493a:	2200      	movs	r2, #0
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	4b07      	ldr	r3, [pc, #28]	; (800495c <gfx_TX_block+0xb8>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]

}
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	2000c896 	.word	0x2000c896
 8004954:	2000c414 	.word	0x2000c414
 8004958:	20010ae4 	.word	0x20010ae4
 800495c:	2000c8a2 	.word	0x2000c8a2

08004960 <gfx_clear>:

void gfx_clear(void){     // simple gfx ram clear ,besides feedback
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0

	for (n=0;n<1152 ;n=n+18)    {
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <gfx_clear+0x6c>)
 8004966:	2200      	movs	r2, #0
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	e01c      	b.n	80049a6 <gfx_clear+0x46>
				for (i=2;i<18;i++){ gfx_ram[n+i] =0;
 800496c:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <gfx_clear+0x70>)
 800496e:	2202      	movs	r2, #2
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e00e      	b.n	8004992 <gfx_clear+0x32>
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <gfx_clear+0x6c>)
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <gfx_clear+0x70>)
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	4413      	add	r3, r2
 8004980:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <gfx_clear+0x74>)
 8004982:	2100      	movs	r1, #0
 8004984:	54d1      	strb	r1, [r2, r3]
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <gfx_clear+0x70>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	3301      	adds	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <gfx_clear+0x70>)
 8004990:	801a      	strh	r2, [r3, #0]
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <gfx_clear+0x70>)
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	2b11      	cmp	r3, #17
 8004998:	d9ec      	bls.n	8004974 <gfx_clear+0x14>
	for (n=0;n<1152 ;n=n+18)    {
 800499a:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <gfx_clear+0x6c>)
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	3312      	adds	r3, #18
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <gfx_clear+0x6c>)
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	4b09      	ldr	r3, [pc, #36]	; (80049cc <gfx_clear+0x6c>)
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80049ae:	d3dd      	bcc.n	800496c <gfx_clear+0xc>

				}  }
	 gfx_send_swap=0;  // disable line skip
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <gfx_clear+0x78>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
	 gfx_send_counter=0;    //reset page
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <gfx_clear+0x7c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	801a      	strh	r2, [r3, #0]
	 disp_end=0;     //  should disable display process till one page
 80049bc:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <gfx_clear+0x80>)
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]

}
 80049c2:	bf00      	nop
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	200096ac 	.word	0x200096ac
 80049d0:	200096b2 	.word	0x200096b2
 80049d4:	2000c414 	.word	0x2000c414
 80049d8:	2000c898 	.word	0x2000c898
 80049dc:	2000c896 	.word	0x2000c896
 80049e0:	2000c8a2 	.word	0x2000c8a2

080049e4 <display_clear>:

		 gfx_send();

	 }  }

void display_clear (void){ //  simple character clear on default menu3
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0

	uint16_t disp_counter=0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	80fb      	strh	r3, [r7, #6]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80049ee:	2300      	movs	r3, #0
 80049f0:	80fb      	strh	r3, [r7, #6]
 80049f2:	e006      	b.n	8004a02 <display_clear+0x1e>
		default_menu3[disp_counter]=47;
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <display_clear+0x34>)
 80049f8:	212f      	movs	r1, #47	; 0x2f
 80049fa:	54d1      	strb	r1, [r2, r3]
	for (disp_counter=0;disp_counter<1024;disp_counter++){
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	3301      	adds	r3, #1
 8004a00:	80fb      	strh	r3, [r7, #6]
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a08:	d3f4      	bcc.n	80049f4 <display_clear+0x10>
	}


}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	20008fdc 	.word	0x20008fdc

08004a1c <display_generate>:
void display_generate(void){    // display character generate, 1+1+16 chars
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
uint8_t counter;
	gfx_clear_flag=0;
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <display_generate+0x1c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
//	for (counter=0;counter<18;counter++) {
	display_process();
 8004a26:	f7ff fd8f 	bl	8004548 <display_process>
		  displayBuffer2(); // 5 cycles max for the lot or  0.2ms
 8004a2a:	f7ff fd95 	bl	8004558 <displayBuffer2>
	// if(!gfx_clear_flag)   gfx_send_swap=1;   // enable line swapping
	 disp_end=0;   ///reset till next full page
 8004a2e:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <display_generate+0x20>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]

	//  if (!disp_stepper) break;

}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	2000e0b2 	.word	0x2000e0b2
 8004a3c:	2000c8a2 	.word	0x2000c8a2

08004a40 <gfx_line_fill>:



}

void gfx_line_fill (){   // fills a line to gfx_ram from default_menu3 also fills gfx_block
 8004a40:	b480      	push	{r7}
 8004a42:	b08b      	sub	sp, #44	; 0x2c
 8004a44:	af00      	add	r7, sp, #0
		    // this now is the  emain char to disp
   // uint8_t line_selected=(loop_counter&7)+((menu_title_lut[enc_out1]>>7)*8);

    uint16_t cursor= menu_title_lut[enc_out1];
 8004a46:	4b5c      	ldr	r3, [pc, #368]	; (8004bb8 <gfx_line_fill+0x178>)
 8004a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b5b      	ldr	r3, [pc, #364]	; (8004bbc <gfx_line_fill+0x17c>)
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t line_selected=(loop_counter&7)+((cursor>>7)*8);    // thsi needs to be 1024/16
 8004a56:	4b5a      	ldr	r3, [pc, #360]	; (8004bc0 <gfx_line_fill+0x180>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a64:	09db      	lsrs	r3, r3, #7
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	847b      	strh	r3, [r7, #34]	; 0x22
    uint16_t start_line=(line_selected&7)*144;
 8004a70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	00d2      	lsls	r2, r2, #3
 8004a7c:	4413      	add	r3, r2
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	843b      	strh	r3, [r7, #32]
     uint16_t end_line=start_line+144;
 8004a82:	8c3b      	ldrh	r3, [r7, #32]
 8004a84:	3390      	adds	r3, #144	; 0x90
 8004a86:	83fb      	strh	r3, [r7, #30]
     disp_end=1;
 8004a88:	4b4e      	ldr	r3, [pc, #312]	; (8004bc4 <gfx_line_fill+0x184>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
   //  uint8_t  character=default_menu3[(i-2)+(line_selected*16)]-47;
    uint8_t char_skip=0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     uint16_t character;
     uint8_t spi_store[3];
     uint8_t spi_store3=0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	777b      	strb	r3, [r7, #29]
     uint8_t reverse[16]={0};
 8004a98:	2300      	movs	r3, #0
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	605a      	str	r2, [r3, #4]
 8004aa6:	609a      	str	r2, [r3, #8]



     if ((cursor>>4) == line_selected)    reverse [(cursor&15)]=1;
 8004aa8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d107      	bne.n	8004ac4 <gfx_line_fill+0x84>
 8004ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	3328      	adds	r3, #40	; 0x28
 8004abc:	443b      	add	r3, r7
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f803 2c24 	strb.w	r2, [r3, #-36]

     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8004ac4:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <gfx_line_fill+0x188>)
 8004ac6:	8c3b      	ldrh	r3, [r7, #32]
 8004ac8:	8013      	strh	r3, [r2, #0]
 8004aca:	e068      	b.n	8004b9e <gfx_line_fill+0x15e>

	 for (i=0;i<16;i++){
 8004acc:	4b3f      	ldr	r3, [pc, #252]	; (8004bcc <gfx_line_fill+0x18c>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	e055      	b.n	8004b80 <gfx_line_fill+0x140>
		 character=((default_menu3[i+(line_selected*16)]-47)*8)+char_skip;
 8004ad4:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <gfx_line_fill+0x18c>)
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	4413      	add	r3, r2
 8004ae0:	4a3b      	ldr	r2, [pc, #236]	; (8004bd0 <gfx_line_fill+0x190>)
 8004ae2:	5cd3      	ldrb	r3, [r2, r3]
 8004ae4:	3b2f      	subs	r3, #47	; 0x2f
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	837b      	strh	r3, [r7, #26]
		 spi_store3= gfx_char[character&1023 ];     // limited characters
 8004af6:	8b7b      	ldrh	r3, [r7, #26]
 8004af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004afc:	4a35      	ldr	r2, [pc, #212]	; (8004bd4 <gfx_line_fill+0x194>)
 8004afe:	5cd3      	ldrb	r3, [r2, r3]
 8004b00:	777b      	strb	r3, [r7, #29]
		spi_store3=spi_store3^(reverse[i]*127);
 8004b02:	4b32      	ldr	r3, [pc, #200]	; (8004bcc <gfx_line_fill+0x18c>)
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	443b      	add	r3, r7
 8004b0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	01d2      	lsls	r2, r2, #7
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	b25a      	sxtb	r2, r3
 8004b18:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004b1c:	4053      	eors	r3, r2
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	777b      	strb	r3, [r7, #29]
		 gfx_ram[n+i+2]=spi_store3;
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <gfx_line_fill+0x188>)
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <gfx_line_fill+0x18c>)
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3302      	adds	r3, #2
 8004b30:	4929      	ldr	r1, [pc, #164]	; (8004bd8 <gfx_line_fill+0x198>)
 8004b32:	7f7a      	ldrb	r2, [r7, #29]
 8004b34:	54ca      	strb	r2, [r1, r3]

						    spi_store[0]=250;
 8004b36:	23fa      	movs	r3, #250	; 0xfa
 8004b38:	753b      	strb	r3, [r7, #20]
						    spi_store[1]=((spi_store3>>4)<<4);
 8004b3a:	7f7b      	ldrb	r3, [r7, #29]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	757b      	strb	r3, [r7, #21]
						    spi_store[2]=((spi_store3&15)<<4);
 8004b46:	7f7b      	ldrb	r3, [r7, #29]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	75bb      	strb	r3, [r7, #22]
						    memcpy(spi_tx_block+(((n+i)*3)+6),spi_store,3);  // writes only data no command
 8004b4e:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <gfx_line_fill+0x188>)
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <gfx_line_fill+0x18c>)
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	441a      	add	r2, r3
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	4413      	add	r3, r2
 8004b60:	3306      	adds	r3, #6
 8004b62:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <gfx_line_fill+0x19c>)
 8004b64:	4413      	add	r3, r2
 8004b66:	461a      	mov	r2, r3
 8004b68:	f107 0314 	add.w	r3, r7, #20
 8004b6c:	8819      	ldrh	r1, [r3, #0]
 8004b6e:	789b      	ldrb	r3, [r3, #2]
 8004b70:	8011      	strh	r1, [r2, #0]
 8004b72:	7093      	strb	r3, [r2, #2]
	 for (i=0;i<16;i++){
 8004b74:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <gfx_line_fill+0x18c>)
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <gfx_line_fill+0x18c>)
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <gfx_line_fill+0x18c>)
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d9a5      	bls.n	8004ad4 <gfx_line_fill+0x94>
		     }
	char_skip++;
 8004b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
     for (n=start_line;n<end_line ;n=n+18)    {    //  8*18   , 0-1152
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <gfx_line_fill+0x188>)
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	3312      	adds	r3, #18
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <gfx_line_fill+0x188>)
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <gfx_line_fill+0x188>)
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	8bfa      	ldrh	r2, [r7, #30]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d891      	bhi.n	8004acc <gfx_line_fill+0x8c>
    }
    }
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	372c      	adds	r7, #44	; 0x2c
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	20008f40 	.word	0x20008f40
 8004bbc:	2000d49c 	.word	0x2000d49c
 8004bc0:	200096ae 	.word	0x200096ae
 8004bc4:	2000c8a2 	.word	0x2000c8a2
 8004bc8:	200096ac 	.word	0x200096ac
 8004bcc:	200096b2 	.word	0x200096b2
 8004bd0:	20008fdc 	.word	0x20008fdc
 8004bd4:	0800eee8 	.word	0x0800eee8
 8004bd8:	2000c414 	.word	0x2000c414
 8004bdc:	20010ae4 	.word	0x20010ae4

08004be0 <encoder2>:


void encoder2(void){  // encoder pos and data input
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0


	uint8_t crap_hold9=(menu_title_lut[enc_out1]>>16)&255;
 8004be6:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <encoder2+0x1a4>)
 8004be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bec:	461a      	mov	r2, r3
 8004bee:	4b66      	ldr	r3, [pc, #408]	; (8004d88 <encoder2+0x1a8>)
 8004bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	71fb      	strb	r3, [r7, #7]

	    memcpy(menu_vars_in,*(menu_titles_final+crap_hold9),8);	// send back for menu vars ok
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4a63      	ldr	r2, [pc, #396]	; (8004d8c <encoder2+0x1ac>)
 8004bfe:	4413      	add	r3, r2
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <encoder2+0x1b0>)
 8004c04:	6810      	ldr	r0, [r2, #0]
 8004c06:	6851      	ldr	r1, [r2, #4]
 8004c08:	c303      	stmia	r3!, {r0, r1}
	     char temp_char[]="  ";
 8004c0a:	4a62      	ldr	r2, [pc, #392]	; (8004d94 <encoder2+0x1b4>)
 8004c0c:	1d3b      	adds	r3, r7, #4
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	4611      	mov	r1, r2
 8004c12:	8019      	strh	r1, [r3, #0]
 8004c14:	3302      	adds	r3, #2
 8004c16:	0c12      	lsrs	r2, r2, #16
 8004c18:	701a      	strb	r2, [r3, #0]
				     memcpy(temp_char,menu_index_list+((enc_out1*2)),2);   // copy char to char,ok
 8004c1a:	4b5a      	ldr	r3, [pc, #360]	; (8004d84 <encoder2+0x1a4>)
 8004c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	461a      	mov	r2, r3
 8004c24:	4b5c      	ldr	r3, [pc, #368]	; (8004d98 <encoder2+0x1b8>)
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	80bb      	strh	r3, [r7, #4]
				     menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	4618      	mov	r0, r3
 8004c32:	f008 fc71 	bl	800d518 <atoi>
 8004c36:	4603      	mov	r3, r0
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4b58      	ldr	r3, [pc, #352]	; (8004d9c <encoder2+0x1bc>)
 8004c3c:	701a      	strb	r2, [r3, #0]
	    menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004c3e:	4b57      	ldr	r3, [pc, #348]	; (8004d9c <encoder2+0x1bc>)
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4619      	mov	r1, r3
 8004c44:	4852      	ldr	r0, [pc, #328]	; (8004d90 <encoder2+0x1b0>)
 8004c46:	f7fb ffa7 	bl	8000b98 <menu_vars>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4a54      	ldr	r2, [pc, #336]	; (8004da0 <encoder2+0x1c0>)
 8004c4e:	6013      	str	r3, [r2, #0]
		if ((*menu_vars_var)>menu_vars_limiter[menu_vars_ref])     *menu_vars_var=menu_vars_limiter[menu_vars_ref];   // limit value sher too
 8004c50:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <encoder2+0x1c0>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	4b53      	ldr	r3, [pc, #332]	; (8004da4 <encoder2+0x1c4>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4b52      	ldr	r3, [pc, #328]	; (8004da8 <encoder2+0x1c8>)
 8004c5e:	5c5b      	ldrb	r3, [r3, r1]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d907      	bls.n	8004c74 <encoder2+0x94>
 8004c64:	4b4f      	ldr	r3, [pc, #316]	; (8004da4 <encoder2+0x1c4>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4b4d      	ldr	r3, [pc, #308]	; (8004da0 <encoder2+0x1c0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4e      	ldr	r2, [pc, #312]	; (8004da8 <encoder2+0x1c8>)
 8004c70:	5c52      	ldrb	r2, [r2, r1]
 8004c72:	701a      	strb	r2, [r3, #0]

	    // input encode ------------------------
	    if ((enc_dir!=enc_mem_dir)  )    ///write back value if encoder changed ;
 8004c74:	4b4d      	ldr	r3, [pc, #308]	; (8004dac <encoder2+0x1cc>)
 8004c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <encoder2+0x1d0>)
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d024      	beq.n	8004cce <encoder2+0xee>
	    {
		if (enc_dir>enc_mem_dir) 							*menu_vars_var=((*menu_vars_var)+1)&255;
 8004c84:	4b49      	ldr	r3, [pc, #292]	; (8004dac <encoder2+0x1cc>)
 8004c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	4b48      	ldr	r3, [pc, #288]	; (8004db0 <encoder2+0x1d0>)
 8004c8e:	881b      	ldrh	r3, [r3, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	dd07      	ble.n	8004ca4 <encoder2+0xc4>
 8004c94:	4b42      	ldr	r3, [pc, #264]	; (8004da0 <encoder2+0x1c0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	781a      	ldrb	r2, [r3, #0]
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <encoder2+0x1c0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3201      	adds	r2, #1
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
	    if ((enc_dir<enc_mem_dir)&&(*menu_vars_var))		 *menu_vars_var=((*menu_vars_var)-1)&255;
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <encoder2+0x1cc>)
 8004ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b40      	ldr	r3, [pc, #256]	; (8004db0 <encoder2+0x1d0>)
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	da0c      	bge.n	8004cce <encoder2+0xee>
 8004cb4:	4b3a      	ldr	r3, [pc, #232]	; (8004da0 <encoder2+0x1c0>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <encoder2+0xee>
 8004cbe:	4b38      	ldr	r3, [pc, #224]	; (8004da0 <encoder2+0x1c0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	781a      	ldrb	r2, [r3, #0]
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <encoder2+0x1c0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
	    }
	    enc_mem_dir=enc_dir;
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <encoder2+0x1cc>)
 8004cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <encoder2+0x1d0>)
 8004cd8:	801a      	strh	r2, [r3, #0]

	    // location encode ------------------------

	    if ((enc2_dir!=enc2_mem_dir)  )    ///write back value if encoder changed ;
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <encoder2+0x1d4>)
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <encoder2+0x1d8>)
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d01d      	beq.n	8004d22 <encoder2+0x142>
	   	    {
	   		if (enc2_dir>enc2_mem_dir) 							enc_out1++;
 8004ce6:	4b33      	ldr	r3, [pc, #204]	; (8004db4 <encoder2+0x1d4>)
 8004ce8:	881a      	ldrh	r2, [r3, #0]
 8004cea:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <encoder2+0x1d8>)
 8004cec:	881b      	ldrh	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d908      	bls.n	8004d04 <encoder2+0x124>
 8004cf2:	4b24      	ldr	r3, [pc, #144]	; (8004d84 <encoder2+0x1a4>)
 8004cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b21a      	sxth	r2, r3
 8004d00:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <encoder2+0x1a4>)
 8004d02:	801a      	strh	r2, [r3, #0]
	   	    if ((enc2_dir<enc2_mem_dir))		enc_out1--;
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <encoder2+0x1d4>)
 8004d06:	881a      	ldrh	r2, [r3, #0]
 8004d08:	4b2b      	ldr	r3, [pc, #172]	; (8004db8 <encoder2+0x1d8>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d208      	bcs.n	8004d22 <encoder2+0x142>
 8004d10:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <encoder2+0x1a4>)
 8004d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	b21a      	sxth	r2, r3
 8004d1e:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <encoder2+0x1a4>)
 8004d20:	801a      	strh	r2, [r3, #0]

	   	    }

	    if (page_skip)  {enc_out1=enc_out1+20; page_skip=0; }
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <encoder2+0x1dc>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00b      	beq.n	8004d44 <encoder2+0x164>
 8004d2c:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <encoder2+0x1a4>)
 8004d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3314      	adds	r3, #20
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b21a      	sxth	r2, r3
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <encoder2+0x1a4>)
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <encoder2+0x1dc>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	701a      	strb	r2, [r3, #0]
	    if (enc_out1>menu_title_count) enc_out1=0;
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <encoder2+0x1a4>)
 8004d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	; (8004dc0 <encoder2+0x1e0>)
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	dd02      	ble.n	8004d5a <encoder2+0x17a>
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <encoder2+0x1a4>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	801a      	strh	r2, [r3, #0]
	   	 if (enc_out1<0) enc_out1=menu_title_count;
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <encoder2+0x1a4>)
 8004d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da04      	bge.n	8004d6e <encoder2+0x18e>
 8004d64:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <encoder2+0x1e0>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b21a      	sxth	r2, r3
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <encoder2+0x1a4>)
 8004d6c:	801a      	strh	r2, [r3, #0]

	    enc2_mem_dir=enc2_dir;
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <encoder2+0x1d4>)
 8004d70:	881a      	ldrh	r2, [r3, #0]
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <encoder2+0x1d8>)
 8004d74:	801a      	strh	r2, [r3, #0]
	   //-------------------

		    enc2_add=0;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <encoder2+0x1e4>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]

    }
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20008f40 	.word	0x20008f40
 8004d88:	2000d49c 	.word	0x2000d49c
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	2000e0a0 	.word	0x2000e0a0
 8004d94:	0800dd44 	.word	0x0800dd44
 8004d98:	2000dc9c 	.word	0x2000dc9c
 8004d9c:	2000e0a8 	.word	0x2000e0a8
 8004da0:	2000e09c 	.word	0x2000e09c
 8004da4:	200108d9 	.word	0x200108d9
 8004da8:	0800ee60 	.word	0x0800ee60
 8004dac:	2000beec 	.word	0x2000beec
 8004db0:	20010ade 	.word	0x20010ade
 8004db4:	2000beea 	.word	0x2000beea
 8004db8:	2000e0ac 	.word	0x2000e0ac
 8004dbc:	2001258c 	.word	0x2001258c
 8004dc0:	2000d49a 	.word	0x2000d49a
 8004dc4:	2000beee 	.word	0x2000beee

08004dc8 <menu3_fill>:


    void menu3_fill(void){   // looping write into default_menu3
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
	uint16_t   enc_up=disp_up_counter;
 8004dce:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <menu3_fill+0x128>)
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	81fb      	strh	r3, [r7, #14]

	if(enc_up>menu_title_count) {enc_up=0; disp_up_counter=0;}
 8004dd4:	4b47      	ldr	r3, [pc, #284]	; (8004ef4 <menu3_fill+0x12c>)
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	89fa      	ldrh	r2, [r7, #14]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d904      	bls.n	8004de8 <menu3_fill+0x20>
 8004dde:	2300      	movs	r3, #0
 8004de0:	81fb      	strh	r3, [r7, #14]
 8004de2:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <menu3_fill+0x128>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]

	uint8_t crap_hold10=(menu_title_lut[enc_up]>>16)&255;   // look up up menu_titles_final
 8004de8:	89fb      	ldrh	r3, [r7, #14]
 8004dea:	4a43      	ldr	r2, [pc, #268]	; (8004ef8 <menu3_fill+0x130>)
 8004dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df0:	0c1b      	lsrs	r3, r3, #16
 8004df2:	737b      	strb	r3, [r7, #13]

	memcpy(menu_vars_in,*(menu_titles_final+crap_hold10),8);	// send back for menu vars ok
 8004df4:	7b7b      	ldrb	r3, [r7, #13]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4a40      	ldr	r2, [pc, #256]	; (8004efc <menu3_fill+0x134>)
 8004dfa:	4413      	add	r3, r2
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	4b40      	ldr	r3, [pc, #256]	; (8004f00 <menu3_fill+0x138>)
 8004e00:	6810      	ldr	r0, [r2, #0]
 8004e02:	6851      	ldr	r1, [r2, #4]
 8004e04:	c303      	stmia	r3!, {r0, r1}
	 char temp_char[]="  ";
 8004e06:	4a3f      	ldr	r2, [pc, #252]	; (8004f04 <menu3_fill+0x13c>)
 8004e08:	1d3b      	adds	r3, r7, #4
 8004e0a:	6812      	ldr	r2, [r2, #0]
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	8019      	strh	r1, [r3, #0]
 8004e10:	3302      	adds	r3, #2
 8004e12:	0c12      	lsrs	r2, r2, #16
 8004e14:	701a      	strb	r2, [r3, #0]
				 memcpy(temp_char,menu_index_list+((enc_up*2)),2);   // copy char to char,ok
 8004e16:	89fb      	ldrh	r3, [r7, #14]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <menu3_fill+0x140>)
 8004e1e:	4413      	add	r3, r2
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	80bb      	strh	r3, [r7, #4]
				 menu_index_in=atoi(temp_char)			;   // convert char to int,ok
 8004e26:	1d3b      	adds	r3, r7, #4
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f008 fb75 	bl	800d518 <atoi>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <menu3_fill+0x144>)
 8004e34:	701a      	strb	r2, [r3, #0]

	menu_vars_var=menu_vars(menu_vars_in,menu_index_in);		//test  for vars ok
 8004e36:	4b35      	ldr	r3, [pc, #212]	; (8004f0c <menu3_fill+0x144>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	4830      	ldr	r0, [pc, #192]	; (8004f00 <menu3_fill+0x138>)
 8004e3e:	f7fb feab 	bl	8000b98 <menu_vars>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4a32      	ldr	r2, [pc, #200]	; (8004f10 <menu3_fill+0x148>)
 8004e46:	6013      	str	r3, [r2, #0]

			lcd_out3=*menu_vars_var;
 8004e48:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <menu3_fill+0x148>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <menu3_fill+0x14c>)
 8004e52:	801a      	strh	r2, [r3, #0]

		if (enc_out1==enc_up) 	lcd_temp=lcd_out3;  // this may be a problem
 8004e54:	4b30      	ldr	r3, [pc, #192]	; (8004f18 <menu3_fill+0x150>)
 8004e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	89fb      	ldrh	r3, [r7, #14]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d104      	bne.n	8004e6c <menu3_fill+0xa4>
 8004e62:	4b2c      	ldr	r3, [pc, #176]	; (8004f14 <menu3_fill+0x14c>)
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <menu3_fill+0x154>)
 8004e6a:	701a      	strb	r2, [r3, #0]

		div_limit=lcd_out3;
 8004e6c:	4b29      	ldr	r3, [pc, #164]	; (8004f14 <menu3_fill+0x14c>)
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4b2b      	ldr	r3, [pc, #172]	; (8004f20 <menu3_fill+0x158>)
 8004e74:	701a      	strb	r2, [r3, #0]
			if (div_limit>9) div_limit=9;
 8004e76:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <menu3_fill+0x158>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b09      	cmp	r3, #9
 8004e7c:	d902      	bls.n	8004e84 <menu3_fill+0xbc>
 8004e7e:	4b28      	ldr	r3, [pc, #160]	; (8004f20 <menu3_fill+0x158>)
 8004e80:	2209      	movs	r2, #9
 8004e82:	701a      	strb	r2, [r3, #0]

		/*    if (lcd_out3>10)							div_limit= lcd_out3>>2;
				if (lcd_out3>40)							div_limit= lcd_out3>>5;*/


				uint16_t crap8=menu_title_lut[enc_up];
 8004e84:	89fb      	ldrh	r3, [r7, #14]
 8004e86:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <menu3_fill+0x130>)
 8004e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8c:	817b      	strh	r3, [r7, #10]

				default_menu3[crap8]=div_limit+48;
 8004e8e:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <menu3_fill+0x158>)
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	897b      	ldrh	r3, [r7, #10]
 8004e94:	3230      	adds	r2, #48	; 0x30
 8004e96:	b2d1      	uxtb	r1, r2
 8004e98:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <menu3_fill+0x15c>)
 8004e9a:	54d1      	strb	r1, [r2, r3]
				if (menu_vars_ref==53)  default_menu3[crap8]=lcd_out3;   // keep in char , ok
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <menu3_fill+0x160>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b35      	cmp	r3, #53	; 0x35
 8004ea2:	d105      	bne.n	8004eb0 <menu3_fill+0xe8>
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <menu3_fill+0x14c>)
 8004ea6:	881a      	ldrh	r2, [r3, #0]
 8004ea8:	897b      	ldrh	r3, [r7, #10]
 8004eaa:	b2d1      	uxtb	r1, r2
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <menu3_fill+0x15c>)
 8004eae:	54d1      	strb	r1, [r2, r3]

				if ((menu_vars_ref==24))  default_menu3[crap8]=major_notes[lcd_out3&31];
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <menu3_fill+0x160>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b18      	cmp	r3, #24
 8004eb6:	d108      	bne.n	8004eca <menu3_fill+0x102>
 8004eb8:	4b16      	ldr	r3, [pc, #88]	; (8004f14 <menu3_fill+0x14c>)
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	f003 021f 	and.w	r2, r3, #31
 8004ec0:	897b      	ldrh	r3, [r7, #10]
 8004ec2:	491a      	ldr	r1, [pc, #104]	; (8004f2c <menu3_fill+0x164>)
 8004ec4:	5c89      	ldrb	r1, [r1, r2]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	; (8004f24 <menu3_fill+0x15c>)
 8004ec8:	54d1      	strb	r1, [r2, r3]
				disp_up_counter++;
 8004eca:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <menu3_fill+0x128>)
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <menu3_fill+0x128>)
 8004ed4:	801a      	strh	r2, [r3, #0]
				if(disp_up_counter>menu_title_count) disp_up_counter=0;  // just auto scans lcd_data , can be an issue
 8004ed6:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <menu3_fill+0x128>)
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <menu3_fill+0x12c>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d902      	bls.n	8004ee8 <menu3_fill+0x120>
 8004ee2:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <menu3_fill+0x128>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	801a      	strh	r2, [r3, #0]

    }
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20010ae0 	.word	0x20010ae0
 8004ef4:	2000d49a 	.word	0x2000d49a
 8004ef8:	2000d49c 	.word	0x2000d49c
 8004efc:	20000000 	.word	0x20000000
 8004f00:	2000e0a0 	.word	0x2000e0a0
 8004f04:	0800dd44 	.word	0x0800dd44
 8004f08:	2000dc9c 	.word	0x2000dc9c
 8004f0c:	2000e0a8 	.word	0x2000e0a8
 8004f10:	2000e09c 	.word	0x2000e09c
 8004f14:	2000c8a0 	.word	0x2000c8a0
 8004f18:	20008f40 	.word	0x20008f40
 8004f1c:	2000e0ae 	.word	0x2000e0ae
 8004f20:	200108da 	.word	0x200108da
 8004f24:	20008fdc 	.word	0x20008fdc
 8004f28:	200108d9 	.word	0x200108d9
 8004f2c:	0800f2e8 	.word	0x0800f2e8

08004f30 <LCD_Info_feedback>:

    void LCD_Info_feedback(void){
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
	  potSource[380]=(lcd_temp/100) +48;  // still works   , potsource ref is located in feedback line var  ,was sendin x16 values
 8004f34:	4b6b      	ldr	r3, [pc, #428]	; (80050e4 <LCD_Info_feedback+0x1b4>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	4a6b      	ldr	r2, [pc, #428]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	3330      	adds	r3, #48	; 0x30
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	4b69      	ldr	r3, [pc, #420]	; (80050ec <LCD_Info_feedback+0x1bc>)
 8004f48:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c
			    potSource[381]=((lcd_temp %100)/10)+48;		 // 0-160 to 0-10
 8004f4c:	4b65      	ldr	r3, [pc, #404]	; (80050e4 <LCD_Info_feedback+0x1b4>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4a65      	ldr	r2, [pc, #404]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8004f52:	fba2 1203 	umull	r1, r2, r2, r3
 8004f56:	0952      	lsrs	r2, r2, #5
 8004f58:	2164      	movs	r1, #100	; 0x64
 8004f5a:	fb01 f202 	mul.w	r2, r1, r2
 8004f5e:	1a9b      	subs	r3, r3, r2
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <LCD_Info_feedback+0x1c0>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	3330      	adds	r3, #48	; 0x30
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <LCD_Info_feedback+0x1bc>)
 8004f72:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
			    potSource[382]=(lcd_temp%10)+48;
 8004f76:	4b5b      	ldr	r3, [pc, #364]	; (80050e4 <LCD_Info_feedback+0x1b4>)
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <LCD_Info_feedback+0x1c0>)
 8004f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f80:	08d9      	lsrs	r1, r3, #3
 8004f82:	460b      	mov	r3, r1
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	3330      	adds	r3, #48	; 0x30
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4b56      	ldr	r3, [pc, #344]	; (80050ec <LCD_Info_feedback+0x1bc>)
 8004f94:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e

			    LCD_Info[0]  =( seq.pos/100) +48;
 8004f98:	4b56      	ldr	r3, [pc, #344]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	4a52      	ldr	r2, [pc, #328]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	3330      	adds	r3, #48	; 0x30
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 8004fac:	701a      	strb	r2, [r3, #0]
			    LCD_Info[1]  =( (seq.pos%100) /10)+48;
 8004fae:	4b51      	ldr	r3, [pc, #324]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	4a4d      	ldr	r2, [pc, #308]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8004fb4:	fba2 1203 	umull	r1, r2, r2, r3
 8004fb8:	0952      	lsrs	r2, r2, #5
 8004fba:	2164      	movs	r1, #100	; 0x64
 8004fbc:	fb01 f202 	mul.w	r2, r1, r2
 8004fc0:	1a9b      	subs	r3, r3, r2
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	4a4a      	ldr	r2, [pc, #296]	; (80050f0 <LCD_Info_feedback+0x1c0>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	08db      	lsrs	r3, r3, #3
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	3330      	adds	r3, #48	; 0x30
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 8004fd4:	705a      	strb	r2, [r3, #1]
			    LCD_Info[2]  =( seq.pos%10)+48 ;
 8004fd6:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	4b45      	ldr	r3, [pc, #276]	; (80050f0 <LCD_Info_feedback+0x1c0>)
 8004fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe0:	08d9      	lsrs	r1, r3, #3
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	3330      	adds	r3, #48	; 0x30
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 8004ff4:	709a      	strb	r2, [r3, #2]

			    LCD_Info[11]  =( seq.pos>>6) +49;   // +1
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	099b      	lsrs	r3, r3, #6
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	3331      	adds	r3, #49	; 0x31
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 8005004:	72da      	strb	r2, [r3, #11]
			    LCD_Info[12]  =( (seq.pos&63)>>4) +49;
 8005006:	4b3b      	ldr	r3, [pc, #236]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	111b      	asrs	r3, r3, #4
 800500c:	b2db      	uxtb	r3, r3
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3331      	adds	r3, #49	; 0x31
 8005016:	b2da      	uxtb	r2, r3
 8005018:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 800501a:	731a      	strb	r2, [r3, #12]
			    LCD_Info[13]  =( (((seq.pos&15)+1)%100)/10)+48 ;
 800501c:	4b35      	ldr	r3, [pc, #212]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8005028:	fb83 1302 	smull	r1, r3, r3, r2
 800502c:	1159      	asrs	r1, r3, #5
 800502e:	17d3      	asrs	r3, r2, #31
 8005030:	1acb      	subs	r3, r1, r3
 8005032:	2164      	movs	r1, #100	; 0x64
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	4a30      	ldr	r2, [pc, #192]	; (80050fc <LCD_Info_feedback+0x1cc>)
 800503c:	fb82 1203 	smull	r1, r2, r2, r3
 8005040:	1092      	asrs	r2, r2, #2
 8005042:	17db      	asrs	r3, r3, #31
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	3330      	adds	r3, #48	; 0x30
 800504a:	b2da      	uxtb	r2, r3
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 800504e:	735a      	strb	r2, [r3, #13]
			    LCD_Info[14]  =( ((seq.pos&15)+1)%10)+48 ;
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	4b28      	ldr	r3, [pc, #160]	; (80050fc <LCD_Info_feedback+0x1cc>)
 800505c:	fb83 1302 	smull	r1, r3, r3, r2
 8005060:	1099      	asrs	r1, r3, #2
 8005062:	17d3      	asrs	r3, r2, #31
 8005064:	1ac9      	subs	r1, r1, r3
 8005066:	460b      	mov	r3, r1
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	440b      	add	r3, r1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	1ad1      	subs	r1, r2, r3
 8005070:	b2cb      	uxtb	r3, r1
 8005072:	3330      	adds	r3, #48	; 0x30
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 8005078:	739a      	strb	r2, [r3, #14]

			    LCD_Info[15]= ( seq.tempo/100) +48;
 800507a:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 800507c:	785b      	ldrb	r3, [r3, #1]
 800507e:	4a1a      	ldr	r2, [pc, #104]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	b2db      	uxtb	r3, r3
 8005088:	3330      	adds	r3, #48	; 0x30
 800508a:	b2da      	uxtb	r2, r3
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 800508e:	73da      	strb	r2, [r3, #15]
			    LCD_Info[16]  =( (seq.tempo%100) /10)+48;
 8005090:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 8005092:	785b      	ldrb	r3, [r3, #1]
 8005094:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <LCD_Info_feedback+0x1b8>)
 8005096:	fba2 1203 	umull	r1, r2, r2, r3
 800509a:	0952      	lsrs	r2, r2, #5
 800509c:	2164      	movs	r1, #100	; 0x64
 800509e:	fb01 f202 	mul.w	r2, r1, r2
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	4a12      	ldr	r2, [pc, #72]	; (80050f0 <LCD_Info_feedback+0x1c0>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	08db      	lsrs	r3, r3, #3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	3330      	adds	r3, #48	; 0x30
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 80050b6:	741a      	strb	r2, [r3, #16]
			    LCD_Info[17]  =( seq.tempo%10)+48 ;
 80050b8:	4b0e      	ldr	r3, [pc, #56]	; (80050f4 <LCD_Info_feedback+0x1c4>)
 80050ba:	785a      	ldrb	r2, [r3, #1]
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <LCD_Info_feedback+0x1c0>)
 80050be:	fba3 1302 	umull	r1, r3, r3, r2
 80050c2:	08d9      	lsrs	r1, r3, #3
 80050c4:	460b      	mov	r3, r1
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	3330      	adds	r3, #48	; 0x30
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <LCD_Info_feedback+0x1c8>)
 80050d6:	745a      	strb	r2, [r3, #17]


    }
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	2000e0ae 	.word	0x2000e0ae
 80050e8:	51eb851f 	.word	0x51eb851f
 80050ec:	20009440 	.word	0x20009440
 80050f0:	cccccccd 	.word	0xcccccccd
 80050f4:	2000d0f4 	.word	0x2000d0f4
 80050f8:	20011cf4 	.word	0x20011cf4
 80050fc:	66666667 	.word	0x66666667

08005100 <LCD_Info_notes>:
void LCD_Info_notes(void){
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
uint8_t counter=0;
 8005106:	2300      	movs	r3, #0
 8005108:	71fb      	strb	r3, [r7, #7]

for (counter=0;counter<8;counter++){
 800510a:	2300      	movs	r3, #0
 800510c:	71fb      	strb	r3, [r7, #7]
 800510e:	e038      	b.n	8005182 <LCD_Info_notes+0x82>

  LCD_Info[20+counter]=major_notes[notes_joined[counter+note[0].timeshift]];
 8005110:	79fb      	ldrb	r3, [r7, #7]
 8005112:	4a2e      	ldr	r2, [pc, #184]	; (80051cc <LCD_Info_notes+0xcc>)
 8005114:	7992      	ldrb	r2, [r2, #6]
 8005116:	4413      	add	r3, r2
 8005118:	4a2d      	ldr	r2, [pc, #180]	; (80051d0 <LCD_Info_notes+0xd0>)
 800511a:	5cd3      	ldrb	r3, [r2, r3]
 800511c:	4619      	mov	r1, r3
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	3314      	adds	r3, #20
 8005122:	4a2c      	ldr	r2, [pc, #176]	; (80051d4 <LCD_Info_notes+0xd4>)
 8005124:	5c51      	ldrb	r1, [r2, r1]
 8005126:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <LCD_Info_notes+0xd8>)
 8005128:	54d1      	strb	r1, [r2, r3]
  LCD_Info[28+counter]=major_notes[notes_joined[counter+note[1].timeshift]];
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	4a27      	ldr	r2, [pc, #156]	; (80051cc <LCD_Info_notes+0xcc>)
 800512e:	7d92      	ldrb	r2, [r2, #22]
 8005130:	4413      	add	r3, r2
 8005132:	4a27      	ldr	r2, [pc, #156]	; (80051d0 <LCD_Info_notes+0xd0>)
 8005134:	5cd3      	ldrb	r3, [r2, r3]
 8005136:	4619      	mov	r1, r3
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	331c      	adds	r3, #28
 800513c:	4a25      	ldr	r2, [pc, #148]	; (80051d4 <LCD_Info_notes+0xd4>)
 800513e:	5c51      	ldrb	r1, [r2, r1]
 8005140:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <LCD_Info_notes+0xd8>)
 8005142:	54d1      	strb	r1, [r2, r3]
  LCD_Info[36+counter]=major_notes[notes_joined[counter+note[2].timeshift]];
 8005144:	79fb      	ldrb	r3, [r7, #7]
 8005146:	4a21      	ldr	r2, [pc, #132]	; (80051cc <LCD_Info_notes+0xcc>)
 8005148:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800514c:	4413      	add	r3, r2
 800514e:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <LCD_Info_notes+0xd0>)
 8005150:	5cd3      	ldrb	r3, [r2, r3]
 8005152:	4619      	mov	r1, r3
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	3324      	adds	r3, #36	; 0x24
 8005158:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <LCD_Info_notes+0xd4>)
 800515a:	5c51      	ldrb	r1, [r2, r1]
 800515c:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <LCD_Info_notes+0xd8>)
 800515e:	54d1      	strb	r1, [r2, r3]
  LCD_Info[44+counter]=major_notes[notes_joined[counter+note[3].timeshift]];
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	4a1a      	ldr	r2, [pc, #104]	; (80051cc <LCD_Info_notes+0xcc>)
 8005164:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005168:	4413      	add	r3, r2
 800516a:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <LCD_Info_notes+0xd0>)
 800516c:	5cd3      	ldrb	r3, [r2, r3]
 800516e:	4619      	mov	r1, r3
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	332c      	adds	r3, #44	; 0x2c
 8005174:	4a17      	ldr	r2, [pc, #92]	; (80051d4 <LCD_Info_notes+0xd4>)
 8005176:	5c51      	ldrb	r1, [r2, r1]
 8005178:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <LCD_Info_notes+0xd8>)
 800517a:	54d1      	strb	r1, [r2, r3]
for (counter=0;counter<8;counter++){
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	3301      	adds	r3, #1
 8005180:	71fb      	strb	r3, [r7, #7]
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b07      	cmp	r3, #7
 8005186:	d9c3      	bls.n	8005110 <LCD_Info_notes+0x10>
}
for (counter=0;counter<16;counter++){
 8005188:	2300      	movs	r3, #0
 800518a:	71fb      	strb	r3, [r7, #7]
 800518c:	e014      	b.n	80051b8 <LCD_Info_notes+0xb8>
   if  ((seq.pos &15)==counter)   LCD_Info[70+counter]=94;
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <LCD_Info_notes+0xdc>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	f003 020f 	and.w	r2, r3, #15
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	429a      	cmp	r2, r3
 800519a:	d105      	bne.n	80051a8 <LCD_Info_notes+0xa8>
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	3346      	adds	r3, #70	; 0x46
 80051a0:	4a0d      	ldr	r2, [pc, #52]	; (80051d8 <LCD_Info_notes+0xd8>)
 80051a2:	215e      	movs	r1, #94	; 0x5e
 80051a4:	54d1      	strb	r1, [r2, r3]
 80051a6:	e004      	b.n	80051b2 <LCD_Info_notes+0xb2>
   else LCD_Info[70+counter]=47;
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	3346      	adds	r3, #70	; 0x46
 80051ac:	4a0a      	ldr	r2, [pc, #40]	; (80051d8 <LCD_Info_notes+0xd8>)
 80051ae:	212f      	movs	r1, #47	; 0x2f
 80051b0:	54d1      	strb	r1, [r2, r3]
for (counter=0;counter<16;counter++){
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	3301      	adds	r3, #1
 80051b6:	71fb      	strb	r3, [r7, #7]
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d9e7      	bls.n	800518e <LCD_Info_notes+0x8e>

}
}
 80051be:	bf00      	nop
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	20008e1c 	.word	0x20008e1c
 80051d0:	200108b8 	.word	0x200108b8
 80051d4:	0800f2e8 	.word	0x0800f2e8
 80051d8:	20011cf4 	.word	0x20011cf4
 80051dc:	2000d0f4 	.word	0x2000d0f4

080051e0 <sampler_ram_clear_test>:
	//   Everything  with  managing sample data

	uint8_t  sampler_ram_clear_test(uint16_t sample_number){    // returns 15   if location is clear    or ok , else  0  , sample number is  0-511 (slow version)
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]



	//  HAL_SPI_Init(&hspi1); // write to register hspi2
	if (sample_number>509) return 0;
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80051f0:	d301      	bcc.n	80051f6 <sampler_ram_clear_test+0x16>
 80051f2:	2300      	movs	r3, #0
 80051f4:	e044      	b.n	8005280 <sampler_ram_clear_test+0xa0>
	MX_SPI1_Init();
 80051f6:	f001 f8ad 	bl	8006354 <MX_SPI1_Init>

	uint8_t spi_test[4];
	uint8_t test_counter=0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t test_return[24]={0};
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
 8005204:	f107 030c 	add.w	r3, r7, #12
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	609a      	str	r2, [r3, #8]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	611a      	str	r2, [r3, #16]

	test_return[0]=0x03; //read page 1
 8005214:	2303      	movs	r3, #3
 8005216:	723b      	strb	r3, [r7, #8]
	test_return[1]=sample_number>>1; //24bit address msb
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	b29b      	uxth	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	727b      	strb	r3, [r7, #9]
	test_return[2]=(sample_number&1)<<7; //24bit address
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	b2db      	uxtb	r3, r3
 8005228:	72bb      	strb	r3, [r7, #10]
	test_return[3]=0; //24bit address lsb
 800522a:	2300      	movs	r3, #0
 800522c:	72fb      	strb	r3, [r7, #11]
	////	test_return[2]=1; //
	//	test_return[3]=0;



	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  // when readin low till the end
 800522e:	2200      	movs	r2, #0
 8005230:	2110      	movs	r1, #16
 8005232:	4815      	ldr	r0, [pc, #84]	; (8005288 <sampler_ram_clear_test+0xa8>)
 8005234:	f003 ffc8 	bl	80091c8 <HAL_GPIO_WritePin>
	//HAL_SPI_ (&hspi1,test_return, 20, 1000);   // works fine
	HAL_SPI_TransmitReceive (&hspi1, test_return,test_return,  24, 100); // request data
 8005238:	f107 0208 	add.w	r2, r7, #8
 800523c:	f107 0108 	add.w	r1, r7, #8
 8005240:	2364      	movs	r3, #100	; 0x64
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2318      	movs	r3, #24
 8005246:	4811      	ldr	r0, [pc, #68]	; (800528c <sampler_ram_clear_test+0xac>)
 8005248:	f005 fdcd 	bl	800ade6 <HAL_SPI_TransmitReceive>


	HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 800524c:	2201      	movs	r2, #1
 800524e:	2110      	movs	r1, #16
 8005250:	480d      	ldr	r0, [pc, #52]	; (8005288 <sampler_ram_clear_test+0xa8>)
 8005252:	f003 ffb9 	bl	80091c8 <HAL_GPIO_WritePin>

	//HAL_SPI_Transmit(&hspi1, send_spi1, 1, 1000);
	for (test_counter=0;test_counter<20;test_counter++){
 8005256:	2300      	movs	r3, #0
 8005258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800525c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005260:	2b13      	cmp	r3, #19
 8005262:	d80c      	bhi.n	800527e <sampler_ram_clear_test+0x9e>
	    if (test_return[test_counter+20]!=255) return 0;  else return 15;
 8005264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005268:	3314      	adds	r3, #20
 800526a:	3328      	adds	r3, #40	; 0x28
 800526c:	443b      	add	r3, r7
 800526e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005272:	2bff      	cmp	r3, #255	; 0xff
 8005274:	d001      	beq.n	800527a <sampler_ram_clear_test+0x9a>
 8005276:	2300      	movs	r3, #0
 8005278:	e002      	b.n	8005280 <sampler_ram_clear_test+0xa0>
 800527a:	230f      	movs	r3, #15
 800527c:	e000      	b.n	8005280 <sampler_ram_clear_test+0xa0>

	}
	return 15;
 800527e:	230f      	movs	r3, #15
    }
 8005280:	4618      	mov	r0, r3
 8005282:	3728      	adds	r7, #40	; 0x28
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40020000 	.word	0x40020000
 800528c:	20012ad8 	.word	0x20012ad8

08005290 <sample_save>:

	    }

	}

 void sample_save(uint16_t sample_number, uint8_t* sample_data,  uint16_t  sample_size ){				// writes data to flash (slow version )
 8005290:	b580      	push	{r7, lr}
 8005292:	b0c8      	sub	sp, #288	; 0x120
 8005294:	af00      	add	r7, sp, #0
 8005296:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800529a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800529e:	6019      	str	r1, [r3, #0]
 80052a0:	4611      	mov	r1, r2
 80052a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052a6:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80052aa:	4602      	mov	r2, r0
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80052b6:	460a      	mov	r2, r1
 80052b8:	801a      	strh	r2, [r3, #0]

		stop_toggle=1;  stop_start();   // halt for slow write
 80052ba:	4bad      	ldr	r3, [pc, #692]	; (8005570 <sample_save+0x2e0>)
 80052bc:	2201      	movs	r2, #1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	f001 fbc6 	bl	8006a50 <stop_start>

		uint8_t spi_test[270]={0};
 80052c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	3304      	adds	r3, #4
 80052d2:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80052d6:	2100      	movs	r1, #0
 80052d8:	4618      	mov	r0, r3
 80052da:	f008 f959 	bl	800d590 <memset>
		if (sample_number>509) return ;
 80052de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052e2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80052ec:	f080 8139 	bcs.w	8005562 <sample_save+0x2d2>



			spi_test[1]=sample_number>>1; //24bit address msb
 80052f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80052f4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80052f8:	881b      	ldrh	r3, [r3, #0]
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005304:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005308:	705a      	strb	r2, [r3, #1]
			spi_test[2]=(sample_number&1)<<7; //24bit address
 800530a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800530e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	b2da      	uxtb	r2, r3
 8005318:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800531c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005320:	709a      	strb	r2, [r3, #2]
			spi_test[3]=0; //24bit address lsb
 8005322:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800532a:	2200      	movs	r2, #0
 800532c:	70da      	strb	r2, [r3, #3]

				//----formAT SECTION
					spi_test[0]=0x06; //enable write  , only lasts for single operation
 800532e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005332:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005336:	2206      	movs	r2, #6
 8005338:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // start
 800533a:	2200      	movs	r2, #0
 800533c:	2110      	movs	r1, #16
 800533e:	488d      	ldr	r0, [pc, #564]	; (8005574 <sample_save+0x2e4>)
 8005340:	f003 ff42 	bl	80091c8 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);       // enable write
 8005344:	f107 010c 	add.w	r1, r7, #12
 8005348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800534c:	2201      	movs	r2, #1
 800534e:	488a      	ldr	r0, [pc, #552]	; (8005578 <sample_save+0x2e8>)
 8005350:	f005 fc0d 	bl	800ab6e <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // end
 8005354:	2201      	movs	r2, #1
 8005356:	2110      	movs	r1, #16
 8005358:	4886      	ldr	r0, [pc, #536]	; (8005574 <sample_save+0x2e4>)
 800535a:	f003 ff35 	bl	80091c8 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 800535e:	2005      	movs	r0, #5
 8005360:	f002 f828 	bl	80073b4 <HAL_Delay>
					spi_test[0]=0x52; //block
 8005364:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005368:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800536c:	2252      	movs	r2, #82	; 0x52
 800536e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);         // enable for sector erase   , stays empty when enabled
 8005370:	2200      	movs	r2, #0
 8005372:	2110      	movs	r1, #16
 8005374:	487f      	ldr	r0, [pc, #508]	; (8005574 <sample_save+0x2e4>)
 8005376:	f003 ff27 	bl	80091c8 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 4, 1000);   //erase sector ,works       4kbytes   (block erase=32kbytes)
 800537a:	f107 010c 	add.w	r1, r7, #12
 800537e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005382:	2204      	movs	r2, #4
 8005384:	487c      	ldr	r0, [pc, #496]	; (8005578 <sample_save+0x2e8>)
 8005386:	f005 fbf2 	bl	800ab6e <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800538a:	2201      	movs	r2, #1
 800538c:	2110      	movs	r1, #16
 800538e:	4879      	ldr	r0, [pc, #484]	; (8005574 <sample_save+0x2e4>)
 8005390:	f003 ff1a 	bl	80091c8 <HAL_GPIO_WritePin>
					HAL_Delay(250);  // SHOULD BE ENOUGH
 8005394:	20fa      	movs	r0, #250	; 0xfa
 8005396:	f002 f80d 	bl	80073b4 <HAL_Delay>



					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 800539a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800539e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff ff1b 	bl	80051e0 <sampler_ram_clear_test>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80da 	beq.w	8005566 <sample_save+0x2d6>


		//uint16_t size_count=sample_size;

			spi_test[0]=0x03; //read page 1
 80053b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80053b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053ba:	2203      	movs	r2, #3
 80053bc:	701a      	strb	r2, [r3, #0]

			uint16_t write_counter=0;    // write start location
 80053be:	2300      	movs	r3, #0
 80053c0:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
			uint8_t second_byte=(sample_number&1)<<7;
 80053c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80053c8:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	01db      	lsls	r3, r3, #7
 80053d0:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
			uint8_t max_count= sample_size>>8;
 80053d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80053d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			if (max_count>127) max_count=127;
 80053e6:	f997 311d 	ldrsb.w	r3, [r7, #285]	; 0x11d
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	da02      	bge.n	80053f4 <sample_save+0x164>
 80053ee:	237f      	movs	r3, #127	; 0x7f
 80053f0:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d

					spi_test[0]=0x06; //enable write
 80053f4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80053f8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053fc:	2206      	movs	r2, #6
 80053fe:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 8005400:	2200      	movs	r2, #0
 8005402:	2110      	movs	r1, #16
 8005404:	485b      	ldr	r0, [pc, #364]	; (8005574 <sample_save+0x2e4>)
 8005406:	f003 fedf 	bl	80091c8 <HAL_GPIO_WritePin>
					HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 800540a:	f107 010c 	add.w	r1, r7, #12
 800540e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005412:	2201      	movs	r2, #1
 8005414:	4858      	ldr	r0, [pc, #352]	; (8005578 <sample_save+0x2e8>)
 8005416:	f005 fbaa 	bl	800ab6e <HAL_SPI_Transmit>
					HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 800541a:	2201      	movs	r2, #1
 800541c:	2110      	movs	r1, #16
 800541e:	4855      	ldr	r0, [pc, #340]	; (8005574 <sample_save+0x2e4>)
 8005420:	f003 fed2 	bl	80091c8 <HAL_GPIO_WritePin>
					HAL_Delay(5);
 8005424:	2005      	movs	r0, #5
 8005426:	f001 ffc5 	bl	80073b4 <HAL_Delay>


					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 800542a:	2300      	movs	r3, #0
 800542c:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8005430:	e06f      	b.n	8005512 <sample_save+0x282>

					    spi_test[0]=0x02; //write
 8005432:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005436:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800543a:	2202      	movs	r2, #2
 800543c:	701a      	strb	r2, [r3, #0]
					    spi_test[1]=sample_number>>1; //0-256 this stays
 800543e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005442:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	b29b      	uxth	r3, r3
 800544c:	b2da      	uxtb	r2, r3
 800544e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005452:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005456:	705a      	strb	r2, [r3, #1]
					    spi_test[2]=write_counter+second_byte; //  0->127 or 128->255
 8005458:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800545c:	b2da      	uxtb	r2, r3
 800545e:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8005462:	4413      	add	r3, r2
 8005464:	b2da      	uxtb	r2, r3
 8005466:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800546a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800546e:	709a      	strb	r2, [r3, #2]
					    spi_test[3]=0; //24bit address lsb
 8005470:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005474:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005478:	2200      	movs	r2, #0
 800547a:	70da      	strb	r2, [r3, #3]

					//   spi_test[1]=255; //24bit address msb
					    			//		spi_test[2]=127+write_counter; //24bit address
					    			//		spi_test[3]=0; //24bit address lsb

					    memcpy  (spi_test+4 ,sample_data+(write_counter*256),  256);   // copy data to write buffer  sseems to be rolling over at 256
 800547c:	f107 030c 	add.w	r3, r7, #12
 8005480:	3304      	adds	r3, #4
 8005482:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 8005486:	0212      	lsls	r2, r2, #8
 8005488:	4611      	mov	r1, r2
 800548a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800548e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4411      	add	r1, r2
 8005496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800549a:	4618      	mov	r0, r3
 800549c:	f008 f86a 	bl	800d574 <memcpy>

					    spi_test[0]=0x06; //enable write each time
 80054a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054a8:	2206      	movs	r2, #6
 80054aa:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);
 80054ac:	2200      	movs	r2, #0
 80054ae:	2110      	movs	r1, #16
 80054b0:	4830      	ldr	r0, [pc, #192]	; (8005574 <sample_save+0x2e4>)
 80054b2:	f003 fe89 	bl	80091c8 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 80054b6:	f107 010c 	add.w	r1, r7, #12
 80054ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054be:	2201      	movs	r2, #1
 80054c0:	482d      	ldr	r0, [pc, #180]	; (8005578 <sample_save+0x2e8>)
 80054c2:	f005 fb54 	bl	800ab6e <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);
 80054c6:	2201      	movs	r2, #1
 80054c8:	2110      	movs	r1, #16
 80054ca:	482a      	ldr	r0, [pc, #168]	; (8005574 <sample_save+0x2e4>)
 80054cc:	f003 fe7c 	bl	80091c8 <HAL_GPIO_WritePin>

					    spi_test[0]=0x02; //write
 80054d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80054d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80054d8:	2202      	movs	r2, #2
 80054da:	701a      	strb	r2, [r3, #0]
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);   // low
 80054dc:	2200      	movs	r2, #0
 80054de:	2110      	movs	r1, #16
 80054e0:	4824      	ldr	r0, [pc, #144]	; (8005574 <sample_save+0x2e4>)
 80054e2:	f003 fe71 	bl	80091c8 <HAL_GPIO_WritePin>
					    HAL_SPI_Transmit(&hspi1, spi_test ,260, 1000);  //address,then data
 80054e6:	f107 010c 	add.w	r1, r7, #12
 80054ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054ee:	f44f 7282 	mov.w	r2, #260	; 0x104
 80054f2:	4821      	ldr	r0, [pc, #132]	; (8005578 <sample_save+0x2e8>)
 80054f4:	f005 fb3b 	bl	800ab6e <HAL_SPI_Transmit>
					    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  // high end
 80054f8:	2201      	movs	r2, #1
 80054fa:	2110      	movs	r1, #16
 80054fc:	481d      	ldr	r0, [pc, #116]	; (8005574 <sample_save+0x2e4>)
 80054fe:	f003 fe63 	bl	80091c8 <HAL_GPIO_WritePin>
					    HAL_Delay(10);
 8005502:	200a      	movs	r0, #10
 8005504:	f001 ff56 	bl	80073b4 <HAL_Delay>
					for (write_counter=0;write_counter<=max_count;write_counter++)  {
 8005508:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 800550c:	3301      	adds	r3, #1
 800550e:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
 8005512:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005516:	b29b      	uxth	r3, r3
 8005518:	f8b7 211e 	ldrh.w	r2, [r7, #286]	; 0x11e
 800551c:	429a      	cmp	r2, r3
 800551e:	d988      	bls.n	8005432 <sample_save+0x1a2>

					}


					spi_test[0]=0x04; //disable write
 8005520:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005524:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005528:	2204      	movs	r2, #4
 800552a:	701a      	strb	r2, [r3, #0]
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0); // low
 800552c:	2200      	movs	r2, #0
 800552e:	2110      	movs	r1, #16
 8005530:	4810      	ldr	r0, [pc, #64]	; (8005574 <sample_save+0x2e4>)
 8005532:	f003 fe49 	bl	80091c8 <HAL_GPIO_WritePin>
										    HAL_SPI_Transmit(&hspi1, spi_test, 1, 1000);
 8005536:	f107 010c 	add.w	r1, r7, #12
 800553a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553e:	2201      	movs	r2, #1
 8005540:	480d      	ldr	r0, [pc, #52]	; (8005578 <sample_save+0x2e8>)
 8005542:	f005 fb14 	bl	800ab6e <HAL_SPI_Transmit>
										    HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);   // high end
 8005546:	2201      	movs	r2, #1
 8005548:	2110      	movs	r1, #16
 800554a:	480a      	ldr	r0, [pc, #40]	; (8005574 <sample_save+0x2e4>)
 800554c:	f003 fe3c 	bl	80091c8 <HAL_GPIO_WritePin>
										    HAL_Delay(20);  //should be enough in theory
 8005550:	2014      	movs	r0, #20
 8005552:	f001 ff2f 	bl	80073b4 <HAL_Delay>


	 stop_toggle=2;  stop_start();  		// restart
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <sample_save+0x2e0>)
 8005558:	2202      	movs	r2, #2
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	f001 fa78 	bl	8006a50 <stop_start>
 8005560:	e002      	b.n	8005568 <sample_save+0x2d8>
		if (sample_number>509) return ;
 8005562:	bf00      	nop
 8005564:	e000      	b.n	8005568 <sample_save+0x2d8>
					if (sampler_ram_clear_test(sample_number)==0) return;    // quit if not empty
 8005566:	bf00      	nop

	    }
 8005568:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20012580 	.word	0x20012580
 8005574:	40020000 	.word	0x40020000
 8005578:	20012ad8 	.word	0x20012ad8

0800557c <sampler_1k_load>:




	void  sampler_1k_load(uint32_t load_address){   // 24 bit load address , for audio , 1kbyte   in 512 byte  chunks, last 64k off limits
 800557c:	b580      	push	{r7, lr}
 800557e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8005582:	af00      	add	r7, sp, #0
 8005584:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005588:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800558c:	6018      	str	r0, [r3, #0]

	    uint8_t send_spi2[1030]={0} ;
 800558e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005592:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	3304      	adds	r3, #4
 800559c:	f240 4202 	movw	r2, #1026	; 0x402
 80055a0:	2100      	movs	r1, #0
 80055a2:	4618      	mov	r0, r3
 80055a4:	f007 fff4 	bl	800d590 <memset>

	    load_address=load_address& 16777215; // 24 bit
 80055a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80055ac:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80055b0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80055b4:	f2a2 420c 	subw	r2, r2, #1036	; 0x40c
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055be:	601a      	str	r2, [r3, #0]
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 80055c0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80055c4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a32      	ldr	r2, [pc, #200]	; (8005694 <sampler_1k_load+0x118>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d85b      	bhi.n	8005688 <sampler_1k_load+0x10c>
	    send_spi2[0]=0x03; //read page 1
 80055d0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80055d4:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80055d8:	2203      	movs	r2, #3
 80055da:	701a      	strb	r2, [r3, #0]
	    send_spi2[1]=load_address>>16;			// last patch for now
 80055dc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80055e0:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80055ee:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80055f2:	705a      	strb	r2, [r3, #1]
	    send_spi2[2]=(load_address>>8)&255;    //
 80055f4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80055f8:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b2da      	uxtb	r2, r3
 8005602:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005606:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800560a:	709a      	strb	r2, [r3, #2]
	    send_spi2[3]=load_address&255;     // can start anywhere*/    // usally 0 padded when written
 800560c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005610:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800561c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005620:	70da      	strb	r2, [r3, #3]
	    send_spi2[3]=0;
 8005622:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005626:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800562a:	2200      	movs	r2, #0
 800562c:	70da      	strb	r2, [r3, #3]
	    current_spi[0]=send_spi2[0];   // to track  later
 800562e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005632:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005636:	781a      	ldrb	r2, [r3, #0]
 8005638:	4b17      	ldr	r3, [pc, #92]	; (8005698 <sampler_1k_load+0x11c>)
 800563a:	701a      	strb	r2, [r3, #0]
	    current_spi[1]=send_spi2[1];
 800563c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005640:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005644:	785a      	ldrb	r2, [r3, #1]
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <sampler_1k_load+0x11c>)
 8005648:	705a      	strb	r2, [r3, #1]
	    current_spi[2]=send_spi2[2];
 800564a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800564e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005652:	789a      	ldrb	r2, [r3, #2]
 8005654:	4b10      	ldr	r3, [pc, #64]	; (8005698 <sampler_1k_load+0x11c>)
 8005656:	709a      	strb	r2, [r3, #2]
	    current_spi[3]=send_spi2[3];
 8005658:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800565c:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8005660:	78da      	ldrb	r2, [r3, #3]
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <sampler_1k_load+0x11c>)
 8005664:	70da      	strb	r2, [r3, #3]

	 //   if ((flash_flag==3)&&(flash_bank_read==0)) memcpy( &flash_read_block, flash_read_block2+4,1024);   flash_flag=3;

	//    if ((flash_flag==4)&&  (flash_bank_read==1) )    {

			HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);HAL_SPI_TransmitReceive_DMA(&hspi1, send_spi2,flash_read_block2,1028);
 8005666:	2200      	movs	r2, #0
 8005668:	2110      	movs	r1, #16
 800566a:	480c      	ldr	r0, [pc, #48]	; (800569c <sampler_1k_load+0x120>)
 800566c:	f003 fdac 	bl	80091c8 <HAL_GPIO_WritePin>
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	f240 4304 	movw	r3, #1028	; 0x404
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <sampler_1k_load+0x124>)
 800567a:	480a      	ldr	r0, [pc, #40]	; (80056a4 <sampler_1k_load+0x128>)
 800567c:	f005 fe0c 	bl	800b298 <HAL_SPI_TransmitReceive_DMA>
		    //HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 0);  //  terrible Internet advice , put cs low before not after  !
		    flash_flag=0; // }
 8005680:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <sampler_1k_load+0x12c>)
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e000      	b.n	800568a <sampler_1k_load+0x10e>
	    if (load_address >0xFEBFFF ) return;  // IMPORTANT !
 8005688:	bf00      	nop

	}
 800568a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	00febfff 	.word	0x00febfff
 8005698:	2001257c 	.word	0x2001257c
 800569c:	40020000 	.word	0x40020000
 80056a0:	20012174 	.word	0x20012174
 80056a4:	20012ad8 	.word	0x20012ad8
 80056a8:	20008f4c 	.word	0x20008f4c

080056ac <sampler_ram_record>:
void sampler_ram_record(void) {
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
	  if (!record_counter) {stop_toggle=1;  stop_start();}   // halt
 80056b0:	4b18      	ldr	r3, [pc, #96]	; (8005714 <sampler_ram_record+0x68>)
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <sampler_ram_record+0x16>
 80056b8:	4b17      	ldr	r3, [pc, #92]	; (8005718 <sampler_ram_record+0x6c>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	f001 f9c7 	bl	8006a50 <stop_start>
	    memcpy(	&RAM[record_counter], input_holder,1024);   // transfer
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <sampler_ram_record+0x68>)
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	4b14      	ldr	r3, [pc, #80]	; (800571c <sampler_ram_record+0x70>)
 80056ca:	4413      	add	r3, r2
 80056cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056d0:	4913      	ldr	r1, [pc, #76]	; (8005720 <sampler_ram_record+0x74>)
 80056d2:	4618      	mov	r0, r3
 80056d4:	f007 ff4e 	bl	800d574 <memcpy>
	record_counter =record_counter+1024;
 80056d8:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <sampler_ram_record+0x68>)
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <sampler_ram_record+0x68>)
 80056e4:	801a      	strh	r2, [r3, #0]
	if (record_counter>=32767) { record_counter=0; sampler.record_enable=0; stop_toggle=2; RAM_normalise();  stop_start(); }  // reset and stop record
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <sampler_ram_record+0x68>)
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d90d      	bls.n	800570e <sampler_ram_record+0x62>
 80056f2:	4b08      	ldr	r3, [pc, #32]	; (8005714 <sampler_ram_record+0x68>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <sampler_ram_record+0x78>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <sampler_ram_record+0x6c>)
 8005702:	2202      	movs	r2, #2
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	f000 f80f 	bl	8005728 <RAM_normalise>
 800570a:	f001 f9a1 	bl	8006a50 <stop_start>

	}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20012588 	.word	0x20012588
 8005718:	20012580 	.word	0x20012580
 800571c:	200001b8 	.word	0x200001b8
 8005720:	2000c8a4 	.word	0x2000c8a4
 8005724:	20008edc 	.word	0x20008edc

08005728 <RAM_normalise>:

void RAM_normalise(void){
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
	    uint16_t counter=0;
 800572e:	2300      	movs	r3, #0
 8005730:	82fb      	strh	r3, [r7, #22]
	    uint16_t peak=0;
 8005732:	2300      	movs	r3, #0
 8005734:	82bb      	strh	r3, [r7, #20]
	    uint16_t*   ram_ptr=  &RAM;
 8005736:	4b42      	ldr	r3, [pc, #264]	; (8005840 <RAM_normalise+0x118>)
 8005738:	60bb      	str	r3, [r7, #8]
	    float process1=32767 ;
 800573a:	4b42      	ldr	r3, [pc, #264]	; (8005844 <RAM_normalise+0x11c>)
 800573c:	607b      	str	r3, [r7, #4]
	    uint16_t mute=1;  // mute by default
 800573e:	2301      	movs	r3, #1
 8005740:	827b      	strh	r3, [r7, #18]
	   int32_t incoming;
	    for (counter=0;counter<16384;counter++){
 8005742:	2300      	movs	r3, #0
 8005744:	82fb      	strh	r3, [r7, #22]
 8005746:	e00e      	b.n	8005766 <RAM_normalise+0x3e>

		incoming= *(ram_ptr+counter);
 8005748:	8afb      	ldrh	r3, [r7, #22]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	4413      	add	r3, r2
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
		if (incoming>peak ) peak=incoming;
 8005754:	8abb      	ldrh	r3, [r7, #20]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	429a      	cmp	r2, r3
 800575a:	dd01      	ble.n	8005760 <RAM_normalise+0x38>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	82bb      	strh	r3, [r7, #20]
	    for (counter=0;counter<16384;counter++){
 8005760:	8afb      	ldrh	r3, [r7, #22]
 8005762:	3301      	adds	r3, #1
 8005764:	82fb      	strh	r3, [r7, #22]
 8005766:	8afb      	ldrh	r3, [r7, #22]
 8005768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800576c:	d3ec      	bcc.n	8005748 <RAM_normalise+0x20>
	    }
	    process1=(32767/(peak-process1))*0.8;
 800576e:	8abb      	ldrh	r3, [r7, #20]
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005778:	edd7 7a01 	vldr	s15, [r7, #4]
 800577c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005780:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005848 <RAM_normalise+0x120>
 8005784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005788:	ee16 0a90 	vmov	r0, s13
 800578c:	f7fa ffba 	bl	8000704 <__aeabi_f2d>
 8005790:	a329      	add	r3, pc, #164	; (adr r3, 8005838 <RAM_normalise+0x110>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa fd27 	bl	80001e8 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4610      	mov	r0, r2
 80057a0:	4619      	mov	r1, r3
 80057a2:	f7fb f827 	bl	80007f4 <__aeabi_d2f>
 80057a6:	4603      	mov	r3, r0
 80057a8:	607b      	str	r3, [r7, #4]

	    for (counter=0;counter<16384;counter++){
 80057aa:	2300      	movs	r3, #0
 80057ac:	82fb      	strh	r3, [r7, #22]
 80057ae:	e038      	b.n	8005822 <RAM_normalise+0xfa>
		incoming= (*(ram_ptr+counter))-32767;
 80057b0:	8afb      	ldrh	r3, [r7, #22]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 80057be:	3b7f      	subs	r3, #127	; 0x7f
 80057c0:	60fb      	str	r3, [r7, #12]
		if (incoming<100) mute=0;  // mute till near zero
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b63      	cmp	r3, #99	; 0x63
 80057c6:	dc01      	bgt.n	80057cc <RAM_normalise+0xa4>
 80057c8:	2300      	movs	r3, #0
 80057ca:	827b      	strh	r3, [r7, #18]
		if ((counter>16200)&& (incoming<200)) mute=1;
 80057cc:	8afb      	ldrh	r3, [r7, #22]
 80057ce:	f643 7248 	movw	r2, #16200	; 0x3f48
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d904      	bls.n	80057e0 <RAM_normalise+0xb8>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2bc7      	cmp	r3, #199	; 0xc7
 80057da:	dc01      	bgt.n	80057e0 <RAM_normalise+0xb8>
 80057dc:	2301      	movs	r3, #1
 80057de:	827b      	strh	r3, [r7, #18]


		if (mute) incoming=0;  //silence near 0 at end til end
 80057e0:	8a7b      	ldrh	r3, [r7, #18]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <RAM_normalise+0xc2>
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
		incoming=(incoming*process1)+32767;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80057f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005848 <RAM_normalise+0x120>
 8005800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005808:	ee17 3a90 	vmov	r3, s15
 800580c:	60fb      	str	r3, [r7, #12]


		*(ram_ptr+counter)=incoming&65535;
 800580e:	8afb      	ldrh	r3, [r7, #22]
 8005810:	005b      	lsls	r3, r3, #1
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	4413      	add	r3, r2
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	b292      	uxth	r2, r2
 800581a:	801a      	strh	r2, [r3, #0]
	    for (counter=0;counter<16384;counter++){
 800581c:	8afb      	ldrh	r3, [r7, #22]
 800581e:	3301      	adds	r3, #1
 8005820:	82fb      	strh	r3, [r7, #22]
 8005822:	8afb      	ldrh	r3, [r7, #22]
 8005824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005828:	d3c2      	bcc.n	80057b0 <RAM_normalise+0x88>

	    }

	}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	f3af 8000 	nop.w
 8005838:	9999999a 	.word	0x9999999a
 800583c:	3fe99999 	.word	0x3fe99999
 8005840:	200001b8 	.word	0x200001b8
 8005844:	46fffe00 	.word	0x46fffe00
 8005848:	46fffe00 	.word	0x46fffe00

0800584c <record_output_to_RAM>:
void record_output_to_RAM(void){
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
//	  if (sampler.record_enable)  { return;} // skip if recording already
    memcpy(	&RAM[record_out_counter], output_mix,512);   // transfer
 8005850:	4b10      	ldr	r3, [pc, #64]	; (8005894 <record_output_to_RAM+0x48>)
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	461a      	mov	r2, r3
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <record_output_to_RAM+0x4c>)
 8005858:	4413      	add	r3, r2
 800585a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800585e:	490f      	ldr	r1, [pc, #60]	; (800589c <record_output_to_RAM+0x50>)
 8005860:	4618      	mov	r0, r3
 8005862:	f007 fe87 	bl	800d574 <memcpy>
    record_out_counter =record_out_counter+512;
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <record_output_to_RAM+0x48>)
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800586e:	b29a      	uxth	r2, r3
 8005870:	4b08      	ldr	r3, [pc, #32]	; (8005894 <record_output_to_RAM+0x48>)
 8005872:	801a      	strh	r2, [r3, #0]
if (record_out_counter>=32767) { record_out_counter=0; record_output=0;
 8005874:	4b07      	ldr	r3, [pc, #28]	; (8005894 <record_output_to_RAM+0x48>)
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800587c:	4293      	cmp	r3, r2
 800587e:	d907      	bls.n	8005890 <record_output_to_RAM+0x44>
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <record_output_to_RAM+0x48>)
 8005882:	2200      	movs	r2, #0
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <record_output_to_RAM+0x54>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]

						RAM_normalise();   }  // reset and stop record RAM_normalise();
 800588c:	f7ff ff4c 	bl	8005728 <RAM_normalise>

		     }
 8005890:	bf00      	nop
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20012990 	.word	0x20012990
 8005898:	200001b8 	.word	0x200001b8
 800589c:	20012590 	.word	0x20012590
 80058a0:	2001258d 	.word	0x2001258d

080058a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058a6:	b0a7      	sub	sp, #156	; 0x9c
 80058a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058aa:	f001 fd11 	bl	80072d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058ae:	f000 fc23 	bl	80060f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058b2:	f000 ffa1 	bl	80067f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80058b6:	f000 ff59 	bl	800676c <MX_DMA_Init>
  MX_ADC1_Init();
 80058ba:	f000 fc87 	bl	80061cc <MX_ADC1_Init>
  MX_SPI2_Init();
 80058be:	f000 fd7f 	bl	80063c0 <MX_SPI2_Init>
  MX_TIM3_Init();
 80058c2:	f000 fe07 	bl	80064d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80058c6:	f000 fe87 	bl	80065d8 <MX_TIM4_Init>
  MX_I2C2_Init();
 80058ca:	f000 fd15 	bl	80062f8 <MX_I2C2_Init>
  MX_SPI1_Init();
 80058ce:	f000 fd41 	bl	8006354 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80058d2:	f000 ff21 	bl	8006718 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 80058d6:	f000 fed5 	bl	8006684 <MX_TIM10_Init>
  MX_TIM2_Init();
 80058da:	f000 fda7 	bl	800642c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

main_initial();   // initial setup
 80058de:	f7fc f8ef 	bl	8001ac0 <main_initial>
  while (1)																																																		//   while loop , random 20+ms freeze around 0.5 sec
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop_counter++ ;
 80058e2:	4baf      	ldr	r3, [pc, #700]	; (8005ba0 <main+0x2fc>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4bad      	ldr	r3, [pc, #692]	; (8005ba0 <main+0x2fc>)
 80058ec:	701a      	strb	r2, [r3, #0]
	  loop_counter2++;// this pretty slow now thanks to gfx , no skips though
 80058ee:	4bad      	ldr	r3, [pc, #692]	; (8005ba4 <main+0x300>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3301      	adds	r3, #1
 80058f4:	4aab      	ldr	r2, [pc, #684]	; (8005ba4 <main+0x300>)
 80058f6:	6013      	str	r3, [r2, #0]

	  // if (menu_page<320) lcd_feedback();  //curious no issues with lcd without this  , maybe spell writing
	  uint32_t  millis = HAL_GetTick();
 80058f8:	f001 fd50 	bl	800739c <HAL_GetTick>
 80058fc:	67f8      	str	r0, [r7, #124]	; 0x7c


	  if 	((loop_counter2&7)==6)      {analoginputloopb();} // this is ok , plenty quick , no freeze here
 80058fe:	4ba9      	ldr	r3, [pc, #676]	; (8005ba4 <main+0x300>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0307 	and.w	r3, r3, #7
 8005906:	2b06      	cmp	r3, #6
 8005908:	d101      	bne.n	800590e <main+0x6a>
 800590a:	f7fb fff9 	bl	8001900 <analoginputloopb>
			  if ((seq.tempo<40)&&(stop_toggle==0))    {stop_toggle=1; stop_start();stop_toggle=3; seq.tempo=50; }
 800590e:	4ba6      	ldr	r3, [pc, #664]	; (8005ba8 <main+0x304>)
 8005910:	785b      	ldrb	r3, [r3, #1]
 8005912:	2b27      	cmp	r3, #39	; 0x27
 8005914:	d80e      	bhi.n	8005934 <main+0x90>
 8005916:	4ba5      	ldr	r3, [pc, #660]	; (8005bac <main+0x308>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <main+0x90>
 800591e:	4ba3      	ldr	r3, [pc, #652]	; (8005bac <main+0x308>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	f001 f894 	bl	8006a50 <stop_start>
 8005928:	4ba0      	ldr	r3, [pc, #640]	; (8005bac <main+0x308>)
 800592a:	2203      	movs	r2, #3
 800592c:	701a      	strb	r2, [r3, #0]
 800592e:	4b9e      	ldr	r3, [pc, #632]	; (8005ba8 <main+0x304>)
 8005930:	2232      	movs	r2, #50	; 0x32
 8005932:	705a      	strb	r2, [r3, #1]
			  if ((seq.tempo<40)&&(stop_toggle==3))    {stop_toggle=2; stop_start();  stop_toggle=0;seq.tempo=50; }
 8005934:	4b9c      	ldr	r3, [pc, #624]	; (8005ba8 <main+0x304>)
 8005936:	785b      	ldrb	r3, [r3, #1]
 8005938:	2b27      	cmp	r3, #39	; 0x27
 800593a:	d80e      	bhi.n	800595a <main+0xb6>
 800593c:	4b9b      	ldr	r3, [pc, #620]	; (8005bac <main+0x308>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d10a      	bne.n	800595a <main+0xb6>
 8005944:	4b99      	ldr	r3, [pc, #612]	; (8005bac <main+0x308>)
 8005946:	2202      	movs	r2, #2
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	f001 f881 	bl	8006a50 <stop_start>
 800594e:	4b97      	ldr	r3, [pc, #604]	; (8005bac <main+0x308>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	4b94      	ldr	r3, [pc, #592]	; (8005ba8 <main+0x304>)
 8005956:	2232      	movs	r2, #50	; 0x32
 8005958:	705a      	strb	r2, [r3, #1]

	if (loop_counter2==9024) {    //   4096=1min=32bytes so 4mins per 128 bank or 15 writes/hour , no freeze here
 800595a:	4b92      	ldr	r3, [pc, #584]	; (8005ba4 <main+0x300>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f5b3 5f0d 	cmp.w	r3, #9024	; 0x2340
 8005962:	f040 8183 	bne.w	8005c6c <main+0x3c8>

		    if (mem_count>(EPROM_limit-2)) mem_count=0; else mem_count++;
 8005966:	4b92      	ldr	r3, [pc, #584]	; (8005bb0 <main+0x30c>)
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	f5b3 7f19 	cmp.w	r3, #612	; 0x264
 800596e:	d903      	bls.n	8005978 <main+0xd4>
 8005970:	4b8f      	ldr	r3, [pc, #572]	; (8005bb0 <main+0x30c>)
 8005972:	2200      	movs	r2, #0
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	e005      	b.n	8005984 <main+0xe0>
 8005978:	4b8d      	ldr	r3, [pc, #564]	; (8005bb0 <main+0x30c>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	4b8b      	ldr	r3, [pc, #556]	; (8005bb0 <main+0x30c>)
 8005982:	801a      	strh	r2, [r3, #0]
		    if (mem_count>(EPROM_limit-50)) mem_count=461;  // this might feedback
 8005984:	4b8a      	ldr	r3, [pc, #552]	; (8005bb0 <main+0x30c>)
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	f5b3 7f0d 	cmp.w	r3, #564	; 0x234
 800598c:	d903      	bls.n	8005996 <main+0xf2>
 800598e:	4b88      	ldr	r3, [pc, #544]	; (8005bb0 <main+0x30c>)
 8005990:	f240 12cd 	movw	r2, #461	; 0x1cd
 8005994:	801a      	strh	r2, [r3, #0]
		   // write to first this was moved for no logical reason ?

			  patch_target_parse(); //
 8005996:	f7fb fca9 	bl	80012ec <patch_target_parse>
			  uint16_t mem_count2=0;	// read values from stored
 800599a:	2300      	movs	r3, #0
 800599c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a


			memcpy(potSource,&seq,46); // about 35
 80059a0:	222e      	movs	r2, #46	; 0x2e
 80059a2:	4981      	ldr	r1, [pc, #516]	; (8005ba8 <main+0x304>)
 80059a4:	4883      	ldr	r0, [pc, #524]	; (8005bb4 <main+0x310>)
 80059a6:	f007 fde5 	bl	800d574 <memcpy>
			memcpy(potSource+476,&sampler,21);
 80059aa:	4b83      	ldr	r3, [pc, #524]	; (8005bb8 <main+0x314>)
 80059ac:	2215      	movs	r2, #21
 80059ae:	4983      	ldr	r1, [pc, #524]	; (8005bbc <main+0x318>)
 80059b0:	4618      	mov	r0, r3
 80059b2:	f007 fddf 	bl	800d574 <memcpy>
			for(i=0;i<10;i++){
 80059b6:	4b82      	ldr	r3, [pc, #520]	; (8005bc0 <main+0x31c>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e099      	b.n	8005af2 <main+0x24e>
					memcpy(potSource+156+(i*16),&note[i],16 );  //grab note settings ,112 total , works
 80059be:	4b80      	ldr	r3, [pc, #512]	; (8005bc0 <main+0x31c>)
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	339c      	adds	r3, #156	; 0x9c
 80059c6:	4a7b      	ldr	r2, [pc, #492]	; (8005bb4 <main+0x310>)
 80059c8:	1898      	adds	r0, r3, r2
 80059ca:	4b7d      	ldr	r3, [pc, #500]	; (8005bc0 <main+0x31c>)
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	4a7c      	ldr	r2, [pc, #496]	; (8005bc4 <main+0x320>)
 80059d2:	4413      	add	r3, r2
 80059d4:	2210      	movs	r2, #16
 80059d6:	4619      	mov	r1, r3
 80059d8:	f007 fdcc 	bl	800d574 <memcpy>

				memcpy(potSource+46+(i*6),&LFO[i],6 );  // + 60  ,ok
 80059dc:	4b78      	ldr	r3, [pc, #480]	; (8005bc0 <main+0x31c>)
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	461a      	mov	r2, r3
 80059e2:	4613      	mov	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4413      	add	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	332e      	adds	r3, #46	; 0x2e
 80059ec:	4a71      	ldr	r2, [pc, #452]	; (8005bb4 <main+0x310>)
 80059ee:	1898      	adds	r0, r3, r2
 80059f0:	4b73      	ldr	r3, [pc, #460]	; (8005bc0 <main+0x31c>)
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	461a      	mov	r2, r3
 80059f6:	4613      	mov	r3, r2
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	4413      	add	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4a72      	ldr	r2, [pc, #456]	; (8005bc8 <main+0x324>)
 8005a00:	4413      	add	r3, r2
 8005a02:	2206      	movs	r2, #6
 8005a04:	4619      	mov	r1, r3
 8005a06:	f007 fdb5 	bl	800d574 <memcpy>
				memcpy(potSource+106+(i*5),&ADSR[i],5 );  // +50  ,
 8005a0a:	4b6d      	ldr	r3, [pc, #436]	; (8005bc0 <main+0x31c>)
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	336a      	adds	r3, #106	; 0x6a
 8005a18:	4a66      	ldr	r2, [pc, #408]	; (8005bb4 <main+0x310>)
 8005a1a:	1898      	adds	r0, r3, r2
 8005a1c:	4b68      	ldr	r3, [pc, #416]	; (8005bc0 <main+0x31c>)
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	4613      	mov	r3, r2
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4a68      	ldr	r2, [pc, #416]	; (8005bcc <main+0x328>)
 8005a2c:	4413      	add	r3, r2
 8005a2e:	2205      	movs	r2, #5
 8005a30:	4619      	mov	r1, r3
 8005a32:	f007 fd9f 	bl	800d574 <memcpy>
				memcpy(potSource+316+(i*6),&patch[i],6 );
 8005a36:	4b62      	ldr	r3, [pc, #392]	; (8005bc0 <main+0x31c>)
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005a48:	4a5a      	ldr	r2, [pc, #360]	; (8005bb4 <main+0x310>)
 8005a4a:	1898      	adds	r0, r3, r2
 8005a4c:	4b5c      	ldr	r3, [pc, #368]	; (8005bc0 <main+0x31c>)
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	461a      	mov	r2, r3
 8005a52:	232c      	movs	r3, #44	; 0x2c
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	4a5d      	ldr	r2, [pc, #372]	; (8005bd0 <main+0x32c>)
 8005a5a:	4413      	add	r3, r2
 8005a5c:	2206      	movs	r2, #6
 8005a5e:	4619      	mov	r1, r3
 8005a60:	f007 fd88 	bl	800d574 <memcpy>

				memcpy(potSource+376+(i*6),&LFO_slave1[i],6 ); // ext llof settings
 8005a64:	4b56      	ldr	r3, [pc, #344]	; (8005bc0 <main+0x31c>)
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	005b      	lsls	r3, r3, #1
 8005a6e:	4413      	add	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005a76:	4a4f      	ldr	r2, [pc, #316]	; (8005bb4 <main+0x310>)
 8005a78:	1898      	adds	r0, r3, r2
 8005a7a:	4b51      	ldr	r3, [pc, #324]	; (8005bc0 <main+0x31c>)
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4613      	mov	r3, r2
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4413      	add	r3, r2
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	4a52      	ldr	r2, [pc, #328]	; (8005bd4 <main+0x330>)
 8005a8a:	4413      	add	r3, r2
 8005a8c:	2206      	movs	r2, #6
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f007 fd70 	bl	800d574 <memcpy>
				memcpy(potSource+436+(i*4),&LFO_square[i],4 );
 8005a94:	4b4a      	ldr	r3, [pc, #296]	; (8005bc0 <main+0x31c>)
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005a9e:	4a45      	ldr	r2, [pc, #276]	; (8005bb4 <main+0x310>)
 8005aa0:	441a      	add	r2, r3
 8005aa2:	4b47      	ldr	r3, [pc, #284]	; (8005bc0 <main+0x31c>)
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4949      	ldr	r1, [pc, #292]	; (8005bd8 <main+0x334>)
 8005ab2:	440b      	add	r3, r1
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6013      	str	r3, [r2, #0]
				memcpy(potSource+512+(i*6),&patch[i+10],6 );
 8005ab8:	4b41      	ldr	r3, [pc, #260]	; (8005bc0 <main+0x31c>)
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	4613      	mov	r3, r2
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	4413      	add	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005aca:	4a3a      	ldr	r2, [pc, #232]	; (8005bb4 <main+0x310>)
 8005acc:	1898      	adds	r0, r3, r2
 8005ace:	4b3c      	ldr	r3, [pc, #240]	; (8005bc0 <main+0x31c>)
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	330a      	adds	r3, #10
 8005ad4:	222c      	movs	r2, #44	; 0x2c
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	4a3d      	ldr	r2, [pc, #244]	; (8005bd0 <main+0x32c>)
 8005adc:	4413      	add	r3, r2
 8005ade:	2206      	movs	r2, #6
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	f007 fd47 	bl	800d574 <memcpy>
			for(i=0;i<10;i++){
 8005ae6:	4b36      	ldr	r3, [pc, #216]	; (8005bc0 <main+0x31c>)
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	4b34      	ldr	r3, [pc, #208]	; (8005bc0 <main+0x31c>)
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	4b33      	ldr	r3, [pc, #204]	; (8005bc0 <main+0x31c>)
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	2b09      	cmp	r3, #9
 8005af8:	f67f af61 	bls.w	80059be <main+0x11a>

			}	// copy vars into potSource

			//HAL_UART_Transmit(&huart1,serial_send,4, 100);  //send serial again

			mem_count2=0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			//	mem_buf=0;
					// mem_verify=0;

					// for patch write start at 2048 for now
			 uint8_t mem_buf_list[50]={0};
 8005b02:	2300      	movs	r3, #0
 8005b04:	603b      	str	r3, [r7, #0]
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	222e      	movs	r2, #46	; 0x2e
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f007 fd3f 	bl	800d590 <memset>
			 uint8_t mem_verify_list[50]={0};
 8005b12:	2300      	movs	r3, #0
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
 8005b16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b1a:	222e      	movs	r2, #46	; 0x2e
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f007 fd36 	bl	800d590 <memset>
			 uint8_t read_counter=0;
 8005b24:	2300      	movs	r3, #0
 8005b26:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			//  --   compare 50 bytes
			 memcpy(&mem_buf_list, potSource+mem_count,50);  // copy 50 from potsource
 8005b2a:	4b21      	ldr	r3, [pc, #132]	; (8005bb0 <main+0x30c>)
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4b20      	ldr	r3, [pc, #128]	; (8005bb4 <main+0x310>)
 8005b32:	4413      	add	r3, r2
 8005b34:	461c      	mov	r4, r3
 8005b36:	463e      	mov	r6, r7
 8005b38:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8005b3c:	4635      	mov	r5, r6
 8005b3e:	4623      	mov	r3, r4
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	6859      	ldr	r1, [r3, #4]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b4a:	3410      	adds	r4, #16
 8005b4c:	3610      	adds	r6, #16
 8005b4e:	4564      	cmp	r4, ip
 8005b50:	d1f4      	bne.n	8005b3c <main+0x298>
 8005b52:	4632      	mov	r2, r6
 8005b54:	4623      	mov	r3, r4
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	8013      	strh	r3, [r2, #0]
			 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <main+0x30c>)
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	019b      	lsls	r3, r3, #6
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	4b11      	ldr	r3, [pc, #68]	; (8005bb0 <main+0x30c>)
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
			 HAL_I2C_Mem_Read(&hi2c2, 160,mem_count2, 2,mem_verify_list, 50,100);    // reading is quick , 50 bytse
 8005b7a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005b7e:	2364      	movs	r3, #100	; 0x64
 8005b80:	9302      	str	r3, [sp, #8]
 8005b82:	2332      	movs	r3, #50	; 0x32
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	21a0      	movs	r1, #160	; 0xa0
 8005b90:	4812      	ldr	r0, [pc, #72]	; (8005bdc <main+0x338>)
 8005b92:	f003 fd89 	bl	80096a8 <HAL_I2C_Mem_Read>
			 for (read_counter=0;read_counter<50;read_counter++){
 8005b96:	2300      	movs	r3, #0
 8005b98:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005b9c:	e039      	b.n	8005c12 <main+0x36e>
 8005b9e:	bf00      	nop
 8005ba0:	200096ae 	.word	0x200096ae
 8005ba4:	2000bf08 	.word	0x2000bf08
 8005ba8:	2000d0f4 	.word	0x2000d0f4
 8005bac:	20012580 	.word	0x20012580
 8005bb0:	2000bf06 	.word	0x2000bf06
 8005bb4:	20009440 	.word	0x20009440
 8005bb8:	2000961c 	.word	0x2000961c
 8005bbc:	20008edc 	.word	0x20008edc
 8005bc0:	200096b2 	.word	0x200096b2
 8005bc4:	20008e1c 	.word	0x20008e1c
 8005bc8:	2000ccb0 	.word	0x2000ccb0
 8005bcc:	2000d05c 	.word	0x2000d05c
 8005bd0:	2000d124 	.word	0x2000d124
 8005bd4:	2000cf58 	.word	0x2000cf58
 8005bd8:	2000cf94 	.word	0x2000cf94
 8005bdc:	20012a84 	.word	0x20012a84

			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005be0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005be4:	3388      	adds	r3, #136	; 0x88
 8005be6:	443b      	add	r3, r7
 8005be8:	f813 2c54 	ldrb.w	r2, [r3, #-84]
 8005bec:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005bf0:	3388      	adds	r3, #136	; 0x88
 8005bf2:	443b      	add	r3, r7
 8005bf4:	f813 3c88 	ldrb.w	r3, [r3, #-136]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d10f      	bne.n	8005c1c <main+0x378>
			     mem_count++;
 8005bfc:	4b6d      	ldr	r3, [pc, #436]	; (8005db4 <main+0x510>)
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	4b6b      	ldr	r3, [pc, #428]	; (8005db4 <main+0x510>)
 8005c06:	801a      	strh	r2, [r3, #0]
			 for (read_counter=0;read_counter<50;read_counter++){
 8005c08:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005c12:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8005c16:	2b31      	cmp	r3, #49	; 0x31
 8005c18:	d9e2      	bls.n	8005be0 <main+0x33c>
 8005c1a:	e000      	b.n	8005c1e <main+0x37a>
			     if (mem_verify_list[read_counter]!=mem_buf_list[read_counter])  { break;}  // exit if found difference
 8005c1c:	bf00      	nop

			 }
						 // ----- write changed data , might shift these off by one after a while to stop wear
						 mem_buf=potSource[mem_count];
 8005c1e:	4b65      	ldr	r3, [pc, #404]	; (8005db4 <main+0x510>)
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	4b64      	ldr	r3, [pc, #400]	; (8005db8 <main+0x514>)
 8005c26:	5c9a      	ldrb	r2, [r3, r2]
 8005c28:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <main+0x518>)
 8005c2a:	701a      	strb	r2, [r3, #0]
						 mem_count2=((1+(mem_count>>6))<<6)+(mem_count&63);
 8005c2c:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <main+0x510>)
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	099b      	lsrs	r3, r3, #6
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3301      	adds	r3, #1
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	4b5d      	ldr	r3, [pc, #372]	; (8005db4 <main+0x510>)
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4413      	add	r3, r2
 8005c48:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

						HAL_I2C_Mem_Write(&hi2c2, 160,mem_count2 , 2, &mem_buf, 1, 100);   // write changed
 8005c4c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005c50:	2364      	movs	r3, #100	; 0x64
 8005c52:	9302      	str	r3, [sp, #8]
 8005c54:	2301      	movs	r3, #1
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <main+0x518>)
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	21a0      	movs	r1, #160	; 0xa0
 8005c60:	4857      	ldr	r0, [pc, #348]	; (8005dc0 <main+0x51c>)
 8005c62:	f003 fc27 	bl	80094b4 <HAL_I2C_Mem_Write>

			 // "&hi2c2"  actual register address  , write only when needed

		loop_counter2=0; //reset
 8005c66:	4b57      	ldr	r3, [pc, #348]	; (8005dc4 <main+0x520>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

		}


	if (serial_tosend){    // send on seq change
 8005c6c:	4b56      	ldr	r3, [pc, #344]	; (8005dc8 <main+0x524>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8090 	beq.w	8005d96 <main+0x4f2>
		uint16_t mem_counter=0;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
		  memcpy(serial_source,&seq,36); // copy bits
 8005c7c:	2224      	movs	r2, #36	; 0x24
 8005c7e:	4953      	ldr	r1, [pc, #332]	; (8005dcc <main+0x528>)
 8005c80:	4853      	ldr	r0, [pc, #332]	; (8005dd0 <main+0x52c>)
 8005c82:	f007 fc77 	bl	800d574 <memcpy>

		  memcpy(serial_source+96,potSource+252,64 );  // 4 * 16
 8005c86:	4b53      	ldr	r3, [pc, #332]	; (8005dd4 <main+0x530>)
 8005c88:	4953      	ldr	r1, [pc, #332]	; (8005dd8 <main+0x534>)
 8005c8a:	2240      	movs	r2, #64	; 0x40
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f007 fc71 	bl	800d574 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005c92:	2300      	movs	r3, #0
 8005c94:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005c98:	e02f      	b.n	8005cfa <main+0x456>
			  if (mem_counter<4)memcpy(serial_source+96+(mem_counter*7),&note[mem_counter+6],7 );
 8005c9a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d811      	bhi.n	8005cc6 <main+0x422>
 8005ca2:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	3360      	adds	r3, #96	; 0x60
 8005cae:	4a48      	ldr	r2, [pc, #288]	; (8005dd0 <main+0x52c>)
 8005cb0:	1898      	adds	r0, r3, r2
 8005cb2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005cb6:	3306      	adds	r3, #6
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	4a48      	ldr	r2, [pc, #288]	; (8005ddc <main+0x538>)
 8005cbc:	4413      	add	r3, r2
 8005cbe:	2207      	movs	r2, #7
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	f007 fc57 	bl	800d574 <memcpy>
						memcpy(serial_source+36+(mem_counter*6),&LFO_slave1[mem_counter],6 );  // insert lfo settings
 8005cc6:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	3324      	adds	r3, #36	; 0x24
 8005cd4:	4a3e      	ldr	r2, [pc, #248]	; (8005dd0 <main+0x52c>)
 8005cd6:	1898      	adds	r0, r3, r2
 8005cd8:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4a3e      	ldr	r2, [pc, #248]	; (8005de0 <main+0x53c>)
 8005ce6:	4413      	add	r3, r2
 8005ce8:	2206      	movs	r2, #6
 8005cea:	4619      	mov	r1, r3
 8005cec:	f007 fc42 	bl	800d574 <memcpy>
		  for(mem_counter=0;mem_counter<10;mem_counter++){
 8005cf0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8005cfa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d9cb      	bls.n	8005c9a <main+0x3f6>
				  }

		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005d02:	e005      	b.n	8005d10 <main+0x46c>
			  serial_up++;
 8005d04:	4b37      	ldr	r3, [pc, #220]	; (8005de4 <main+0x540>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	4b35      	ldr	r3, [pc, #212]	; (8005de4 <main+0x540>)
 8005d0e:	701a      	strb	r2, [r3, #0]
		  while ((serial_source_temp[serial_up]==serial_source[serial_up]) &&(serial_up<161) )   {
 8005d10:	4b34      	ldr	r3, [pc, #208]	; (8005de4 <main+0x540>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	4b34      	ldr	r3, [pc, #208]	; (8005de8 <main+0x544>)
 8005d18:	5c9a      	ldrb	r2, [r3, r2]
 8005d1a:	4b32      	ldr	r3, [pc, #200]	; (8005de4 <main+0x540>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4b2b      	ldr	r3, [pc, #172]	; (8005dd0 <main+0x52c>)
 8005d22:	5c5b      	ldrb	r3, [r3, r1]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d103      	bne.n	8005d30 <main+0x48c>
 8005d28:	4b2e      	ldr	r3, [pc, #184]	; (8005de4 <main+0x540>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2ba0      	cmp	r3, #160	; 0xa0
 8005d2e:	d9e9      	bls.n	8005d04 <main+0x460>
		  }

		  serial_send[6]=0;
 8005d30:	4b2e      	ldr	r3, [pc, #184]	; (8005dec <main+0x548>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	719a      	strb	r2, [r3, #6]
		  serial_send[7]=seq.pos;  // chase
 8005d36:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <main+0x528>)
 8005d38:	781a      	ldrb	r2, [r3, #0]
 8005d3a:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <main+0x548>)
 8005d3c:	71da      	strb	r2, [r3, #7]
		  serial_send[2]=serial_up;
 8005d3e:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <main+0x540>)
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	4b2a      	ldr	r3, [pc, #168]	; (8005dec <main+0x548>)
 8005d44:	709a      	strb	r2, [r3, #2]
		  serial_send[3]=serial_source[serial_up];
 8005d46:	4b27      	ldr	r3, [pc, #156]	; (8005de4 <main+0x540>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <main+0x52c>)
 8005d4e:	5c9a      	ldrb	r2, [r3, r2]
 8005d50:	4b26      	ldr	r3, [pc, #152]	; (8005dec <main+0x548>)
 8005d52:	70da      	strb	r2, [r3, #3]
		  serial_source_temp[serial_up]=serial_source[serial_up];
 8005d54:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <main+0x540>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <main+0x540>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <main+0x52c>)
 8005d62:	5c59      	ldrb	r1, [r3, r1]
 8005d64:	4b20      	ldr	r3, [pc, #128]	; (8005de8 <main+0x544>)
 8005d66:	5499      	strb	r1, [r3, r2]
		  if (serial_up>161) serial_up=0; else serial_up++;
 8005d68:	4b1e      	ldr	r3, [pc, #120]	; (8005de4 <main+0x540>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2ba1      	cmp	r3, #161	; 0xa1
 8005d6e:	d903      	bls.n	8005d78 <main+0x4d4>
 8005d70:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <main+0x540>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	e005      	b.n	8005d84 <main+0x4e0>
 8005d78:	4b1a      	ldr	r3, [pc, #104]	; (8005de4 <main+0x540>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <main+0x540>)
 8005d82:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart1,serial_send,8, 100);  //send serial
 8005d84:	2364      	movs	r3, #100	; 0x64
 8005d86:	2208      	movs	r2, #8
 8005d88:	4918      	ldr	r1, [pc, #96]	; (8005dec <main+0x548>)
 8005d8a:	4819      	ldr	r0, [pc, #100]	; (8005df0 <main+0x54c>)
 8005d8c:	f007 f80b 	bl	800cda6 <HAL_UART_Transmit>
		  serial_tosend=0;
 8005d90:	4b0d      	ldr	r3, [pc, #52]	; (8005dc8 <main+0x524>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
	}

		if (disp_end==1)	  {display_generate();}      // run this after gfx draw page finish
 8005d96:	4b17      	ldr	r3, [pc, #92]	; (8005df4 <main+0x550>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <main+0x4fe>
 8005d9e:	f7fe fe3d 	bl	8004a1c <display_generate>

		if (init<6)				// after 6 its done for good   // no freeze here
 8005da2:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <main+0x554>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d842      	bhi.n	8005e30 <main+0x58c>
		{
			for (i=0;i<6;i++) {display_init();}  //1-2ms ?  change length if flickering ,maybe initial data
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <main+0x558>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e02e      	b.n	8005e10 <main+0x56c>
 8005db2:	bf00      	nop
 8005db4:	2000bf06 	.word	0x2000bf06
 8005db8:	20009440 	.word	0x20009440
 8005dbc:	2000bf0c 	.word	0x2000bf0c
 8005dc0:	20012a84 	.word	0x20012a84
 8005dc4:	2000bf08 	.word	0x2000bf08
 8005dc8:	20010add 	.word	0x20010add
 8005dcc:	2000d0f4 	.word	0x2000d0f4
 8005dd0:	200108dc 	.word	0x200108dc
 8005dd4:	2001093c 	.word	0x2001093c
 8005dd8:	2000953c 	.word	0x2000953c
 8005ddc:	20008e1c 	.word	0x20008e1c
 8005de0:	2000cf58 	.word	0x2000cf58
 8005de4:	20010adc 	.word	0x20010adc
 8005de8:	200109dc 	.word	0x200109dc
 8005dec:	20008f44 	.word	0x20008f44
 8005df0:	20012dc8 	.word	0x20012dc8
 8005df4:	2000c8a2 	.word	0x2000c8a2
 8005df8:	2000befb 	.word	0x2000befb
 8005dfc:	200096b2 	.word	0x200096b2
 8005e00:	f7fe fcfa 	bl	80047f8 <display_init>
 8005e04:	4ba7      	ldr	r3, [pc, #668]	; (80060a4 <main+0x800>)
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	4ba5      	ldr	r3, [pc, #660]	; (80060a4 <main+0x800>)
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	4ba4      	ldr	r3, [pc, #656]	; (80060a4 <main+0x800>)
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	2b05      	cmp	r3, #5
 8005e16:	d9f3      	bls.n	8005e00 <main+0x55c>

		if (init==6)  {HAL_TIM_Base_Start_IT(&htim10);HAL_TIM_Base_Start(&htim10);	 gfx_TX_block(); 				}
 8005e18:	4ba3      	ldr	r3, [pc, #652]	; (80060a8 <main+0x804>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b06      	cmp	r3, #6
 8005e1e:	d107      	bne.n	8005e30 <main+0x58c>
 8005e20:	48a2      	ldr	r0, [pc, #648]	; (80060ac <main+0x808>)
 8005e22:	f005 fe6d 	bl	800bb00 <HAL_TIM_Base_Start_IT>
 8005e26:	48a1      	ldr	r0, [pc, #644]	; (80060ac <main+0x808>)
 8005e28:	f005 fe10 	bl	800ba4c <HAL_TIM_Base_Start>
 8005e2c:	f7fe fd3a 	bl	80048a4 <gfx_TX_block>
		}

		if (init > 5) {    //  around 3 cycles per single transmit  , plenty quick as is , spi lcd can really slow things down
 8005e30:	4b9d      	ldr	r3, [pc, #628]	; (80060a8 <main+0x804>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d924      	bls.n	8005e82 <main+0x5de>

			if(sampler.sample_save_enable>10){
 8005e38:	4b9d      	ldr	r3, [pc, #628]	; (80060b0 <main+0x80c>)
 8005e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e3e:	2b0a      	cmp	r3, #10
 8005e40:	d91b      	bls.n	8005e7a <main+0x5d6>

			    uint16_t sample_size=sizeof(RAM);
 8005e42:	f648 330e 	movw	r3, #35598	; 0x8b0e
 8005e46:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			    		uint8_t* ram_ptr=&RAM[0];
 8005e4a:	4b9a      	ldr	r3, [pc, #616]	; (80060b4 <main+0x810>)
 8005e4c:	677b      	str	r3, [r7, #116]	; 0x74

			    				sample_save(sampler.sample_save,ram_ptr, sample_size);  // write sample no 255
 8005e4e:	4b98      	ldr	r3, [pc, #608]	; (80060b0 <main+0x80c>)
 8005e50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8005e5a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fa17 	bl	8005290 <sample_save>
			    sampler.sample_save_enable=0;
 8005e62:	4b93      	ldr	r3, [pc, #588]	; (80060b0 <main+0x80c>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			    sampler.sample_save=0;   // reset position jus tin case
 8005e6a:	4b91      	ldr	r3, [pc, #580]	; (80060b0 <main+0x80c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			    sampler.RAM_free=0; //
 8005e72:	4b8f      	ldr	r3, [pc, #572]	; (80060b0 <main+0x80c>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a


		    //full page in mem for spi

		    //  little too fast
			 menu3_fill();encoder2();
 8005e7a:	f7fe ffa5 	bl	8004dc8 <menu3_fill>
 8005e7e:	f7fe feaf 	bl	8004be0 <encoder2>
		}


		if ((loop_counter2&1023)==0){ // grab adc readings + 3ms , 32 step  // no freeze
 8005e82:	4b8d      	ldr	r3, [pc, #564]	; (80060b8 <main+0x814>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d147      	bne.n	8005f1e <main+0x67a>



			//HAL_ADC_Stop_DMA(&hadc1); // a lot more stable this way , also sampling time no more than /8 +  144 or no go

			HAL_ADCEx_InjectedStart(&hadc1) ;  // start injected mode normal conversion
 8005e8e:	488b      	ldr	r0, [pc, #556]	; (80060bc <main+0x818>)
 8005e90:	f002 f83c 	bl	8007f0c <HAL_ADCEx_InjectedStart>
			uint16_t adc_temp1[4]={0,0,0,0};
 8005e94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	605a      	str	r2, [r3, #4]

			HAL_ADC_PollForConversion(&hadc1,1);  // works but  slow ,blocking very slow, set quick time out
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4886      	ldr	r0, [pc, #536]	; (80060bc <main+0x818>)
 8005ea2:	f001 fba3 	bl	80075ec <HAL_ADC_PollForConversion>

			adc_temp1[0]=HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	4884      	ldr	r0, [pc, #528]	; (80060bc <main+0x818>)
 8005eaa:	f002 f945 	bl	8008138 <HAL_ADCEx_InjectedGetValue>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
			adc_temp1[1] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	4880      	ldr	r0, [pc, #512]	; (80060bc <main+0x818>)
 8005eba:	f002 f93d 	bl	8008138 <HAL_ADCEx_InjectedGetValue>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	487c      	ldr	r0, [pc, #496]	; (80060bc <main+0x818>)
 8005eca:	f002 f935 	bl	8008138 <HAL_ADCEx_InjectedGetValue>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			HAL_ADCEx_InjectedStop(&hadc1) ;
 8005ed6:	4879      	ldr	r0, [pc, #484]	; (80060bc <main+0x818>)
 8005ed8:	f002 f8e2 	bl	80080a0 <HAL_ADCEx_InjectedStop>
			//  adc_temp1[2] =HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
			adc_values[0]=	(4095-  adc_temp1[0])<<4;  //  4095 = 0
 8005edc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005ee0:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005ee4:	330f      	adds	r3, #15
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	4b74      	ldr	r3, [pc, #464]	; (80060c0 <main+0x81c>)
 8005eee:	801a      	strh	r2, [r3, #0]
			adc_values[1]=	 (4095- adc_temp1[1])<<4;
 8005ef0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ef4:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005ef8:	330f      	adds	r3, #15
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	4b6f      	ldr	r3, [pc, #444]	; (80060c0 <main+0x81c>)
 8005f02:	805a      	strh	r2, [r3, #2]
			adc_values[2]=	 (4095-adc_temp1[2])<<4;
 8005f04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005f08:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8005f0c:	330f      	adds	r3, #15
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	4b6a      	ldr	r3, [pc, #424]	; (80060c0 <main+0x81c>)
 8005f16:	809a      	strh	r2, [r3, #4]
			//  adc_values[2]=	  adc_temp1[2]>>7;

			loop_counter=0;
 8005f18:	4b6a      	ldr	r3, [pc, #424]	; (80060c4 <main+0x820>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
		}

		if ((seq.pos==7) && (lcd_send==0)) {lcd_send=1;} // runs just once
 8005f1e:	4b6a      	ldr	r3, [pc, #424]	; (80060c8 <main+0x824>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b07      	cmp	r3, #7
 8005f24:	d106      	bne.n	8005f34 <main+0x690>
 8005f26:	4b69      	ldr	r3, [pc, #420]	; (80060cc <main+0x828>)
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d102      	bne.n	8005f34 <main+0x690>
 8005f2e:	4b67      	ldr	r3, [pc, #412]	; (80060cc <main+0x828>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,(seq.pos & 1)); // easy skip ?
 8005f34:	4b64      	ldr	r3, [pc, #400]	; (80060c8 <main+0x824>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f44:	4862      	ldr	r0, [pc, #392]	; (80060d0 <main+0x82c>)
 8005f46:	f003 f93f 	bl	80091c8 <HAL_GPIO_WritePin>
	//	adc_flag=0;
		if (adc_flag) {     //  only for sending out  , poor quality
 8005f4a:	4b62      	ldr	r3, [pc, #392]	; (80060d4 <main+0x830>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d06c      	beq.n	800602c <main+0x788>

		    if (adc_playback_position>1020) adc_playback_position=0;  // nudge
 8005f52:	4b61      	ldr	r3, [pc, #388]	; (80060d8 <main+0x834>)
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	f5b3 7f7f 	cmp.w	r3, #1020	; 0x3fc
 8005f5a:	d902      	bls.n	8005f62 <main+0x6be>
 8005f5c:	4b5e      	ldr	r3, [pc, #376]	; (80060d8 <main+0x834>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	801a      	strh	r2, [r3, #0]

		//    adc_playback_position=(adc_playback_position+512)&1023;
			uint16_t    adc_page=0; ;
 8005f62:	2300      	movs	r3, #0
 8005f64:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==1)	  	{	adc_page=0;			}	//dma start ,needs this and adc start ,set sampling time
 8005f68:	4b5a      	ldr	r3, [pc, #360]	; (80060d4 <main+0x830>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d102      	bne.n	8005f76 <main+0x6d2>
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
			if		(adc_flag==2)	  	{	adc_page=1536; }
 8005f76:	4b57      	ldr	r3, [pc, #348]	; (80060d4 <main+0x830>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d103      	bne.n	8005f86 <main+0x6e2>
 8005f7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005f82:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82



			uint16_t    adc_convert_count;
			uint16_t    adc_convert_temp;
			for (i=0;i<512;i++){
 8005f86:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <main+0x800>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	e038      	b.n	8006000 <main+0x75c>
				adc_convert_count=(i*3)+adc_page;
 8005f8e:	4b45      	ldr	r3, [pc, #276]	; (80060a4 <main+0x800>)
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	0052      	lsls	r2, r2, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

				adc_convert_temp=adc_source[adc_convert_count]+adc_source[adc_convert_count+1]+adc_source[adc_convert_count+2]; //  17 470 khz  ~
 8005fa4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005fa8:	4a4c      	ldr	r2, [pc, #304]	; (80060dc <main+0x838>)
 8005faa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005fae:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4949      	ldr	r1, [pc, #292]	; (80060dc <main+0x838>)
 8005fb6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005fba:	4413      	add	r3, r2
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	4945      	ldr	r1, [pc, #276]	; (80060dc <main+0x838>)
 8005fc6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				adc_convert_temp=(adc_convert_temp/3);   // dc offset nearly spot on
 8005fd0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005fd4:	4a42      	ldr	r2, [pc, #264]	; (80060e0 <main+0x83c>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				input_holder[i]=adc_convert_temp<<4;
 8005fe0:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <main+0x800>)
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	b299      	uxth	r1, r3
 8005fee:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <main+0x840>)
 8005ff0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i=0;i<512;i++){
 8005ff4:	4b2b      	ldr	r3, [pc, #172]	; (80060a4 <main+0x800>)
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	4b29      	ldr	r3, [pc, #164]	; (80060a4 <main+0x800>)
 8005ffe:	801a      	strh	r2, [r3, #0]
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <main+0x800>)
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006008:	d3c1      	bcc.n	8005f8e <main+0x6ea>
				// maybe start with signed

				//	input_holder[i]=adc_source[(i*3)+adc_page];

			}
			if (sampler.record_enable)  {sampler.RAM_free=1;  loop_counter2=111;   sampler_ram_record(); }  //stop loop counter2
 800600a:	4b29      	ldr	r3, [pc, #164]	; (80060b0 <main+0x80c>)
 800600c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <main+0x782>
 8006014:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <main+0x80c>)
 8006016:	2201      	movs	r2, #1
 8006018:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800601c:	4b26      	ldr	r3, [pc, #152]	; (80060b8 <main+0x814>)
 800601e:	226f      	movs	r2, #111	; 0x6f
 8006020:	601a      	str	r2, [r3, #0]
 8006022:	f7ff fb43 	bl	80056ac <sampler_ram_record>

			adc_flag=0;
 8006026:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <main+0x830>)
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
		}


		if ((sample_point>512)&&( sample_pointD==512)) bank_write=1;
 800602c:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <main+0x844>)
 800602e:	881b      	ldrh	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006036:	d90a      	bls.n	800604e <main+0x7aa>
 8006038:	4b2c      	ldr	r3, [pc, #176]	; (80060ec <main+0x848>)
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006040:	d105      	bne.n	800604e <main+0x7aa>
 8006042:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <main+0x84c>)
 8006044:	2201      	movs	r2, #1
 8006046:	801a      	strh	r2, [r3, #0]
		while  (bank_write)                         {							// wait for adc , priority
 8006048:	e001      	b.n	800604e <main+0x7aa>

			sampling();
 800604a:	f7fc f89d 	bl	8002188 <sampling>
		while  (bank_write)                         {							// wait for adc , priority
 800604e:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <main+0x84c>)
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f9      	bne.n	800604a <main+0x7a6>

	  	}   // should trigger this after adc reads also reset sample_point here

		if((millis-millis_stored)>5) {   // run gfx_line
 8006056:	4b27      	ldr	r3, [pc, #156]	; (80060f4 <main+0x850>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b05      	cmp	r3, #5
 8006060:	f67f ac3f 	bls.w	80058e2 <main+0x3e>

		  LCD_Info_feedback();
 8006064:	f7fe ff64 	bl	8004f30 <LCD_Info_feedback>
		    uint8_t up_counter2=0;
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					while ((up_counter2<8) && (init > 5) )								{
 800606e:	e00c      	b.n	800608a <main+0x7e6>

					gfx_line_fill();   // just run 8 times between sampling , dont need more
 8006070:	f7fe fce6 	bl	8004a40 <gfx_line_fill>
					up_counter2++;
 8006074:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8006078:	3301      	adds	r3, #1
 800607a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
					loop_counter++;
 800607e:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <main+0x820>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	b2da      	uxtb	r2, r3
 8006086:	4b0f      	ldr	r3, [pc, #60]	; (80060c4 <main+0x820>)
 8006088:	701a      	strb	r2, [r3, #0]
					while ((up_counter2<8) && (init > 5) )								{
 800608a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 800608e:	2b07      	cmp	r3, #7
 8006090:	d803      	bhi.n	800609a <main+0x7f6>
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <main+0x804>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d8ea      	bhi.n	8006070 <main+0x7cc>
					}   millis_stored=millis;
 800609a:	4a16      	ldr	r2, [pc, #88]	; (80060f4 <main+0x850>)
 800609c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800609e:	6013      	str	r3, [r2, #0]
  {
 80060a0:	e41f      	b.n	80058e2 <main+0x3e>
 80060a2:	bf00      	nop
 80060a4:	200096b2 	.word	0x200096b2
 80060a8:	2000befb 	.word	0x2000befb
 80060ac:	20012d80 	.word	0x20012d80
 80060b0:	20008edc 	.word	0x20008edc
 80060b4:	200001b8 	.word	0x200001b8
 80060b8:	2000bf08 	.word	0x2000bf08
 80060bc:	200129dc 	.word	0x200129dc
 80060c0:	20008e0c 	.word	0x20008e0c
 80060c4:	200096ae 	.word	0x200096ae
 80060c8:	2000d0f4 	.word	0x2000d0f4
 80060cc:	2000bef2 	.word	0x2000bef2
 80060d0:	40020800 	.word	0x40020800
 80060d4:	2000cca4 	.word	0x2000cca4
 80060d8:	200129d6 	.word	0x200129d6
 80060dc:	2000a6c4 	.word	0x2000a6c4
 80060e0:	aaaaaaab 	.word	0xaaaaaaab
 80060e4:	2000c8a4 	.word	0x2000c8a4
 80060e8:	2000a6b8 	.word	0x2000a6b8
 80060ec:	2000a6be 	.word	0x2000a6be
 80060f0:	20008e16 	.word	0x20008e16
 80060f4:	20012584 	.word	0x20012584

080060f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b094      	sub	sp, #80	; 0x50
 80060fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060fe:	f107 0320 	add.w	r3, r7, #32
 8006102:	2230      	movs	r2, #48	; 0x30
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f007 fa42 	bl	800d590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	60da      	str	r2, [r3, #12]
 800611a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800611c:	2300      	movs	r3, #0
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <SystemClock_Config+0xcc>)
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	4a27      	ldr	r2, [pc, #156]	; (80061c4 <SystemClock_Config+0xcc>)
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612a:	6413      	str	r3, [r2, #64]	; 0x40
 800612c:	4b25      	ldr	r3, [pc, #148]	; (80061c4 <SystemClock_Config+0xcc>)
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006138:	2300      	movs	r3, #0
 800613a:	607b      	str	r3, [r7, #4]
 800613c:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <SystemClock_Config+0xd0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <SystemClock_Config+0xd0>)
 8006142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <SystemClock_Config+0xd0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006154:	2302      	movs	r3, #2
 8006156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006158:	2301      	movs	r3, #1
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800615c:	2310      	movs	r3, #16
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006160:	2302      	movs	r3, #2
 8006162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006168:	2308      	movs	r3, #8
 800616a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800616c:	2364      	movs	r3, #100	; 0x64
 800616e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006170:	2302      	movs	r3, #2
 8006172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006174:	2304      	movs	r3, #4
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006178:	f107 0320 	add.w	r3, r7, #32
 800617c:	4618      	mov	r0, r3
 800617e:	f004 f815 	bl	800a1ac <HAL_RCC_OscConfig>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006188:	f000 fc78 	bl	8006a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800618c:	230f      	movs	r3, #15
 800618e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006190:	2302      	movs	r3, #2
 8006192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800619c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800619e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	2103      	movs	r1, #3
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 fa76 	bl	800a69c <HAL_RCC_ClockConfig>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80061b6:	f000 fc61 	bl	8006a7c <Error_Handler>
  }
}
 80061ba:	bf00      	nop
 80061bc:	3750      	adds	r7, #80	; 0x50
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40007000 	.word	0x40007000

080061cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08c      	sub	sp, #48	; 0x30
 80061d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80061d2:	f107 0320 	add.w	r3, r7, #32
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	605a      	str	r2, [r3, #4]
 80061dc:	609a      	str	r2, [r3, #8]
 80061de:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80061e0:	463b      	mov	r3, r7
 80061e2:	2220      	movs	r2, #32
 80061e4:	2100      	movs	r1, #0
 80061e6:	4618      	mov	r0, r3
 80061e8:	f007 f9d2 	bl	800d590 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80061ec:	4b3e      	ldr	r3, [pc, #248]	; (80062e8 <MX_ADC1_Init+0x11c>)
 80061ee:	4a3f      	ldr	r2, [pc, #252]	; (80062ec <MX_ADC1_Init+0x120>)
 80061f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80061f2:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <MX_ADC1_Init+0x11c>)
 80061f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80061fa:	4b3b      	ldr	r3, [pc, #236]	; (80062e8 <MX_ADC1_Init+0x11c>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006200:	4b39      	ldr	r3, [pc, #228]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006202:	2201      	movs	r2, #1
 8006204:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006206:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006208:	2201      	movs	r2, #1
 800620a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800620c:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <MX_ADC1_Init+0x11c>)
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006214:	4b34      	ldr	r3, [pc, #208]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006216:	2200      	movs	r2, #0
 8006218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800621a:	4b33      	ldr	r3, [pc, #204]	; (80062e8 <MX_ADC1_Init+0x11c>)
 800621c:	4a34      	ldr	r2, [pc, #208]	; (80062f0 <MX_ADC1_Init+0x124>)
 800621e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006220:	4b31      	ldr	r3, [pc, #196]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006222:	2200      	movs	r2, #0
 8006224:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006226:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006228:	2201      	movs	r2, #1
 800622a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800622c:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <MX_ADC1_Init+0x11c>)
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006234:	4b2c      	ldr	r3, [pc, #176]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006236:	2200      	movs	r2, #0
 8006238:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800623a:	482b      	ldr	r0, [pc, #172]	; (80062e8 <MX_ADC1_Init+0x11c>)
 800623c:	f001 f8de 	bl	80073fc <HAL_ADC_Init>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8006246:	f000 fc19 	bl	8006a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800624a:	2309      	movs	r3, #9
 800624c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800624e:	2301      	movs	r3, #1
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006252:	2306      	movs	r3, #6
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006256:	f107 0320 	add.w	r3, r7, #32
 800625a:	4619      	mov	r1, r3
 800625c:	4822      	ldr	r0, [pc, #136]	; (80062e8 <MX_ADC1_Init+0x11c>)
 800625e:	f001 fba5 	bl	80079ac <HAL_ADC_ConfigChannel>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8006268:	f000 fc08 	bl	8006a7c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800626c:	2300      	movs	r3, #0
 800626e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8006270:	2301      	movs	r3, #1
 8006272:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8006274:	2303      	movs	r3, #3
 8006276:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_56CYCLES;
 8006278:	2303      	movs	r3, #3
 800627a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_NONE;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8006280:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <MX_ADC1_Init+0x128>)
 8006282:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8006284:	2300      	movs	r3, #0
 8006286:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8006288:	2300      	movs	r3, #0
 800628a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8006290:	463b      	mov	r3, r7
 8006292:	4619      	mov	r1, r3
 8006294:	4814      	ldr	r0, [pc, #80]	; (80062e8 <MX_ADC1_Init+0x11c>)
 8006296:	f001 ff87 	bl	80081a8 <HAL_ADCEx_InjectedConfigChannel>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80062a0:	f000 fbec 	bl	8006a7c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 80062a4:	2302      	movs	r3, #2
 80062a6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80062a8:	2302      	movs	r3, #2
 80062aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80062ac:	463b      	mov	r3, r7
 80062ae:	4619      	mov	r1, r3
 80062b0:	480d      	ldr	r0, [pc, #52]	; (80062e8 <MX_ADC1_Init+0x11c>)
 80062b2:	f001 ff79 	bl	80081a8 <HAL_ADCEx_InjectedConfigChannel>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80062bc:	f000 fbde 	bl	8006a7c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 80062c0:	2308      	movs	r3, #8
 80062c2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80062c4:	2303      	movs	r3, #3
 80062c6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80062cc:	463b      	mov	r3, r7
 80062ce:	4619      	mov	r1, r3
 80062d0:	4805      	ldr	r0, [pc, #20]	; (80062e8 <MX_ADC1_Init+0x11c>)
 80062d2:	f001 ff69 	bl	80081a8 <HAL_ADCEx_InjectedConfigChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80062dc:	f000 fbce 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80062e0:	bf00      	nop
 80062e2:	3730      	adds	r7, #48	; 0x30
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	200129dc 	.word	0x200129dc
 80062ec:	40012000 	.word	0x40012000
 80062f0:	0f000001 	.word	0x0f000001
 80062f4:	000f0001 	.word	0x000f0001

080062f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80062fc:	4b12      	ldr	r3, [pc, #72]	; (8006348 <MX_I2C2_Init+0x50>)
 80062fe:	4a13      	ldr	r2, [pc, #76]	; (800634c <MX_I2C2_Init+0x54>)
 8006300:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006302:	4b11      	ldr	r3, [pc, #68]	; (8006348 <MX_I2C2_Init+0x50>)
 8006304:	4a12      	ldr	r2, [pc, #72]	; (8006350 <MX_I2C2_Init+0x58>)
 8006306:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <MX_I2C2_Init+0x50>)
 800630a:	2200      	movs	r2, #0
 800630c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800630e:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <MX_I2C2_Init+0x50>)
 8006310:	2200      	movs	r2, #0
 8006312:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006314:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <MX_I2C2_Init+0x50>)
 8006316:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800631a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800631c:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <MX_I2C2_Init+0x50>)
 800631e:	2200      	movs	r2, #0
 8006320:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <MX_I2C2_Init+0x50>)
 8006324:	2200      	movs	r2, #0
 8006326:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006328:	4b07      	ldr	r3, [pc, #28]	; (8006348 <MX_I2C2_Init+0x50>)
 800632a:	2200      	movs	r2, #0
 800632c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <MX_I2C2_Init+0x50>)
 8006330:	2200      	movs	r2, #0
 8006332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006334:	4804      	ldr	r0, [pc, #16]	; (8006348 <MX_I2C2_Init+0x50>)
 8006336:	f002 ff79 	bl	800922c <HAL_I2C_Init>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006340:	f000 fb9c 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006344:	bf00      	nop
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20012a84 	.word	0x20012a84
 800634c:	40005800 	.word	0x40005800
 8006350:	000186a0 	.word	0x000186a0

08006354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006358:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <MX_SPI1_Init+0x64>)
 800635a:	4a18      	ldr	r2, [pc, #96]	; (80063bc <MX_SPI1_Init+0x68>)
 800635c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800635e:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <MX_SPI1_Init+0x64>)
 8006360:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <MX_SPI1_Init+0x64>)
 8006368:	2200      	movs	r2, #0
 800636a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <MX_SPI1_Init+0x64>)
 800636e:	2200      	movs	r2, #0
 8006370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <MX_SPI1_Init+0x64>)
 8006374:	2200      	movs	r2, #0
 8006376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <MX_SPI1_Init+0x64>)
 800637a:	2200      	movs	r2, #0
 800637c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <MX_SPI1_Init+0x64>)
 8006380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <MX_SPI1_Init+0x64>)
 8006388:	2200      	movs	r2, #0
 800638a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <MX_SPI1_Init+0x64>)
 800638e:	2200      	movs	r2, #0
 8006390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006392:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <MX_SPI1_Init+0x64>)
 8006394:	2200      	movs	r2, #0
 8006396:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <MX_SPI1_Init+0x64>)
 800639a:	2200      	movs	r2, #0
 800639c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <MX_SPI1_Init+0x64>)
 80063a0:	220a      	movs	r2, #10
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80063a4:	4804      	ldr	r0, [pc, #16]	; (80063b8 <MX_SPI1_Init+0x64>)
 80063a6:	f004 fb59 	bl	800aa5c <HAL_SPI_Init>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80063b0:	f000 fb64 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80063b4:	bf00      	nop
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20012ad8 	.word	0x20012ad8
 80063bc:	40013000 	.word	0x40013000

080063c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80063c4:	4b17      	ldr	r3, [pc, #92]	; (8006424 <MX_SPI2_Init+0x64>)
 80063c6:	4a18      	ldr	r2, [pc, #96]	; (8006428 <MX_SPI2_Init+0x68>)
 80063c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <MX_SPI2_Init+0x64>)
 80063cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80063d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <MX_SPI2_Init+0x64>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80063d8:	4b12      	ldr	r3, [pc, #72]	; (8006424 <MX_SPI2_Init+0x64>)
 80063da:	2200      	movs	r2, #0
 80063dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063de:	4b11      	ldr	r3, [pc, #68]	; (8006424 <MX_SPI2_Init+0x64>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <MX_SPI2_Init+0x64>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <MX_SPI2_Init+0x64>)
 80063ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80063f2:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <MX_SPI2_Init+0x64>)
 80063f4:	2230      	movs	r2, #48	; 0x30
 80063f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <MX_SPI2_Init+0x64>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <MX_SPI2_Init+0x64>)
 8006400:	2200      	movs	r2, #0
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <MX_SPI2_Init+0x64>)
 8006406:	2200      	movs	r2, #0
 8006408:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <MX_SPI2_Init+0x64>)
 800640c:	220a      	movs	r2, #10
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006410:	4804      	ldr	r0, [pc, #16]	; (8006424 <MX_SPI2_Init+0x64>)
 8006412:	f004 fb23 	bl	800aa5c <HAL_SPI_Init>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800641c:	f000 fb2e 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006420:	bf00      	nop
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20012b30 	.word	0x20012b30
 8006428:	40003800 	.word	0x40003800

0800642c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08c      	sub	sp, #48	; 0x30
 8006430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006432:	f107 030c 	add.w	r3, r7, #12
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f007 f8a8 	bl	800d590 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006448:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <MX_TIM2_Init+0xa4>)
 800644a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800644e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006450:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <MX_TIM2_Init+0xa4>)
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006456:	4b1e      	ldr	r3, [pc, #120]	; (80064d0 <MX_TIM2_Init+0xa4>)
 8006458:	2200      	movs	r2, #0
 800645a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800645c:	4b1c      	ldr	r3, [pc, #112]	; (80064d0 <MX_TIM2_Init+0xa4>)
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006464:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <MX_TIM2_Init+0xa4>)
 8006466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800646a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800646c:	4b18      	ldr	r3, [pc, #96]	; (80064d0 <MX_TIM2_Init+0xa4>)
 800646e:	2200      	movs	r2, #0
 8006470:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8006472:	2301      	movs	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8006476:	2302      	movs	r3, #2
 8006478:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800647a:	2301      	movs	r3, #1
 800647c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800647e:	2300      	movs	r3, #0
 8006480:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8006482:	2302      	movs	r3, #2
 8006484:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006486:	2302      	movs	r3, #2
 8006488:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800648a:	2301      	movs	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800648e:	2300      	movs	r3, #0
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 2;
 8006492:	2302      	movs	r3, #2
 8006494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8006496:	f107 030c 	add.w	r3, r7, #12
 800649a:	4619      	mov	r1, r3
 800649c:	480c      	ldr	r0, [pc, #48]	; (80064d0 <MX_TIM2_Init+0xa4>)
 800649e:	f005 fd23 	bl	800bee8 <HAL_TIM_Encoder_Init>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80064a8:	f000 fae8 	bl	8006a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064ac:	2300      	movs	r3, #0
 80064ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80064b4:	1d3b      	adds	r3, r7, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	4805      	ldr	r0, [pc, #20]	; (80064d0 <MX_TIM2_Init+0xa4>)
 80064ba:	f006 fb9d 	bl	800cbf8 <HAL_TIMEx_MasterConfigSynchronization>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80064c4:	f000 fada 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80064c8:	bf00      	nop
 80064ca:	3730      	adds	r7, #48	; 0x30
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20012ca8 	.word	0x20012ca8

080064d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08e      	sub	sp, #56	; 0x38
 80064d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064de:	2200      	movs	r2, #0
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	605a      	str	r2, [r3, #4]
 80064e4:	609a      	str	r2, [r3, #8]
 80064e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064e8:	f107 0320 	add.w	r3, r7, #32
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064f2:	1d3b      	adds	r3, r7, #4
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	605a      	str	r2, [r3, #4]
 80064fa:	609a      	str	r2, [r3, #8]
 80064fc:	60da      	str	r2, [r3, #12]
 80064fe:	611a      	str	r2, [r3, #16]
 8006500:	615a      	str	r2, [r3, #20]
 8006502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006504:	4b32      	ldr	r3, [pc, #200]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006506:	4a33      	ldr	r2, [pc, #204]	; (80065d4 <MX_TIM3_Init+0x100>)
 8006508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800650a:	4b31      	ldr	r3, [pc, #196]	; (80065d0 <MX_TIM3_Init+0xfc>)
 800650c:	2200      	movs	r2, #0
 800650e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006510:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2808;
 8006516:	4b2e      	ldr	r3, [pc, #184]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006518:	f640 22f8 	movw	r2, #2808	; 0xaf8
 800651c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800651e:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006520:	2200      	movs	r2, #0
 8006522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006524:	4b2a      	ldr	r3, [pc, #168]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006526:	2280      	movs	r2, #128	; 0x80
 8006528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800652a:	4829      	ldr	r0, [pc, #164]	; (80065d0 <MX_TIM3_Init+0xfc>)
 800652c:	f005 fa3e 	bl	800b9ac <HAL_TIM_Base_Init>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8006536:	f000 faa1 	bl	8006a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800653a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006544:	4619      	mov	r1, r3
 8006546:	4822      	ldr	r0, [pc, #136]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006548:	f005 ff9a 	bl	800c480 <HAL_TIM_ConfigClockSource>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8006552:	f000 fa93 	bl	8006a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006556:	481e      	ldr	r0, [pc, #120]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006558:	f005 fbbc 	bl	800bcd4 <HAL_TIM_PWM_Init>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8006562:	f000 fa8b 	bl	8006a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800656a:	2300      	movs	r3, #0
 800656c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800656e:	f107 0320 	add.w	r3, r7, #32
 8006572:	4619      	mov	r1, r3
 8006574:	4816      	ldr	r0, [pc, #88]	; (80065d0 <MX_TIM3_Init+0xfc>)
 8006576:	f006 fb3f 	bl	800cbf8 <HAL_TIMEx_MasterConfigSynchronization>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8006580:	f000 fa7c 	bl	8006a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006584:	2360      	movs	r3, #96	; 0x60
 8006586:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8006590:	2304      	movs	r3, #4
 8006592:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	2200      	movs	r2, #0
 8006598:	4619      	mov	r1, r3
 800659a:	480d      	ldr	r0, [pc, #52]	; (80065d0 <MX_TIM3_Init+0xfc>)
 800659c:	f005 feae 	bl	800c2fc <HAL_TIM_PWM_ConfigChannel>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80065a6:	f000 fa69 	bl	8006a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065aa:	1d3b      	adds	r3, r7, #4
 80065ac:	2204      	movs	r2, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4807      	ldr	r0, [pc, #28]	; (80065d0 <MX_TIM3_Init+0xfc>)
 80065b2:	f005 fea3 	bl	800c2fc <HAL_TIM_PWM_ConfigChannel>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80065bc:	f000 fa5e 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80065c0:	4803      	ldr	r0, [pc, #12]	; (80065d0 <MX_TIM3_Init+0xfc>)
 80065c2:	f000 fd4d 	bl	8007060 <HAL_TIM_MspPostInit>

}
 80065c6:	bf00      	nop
 80065c8:	3738      	adds	r7, #56	; 0x38
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20012cf0 	.word	0x20012cf0
 80065d4:	40000400 	.word	0x40000400

080065d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	2224      	movs	r2, #36	; 0x24
 80065e4:	2100      	movs	r1, #0
 80065e6:	4618      	mov	r0, r3
 80065e8:	f006 ffd2 	bl	800d590 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065ec:	1d3b      	adds	r3, r7, #4
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]
 80065f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80065f4:	4b21      	ldr	r3, [pc, #132]	; (800667c <MX_TIM4_Init+0xa4>)
 80065f6:	4a22      	ldr	r2, [pc, #136]	; (8006680 <MX_TIM4_Init+0xa8>)
 80065f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80065fa:	4b20      	ldr	r3, [pc, #128]	; (800667c <MX_TIM4_Init+0xa4>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006600:	4b1e      	ldr	r3, [pc, #120]	; (800667c <MX_TIM4_Init+0xa4>)
 8006602:	2200      	movs	r2, #0
 8006604:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <MX_TIM4_Init+0xa4>)
 8006608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800660c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800660e:	4b1b      	ldr	r3, [pc, #108]	; (800667c <MX_TIM4_Init+0xa4>)
 8006610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006614:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006616:	4b19      	ldr	r3, [pc, #100]	; (800667c <MX_TIM4_Init+0xa4>)
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800661c:	2302      	movs	r3, #2
 800661e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8006620:	2302      	movs	r3, #2
 8006622:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006624:	2301      	movs	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006628:	2300      	movs	r3, #0
 800662a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 800662c:	2304      	movs	r3, #4
 800662e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8006630:	2302      	movs	r3, #2
 8006632:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006634:	2301      	movs	r3, #1
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006638:	2300      	movs	r3, #0
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 800663c:	2304      	movs	r3, #4
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006640:	f107 030c 	add.w	r3, r7, #12
 8006644:	4619      	mov	r1, r3
 8006646:	480d      	ldr	r0, [pc, #52]	; (800667c <MX_TIM4_Init+0xa4>)
 8006648:	f005 fc4e 	bl	800bee8 <HAL_TIM_Encoder_Init>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8006652:	f000 fa13 	bl	8006a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006656:	2300      	movs	r3, #0
 8006658:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800665e:	1d3b      	adds	r3, r7, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4806      	ldr	r0, [pc, #24]	; (800667c <MX_TIM4_Init+0xa4>)
 8006664:	f006 fac8 	bl	800cbf8 <HAL_TIMEx_MasterConfigSynchronization>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800666e:	f000 fa05 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006672:	bf00      	nop
 8006674:	3730      	adds	r7, #48	; 0x30
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20012d38 	.word	0x20012d38
 8006680:	40000800 	.word	0x40000800

08006684 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
 8006690:	605a      	str	r2, [r3, #4]
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	60da      	str	r2, [r3, #12]
 8006696:	611a      	str	r2, [r3, #16]
 8006698:	615a      	str	r2, [r3, #20]
 800669a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800669c:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <MX_TIM10_Init+0x8c>)
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <MX_TIM10_Init+0x90>)
 80066a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 80066a2:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066a4:	2204      	movs	r2, #4
 80066a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a8:	4b19      	ldr	r3, [pc, #100]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000;
 80066ae:	4b18      	ldr	r3, [pc, #96]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80066b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066b6:	4b16      	ldr	r3, [pc, #88]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066bc:	4b14      	ldr	r3, [pc, #80]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066be:	2280      	movs	r2, #128	; 0x80
 80066c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80066c2:	4813      	ldr	r0, [pc, #76]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066c4:	f005 f972 	bl	800b9ac <HAL_TIM_Base_Init>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80066ce:	f000 f9d5 	bl	8006a7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim10) != HAL_OK)
 80066d2:	480f      	ldr	r0, [pc, #60]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066d4:	f005 faa5 	bl	800bc22 <HAL_TIM_OC_Init>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80066de:	f000 f9cd 	bl	8006a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80066e2:	2300      	movs	r3, #0
 80066e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	2200      	movs	r2, #0
 80066f6:	4619      	mov	r1, r3
 80066f8:	4805      	ldr	r0, [pc, #20]	; (8006710 <MX_TIM10_Init+0x8c>)
 80066fa:	f005 fda3 	bl	800c244 <HAL_TIM_OC_ConfigChannel>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006704:	f000 f9ba 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8006708:	bf00      	nop
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20012d80 	.word	0x20012d80
 8006714:	40014400 	.word	0x40014400

08006718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800671c:	4b11      	ldr	r3, [pc, #68]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 800671e:	4a12      	ldr	r2, [pc, #72]	; (8006768 <MX_USART1_UART_Init+0x50>)
 8006720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006722:	4b10      	ldr	r3, [pc, #64]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 8006724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800672a:	4b0e      	ldr	r3, [pc, #56]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 800672c:	2200      	movs	r2, #0
 800672e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 8006732:	2200      	movs	r2, #0
 8006734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006736:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 8006738:	2200      	movs	r2, #0
 800673a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 800673e:	2208      	movs	r2, #8
 8006740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006742:	4b08      	ldr	r3, [pc, #32]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 8006744:	2200      	movs	r2, #0
 8006746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 800674a:	2200      	movs	r2, #0
 800674c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800674e:	4805      	ldr	r0, [pc, #20]	; (8006764 <MX_USART1_UART_Init+0x4c>)
 8006750:	f006 fad4 	bl	800ccfc <HAL_HalfDuplex_Init>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800675a:	f000 f98f 	bl	8006a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800675e:	bf00      	nop
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	20012dc8 	.word	0x20012dc8
 8006768:	40011000 	.word	0x40011000

0800676c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	4b1f      	ldr	r3, [pc, #124]	; (80067f4 <MX_DMA_Init+0x88>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677a:	4a1e      	ldr	r2, [pc, #120]	; (80067f4 <MX_DMA_Init+0x88>)
 800677c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006780:	6313      	str	r3, [r2, #48]	; 0x30
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <MX_DMA_Init+0x88>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678a:	607b      	str	r3, [r7, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800678e:	2300      	movs	r3, #0
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <MX_DMA_Init+0x88>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <MX_DMA_Init+0x88>)
 8006798:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800679c:	6313      	str	r3, [r2, #48]	; 0x30
 800679e:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <MX_DMA_Init+0x88>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80067aa:	2200      	movs	r2, #0
 80067ac:	2105      	movs	r1, #5
 80067ae:	200f      	movs	r0, #15
 80067b0:	f001 ff6f 	bl	8008692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80067b4:	200f      	movs	r0, #15
 80067b6:	f001 ff88 	bl	80086ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80067ba:	2200      	movs	r2, #0
 80067bc:	2100      	movs	r1, #0
 80067be:	2038      	movs	r0, #56	; 0x38
 80067c0:	f001 ff67 	bl	8008692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80067c4:	2038      	movs	r0, #56	; 0x38
 80067c6:	f001 ff80 	bl	80086ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80067ca:	2200      	movs	r2, #0
 80067cc:	2100      	movs	r1, #0
 80067ce:	203a      	movs	r0, #58	; 0x3a
 80067d0:	f001 ff5f 	bl	8008692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80067d4:	203a      	movs	r0, #58	; 0x3a
 80067d6:	f001 ff78 	bl	80086ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 80067da:	2200      	movs	r2, #0
 80067dc:	2102      	movs	r1, #2
 80067de:	203c      	movs	r0, #60	; 0x3c
 80067e0:	f001 ff57 	bl	8008692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80067e4:	203c      	movs	r0, #60	; 0x3c
 80067e6:	f001 ff70 	bl	80086ca <HAL_NVIC_EnableIRQ>

}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40023800 	.word	0x40023800

080067f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	605a      	str	r2, [r3, #4]
 8006808:	609a      	str	r2, [r3, #8]
 800680a:	60da      	str	r2, [r3, #12]
 800680c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	4b3c      	ldr	r3, [pc, #240]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	4a3b      	ldr	r2, [pc, #236]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006818:	f043 0301 	orr.w	r3, r3, #1
 800681c:	6313      	str	r3, [r2, #48]	; 0x30
 800681e:	4b39      	ldr	r3, [pc, #228]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	4b35      	ldr	r3, [pc, #212]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	4a34      	ldr	r2, [pc, #208]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006834:	f043 0302 	orr.w	r3, r3, #2
 8006838:	6313      	str	r3, [r2, #48]	; 0x30
 800683a:	4b32      	ldr	r3, [pc, #200]	; (8006904 <MX_GPIO_Init+0x10c>)
 800683c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	603b      	str	r3, [r7, #0]
 800684a:	4b2e      	ldr	r3, [pc, #184]	; (8006904 <MX_GPIO_Init+0x10c>)
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	4a2d      	ldr	r2, [pc, #180]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006850:	f043 0304 	orr.w	r3, r3, #4
 8006854:	6313      	str	r3, [r2, #48]	; 0x30
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <MX_GPIO_Init+0x10c>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	603b      	str	r3, [r7, #0]
 8006860:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006862:	2200      	movs	r2, #0
 8006864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006868:	4827      	ldr	r0, [pc, #156]	; (8006908 <MX_GPIO_Init+0x110>)
 800686a:	f002 fcad 	bl	80091c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 800686e:	2201      	movs	r2, #1
 8006870:	2110      	movs	r1, #16
 8006872:	4826      	ldr	r0, [pc, #152]	; (800690c <MX_GPIO_Init+0x114>)
 8006874:	f002 fca8 	bl	80091c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : encoder2_Pin encoder1_Pin */
  GPIO_InitStruct.Pin = encoder2_Pin|encoder1_Pin;
 8006878:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800687c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800687e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	4619      	mov	r1, r3
 800688e:	481f      	ldr	r0, [pc, #124]	; (800690c <MX_GPIO_Init+0x114>)
 8006890:	f002 fb16 	bl	8008ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800689a:	2301      	movs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80068a6:	f107 030c 	add.w	r3, r7, #12
 80068aa:	4619      	mov	r1, r3
 80068ac:	4816      	ldr	r0, [pc, #88]	; (8006908 <MX_GPIO_Init+0x110>)
 80068ae:	f002 fb07 	bl	8008ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : record_pin_Pin PB2 */
  GPIO_InitStruct.Pin = record_pin_Pin|GPIO_PIN_2;
 80068b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80068b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80068b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80068bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068be:	2301      	movs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	4619      	mov	r1, r3
 80068c8:	4811      	ldr	r0, [pc, #68]	; (8006910 <MX_GPIO_Init+0x118>)
 80068ca:	f002 faf9 	bl	8008ec0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS1_Pin */
  GPIO_InitStruct.Pin = CS1_Pin;
 80068ce:	2310      	movs	r3, #16
 80068d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d2:	2301      	movs	r3, #1
 80068d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068da:	2303      	movs	r3, #3
 80068dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 80068de:	f107 030c 	add.w	r3, r7, #12
 80068e2:	4619      	mov	r1, r3
 80068e4:	4809      	ldr	r0, [pc, #36]	; (800690c <MX_GPIO_Init+0x114>)
 80068e6:	f002 faeb 	bl	8008ec0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2104      	movs	r1, #4
 80068ee:	2028      	movs	r0, #40	; 0x28
 80068f0:	f001 fecf 	bl	8008692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80068f4:	2028      	movs	r0, #40	; 0x28
 80068f6:	f001 fee8 	bl	80086ca <HAL_NVIC_EnableIRQ>

}
 80068fa:	bf00      	nop
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40023800 	.word	0x40023800
 8006908:	40020800 	.word	0x40020800
 800690c:	40020000 	.word	0x40020000
 8006910:	40020400 	.word	0x40020400

08006914 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
/* USER CODE BEGIN 4 */


	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
		adc_flag=1;
 800691c:	4b04      	ldr	r3, [pc, #16]	; (8006930 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800691e:	2201      	movs	r2, #1
 8006920:	701a      	strb	r2, [r3, #0]

	}
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	2000cca4 	.word	0x2000cca4

08006934 <HAL_ADC_ConvCpltCallback>:
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)   // get data after conversion
	{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
	adc_flag=2;
 800693c:	4b07      	ldr	r3, [pc, #28]	; (800695c <HAL_ADC_ConvCpltCallback+0x28>)
 800693e:	2202      	movs	r2, #2
 8006940:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1); HAL_ADC_Start_DMA(&hadc1,& adc_source, 3072);    // try half sample rate   , its 17606  khz
 8006942:	4807      	ldr	r0, [pc, #28]	; (8006960 <HAL_ADC_ConvCpltCallback+0x2c>)
 8006944:	f000 ffce 	bl	80078e4 <HAL_ADC_Stop_DMA>
 8006948:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800694c:	4905      	ldr	r1, [pc, #20]	; (8006964 <HAL_ADC_ConvCpltCallback+0x30>)
 800694e:	4804      	ldr	r0, [pc, #16]	; (8006960 <HAL_ADC_ConvCpltCallback+0x2c>)
 8006950:	f000 fed8 	bl	8007704 <HAL_ADC_Start_DMA>

	}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	2000cca4 	.word	0x2000cca4
 8006960:	200129dc 	.word	0x200129dc
 8006964:	2000a6c4 	.word	0x2000a6c4

08006968 <HAL_SPI_TxRxHalfCpltCallback>:

	void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef * hspi) {
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

	    if (SPI1==hspi->Instance) {
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a05      	ldr	r2, [pc, #20]	; (800698c <HAL_SPI_TxRxHalfCpltCallback+0x24>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d102      	bne.n	8006980 <HAL_SPI_TxRxHalfCpltCallback+0x18>

				    {
			//	    error_count++;
		//	memcpy(&error_data,flash_read_block2,127);  // maybe skipping address,, yup idiot Internet advice

						flash_flag=1;}
 800697a:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]


	}		}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40013000 	.word	0x40013000
 8006990:	20008f4c 	.word	0x20008f4c

08006994 <HAL_SPI_TxRxCpltCallback>:




	void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
		{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]

		   if (SPI1==hspi->Instance) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d107      	bne.n	80069b6 <HAL_SPI_TxRxCpltCallback+0x22>


		       flash_flag=2;
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <HAL_SPI_TxRxCpltCallback+0x30>)
 80069a8:	2202      	movs	r2, #2
 80069aa:	701a      	strb	r2, [r3, #0]
		       HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, 1);  //  end
 80069ac:	2201      	movs	r2, #1
 80069ae:	2110      	movs	r1, #16
 80069b0:	4805      	ldr	r0, [pc, #20]	; (80069c8 <HAL_SPI_TxRxCpltCallback+0x34>)
 80069b2:	f002 fc09 	bl	80091c8 <HAL_GPIO_WritePin>
		   }
		}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	40013000 	.word	0x40013000
 80069c4:	20008f4c 	.word	0x20008f4c
 80069c8:	40020000 	.word	0x40020000

080069cc <HAL_SPI_ErrorCallback>:


	void HAL_SPI_ErrorCallback(SPI_HandleTypeDef * hspi) {
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	   if (SPI1==hspi->Instance) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a07      	ldr	r2, [pc, #28]	; (80069f8 <HAL_SPI_ErrorCallback+0x2c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d106      	bne.n	80069ec <HAL_SPI_ErrorCallback+0x20>
error_count++;
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <HAL_SPI_ErrorCallback+0x30>)
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3301      	adds	r3, #1
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <HAL_SPI_ErrorCallback+0x30>)
 80069ea:	801a      	strh	r2, [r3, #0]

		   }
	}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	40013000 	.word	0x40013000
 80069fc:	2000ccae 	.word	0x2000ccae

08006a00 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)   // when finished sending
	{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	    //
	 //   gfx_dma=1;
	//    if (SPI2==hspi->Instance) {gfx_dma=1;}


	}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == record_pin_Pin) {
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a24:	d103      	bne.n	8006a2e <HAL_GPIO_EXTI_Callback+0x1a>
   sampler.record_enable=1;
 8006a26:	4b08      	ldr	r3, [pc, #32]	; (8006a48 <HAL_GPIO_EXTI_Callback+0x34>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  }

  if(GPIO_Pin == encoder1_Pin) {
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a34:	d102      	bne.n	8006a3c <HAL_GPIO_EXTI_Callback+0x28>
  //page_skip=1;
  record_output=1;
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <HAL_GPIO_EXTI_Callback+0x38>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
  //record_output=1;
 //     page_skip=1;
  }


}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	20008edc 	.word	0x20008edc
 8006a4c:	2001258d 	.word	0x2001258d

08006a50 <stop_start>:



//NVIC_DisableIRQ(TIM3_IRQn);   //  disables all tim irq
void stop_start	(void)             {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  //  if (TIM3==htim ->Instance)
    if  (stop_toggle ==1) {HAL_TIM_Base_Stop_IT(&htim3);}
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <stop_start+0x24>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d102      	bne.n	8006a62 <stop_start+0x12>
 8006a5c:	4806      	ldr	r0, [pc, #24]	; (8006a78 <stop_start+0x28>)
 8006a5e:	f005 f8b1 	bl	800bbc4 <HAL_TIM_Base_Stop_IT>
    if  (stop_toggle ==2) HAL_TIM_Base_Start_IT(&htim3);;
 8006a62:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <stop_start+0x24>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d102      	bne.n	8006a70 <stop_start+0x20>
 8006a6a:	4803      	ldr	r0, [pc, #12]	; (8006a78 <stop_start+0x28>)
 8006a6c:	f005 f848 	bl	800bb00 <HAL_TIM_Base_Start_IT>

}
 8006a70:	bf00      	nop
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20012580 	.word	0x20012580
 8006a78:	20012cf0 	.word	0x20012cf0

08006a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a80:	b672      	cpsid	i
}
 8006a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a84:	e7fe      	b.n	8006a84 <Error_Handler+0x8>
	...

08006a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_MspInit+0x4c>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	4a0f      	ldr	r2, [pc, #60]	; (8006ad4 <HAL_MspInit+0x4c>)
 8006a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <HAL_MspInit+0x4c>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <HAL_MspInit+0x4c>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <HAL_MspInit+0x4c>)
 8006ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <HAL_MspInit+0x4c>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40023800 	.word	0x40023800

08006ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	605a      	str	r2, [r3, #4]
 8006aea:	609a      	str	r2, [r3, #8]
 8006aec:	60da      	str	r2, [r3, #12]
 8006aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a3c      	ldr	r2, [pc, #240]	; (8006be8 <HAL_ADC_MspInit+0x110>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d171      	bne.n	8006bde <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	4b3b      	ldr	r3, [pc, #236]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	4a3a      	ldr	r2, [pc, #232]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b08:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0a:	4b38      	ldr	r3, [pc, #224]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b16:	2300      	movs	r3, #0
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	4b34      	ldr	r3, [pc, #208]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	4a33      	ldr	r2, [pc, #204]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	6313      	str	r3, [r2, #48]	; 0x30
 8006b26:	4b31      	ldr	r3, [pc, #196]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	4b2d      	ldr	r3, [pc, #180]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b3c:	f043 0302 	orr.w	r3, r3, #2
 8006b40:	6313      	str	r3, [r2, #48]	; 0x30
 8006b42:	4b2a      	ldr	r3, [pc, #168]	; (8006bec <HAL_ADC_MspInit+0x114>)
 8006b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA0-WKUP     ------> ADC1_IN0
    PB1     ------> ADC1_IN9
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0;
 8006b4e:	2305      	movs	r3, #5
 8006b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b52:	2303      	movs	r3, #3
 8006b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b56:	2300      	movs	r3, #0
 8006b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b5a:	f107 0314 	add.w	r3, r7, #20
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4823      	ldr	r0, [pc, #140]	; (8006bf0 <HAL_ADC_MspInit+0x118>)
 8006b62:	f002 f9ad 	bl	8008ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8006b66:	2303      	movs	r3, #3
 8006b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	4619      	mov	r1, r3
 8006b78:	481e      	ldr	r0, [pc, #120]	; (8006bf4 <HAL_ADC_MspInit+0x11c>)
 8006b7a:	f002 f9a1 	bl	8008ec0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8006b7e:	4b1e      	ldr	r3, [pc, #120]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006b80:	4a1e      	ldr	r2, [pc, #120]	; (8006bfc <HAL_ADC_MspInit+0x124>)
 8006b82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006b84:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b8a:	4b1b      	ldr	r3, [pc, #108]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b90:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b9e:	4b16      	ldr	r3, [pc, #88]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006bac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006bae:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bc2:	480d      	ldr	r0, [pc, #52]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006bc4:	f001 fd9c 	bl	8008700 <HAL_DMA_Init>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006bce:	f7ff ff55 	bl	8006a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a08      	ldr	r2, [pc, #32]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd8:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <HAL_ADC_MspInit+0x120>)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006bde:	bf00      	nop
 8006be0:	3728      	adds	r7, #40	; 0x28
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40012000 	.word	0x40012000
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40020000 	.word	0x40020000
 8006bf4:	40020400 	.word	0x40020400
 8006bf8:	20012a24 	.word	0x20012a24
 8006bfc:	40026470 	.word	0x40026470

08006c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08a      	sub	sp, #40	; 0x28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c08:	f107 0314 	add.w	r3, r7, #20
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	609a      	str	r2, [r3, #8]
 8006c14:	60da      	str	r2, [r3, #12]
 8006c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a22      	ldr	r2, [pc, #136]	; (8006ca8 <HAL_I2C_MspInit+0xa8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d13d      	bne.n	8006c9e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	4b21      	ldr	r3, [pc, #132]	; (8006cac <HAL_I2C_MspInit+0xac>)
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	4a20      	ldr	r2, [pc, #128]	; (8006cac <HAL_I2C_MspInit+0xac>)
 8006c2c:	f043 0302 	orr.w	r3, r3, #2
 8006c30:	6313      	str	r3, [r2, #48]	; 0x30
 8006c32:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <HAL_I2C_MspInit+0xac>)
 8006c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB9     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c44:	2312      	movs	r3, #18
 8006c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8006c50:	2309      	movs	r3, #9
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4815      	ldr	r0, [pc, #84]	; (8006cb0 <HAL_I2C_MspInit+0xb0>)
 8006c5c:	f002 f930 	bl	8008ec0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c66:	2312      	movs	r3, #18
 8006c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006c72:	2304      	movs	r3, #4
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c76:	f107 0314 	add.w	r3, r7, #20
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	480c      	ldr	r0, [pc, #48]	; (8006cb0 <HAL_I2C_MspInit+0xb0>)
 8006c7e:	f002 f91f 	bl	8008ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006c82:	2300      	movs	r3, #0
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <HAL_I2C_MspInit+0xac>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	4a08      	ldr	r2, [pc, #32]	; (8006cac <HAL_I2C_MspInit+0xac>)
 8006c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c90:	6413      	str	r3, [r2, #64]	; 0x40
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <HAL_I2C_MspInit+0xac>)
 8006c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006c9e:	bf00      	nop
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	40005800 	.word	0x40005800
 8006cac:	40023800 	.word	0x40023800
 8006cb0:	40020400 	.word	0x40020400

08006cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08c      	sub	sp, #48	; 0x30
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cbc:	f107 031c 	add.w	r3, r7, #28
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	605a      	str	r2, [r3, #4]
 8006cc6:	609a      	str	r2, [r3, #8]
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a77      	ldr	r2, [pc, #476]	; (8006eb0 <HAL_SPI_MspInit+0x1fc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	f040 8089 	bne.w	8006dea <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	4b75      	ldr	r3, [pc, #468]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	4a74      	ldr	r2, [pc, #464]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ce6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ce8:	4b72      	ldr	r3, [pc, #456]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]
 8006cf8:	4b6e      	ldr	r3, [pc, #440]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfc:	4a6d      	ldr	r2, [pc, #436]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	6313      	str	r3, [r2, #48]	; 0x30
 8006d04:	4b6b      	ldr	r3, [pc, #428]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8006d10:	23e0      	movs	r3, #224	; 0xe0
 8006d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d14:	2302      	movs	r3, #2
 8006d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d20:	2305      	movs	r3, #5
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d24:	f107 031c 	add.w	r3, r7, #28
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4863      	ldr	r0, [pc, #396]	; (8006eb8 <HAL_SPI_MspInit+0x204>)
 8006d2c:	f002 f8c8 	bl	8008ec0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8006d30:	4b62      	ldr	r3, [pc, #392]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d32:	4a63      	ldr	r2, [pc, #396]	; (8006ec0 <HAL_SPI_MspInit+0x20c>)
 8006d34:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8006d36:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d38:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006d3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d3e:	4b5f      	ldr	r3, [pc, #380]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d44:	4b5d      	ldr	r3, [pc, #372]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d4a:	4b5c      	ldr	r3, [pc, #368]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d50:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d52:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d58:	4b58      	ldr	r3, [pc, #352]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8006d5e:	4b57      	ldr	r3, [pc, #348]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d64:	4b55      	ldr	r3, [pc, #340]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d6a:	4b54      	ldr	r3, [pc, #336]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8006d70:	4852      	ldr	r0, [pc, #328]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d72:	f001 fcc5 	bl	8008700 <HAL_DMA_Init>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006d7c:	f7ff fe7e 	bl	8006a7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a4e      	ldr	r2, [pc, #312]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d84:	64da      	str	r2, [r3, #76]	; 0x4c
 8006d86:	4a4d      	ldr	r2, [pc, #308]	; (8006ebc <HAL_SPI_MspInit+0x208>)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8006d8c:	4b4d      	ldr	r3, [pc, #308]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	; (8006ec8 <HAL_SPI_MspInit+0x214>)
 8006d90:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8006d92:	4b4c      	ldr	r3, [pc, #304]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006d94:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006d98:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d9a:	4b4a      	ldr	r3, [pc, #296]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006d9c:	2240      	movs	r2, #64	; 0x40
 8006d9e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da0:	4b48      	ldr	r3, [pc, #288]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006da6:	4b47      	ldr	r3, [pc, #284]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dae:	4b45      	ldr	r3, [pc, #276]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006db4:	4b43      	ldr	r3, [pc, #268]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006dba:	4b42      	ldr	r3, [pc, #264]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006dc0:	4b40      	ldr	r3, [pc, #256]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dc6:	4b3f      	ldr	r3, [pc, #252]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006dcc:	483d      	ldr	r0, [pc, #244]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006dce:	f001 fc97 	bl	8008700 <HAL_DMA_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8006dd8:	f7ff fe50 	bl	8006a7c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a39      	ldr	r2, [pc, #228]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006de0:	649a      	str	r2, [r3, #72]	; 0x48
 8006de2:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_SPI_MspInit+0x210>)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006de8:	e05e      	b.n	8006ea8 <HAL_SPI_MspInit+0x1f4>
  else if(hspi->Instance==SPI2)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a37      	ldr	r2, [pc, #220]	; (8006ecc <HAL_SPI_MspInit+0x218>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d159      	bne.n	8006ea8 <HAL_SPI_MspInit+0x1f4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006df4:	2300      	movs	r3, #0
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	4b2e      	ldr	r3, [pc, #184]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	4a2d      	ldr	r2, [pc, #180]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006dfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e02:	6413      	str	r3, [r2, #64]	; 0x40
 8006e04:	4b2b      	ldr	r3, [pc, #172]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e10:	2300      	movs	r3, #0
 8006e12:	60fb      	str	r3, [r7, #12]
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	4a26      	ldr	r2, [pc, #152]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006e1a:	f043 0302 	orr.w	r3, r3, #2
 8006e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e20:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <HAL_SPI_MspInit+0x200>)
 8006e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13;
 8006e2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e32:	2302      	movs	r3, #2
 8006e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e3e:	2305      	movs	r3, #5
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e42:	f107 031c 	add.w	r3, r7, #28
 8006e46:	4619      	mov	r1, r3
 8006e48:	4821      	ldr	r0, [pc, #132]	; (8006ed0 <HAL_SPI_MspInit+0x21c>)
 8006e4a:	f002 f839 	bl	8008ec0 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006e4e:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e50:	4a21      	ldr	r2, [pc, #132]	; (8006ed8 <HAL_SPI_MspInit+0x224>)
 8006e52:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006e54:	4b1f      	ldr	r3, [pc, #124]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e5c:	2240      	movs	r2, #64	; 0x40
 8006e5e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e60:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006e66:	4b1b      	ldr	r3, [pc, #108]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e6c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e6e:	4b19      	ldr	r3, [pc, #100]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e74:	4b17      	ldr	r3, [pc, #92]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006e7a:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e80:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006e8c:	4811      	ldr	r0, [pc, #68]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006e8e:	f001 fc37 	bl	8008700 <HAL_DMA_Init>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_SPI_MspInit+0x1e8>
      Error_Handler();
 8006e98:	f7ff fdf0 	bl	8006a7c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a0d      	ldr	r2, [pc, #52]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006ea0:	649a      	str	r2, [r3, #72]	; 0x48
 8006ea2:	4a0c      	ldr	r2, [pc, #48]	; (8006ed4 <HAL_SPI_MspInit+0x220>)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006ea8:	bf00      	nop
 8006eaa:	3730      	adds	r7, #48	; 0x30
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	40013000 	.word	0x40013000
 8006eb4:	40023800 	.word	0x40023800
 8006eb8:	40020000 	.word	0x40020000
 8006ebc:	20012b88 	.word	0x20012b88
 8006ec0:	40026410 	.word	0x40026410
 8006ec4:	20012be8 	.word	0x20012be8
 8006ec8:	40026440 	.word	0x40026440
 8006ecc:	40003800 	.word	0x40003800
 8006ed0:	40020400 	.word	0x40020400
 8006ed4:	20012c48 	.word	0x20012c48
 8006ed8:	40026070 	.word	0x40026070

08006edc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b08c      	sub	sp, #48	; 0x30
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee4:	f107 031c 	add.w	r3, r7, #28
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efc:	d12d      	bne.n	8006f5a <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	4a2f      	ldr	r2, [pc, #188]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f08:	f043 0301 	orr.w	r3, r3, #1
 8006f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8006f0e:	4b2d      	ldr	r3, [pc, #180]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	4b29      	ldr	r3, [pc, #164]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	4a28      	ldr	r2, [pc, #160]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	6313      	str	r3, [r2, #48]	; 0x30
 8006f2a:	4b26      	ldr	r3, [pc, #152]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1;
 8006f36:	f248 0302 	movw	r3, #32770	; 0x8002
 8006f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f40:	2301      	movs	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f44:	2300      	movs	r3, #0
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f4c:	f107 031c 	add.w	r3, r7, #28
 8006f50:	4619      	mov	r1, r3
 8006f52:	481d      	ldr	r0, [pc, #116]	; (8006fc8 <HAL_TIM_Encoder_MspInit+0xec>)
 8006f54:	f001 ffb4 	bl	8008ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006f58:	e030      	b.n	8006fbc <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <HAL_TIM_Encoder_MspInit+0xf0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d12b      	bne.n	8006fbc <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	4b16      	ldr	r3, [pc, #88]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	4a15      	ldr	r2, [pc, #84]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f6e:	f043 0304 	orr.w	r3, r3, #4
 8006f72:	6413      	str	r3, [r2, #64]	; 0x40
 8006f74:	4b13      	ldr	r3, [pc, #76]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	4a0e      	ldr	r2, [pc, #56]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f8a:	f043 0302 	orr.w	r3, r3, #2
 8006f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f90:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f9c:	23c0      	movs	r3, #192	; 0xc0
 8006f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006fac:	2302      	movs	r3, #2
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fb0:	f107 031c 	add.w	r3, r7, #28
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4806      	ldr	r0, [pc, #24]	; (8006fd0 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006fb8:	f001 ff82 	bl	8008ec0 <HAL_GPIO_Init>
}
 8006fbc:	bf00      	nop
 8006fbe:	3730      	adds	r7, #48	; 0x30
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	40020000 	.word	0x40020000
 8006fcc:	40000800 	.word	0x40000800
 8006fd0:	40020400 	.word	0x40020400

08006fd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	; (8007054 <HAL_TIM_Base_MspInit+0x80>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d116      	bne.n	8007014 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <HAL_TIM_Base_MspInit+0x84>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIM_Base_MspInit+0x84>)
 8006ff0:	f043 0302 	orr.w	r3, r3, #2
 8006ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff6:	4b18      	ldr	r3, [pc, #96]	; (8007058 <HAL_TIM_Base_MspInit+0x84>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8007002:	2200      	movs	r2, #0
 8007004:	2101      	movs	r1, #1
 8007006:	201d      	movs	r0, #29
 8007008:	f001 fb43 	bl	8008692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800700c:	201d      	movs	r0, #29
 800700e:	f001 fb5c 	bl	80086ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8007012:	e01a      	b.n	800704a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a10      	ldr	r2, [pc, #64]	; (800705c <HAL_TIM_Base_MspInit+0x88>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d115      	bne.n	800704a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <HAL_TIM_Base_MspInit+0x84>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	4a0c      	ldr	r2, [pc, #48]	; (8007058 <HAL_TIM_Base_MspInit+0x84>)
 8007028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702c:	6453      	str	r3, [r2, #68]	; 0x44
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <HAL_TIM_Base_MspInit+0x84>)
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	60bb      	str	r3, [r7, #8]
 8007038:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 800703a:	2200      	movs	r2, #0
 800703c:	2103      	movs	r1, #3
 800703e:	2019      	movs	r0, #25
 8007040:	f001 fb27 	bl	8008692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007044:	2019      	movs	r0, #25
 8007046:	f001 fb40 	bl	80086ca <HAL_NVIC_EnableIRQ>
}
 800704a:	bf00      	nop
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	40000400 	.word	0x40000400
 8007058:	40023800 	.word	0x40023800
 800705c:	40014400 	.word	0x40014400

08007060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007068:	f107 030c 	add.w	r3, r7, #12
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	609a      	str	r2, [r3, #8]
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a12      	ldr	r2, [pc, #72]	; (80070c8 <HAL_TIM_MspPostInit+0x68>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d11d      	bne.n	80070be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <HAL_TIM_MspPostInit+0x6c>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	4a10      	ldr	r2, [pc, #64]	; (80070cc <HAL_TIM_MspPostInit+0x6c>)
 800708c:	f043 0302 	orr.w	r3, r3, #2
 8007090:	6313      	str	r3, [r2, #48]	; 0x30
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <HAL_TIM_MspPostInit+0x6c>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	60bb      	str	r3, [r7, #8]
 800709c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800709e:	2330      	movs	r3, #48	; 0x30
 80070a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070a2:	2302      	movs	r3, #2
 80070a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80070ae:	2302      	movs	r3, #2
 80070b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070b2:	f107 030c 	add.w	r3, r7, #12
 80070b6:	4619      	mov	r1, r3
 80070b8:	4805      	ldr	r0, [pc, #20]	; (80070d0 <HAL_TIM_MspPostInit+0x70>)
 80070ba:	f001 ff01 	bl	8008ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80070be:	bf00      	nop
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40023800 	.word	0x40023800
 80070d0:	40020400 	.word	0x40020400

080070d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b08a      	sub	sp, #40	; 0x28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070dc:	f107 0314 	add.w	r3, r7, #20
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a19      	ldr	r2, [pc, #100]	; (8007158 <HAL_UART_MspInit+0x84>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d12c      	bne.n	8007150 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80070f6:	2300      	movs	r3, #0
 80070f8:	613b      	str	r3, [r7, #16]
 80070fa:	4b18      	ldr	r3, [pc, #96]	; (800715c <HAL_UART_MspInit+0x88>)
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	4a17      	ldr	r2, [pc, #92]	; (800715c <HAL_UART_MspInit+0x88>)
 8007100:	f043 0310 	orr.w	r3, r3, #16
 8007104:	6453      	str	r3, [r2, #68]	; 0x44
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <HAL_UART_MspInit+0x88>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	613b      	str	r3, [r7, #16]
 8007110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <HAL_UART_MspInit+0x88>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	4a10      	ldr	r2, [pc, #64]	; (800715c <HAL_UART_MspInit+0x88>)
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	6313      	str	r3, [r2, #48]	; 0x30
 8007122:	4b0e      	ldr	r3, [pc, #56]	; (800715c <HAL_UART_MspInit+0x88>)
 8007124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800712e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007134:	2302      	movs	r3, #2
 8007136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007138:	2300      	movs	r3, #0
 800713a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800713c:	2300      	movs	r3, #0
 800713e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007140:	2307      	movs	r3, #7
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007144:	f107 0314 	add.w	r3, r7, #20
 8007148:	4619      	mov	r1, r3
 800714a:	4805      	ldr	r0, [pc, #20]	; (8007160 <HAL_UART_MspInit+0x8c>)
 800714c:	f001 feb8 	bl	8008ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007150:	bf00      	nop
 8007152:	3728      	adds	r7, #40	; 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	40011000 	.word	0x40011000
 800715c:	40023800 	.word	0x40023800
 8007160:	40020000 	.word	0x40020000

08007164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007168:	e7fe      	b.n	8007168 <NMI_Handler+0x4>

0800716a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800716a:	b480      	push	{r7}
 800716c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800716e:	e7fe      	b.n	800716e <HardFault_Handler+0x4>

08007170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007170:	b480      	push	{r7}
 8007172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007174:	e7fe      	b.n	8007174 <MemManage_Handler+0x4>

08007176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007176:	b480      	push	{r7}
 8007178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800717a:	e7fe      	b.n	800717a <BusFault_Handler+0x4>

0800717c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800717c:	b480      	push	{r7}
 800717e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007180:	e7fe      	b.n	8007180 <UsageFault_Handler+0x4>

08007182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007182:	b480      	push	{r7}
 8007184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007186:	bf00      	nop
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800719e:	b480      	push	{r7}
 80071a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80071a2:	bf00      	nop
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80071b0:	f000 f8e0 	bl	8007374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80071b4:	bf00      	nop
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80071bc:	4802      	ldr	r0, [pc, #8]	; (80071c8 <DMA1_Stream4_IRQHandler+0x10>)
 80071be:	f001 fc15 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80071c2:	bf00      	nop
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20012c48 	.word	0x20012c48

080071cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80071d0:	4802      	ldr	r0, [pc, #8]	; (80071dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80071d2:	f004 ff2f 	bl	800c034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80071d6:	bf00      	nop
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20012d80 	.word	0x20012d80

080071e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80071e4:	4802      	ldr	r0, [pc, #8]	; (80071f0 <TIM3_IRQHandler+0x10>)
 80071e6:	f004 ff25 	bl	800c034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20012cf0 	.word	0x20012cf0

080071f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 80071f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80071fc:	f001 fffe 	bl	80091fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(encoder2_Pin);
 8007200:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007204:	f001 fffa 	bl	80091fc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(record_pin_Pin);
 8007208:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800720c:	f001 fff6 	bl	80091fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007210:	bf00      	nop
 8007212:	bd80      	pop	{r7, pc}

08007214 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8007218:	4802      	ldr	r0, [pc, #8]	; (8007224 <DMA2_Stream0_IRQHandler+0x10>)
 800721a:	f001 fbe7 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800721e:	bf00      	nop
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20012b88 	.word	0x20012b88

08007228 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800722c:	4802      	ldr	r0, [pc, #8]	; (8007238 <DMA2_Stream2_IRQHandler+0x10>)
 800722e:	f001 fbdd 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007232:	bf00      	nop
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20012be8 	.word	0x20012be8

0800723c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007240:	4802      	ldr	r0, [pc, #8]	; (800724c <DMA2_Stream4_IRQHandler+0x10>)
 8007242:	f001 fbd3 	bl	80089ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8007246:	bf00      	nop
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20012a24 	.word	0x20012a24

08007250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <SystemInit+0x28>)
 8007256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <SystemInit+0x28>)
 800725c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007264:	4b04      	ldr	r3, [pc, #16]	; (8007278 <SystemInit+0x28>)
 8007266:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800726a:	609a      	str	r2, [r3, #8]
#endif
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	e000ed00 	.word	0xe000ed00

0800727c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800727c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80072b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007280:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007282:	e003      	b.n	800728c <LoopCopyDataInit>

08007284 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007286:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007288:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800728a:	3104      	adds	r1, #4

0800728c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800728c:	480b      	ldr	r0, [pc, #44]	; (80072bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800728e:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007290:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007292:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007294:	d3f6      	bcc.n	8007284 <CopyDataInit>
  ldr  r2, =_sbss
 8007296:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007298:	e002      	b.n	80072a0 <LoopFillZerobss>

0800729a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800729a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800729c:	f842 3b04 	str.w	r3, [r2], #4

080072a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80072a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80072a4:	d3f9      	bcc.n	800729a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80072a6:	f7ff ffd3 	bl	8007250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80072aa:	f006 f93f 	bl	800d52c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80072ae:	f7fe faf9 	bl	80058a4 <main>
  bx  lr    
 80072b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80072b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80072b8:	0800fd0c 	.word	0x0800fd0c
  ldr  r0, =_sdata
 80072bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80072c0:	20008fc0 	.word	0x20008fc0
  ldr  r2, =_sbss
 80072c4:	20008fc0 	.word	0x20008fc0
  ldr  r3, = _ebss
 80072c8:	20012e10 	.word	0x20012e10

080072cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072cc:	e7fe      	b.n	80072cc <ADC_IRQHandler>
	...

080072d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <HAL_Init+0x40>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a0d      	ldr	r2, [pc, #52]	; (8007310 <HAL_Init+0x40>)
 80072da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_Init+0x40>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a0a      	ldr	r2, [pc, #40]	; (8007310 <HAL_Init+0x40>)
 80072e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072ec:	4b08      	ldr	r3, [pc, #32]	; (8007310 <HAL_Init+0x40>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a07      	ldr	r2, [pc, #28]	; (8007310 <HAL_Init+0x40>)
 80072f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072f8:	2003      	movs	r0, #3
 80072fa:	f001 f9bf 	bl	800867c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072fe:	2000      	movs	r0, #0
 8007300:	f000 f808 	bl	8007314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007304:	f7ff fbc0 	bl	8006a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	40023c00 	.word	0x40023c00

08007314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800731c:	4b12      	ldr	r3, [pc, #72]	; (8007368 <HAL_InitTick+0x54>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b12      	ldr	r3, [pc, #72]	; (800736c <HAL_InitTick+0x58>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	4619      	mov	r1, r3
 8007326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800732a:	fbb3 f3f1 	udiv	r3, r3, r1
 800732e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007332:	4618      	mov	r0, r3
 8007334:	f001 f9d7 	bl	80086e6 <HAL_SYSTICK_Config>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e00e      	b.n	8007360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b0f      	cmp	r3, #15
 8007346:	d80a      	bhi.n	800735e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007348:	2200      	movs	r2, #0
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	f001 f99f 	bl	8008692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007354:	4a06      	ldr	r2, [pc, #24]	; (8007370 <HAL_InitTick+0x5c>)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800735a:	2300      	movs	r3, #0
 800735c:	e000      	b.n	8007360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
}
 8007360:	4618      	mov	r0, r3
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20008f50 	.word	0x20008f50
 800736c:	20008f58 	.word	0x20008f58
 8007370:	20008f54 	.word	0x20008f54

08007374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007378:	4b06      	ldr	r3, [pc, #24]	; (8007394 <HAL_IncTick+0x20>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <HAL_IncTick+0x24>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4413      	add	r3, r2
 8007384:	4a04      	ldr	r2, [pc, #16]	; (8007398 <HAL_IncTick+0x24>)
 8007386:	6013      	str	r3, [r2, #0]
}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20008f58 	.word	0x20008f58
 8007398:	20012e0c 	.word	0x20012e0c

0800739c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
  return uwTick;
 80073a0:	4b03      	ldr	r3, [pc, #12]	; (80073b0 <HAL_GetTick+0x14>)
 80073a2:	681b      	ldr	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20012e0c 	.word	0x20012e0c

080073b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073bc:	f7ff ffee 	bl	800739c <HAL_GetTick>
 80073c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d005      	beq.n	80073da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073ce:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <HAL_Delay+0x44>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80073da:	bf00      	nop
 80073dc:	f7ff ffde 	bl	800739c <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d8f7      	bhi.n	80073dc <HAL_Delay+0x28>
  {
  }
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20008f58 	.word	0x20008f58

080073fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e033      	b.n	800747a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d109      	bne.n	800742e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fb5c 	bl	8006ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d118      	bne.n	800746c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007442:	f023 0302 	bic.w	r3, r3, #2
 8007446:	f043 0202 	orr.w	r2, r3, #2
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 fbde 	bl	8007c10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	f043 0201 	orr.w	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	641a      	str	r2, [r3, #64]	; 0x40
 800746a:	e001      	b.n	8007470 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_ADC_Start+0x1a>
 800749a:	2302      	movs	r3, #2
 800749c:	e097      	b.n	80075ce <HAL_ADC_Start+0x14a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d018      	beq.n	80074e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074c4:	4b45      	ldr	r3, [pc, #276]	; (80075dc <HAL_ADC_Start+0x158>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a45      	ldr	r2, [pc, #276]	; (80075e0 <HAL_ADC_Start+0x15c>)
 80074ca:	fba2 2303 	umull	r2, r3, r2, r3
 80074ce:	0c9a      	lsrs	r2, r3, #18
 80074d0:	4613      	mov	r3, r2
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4413      	add	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80074d8:	e002      	b.n	80074e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f9      	bne.n	80074da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d15f      	bne.n	80075b4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007512:	2b00      	cmp	r3, #0
 8007514:	d007      	beq.n	8007526 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800751e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800752e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007532:	d106      	bne.n	8007542 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007538:	f023 0206 	bic.w	r2, r3, #6
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	645a      	str	r2, [r3, #68]	; 0x44
 8007540:	e002      	b.n	8007548 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007550:	4b24      	ldr	r3, [pc, #144]	; (80075e4 <HAL_ADC_Start+0x160>)
 8007552:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800755c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10f      	bne.n	800758a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d129      	bne.n	80075cc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689a      	ldr	r2, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007586:	609a      	str	r2, [r3, #8]
 8007588:	e020      	b.n	80075cc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a16      	ldr	r2, [pc, #88]	; (80075e8 <HAL_ADC_Start+0x164>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d11b      	bne.n	80075cc <HAL_ADC_Start+0x148>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d114      	bne.n	80075cc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80075b0:	609a      	str	r2, [r3, #8]
 80075b2:	e00b      	b.n	80075cc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	f043 0210 	orr.w	r2, r3, #16
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c4:	f043 0201 	orr.w	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20008f50 	.word	0x20008f50
 80075e0:	431bde83 	.word	0x431bde83
 80075e4:	40012300 	.word	0x40012300
 80075e8:	40012000 	.word	0x40012000

080075ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007608:	d113      	bne.n	8007632 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007618:	d10b      	bne.n	8007632 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	f043 0220 	orr.w	r2, r3, #32
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e063      	b.n	80076fa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007632:	f7ff feb3 	bl	800739c <HAL_GetTick>
 8007636:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007638:	e021      	b.n	800767e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007640:	d01d      	beq.n	800767e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d007      	beq.n	8007658 <HAL_ADC_PollForConversion+0x6c>
 8007648:	f7ff fea8 	bl	800739c <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d212      	bcs.n	800767e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b02      	cmp	r3, #2
 8007664:	d00b      	beq.n	800767e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f043 0204 	orr.w	r2, r3, #4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e03d      	b.n	80076fa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b02      	cmp	r3, #2
 800768a:	d1d6      	bne.n	800763a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f06f 0212 	mvn.w	r2, #18
 8007694:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d123      	bne.n	80076f8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d11f      	bne.n	80076f8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d111      	bne.n	80076f8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	f043 0201 	orr.w	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_ADC_Start_DMA+0x1e>
 800771e:	2302      	movs	r3, #2
 8007720:	e0ce      	b.n	80078c0 <HAL_ADC_Start_DMA+0x1bc>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b01      	cmp	r3, #1
 8007736:	d018      	beq.n	800776a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007748:	4b5f      	ldr	r3, [pc, #380]	; (80078c8 <HAL_ADC_Start_DMA+0x1c4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a5f      	ldr	r2, [pc, #380]	; (80078cc <HAL_ADC_Start_DMA+0x1c8>)
 800774e:	fba2 2303 	umull	r2, r3, r2, r3
 8007752:	0c9a      	lsrs	r2, r3, #18
 8007754:	4613      	mov	r3, r2
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4413      	add	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800775c:	e002      	b.n	8007764 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	3b01      	subs	r3, #1
 8007762:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f9      	bne.n	800775e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007778:	d107      	bne.n	800778a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007788:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b01      	cmp	r3, #1
 8007796:	f040 8086 	bne.w	80078a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d8:	d106      	bne.n	80077e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077de:	f023 0206 	bic.w	r2, r3, #6
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	645a      	str	r2, [r3, #68]	; 0x44
 80077e6:	e002      	b.n	80077ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077f6:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <HAL_ADC_Start_DMA+0x1cc>)
 80077f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fe:	4a35      	ldr	r2, [pc, #212]	; (80078d4 <HAL_ADC_Start_DMA+0x1d0>)
 8007800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	4a34      	ldr	r2, [pc, #208]	; (80078d8 <HAL_ADC_Start_DMA+0x1d4>)
 8007808:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	4a33      	ldr	r2, [pc, #204]	; (80078dc <HAL_ADC_Start_DMA+0x1d8>)
 8007810:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800781a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800782a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800783a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	334c      	adds	r3, #76	; 0x4c
 8007846:	4619      	mov	r1, r3
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f001 f806 	bl	800885c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10f      	bne.n	800787c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d129      	bne.n	80078be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007878:	609a      	str	r2, [r3, #8]
 800787a:	e020      	b.n	80078be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a17      	ldr	r2, [pc, #92]	; (80078e0 <HAL_ADC_Start_DMA+0x1dc>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d11b      	bne.n	80078be <HAL_ADC_Start_DMA+0x1ba>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d114      	bne.n	80078be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	e00b      	b.n	80078be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f043 0210 	orr.w	r2, r3, #16
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b6:	f043 0201 	orr.w	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80078be:	2300      	movs	r3, #0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20008f50 	.word	0x20008f50
 80078cc:	431bde83 	.word	0x431bde83
 80078d0:	40012300 	.word	0x40012300
 80078d4:	08007e09 	.word	0x08007e09
 80078d8:	08007ec3 	.word	0x08007ec3
 80078dc:	08007edf 	.word	0x08007edf
 80078e0:	40012000 	.word	0x40012000

080078e4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_ADC_Stop_DMA+0x1a>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e048      	b.n	8007990 <HAL_ADC_Stop_DMA+0xac>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f022 0201 	bic.w	r2, r2, #1
 8007914:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d130      	bne.n	8007986 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007932:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b02      	cmp	r3, #2
 8007940:	d10f      	bne.n	8007962 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	4618      	mov	r0, r3
 8007948:	f000 ffe0 	bl	800890c <HAL_DMA_Abort>
 800794c:	4603      	mov	r3, r0
 800794e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007950:	7bfb      	ldrb	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007970:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800797a:	f023 0301 	bic.w	r3, r3, #1
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_ADC_ConfigChannel+0x1c>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e113      	b.n	8007bf0 <HAL_ADC_ConfigChannel+0x244>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b09      	cmp	r3, #9
 80079d6:	d925      	bls.n	8007a24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68d9      	ldr	r1, [r3, #12]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	4613      	mov	r3, r2
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4413      	add	r3, r2
 80079ec:	3b1e      	subs	r3, #30
 80079ee:	2207      	movs	r2, #7
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	43da      	mvns	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	400a      	ands	r2, r1
 80079fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68d9      	ldr	r1, [r3, #12]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	689a      	ldr	r2, [r3, #8]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4618      	mov	r0, r3
 8007a10:	4603      	mov	r3, r0
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	4403      	add	r3, r0
 8007a16:	3b1e      	subs	r3, #30
 8007a18:	409a      	lsls	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	60da      	str	r2, [r3, #12]
 8007a22:	e022      	b.n	8007a6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6919      	ldr	r1, [r3, #16]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	2207      	movs	r2, #7
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	43da      	mvns	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	400a      	ands	r2, r1
 8007a46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6919      	ldr	r1, [r3, #16]
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689a      	ldr	r2, [r3, #8]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4618      	mov	r0, r3
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4403      	add	r3, r0
 8007a60:	409a      	lsls	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b06      	cmp	r3, #6
 8007a70:	d824      	bhi.n	8007abc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	3b05      	subs	r3, #5
 8007a84:	221f      	movs	r2, #31
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	43da      	mvns	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	400a      	ands	r2, r1
 8007a92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4413      	add	r3, r2
 8007aac:	3b05      	subs	r3, #5
 8007aae:	fa00 f203 	lsl.w	r2, r0, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8007aba:	e04c      	b.n	8007b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b0c      	cmp	r3, #12
 8007ac2:	d824      	bhi.n	8007b0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3b23      	subs	r3, #35	; 0x23
 8007ad6:	221f      	movs	r2, #31
 8007ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8007adc:	43da      	mvns	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	400a      	ands	r2, r1
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	4618      	mov	r0, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	3b23      	subs	r3, #35	; 0x23
 8007b00:	fa00 f203 	lsl.w	r2, r0, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
 8007b0c:	e023      	b.n	8007b56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	3b41      	subs	r3, #65	; 0x41
 8007b20:	221f      	movs	r2, #31
 8007b22:	fa02 f303 	lsl.w	r3, r2, r3
 8007b26:	43da      	mvns	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	400a      	ands	r2, r1
 8007b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	3b41      	subs	r3, #65	; 0x41
 8007b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b56:	4b29      	ldr	r3, [pc, #164]	; (8007bfc <HAL_ADC_ConfigChannel+0x250>)
 8007b58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a28      	ldr	r2, [pc, #160]	; (8007c00 <HAL_ADC_ConfigChannel+0x254>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d10f      	bne.n	8007b84 <HAL_ADC_ConfigChannel+0x1d8>
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b12      	cmp	r3, #18
 8007b6a:	d10b      	bne.n	8007b84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1d      	ldr	r2, [pc, #116]	; (8007c00 <HAL_ADC_ConfigChannel+0x254>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d12b      	bne.n	8007be6 <HAL_ADC_ConfigChannel+0x23a>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1c      	ldr	r2, [pc, #112]	; (8007c04 <HAL_ADC_ConfigChannel+0x258>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d003      	beq.n	8007ba0 <HAL_ADC_ConfigChannel+0x1f4>
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b11      	cmp	r3, #17
 8007b9e:	d122      	bne.n	8007be6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a11      	ldr	r2, [pc, #68]	; (8007c04 <HAL_ADC_ConfigChannel+0x258>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d111      	bne.n	8007be6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007bc2:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <HAL_ADC_ConfigChannel+0x25c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <HAL_ADC_ConfigChannel+0x260>)
 8007bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bcc:	0c9a      	lsrs	r2, r3, #18
 8007bce:	4613      	mov	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	4413      	add	r3, r2
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007bd8:	e002      	b.n	8007be0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1f9      	bne.n	8007bda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3714      	adds	r7, #20
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	40012300 	.word	0x40012300
 8007c00:	40012000 	.word	0x40012000
 8007c04:	10000012 	.word	0x10000012
 8007c08:	20008f50 	.word	0x20008f50
 8007c0c:	431bde83 	.word	0x431bde83

08007c10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c18:	4b79      	ldr	r3, [pc, #484]	; (8007e00 <ADC_Init+0x1f0>)
 8007c1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6859      	ldr	r1, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	021a      	lsls	r2, r3, #8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6859      	ldr	r1, [r3, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689a      	ldr	r2, [r3, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6899      	ldr	r1, [r3, #8]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca2:	4a58      	ldr	r2, [pc, #352]	; (8007e04 <ADC_Init+0x1f4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689a      	ldr	r2, [r3, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6899      	ldr	r1, [r3, #8]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007cd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6899      	ldr	r1, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	609a      	str	r2, [r3, #8]
 8007cec:	e00f      	b.n	8007d0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689a      	ldr	r2, [r3, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007d0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0202 	bic.w	r2, r2, #2
 8007d1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6899      	ldr	r1, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	7e1b      	ldrb	r3, [r3, #24]
 8007d28:	005a      	lsls	r2, r3, #1
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01b      	beq.n	8007d74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6859      	ldr	r1, [r3, #4]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	3b01      	subs	r3, #1
 8007d68:	035a      	lsls	r2, r3, #13
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	e007      	b.n	8007d84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	051a      	lsls	r2, r3, #20
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007db8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6899      	ldr	r1, [r3, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007dc6:	025a      	lsls	r2, r3, #9
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6899      	ldr	r1, [r3, #8]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	029a      	lsls	r2, r3, #10
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	40012300 	.word	0x40012300
 8007e04:	0f000001 	.word	0x0f000001

08007e08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d13c      	bne.n	8007e9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d12b      	bne.n	8007e94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d127      	bne.n	8007e94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d006      	beq.n	8007e60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d119      	bne.n	8007e94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0220 	bic.w	r2, r2, #32
 8007e6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d105      	bne.n	8007e94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8c:	f043 0201 	orr.w	r2, r3, #1
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f7fe fd4d 	bl	8006934 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e9a:	e00e      	b.n	8007eba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	f003 0310 	and.w	r3, r3, #16
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f7ff fd75 	bl	8007998 <HAL_ADC_ErrorCallback>
}
 8007eae:	e004      	b.n	8007eba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	f7fe fd1f 	bl	8006914 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ed6:	bf00      	nop
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2240      	movs	r2, #64	; 0x40
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef6:	f043 0204 	orr.w	r2, r3, #4
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff fd4a 	bl	8007998 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007f04:	bf00      	nop
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007f14:	2300      	movs	r3, #0
 8007f16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_ADCEx_InjectedStart+0x22>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e0aa      	b.n	8008084 <HAL_ADCEx_InjectedStart+0x178>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d018      	beq.n	8007f76 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689a      	ldr	r2, [r3, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007f54:	4b4e      	ldr	r3, [pc, #312]	; (8008090 <HAL_ADCEx_InjectedStart+0x184>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a4e      	ldr	r2, [pc, #312]	; (8008094 <HAL_ADCEx_InjectedStart+0x188>)
 8007f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5e:	0c9a      	lsrs	r2, r3, #18
 8007f60:	4613      	mov	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	4413      	add	r3, r2
 8007f66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007f68:	e002      	b.n	8007f70 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f9      	bne.n	8007f6a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d172      	bne.n	800806a <HAL_ADCEx_InjectedStart+0x15e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f8c:	f023 0301 	bic.w	r3, r3, #1
 8007f90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f06f 0204 	mvn.w	r2, #4
 8007fba:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007fbc:	4b36      	ldr	r3, [pc, #216]	; (8008098 <HAL_ADCEx_InjectedStart+0x18c>)
 8007fbe:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d124      	bne.n	8008016 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	bf0c      	ite	eq
 8007fda:	2301      	moveq	r3, #1
 8007fdc:	2300      	movne	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bf0c      	ite	eq
 8007ff0:	2301      	moveq	r3, #1
 8007ff2:	2300      	movne	r3, #0
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d041      	beq.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d03e      	beq.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	e035      	b.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008020:	2b00      	cmp	r3, #0
 8008022:	bf0c      	ite	eq
 8008024:	2301      	moveq	r3, #1
 8008026:	2300      	movne	r3, #0
 8008028:	b2db      	uxtb	r3, r3
 800802a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008036:	2b00      	cmp	r3, #0
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a15      	ldr	r2, [pc, #84]	; (800809c <HAL_ADCEx_InjectedStart+0x190>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d11a      	bne.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d017      	beq.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d014      	beq.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008066:	609a      	str	r2, [r3, #8]
 8008068:	e00b      	b.n	8008082 <HAL_ADCEx_InjectedStart+0x176>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f043 0210 	orr.w	r2, r3, #16
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	f043 0201 	orr.w	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	371c      	adds	r7, #28
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20008f50 	.word	0x20008f50
 8008094:	431bde83 	.word	0x431bde83
 8008098:	40012300 	.word	0x40012300
 800809c:	40012000 	.word	0x40012000

080080a0 <HAL_ADCEx_InjectedStop>:
  * @note   In case of auto-injection mode, HAL_ADC_Stop must be used.
  * @param  hadc ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <HAL_ADCEx_InjectedStop+0x1a>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e037      	b.n	800812a <HAL_ADCEx_InjectedStop+0x8a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Conditioned to:                                                          */
  /* - No conversion on the other group (regular group) is intended to        */
  /*   continue (injected and regular groups stop conversion and ADC disable  */
  /*   are common)                                                            */
  /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d120      	bne.n	8008110 <HAL_ADCEx_InjectedStop+0x70>
     HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d119      	bne.n	8008110 <HAL_ADCEx_InjectedStop+0x70>
  {
    /* Stop potential conversion on going, on regular and injected groups */
    /* Disable ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	609a      	str	r2, [r3, #8]
    
    /* Check if ADC is effectively disabled */
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d112      	bne.n	8008120 <HAL_ADCEx_InjectedStop+0x80>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008102:	f023 0301 	bic.w	r3, r3, #1
 8008106:	f043 0201 	orr.w	r2, r3, #1
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	641a      	str	r2, [r3, #64]	; 0x40
    if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800810e:	e007      	b.n	8008120 <HAL_ADCEx_InjectedStop+0x80>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008114:	f043 0220 	orr.w	r2, r3, #32
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	641a      	str	r2, [r3, #64]	; 0x40
      
    tmp_hal_status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3714      	adds	r7, #20
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f06f 0204 	mvn.w	r2, #4
 800814e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	3b01      	subs	r3, #1
 8008154:	2b03      	cmp	r3, #3
 8008156:	d81f      	bhi.n	8008198 <HAL_ADCEx_InjectedGetValue+0x60>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <HAL_ADCEx_InjectedGetValue+0x28>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	0800818f 	.word	0x0800818f
 8008164:	08008185 	.word	0x08008185
 8008168:	0800817b 	.word	0x0800817b
 800816c:	08008171 	.word	0x08008171
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008176:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8008178:	e00f      	b.n	800819a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008180:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8008182:	e00a      	b.n	800819a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	60fb      	str	r3, [r7, #12]
    }
    break;
 800818c:	e005      	b.n	800819a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008194:	60fb      	str	r3, [r7, #12]
    }
    break;
 8008196:	e000      	b.n	800819a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8008198:	bf00      	nop
  }
  return tmp;
 800819a:	68fb      	ldr	r3, [r7, #12]
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d101      	bne.n	80081c0 <HAL_ADCEx_InjectedConfigChannel+0x18>
 80081bc:	2302      	movs	r3, #2
 80081be:	e17e      	b.n	80084be <HAL_ADCEx_InjectedConfigChannel+0x316>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b09      	cmp	r3, #9
 80081ce:	d925      	bls.n	800821c <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68d9      	ldr	r1, [r3, #12]
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	461a      	mov	r2, r3
 80081de:	4613      	mov	r3, r2
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	4413      	add	r3, r2
 80081e4:	3b1e      	subs	r3, #30
 80081e6:	2207      	movs	r2, #7
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	43da      	mvns	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	400a      	ands	r2, r1
 80081f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68d9      	ldr	r1, [r3, #12]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	b29b      	uxth	r3, r3
 8008206:	4618      	mov	r0, r3
 8008208:	4603      	mov	r3, r0
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	4403      	add	r3, r0
 800820e:	3b1e      	subs	r3, #30
 8008210:	409a      	lsls	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	e022      	b.n	8008262 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6919      	ldr	r1, [r3, #16]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	b29b      	uxth	r3, r3
 8008228:	461a      	mov	r2, r3
 800822a:	4613      	mov	r3, r2
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4413      	add	r3, r2
 8008230:	2207      	movs	r2, #7
 8008232:	fa02 f303 	lsl.w	r3, r2, r3
 8008236:	43da      	mvns	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	400a      	ands	r2, r1
 800823e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6919      	ldr	r1, [r3, #16]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	4618      	mov	r0, r3
 8008252:	4603      	mov	r3, r0
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	4403      	add	r3, r0
 8008258:	409a      	lsls	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	3b01      	subs	r3, #1
 800827e:	051a      	lsls	r2, r3, #20
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	b2db      	uxtb	r3, r3
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	b2db      	uxtb	r3, r3
 800829e:	3303      	adds	r3, #3
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	461a      	mov	r2, r3
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	221f      	movs	r2, #31
 80082ac:	fa02 f303 	lsl.w	r3, r2, r3
 80082b0:	43da      	mvns	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	400a      	ands	r2, r1
 80082b8:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	4618      	mov	r0, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3303      	adds	r3, #3
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	fa00 f203 	lsl.w	r2, r0, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	4a75      	ldr	r2, [pc, #468]	; (80084cc <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d022      	beq.n	8008340 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8008308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6899      	ldr	r1, [r3, #8]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	699a      	ldr	r2, [r3, #24]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	430a      	orrs	r2, r1
 800831a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800832a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6899      	ldr	r1, [r3, #8]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	69da      	ldr	r2, [r3, #28]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	609a      	str	r2, [r3, #8]
 800833e:	e00f      	b.n	8008360 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800834e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689a      	ldr	r2, [r3, #8]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800835e:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	7d5b      	ldrb	r3, [r3, #21]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008376:	605a      	str	r2, [r3, #4]
 8008378:	e007      	b.n	800838a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008388:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	7d1b      	ldrb	r3, [r3, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d008      	beq.n	80083a4 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	e007      	b.n	80083b4 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083b2:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d02e      	beq.n	800841a <HAL_ADCEx_InjectedConfigChannel+0x272>
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d840      	bhi.n	8008442 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d002      	beq.n	80083ca <HAL_ADCEx_InjectedConfigChannel+0x222>
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d014      	beq.n	80083f2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80083c8:	e03b      	b.n	8008442 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80083d8:	f023 030f 	bic.w	r3, r3, #15
 80083dc:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	6959      	ldr	r1, [r3, #20]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	615a      	str	r2, [r3, #20]
      break;
 80083f0:	e03b      	b.n	800846a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008400:	f023 030f 	bic.w	r3, r3, #15
 8008404:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6999      	ldr	r1, [r3, #24]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	619a      	str	r2, [r3, #24]
      break;
 8008418:	e027      	b.n	800846a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008428:	f023 030f 	bic.w	r3, r3, #15
 800842c:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69d9      	ldr	r1, [r3, #28]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	61da      	str	r2, [r3, #28]
      break;
 8008440:	e013      	b.n	800846a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6812      	ldr	r2, [r2, #0]
 800844c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008450:	f023 030f 	bic.w	r3, r3, #15
 8008454:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6a19      	ldr	r1, [r3, #32]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	621a      	str	r2, [r3, #32]
      break;
 8008468:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800846a:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800846c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a18      	ldr	r2, [pc, #96]	; (80084d4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d109      	bne.n	800848c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b12      	cmp	r3, #18
 800847e:	d105      	bne.n	800848c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a10      	ldr	r2, [pc, #64]	; (80084d4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d10e      	bne.n	80084b4 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a0f      	ldr	r2, [pc, #60]	; (80084d8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <HAL_ADCEx_InjectedConfigChannel+0x300>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b11      	cmp	r3, #17
 80084a6:	d105      	bne.n	80084b4 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	000f0001 	.word	0x000f0001
 80084d0:	40012300 	.word	0x40012300
 80084d4:	40012000 	.word	0x40012000
 80084d8:	10000012 	.word	0x10000012

080084dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084ec:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <__NVIC_SetPriorityGrouping+0x44>)
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80084f8:	4013      	ands	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800850c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800850e:	4a04      	ldr	r2, [pc, #16]	; (8008520 <__NVIC_SetPriorityGrouping+0x44>)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	60d3      	str	r3, [r2, #12]
}
 8008514:	bf00      	nop
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	e000ed00 	.word	0xe000ed00

08008524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008528:	4b04      	ldr	r3, [pc, #16]	; (800853c <__NVIC_GetPriorityGrouping+0x18>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	0a1b      	lsrs	r3, r3, #8
 800852e:	f003 0307 	and.w	r3, r3, #7
}
 8008532:	4618      	mov	r0, r3
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	e000ed00 	.word	0xe000ed00

08008540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800854a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800854e:	2b00      	cmp	r3, #0
 8008550:	db0b      	blt.n	800856a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	f003 021f 	and.w	r2, r3, #31
 8008558:	4907      	ldr	r1, [pc, #28]	; (8008578 <__NVIC_EnableIRQ+0x38>)
 800855a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800855e:	095b      	lsrs	r3, r3, #5
 8008560:	2001      	movs	r0, #1
 8008562:	fa00 f202 	lsl.w	r2, r0, r2
 8008566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800856a:	bf00      	nop
 800856c:	370c      	adds	r7, #12
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	e000e100 	.word	0xe000e100

0800857c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	6039      	str	r1, [r7, #0]
 8008586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858c:	2b00      	cmp	r3, #0
 800858e:	db0a      	blt.n	80085a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	b2da      	uxtb	r2, r3
 8008594:	490c      	ldr	r1, [pc, #48]	; (80085c8 <__NVIC_SetPriority+0x4c>)
 8008596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800859a:	0112      	lsls	r2, r2, #4
 800859c:	b2d2      	uxtb	r2, r2
 800859e:	440b      	add	r3, r1
 80085a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80085a4:	e00a      	b.n	80085bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	4908      	ldr	r1, [pc, #32]	; (80085cc <__NVIC_SetPriority+0x50>)
 80085ac:	79fb      	ldrb	r3, [r7, #7]
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	3b04      	subs	r3, #4
 80085b4:	0112      	lsls	r2, r2, #4
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	440b      	add	r3, r1
 80085ba:	761a      	strb	r2, [r3, #24]
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	e000e100 	.word	0xe000e100
 80085cc:	e000ed00 	.word	0xe000ed00

080085d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f1c3 0307 	rsb	r3, r3, #7
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	bf28      	it	cs
 80085ee:	2304      	movcs	r3, #4
 80085f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	3304      	adds	r3, #4
 80085f6:	2b06      	cmp	r3, #6
 80085f8:	d902      	bls.n	8008600 <NVIC_EncodePriority+0x30>
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3b03      	subs	r3, #3
 80085fe:	e000      	b.n	8008602 <NVIC_EncodePriority+0x32>
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008604:	f04f 32ff 	mov.w	r2, #4294967295
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	fa02 f303 	lsl.w	r3, r2, r3
 800860e:	43da      	mvns	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	401a      	ands	r2, r3
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008618:	f04f 31ff 	mov.w	r1, #4294967295
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	fa01 f303 	lsl.w	r3, r1, r3
 8008622:	43d9      	mvns	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008628:	4313      	orrs	r3, r2
         );
}
 800862a:	4618      	mov	r0, r3
 800862c:	3724      	adds	r7, #36	; 0x24
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3b01      	subs	r3, #1
 8008644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008648:	d301      	bcc.n	800864e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800864a:	2301      	movs	r3, #1
 800864c:	e00f      	b.n	800866e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <SysTick_Config+0x40>)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3b01      	subs	r3, #1
 8008654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008656:	210f      	movs	r1, #15
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	f7ff ff8e 	bl	800857c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008660:	4b05      	ldr	r3, [pc, #20]	; (8008678 <SysTick_Config+0x40>)
 8008662:	2200      	movs	r2, #0
 8008664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008666:	4b04      	ldr	r3, [pc, #16]	; (8008678 <SysTick_Config+0x40>)
 8008668:	2207      	movs	r2, #7
 800866a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	e000e010 	.word	0xe000e010

0800867c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff29 	bl	80084dc <__NVIC_SetPriorityGrouping>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	4603      	mov	r3, r0
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086a4:	f7ff ff3e 	bl	8008524 <__NVIC_GetPriorityGrouping>
 80086a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7ff ff8e 	bl	80085d0 <NVIC_EncodePriority>
 80086b4:	4602      	mov	r2, r0
 80086b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff ff5d 	bl	800857c <__NVIC_SetPriority>
}
 80086c2:	bf00      	nop
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	4603      	mov	r3, r0
 80086d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80086d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff ff31 	bl	8008540 <__NVIC_EnableIRQ>
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff ffa2 	bl	8008638 <SysTick_Config>
 80086f4:	4603      	mov	r3, r0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800870c:	f7fe fe46 	bl	800739c <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e099      	b.n	8008850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800873c:	e00f      	b.n	800875e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800873e:	f7fe fe2d 	bl	800739c <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b05      	cmp	r3, #5
 800874a:	d908      	bls.n	800875e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2220      	movs	r2, #32
 8008750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2203      	movs	r2, #3
 8008756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e078      	b.n	8008850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e8      	bne.n	800873e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	4b38      	ldr	r3, [pc, #224]	; (8008858 <HAL_DMA_Init+0x158>)
 8008778:	4013      	ands	r3, r2
 800877a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800878a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80087a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d107      	bne.n	80087c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c0:	4313      	orrs	r3, r2
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f023 0307 	bic.w	r3, r3, #7
 80087de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b04      	cmp	r3, #4
 80087f0:	d117      	bne.n	8008822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	697a      	ldr	r2, [r7, #20]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fadf 	bl	8008dc8 <DMA_CheckFifoParam>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d008      	beq.n	8008822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2240      	movs	r2, #64	; 0x40
 8008814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800881e:	2301      	movs	r3, #1
 8008820:	e016      	b.n	8008850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fa96 	bl	8008d5c <DMA_CalcBaseAndBitshift>
 8008830:	4603      	mov	r3, r0
 8008832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008838:	223f      	movs	r2, #63	; 0x3f
 800883a:	409a      	lsls	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	f010803f 	.word	0xf010803f

0800885c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800887a:	2b01      	cmp	r3, #1
 800887c:	d101      	bne.n	8008882 <HAL_DMA_Start_IT+0x26>
 800887e:	2302      	movs	r3, #2
 8008880:	e040      	b.n	8008904 <HAL_DMA_Start_IT+0xa8>
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b01      	cmp	r3, #1
 8008894:	d12f      	bne.n	80088f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2202      	movs	r2, #2
 800889a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	68f8      	ldr	r0, [r7, #12]
 80088ac:	f000 fa28 	bl	8008d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b4:	223f      	movs	r2, #63	; 0x3f
 80088b6:	409a      	lsls	r2, r3
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0216 	orr.w	r2, r2, #22
 80088ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f042 0208 	orr.w	r2, r2, #8
 80088e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0201 	orr.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	e005      	b.n	8008902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80088fe:	2302      	movs	r3, #2
 8008900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008902:	7dfb      	ldrb	r3, [r7, #23]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008918:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800891a:	f7fe fd3f 	bl	800739c <HAL_GetTick>
 800891e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d008      	beq.n	800893e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2280      	movs	r2, #128	; 0x80
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e052      	b.n	80089e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0216 	bic.w	r2, r2, #22
 800894c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	695a      	ldr	r2, [r3, #20]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d103      	bne.n	800896e <HAL_DMA_Abort+0x62>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 0208 	bic.w	r2, r2, #8
 800897c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800898e:	e013      	b.n	80089b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008990:	f7fe fd04 	bl	800739c <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b05      	cmp	r3, #5
 800899c:	d90c      	bls.n	80089b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2220      	movs	r2, #32
 80089a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2203      	movs	r2, #3
 80089a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e015      	b.n	80089e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e4      	bne.n	8008990 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ca:	223f      	movs	r2, #63	; 0x3f
 80089cc:	409a      	lsls	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80089f8:	4b8e      	ldr	r3, [pc, #568]	; (8008c34 <HAL_DMA_IRQHandler+0x248>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a8e      	ldr	r2, [pc, #568]	; (8008c38 <HAL_DMA_IRQHandler+0x24c>)
 80089fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008a02:	0a9b      	lsrs	r3, r3, #10
 8008a04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a16:	2208      	movs	r2, #8
 8008a18:	409a      	lsls	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01a      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0304 	and.w	r3, r3, #4
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d013      	beq.n	8008a58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0204 	bic.w	r2, r2, #4
 8008a3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a44:	2208      	movs	r2, #8
 8008a46:	409a      	lsls	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a50:	f043 0201 	orr.w	r2, r3, #1
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	409a      	lsls	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d012      	beq.n	8008a8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00b      	beq.n	8008a8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	409a      	lsls	r2, r3
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a86:	f043 0202 	orr.w	r2, r3, #2
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a92:	2204      	movs	r2, #4
 8008a94:	409a      	lsls	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d012      	beq.n	8008ac4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0302 	and.w	r3, r3, #2
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ab0:	2204      	movs	r2, #4
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abc:	f043 0204 	orr.w	r2, r3, #4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ac8:	2210      	movs	r2, #16
 8008aca:	409a      	lsls	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4013      	ands	r3, r2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d043      	beq.n	8008b5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d03c      	beq.n	8008b5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae6:	2210      	movs	r2, #16
 8008ae8:	409a      	lsls	r2, r3
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d018      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d108      	bne.n	8008b1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d024      	beq.n	8008b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	4798      	blx	r3
 8008b1a:	e01f      	b.n	8008b5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01b      	beq.n	8008b5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
 8008b2c:	e016      	b.n	8008b5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d107      	bne.n	8008b4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0208 	bic.w	r2, r2, #8
 8008b4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b60:	2220      	movs	r2, #32
 8008b62:	409a      	lsls	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	4013      	ands	r3, r2
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 808f 	beq.w	8008c8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0310 	and.w	r3, r3, #16
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 8087 	beq.w	8008c8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b82:	2220      	movs	r2, #32
 8008b84:	409a      	lsls	r2, r3
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d136      	bne.n	8008c04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 0216 	bic.w	r2, r2, #22
 8008ba4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	695a      	ldr	r2, [r3, #20]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d103      	bne.n	8008bc6 <HAL_DMA_IRQHandler+0x1da>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d007      	beq.n	8008bd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0208 	bic.w	r2, r2, #8
 8008bd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bda:	223f      	movs	r2, #63	; 0x3f
 8008bdc:	409a      	lsls	r2, r3
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d07e      	beq.n	8008cf8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	4798      	blx	r3
        }
        return;
 8008c02:	e079      	b.n	8008cf8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01d      	beq.n	8008c4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10d      	bne.n	8008c3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d031      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
 8008c30:	e02c      	b.n	8008c8c <HAL_DMA_IRQHandler+0x2a0>
 8008c32:	bf00      	nop
 8008c34:	20008f50 	.word	0x20008f50
 8008c38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d023      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
 8008c4c:	e01e      	b.n	8008c8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10f      	bne.n	8008c7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0210 	bic.w	r2, r2, #16
 8008c6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d003      	beq.n	8008c8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d032      	beq.n	8008cfa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d022      	beq.n	8008ce6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0201 	bic.w	r2, r2, #1
 8008cb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d307      	bcc.n	8008cd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1f2      	bne.n	8008cb8 <HAL_DMA_IRQHandler+0x2cc>
 8008cd2:	e000      	b.n	8008cd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008cd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d005      	beq.n	8008cfa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
 8008cf6:	e000      	b.n	8008cfa <HAL_DMA_IRQHandler+0x30e>
        return;
 8008cf8:	bf00      	nop
    }
  }
}
 8008cfa:	3718      	adds	r7, #24
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2b40      	cmp	r3, #64	; 0x40
 8008d2c:	d108      	bne.n	8008d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008d3e:	e007      	b.n	8008d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68ba      	ldr	r2, [r7, #8]
 8008d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	60da      	str	r2, [r3, #12]
}
 8008d50:	bf00      	nop
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	3b10      	subs	r3, #16
 8008d6c:	4a14      	ldr	r2, [pc, #80]	; (8008dc0 <DMA_CalcBaseAndBitshift+0x64>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	091b      	lsrs	r3, r3, #4
 8008d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d76:	4a13      	ldr	r2, [pc, #76]	; (8008dc4 <DMA_CalcBaseAndBitshift+0x68>)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b03      	cmp	r3, #3
 8008d88:	d909      	bls.n	8008d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	1d1a      	adds	r2, r3, #4
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8008d9c:	e007      	b.n	8008dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008da6:	f023 0303 	bic.w	r3, r3, #3
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	aaaaaaab 	.word	0xaaaaaaab
 8008dc4:	0800f3ec 	.word	0x0800f3ec

08008dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d11f      	bne.n	8008e22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d856      	bhi.n	8008e96 <DMA_CheckFifoParam+0xce>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <DMA_CheckFifoParam+0x28>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e01 	.word	0x08008e01
 8008df4:	08008e13 	.word	0x08008e13
 8008df8:	08008e01 	.word	0x08008e01
 8008dfc:	08008e97 	.word	0x08008e97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d046      	beq.n	8008e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e10:	e043      	b.n	8008e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e1a:	d140      	bne.n	8008e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e20:	e03d      	b.n	8008e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e2a:	d121      	bne.n	8008e70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d837      	bhi.n	8008ea2 <DMA_CheckFifoParam+0xda>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <DMA_CheckFifoParam+0x70>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008e49 	.word	0x08008e49
 8008e3c:	08008e4f 	.word	0x08008e4f
 8008e40:	08008e49 	.word	0x08008e49
 8008e44:	08008e61 	.word	0x08008e61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4c:	e030      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d025      	beq.n	8008ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e5e:	e022      	b.n	8008ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e68:	d11f      	bne.n	8008eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008e6e:	e01c      	b.n	8008eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d903      	bls.n	8008e7e <DMA_CheckFifoParam+0xb6>
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2b03      	cmp	r3, #3
 8008e7a:	d003      	beq.n	8008e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008e7c:	e018      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	73fb      	strb	r3, [r7, #15]
      break;
 8008e82:	e015      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00e      	beq.n	8008eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
      break;
 8008e94:	e00b      	b.n	8008eae <DMA_CheckFifoParam+0xe6>
      break;
 8008e96:	bf00      	nop
 8008e98:	e00a      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e008      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e006      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e004      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8008ea6:	bf00      	nop
 8008ea8:	e002      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8008eaa:	bf00      	nop
 8008eac:	e000      	b.n	8008eb0 <DMA_CheckFifoParam+0xe8>
      break;
 8008eae:	bf00      	nop
    }
  } 
  
  return status; 
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop

08008ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b089      	sub	sp, #36	; 0x24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	e159      	b.n	8009190 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008edc:	2201      	movs	r2, #1
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4013      	ands	r3, r2
 8008eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	f040 8148 	bne.w	800918a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d005      	beq.n	8008f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d130      	bne.n	8008f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	43db      	mvns	r3, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4013      	ands	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	68da      	ldr	r2, [r3, #12]
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f48:	2201      	movs	r2, #1
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f50:	43db      	mvns	r3, r3
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	4013      	ands	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	091b      	lsrs	r3, r3, #4
 8008f5e:	f003 0201 	and.w	r2, r3, #1
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	fa02 f303 	lsl.w	r3, r2, r3
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69ba      	ldr	r2, [r7, #24]
 8008f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d017      	beq.n	8008fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	2203      	movs	r2, #3
 8008f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f90:	43db      	mvns	r3, r3
 8008f92:	69ba      	ldr	r2, [r7, #24]
 8008f94:	4013      	ands	r3, r2
 8008f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa4:	69ba      	ldr	r2, [r7, #24]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	69ba      	ldr	r2, [r7, #24]
 8008fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d123      	bne.n	8009004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	08da      	lsrs	r2, r3, #3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3208      	adds	r2, #8
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fca:	69fb      	ldr	r3, [r7, #28]
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	220f      	movs	r2, #15
 8008fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd8:	43db      	mvns	r3, r3
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	4013      	ands	r3, r2
 8008fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	08da      	lsrs	r2, r3, #3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3208      	adds	r2, #8
 8008ffe:	69b9      	ldr	r1, [r7, #24]
 8009000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	2203      	movs	r2, #3
 8009010:	fa02 f303 	lsl.w	r3, r2, r3
 8009014:	43db      	mvns	r3, r3
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	4013      	ands	r3, r2
 800901a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f003 0203 	and.w	r2, r3, #3
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	fa02 f303 	lsl.w	r3, r2, r3
 800902c:	69ba      	ldr	r2, [r7, #24]
 800902e:	4313      	orrs	r3, r2
 8009030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 80a2 	beq.w	800918a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009046:	2300      	movs	r3, #0
 8009048:	60fb      	str	r3, [r7, #12]
 800904a:	4b57      	ldr	r3, [pc, #348]	; (80091a8 <HAL_GPIO_Init+0x2e8>)
 800904c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904e:	4a56      	ldr	r2, [pc, #344]	; (80091a8 <HAL_GPIO_Init+0x2e8>)
 8009050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009054:	6453      	str	r3, [r2, #68]	; 0x44
 8009056:	4b54      	ldr	r3, [pc, #336]	; (80091a8 <HAL_GPIO_Init+0x2e8>)
 8009058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009062:	4a52      	ldr	r2, [pc, #328]	; (80091ac <HAL_GPIO_Init+0x2ec>)
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	089b      	lsrs	r3, r3, #2
 8009068:	3302      	adds	r3, #2
 800906a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f003 0303 	and.w	r3, r3, #3
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	220f      	movs	r2, #15
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43db      	mvns	r3, r3
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	4013      	ands	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a49      	ldr	r2, [pc, #292]	; (80091b0 <HAL_GPIO_Init+0x2f0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d019      	beq.n	80090c2 <HAL_GPIO_Init+0x202>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a48      	ldr	r2, [pc, #288]	; (80091b4 <HAL_GPIO_Init+0x2f4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d013      	beq.n	80090be <HAL_GPIO_Init+0x1fe>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a47      	ldr	r2, [pc, #284]	; (80091b8 <HAL_GPIO_Init+0x2f8>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d00d      	beq.n	80090ba <HAL_GPIO_Init+0x1fa>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a46      	ldr	r2, [pc, #280]	; (80091bc <HAL_GPIO_Init+0x2fc>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d007      	beq.n	80090b6 <HAL_GPIO_Init+0x1f6>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a45      	ldr	r2, [pc, #276]	; (80091c0 <HAL_GPIO_Init+0x300>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d101      	bne.n	80090b2 <HAL_GPIO_Init+0x1f2>
 80090ae:	2304      	movs	r3, #4
 80090b0:	e008      	b.n	80090c4 <HAL_GPIO_Init+0x204>
 80090b2:	2307      	movs	r3, #7
 80090b4:	e006      	b.n	80090c4 <HAL_GPIO_Init+0x204>
 80090b6:	2303      	movs	r3, #3
 80090b8:	e004      	b.n	80090c4 <HAL_GPIO_Init+0x204>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e002      	b.n	80090c4 <HAL_GPIO_Init+0x204>
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <HAL_GPIO_Init+0x204>
 80090c2:	2300      	movs	r3, #0
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	f002 0203 	and.w	r2, r2, #3
 80090ca:	0092      	lsls	r2, r2, #2
 80090cc:	4093      	lsls	r3, r2
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090d4:	4935      	ldr	r1, [pc, #212]	; (80091ac <HAL_GPIO_Init+0x2ec>)
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	089b      	lsrs	r3, r3, #2
 80090da:	3302      	adds	r3, #2
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80090e2:	4b38      	ldr	r3, [pc, #224]	; (80091c4 <HAL_GPIO_Init+0x304>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	43db      	mvns	r3, r3
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	4013      	ands	r3, r2
 80090f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	4313      	orrs	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009106:	4a2f      	ldr	r2, [pc, #188]	; (80091c4 <HAL_GPIO_Init+0x304>)
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800910c:	4b2d      	ldr	r3, [pc, #180]	; (80091c4 <HAL_GPIO_Init+0x304>)
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	43db      	mvns	r3, r3
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	4013      	ands	r3, r2
 800911a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	4313      	orrs	r3, r2
 800912e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009130:	4a24      	ldr	r2, [pc, #144]	; (80091c4 <HAL_GPIO_Init+0x304>)
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009136:	4b23      	ldr	r3, [pc, #140]	; (80091c4 <HAL_GPIO_Init+0x304>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	43db      	mvns	r3, r3
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	4013      	ands	r3, r2
 8009144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d003      	beq.n	800915a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	4313      	orrs	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800915a:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <HAL_GPIO_Init+0x304>)
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009160:	4b18      	ldr	r3, [pc, #96]	; (80091c4 <HAL_GPIO_Init+0x304>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	43db      	mvns	r3, r3
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	4013      	ands	r3, r2
 800916e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009184:	4a0f      	ldr	r2, [pc, #60]	; (80091c4 <HAL_GPIO_Init+0x304>)
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	3301      	adds	r3, #1
 800918e:	61fb      	str	r3, [r7, #28]
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	f67f aea2 	bls.w	8008edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	3724      	adds	r7, #36	; 0x24
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40023800 	.word	0x40023800
 80091ac:	40013800 	.word	0x40013800
 80091b0:	40020000 	.word	0x40020000
 80091b4:	40020400 	.word	0x40020400
 80091b8:	40020800 	.word	0x40020800
 80091bc:	40020c00 	.word	0x40020c00
 80091c0:	40021000 	.word	0x40021000
 80091c4:	40013c00 	.word	0x40013c00

080091c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	807b      	strh	r3, [r7, #2]
 80091d4:	4613      	mov	r3, r2
 80091d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80091d8:	787b      	ldrb	r3, [r7, #1]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80091de:	887a      	ldrh	r2, [r7, #2]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80091e4:	e003      	b.n	80091ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80091e6:	887b      	ldrh	r3, [r7, #2]
 80091e8:	041a      	lsls	r2, r3, #16
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	619a      	str	r2, [r3, #24]
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
	...

080091fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	4603      	mov	r3, r0
 8009204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009206:	4b08      	ldr	r3, [pc, #32]	; (8009228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009208:	695a      	ldr	r2, [r3, #20]
 800920a:	88fb      	ldrh	r3, [r7, #6]
 800920c:	4013      	ands	r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d006      	beq.n	8009220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009212:	4a05      	ldr	r2, [pc, #20]	; (8009228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009214:	88fb      	ldrh	r3, [r7, #6]
 8009216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd fbfa 	bl	8006a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	40013c00 	.word	0x40013c00

0800922c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e12b      	b.n	8009496 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d106      	bne.n	8009258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fd fcd4 	bl	8006c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2224      	movs	r2, #36	; 0x24
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800927e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800928e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009290:	f001 fbbc 	bl	800aa0c <HAL_RCC_GetPCLK1Freq>
 8009294:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	4a81      	ldr	r2, [pc, #516]	; (80094a0 <HAL_I2C_Init+0x274>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d807      	bhi.n	80092b0 <HAL_I2C_Init+0x84>
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4a80      	ldr	r2, [pc, #512]	; (80094a4 <HAL_I2C_Init+0x278>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	bf94      	ite	ls
 80092a8:	2301      	movls	r3, #1
 80092aa:	2300      	movhi	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	e006      	b.n	80092be <HAL_I2C_Init+0x92>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4a7d      	ldr	r2, [pc, #500]	; (80094a8 <HAL_I2C_Init+0x27c>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	bf94      	ite	ls
 80092b8:	2301      	movls	r3, #1
 80092ba:	2300      	movhi	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e0e7      	b.n	8009496 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4a78      	ldr	r2, [pc, #480]	; (80094ac <HAL_I2C_Init+0x280>)
 80092ca:	fba2 2303 	umull	r2, r3, r2, r3
 80092ce:	0c9b      	lsrs	r3, r3, #18
 80092d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4a6a      	ldr	r2, [pc, #424]	; (80094a0 <HAL_I2C_Init+0x274>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d802      	bhi.n	8009300 <HAL_I2C_Init+0xd4>
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3301      	adds	r3, #1
 80092fe:	e009      	b.n	8009314 <HAL_I2C_Init+0xe8>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009306:	fb02 f303 	mul.w	r3, r2, r3
 800930a:	4a69      	ldr	r2, [pc, #420]	; (80094b0 <HAL_I2C_Init+0x284>)
 800930c:	fba2 2303 	umull	r2, r3, r2, r3
 8009310:	099b      	lsrs	r3, r3, #6
 8009312:	3301      	adds	r3, #1
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	6812      	ldr	r2, [r2, #0]
 8009318:	430b      	orrs	r3, r1
 800931a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009326:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	495c      	ldr	r1, [pc, #368]	; (80094a0 <HAL_I2C_Init+0x274>)
 8009330:	428b      	cmp	r3, r1
 8009332:	d819      	bhi.n	8009368 <HAL_I2C_Init+0x13c>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	1e59      	subs	r1, r3, #1
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009342:	1c59      	adds	r1, r3, #1
 8009344:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009348:	400b      	ands	r3, r1
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <HAL_I2C_Init+0x138>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	1e59      	subs	r1, r3, #1
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	005b      	lsls	r3, r3, #1
 8009358:	fbb1 f3f3 	udiv	r3, r1, r3
 800935c:	3301      	adds	r3, #1
 800935e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009362:	e051      	b.n	8009408 <HAL_I2C_Init+0x1dc>
 8009364:	2304      	movs	r3, #4
 8009366:	e04f      	b.n	8009408 <HAL_I2C_Init+0x1dc>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d111      	bne.n	8009394 <HAL_I2C_Init+0x168>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	1e58      	subs	r0, r3, #1
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6859      	ldr	r1, [r3, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	440b      	add	r3, r1
 800937e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009382:	3301      	adds	r3, #1
 8009384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009388:	2b00      	cmp	r3, #0
 800938a:	bf0c      	ite	eq
 800938c:	2301      	moveq	r3, #1
 800938e:	2300      	movne	r3, #0
 8009390:	b2db      	uxtb	r3, r3
 8009392:	e012      	b.n	80093ba <HAL_I2C_Init+0x18e>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	1e58      	subs	r0, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	0099      	lsls	r1, r3, #2
 80093a4:	440b      	add	r3, r1
 80093a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80093aa:	3301      	adds	r3, #1
 80093ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf0c      	ite	eq
 80093b4:	2301      	moveq	r3, #1
 80093b6:	2300      	movne	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <HAL_I2C_Init+0x196>
 80093be:	2301      	movs	r3, #1
 80093c0:	e022      	b.n	8009408 <HAL_I2C_Init+0x1dc>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10e      	bne.n	80093e8 <HAL_I2C_Init+0x1bc>
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	1e58      	subs	r0, r3, #1
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6859      	ldr	r1, [r3, #4]
 80093d2:	460b      	mov	r3, r1
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	440b      	add	r3, r1
 80093d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80093dc:	3301      	adds	r3, #1
 80093de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093e6:	e00f      	b.n	8009408 <HAL_I2C_Init+0x1dc>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	1e58      	subs	r0, r3, #1
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6859      	ldr	r1, [r3, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	440b      	add	r3, r1
 80093f6:	0099      	lsls	r1, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80093fe:	3301      	adds	r3, #1
 8009400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	6809      	ldr	r1, [r1, #0]
 800940c:	4313      	orrs	r3, r2
 800940e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69da      	ldr	r2, [r3, #28]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6911      	ldr	r1, [r2, #16]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	68d2      	ldr	r2, [r2, #12]
 8009442:	4311      	orrs	r1, r2
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	430b      	orrs	r3, r1
 800944a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695a      	ldr	r2, [r3, #20]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	431a      	orrs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f042 0201 	orr.w	r2, r2, #1
 8009476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2220      	movs	r2, #32
 8009482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	000186a0 	.word	0x000186a0
 80094a4:	001e847f 	.word	0x001e847f
 80094a8:	003d08ff 	.word	0x003d08ff
 80094ac:	431bde83 	.word	0x431bde83
 80094b0:	10624dd3 	.word	0x10624dd3

080094b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b088      	sub	sp, #32
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	4608      	mov	r0, r1
 80094be:	4611      	mov	r1, r2
 80094c0:	461a      	mov	r2, r3
 80094c2:	4603      	mov	r3, r0
 80094c4:	817b      	strh	r3, [r7, #10]
 80094c6:	460b      	mov	r3, r1
 80094c8:	813b      	strh	r3, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094ce:	f7fd ff65 	bl	800739c <HAL_GetTick>
 80094d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b20      	cmp	r3, #32
 80094de:	f040 80d9 	bne.w	8009694 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	2319      	movs	r3, #25
 80094e8:	2201      	movs	r2, #1
 80094ea:	496d      	ldr	r1, [pc, #436]	; (80096a0 <HAL_I2C_Mem_Write+0x1ec>)
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 fc7f 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80094f8:	2302      	movs	r3, #2
 80094fa:	e0cc      	b.n	8009696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <HAL_I2C_Mem_Write+0x56>
 8009506:	2302      	movs	r3, #2
 8009508:	e0c5      	b.n	8009696 <HAL_I2C_Mem_Write+0x1e2>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b01      	cmp	r3, #1
 800951e:	d007      	beq.n	8009530 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0201 	orr.w	r2, r2, #1
 800952e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800953e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2221      	movs	r2, #33	; 0x21
 8009544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2240      	movs	r2, #64	; 0x40
 800954c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a3a      	ldr	r2, [r7, #32]
 800955a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a4d      	ldr	r2, [pc, #308]	; (80096a4 <HAL_I2C_Mem_Write+0x1f0>)
 8009570:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009572:	88f8      	ldrh	r0, [r7, #6]
 8009574:	893a      	ldrh	r2, [r7, #8]
 8009576:	8979      	ldrh	r1, [r7, #10]
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	9301      	str	r3, [sp, #4]
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	4603      	mov	r3, r0
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 fab6 	bl	8009af4 <I2C_RequestMemoryWrite>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d052      	beq.n	8009634 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e081      	b.n	8009696 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009592:	697a      	ldr	r2, [r7, #20]
 8009594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fd00 	bl	8009f9c <I2C_WaitOnTXEFlagUntilTimeout>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00d      	beq.n	80095be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	d107      	bne.n	80095ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e06b      	b.n	8009696 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	781a      	ldrb	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d8:	3b01      	subs	r3, #1
 80095da:	b29a      	uxth	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	3b01      	subs	r3, #1
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	f003 0304 	and.w	r3, r3, #4
 80095f8:	2b04      	cmp	r3, #4
 80095fa:	d11b      	bne.n	8009634 <HAL_I2C_Mem_Write+0x180>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009600:	2b00      	cmp	r3, #0
 8009602:	d017      	beq.n	8009634 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	781a      	ldrb	r2, [r3, #0]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800961e:	3b01      	subs	r3, #1
 8009620:	b29a      	uxth	r2, r3
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962a:	b29b      	uxth	r3, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	b29a      	uxth	r2, r3
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1aa      	bne.n	8009592 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 fcec 	bl	800a01e <I2C_WaitOnBTFFlagUntilTimeout>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00d      	beq.n	8009668 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	2b04      	cmp	r3, #4
 8009652:	d107      	bne.n	8009664 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009662:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e016      	b.n	8009696 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	681a      	ldr	r2, [r3, #0]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	e000      	b.n	8009696 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009694:	2302      	movs	r3, #2
  }
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	00100002 	.word	0x00100002
 80096a4:	ffff0000 	.word	0xffff0000

080096a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b08c      	sub	sp, #48	; 0x30
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	817b      	strh	r3, [r7, #10]
 80096ba:	460b      	mov	r3, r1
 80096bc:	813b      	strh	r3, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096c2:	f7fd fe6b 	bl	800739c <HAL_GetTick>
 80096c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b20      	cmp	r3, #32
 80096d2:	f040 8208 	bne.w	8009ae6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	2319      	movs	r3, #25
 80096dc:	2201      	movs	r2, #1
 80096de:	497b      	ldr	r1, [pc, #492]	; (80098cc <HAL_I2C_Mem_Read+0x224>)
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fb85 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80096ec:	2302      	movs	r3, #2
 80096ee:	e1fb      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d101      	bne.n	80096fe <HAL_I2C_Mem_Read+0x56>
 80096fa:	2302      	movs	r3, #2
 80096fc:	e1f4      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b01      	cmp	r3, #1
 8009712:	d007      	beq.n	8009724 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 0201 	orr.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009732:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2222      	movs	r2, #34	; 0x22
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2240      	movs	r2, #64	; 0x40
 8009740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4a5b      	ldr	r2, [pc, #364]	; (80098d0 <HAL_I2C_Mem_Read+0x228>)
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009766:	88f8      	ldrh	r0, [r7, #6]
 8009768:	893a      	ldrh	r2, [r7, #8]
 800976a:	8979      	ldrh	r1, [r7, #10]
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	4603      	mov	r3, r0
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f000 fa52 	bl	8009c20 <I2C_RequestMemoryRead>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e1b0      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	d113      	bne.n	80097b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800978e:	2300      	movs	r3, #0
 8009790:	623b      	str	r3, [r7, #32]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	623b      	str	r3, [r7, #32]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	699b      	ldr	r3, [r3, #24]
 80097a0:	623b      	str	r3, [r7, #32]
 80097a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	e184      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d11b      	bne.n	80097f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097ce:	2300      	movs	r3, #0
 80097d0:	61fb      	str	r3, [r7, #28]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	61fb      	str	r3, [r7, #28]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	61fb      	str	r3, [r7, #28]
 80097e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e164      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d11b      	bne.n	8009836 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800980c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800981c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800981e:	2300      	movs	r3, #0
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	61bb      	str	r3, [r7, #24]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	61bb      	str	r3, [r7, #24]
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	e144      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800984c:	e138      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009852:	2b03      	cmp	r3, #3
 8009854:	f200 80f1 	bhi.w	8009a3a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800985c:	2b01      	cmp	r3, #1
 800985e:	d123      	bne.n	80098a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fc1b 	bl	800a0a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	e139      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	b2d2      	uxtb	r2, r2
 8009880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009886:	1c5a      	adds	r2, r3, #1
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009890:	3b01      	subs	r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800989c:	b29b      	uxth	r3, r3
 800989e:	3b01      	subs	r3, #1
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098a6:	e10b      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d14e      	bne.n	800994e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	2200      	movs	r2, #0
 80098b8:	4906      	ldr	r1, [pc, #24]	; (80098d4 <HAL_I2C_Mem_Read+0x22c>)
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fa98 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d008      	beq.n	80098d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e10e      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
 80098ca:	bf00      	nop
 80098cc:	00100002 	.word	0x00100002
 80098d0:	ffff0000 	.word	0xffff0000
 80098d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	691a      	ldr	r2, [r3, #16]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f2:	b2d2      	uxtb	r2, r2
 80098f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009904:	3b01      	subs	r3, #1
 8009906:	b29a      	uxth	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009910:	b29b      	uxth	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	691a      	ldr	r2, [r3, #16]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	b2d2      	uxtb	r2, r2
 8009926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009936:	3b01      	subs	r3, #1
 8009938:	b29a      	uxth	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009942:	b29b      	uxth	r3, r3
 8009944:	3b01      	subs	r3, #1
 8009946:	b29a      	uxth	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800994c:	e0b8      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009954:	2200      	movs	r2, #0
 8009956:	4966      	ldr	r1, [pc, #408]	; (8009af0 <HAL_I2C_Mem_Read+0x448>)
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fa49 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e0bf      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	691a      	ldr	r2, [r3, #16]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	b2d2      	uxtb	r2, r2
 8009984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009994:	3b01      	subs	r3, #1
 8009996:	b29a      	uxth	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	3b01      	subs	r3, #1
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	2200      	movs	r2, #0
 80099b2:	494f      	ldr	r1, [pc, #316]	; (8009af0 <HAL_I2C_Mem_Read+0x448>)
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 fa1b 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e091      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	1c5a      	adds	r2, r3, #1
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099f0:	3b01      	subs	r3, #1
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	3b01      	subs	r3, #1
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	b2d2      	uxtb	r2, r2
 8009a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a22:	3b01      	subs	r3, #1
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b01      	subs	r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a38:	e042      	b.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 fb2e 	bl	800a0a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e04c      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b04      	cmp	r3, #4
 8009a8c:	d118      	bne.n	8009ac0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f47f aec2 	bne.w	800984e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2220      	movs	r2, #32
 8009ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e000      	b.n	8009ae8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009ae6:	2302      	movs	r3, #2
  }
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3728      	adds	r7, #40	; 0x28
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	00010004 	.word	0x00010004

08009af4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af02      	add	r7, sp, #8
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	461a      	mov	r2, r3
 8009b02:	4603      	mov	r3, r0
 8009b04:	817b      	strh	r3, [r7, #10]
 8009b06:	460b      	mov	r3, r1
 8009b08:	813b      	strh	r3, [r7, #8]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f000 f960 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00d      	beq.n	8009b52 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b44:	d103      	bne.n	8009b4e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e05f      	b.n	8009c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b52:	897b      	ldrh	r3, [r7, #10]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	6a3a      	ldr	r2, [r7, #32]
 8009b66:	492d      	ldr	r1, [pc, #180]	; (8009c1c <I2C_RequestMemoryWrite+0x128>)
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f998 	bl	8009e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e04c      	b.n	8009c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b78:	2300      	movs	r3, #0
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b90:	6a39      	ldr	r1, [r7, #32]
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fa02 	bl	8009f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00d      	beq.n	8009bba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d107      	bne.n	8009bb6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e02b      	b.n	8009c12 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009bba:	88fb      	ldrh	r3, [r7, #6]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d105      	bne.n	8009bcc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bc0:	893b      	ldrh	r3, [r7, #8]
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	611a      	str	r2, [r3, #16]
 8009bca:	e021      	b.n	8009c10 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bcc:	893b      	ldrh	r3, [r7, #8]
 8009bce:	0a1b      	lsrs	r3, r3, #8
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bdc:	6a39      	ldr	r1, [r7, #32]
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 f9dc 	bl	8009f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00d      	beq.n	8009c06 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d107      	bne.n	8009c02 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c00:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e005      	b.n	8009c12 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c06:	893b      	ldrh	r3, [r7, #8]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3718      	adds	r7, #24
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	00010002 	.word	0x00010002

08009c20 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	4608      	mov	r0, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	817b      	strh	r3, [r7, #10]
 8009c32:	460b      	mov	r3, r1
 8009c34:	813b      	strh	r3, [r7, #8]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c48:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	6a3b      	ldr	r3, [r7, #32]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f8c2 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d00d      	beq.n	8009c8e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c80:	d103      	bne.n	8009c8a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e0aa      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c8e:	897b      	ldrh	r3, [r7, #10]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	6a3a      	ldr	r2, [r7, #32]
 8009ca2:	4952      	ldr	r1, [pc, #328]	; (8009dec <I2C_RequestMemoryRead+0x1cc>)
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f000 f8fa 	bl	8009e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d001      	beq.n	8009cb4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e097      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	617b      	str	r3, [r7, #20]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	617b      	str	r3, [r7, #20]
 8009cc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ccc:	6a39      	ldr	r1, [r7, #32]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 f964 	bl	8009f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00d      	beq.n	8009cf6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d107      	bne.n	8009cf2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cf0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e076      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cf6:	88fb      	ldrh	r3, [r7, #6]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d105      	bne.n	8009d08 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009cfc:	893b      	ldrh	r3, [r7, #8]
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	611a      	str	r2, [r3, #16]
 8009d06:	e021      	b.n	8009d4c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009d08:	893b      	ldrh	r3, [r7, #8]
 8009d0a:	0a1b      	lsrs	r3, r3, #8
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d18:	6a39      	ldr	r1, [r7, #32]
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 f93e 	bl	8009f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8009d20:	4603      	mov	r3, r0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00d      	beq.n	8009d42 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	2b04      	cmp	r3, #4
 8009d2c:	d107      	bne.n	8009d3e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e050      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d42:	893b      	ldrh	r3, [r7, #8]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4e:	6a39      	ldr	r1, [r7, #32]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f000 f923 	bl	8009f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00d      	beq.n	8009d78 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d60:	2b04      	cmp	r3, #4
 8009d62:	d107      	bne.n	8009d74 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d72:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e035      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d86:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	9300      	str	r3, [sp, #0]
 8009d8c:	6a3b      	ldr	r3, [r7, #32]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d94:	68f8      	ldr	r0, [r7, #12]
 8009d96:	f000 f82b 	bl	8009df0 <I2C_WaitOnFlagUntilTimeout>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00d      	beq.n	8009dbc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dae:	d103      	bne.n	8009db8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e013      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009dbc:	897b      	ldrh	r3, [r7, #10]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f043 0301 	orr.w	r3, r3, #1
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dce:	6a3a      	ldr	r2, [r7, #32]
 8009dd0:	4906      	ldr	r1, [pc, #24]	; (8009dec <I2C_RequestMemoryRead+0x1cc>)
 8009dd2:	68f8      	ldr	r0, [r7, #12]
 8009dd4:	f000 f863 	bl	8009e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e000      	b.n	8009de4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	00010002 	.word	0x00010002

08009df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e00:	e025      	b.n	8009e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e08:	d021      	beq.n	8009e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e0a:	f7fd fac7 	bl	800739c <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d302      	bcc.n	8009e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d116      	bne.n	8009e4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e3a:	f043 0220 	orr.w	r2, r3, #32
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e023      	b.n	8009e96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	0c1b      	lsrs	r3, r3, #16
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d10d      	bne.n	8009e74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	695b      	ldr	r3, [r3, #20]
 8009e5e:	43da      	mvns	r2, r3
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4013      	ands	r3, r2
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	bf0c      	ite	eq
 8009e6a:	2301      	moveq	r3, #1
 8009e6c:	2300      	movne	r3, #0
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	e00c      	b.n	8009e8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	43da      	mvns	r2, r3
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4013      	ands	r3, r2
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	bf0c      	ite	eq
 8009e86:	2301      	moveq	r3, #1
 8009e88:	2300      	movne	r3, #0
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d0b6      	beq.n	8009e02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	607a      	str	r2, [r7, #4]
 8009eaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009eac:	e051      	b.n	8009f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ebc:	d123      	bne.n	8009f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ecc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ed6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f043 0204 	orr.w	r2, r3, #4
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e046      	b.n	8009f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d021      	beq.n	8009f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f0e:	f7fd fa45 	bl	800739c <HAL_GetTick>
 8009f12:	4602      	mov	r2, r0
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d302      	bcc.n	8009f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d116      	bne.n	8009f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	f043 0220 	orr.w	r2, r3, #32
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e020      	b.n	8009f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	0c1b      	lsrs	r3, r3, #16
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d10c      	bne.n	8009f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	43da      	mvns	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	4013      	ands	r3, r2
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	bf14      	ite	ne
 8009f6e:	2301      	movne	r3, #1
 8009f70:	2300      	moveq	r3, #0
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	e00b      	b.n	8009f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	43da      	mvns	r2, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4013      	ands	r3, r2
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bf14      	ite	ne
 8009f88:	2301      	movne	r3, #1
 8009f8a:	2300      	moveq	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d18d      	bne.n	8009eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fa8:	e02d      	b.n	800a006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 f8ce 	bl	800a14c <I2C_IsAcknowledgeFailed>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e02d      	b.n	800a016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc0:	d021      	beq.n	800a006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fc2:	f7fd f9eb 	bl	800739c <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d302      	bcc.n	8009fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d116      	bne.n	800a006 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff2:	f043 0220 	orr.w	r2, r3, #32
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e007      	b.n	800a016 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a010:	2b80      	cmp	r3, #128	; 0x80
 800a012:	d1ca      	bne.n	8009faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}

0800a01e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	60f8      	str	r0, [r7, #12]
 800a026:	60b9      	str	r1, [r7, #8]
 800a028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a02a:	e02d      	b.n	800a088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 f88d 	bl	800a14c <I2C_IsAcknowledgeFailed>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e02d      	b.n	800a098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a042:	d021      	beq.n	800a088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a044:	f7fd f9aa 	bl	800739c <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	429a      	cmp	r2, r3
 800a052:	d302      	bcc.n	800a05a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d116      	bne.n	800a088 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a074:	f043 0220 	orr.w	r2, r3, #32
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e007      	b.n	800a098 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	f003 0304 	and.w	r3, r3, #4
 800a092:	2b04      	cmp	r3, #4
 800a094:	d1ca      	bne.n	800a02c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0ac:	e042      	b.n	800a134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	695b      	ldr	r3, [r3, #20]
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b10      	cmp	r3, #16
 800a0ba:	d119      	bne.n	800a0f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f06f 0210 	mvn.w	r2, #16
 800a0c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e029      	b.n	800a144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0f0:	f7fd f954 	bl	800739c <HAL_GetTick>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d302      	bcc.n	800a106 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d116      	bne.n	800a134 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	2200      	movs	r2, #0
 800a10a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2220      	movs	r2, #32
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a120:	f043 0220 	orr.w	r2, r3, #32
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e007      	b.n	800a144 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13e:	2b40      	cmp	r3, #64	; 0x40
 800a140:	d1b5      	bne.n	800a0ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a15e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a162:	d11b      	bne.n	800a19c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a16c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2220      	movs	r2, #32
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a188:	f043 0204 	orr.w	r2, r3, #4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e000      	b.n	800a19e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
	...

0800a1ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e267      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d075      	beq.n	800a2b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1ca:	4b88      	ldr	r3, [pc, #544]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f003 030c 	and.w	r3, r3, #12
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d00c      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1d6:	4b85      	ldr	r3, [pc, #532]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1de:	2b08      	cmp	r3, #8
 800a1e0:	d112      	bne.n	800a208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1e2:	4b82      	ldr	r3, [pc, #520]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1ee:	d10b      	bne.n	800a208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1f0:	4b7e      	ldr	r3, [pc, #504]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d05b      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x108>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d157      	bne.n	800a2b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a204:	2301      	movs	r3, #1
 800a206:	e242      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a210:	d106      	bne.n	800a220 <HAL_RCC_OscConfig+0x74>
 800a212:	4b76      	ldr	r3, [pc, #472]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a75      	ldr	r2, [pc, #468]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	e01d      	b.n	800a25c <HAL_RCC_OscConfig+0xb0>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a228:	d10c      	bne.n	800a244 <HAL_RCC_OscConfig+0x98>
 800a22a:	4b70      	ldr	r3, [pc, #448]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a6f      	ldr	r2, [pc, #444]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a234:	6013      	str	r3, [r2, #0]
 800a236:	4b6d      	ldr	r3, [pc, #436]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a6c      	ldr	r2, [pc, #432]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a23c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	e00b      	b.n	800a25c <HAL_RCC_OscConfig+0xb0>
 800a244:	4b69      	ldr	r3, [pc, #420]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a68      	ldr	r2, [pc, #416]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a24a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	4b66      	ldr	r3, [pc, #408]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a65      	ldr	r2, [pc, #404]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a25a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d013      	beq.n	800a28c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a264:	f7fd f89a 	bl	800739c <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a26c:	f7fd f896 	bl	800739c <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b64      	cmp	r3, #100	; 0x64
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e207      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a27e:	4b5b      	ldr	r3, [pc, #364]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d0f0      	beq.n	800a26c <HAL_RCC_OscConfig+0xc0>
 800a28a:	e014      	b.n	800a2b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a28c:	f7fd f886 	bl	800739c <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a294:	f7fd f882 	bl	800739c <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b64      	cmp	r3, #100	; 0x64
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e1f3      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a2a6:	4b51      	ldr	r3, [pc, #324]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0xe8>
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 0302 	and.w	r3, r3, #2
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d063      	beq.n	800a38a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2c2:	4b4a      	ldr	r3, [pc, #296]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f003 030c 	and.w	r3, r3, #12
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00b      	beq.n	800a2e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2ce:	4b47      	ldr	r3, [pc, #284]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2d6:	2b08      	cmp	r3, #8
 800a2d8:	d11c      	bne.n	800a314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2da:	4b44      	ldr	r3, [pc, #272]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d116      	bne.n	800a314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2e6:	4b41      	ldr	r3, [pc, #260]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d005      	beq.n	800a2fe <HAL_RCC_OscConfig+0x152>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d001      	beq.n	800a2fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e1c7      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2fe:	4b3b      	ldr	r3, [pc, #236]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	4937      	ldr	r1, [pc, #220]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a312:	e03a      	b.n	800a38a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d020      	beq.n	800a35e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a31c:	4b34      	ldr	r3, [pc, #208]	; (800a3f0 <HAL_RCC_OscConfig+0x244>)
 800a31e:	2201      	movs	r2, #1
 800a320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a322:	f7fd f83b 	bl	800739c <HAL_GetTick>
 800a326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a328:	e008      	b.n	800a33c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a32a:	f7fd f837 	bl	800739c <HAL_GetTick>
 800a32e:	4602      	mov	r2, r0
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	2b02      	cmp	r3, #2
 800a336:	d901      	bls.n	800a33c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e1a8      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a33c:	4b2b      	ldr	r3, [pc, #172]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0302 	and.w	r3, r3, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d0f0      	beq.n	800a32a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a348:	4b28      	ldr	r3, [pc, #160]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	4925      	ldr	r1, [pc, #148]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a358:	4313      	orrs	r3, r2
 800a35a:	600b      	str	r3, [r1, #0]
 800a35c:	e015      	b.n	800a38a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a35e:	4b24      	ldr	r3, [pc, #144]	; (800a3f0 <HAL_RCC_OscConfig+0x244>)
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a364:	f7fd f81a 	bl	800739c <HAL_GetTick>
 800a368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a36a:	e008      	b.n	800a37e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a36c:	f7fd f816 	bl	800739c <HAL_GetTick>
 800a370:	4602      	mov	r2, r0
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	1ad3      	subs	r3, r2, r3
 800a376:	2b02      	cmp	r3, #2
 800a378:	d901      	bls.n	800a37e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e187      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1f0      	bne.n	800a36c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0308 	and.w	r3, r3, #8
 800a392:	2b00      	cmp	r3, #0
 800a394:	d036      	beq.n	800a404 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d016      	beq.n	800a3cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a39e:	4b15      	ldr	r3, [pc, #84]	; (800a3f4 <HAL_RCC_OscConfig+0x248>)
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3a4:	f7fc fffa 	bl	800739c <HAL_GetTick>
 800a3a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3aa:	e008      	b.n	800a3be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3ac:	f7fc fff6 	bl	800739c <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d901      	bls.n	800a3be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e167      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3be:	4b0b      	ldr	r3, [pc, #44]	; (800a3ec <HAL_RCC_OscConfig+0x240>)
 800a3c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c2:	f003 0302 	and.w	r3, r3, #2
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0f0      	beq.n	800a3ac <HAL_RCC_OscConfig+0x200>
 800a3ca:	e01b      	b.n	800a404 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3cc:	4b09      	ldr	r3, [pc, #36]	; (800a3f4 <HAL_RCC_OscConfig+0x248>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3d2:	f7fc ffe3 	bl	800739c <HAL_GetTick>
 800a3d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3d8:	e00e      	b.n	800a3f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3da:	f7fc ffdf 	bl	800739c <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	2b02      	cmp	r3, #2
 800a3e6:	d907      	bls.n	800a3f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e150      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
 800a3ec:	40023800 	.word	0x40023800
 800a3f0:	42470000 	.word	0x42470000
 800a3f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3f8:	4b88      	ldr	r3, [pc, #544]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1ea      	bne.n	800a3da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f000 8097 	beq.w	800a540 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a412:	2300      	movs	r3, #0
 800a414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a416:	4b81      	ldr	r3, [pc, #516]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10f      	bne.n	800a442 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a422:	2300      	movs	r3, #0
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	4b7d      	ldr	r3, [pc, #500]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	4a7c      	ldr	r2, [pc, #496]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a430:	6413      	str	r3, [r2, #64]	; 0x40
 800a432:	4b7a      	ldr	r3, [pc, #488]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a43a:	60bb      	str	r3, [r7, #8]
 800a43c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a43e:	2301      	movs	r3, #1
 800a440:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a442:	4b77      	ldr	r3, [pc, #476]	; (800a620 <HAL_RCC_OscConfig+0x474>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d118      	bne.n	800a480 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a44e:	4b74      	ldr	r3, [pc, #464]	; (800a620 <HAL_RCC_OscConfig+0x474>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a73      	ldr	r2, [pc, #460]	; (800a620 <HAL_RCC_OscConfig+0x474>)
 800a454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a45a:	f7fc ff9f 	bl	800739c <HAL_GetTick>
 800a45e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a460:	e008      	b.n	800a474 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a462:	f7fc ff9b 	bl	800739c <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d901      	bls.n	800a474 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	e10c      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a474:	4b6a      	ldr	r3, [pc, #424]	; (800a620 <HAL_RCC_OscConfig+0x474>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d0f0      	beq.n	800a462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d106      	bne.n	800a496 <HAL_RCC_OscConfig+0x2ea>
 800a488:	4b64      	ldr	r3, [pc, #400]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a48a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48c:	4a63      	ldr	r2, [pc, #396]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a48e:	f043 0301 	orr.w	r3, r3, #1
 800a492:	6713      	str	r3, [r2, #112]	; 0x70
 800a494:	e01c      	b.n	800a4d0 <HAL_RCC_OscConfig+0x324>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	d10c      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x30c>
 800a49e:	4b5f      	ldr	r3, [pc, #380]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a2:	4a5e      	ldr	r2, [pc, #376]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4a4:	f043 0304 	orr.w	r3, r3, #4
 800a4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a4aa:	4b5c      	ldr	r3, [pc, #368]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ae:	4a5b      	ldr	r2, [pc, #364]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4b0:	f043 0301 	orr.w	r3, r3, #1
 800a4b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b6:	e00b      	b.n	800a4d0 <HAL_RCC_OscConfig+0x324>
 800a4b8:	4b58      	ldr	r3, [pc, #352]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a57      	ldr	r2, [pc, #348]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4be:	f023 0301 	bic.w	r3, r3, #1
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	4b55      	ldr	r3, [pc, #340]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c8:	4a54      	ldr	r2, [pc, #336]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4ca:	f023 0304 	bic.w	r3, r3, #4
 800a4ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d015      	beq.n	800a504 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4d8:	f7fc ff60 	bl	800739c <HAL_GetTick>
 800a4dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4de:	e00a      	b.n	800a4f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4e0:	f7fc ff5c 	bl	800739c <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e0cb      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4f6:	4b49      	ldr	r3, [pc, #292]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0ee      	beq.n	800a4e0 <HAL_RCC_OscConfig+0x334>
 800a502:	e014      	b.n	800a52e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a504:	f7fc ff4a 	bl	800739c <HAL_GetTick>
 800a508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a50a:	e00a      	b.n	800a522 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a50c:	f7fc ff46 	bl	800739c <HAL_GetTick>
 800a510:	4602      	mov	r2, r0
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	f241 3288 	movw	r2, #5000	; 0x1388
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e0b5      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a522:	4b3e      	ldr	r3, [pc, #248]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1ee      	bne.n	800a50c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d105      	bne.n	800a540 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a534:	4b39      	ldr	r3, [pc, #228]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a538:	4a38      	ldr	r2, [pc, #224]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a53a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a53e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	699b      	ldr	r3, [r3, #24]
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 80a1 	beq.w	800a68c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a54a:	4b34      	ldr	r3, [pc, #208]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	f003 030c 	and.w	r3, r3, #12
 800a552:	2b08      	cmp	r3, #8
 800a554:	d05c      	beq.n	800a610 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d141      	bne.n	800a5e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a55e:	4b31      	ldr	r3, [pc, #196]	; (800a624 <HAL_RCC_OscConfig+0x478>)
 800a560:	2200      	movs	r2, #0
 800a562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a564:	f7fc ff1a 	bl	800739c <HAL_GetTick>
 800a568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a56a:	e008      	b.n	800a57e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a56c:	f7fc ff16 	bl	800739c <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	2b02      	cmp	r3, #2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e087      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a57e:	4b27      	ldr	r3, [pc, #156]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f0      	bne.n	800a56c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	69da      	ldr	r2, [r3, #28]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	431a      	orrs	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	019b      	lsls	r3, r3, #6
 800a59a:	431a      	orrs	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	085b      	lsrs	r3, r3, #1
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	041b      	lsls	r3, r3, #16
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ac:	061b      	lsls	r3, r3, #24
 800a5ae:	491b      	ldr	r1, [pc, #108]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5b4:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <HAL_RCC_OscConfig+0x478>)
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5ba:	f7fc feef 	bl	800739c <HAL_GetTick>
 800a5be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5c0:	e008      	b.n	800a5d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5c2:	f7fc feeb 	bl	800739c <HAL_GetTick>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d901      	bls.n	800a5d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e05c      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5d4:	4b11      	ldr	r3, [pc, #68]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0f0      	beq.n	800a5c2 <HAL_RCC_OscConfig+0x416>
 800a5e0:	e054      	b.n	800a68c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5e2:	4b10      	ldr	r3, [pc, #64]	; (800a624 <HAL_RCC_OscConfig+0x478>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5e8:	f7fc fed8 	bl	800739c <HAL_GetTick>
 800a5ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5ee:	e008      	b.n	800a602 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5f0:	f7fc fed4 	bl	800739c <HAL_GetTick>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d901      	bls.n	800a602 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e045      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a602:	4b06      	ldr	r3, [pc, #24]	; (800a61c <HAL_RCC_OscConfig+0x470>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1f0      	bne.n	800a5f0 <HAL_RCC_OscConfig+0x444>
 800a60e:	e03d      	b.n	800a68c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d107      	bne.n	800a628 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e038      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
 800a61c:	40023800 	.word	0x40023800
 800a620:	40007000 	.word	0x40007000
 800a624:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a628:	4b1b      	ldr	r3, [pc, #108]	; (800a698 <HAL_RCC_OscConfig+0x4ec>)
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	699b      	ldr	r3, [r3, #24]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d028      	beq.n	800a688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a640:	429a      	cmp	r2, r3
 800a642:	d121      	bne.n	800a688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a64e:	429a      	cmp	r2, r3
 800a650:	d11a      	bne.n	800a688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a658:	4013      	ands	r3, r2
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a65e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a660:	4293      	cmp	r3, r2
 800a662:	d111      	bne.n	800a688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	3b01      	subs	r3, #1
 800a672:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a674:	429a      	cmp	r2, r3
 800a676:	d107      	bne.n	800a688 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a682:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a684:	429a      	cmp	r2, r3
 800a686:	d001      	beq.n	800a68c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e000      	b.n	800a68e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3718      	adds	r7, #24
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	40023800 	.word	0x40023800

0800a69c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d101      	bne.n	800a6b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e0cc      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a6b0:	4b68      	ldr	r3, [pc, #416]	; (800a854 <HAL_RCC_ClockConfig+0x1b8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0307 	and.w	r3, r3, #7
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d90c      	bls.n	800a6d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6be:	4b65      	ldr	r3, [pc, #404]	; (800a854 <HAL_RCC_ClockConfig+0x1b8>)
 800a6c0:	683a      	ldr	r2, [r7, #0]
 800a6c2:	b2d2      	uxtb	r2, r2
 800a6c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6c6:	4b63      	ldr	r3, [pc, #396]	; (800a854 <HAL_RCC_ClockConfig+0x1b8>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0307 	and.w	r3, r3, #7
 800a6ce:	683a      	ldr	r2, [r7, #0]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d001      	beq.n	800a6d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e0b8      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d020      	beq.n	800a726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6f0:	4b59      	ldr	r3, [pc, #356]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	4a58      	ldr	r2, [pc, #352]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a6f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a6fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0308 	and.w	r3, r3, #8
 800a704:	2b00      	cmp	r3, #0
 800a706:	d005      	beq.n	800a714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a708:	4b53      	ldr	r3, [pc, #332]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	4a52      	ldr	r2, [pc, #328]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a70e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a714:	4b50      	ldr	r3, [pc, #320]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	494d      	ldr	r1, [pc, #308]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a722:	4313      	orrs	r3, r2
 800a724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d044      	beq.n	800a7bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d107      	bne.n	800a74a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a73a:	4b47      	ldr	r3, [pc, #284]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d119      	bne.n	800a77a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e07f      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	2b02      	cmp	r3, #2
 800a750:	d003      	beq.n	800a75a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a756:	2b03      	cmp	r3, #3
 800a758:	d107      	bne.n	800a76a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a75a:	4b3f      	ldr	r3, [pc, #252]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d109      	bne.n	800a77a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e06f      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a76a:	4b3b      	ldr	r3, [pc, #236]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e067      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a77a:	4b37      	ldr	r3, [pc, #220]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f023 0203 	bic.w	r2, r3, #3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	4934      	ldr	r1, [pc, #208]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a788:	4313      	orrs	r3, r2
 800a78a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a78c:	f7fc fe06 	bl	800739c <HAL_GetTick>
 800a790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a792:	e00a      	b.n	800a7aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a794:	f7fc fe02 	bl	800739c <HAL_GetTick>
 800a798:	4602      	mov	r2, r0
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d901      	bls.n	800a7aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a7a6:	2303      	movs	r3, #3
 800a7a8:	e04f      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7aa:	4b2b      	ldr	r3, [pc, #172]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	f003 020c 	and.w	r2, r3, #12
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d1eb      	bne.n	800a794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a7bc:	4b25      	ldr	r3, [pc, #148]	; (800a854 <HAL_RCC_ClockConfig+0x1b8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0307 	and.w	r3, r3, #7
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d20c      	bcs.n	800a7e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7ca:	4b22      	ldr	r3, [pc, #136]	; (800a854 <HAL_RCC_ClockConfig+0x1b8>)
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	b2d2      	uxtb	r2, r2
 800a7d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7d2:	4b20      	ldr	r3, [pc, #128]	; (800a854 <HAL_RCC_ClockConfig+0x1b8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d001      	beq.n	800a7e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e032      	b.n	800a84a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d008      	beq.n	800a802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7f0:	4b19      	ldr	r3, [pc, #100]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	4916      	ldr	r1, [pc, #88]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a7fe:	4313      	orrs	r3, r2
 800a800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 0308 	and.w	r3, r3, #8
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a80e:	4b12      	ldr	r3, [pc, #72]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	00db      	lsls	r3, r3, #3
 800a81c:	490e      	ldr	r1, [pc, #56]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a822:	f000 f821 	bl	800a868 <HAL_RCC_GetSysClockFreq>
 800a826:	4602      	mov	r2, r0
 800a828:	4b0b      	ldr	r3, [pc, #44]	; (800a858 <HAL_RCC_ClockConfig+0x1bc>)
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	091b      	lsrs	r3, r3, #4
 800a82e:	f003 030f 	and.w	r3, r3, #15
 800a832:	490a      	ldr	r1, [pc, #40]	; (800a85c <HAL_RCC_ClockConfig+0x1c0>)
 800a834:	5ccb      	ldrb	r3, [r1, r3]
 800a836:	fa22 f303 	lsr.w	r3, r2, r3
 800a83a:	4a09      	ldr	r2, [pc, #36]	; (800a860 <HAL_RCC_ClockConfig+0x1c4>)
 800a83c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a83e:	4b09      	ldr	r3, [pc, #36]	; (800a864 <HAL_RCC_ClockConfig+0x1c8>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4618      	mov	r0, r3
 800a844:	f7fc fd66 	bl	8007314 <HAL_InitTick>

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	40023c00 	.word	0x40023c00
 800a858:	40023800 	.word	0x40023800
 800a85c:	0800f3d4 	.word	0x0800f3d4
 800a860:	20008f50 	.word	0x20008f50
 800a864:	20008f54 	.word	0x20008f54

0800a868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a86c:	b090      	sub	sp, #64	; 0x40
 800a86e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	637b      	str	r3, [r7, #52]	; 0x34
 800a874:	2300      	movs	r3, #0
 800a876:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a878:	2300      	movs	r3, #0
 800a87a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a880:	4b59      	ldr	r3, [pc, #356]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f003 030c 	and.w	r3, r3, #12
 800a888:	2b08      	cmp	r3, #8
 800a88a:	d00d      	beq.n	800a8a8 <HAL_RCC_GetSysClockFreq+0x40>
 800a88c:	2b08      	cmp	r3, #8
 800a88e:	f200 80a1 	bhi.w	800a9d4 <HAL_RCC_GetSysClockFreq+0x16c>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_RCC_GetSysClockFreq+0x34>
 800a896:	2b04      	cmp	r3, #4
 800a898:	d003      	beq.n	800a8a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800a89a:	e09b      	b.n	800a9d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a89c:	4b53      	ldr	r3, [pc, #332]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x184>)
 800a89e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800a8a0:	e09b      	b.n	800a9da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8a2:	4b53      	ldr	r3, [pc, #332]	; (800a9f0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a8a6:	e098      	b.n	800a9da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8a8:	4b4f      	ldr	r3, [pc, #316]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a8b2:	4b4d      	ldr	r3, [pc, #308]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d028      	beq.n	800a910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8be:	4b4a      	ldr	r3, [pc, #296]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	099b      	lsrs	r3, r3, #6
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	623b      	str	r3, [r7, #32]
 800a8c8:	627a      	str	r2, [r7, #36]	; 0x24
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	4b47      	ldr	r3, [pc, #284]	; (800a9f0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8d4:	fb03 f201 	mul.w	r2, r3, r1
 800a8d8:	2300      	movs	r3, #0
 800a8da:	fb00 f303 	mul.w	r3, r0, r3
 800a8de:	4413      	add	r3, r2
 800a8e0:	4a43      	ldr	r2, [pc, #268]	; (800a9f0 <HAL_RCC_GetSysClockFreq+0x188>)
 800a8e2:	fba0 1202 	umull	r1, r2, r0, r2
 800a8e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8e8:	460a      	mov	r2, r1
 800a8ea:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ee:	4413      	add	r3, r2
 800a8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	61bb      	str	r3, [r7, #24]
 800a8f8:	61fa      	str	r2, [r7, #28]
 800a8fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a8fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a902:	f7f5 ffc7 	bl	8000894 <__aeabi_uldivmod>
 800a906:	4602      	mov	r2, r0
 800a908:	460b      	mov	r3, r1
 800a90a:	4613      	mov	r3, r2
 800a90c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a90e:	e053      	b.n	800a9b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a910:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	099b      	lsrs	r3, r3, #6
 800a916:	2200      	movs	r2, #0
 800a918:	613b      	str	r3, [r7, #16]
 800a91a:	617a      	str	r2, [r7, #20]
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a922:	f04f 0b00 	mov.w	fp, #0
 800a926:	4652      	mov	r2, sl
 800a928:	465b      	mov	r3, fp
 800a92a:	f04f 0000 	mov.w	r0, #0
 800a92e:	f04f 0100 	mov.w	r1, #0
 800a932:	0159      	lsls	r1, r3, #5
 800a934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a938:	0150      	lsls	r0, r2, #5
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	ebb2 080a 	subs.w	r8, r2, sl
 800a942:	eb63 090b 	sbc.w	r9, r3, fp
 800a946:	f04f 0200 	mov.w	r2, #0
 800a94a:	f04f 0300 	mov.w	r3, #0
 800a94e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a95a:	ebb2 0408 	subs.w	r4, r2, r8
 800a95e:	eb63 0509 	sbc.w	r5, r3, r9
 800a962:	f04f 0200 	mov.w	r2, #0
 800a966:	f04f 0300 	mov.w	r3, #0
 800a96a:	00eb      	lsls	r3, r5, #3
 800a96c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a970:	00e2      	lsls	r2, r4, #3
 800a972:	4614      	mov	r4, r2
 800a974:	461d      	mov	r5, r3
 800a976:	eb14 030a 	adds.w	r3, r4, sl
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	eb45 030b 	adc.w	r3, r5, fp
 800a980:	607b      	str	r3, [r7, #4]
 800a982:	f04f 0200 	mov.w	r2, #0
 800a986:	f04f 0300 	mov.w	r3, #0
 800a98a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a98e:	4629      	mov	r1, r5
 800a990:	028b      	lsls	r3, r1, #10
 800a992:	4621      	mov	r1, r4
 800a994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a998:	4621      	mov	r1, r4
 800a99a:	028a      	lsls	r2, r1, #10
 800a99c:	4610      	mov	r0, r2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	60bb      	str	r3, [r7, #8]
 800a9a6:	60fa      	str	r2, [r7, #12]
 800a9a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9ac:	f7f5 ff72 	bl	8000894 <__aeabi_uldivmod>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9b8:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	0c1b      	lsrs	r3, r3, #16
 800a9be:	f003 0303 	and.w	r3, r3, #3
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800a9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9d2:	e002      	b.n	800a9da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <HAL_RCC_GetSysClockFreq+0x184>)
 800a9d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800a9d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3740      	adds	r7, #64	; 0x40
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40023800 	.word	0x40023800
 800a9ec:	00f42400 	.word	0x00f42400
 800a9f0:	017d7840 	.word	0x017d7840

0800a9f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9f8:	4b03      	ldr	r3, [pc, #12]	; (800aa08 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	20008f50 	.word	0x20008f50

0800aa0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa10:	f7ff fff0 	bl	800a9f4 <HAL_RCC_GetHCLKFreq>
 800aa14:	4602      	mov	r2, r0
 800aa16:	4b05      	ldr	r3, [pc, #20]	; (800aa2c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	0a9b      	lsrs	r3, r3, #10
 800aa1c:	f003 0307 	and.w	r3, r3, #7
 800aa20:	4903      	ldr	r1, [pc, #12]	; (800aa30 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa22:	5ccb      	ldrb	r3, [r1, r3]
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	40023800 	.word	0x40023800
 800aa30:	0800f3e4 	.word	0x0800f3e4

0800aa34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa38:	f7ff ffdc 	bl	800a9f4 <HAL_RCC_GetHCLKFreq>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	0b5b      	lsrs	r3, r3, #13
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	4903      	ldr	r1, [pc, #12]	; (800aa58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa4a:	5ccb      	ldrb	r3, [r1, r3]
 800aa4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	40023800 	.word	0x40023800
 800aa58:	0800f3e4 	.word	0x0800f3e4

0800aa5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	e07b      	b.n	800ab66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d108      	bne.n	800aa88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa7e:	d009      	beq.n	800aa94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	61da      	str	r2, [r3, #28]
 800aa86:	e005      	b.n	800aa94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7fc f900 	bl	8006cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aadc:	431a      	orrs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aae6:	431a      	orrs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	f003 0302 	and.w	r3, r3, #2
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	431a      	orrs	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab04:	431a      	orrs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a1b      	ldr	r3, [r3, #32]
 800ab14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab18:	ea42 0103 	orr.w	r1, r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
 800ab30:	0c1b      	lsrs	r3, r3, #16
 800ab32:	f003 0104 	and.w	r1, r3, #4
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3a:	f003 0210 	and.w	r2, r3, #16
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69da      	ldr	r2, [r3, #28]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b088      	sub	sp, #32
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	603b      	str	r3, [r7, #0]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d101      	bne.n	800ab90 <HAL_SPI_Transmit+0x22>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e126      	b.n	800adde <HAL_SPI_Transmit+0x270>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab98:	f7fc fc00 	bl	800739c <HAL_GetTick>
 800ab9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ab9e:	88fb      	ldrh	r3, [r7, #6]
 800aba0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d002      	beq.n	800abb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800abae:	2302      	movs	r3, #2
 800abb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800abb2:	e10b      	b.n	800adcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <HAL_SPI_Transmit+0x52>
 800abba:	88fb      	ldrh	r3, [r7, #6]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800abc4:	e102      	b.n	800adcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2203      	movs	r2, #3
 800abca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	88fa      	ldrh	r2, [r7, #6]
 800abde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	88fa      	ldrh	r2, [r7, #6]
 800abe4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac0c:	d10f      	bne.n	800ac2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac38:	2b40      	cmp	r3, #64	; 0x40
 800ac3a:	d007      	beq.n	800ac4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac54:	d14b      	bne.n	800acee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <HAL_SPI_Transmit+0xf6>
 800ac5e:	8afb      	ldrh	r3, [r7, #22]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d13e      	bne.n	800ace2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac68:	881a      	ldrh	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	1c9a      	adds	r2, r3, #2
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac88:	e02b      	b.n	800ace2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d112      	bne.n	800acbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9c:	881a      	ldrh	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca8:	1c9a      	adds	r2, r3, #2
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	86da      	strh	r2, [r3, #54]	; 0x36
 800acbc:	e011      	b.n	800ace2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acbe:	f7fc fb6d 	bl	800739c <HAL_GetTick>
 800acc2:	4602      	mov	r2, r0
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	429a      	cmp	r2, r3
 800accc:	d803      	bhi.n	800acd6 <HAL_SPI_Transmit+0x168>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd4:	d102      	bne.n	800acdc <HAL_SPI_Transmit+0x16e>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d102      	bne.n	800ace2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ace0:	e074      	b.n	800adcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d1ce      	bne.n	800ac8a <HAL_SPI_Transmit+0x11c>
 800acec:	e04c      	b.n	800ad88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <HAL_SPI_Transmit+0x18e>
 800acf6:	8afb      	ldrh	r3, [r7, #22]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d140      	bne.n	800ad7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ad22:	e02c      	b.n	800ad7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f003 0302 	and.w	r3, r3, #2
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d113      	bne.n	800ad5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	330c      	adds	r3, #12
 800ad3c:	7812      	ldrb	r2, [r2, #0]
 800ad3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	3b01      	subs	r3, #1
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	86da      	strh	r2, [r3, #54]	; 0x36
 800ad58:	e011      	b.n	800ad7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad5a:	f7fc fb1f 	bl	800739c <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d803      	bhi.n	800ad72 <HAL_SPI_Transmit+0x204>
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad70:	d102      	bne.n	800ad78 <HAL_SPI_Transmit+0x20a>
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d102      	bne.n	800ad7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ad7c:	e026      	b.n	800adcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d1cd      	bne.n	800ad24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad88:	69ba      	ldr	r2, [r7, #24]
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	68f8      	ldr	r0, [r7, #12]
 800ad8e:	f000 fdcb 	bl	800b928 <SPI_EndRxTxTransaction>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10a      	bne.n	800adbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ada6:	2300      	movs	r3, #0
 800ada8:	613b      	str	r3, [r7, #16]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	613b      	str	r3, [r7, #16]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	613b      	str	r3, [r7, #16]
 800adba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	e000      	b.n	800adcc <HAL_SPI_Transmit+0x25e>
  }

error:
 800adca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800addc:	7ffb      	ldrb	r3, [r7, #31]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3720      	adds	r7, #32
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b08c      	sub	sp, #48	; 0x30
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	607a      	str	r2, [r7, #4]
 800adf2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800adf4:	2301      	movs	r3, #1
 800adf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d101      	bne.n	800ae0c <HAL_SPI_TransmitReceive+0x26>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e18a      	b.n	800b122 <HAL_SPI_TransmitReceive+0x33c>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae14:	f7fc fac2 	bl	800739c <HAL_GetTick>
 800ae18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ae2a:	887b      	ldrh	r3, [r7, #2]
 800ae2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d00f      	beq.n	800ae56 <HAL_SPI_TransmitReceive+0x70>
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae3c:	d107      	bne.n	800ae4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d103      	bne.n	800ae4e <HAL_SPI_TransmitReceive+0x68>
 800ae46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ae4a:	2b04      	cmp	r3, #4
 800ae4c:	d003      	beq.n	800ae56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ae4e:	2302      	movs	r3, #2
 800ae50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ae54:	e15b      	b.n	800b10e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d005      	beq.n	800ae68 <HAL_SPI_TransmitReceive+0x82>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <HAL_SPI_TransmitReceive+0x82>
 800ae62:	887b      	ldrh	r3, [r7, #2]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ae6e:	e14e      	b.n	800b10e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b04      	cmp	r3, #4
 800ae7a:	d003      	beq.n	800ae84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2205      	movs	r2, #5
 800ae80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	887a      	ldrh	r2, [r7, #2]
 800ae94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	887a      	ldrh	r2, [r7, #2]
 800ae9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	887a      	ldrh	r2, [r7, #2]
 800aea6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	887a      	ldrh	r2, [r7, #2]
 800aeac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec4:	2b40      	cmp	r3, #64	; 0x40
 800aec6:	d007      	beq.n	800aed8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aed6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aee0:	d178      	bne.n	800afd4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <HAL_SPI_TransmitReceive+0x10a>
 800aeea:	8b7b      	ldrh	r3, [r7, #26]
 800aeec:	2b01      	cmp	r3, #1
 800aeee:	d166      	bne.n	800afbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef4:	881a      	ldrh	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af00:	1c9a      	adds	r2, r3, #2
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	3b01      	subs	r3, #1
 800af0e:	b29a      	uxth	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af14:	e053      	b.n	800afbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f003 0302 	and.w	r3, r3, #2
 800af20:	2b02      	cmp	r3, #2
 800af22:	d11b      	bne.n	800af5c <HAL_SPI_TransmitReceive+0x176>
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d016      	beq.n	800af5c <HAL_SPI_TransmitReceive+0x176>
 800af2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af30:	2b01      	cmp	r3, #1
 800af32:	d113      	bne.n	800af5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af38:	881a      	ldrh	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af44:	1c9a      	adds	r2, r3, #2
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af4e:	b29b      	uxth	r3, r3
 800af50:	3b01      	subs	r3, #1
 800af52:	b29a      	uxth	r2, r3
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af58:	2300      	movs	r3, #0
 800af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b01      	cmp	r3, #1
 800af68:	d119      	bne.n	800af9e <HAL_SPI_TransmitReceive+0x1b8>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af6e:	b29b      	uxth	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d014      	beq.n	800af9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	68da      	ldr	r2, [r3, #12]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	b292      	uxth	r2, r2
 800af80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af86:	1c9a      	adds	r2, r3, #2
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af90:	b29b      	uxth	r3, r3
 800af92:	3b01      	subs	r3, #1
 800af94:	b29a      	uxth	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800af9a:	2301      	movs	r3, #1
 800af9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800af9e:	f7fc f9fd 	bl	800739c <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afaa:	429a      	cmp	r2, r3
 800afac:	d807      	bhi.n	800afbe <HAL_SPI_TransmitReceive+0x1d8>
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb4:	d003      	beq.n	800afbe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800afb6:	2303      	movs	r3, #3
 800afb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800afbc:	e0a7      	b.n	800b10e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1a6      	bne.n	800af16 <HAL_SPI_TransmitReceive+0x130>
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afcc:	b29b      	uxth	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1a1      	bne.n	800af16 <HAL_SPI_TransmitReceive+0x130>
 800afd2:	e07c      	b.n	800b0ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <HAL_SPI_TransmitReceive+0x1fc>
 800afdc:	8b7b      	ldrh	r3, [r7, #26]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d16b      	bne.n	800b0ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	330c      	adds	r3, #12
 800afec:	7812      	ldrb	r2, [r2, #0]
 800afee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800affe:	b29b      	uxth	r3, r3
 800b000:	3b01      	subs	r3, #1
 800b002:	b29a      	uxth	r2, r3
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b008:	e057      	b.n	800b0ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f003 0302 	and.w	r3, r3, #2
 800b014:	2b02      	cmp	r3, #2
 800b016:	d11c      	bne.n	800b052 <HAL_SPI_TransmitReceive+0x26c>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d017      	beq.n	800b052 <HAL_SPI_TransmitReceive+0x26c>
 800b022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b024:	2b01      	cmp	r3, #1
 800b026:	d114      	bne.n	800b052 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	330c      	adds	r3, #12
 800b032:	7812      	ldrb	r2, [r2, #0]
 800b034:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03a:	1c5a      	adds	r2, r3, #1
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b044:	b29b      	uxth	r3, r3
 800b046:	3b01      	subs	r3, #1
 800b048:	b29a      	uxth	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d119      	bne.n	800b094 <HAL_SPI_TransmitReceive+0x2ae>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b064:	b29b      	uxth	r3, r3
 800b066:	2b00      	cmp	r3, #0
 800b068:	d014      	beq.n	800b094 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68da      	ldr	r2, [r3, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b074:	b2d2      	uxtb	r2, r2
 800b076:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07c:	1c5a      	adds	r2, r3, #1
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b086:	b29b      	uxth	r3, r3
 800b088:	3b01      	subs	r3, #1
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b090:	2301      	movs	r3, #1
 800b092:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b094:	f7fc f982 	bl	800739c <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d803      	bhi.n	800b0ac <HAL_SPI_TransmitReceive+0x2c6>
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0aa:	d102      	bne.n	800b0b2 <HAL_SPI_TransmitReceive+0x2cc>
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d103      	bne.n	800b0ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b0b8:	e029      	b.n	800b10e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1a2      	bne.n	800b00a <HAL_SPI_TransmitReceive+0x224>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d19d      	bne.n	800b00a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b0ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f000 fc28 	bl	800b928 <SPI_EndRxTxTransaction>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d006      	beq.n	800b0ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b0ea:	e010      	b.n	800b10e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10b      	bne.n	800b10c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	617b      	str	r3, [r7, #20]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	617b      	str	r3, [r7, #20]
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	e000      	b.n	800b10e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b10c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b11e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b122:	4618      	mov	r0, r3
 800b124:	3730      	adds	r7, #48	; 0x30
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4613      	mov	r3, r2
 800b138:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b144:	2b01      	cmp	r3, #1
 800b146:	d101      	bne.n	800b14c <HAL_SPI_Transmit_DMA+0x20>
 800b148:	2302      	movs	r3, #2
 800b14a:	e09b      	b.n	800b284 <HAL_SPI_Transmit_DMA+0x158>
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d002      	beq.n	800b166 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b160:	2302      	movs	r3, #2
 800b162:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b164:	e089      	b.n	800b27a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <HAL_SPI_Transmit_DMA+0x46>
 800b16c:	88fb      	ldrh	r3, [r7, #6]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b176:	e080      	b.n	800b27a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2203      	movs	r2, #3
 800b17c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	88fa      	ldrh	r2, [r7, #6]
 800b190:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	88fa      	ldrh	r2, [r7, #6]
 800b196:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1be:	d10f      	bne.n	800b1e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1e4:	4a29      	ldr	r2, [pc, #164]	; (800b28c <HAL_SPI_Transmit_DMA+0x160>)
 800b1e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ec:	4a28      	ldr	r2, [pc, #160]	; (800b290 <HAL_SPI_Transmit_DMA+0x164>)
 800b1ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1f4:	4a27      	ldr	r2, [pc, #156]	; (800b294 <HAL_SPI_Transmit_DMA+0x168>)
 800b1f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b208:	4619      	mov	r1, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	330c      	adds	r3, #12
 800b210:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b216:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b218:	f7fd fb20 	bl	800885c <HAL_DMA_Start_IT>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00c      	beq.n	800b23c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b226:	f043 0210 	orr.w	r2, r3, #16
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2201      	movs	r2, #1
 800b236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b23a:	e01e      	b.n	800b27a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b246:	2b40      	cmp	r3, #64	; 0x40
 800b248:	d007      	beq.n	800b25a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b258:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f042 0220 	orr.w	r2, r2, #32
 800b268:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	685a      	ldr	r2, [r3, #4]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f042 0202 	orr.w	r2, r2, #2
 800b278:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b282:	7dfb      	ldrb	r3, [r7, #23]
}
 800b284:	4618      	mov	r0, r3
 800b286:	3718      	adds	r7, #24
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	0800b6b9 	.word	0x0800b6b9
 800b290:	0800b4d9 	.word	0x0800b4d9
 800b294:	0800b70d 	.word	0x0800b70d

0800b298 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
 800b2a4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d101      	bne.n	800b2b8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	e0e3      	b.n	800b480 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2c6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800b2ce:	7dbb      	ldrb	r3, [r7, #22]
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d00d      	beq.n	800b2f0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2da:	d106      	bne.n	800b2ea <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <HAL_SPI_TransmitReceive_DMA+0x52>
 800b2e4:	7dbb      	ldrb	r3, [r7, #22]
 800b2e6:	2b04      	cmp	r3, #4
 800b2e8:	d002      	beq.n	800b2f0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b2ee:	e0c2      	b.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d005      	beq.n	800b302 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800b2fc:	887b      	ldrh	r3, [r7, #2]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d102      	bne.n	800b308 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b306:	e0b6      	b.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b04      	cmp	r3, #4
 800b312:	d003      	beq.n	800b31c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2205      	movs	r2, #5
 800b318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	887a      	ldrh	r2, [r7, #2]
 800b32c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	887a      	ldrh	r2, [r7, #2]
 800b332:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	887a      	ldrh	r2, [r7, #2]
 800b33e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	887a      	ldrh	r2, [r7, #2]
 800b344:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2200      	movs	r2, #0
 800b350:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	d108      	bne.n	800b370 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b362:	4a49      	ldr	r2, [pc, #292]	; (800b488 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800b364:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b36a:	4a48      	ldr	r2, [pc, #288]	; (800b48c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800b36c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b36e:	e007      	b.n	800b380 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b374:	4a46      	ldr	r2, [pc, #280]	; (800b490 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800b376:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b37c:	4a45      	ldr	r2, [pc, #276]	; (800b494 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800b37e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b384:	4a44      	ldr	r2, [pc, #272]	; (800b498 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800b386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b38c:	2200      	movs	r2, #0
 800b38e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	330c      	adds	r3, #12
 800b39a:	4619      	mov	r1, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800b3a8:	f7fd fa58 	bl	800885c <HAL_DMA_Start_IT>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00c      	beq.n	800b3cc <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b6:	f043 0210 	orr.w	r2, r3, #16
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b3ca:	e054      	b.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0201 	orr.w	r2, r2, #1
 800b3da:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	4619      	mov	r1, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	330c      	adds	r3, #12
 800b40c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b412:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b414:	f7fd fa22 	bl	800885c <HAL_DMA_Start_IT>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00c      	beq.n	800b438 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	f043 0210 	orr.w	r2, r3, #16
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2201      	movs	r2, #1
 800b432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b436:	e01e      	b.n	800b476 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b442:	2b40      	cmp	r3, #64	; 0x40
 800b444:	d007      	beq.n	800b456 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b454:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	685a      	ldr	r2, [r3, #4]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f042 0220 	orr.w	r2, r2, #32
 800b464:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f042 0202 	orr.w	r2, r2, #2
 800b474:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b47e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	0800b6d5 	.word	0x0800b6d5
 800b48c:	0800b581 	.word	0x0800b581
 800b490:	0800b6f1 	.word	0x0800b6f1
 800b494:	0800b629 	.word	0x0800b629
 800b498:	0800b70d 	.word	0x0800b70d

0800b49c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b083      	sub	sp, #12
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b4b8:	bf00      	nop
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4e6:	f7fb ff59 	bl	800739c <HAL_GetTick>
 800b4ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4fa:	d03b      	beq.n	800b574 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0220 	bic.w	r2, r2, #32
 800b50a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f022 0202 	bic.w	r2, r2, #2
 800b51a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	2164      	movs	r1, #100	; 0x64
 800b520:	6978      	ldr	r0, [r7, #20]
 800b522:	f000 fa01 	bl	800b928 <SPI_EndRxTxTransaction>
 800b526:	4603      	mov	r3, r0
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b530:	f043 0220 	orr.w	r2, r3, #32
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10a      	bne.n	800b556 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2200      	movs	r2, #0
 800b55a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b56c:	6978      	ldr	r0, [r7, #20]
 800b56e:	f7fb fa2d 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b572:	e002      	b.n	800b57a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b574:	6978      	ldr	r0, [r7, #20]
 800b576:	f7fb fa43 	bl	8006a00 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b57a:	3718      	adds	r7, #24
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b58e:	f7fb ff05 	bl	800739c <HAL_GetTick>
 800b592:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b59e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5a2:	d03b      	beq.n	800b61c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0220 	bic.w	r2, r2, #32
 800b5b2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d10d      	bne.n	800b5d8 <SPI_DMAReceiveCplt+0x58>
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5c4:	d108      	bne.n	800b5d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f022 0203 	bic.w	r2, r2, #3
 800b5d4:	605a      	str	r2, [r3, #4]
 800b5d6:	e007      	b.n	800b5e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f022 0201 	bic.w	r2, r2, #1
 800b5e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	2164      	movs	r1, #100	; 0x64
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 f935 	bl	800b85c <SPI_EndRxTransaction>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2200      	movs	r2, #0
 800b602:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b610:	2b00      	cmp	r3, #0
 800b612:	d003      	beq.n	800b61c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7fb f9d9 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b61a:	e002      	b.n	800b622 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f7ff ff3d 	bl	800b49c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b636:	f7fb feb1 	bl	800739c <HAL_GetTick>
 800b63a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b64a:	d02f      	beq.n	800b6ac <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f022 0220 	bic.w	r2, r2, #32
 800b65a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	2164      	movs	r1, #100	; 0x64
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f961 	bl	800b928 <SPI_EndRxTxTransaction>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d005      	beq.n	800b678 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b670:	f043 0220 	orr.w	r2, r3, #32
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0203 	bic.w	r2, r2, #3
 800b686:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7fb f991 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b6aa:	e002      	b.n	800b6b2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7fb f971 	bl	8006994 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f7ff fef2 	bl	800b4b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6cc:	bf00      	nop
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f7ff feee 	bl	800b4c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b6e8:	bf00      	nop
 800b6ea:	3710      	adds	r7, #16
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f7fb f932 	bl	8006968 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b704:	bf00      	nop
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b718:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f022 0203 	bic.w	r2, r2, #3
 800b728:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72e:	f043 0210 	orr.w	r2, r3, #16
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7fb f944 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b744:	bf00      	nop
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	4613      	mov	r3, r2
 800b75a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b75c:	f7fb fe1e 	bl	800739c <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	1a9b      	subs	r3, r3, r2
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	4413      	add	r3, r2
 800b76a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b76c:	f7fb fe16 	bl	800739c <HAL_GetTick>
 800b770:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b772:	4b39      	ldr	r3, [pc, #228]	; (800b858 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	015b      	lsls	r3, r3, #5
 800b778:	0d1b      	lsrs	r3, r3, #20
 800b77a:	69fa      	ldr	r2, [r7, #28]
 800b77c:	fb02 f303 	mul.w	r3, r2, r3
 800b780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b782:	e054      	b.n	800b82e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b78a:	d050      	beq.n	800b82e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b78c:	f7fb fe06 	bl	800739c <HAL_GetTick>
 800b790:	4602      	mov	r2, r0
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	69fa      	ldr	r2, [r7, #28]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d902      	bls.n	800b7a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d13d      	bne.n	800b81e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b7b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7ba:	d111      	bne.n	800b7e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	689b      	ldr	r3, [r3, #8]
 800b7c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7c4:	d004      	beq.n	800b7d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ce:	d107      	bne.n	800b7e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7e8:	d10f      	bne.n	800b80a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681a      	ldr	r2, [r3, #0]
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b808:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2200      	movs	r2, #0
 800b816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e017      	b.n	800b84e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b824:	2300      	movs	r3, #0
 800b826:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	3b01      	subs	r3, #1
 800b82c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689a      	ldr	r2, [r3, #8]
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	4013      	ands	r3, r2
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	bf0c      	ite	eq
 800b83e:	2301      	moveq	r3, #1
 800b840:	2300      	movne	r3, #0
 800b842:	b2db      	uxtb	r3, r3
 800b844:	461a      	mov	r2, r3
 800b846:	79fb      	ldrb	r3, [r7, #7]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d19b      	bne.n	800b784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20008f50 	.word	0x20008f50

0800b85c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af02      	add	r7, sp, #8
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b870:	d111      	bne.n	800b896 <SPI_EndRxTransaction+0x3a>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b87a:	d004      	beq.n	800b886 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b884:	d107      	bne.n	800b896 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b894:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b89e:	d12a      	bne.n	800b8f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a8:	d012      	beq.n	800b8d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2180      	movs	r1, #128	; 0x80
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff ff49 	bl	800b74c <SPI_WaitFlagStateUntilTimeout>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d02d      	beq.n	800b91c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c4:	f043 0220 	orr.w	r2, r3, #32
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e026      	b.n	800b91e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	2101      	movs	r1, #1
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f7ff ff36 	bl	800b74c <SPI_WaitFlagStateUntilTimeout>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d01a      	beq.n	800b91c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ea:	f043 0220 	orr.w	r2, r3, #32
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e013      	b.n	800b91e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2101      	movs	r1, #1
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f7ff ff23 	bl	800b74c <SPI_WaitFlagStateUntilTimeout>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d007      	beq.n	800b91c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b910:	f043 0220 	orr.w	r2, r3, #32
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b918:	2303      	movs	r3, #3
 800b91a:	e000      	b.n	800b91e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af02      	add	r7, sp, #8
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b934:	4b1b      	ldr	r3, [pc, #108]	; (800b9a4 <SPI_EndRxTxTransaction+0x7c>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a1b      	ldr	r2, [pc, #108]	; (800b9a8 <SPI_EndRxTxTransaction+0x80>)
 800b93a:	fba2 2303 	umull	r2, r3, r2, r3
 800b93e:	0d5b      	lsrs	r3, r3, #21
 800b940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b944:	fb02 f303 	mul.w	r3, r2, r3
 800b948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b952:	d112      	bne.n	800b97a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2200      	movs	r2, #0
 800b95c:	2180      	movs	r1, #128	; 0x80
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7ff fef4 	bl	800b74c <SPI_WaitFlagStateUntilTimeout>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d016      	beq.n	800b998 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b96e:	f043 0220 	orr.w	r2, r3, #32
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b976:	2303      	movs	r3, #3
 800b978:	e00f      	b.n	800b99a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00a      	beq.n	800b996 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	3b01      	subs	r3, #1
 800b984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b990:	2b80      	cmp	r3, #128	; 0x80
 800b992:	d0f2      	beq.n	800b97a <SPI_EndRxTxTransaction+0x52>
 800b994:	e000      	b.n	800b998 <SPI_EndRxTxTransaction+0x70>
        break;
 800b996:	bf00      	nop
  }

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3718      	adds	r7, #24
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20008f50 	.word	0x20008f50
 800b9a8:	165e9f81 	.word	0x165e9f81

0800b9ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e041      	b.n	800ba42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f7fb fafe 	bl	8006fd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2202      	movs	r2, #2
 800b9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	f000 fe38 	bl	800c660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2201      	movs	r2, #1
 800ba24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba40:	2300      	movs	r3, #0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
	...

0800ba4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d001      	beq.n	800ba64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e03c      	b.n	800bade <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2202      	movs	r2, #2
 800ba68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a1e      	ldr	r2, [pc, #120]	; (800baec <HAL_TIM_Base_Start+0xa0>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d018      	beq.n	800baa8 <HAL_TIM_Base_Start+0x5c>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba7e:	d013      	beq.n	800baa8 <HAL_TIM_Base_Start+0x5c>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a1a      	ldr	r2, [pc, #104]	; (800baf0 <HAL_TIM_Base_Start+0xa4>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d00e      	beq.n	800baa8 <HAL_TIM_Base_Start+0x5c>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a19      	ldr	r2, [pc, #100]	; (800baf4 <HAL_TIM_Base_Start+0xa8>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d009      	beq.n	800baa8 <HAL_TIM_Base_Start+0x5c>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a17      	ldr	r2, [pc, #92]	; (800baf8 <HAL_TIM_Base_Start+0xac>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d004      	beq.n	800baa8 <HAL_TIM_Base_Start+0x5c>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a16      	ldr	r2, [pc, #88]	; (800bafc <HAL_TIM_Base_Start+0xb0>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d111      	bne.n	800bacc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	689b      	ldr	r3, [r3, #8]
 800baae:	f003 0307 	and.w	r3, r3, #7
 800bab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2b06      	cmp	r3, #6
 800bab8:	d010      	beq.n	800badc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f042 0201 	orr.w	r2, r2, #1
 800bac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baca:	e007      	b.n	800badc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f042 0201 	orr.w	r2, r2, #1
 800bada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	40010000 	.word	0x40010000
 800baf0:	40000400 	.word	0x40000400
 800baf4:	40000800 	.word	0x40000800
 800baf8:	40000c00 	.word	0x40000c00
 800bafc:	40014000 	.word	0x40014000

0800bb00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d001      	beq.n	800bb18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e044      	b.n	800bba2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2202      	movs	r2, #2
 800bb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	68da      	ldr	r2, [r3, #12]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f042 0201 	orr.w	r2, r2, #1
 800bb2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a1e      	ldr	r2, [pc, #120]	; (800bbb0 <HAL_TIM_Base_Start_IT+0xb0>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d018      	beq.n	800bb6c <HAL_TIM_Base_Start_IT+0x6c>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb42:	d013      	beq.n	800bb6c <HAL_TIM_Base_Start_IT+0x6c>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a1a      	ldr	r2, [pc, #104]	; (800bbb4 <HAL_TIM_Base_Start_IT+0xb4>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d00e      	beq.n	800bb6c <HAL_TIM_Base_Start_IT+0x6c>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a19      	ldr	r2, [pc, #100]	; (800bbb8 <HAL_TIM_Base_Start_IT+0xb8>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d009      	beq.n	800bb6c <HAL_TIM_Base_Start_IT+0x6c>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a17      	ldr	r2, [pc, #92]	; (800bbbc <HAL_TIM_Base_Start_IT+0xbc>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d004      	beq.n	800bb6c <HAL_TIM_Base_Start_IT+0x6c>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a16      	ldr	r2, [pc, #88]	; (800bbc0 <HAL_TIM_Base_Start_IT+0xc0>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d111      	bne.n	800bb90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f003 0307 	and.w	r3, r3, #7
 800bb76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2b06      	cmp	r3, #6
 800bb7c:	d010      	beq.n	800bba0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f042 0201 	orr.w	r2, r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb8e:	e007      	b.n	800bba0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f042 0201 	orr.w	r2, r2, #1
 800bb9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40000400 	.word	0x40000400
 800bbb8:	40000800 	.word	0x40000800
 800bbbc:	40000c00 	.word	0x40000c00
 800bbc0:	40014000 	.word	0x40014000

0800bbc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f022 0201 	bic.w	r2, r2, #1
 800bbda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6a1a      	ldr	r2, [r3, #32]
 800bbe2:	f241 1311 	movw	r3, #4369	; 0x1111
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10f      	bne.n	800bc0c <HAL_TIM_Base_Stop_IT+0x48>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6a1a      	ldr	r2, [r3, #32]
 800bbf2:	f240 4344 	movw	r3, #1092	; 0x444
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d107      	bne.n	800bc0c <HAL_TIM_Base_Stop_IT+0x48>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f022 0201 	bic.w	r2, r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b082      	sub	sp, #8
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e041      	b.n	800bcb8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d106      	bne.n	800bc4e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 f839 	bl	800bcc0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2202      	movs	r2, #2
 800bc52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3304      	adds	r3, #4
 800bc5e:	4619      	mov	r1, r3
 800bc60:	4610      	mov	r0, r2
 800bc62:	f000 fcfd 	bl	800c660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2201      	movs	r2, #1
 800bca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2201      	movs	r2, #1
 800bcaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e041      	b.n	800bd6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d106      	bne.n	800bd00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f839 	bl	800bd72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2202      	movs	r2, #2
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f000 fca4 	bl	800c660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2201      	movs	r2, #1
 800bd34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd7a:	bf00      	nop
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
	...

0800bd88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <HAL_TIM_PWM_Start+0x24>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	bf14      	ite	ne
 800bda4:	2301      	movne	r3, #1
 800bda6:	2300      	moveq	r3, #0
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	e022      	b.n	800bdf2 <HAL_TIM_PWM_Start+0x6a>
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b04      	cmp	r3, #4
 800bdb0:	d109      	bne.n	800bdc6 <HAL_TIM_PWM_Start+0x3e>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	bf14      	ite	ne
 800bdbe:	2301      	movne	r3, #1
 800bdc0:	2300      	moveq	r3, #0
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	e015      	b.n	800bdf2 <HAL_TIM_PWM_Start+0x6a>
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b08      	cmp	r3, #8
 800bdca:	d109      	bne.n	800bde0 <HAL_TIM_PWM_Start+0x58>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	bf14      	ite	ne
 800bdd8:	2301      	movne	r3, #1
 800bdda:	2300      	moveq	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	e008      	b.n	800bdf2 <HAL_TIM_PWM_Start+0x6a>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	bf14      	ite	ne
 800bdec:	2301      	movne	r3, #1
 800bdee:	2300      	moveq	r3, #0
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e068      	b.n	800becc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d104      	bne.n	800be0a <HAL_TIM_PWM_Start+0x82>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2202      	movs	r2, #2
 800be04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be08:	e013      	b.n	800be32 <HAL_TIM_PWM_Start+0xaa>
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d104      	bne.n	800be1a <HAL_TIM_PWM_Start+0x92>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2202      	movs	r2, #2
 800be14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be18:	e00b      	b.n	800be32 <HAL_TIM_PWM_Start+0xaa>
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	2b08      	cmp	r3, #8
 800be1e:	d104      	bne.n	800be2a <HAL_TIM_PWM_Start+0xa2>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be28:	e003      	b.n	800be32 <HAL_TIM_PWM_Start+0xaa>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2202      	movs	r2, #2
 800be2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2201      	movs	r2, #1
 800be38:	6839      	ldr	r1, [r7, #0]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 feb6 	bl	800cbac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a23      	ldr	r2, [pc, #140]	; (800bed4 <HAL_TIM_PWM_Start+0x14c>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d107      	bne.n	800be5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a1d      	ldr	r2, [pc, #116]	; (800bed4 <HAL_TIM_PWM_Start+0x14c>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d018      	beq.n	800be96 <HAL_TIM_PWM_Start+0x10e>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be6c:	d013      	beq.n	800be96 <HAL_TIM_PWM_Start+0x10e>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a19      	ldr	r2, [pc, #100]	; (800bed8 <HAL_TIM_PWM_Start+0x150>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d00e      	beq.n	800be96 <HAL_TIM_PWM_Start+0x10e>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a17      	ldr	r2, [pc, #92]	; (800bedc <HAL_TIM_PWM_Start+0x154>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d009      	beq.n	800be96 <HAL_TIM_PWM_Start+0x10e>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a16      	ldr	r2, [pc, #88]	; (800bee0 <HAL_TIM_PWM_Start+0x158>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d004      	beq.n	800be96 <HAL_TIM_PWM_Start+0x10e>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a14      	ldr	r2, [pc, #80]	; (800bee4 <HAL_TIM_PWM_Start+0x15c>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d111      	bne.n	800beba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	f003 0307 	and.w	r3, r3, #7
 800bea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b06      	cmp	r3, #6
 800bea6:	d010      	beq.n	800beca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f042 0201 	orr.w	r2, r2, #1
 800beb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beb8:	e007      	b.n	800beca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f042 0201 	orr.w	r2, r2, #1
 800bec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	40010000 	.word	0x40010000
 800bed8:	40000400 	.word	0x40000400
 800bedc:	40000800 	.word	0x40000800
 800bee0:	40000c00 	.word	0x40000c00
 800bee4:	40014000 	.word	0x40014000

0800bee8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d101      	bne.n	800befc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bef8:	2301      	movs	r3, #1
 800befa:	e097      	b.n	800c02c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f7fa ffe3 	bl	8006edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6812      	ldr	r2, [r2, #0]
 800bf28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf2c:	f023 0307 	bic.w	r3, r3, #7
 800bf30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f000 fb8f 	bl	800c660 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	6a1b      	ldr	r3, [r3, #32]
 800bf58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf6a:	f023 0303 	bic.w	r3, r3, #3
 800bf6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	021b      	lsls	r3, r3, #8
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bf88:	f023 030c 	bic.w	r3, r3, #12
 800bf8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bf94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	68da      	ldr	r2, [r3, #12]
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	021b      	lsls	r3, r3, #8
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	011a      	lsls	r2, r3, #4
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	031b      	lsls	r3, r3, #12
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bfc6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bfce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	011b      	lsls	r3, r3, #4
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2201      	movs	r2, #1
 800bffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2201      	movs	r2, #1
 800c00e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	f003 0302 	and.w	r3, r3, #2
 800c046:	2b02      	cmp	r3, #2
 800c048:	d122      	bne.n	800c090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b02      	cmp	r3, #2
 800c056:	d11b      	bne.n	800c090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f06f 0202 	mvn.w	r2, #2
 800c060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	f003 0303 	and.w	r3, r3, #3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d003      	beq.n	800c07e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fad3 	bl	800c622 <HAL_TIM_IC_CaptureCallback>
 800c07c:	e005      	b.n	800c08a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fac5 	bl	800c60e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 fad6 	bl	800c636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2200      	movs	r2, #0
 800c08e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	f003 0304 	and.w	r3, r3, #4
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	d122      	bne.n	800c0e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	f003 0304 	and.w	r3, r3, #4
 800c0a8:	2b04      	cmp	r3, #4
 800c0aa:	d11b      	bne.n	800c0e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f06f 0204 	mvn.w	r2, #4
 800c0b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2202      	movs	r2, #2
 800c0ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 faa9 	bl	800c622 <HAL_TIM_IC_CaptureCallback>
 800c0d0:	e005      	b.n	800c0de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fa9b 	bl	800c60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 faac 	bl	800c636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	691b      	ldr	r3, [r3, #16]
 800c0ea:	f003 0308 	and.w	r3, r3, #8
 800c0ee:	2b08      	cmp	r3, #8
 800c0f0:	d122      	bne.n	800c138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	f003 0308 	and.w	r3, r3, #8
 800c0fc:	2b08      	cmp	r3, #8
 800c0fe:	d11b      	bne.n	800c138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f06f 0208 	mvn.w	r2, #8
 800c108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2204      	movs	r2, #4
 800c10e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	f003 0303 	and.w	r3, r3, #3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 fa7f 	bl	800c622 <HAL_TIM_IC_CaptureCallback>
 800c124:	e005      	b.n	800c132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa71 	bl	800c60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 fa82 	bl	800c636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	f003 0310 	and.w	r3, r3, #16
 800c142:	2b10      	cmp	r3, #16
 800c144:	d122      	bne.n	800c18c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68db      	ldr	r3, [r3, #12]
 800c14c:	f003 0310 	and.w	r3, r3, #16
 800c150:	2b10      	cmp	r3, #16
 800c152:	d11b      	bne.n	800c18c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f06f 0210 	mvn.w	r2, #16
 800c15c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2208      	movs	r2, #8
 800c162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fa55 	bl	800c622 <HAL_TIM_IC_CaptureCallback>
 800c178:	e005      	b.n	800c186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa47 	bl	800c60e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fa58 	bl	800c636 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	f003 0301 	and.w	r3, r3, #1
 800c196:	2b01      	cmp	r3, #1
 800c198:	d10e      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d107      	bne.n	800c1b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f06f 0201 	mvn.w	r2, #1
 800c1b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7f5 fb2a 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c2:	2b80      	cmp	r3, #128	; 0x80
 800c1c4:	d10e      	bne.n	800c1e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68db      	ldr	r3, [r3, #12]
 800c1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d0:	2b80      	cmp	r3, #128	; 0x80
 800c1d2:	d107      	bne.n	800c1e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fd82 	bl	800cce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ee:	2b40      	cmp	r3, #64	; 0x40
 800c1f0:	d10e      	bne.n	800c210 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1fc:	2b40      	cmp	r3, #64	; 0x40
 800c1fe:	d107      	bne.n	800c210 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fa1d 	bl	800c64a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b20      	cmp	r3, #32
 800c21c:	d10e      	bne.n	800c23c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b20      	cmp	r3, #32
 800c22a:	d107      	bne.n	800c23c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f06f 0220 	mvn.w	r2, #32
 800c234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fd4c 	bl	800ccd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c25e:	2302      	movs	r3, #2
 800c260:	e048      	b.n	800c2f4 <HAL_TIM_OC_ConfigChannel+0xb0>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b0c      	cmp	r3, #12
 800c26e:	d839      	bhi.n	800c2e4 <HAL_TIM_OC_ConfigChannel+0xa0>
 800c270:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <HAL_TIM_OC_ConfigChannel+0x34>)
 800c272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c276:	bf00      	nop
 800c278:	0800c2ad 	.word	0x0800c2ad
 800c27c:	0800c2e5 	.word	0x0800c2e5
 800c280:	0800c2e5 	.word	0x0800c2e5
 800c284:	0800c2e5 	.word	0x0800c2e5
 800c288:	0800c2bb 	.word	0x0800c2bb
 800c28c:	0800c2e5 	.word	0x0800c2e5
 800c290:	0800c2e5 	.word	0x0800c2e5
 800c294:	0800c2e5 	.word	0x0800c2e5
 800c298:	0800c2c9 	.word	0x0800c2c9
 800c29c:	0800c2e5 	.word	0x0800c2e5
 800c2a0:	0800c2e5 	.word	0x0800c2e5
 800c2a4:	0800c2e5 	.word	0x0800c2e5
 800c2a8:	0800c2d7 	.word	0x0800c2d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fa54 	bl	800c760 <TIM_OC1_SetConfig>
      break;
 800c2b8:	e017      	b.n	800c2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68b9      	ldr	r1, [r7, #8]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f000 fab3 	bl	800c82c <TIM_OC2_SetConfig>
      break;
 800c2c6:	e010      	b.n	800c2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68b9      	ldr	r1, [r7, #8]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 fb18 	bl	800c904 <TIM_OC3_SetConfig>
      break;
 800c2d4:	e009      	b.n	800c2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 fb7b 	bl	800c9d8 <TIM_OC4_SetConfig>
      break;
 800c2e2:	e002      	b.n	800c2ea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c2e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3718      	adds	r7, #24
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af00      	add	r7, sp, #0
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c312:	2b01      	cmp	r3, #1
 800c314:	d101      	bne.n	800c31a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c316:	2302      	movs	r3, #2
 800c318:	e0ae      	b.n	800c478 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2201      	movs	r2, #1
 800c31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b0c      	cmp	r3, #12
 800c326:	f200 809f 	bhi.w	800c468 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c32a:	a201      	add	r2, pc, #4	; (adr r2, 800c330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c330:	0800c365 	.word	0x0800c365
 800c334:	0800c469 	.word	0x0800c469
 800c338:	0800c469 	.word	0x0800c469
 800c33c:	0800c469 	.word	0x0800c469
 800c340:	0800c3a5 	.word	0x0800c3a5
 800c344:	0800c469 	.word	0x0800c469
 800c348:	0800c469 	.word	0x0800c469
 800c34c:	0800c469 	.word	0x0800c469
 800c350:	0800c3e7 	.word	0x0800c3e7
 800c354:	0800c469 	.word	0x0800c469
 800c358:	0800c469 	.word	0x0800c469
 800c35c:	0800c469 	.word	0x0800c469
 800c360:	0800c427 	.word	0x0800c427
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	4618      	mov	r0, r3
 800c36c:	f000 f9f8 	bl	800c760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	699a      	ldr	r2, [r3, #24]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f042 0208 	orr.w	r2, r2, #8
 800c37e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	699a      	ldr	r2, [r3, #24]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 0204 	bic.w	r2, r2, #4
 800c38e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	6999      	ldr	r1, [r3, #24]
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	691a      	ldr	r2, [r3, #16]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	619a      	str	r2, [r3, #24]
      break;
 800c3a2:	e064      	b.n	800c46e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	68b9      	ldr	r1, [r7, #8]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fa3e 	bl	800c82c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	699a      	ldr	r2, [r3, #24]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	699a      	ldr	r2, [r3, #24]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	6999      	ldr	r1, [r3, #24]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	021a      	lsls	r2, r3, #8
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	619a      	str	r2, [r3, #24]
      break;
 800c3e4:	e043      	b.n	800c46e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68b9      	ldr	r1, [r7, #8]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 fa89 	bl	800c904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	69da      	ldr	r2, [r3, #28]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f042 0208 	orr.w	r2, r2, #8
 800c400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	69da      	ldr	r2, [r3, #28]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f022 0204 	bic.w	r2, r2, #4
 800c410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	69d9      	ldr	r1, [r3, #28]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	691a      	ldr	r2, [r3, #16]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	430a      	orrs	r2, r1
 800c422:	61da      	str	r2, [r3, #28]
      break;
 800c424:	e023      	b.n	800c46e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68b9      	ldr	r1, [r7, #8]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 fad3 	bl	800c9d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69da      	ldr	r2, [r3, #28]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	69da      	ldr	r2, [r3, #28]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	69d9      	ldr	r1, [r3, #28]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	021a      	lsls	r2, r3, #8
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	430a      	orrs	r2, r1
 800c464:	61da      	str	r2, [r3, #28]
      break;
 800c466:	e002      	b.n	800c46e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	75fb      	strb	r3, [r7, #23]
      break;
 800c46c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c476:	7dfb      	ldrb	r3, [r7, #23]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c494:	2b01      	cmp	r3, #1
 800c496:	d101      	bne.n	800c49c <HAL_TIM_ConfigClockSource+0x1c>
 800c498:	2302      	movs	r3, #2
 800c49a:	e0b4      	b.n	800c606 <HAL_TIM_ConfigClockSource+0x186>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c4ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68ba      	ldr	r2, [r7, #8]
 800c4ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4d4:	d03e      	beq.n	800c554 <HAL_TIM_ConfigClockSource+0xd4>
 800c4d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4da:	f200 8087 	bhi.w	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4e2:	f000 8086 	beq.w	800c5f2 <HAL_TIM_ConfigClockSource+0x172>
 800c4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4ea:	d87f      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c4ec:	2b70      	cmp	r3, #112	; 0x70
 800c4ee:	d01a      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0xa6>
 800c4f0:	2b70      	cmp	r3, #112	; 0x70
 800c4f2:	d87b      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c4f4:	2b60      	cmp	r3, #96	; 0x60
 800c4f6:	d050      	beq.n	800c59a <HAL_TIM_ConfigClockSource+0x11a>
 800c4f8:	2b60      	cmp	r3, #96	; 0x60
 800c4fa:	d877      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c4fc:	2b50      	cmp	r3, #80	; 0x50
 800c4fe:	d03c      	beq.n	800c57a <HAL_TIM_ConfigClockSource+0xfa>
 800c500:	2b50      	cmp	r3, #80	; 0x50
 800c502:	d873      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c504:	2b40      	cmp	r3, #64	; 0x40
 800c506:	d058      	beq.n	800c5ba <HAL_TIM_ConfigClockSource+0x13a>
 800c508:	2b40      	cmp	r3, #64	; 0x40
 800c50a:	d86f      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c50c:	2b30      	cmp	r3, #48	; 0x30
 800c50e:	d064      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x15a>
 800c510:	2b30      	cmp	r3, #48	; 0x30
 800c512:	d86b      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c514:	2b20      	cmp	r3, #32
 800c516:	d060      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x15a>
 800c518:	2b20      	cmp	r3, #32
 800c51a:	d867      	bhi.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d05c      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x15a>
 800c520:	2b10      	cmp	r3, #16
 800c522:	d05a      	beq.n	800c5da <HAL_TIM_ConfigClockSource+0x15a>
 800c524:	e062      	b.n	800c5ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	6899      	ldr	r1, [r3, #8]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685a      	ldr	r2, [r3, #4]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	f000 fb19 	bl	800cb6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	609a      	str	r2, [r3, #8]
      break;
 800c552:	e04f      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	6899      	ldr	r1, [r3, #8]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f000 fb02 	bl	800cb6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	689a      	ldr	r2, [r3, #8]
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c576:	609a      	str	r2, [r3, #8]
      break;
 800c578:	e03c      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6818      	ldr	r0, [r3, #0]
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	6859      	ldr	r1, [r3, #4]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	461a      	mov	r2, r3
 800c588:	f000 fa76 	bl	800ca78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2150      	movs	r1, #80	; 0x50
 800c592:	4618      	mov	r0, r3
 800c594:	f000 facf 	bl	800cb36 <TIM_ITRx_SetConfig>
      break;
 800c598:	e02c      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6818      	ldr	r0, [r3, #0]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	6859      	ldr	r1, [r3, #4]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f000 fa95 	bl	800cad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2160      	movs	r1, #96	; 0x60
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 fabf 	bl	800cb36 <TIM_ITRx_SetConfig>
      break;
 800c5b8:	e01c      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	6859      	ldr	r1, [r3, #4]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	f000 fa56 	bl	800ca78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2140      	movs	r1, #64	; 0x40
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 faaf 	bl	800cb36 <TIM_ITRx_SetConfig>
      break;
 800c5d8:	e00c      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f000 faa6 	bl	800cb36 <TIM_ITRx_SetConfig>
      break;
 800c5ea:	e003      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f0:	e000      	b.n	800c5f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c5f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c60e:	b480      	push	{r7}
 800c610:	b083      	sub	sp, #12
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c616:	bf00      	nop
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr

0800c622 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c62a:	bf00      	nop
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c636:	b480      	push	{r7}
 800c638:	b083      	sub	sp, #12
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c63e:	bf00      	nop
 800c640:	370c      	adds	r7, #12
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr

0800c64a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b083      	sub	sp, #12
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c652:	bf00      	nop
 800c654:	370c      	adds	r7, #12
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
	...

0800c660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a34      	ldr	r2, [pc, #208]	; (800c744 <TIM_Base_SetConfig+0xe4>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d00f      	beq.n	800c698 <TIM_Base_SetConfig+0x38>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c67e:	d00b      	beq.n	800c698 <TIM_Base_SetConfig+0x38>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a31      	ldr	r2, [pc, #196]	; (800c748 <TIM_Base_SetConfig+0xe8>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d007      	beq.n	800c698 <TIM_Base_SetConfig+0x38>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a30      	ldr	r2, [pc, #192]	; (800c74c <TIM_Base_SetConfig+0xec>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d003      	beq.n	800c698 <TIM_Base_SetConfig+0x38>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	4a2f      	ldr	r2, [pc, #188]	; (800c750 <TIM_Base_SetConfig+0xf0>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d108      	bne.n	800c6aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	4a25      	ldr	r2, [pc, #148]	; (800c744 <TIM_Base_SetConfig+0xe4>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d01b      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6b8:	d017      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4a22      	ldr	r2, [pc, #136]	; (800c748 <TIM_Base_SetConfig+0xe8>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d013      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a21      	ldr	r2, [pc, #132]	; (800c74c <TIM_Base_SetConfig+0xec>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00f      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a20      	ldr	r2, [pc, #128]	; (800c750 <TIM_Base_SetConfig+0xf0>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d00b      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	4a1f      	ldr	r2, [pc, #124]	; (800c754 <TIM_Base_SetConfig+0xf4>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d007      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4a1e      	ldr	r2, [pc, #120]	; (800c758 <TIM_Base_SetConfig+0xf8>)
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d003      	beq.n	800c6ea <TIM_Base_SetConfig+0x8a>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4a1d      	ldr	r2, [pc, #116]	; (800c75c <TIM_Base_SetConfig+0xfc>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d108      	bne.n	800c6fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	68db      	ldr	r3, [r3, #12]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	695b      	ldr	r3, [r3, #20]
 800c706:	4313      	orrs	r3, r2
 800c708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	689a      	ldr	r2, [r3, #8]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4a08      	ldr	r2, [pc, #32]	; (800c744 <TIM_Base_SetConfig+0xe4>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d103      	bne.n	800c730 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	615a      	str	r2, [r3, #20]
}
 800c736:	bf00      	nop
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	40010000 	.word	0x40010000
 800c748:	40000400 	.word	0x40000400
 800c74c:	40000800 	.word	0x40000800
 800c750:	40000c00 	.word	0x40000c00
 800c754:	40014000 	.word	0x40014000
 800c758:	40014400 	.word	0x40014400
 800c75c:	40014800 	.word	0x40014800

0800c760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c760:	b480      	push	{r7}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6a1b      	ldr	r3, [r3, #32]
 800c76e:	f023 0201 	bic.w	r2, r3, #1
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6a1b      	ldr	r3, [r3, #32]
 800c77a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	699b      	ldr	r3, [r3, #24]
 800c786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c78e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f023 0303 	bic.w	r3, r3, #3
 800c796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f023 0302 	bic.w	r3, r3, #2
 800c7a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a1c      	ldr	r2, [pc, #112]	; (800c828 <TIM_OC1_SetConfig+0xc8>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d10c      	bne.n	800c7d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f023 0308 	bic.w	r3, r3, #8
 800c7c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	697a      	ldr	r2, [r7, #20]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f023 0304 	bic.w	r3, r3, #4
 800c7d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a13      	ldr	r2, [pc, #76]	; (800c828 <TIM_OC1_SetConfig+0xc8>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d111      	bne.n	800c802 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	699b      	ldr	r3, [r3, #24]
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	693a      	ldr	r2, [r7, #16]
 800c806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	697a      	ldr	r2, [r7, #20]
 800c81a:	621a      	str	r2, [r3, #32]
}
 800c81c:	bf00      	nop
 800c81e:	371c      	adds	r7, #28
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	40010000 	.word	0x40010000

0800c82c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b087      	sub	sp, #28
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	f023 0210 	bic.w	r2, r3, #16
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a1b      	ldr	r3, [r3, #32]
 800c846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	699b      	ldr	r3, [r3, #24]
 800c852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	021b      	lsls	r3, r3, #8
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	f023 0320 	bic.w	r3, r3, #32
 800c876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	011b      	lsls	r3, r3, #4
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	4313      	orrs	r3, r2
 800c882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a1e      	ldr	r2, [pc, #120]	; (800c900 <TIM_OC2_SetConfig+0xd4>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d10d      	bne.n	800c8a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	011b      	lsls	r3, r3, #4
 800c89a:	697a      	ldr	r2, [r7, #20]
 800c89c:	4313      	orrs	r3, r2
 800c89e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a15      	ldr	r2, [pc, #84]	; (800c900 <TIM_OC2_SetConfig+0xd4>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d113      	bne.n	800c8d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	695b      	ldr	r3, [r3, #20]
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	693a      	ldr	r2, [r7, #16]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	621a      	str	r2, [r3, #32]
}
 800c8f2:	bf00      	nop
 800c8f4:	371c      	adds	r7, #28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	40010000 	.word	0x40010000

0800c904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c904:	b480      	push	{r7}
 800c906:	b087      	sub	sp, #28
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	69db      	ldr	r3, [r3, #28]
 800c92a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f023 0303 	bic.w	r3, r3, #3
 800c93a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68fa      	ldr	r2, [r7, #12]
 800c942:	4313      	orrs	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c94c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	021b      	lsls	r3, r3, #8
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	4313      	orrs	r3, r2
 800c958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4a1d      	ldr	r2, [pc, #116]	; (800c9d4 <TIM_OC3_SetConfig+0xd0>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d10d      	bne.n	800c97e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	021b      	lsls	r3, r3, #8
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	4313      	orrs	r3, r2
 800c974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c97c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a14      	ldr	r2, [pc, #80]	; (800c9d4 <TIM_OC3_SetConfig+0xd0>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d113      	bne.n	800c9ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	011b      	lsls	r3, r3, #4
 800c9a8:	693a      	ldr	r2, [r7, #16]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	621a      	str	r2, [r3, #32]
}
 800c9c8:	bf00      	nop
 800c9ca:	371c      	adds	r7, #28
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr
 800c9d4:	40010000 	.word	0x40010000

0800c9d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6a1b      	ldr	r3, [r3, #32]
 800c9e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	69db      	ldr	r3, [r3, #28]
 800c9fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	021b      	lsls	r3, r3, #8
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	031b      	lsls	r3, r3, #12
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a10      	ldr	r2, [pc, #64]	; (800ca74 <TIM_OC4_SetConfig+0x9c>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d109      	bne.n	800ca4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	695b      	ldr	r3, [r3, #20]
 800ca44:	019b      	lsls	r3, r3, #6
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	697a      	ldr	r2, [r7, #20]
 800ca50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	621a      	str	r2, [r3, #32]
}
 800ca66:	bf00      	nop
 800ca68:	371c      	adds	r7, #28
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	40010000 	.word	0x40010000

0800ca78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a1b      	ldr	r3, [r3, #32]
 800ca88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	f023 0201 	bic.w	r2, r3, #1
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800caa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	011b      	lsls	r3, r3, #4
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	4313      	orrs	r3, r2
 800caac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	f023 030a 	bic.w	r3, r3, #10
 800cab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cab6:	697a      	ldr	r2, [r7, #20]
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	4313      	orrs	r3, r2
 800cabc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	693a      	ldr	r2, [r7, #16]
 800cac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	621a      	str	r2, [r3, #32]
}
 800caca:	bf00      	nop
 800cacc:	371c      	adds	r7, #28
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b087      	sub	sp, #28
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	60b9      	str	r1, [r7, #8]
 800cae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	f023 0210 	bic.w	r2, r3, #16
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6a1b      	ldr	r3, [r3, #32]
 800caf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	031b      	lsls	r3, r3, #12
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cb12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	011b      	lsls	r3, r3, #4
 800cb18:	693a      	ldr	r2, [r7, #16]
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	697a      	ldr	r2, [r7, #20]
 800cb22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	621a      	str	r2, [r3, #32]
}
 800cb2a:	bf00      	nop
 800cb2c:	371c      	adds	r7, #28
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b085      	sub	sp, #20
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	6078      	str	r0, [r7, #4]
 800cb3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb4e:	683a      	ldr	r2, [r7, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	f043 0307 	orr.w	r3, r3, #7
 800cb58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	609a      	str	r2, [r3, #8]
}
 800cb60:	bf00      	nop
 800cb62:	3714      	adds	r7, #20
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b087      	sub	sp, #28
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
 800cb78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	021a      	lsls	r2, r3, #8
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	609a      	str	r2, [r3, #8]
}
 800cba0:	bf00      	nop
 800cba2:	371c      	adds	r7, #28
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b087      	sub	sp, #28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	60f8      	str	r0, [r7, #12]
 800cbb4:	60b9      	str	r1, [r7, #8]
 800cbb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	f003 031f 	and.w	r3, r3, #31
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a1a      	ldr	r2, [r3, #32]
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	43db      	mvns	r3, r3
 800cbce:	401a      	ands	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6a1a      	ldr	r2, [r3, #32]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	f003 031f 	and.w	r3, r3, #31
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbe4:	431a      	orrs	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	621a      	str	r2, [r3, #32]
}
 800cbea:	bf00      	nop
 800cbec:	371c      	adds	r7, #28
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
	...

0800cbf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d101      	bne.n	800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	e050      	b.n	800ccb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	2201      	movs	r2, #1
 800cc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2202      	movs	r2, #2
 800cc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685b      	ldr	r3, [r3, #4]
 800cc26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	68fa      	ldr	r2, [r7, #12]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a1c      	ldr	r2, [pc, #112]	; (800ccc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d018      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc5c:	d013      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a18      	ldr	r2, [pc, #96]	; (800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d00e      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a16      	ldr	r2, [pc, #88]	; (800ccc8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d009      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a15      	ldr	r2, [pc, #84]	; (800cccc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d004      	beq.n	800cc86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a13      	ldr	r2, [pc, #76]	; (800ccd0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d10c      	bne.n	800cca0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	4313      	orrs	r3, r2
 800cc96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
 800ccbe:	bf00      	nop
 800ccc0:	40010000 	.word	0x40010000
 800ccc4:	40000400 	.word	0x40000400
 800ccc8:	40000800 	.word	0x40000800
 800cccc:	40000c00 	.word	0x40000c00
 800ccd0:	40014000 	.word	0x40014000

0800ccd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e047      	b.n	800cd9e <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7fa f9d6 	bl	80070d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2224      	movs	r2, #36	; 0x24
 800cd2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68da      	ldr	r2, [r3, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f931 	bl	800cfa8 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	691a      	ldr	r2, [r3, #16]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	695a      	ldr	r2, [r3, #20]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800cd64:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	695a      	ldr	r2, [r3, #20]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f042 0208 	orr.w	r2, r2, #8
 800cd74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68da      	ldr	r2, [r3, #12]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2220      	movs	r2, #32
 800cd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2220      	movs	r2, #32
 800cd98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b08a      	sub	sp, #40	; 0x28
 800cdaa:	af02      	add	r7, sp, #8
 800cdac:	60f8      	str	r0, [r7, #12]
 800cdae:	60b9      	str	r1, [r7, #8]
 800cdb0:	603b      	str	r3, [r7, #0]
 800cdb2:	4613      	mov	r3, r2
 800cdb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b20      	cmp	r3, #32
 800cdc4:	d17c      	bne.n	800cec0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <HAL_UART_Transmit+0x2c>
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e075      	b.n	800cec2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <HAL_UART_Transmit+0x3e>
 800cde0:	2302      	movs	r3, #2
 800cde2:	e06e      	b.n	800cec2 <HAL_UART_Transmit+0x11c>
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2221      	movs	r2, #33	; 0x21
 800cdf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdfa:	f7fa facf 	bl	800739c <HAL_GetTick>
 800cdfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	88fa      	ldrh	r2, [r7, #6]
 800ce04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	88fa      	ldrh	r2, [r7, #6]
 800ce0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce14:	d108      	bne.n	800ce28 <HAL_UART_Transmit+0x82>
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	61bb      	str	r3, [r7, #24]
 800ce26:	e003      	b.n	800ce30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ce38:	e02a      	b.n	800ce90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	9300      	str	r3, [sp, #0]
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	2200      	movs	r2, #0
 800ce42:	2180      	movs	r1, #128	; 0x80
 800ce44:	68f8      	ldr	r0, [r7, #12]
 800ce46:	f000 f840 	bl	800ceca <UART_WaitOnFlagUntilTimeout>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ce50:	2303      	movs	r3, #3
 800ce52:	e036      	b.n	800cec2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10b      	bne.n	800ce72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	461a      	mov	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	61bb      	str	r3, [r7, #24]
 800ce70:	e007      	b.n	800ce82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	781a      	ldrb	r2, [r3, #0]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	3301      	adds	r3, #1
 800ce80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1cf      	bne.n	800ce3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	9300      	str	r3, [sp, #0]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2200      	movs	r2, #0
 800cea2:	2140      	movs	r1, #64	; 0x40
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f000 f810 	bl	800ceca <UART_WaitOnFlagUntilTimeout>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d001      	beq.n	800ceb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ceb0:	2303      	movs	r3, #3
 800ceb2:	e006      	b.n	800cec2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2220      	movs	r2, #32
 800ceb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	e000      	b.n	800cec2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cec0:	2302      	movs	r3, #2
  }
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3720      	adds	r7, #32
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}

0800ceca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b090      	sub	sp, #64	; 0x40
 800cece:	af00      	add	r7, sp, #0
 800ced0:	60f8      	str	r0, [r7, #12]
 800ced2:	60b9      	str	r1, [r7, #8]
 800ced4:	603b      	str	r3, [r7, #0]
 800ced6:	4613      	mov	r3, r2
 800ced8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ceda:	e050      	b.n	800cf7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee2:	d04c      	beq.n	800cf7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d007      	beq.n	800cefa <UART_WaitOnFlagUntilTimeout+0x30>
 800ceea:	f7fa fa57 	bl	800739c <HAL_GetTick>
 800ceee:	4602      	mov	r2, r0
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d241      	bcs.n	800cf7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	330c      	adds	r3, #12
 800cf00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf04:	e853 3f00 	ldrex	r3, [r3]
 800cf08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cf10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	330c      	adds	r3, #12
 800cf18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf1a:	637a      	str	r2, [r7, #52]	; 0x34
 800cf1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf22:	e841 2300 	strex	r3, r2, [r1]
 800cf26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1e5      	bne.n	800cefa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	3314      	adds	r3, #20
 800cf34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	e853 3f00 	ldrex	r3, [r3]
 800cf3c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	f023 0301 	bic.w	r3, r3, #1
 800cf44:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	3314      	adds	r3, #20
 800cf4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf4e:	623a      	str	r2, [r7, #32]
 800cf50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf52:	69f9      	ldr	r1, [r7, #28]
 800cf54:	6a3a      	ldr	r2, [r7, #32]
 800cf56:	e841 2300 	strex	r3, r2, [r1]
 800cf5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1e5      	bne.n	800cf2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2220      	movs	r2, #32
 800cf66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2220      	movs	r2, #32
 800cf6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cf7a:	2303      	movs	r3, #3
 800cf7c:	e00f      	b.n	800cf9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	4013      	ands	r3, r2
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	bf0c      	ite	eq
 800cf8e:	2301      	moveq	r3, #1
 800cf90:	2300      	movne	r3, #0
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	461a      	mov	r2, r3
 800cf96:	79fb      	ldrb	r3, [r7, #7]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d09f      	beq.n	800cedc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3740      	adds	r7, #64	; 0x40
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
	...

0800cfa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cfa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfac:	b0c0      	sub	sp, #256	; 0x100
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	691b      	ldr	r3, [r3, #16]
 800cfbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cfc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfc4:	68d9      	ldr	r1, [r3, #12]
 800cfc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	ea40 0301 	orr.w	r3, r0, r1
 800cfd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cfd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfd6:	689a      	ldr	r2, [r3, #8]
 800cfd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfe4:	695b      	ldr	r3, [r3, #20]
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	4313      	orrs	r3, r2
 800cff0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d000:	f021 010c 	bic.w	r1, r1, #12
 800d004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d00e:	430b      	orrs	r3, r1
 800d010:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	695b      	ldr	r3, [r3, #20]
 800d01a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d01e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d022:	6999      	ldr	r1, [r3, #24]
 800d024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	ea40 0301 	orr.w	r3, r0, r1
 800d02e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	4b8f      	ldr	r3, [pc, #572]	; (800d274 <UART_SetConfig+0x2cc>)
 800d038:	429a      	cmp	r2, r3
 800d03a:	d005      	beq.n	800d048 <UART_SetConfig+0xa0>
 800d03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	4b8d      	ldr	r3, [pc, #564]	; (800d278 <UART_SetConfig+0x2d0>)
 800d044:	429a      	cmp	r2, r3
 800d046:	d104      	bne.n	800d052 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d048:	f7fd fcf4 	bl	800aa34 <HAL_RCC_GetPCLK2Freq>
 800d04c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d050:	e003      	b.n	800d05a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d052:	f7fd fcdb 	bl	800aa0c <HAL_RCC_GetPCLK1Freq>
 800d056:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d05e:	69db      	ldr	r3, [r3, #28]
 800d060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d064:	f040 810c 	bne.w	800d280 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d06c:	2200      	movs	r2, #0
 800d06e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d072:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d076:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d07a:	4622      	mov	r2, r4
 800d07c:	462b      	mov	r3, r5
 800d07e:	1891      	adds	r1, r2, r2
 800d080:	65b9      	str	r1, [r7, #88]	; 0x58
 800d082:	415b      	adcs	r3, r3
 800d084:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d086:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d08a:	4621      	mov	r1, r4
 800d08c:	eb12 0801 	adds.w	r8, r2, r1
 800d090:	4629      	mov	r1, r5
 800d092:	eb43 0901 	adc.w	r9, r3, r1
 800d096:	f04f 0200 	mov.w	r2, #0
 800d09a:	f04f 0300 	mov.w	r3, #0
 800d09e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d0a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d0a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d0aa:	4690      	mov	r8, r2
 800d0ac:	4699      	mov	r9, r3
 800d0ae:	4623      	mov	r3, r4
 800d0b0:	eb18 0303 	adds.w	r3, r8, r3
 800d0b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d0b8:	462b      	mov	r3, r5
 800d0ba:	eb49 0303 	adc.w	r3, r9, r3
 800d0be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d0c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d0ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d0d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	18db      	adds	r3, r3, r3
 800d0da:	653b      	str	r3, [r7, #80]	; 0x50
 800d0dc:	4613      	mov	r3, r2
 800d0de:	eb42 0303 	adc.w	r3, r2, r3
 800d0e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d0e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d0e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d0ec:	f7f3 fbd2 	bl	8000894 <__aeabi_uldivmod>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	4b61      	ldr	r3, [pc, #388]	; (800d27c <UART_SetConfig+0x2d4>)
 800d0f6:	fba3 2302 	umull	r2, r3, r3, r2
 800d0fa:	095b      	lsrs	r3, r3, #5
 800d0fc:	011c      	lsls	r4, r3, #4
 800d0fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d102:	2200      	movs	r2, #0
 800d104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d108:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d10c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d110:	4642      	mov	r2, r8
 800d112:	464b      	mov	r3, r9
 800d114:	1891      	adds	r1, r2, r2
 800d116:	64b9      	str	r1, [r7, #72]	; 0x48
 800d118:	415b      	adcs	r3, r3
 800d11a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d11c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d120:	4641      	mov	r1, r8
 800d122:	eb12 0a01 	adds.w	sl, r2, r1
 800d126:	4649      	mov	r1, r9
 800d128:	eb43 0b01 	adc.w	fp, r3, r1
 800d12c:	f04f 0200 	mov.w	r2, #0
 800d130:	f04f 0300 	mov.w	r3, #0
 800d134:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d138:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d13c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d140:	4692      	mov	sl, r2
 800d142:	469b      	mov	fp, r3
 800d144:	4643      	mov	r3, r8
 800d146:	eb1a 0303 	adds.w	r3, sl, r3
 800d14a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d14e:	464b      	mov	r3, r9
 800d150:	eb4b 0303 	adc.w	r3, fp, r3
 800d154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d164:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d168:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d16c:	460b      	mov	r3, r1
 800d16e:	18db      	adds	r3, r3, r3
 800d170:	643b      	str	r3, [r7, #64]	; 0x40
 800d172:	4613      	mov	r3, r2
 800d174:	eb42 0303 	adc.w	r3, r2, r3
 800d178:	647b      	str	r3, [r7, #68]	; 0x44
 800d17a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d17e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d182:	f7f3 fb87 	bl	8000894 <__aeabi_uldivmod>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	4611      	mov	r1, r2
 800d18c:	4b3b      	ldr	r3, [pc, #236]	; (800d27c <UART_SetConfig+0x2d4>)
 800d18e:	fba3 2301 	umull	r2, r3, r3, r1
 800d192:	095b      	lsrs	r3, r3, #5
 800d194:	2264      	movs	r2, #100	; 0x64
 800d196:	fb02 f303 	mul.w	r3, r2, r3
 800d19a:	1acb      	subs	r3, r1, r3
 800d19c:	00db      	lsls	r3, r3, #3
 800d19e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d1a2:	4b36      	ldr	r3, [pc, #216]	; (800d27c <UART_SetConfig+0x2d4>)
 800d1a4:	fba3 2302 	umull	r2, r3, r3, r2
 800d1a8:	095b      	lsrs	r3, r3, #5
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d1b0:	441c      	add	r4, r3
 800d1b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d1bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d1c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	464b      	mov	r3, r9
 800d1c8:	1891      	adds	r1, r2, r2
 800d1ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800d1cc:	415b      	adcs	r3, r3
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d1d4:	4641      	mov	r1, r8
 800d1d6:	1851      	adds	r1, r2, r1
 800d1d8:	6339      	str	r1, [r7, #48]	; 0x30
 800d1da:	4649      	mov	r1, r9
 800d1dc:	414b      	adcs	r3, r1
 800d1de:	637b      	str	r3, [r7, #52]	; 0x34
 800d1e0:	f04f 0200 	mov.w	r2, #0
 800d1e4:	f04f 0300 	mov.w	r3, #0
 800d1e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d1ec:	4659      	mov	r1, fp
 800d1ee:	00cb      	lsls	r3, r1, #3
 800d1f0:	4651      	mov	r1, sl
 800d1f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d1f6:	4651      	mov	r1, sl
 800d1f8:	00ca      	lsls	r2, r1, #3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	4603      	mov	r3, r0
 800d200:	4642      	mov	r2, r8
 800d202:	189b      	adds	r3, r3, r2
 800d204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d208:	464b      	mov	r3, r9
 800d20a:	460a      	mov	r2, r1
 800d20c:	eb42 0303 	adc.w	r3, r2, r3
 800d210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d220:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d224:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d228:	460b      	mov	r3, r1
 800d22a:	18db      	adds	r3, r3, r3
 800d22c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d22e:	4613      	mov	r3, r2
 800d230:	eb42 0303 	adc.w	r3, r2, r3
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d236:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d23a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d23e:	f7f3 fb29 	bl	8000894 <__aeabi_uldivmod>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4b0d      	ldr	r3, [pc, #52]	; (800d27c <UART_SetConfig+0x2d4>)
 800d248:	fba3 1302 	umull	r1, r3, r3, r2
 800d24c:	095b      	lsrs	r3, r3, #5
 800d24e:	2164      	movs	r1, #100	; 0x64
 800d250:	fb01 f303 	mul.w	r3, r1, r3
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	00db      	lsls	r3, r3, #3
 800d258:	3332      	adds	r3, #50	; 0x32
 800d25a:	4a08      	ldr	r2, [pc, #32]	; (800d27c <UART_SetConfig+0x2d4>)
 800d25c:	fba2 2303 	umull	r2, r3, r2, r3
 800d260:	095b      	lsrs	r3, r3, #5
 800d262:	f003 0207 	and.w	r2, r3, #7
 800d266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4422      	add	r2, r4
 800d26e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d270:	e105      	b.n	800d47e <UART_SetConfig+0x4d6>
 800d272:	bf00      	nop
 800d274:	40011000 	.word	0x40011000
 800d278:	40011400 	.word	0x40011400
 800d27c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d284:	2200      	movs	r2, #0
 800d286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d28a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d28e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d292:	4642      	mov	r2, r8
 800d294:	464b      	mov	r3, r9
 800d296:	1891      	adds	r1, r2, r2
 800d298:	6239      	str	r1, [r7, #32]
 800d29a:	415b      	adcs	r3, r3
 800d29c:	627b      	str	r3, [r7, #36]	; 0x24
 800d29e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d2a2:	4641      	mov	r1, r8
 800d2a4:	1854      	adds	r4, r2, r1
 800d2a6:	4649      	mov	r1, r9
 800d2a8:	eb43 0501 	adc.w	r5, r3, r1
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	f04f 0300 	mov.w	r3, #0
 800d2b4:	00eb      	lsls	r3, r5, #3
 800d2b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d2ba:	00e2      	lsls	r2, r4, #3
 800d2bc:	4614      	mov	r4, r2
 800d2be:	461d      	mov	r5, r3
 800d2c0:	4643      	mov	r3, r8
 800d2c2:	18e3      	adds	r3, r4, r3
 800d2c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d2c8:	464b      	mov	r3, r9
 800d2ca:	eb45 0303 	adc.w	r3, r5, r3
 800d2ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d2de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d2e2:	f04f 0200 	mov.w	r2, #0
 800d2e6:	f04f 0300 	mov.w	r3, #0
 800d2ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d2ee:	4629      	mov	r1, r5
 800d2f0:	008b      	lsls	r3, r1, #2
 800d2f2:	4621      	mov	r1, r4
 800d2f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	008a      	lsls	r2, r1, #2
 800d2fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d300:	f7f3 fac8 	bl	8000894 <__aeabi_uldivmod>
 800d304:	4602      	mov	r2, r0
 800d306:	460b      	mov	r3, r1
 800d308:	4b60      	ldr	r3, [pc, #384]	; (800d48c <UART_SetConfig+0x4e4>)
 800d30a:	fba3 2302 	umull	r2, r3, r3, r2
 800d30e:	095b      	lsrs	r3, r3, #5
 800d310:	011c      	lsls	r4, r3, #4
 800d312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d316:	2200      	movs	r2, #0
 800d318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d31c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d320:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d324:	4642      	mov	r2, r8
 800d326:	464b      	mov	r3, r9
 800d328:	1891      	adds	r1, r2, r2
 800d32a:	61b9      	str	r1, [r7, #24]
 800d32c:	415b      	adcs	r3, r3
 800d32e:	61fb      	str	r3, [r7, #28]
 800d330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d334:	4641      	mov	r1, r8
 800d336:	1851      	adds	r1, r2, r1
 800d338:	6139      	str	r1, [r7, #16]
 800d33a:	4649      	mov	r1, r9
 800d33c:	414b      	adcs	r3, r1
 800d33e:	617b      	str	r3, [r7, #20]
 800d340:	f04f 0200 	mov.w	r2, #0
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d34c:	4659      	mov	r1, fp
 800d34e:	00cb      	lsls	r3, r1, #3
 800d350:	4651      	mov	r1, sl
 800d352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d356:	4651      	mov	r1, sl
 800d358:	00ca      	lsls	r2, r1, #3
 800d35a:	4610      	mov	r0, r2
 800d35c:	4619      	mov	r1, r3
 800d35e:	4603      	mov	r3, r0
 800d360:	4642      	mov	r2, r8
 800d362:	189b      	adds	r3, r3, r2
 800d364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d368:	464b      	mov	r3, r9
 800d36a:	460a      	mov	r2, r1
 800d36c:	eb42 0303 	adc.w	r3, r2, r3
 800d370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d37e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d380:	f04f 0200 	mov.w	r2, #0
 800d384:	f04f 0300 	mov.w	r3, #0
 800d388:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d38c:	4649      	mov	r1, r9
 800d38e:	008b      	lsls	r3, r1, #2
 800d390:	4641      	mov	r1, r8
 800d392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d396:	4641      	mov	r1, r8
 800d398:	008a      	lsls	r2, r1, #2
 800d39a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d39e:	f7f3 fa79 	bl	8000894 <__aeabi_uldivmod>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	4b39      	ldr	r3, [pc, #228]	; (800d48c <UART_SetConfig+0x4e4>)
 800d3a8:	fba3 1302 	umull	r1, r3, r3, r2
 800d3ac:	095b      	lsrs	r3, r3, #5
 800d3ae:	2164      	movs	r1, #100	; 0x64
 800d3b0:	fb01 f303 	mul.w	r3, r1, r3
 800d3b4:	1ad3      	subs	r3, r2, r3
 800d3b6:	011b      	lsls	r3, r3, #4
 800d3b8:	3332      	adds	r3, #50	; 0x32
 800d3ba:	4a34      	ldr	r2, [pc, #208]	; (800d48c <UART_SetConfig+0x4e4>)
 800d3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d3c0:	095b      	lsrs	r3, r3, #5
 800d3c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3c6:	441c      	add	r4, r3
 800d3c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	673b      	str	r3, [r7, #112]	; 0x70
 800d3d0:	677a      	str	r2, [r7, #116]	; 0x74
 800d3d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	464b      	mov	r3, r9
 800d3da:	1891      	adds	r1, r2, r2
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	415b      	adcs	r3, r3
 800d3e0:	60fb      	str	r3, [r7, #12]
 800d3e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d3e6:	4641      	mov	r1, r8
 800d3e8:	1851      	adds	r1, r2, r1
 800d3ea:	6039      	str	r1, [r7, #0]
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	414b      	adcs	r3, r1
 800d3f0:	607b      	str	r3, [r7, #4]
 800d3f2:	f04f 0200 	mov.w	r2, #0
 800d3f6:	f04f 0300 	mov.w	r3, #0
 800d3fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d3fe:	4659      	mov	r1, fp
 800d400:	00cb      	lsls	r3, r1, #3
 800d402:	4651      	mov	r1, sl
 800d404:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d408:	4651      	mov	r1, sl
 800d40a:	00ca      	lsls	r2, r1, #3
 800d40c:	4610      	mov	r0, r2
 800d40e:	4619      	mov	r1, r3
 800d410:	4603      	mov	r3, r0
 800d412:	4642      	mov	r2, r8
 800d414:	189b      	adds	r3, r3, r2
 800d416:	66bb      	str	r3, [r7, #104]	; 0x68
 800d418:	464b      	mov	r3, r9
 800d41a:	460a      	mov	r2, r1
 800d41c:	eb42 0303 	adc.w	r3, r2, r3
 800d420:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	663b      	str	r3, [r7, #96]	; 0x60
 800d42c:	667a      	str	r2, [r7, #100]	; 0x64
 800d42e:	f04f 0200 	mov.w	r2, #0
 800d432:	f04f 0300 	mov.w	r3, #0
 800d436:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d43a:	4649      	mov	r1, r9
 800d43c:	008b      	lsls	r3, r1, #2
 800d43e:	4641      	mov	r1, r8
 800d440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d444:	4641      	mov	r1, r8
 800d446:	008a      	lsls	r2, r1, #2
 800d448:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d44c:	f7f3 fa22 	bl	8000894 <__aeabi_uldivmod>
 800d450:	4602      	mov	r2, r0
 800d452:	460b      	mov	r3, r1
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <UART_SetConfig+0x4e4>)
 800d456:	fba3 1302 	umull	r1, r3, r3, r2
 800d45a:	095b      	lsrs	r3, r3, #5
 800d45c:	2164      	movs	r1, #100	; 0x64
 800d45e:	fb01 f303 	mul.w	r3, r1, r3
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	3332      	adds	r3, #50	; 0x32
 800d468:	4a08      	ldr	r2, [pc, #32]	; (800d48c <UART_SetConfig+0x4e4>)
 800d46a:	fba2 2303 	umull	r2, r3, r2, r3
 800d46e:	095b      	lsrs	r3, r3, #5
 800d470:	f003 020f 	and.w	r2, r3, #15
 800d474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4422      	add	r2, r4
 800d47c:	609a      	str	r2, [r3, #8]
}
 800d47e:	bf00      	nop
 800d480:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d484:	46bd      	mov	sp, r7
 800d486:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d48a:	bf00      	nop
 800d48c:	51eb851f 	.word	0x51eb851f

0800d490 <arm_sin_f32>:
 800d490:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d50c <arm_sin_f32+0x7c>
 800d494:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d498:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4a0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800d4a4:	d42c      	bmi.n	800d500 <arm_sin_f32+0x70>
 800d4a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4aa:	eddf 6a19 	vldr	s13, [pc, #100]	; 800d510 <arm_sin_f32+0x80>
 800d4ae:	4a19      	ldr	r2, [pc, #100]	; (800d514 <arm_sin_f32+0x84>)
 800d4b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d4b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d4b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d4bc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c4:	bfa8      	it	ge
 800d4c6:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 800d4ca:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d4ce:	ee17 3a10 	vmov	r3, s14
 800d4d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4d6:	ee07 3a10 	vmov	s14, r3
 800d4da:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d4de:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800d4e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4e6:	edd1 6a01 	vldr	s13, [r1, #4]
 800d4ea:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d4ee:	ed91 0a00 	vldr	s0, [r1]
 800d4f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d4f6:	ee27 0a00 	vmul.f32	s0, s14, s0
 800d4fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d4fe:	4770      	bx	lr
 800d500:	ee17 3a90 	vmov	r3, s15
 800d504:	3b01      	subs	r3, #1
 800d506:	ee07 3a90 	vmov	s15, r3
 800d50a:	e7cc      	b.n	800d4a6 <arm_sin_f32+0x16>
 800d50c:	3e22f983 	.word	0x3e22f983
 800d510:	44000000 	.word	0x44000000
 800d514:	0800f3f4 	.word	0x0800f3f4

0800d518 <atoi>:
 800d518:	220a      	movs	r2, #10
 800d51a:	2100      	movs	r1, #0
 800d51c:	f000 b8d6 	b.w	800d6cc <strtol>

0800d520 <__errno>:
 800d520:	4b01      	ldr	r3, [pc, #4]	; (800d528 <__errno+0x8>)
 800d522:	6818      	ldr	r0, [r3, #0]
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	20008f5c 	.word	0x20008f5c

0800d52c <__libc_init_array>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	4d0d      	ldr	r5, [pc, #52]	; (800d564 <__libc_init_array+0x38>)
 800d530:	4c0d      	ldr	r4, [pc, #52]	; (800d568 <__libc_init_array+0x3c>)
 800d532:	1b64      	subs	r4, r4, r5
 800d534:	10a4      	asrs	r4, r4, #2
 800d536:	2600      	movs	r6, #0
 800d538:	42a6      	cmp	r6, r4
 800d53a:	d109      	bne.n	800d550 <__libc_init_array+0x24>
 800d53c:	4d0b      	ldr	r5, [pc, #44]	; (800d56c <__libc_init_array+0x40>)
 800d53e:	4c0c      	ldr	r4, [pc, #48]	; (800d570 <__libc_init_array+0x44>)
 800d540:	f000 f8ce 	bl	800d6e0 <_init>
 800d544:	1b64      	subs	r4, r4, r5
 800d546:	10a4      	asrs	r4, r4, #2
 800d548:	2600      	movs	r6, #0
 800d54a:	42a6      	cmp	r6, r4
 800d54c:	d105      	bne.n	800d55a <__libc_init_array+0x2e>
 800d54e:	bd70      	pop	{r4, r5, r6, pc}
 800d550:	f855 3b04 	ldr.w	r3, [r5], #4
 800d554:	4798      	blx	r3
 800d556:	3601      	adds	r6, #1
 800d558:	e7ee      	b.n	800d538 <__libc_init_array+0xc>
 800d55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d55e:	4798      	blx	r3
 800d560:	3601      	adds	r6, #1
 800d562:	e7f2      	b.n	800d54a <__libc_init_array+0x1e>
 800d564:	0800fd04 	.word	0x0800fd04
 800d568:	0800fd04 	.word	0x0800fd04
 800d56c:	0800fd04 	.word	0x0800fd04
 800d570:	0800fd08 	.word	0x0800fd08

0800d574 <memcpy>:
 800d574:	440a      	add	r2, r1
 800d576:	4291      	cmp	r1, r2
 800d578:	f100 33ff 	add.w	r3, r0, #4294967295
 800d57c:	d100      	bne.n	800d580 <memcpy+0xc>
 800d57e:	4770      	bx	lr
 800d580:	b510      	push	{r4, lr}
 800d582:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d58a:	4291      	cmp	r1, r2
 800d58c:	d1f9      	bne.n	800d582 <memcpy+0xe>
 800d58e:	bd10      	pop	{r4, pc}

0800d590 <memset>:
 800d590:	4402      	add	r2, r0
 800d592:	4603      	mov	r3, r0
 800d594:	4293      	cmp	r3, r2
 800d596:	d100      	bne.n	800d59a <memset+0xa>
 800d598:	4770      	bx	lr
 800d59a:	f803 1b01 	strb.w	r1, [r3], #1
 800d59e:	e7f9      	b.n	800d594 <memset+0x4>

0800d5a0 <strncmp>:
 800d5a0:	b510      	push	{r4, lr}
 800d5a2:	b17a      	cbz	r2, 800d5c4 <strncmp+0x24>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	3901      	subs	r1, #1
 800d5a8:	1884      	adds	r4, r0, r2
 800d5aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d5ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d5b2:	4290      	cmp	r0, r2
 800d5b4:	d101      	bne.n	800d5ba <strncmp+0x1a>
 800d5b6:	42a3      	cmp	r3, r4
 800d5b8:	d101      	bne.n	800d5be <strncmp+0x1e>
 800d5ba:	1a80      	subs	r0, r0, r2
 800d5bc:	bd10      	pop	{r4, pc}
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d1f3      	bne.n	800d5aa <strncmp+0xa>
 800d5c2:	e7fa      	b.n	800d5ba <strncmp+0x1a>
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	e7f9      	b.n	800d5bc <strncmp+0x1c>

0800d5c8 <_strtol_l.constprop.0>:
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ce:	d001      	beq.n	800d5d4 <_strtol_l.constprop.0+0xc>
 800d5d0:	2b24      	cmp	r3, #36	; 0x24
 800d5d2:	d906      	bls.n	800d5e2 <_strtol_l.constprop.0+0x1a>
 800d5d4:	f7ff ffa4 	bl	800d520 <__errno>
 800d5d8:	2316      	movs	r3, #22
 800d5da:	6003      	str	r3, [r0, #0]
 800d5dc:	2000      	movs	r0, #0
 800d5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d6c8 <_strtol_l.constprop.0+0x100>
 800d5e6:	460d      	mov	r5, r1
 800d5e8:	462e      	mov	r6, r5
 800d5ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d5f2:	f017 0708 	ands.w	r7, r7, #8
 800d5f6:	d1f7      	bne.n	800d5e8 <_strtol_l.constprop.0+0x20>
 800d5f8:	2c2d      	cmp	r4, #45	; 0x2d
 800d5fa:	d132      	bne.n	800d662 <_strtol_l.constprop.0+0x9a>
 800d5fc:	782c      	ldrb	r4, [r5, #0]
 800d5fe:	2701      	movs	r7, #1
 800d600:	1cb5      	adds	r5, r6, #2
 800d602:	2b00      	cmp	r3, #0
 800d604:	d05b      	beq.n	800d6be <_strtol_l.constprop.0+0xf6>
 800d606:	2b10      	cmp	r3, #16
 800d608:	d109      	bne.n	800d61e <_strtol_l.constprop.0+0x56>
 800d60a:	2c30      	cmp	r4, #48	; 0x30
 800d60c:	d107      	bne.n	800d61e <_strtol_l.constprop.0+0x56>
 800d60e:	782c      	ldrb	r4, [r5, #0]
 800d610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d614:	2c58      	cmp	r4, #88	; 0x58
 800d616:	d14d      	bne.n	800d6b4 <_strtol_l.constprop.0+0xec>
 800d618:	786c      	ldrb	r4, [r5, #1]
 800d61a:	2310      	movs	r3, #16
 800d61c:	3502      	adds	r5, #2
 800d61e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d622:	f108 38ff 	add.w	r8, r8, #4294967295
 800d626:	f04f 0c00 	mov.w	ip, #0
 800d62a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d62e:	4666      	mov	r6, ip
 800d630:	fb03 8a19 	mls	sl, r3, r9, r8
 800d634:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d638:	f1be 0f09 	cmp.w	lr, #9
 800d63c:	d816      	bhi.n	800d66c <_strtol_l.constprop.0+0xa4>
 800d63e:	4674      	mov	r4, lr
 800d640:	42a3      	cmp	r3, r4
 800d642:	dd24      	ble.n	800d68e <_strtol_l.constprop.0+0xc6>
 800d644:	f1bc 0f00 	cmp.w	ip, #0
 800d648:	db1e      	blt.n	800d688 <_strtol_l.constprop.0+0xc0>
 800d64a:	45b1      	cmp	r9, r6
 800d64c:	d31c      	bcc.n	800d688 <_strtol_l.constprop.0+0xc0>
 800d64e:	d101      	bne.n	800d654 <_strtol_l.constprop.0+0x8c>
 800d650:	45a2      	cmp	sl, r4
 800d652:	db19      	blt.n	800d688 <_strtol_l.constprop.0+0xc0>
 800d654:	fb06 4603 	mla	r6, r6, r3, r4
 800d658:	f04f 0c01 	mov.w	ip, #1
 800d65c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d660:	e7e8      	b.n	800d634 <_strtol_l.constprop.0+0x6c>
 800d662:	2c2b      	cmp	r4, #43	; 0x2b
 800d664:	bf04      	itt	eq
 800d666:	782c      	ldrbeq	r4, [r5, #0]
 800d668:	1cb5      	addeq	r5, r6, #2
 800d66a:	e7ca      	b.n	800d602 <_strtol_l.constprop.0+0x3a>
 800d66c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d670:	f1be 0f19 	cmp.w	lr, #25
 800d674:	d801      	bhi.n	800d67a <_strtol_l.constprop.0+0xb2>
 800d676:	3c37      	subs	r4, #55	; 0x37
 800d678:	e7e2      	b.n	800d640 <_strtol_l.constprop.0+0x78>
 800d67a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d67e:	f1be 0f19 	cmp.w	lr, #25
 800d682:	d804      	bhi.n	800d68e <_strtol_l.constprop.0+0xc6>
 800d684:	3c57      	subs	r4, #87	; 0x57
 800d686:	e7db      	b.n	800d640 <_strtol_l.constprop.0+0x78>
 800d688:	f04f 3cff 	mov.w	ip, #4294967295
 800d68c:	e7e6      	b.n	800d65c <_strtol_l.constprop.0+0x94>
 800d68e:	f1bc 0f00 	cmp.w	ip, #0
 800d692:	da05      	bge.n	800d6a0 <_strtol_l.constprop.0+0xd8>
 800d694:	2322      	movs	r3, #34	; 0x22
 800d696:	6003      	str	r3, [r0, #0]
 800d698:	4646      	mov	r6, r8
 800d69a:	b942      	cbnz	r2, 800d6ae <_strtol_l.constprop.0+0xe6>
 800d69c:	4630      	mov	r0, r6
 800d69e:	e79e      	b.n	800d5de <_strtol_l.constprop.0+0x16>
 800d6a0:	b107      	cbz	r7, 800d6a4 <_strtol_l.constprop.0+0xdc>
 800d6a2:	4276      	negs	r6, r6
 800d6a4:	2a00      	cmp	r2, #0
 800d6a6:	d0f9      	beq.n	800d69c <_strtol_l.constprop.0+0xd4>
 800d6a8:	f1bc 0f00 	cmp.w	ip, #0
 800d6ac:	d000      	beq.n	800d6b0 <_strtol_l.constprop.0+0xe8>
 800d6ae:	1e69      	subs	r1, r5, #1
 800d6b0:	6011      	str	r1, [r2, #0]
 800d6b2:	e7f3      	b.n	800d69c <_strtol_l.constprop.0+0xd4>
 800d6b4:	2430      	movs	r4, #48	; 0x30
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1b1      	bne.n	800d61e <_strtol_l.constprop.0+0x56>
 800d6ba:	2308      	movs	r3, #8
 800d6bc:	e7af      	b.n	800d61e <_strtol_l.constprop.0+0x56>
 800d6be:	2c30      	cmp	r4, #48	; 0x30
 800d6c0:	d0a5      	beq.n	800d60e <_strtol_l.constprop.0+0x46>
 800d6c2:	230a      	movs	r3, #10
 800d6c4:	e7ab      	b.n	800d61e <_strtol_l.constprop.0+0x56>
 800d6c6:	bf00      	nop
 800d6c8:	0800fbf9 	.word	0x0800fbf9

0800d6cc <strtol>:
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	460a      	mov	r2, r1
 800d6d0:	4601      	mov	r1, r0
 800d6d2:	4802      	ldr	r0, [pc, #8]	; (800d6dc <strtol+0x10>)
 800d6d4:	6800      	ldr	r0, [r0, #0]
 800d6d6:	f7ff bf77 	b.w	800d5c8 <_strtol_l.constprop.0>
 800d6da:	bf00      	nop
 800d6dc:	20008f5c 	.word	0x20008f5c

0800d6e0 <_init>:
 800d6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e2:	bf00      	nop
 800d6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6e6:	bc08      	pop	{r3}
 800d6e8:	469e      	mov	lr, r3
 800d6ea:	4770      	bx	lr

0800d6ec <_fini>:
 800d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ee:	bf00      	nop
 800d6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f2:	bc08      	pop	{r3}
 800d6f4:	469e      	mov	lr, r3
 800d6f6:	4770      	bx	lr
